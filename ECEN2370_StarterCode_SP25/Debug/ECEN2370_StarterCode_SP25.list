
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c78  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001204  08006e24  08006e24  00007e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008028  08008028  0000a080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008028  08008028  00009028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008030  08008030  0000a080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008030  08008030  00009030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008034  08008034  00009034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08008038  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a080  2**0
                  CONTENTS
 10 .bss          00025d8c  20000080  20000080  0000a080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025e0c  20025e0c  0000a080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d65  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002eb2  00000000  00000000  0001ce15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001320  00000000  00000000  0001fcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ecd  00000000  00000000  00020fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263d5  00000000  00000000  00021eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016dc2  00000000  00000000  0004828a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0bfb  00000000  00000000  0005f04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013fc47  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005894  00000000  00000000  0013fc8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a3  00000000  00000000  00145520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000080 	.word	0x20000080
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006e0c 	.word	0x08006e0c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000084 	.word	0x20000084
 80001e8:	08006e0c 	.word	0x08006e0c

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b988 	b.w	8000524 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	468e      	mov	lr, r1
 8000234:	4604      	mov	r4, r0
 8000236:	4688      	mov	r8, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d962      	bls.n	8000308 <__udivmoddi4+0xdc>
 8000242:	fab2 f682 	clz	r6, r2
 8000246:	b14e      	cbz	r6, 800025c <__udivmoddi4+0x30>
 8000248:	f1c6 0320 	rsb	r3, r6, #32
 800024c:	fa01 f806 	lsl.w	r8, r1, r6
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	40b7      	lsls	r7, r6
 8000256:	ea43 0808 	orr.w	r8, r3, r8
 800025a:	40b4      	lsls	r4, r6
 800025c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000260:	fa1f fc87 	uxth.w	ip, r7
 8000264:	fbb8 f1fe 	udiv	r1, r8, lr
 8000268:	0c23      	lsrs	r3, r4, #16
 800026a:	fb0e 8811 	mls	r8, lr, r1, r8
 800026e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000272:	fb01 f20c 	mul.w	r2, r1, ip
 8000276:	429a      	cmp	r2, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x62>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000280:	f080 80ea 	bcs.w	8000458 <__udivmoddi4+0x22c>
 8000284:	429a      	cmp	r2, r3
 8000286:	f240 80e7 	bls.w	8000458 <__udivmoddi4+0x22c>
 800028a:	3902      	subs	r1, #2
 800028c:	443b      	add	r3, r7
 800028e:	1a9a      	subs	r2, r3, r2
 8000290:	b2a3      	uxth	r3, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800029e:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a2:	459c      	cmp	ip, r3
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0x8e>
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002ac:	f080 80d6 	bcs.w	800045c <__udivmoddi4+0x230>
 80002b0:	459c      	cmp	ip, r3
 80002b2:	f240 80d3 	bls.w	800045c <__udivmoddi4+0x230>
 80002b6:	443b      	add	r3, r7
 80002b8:	3802      	subs	r0, #2
 80002ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002be:	eba3 030c 	sub.w	r3, r3, ip
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40f3      	lsrs	r3, r6
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xb6>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb0>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa2>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x14c>
 80002ea:	4573      	cmp	r3, lr
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xc8>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 8105 	bhi.w	80004fe <__udivmoddi4+0x2d2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4690      	mov	r8, r2
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e5      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000302:	e9c5 4800 	strd	r4, r8, [r5]
 8000306:	e7e2      	b.n	80002ce <__udivmoddi4+0xa2>
 8000308:	2a00      	cmp	r2, #0
 800030a:	f000 8090 	beq.w	800042e <__udivmoddi4+0x202>
 800030e:	fab2 f682 	clz	r6, r2
 8000312:	2e00      	cmp	r6, #0
 8000314:	f040 80a4 	bne.w	8000460 <__udivmoddi4+0x234>
 8000318:	1a8a      	subs	r2, r1, r2
 800031a:	0c03      	lsrs	r3, r0, #16
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	b280      	uxth	r0, r0
 8000322:	b2bc      	uxth	r4, r7
 8000324:	2101      	movs	r1, #1
 8000326:	fbb2 fcfe 	udiv	ip, r2, lr
 800032a:	fb0e 221c 	mls	r2, lr, ip, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb04 f20c 	mul.w	r2, r4, ip
 8000336:	429a      	cmp	r2, r3
 8000338:	d907      	bls.n	800034a <__udivmoddi4+0x11e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x11c>
 8000342:	429a      	cmp	r2, r3
 8000344:	f200 80e0 	bhi.w	8000508 <__udivmoddi4+0x2dc>
 8000348:	46c4      	mov	ip, r8
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000350:	fb0e 3312 	mls	r3, lr, r2, r3
 8000354:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000358:	fb02 f404 	mul.w	r4, r2, r4
 800035c:	429c      	cmp	r4, r3
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x144>
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x142>
 8000368:	429c      	cmp	r4, r3
 800036a:	f200 80ca 	bhi.w	8000502 <__udivmoddi4+0x2d6>
 800036e:	4602      	mov	r2, r0
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x98>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa0e f401 	lsl.w	r4, lr, r1
 8000388:	fa20 f306 	lsr.w	r3, r0, r6
 800038c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000390:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	fa1f fc87 	uxth.w	ip, r7
 800039e:	fbbe f0f9 	udiv	r0, lr, r9
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80003a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1a0>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003be:	f080 809c 	bcs.w	80004fa <__udivmoddi4+0x2ce>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8099 	bls.w	80004fa <__udivmoddi4+0x2ce>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	fa1f fe83 	uxth.w	lr, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e4:	45a4      	cmp	ip, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1ce>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ee:	f080 8082 	bcs.w	80004f6 <__udivmoddi4+0x2ca>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d97f      	bls.n	80004f6 <__udivmoddi4+0x2ca>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	fba0 ec02 	umull	lr, ip, r0, r2
 8000406:	4564      	cmp	r4, ip
 8000408:	4673      	mov	r3, lr
 800040a:	46e1      	mov	r9, ip
 800040c:	d362      	bcc.n	80004d4 <__udivmoddi4+0x2a8>
 800040e:	d05f      	beq.n	80004d0 <__udivmoddi4+0x2a4>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x1fe>
 8000412:	ebb8 0203 	subs.w	r2, r8, r3
 8000416:	eb64 0409 	sbc.w	r4, r4, r9
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431e      	orrs	r6, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c5 6400 	strd	r6, r4, [r5]
 800042a:	2100      	movs	r1, #0
 800042c:	e74f      	b.n	80002ce <__udivmoddi4+0xa2>
 800042e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000432:	0c01      	lsrs	r1, r0, #16
 8000434:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000438:	b280      	uxth	r0, r0
 800043a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800043e:	463b      	mov	r3, r7
 8000440:	4638      	mov	r0, r7
 8000442:	463c      	mov	r4, r7
 8000444:	46b8      	mov	r8, r7
 8000446:	46be      	mov	lr, r7
 8000448:	2620      	movs	r6, #32
 800044a:	fbb1 f1f7 	udiv	r1, r1, r7
 800044e:	eba2 0208 	sub.w	r2, r2, r8
 8000452:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000456:	e766      	b.n	8000326 <__udivmoddi4+0xfa>
 8000458:	4601      	mov	r1, r0
 800045a:	e718      	b.n	800028e <__udivmoddi4+0x62>
 800045c:	4610      	mov	r0, r2
 800045e:	e72c      	b.n	80002ba <__udivmoddi4+0x8e>
 8000460:	f1c6 0220 	rsb	r2, r6, #32
 8000464:	fa2e f302 	lsr.w	r3, lr, r2
 8000468:	40b7      	lsls	r7, r6
 800046a:	40b1      	lsls	r1, r6
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	430a      	orrs	r2, r1
 8000476:	fbb3 f8fe 	udiv	r8, r3, lr
 800047a:	b2bc      	uxth	r4, r7
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	0c11      	lsrs	r1, r2, #16
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb08 f904 	mul.w	r9, r8, r4
 800048a:	40b0      	lsls	r0, r6
 800048c:	4589      	cmp	r9, r1
 800048e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000492:	b280      	uxth	r0, r0
 8000494:	d93e      	bls.n	8000514 <__udivmoddi4+0x2e8>
 8000496:	1879      	adds	r1, r7, r1
 8000498:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x276>
 800049e:	4589      	cmp	r9, r1
 80004a0:	d81f      	bhi.n	80004e2 <__udivmoddi4+0x2b6>
 80004a2:	eba1 0109 	sub.w	r1, r1, r9
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fb09 f804 	mul.w	r8, r9, r4
 80004ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b2:	b292      	uxth	r2, r2
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d229      	bcs.n	8000510 <__udivmoddi4+0x2e4>
 80004bc:	18ba      	adds	r2, r7, r2
 80004be:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004c2:	d2c4      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d2c2      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c8:	f1a9 0102 	sub.w	r1, r9, #2
 80004cc:	443a      	add	r2, r7
 80004ce:	e7be      	b.n	800044e <__udivmoddi4+0x222>
 80004d0:	45f0      	cmp	r8, lr
 80004d2:	d29d      	bcs.n	8000410 <__udivmoddi4+0x1e4>
 80004d4:	ebbe 0302 	subs.w	r3, lr, r2
 80004d8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004dc:	3801      	subs	r0, #1
 80004de:	46e1      	mov	r9, ip
 80004e0:	e796      	b.n	8000410 <__udivmoddi4+0x1e4>
 80004e2:	eba7 0909 	sub.w	r9, r7, r9
 80004e6:	4449      	add	r1, r9
 80004e8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004ec:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f0:	fb09 f804 	mul.w	r8, r9, r4
 80004f4:	e7db      	b.n	80004ae <__udivmoddi4+0x282>
 80004f6:	4673      	mov	r3, lr
 80004f8:	e77f      	b.n	80003fa <__udivmoddi4+0x1ce>
 80004fa:	4650      	mov	r0, sl
 80004fc:	e766      	b.n	80003cc <__udivmoddi4+0x1a0>
 80004fe:	4608      	mov	r0, r1
 8000500:	e6fd      	b.n	80002fe <__udivmoddi4+0xd2>
 8000502:	443b      	add	r3, r7
 8000504:	3a02      	subs	r2, #2
 8000506:	e733      	b.n	8000370 <__udivmoddi4+0x144>
 8000508:	f1ac 0c02 	sub.w	ip, ip, #2
 800050c:	443b      	add	r3, r7
 800050e:	e71c      	b.n	800034a <__udivmoddi4+0x11e>
 8000510:	4649      	mov	r1, r9
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x222>
 8000514:	eba1 0109 	sub.w	r1, r1, r9
 8000518:	46c4      	mov	ip, r8
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	e7c4      	b.n	80004ae <__udivmoddi4+0x282>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 800052c:	f006 f98a 	bl	8006844 <initialise_monitor_handles>
    LTCD__Init();
 8000530:	f000 fc84 	bl	8000e3c <LTCD__Init>
    LTCD_Layer_Init(0);
 8000534:	2000      	movs	r0, #0
 8000536:	f000 fc41 	bl	8000dbc <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 800053a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800053e:	2000      	movs	r0, #0
 8000540:	f000 fd4c 	bl	8000fdc <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 8000544:	f000 fe22 	bl	800118c <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 8000548:	4b02      	ldr	r3, [pc, #8]	@ (8000554 <ApplicationInit+0x2c>)
 800054a:	2201      	movs	r2, #1
 800054c:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	2000009c 	.word	0x2000009c

08000558 <ApplicationFirstScreen>:
void ApplicationFirstScreen(){
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	firstScreen();
 800055c:	f000 f81e 	bl	800059c <firstScreen>
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}

08000564 <LCD_Touch_Polling_Demo>:
// 	visualDemo();
// }

#if COMPILE_TOUCH_FUNCTIONS == 1
void LCD_Touch_Polling_Demo(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	while (1) {
		/* If touch pressed */
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000568:	480b      	ldr	r0, [pc, #44]	@ (8000598 <LCD_Touch_Polling_Demo+0x34>)
 800056a:	f000 fe1a 	bl	80011a2 <returnTouchStateAndLocation>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d1f9      	bne.n	8000568 <LCD_Touch_Polling_Demo+0x4>
			/* Touch valid */
			if(StaticTouchData.x <= 120){
 8000574:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <LCD_Touch_Polling_Demo+0x34>)
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	2b78      	cmp	r3, #120	@ 0x78
 800057a:	d802      	bhi.n	8000582 <LCD_Touch_Polling_Demo+0x1e>

				PlayOnePlayer();
 800057c:	f000 fa2a 	bl	80009d4 <PlayOnePlayer>
 8000580:	e005      	b.n	800058e <LCD_Touch_Polling_Demo+0x2a>


			}
			else if(StaticTouchData.x >= 120){
 8000582:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <LCD_Touch_Polling_Demo+0x34>)
 8000584:	881b      	ldrh	r3, [r3, #0]
 8000586:	2b77      	cmp	r3, #119	@ 0x77
 8000588:	d901      	bls.n	800058e <LCD_Touch_Polling_Demo+0x2a>
				PlayTwoPlayer();
 800058a:	f000 fae5 	bl	8000b58 <PlayTwoPlayer>
			}
			HAL_Delay(1000);
 800058e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000592:	f002 fba9 	bl	8002ce8 <HAL_Delay>
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000596:	e7e7      	b.n	8000568 <LCD_Touch_Polling_Demo+0x4>
 8000598:	2000009c 	.word	0x2000009c

0800059c <firstScreen>:





void firstScreen(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    LCD_Clear(0,LCD_COLOR_BLUE);
 80005a0:	211f      	movs	r1, #31
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 fd1a 	bl	8000fdc <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 fd39 	bl	8001020 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80005ae:	483c      	ldr	r0, [pc, #240]	@ (80006a0 <firstScreen+0x104>)
 80005b0:	f000 fd46 	bl	8001040 <LCD_SetFont>
	LCD_DisplayChar(60,140,'C');
 80005b4:	2243      	movs	r2, #67	@ 0x43
 80005b6:	218c      	movs	r1, #140	@ 0x8c
 80005b8:	203c      	movs	r0, #60	@ 0x3c
 80005ba:	f000 fdbf 	bl	800113c <LCD_DisplayChar>
	LCD_DisplayChar(75,140,'o');
 80005be:	226f      	movs	r2, #111	@ 0x6f
 80005c0:	218c      	movs	r1, #140	@ 0x8c
 80005c2:	204b      	movs	r0, #75	@ 0x4b
 80005c4:	f000 fdba 	bl	800113c <LCD_DisplayChar>
	LCD_DisplayChar(90,140,'n');
 80005c8:	226e      	movs	r2, #110	@ 0x6e
 80005ca:	218c      	movs	r1, #140	@ 0x8c
 80005cc:	205a      	movs	r0, #90	@ 0x5a
 80005ce:	f000 fdb5 	bl	800113c <LCD_DisplayChar>
	LCD_DisplayChar(105,140,'n');
 80005d2:	226e      	movs	r2, #110	@ 0x6e
 80005d4:	218c      	movs	r1, #140	@ 0x8c
 80005d6:	2069      	movs	r0, #105	@ 0x69
 80005d8:	f000 fdb0 	bl	800113c <LCD_DisplayChar>
	LCD_DisplayChar(120,140,'e');
 80005dc:	2265      	movs	r2, #101	@ 0x65
 80005de:	218c      	movs	r1, #140	@ 0x8c
 80005e0:	2078      	movs	r0, #120	@ 0x78
 80005e2:	f000 fdab 	bl	800113c <LCD_DisplayChar>
	LCD_DisplayChar(135,140,'c');
 80005e6:	2263      	movs	r2, #99	@ 0x63
 80005e8:	218c      	movs	r1, #140	@ 0x8c
 80005ea:	2087      	movs	r0, #135	@ 0x87
 80005ec:	f000 fda6 	bl	800113c <LCD_DisplayChar>
	LCD_DisplayChar(150,140,'t');
 80005f0:	2274      	movs	r2, #116	@ 0x74
 80005f2:	218c      	movs	r1, #140	@ 0x8c
 80005f4:	2096      	movs	r0, #150	@ 0x96
 80005f6:	f000 fda1 	bl	800113c <LCD_DisplayChar>
	LCD_DisplayChar(180,140,'4');
 80005fa:	2234      	movs	r2, #52	@ 0x34
 80005fc:	218c      	movs	r1, #140	@ 0x8c
 80005fe:	20b4      	movs	r0, #180	@ 0xb4
 8000600:	f000 fd9c 	bl	800113c <LCD_DisplayChar>

    LCD_DisplayChar(10,190,'1');
 8000604:	2231      	movs	r2, #49	@ 0x31
 8000606:	21be      	movs	r1, #190	@ 0xbe
 8000608:	200a      	movs	r0, #10
 800060a:	f000 fd97 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(20,190,'P');
 800060e:	2250      	movs	r2, #80	@ 0x50
 8000610:	21be      	movs	r1, #190	@ 0xbe
 8000612:	2014      	movs	r0, #20
 8000614:	f000 fd92 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(30,190,'L');
 8000618:	224c      	movs	r2, #76	@ 0x4c
 800061a:	21be      	movs	r1, #190	@ 0xbe
 800061c:	201e      	movs	r0, #30
 800061e:	f000 fd8d 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(40,190,'A');
 8000622:	2241      	movs	r2, #65	@ 0x41
 8000624:	21be      	movs	r1, #190	@ 0xbe
 8000626:	2028      	movs	r0, #40	@ 0x28
 8000628:	f000 fd88 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(55,190,'Y');
 800062c:	2259      	movs	r2, #89	@ 0x59
 800062e:	21be      	movs	r1, #190	@ 0xbe
 8000630:	2037      	movs	r0, #55	@ 0x37
 8000632:	f000 fd83 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(70,190,'E');
 8000636:	2245      	movs	r2, #69	@ 0x45
 8000638:	21be      	movs	r1, #190	@ 0xbe
 800063a:	2046      	movs	r0, #70	@ 0x46
 800063c:	f000 fd7e 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(85,190,'R');
 8000640:	2252      	movs	r2, #82	@ 0x52
 8000642:	21be      	movs	r1, #190	@ 0xbe
 8000644:	2055      	movs	r0, #85	@ 0x55
 8000646:	f000 fd79 	bl	800113c <LCD_DisplayChar>
    

    LCD_DisplayChar(115,190,'2');
 800064a:	2232      	movs	r2, #50	@ 0x32
 800064c:	21be      	movs	r1, #190	@ 0xbe
 800064e:	2073      	movs	r0, #115	@ 0x73
 8000650:	f000 fd74 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(135,190,'P');
 8000654:	2250      	movs	r2, #80	@ 0x50
 8000656:	21be      	movs	r1, #190	@ 0xbe
 8000658:	2087      	movs	r0, #135	@ 0x87
 800065a:	f000 fd6f 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(145,190,'L');
 800065e:	224c      	movs	r2, #76	@ 0x4c
 8000660:	21be      	movs	r1, #190	@ 0xbe
 8000662:	2091      	movs	r0, #145	@ 0x91
 8000664:	f000 fd6a 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(155,190,'A');
 8000668:	2241      	movs	r2, #65	@ 0x41
 800066a:	21be      	movs	r1, #190	@ 0xbe
 800066c:	209b      	movs	r0, #155	@ 0x9b
 800066e:	f000 fd65 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(170,190,'Y');
 8000672:	2259      	movs	r2, #89	@ 0x59
 8000674:	21be      	movs	r1, #190	@ 0xbe
 8000676:	20aa      	movs	r0, #170	@ 0xaa
 8000678:	f000 fd60 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(185,190,'E');
 800067c:	2245      	movs	r2, #69	@ 0x45
 800067e:	21be      	movs	r1, #190	@ 0xbe
 8000680:	20b9      	movs	r0, #185	@ 0xb9
 8000682:	f000 fd5b 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(200,190,'R');
 8000686:	2252      	movs	r2, #82	@ 0x52
 8000688:	21be      	movs	r1, #190	@ 0xbe
 800068a:	20c8      	movs	r0, #200	@ 0xc8
 800068c:	f000 fd56 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(215,190,'S');
 8000690:	2253      	movs	r2, #83	@ 0x53
 8000692:	21be      	movs	r1, #190	@ 0xbe
 8000694:	20d7      	movs	r0, #215	@ 0xd7
 8000696:	f000 fd51 	bl	800113c <LCD_DisplayChar>
    
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000004 	.word	0x20000004

080006a4 <initBoard>:


void initBoard(void) {
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
    for (int r = 0; r < ROWS; r++) {
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	e015      	b.n	80006dc <initBoard+0x38>
        for (int c = 0; c < COLS; c++) {
 80006b0:	2300      	movs	r3, #0
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	e00c      	b.n	80006d0 <initBoard+0x2c>
            board[r][c] = ' ';
 80006b6:	490e      	ldr	r1, [pc, #56]	@ (80006f0 <initBoard+0x4c>)
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	4613      	mov	r3, r2
 80006bc:	00db      	lsls	r3, r3, #3
 80006be:	1a9b      	subs	r3, r3, r2
 80006c0:	18ca      	adds	r2, r1, r3
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	4413      	add	r3, r2
 80006c6:	2220      	movs	r2, #32
 80006c8:	701a      	strb	r2, [r3, #0]
        for (int c = 0; c < COLS; c++) {
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	3301      	adds	r3, #1
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	2b06      	cmp	r3, #6
 80006d4:	ddef      	ble.n	80006b6 <initBoard+0x12>
    for (int r = 0; r < ROWS; r++) {
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3301      	adds	r3, #1
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b05      	cmp	r3, #5
 80006e0:	dde6      	ble.n	80006b0 <initBoard+0xc>
        }
    }
}
 80006e2:	bf00      	nop
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	200000a4 	.word	0x200000a4

080006f4 <GameScreen_Init>:


void GameScreen_Init(void) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
    LCD_Clear(0, BOARD_BG_COLOR);
 80006fa:	211f      	movs	r1, #31
 80006fc:	2000      	movs	r0, #0
 80006fe:	f000 fc6d 	bl	8000fdc <LCD_Clear>
    for (int r = 0; r < ROWS; r++) {
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	e021      	b.n	800074c <GameScreen_Init+0x58>
        for (int c = 0; c < COLS; c++) {
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	e018      	b.n	8000740 <GameScreen_Init+0x4c>
            uint16_t x = ORIGIN_X + c * CELL_SPACING_X;
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	b29b      	uxth	r3, r3
 8000712:	015b      	lsls	r3, r3, #5
 8000714:	b29b      	uxth	r3, r3
 8000716:	3314      	adds	r3, #20
 8000718:	80fb      	strh	r3, [r7, #6]
            uint16_t y = ORIGIN_Y + r * CELL_SPACING_Y;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	b29b      	uxth	r3, r3
 800071e:	461a      	mov	r2, r3
 8000720:	0092      	lsls	r2, r2, #2
 8000722:	4413      	add	r3, r2
 8000724:	00db      	lsls	r3, r3, #3
 8000726:	b29b      	uxth	r3, r3
 8000728:	333c      	adds	r3, #60	@ 0x3c
 800072a:	80bb      	strh	r3, [r7, #4]
            LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, EMPTY_HOLE_COLOR);
 800072c:	88b9      	ldrh	r1, [r7, #4]
 800072e:	88f8      	ldrh	r0, [r7, #6]
 8000730:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000734:	220d      	movs	r2, #13
 8000736:	f000 fbfd 	bl	8000f34 <LCD_Draw_Circle_Fill>
        for (int c = 0; c < COLS; c++) {
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	3301      	adds	r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	2b06      	cmp	r3, #6
 8000744:	dde3      	ble.n	800070e <GameScreen_Init+0x1a>
    for (int r = 0; r < ROWS; r++) {
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	3301      	adds	r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	2b05      	cmp	r3, #5
 8000750:	ddda      	ble.n	8000708 <GameScreen_Init+0x14>
        }
    }
}
 8000752:	bf00      	nop
 8000754:	bf00      	nop
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <PollTouchColumn>:
        }
    }
}


static int PollTouchColumn(char currentPlayer) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
    while (1) {
        if (returnTouchStateAndLocation(&touchData) == STMPE811_State_Ok) {
 8000766:	4835      	ldr	r0, [pc, #212]	@ (800083c <PollTouchColumn+0xe0>)
 8000768:	f000 fd1b 	bl	80011a2 <returnTouchStateAndLocation>
 800076c:	4603      	mov	r3, r0
 800076e:	2b02      	cmp	r3, #2
 8000770:	d15c      	bne.n	800082c <PollTouchColumn+0xd0>
            DetermineTouchPosition(&touchData);
 8000772:	4832      	ldr	r0, [pc, #200]	@ (800083c <PollTouchColumn+0xe0>)
 8000774:	f000 fd21 	bl	80011ba <DetermineTouchPosition>
            int tx = touchData.x;
 8000778:	4b30      	ldr	r3, [pc, #192]	@ (800083c <PollTouchColumn+0xe0>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	617b      	str	r3, [r7, #20]


            if (tx >= ORIGIN_X - CELL_SPACING_X/2 &&
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	2b03      	cmp	r3, #3
 8000782:	d953      	bls.n	800082c <PollTouchColumn+0xd0>
                tx <= ORIGIN_X + (COLS-1)*CELL_SPACING_X + CELL_SPACING_X/2) {
 8000784:	697b      	ldr	r3, [r7, #20]
            if (tx >= ORIGIN_X - CELL_SPACING_X/2 &&
 8000786:	2be4      	cmp	r3, #228	@ 0xe4
 8000788:	d850      	bhi.n	800082c <PollTouchColumn+0xd0>

                int col = (tx - (ORIGIN_X - CELL_SPACING_X/2)) / CELL_SPACING_X;
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	3b04      	subs	r3, #4
 800078e:	095b      	lsrs	r3, r3, #5
 8000790:	613b      	str	r3, [r7, #16]
                if (col >= 0 && col < COLS) {
 8000792:	693b      	ldr	r3, [r7, #16]
 8000794:	2b00      	cmp	r3, #0
 8000796:	db49      	blt.n	800082c <PollTouchColumn+0xd0>
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	2b06      	cmp	r3, #6
 800079c:	dc46      	bgt.n	800082c <PollTouchColumn+0xd0>

                    int rowIndex = -1;
 800079e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007a2:	61fb      	str	r3, [r7, #28]
                    for (int r = ROWS - 1; r >= 0; r--) {
 80007a4:	2305      	movs	r3, #5
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	e01a      	b.n	80007e0 <PollTouchColumn+0x84>
                        if (board[r][col] == ' ') {
 80007aa:	4925      	ldr	r1, [pc, #148]	@ (8000840 <PollTouchColumn+0xe4>)
 80007ac:	69ba      	ldr	r2, [r7, #24]
 80007ae:	4613      	mov	r3, r2
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	18ca      	adds	r2, r1, r3
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	4413      	add	r3, r2
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b20      	cmp	r3, #32
 80007be:	d10c      	bne.n	80007da <PollTouchColumn+0x7e>
                            rowIndex = r;
 80007c0:	69bb      	ldr	r3, [r7, #24]
 80007c2:	61fb      	str	r3, [r7, #28]
                            board[r][col] = currentPlayer;
 80007c4:	491e      	ldr	r1, [pc, #120]	@ (8000840 <PollTouchColumn+0xe4>)
 80007c6:	69ba      	ldr	r2, [r7, #24]
 80007c8:	4613      	mov	r3, r2
 80007ca:	00db      	lsls	r3, r3, #3
 80007cc:	1a9b      	subs	r3, r3, r2
 80007ce:	18ca      	adds	r2, r1, r3
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	4413      	add	r3, r2
 80007d4:	79fa      	ldrb	r2, [r7, #7]
 80007d6:	701a      	strb	r2, [r3, #0]
                            break;
 80007d8:	e005      	b.n	80007e6 <PollTouchColumn+0x8a>
                    for (int r = ROWS - 1; r >= 0; r--) {
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	3b01      	subs	r3, #1
 80007de:	61bb      	str	r3, [r7, #24]
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	dae1      	bge.n	80007aa <PollTouchColumn+0x4e>
                        }
                    }
                    if (rowIndex != -1) {
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80007ec:	d01e      	beq.n	800082c <PollTouchColumn+0xd0>

                        uint16_t color = (currentPlayer == 'X')
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b58      	cmp	r3, #88	@ 0x58
 80007f2:	d102      	bne.n	80007fa <PollTouchColumn+0x9e>
 80007f4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80007f8:	e000      	b.n	80007fc <PollTouchColumn+0xa0>
 80007fa:	2300      	movs	r3, #0
 80007fc:	81fb      	strh	r3, [r7, #14]
                            ? LCD_COLOR_RED
                            : LCD_COLOR_BLACK;

                        uint16_t x = ORIGIN_X + col * CELL_SPACING_X;
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	b29b      	uxth	r3, r3
 8000802:	015b      	lsls	r3, r3, #5
 8000804:	b29b      	uxth	r3, r3
 8000806:	3314      	adds	r3, #20
 8000808:	81bb      	strh	r3, [r7, #12]
                        uint16_t y = ORIGIN_Y + rowIndex * CELL_SPACING_Y;
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	b29b      	uxth	r3, r3
 800080e:	461a      	mov	r2, r3
 8000810:	0092      	lsls	r2, r2, #2
 8000812:	4413      	add	r3, r2
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	b29b      	uxth	r3, r3
 8000818:	333c      	adds	r3, #60	@ 0x3c
 800081a:	817b      	strh	r3, [r7, #10]

                        LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, color);
 800081c:	89fb      	ldrh	r3, [r7, #14]
 800081e:	8979      	ldrh	r1, [r7, #10]
 8000820:	89b8      	ldrh	r0, [r7, #12]
 8000822:	220d      	movs	r2, #13
 8000824:	f000 fb86 	bl	8000f34 <LCD_Draw_Circle_Fill>
                        return col;
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	e003      	b.n	8000834 <PollTouchColumn+0xd8>
                    }
                }
            }
        }
        HAL_Delay(50);
 800082c:	2032      	movs	r0, #50	@ 0x32
 800082e:	f002 fa5b 	bl	8002ce8 <HAL_Delay>
        if (returnTouchStateAndLocation(&touchData) == STMPE811_State_Ok) {
 8000832:	e798      	b.n	8000766 <PollTouchColumn+0xa>
    }
}
 8000834:	4618      	mov	r0, r3
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200000d0 	.word	0x200000d0
 8000840:	200000a4 	.word	0x200000a4

08000844 <checkDirection>:
        }
    }
    return -1;
}

int checkDirection(int startR, int startC, int dR, int dC, char piece) {
 8000844:	b480      	push	{r7}
 8000846:	b089      	sub	sp, #36	@ 0x24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
 8000850:	603b      	str	r3, [r7, #0]
    for (int i = 1; i < 4; i++) {
 8000852:	2301      	movs	r3, #1
 8000854:	61fb      	str	r3, [r7, #28]
 8000856:	e02b      	b.n	80008b0 <checkDirection+0x6c>
        int rr = startR + dR * i;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	69fa      	ldr	r2, [r7, #28]
 800085c:	fb02 f303 	mul.w	r3, r2, r3
 8000860:	68fa      	ldr	r2, [r7, #12]
 8000862:	4413      	add	r3, r2
 8000864:	61bb      	str	r3, [r7, #24]
        int cc = startC + dC * i;
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	69fa      	ldr	r2, [r7, #28]
 800086a:	fb02 f303 	mul.w	r3, r2, r3
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	4413      	add	r3, r2
 8000872:	617b      	str	r3, [r7, #20]
        if (rr < 0 || rr >= ROWS || cc < 0 || cc >= COLS || board[rr][cc] != piece)
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	2b00      	cmp	r3, #0
 8000878:	db15      	blt.n	80008a6 <checkDirection+0x62>
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	2b05      	cmp	r3, #5
 800087e:	dc12      	bgt.n	80008a6 <checkDirection+0x62>
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	2b00      	cmp	r3, #0
 8000884:	db0f      	blt.n	80008a6 <checkDirection+0x62>
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	2b06      	cmp	r3, #6
 800088a:	dc0c      	bgt.n	80008a6 <checkDirection+0x62>
 800088c:	490d      	ldr	r1, [pc, #52]	@ (80008c4 <checkDirection+0x80>)
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	4613      	mov	r3, r2
 8000892:	00db      	lsls	r3, r3, #3
 8000894:	1a9b      	subs	r3, r3, r2
 8000896:	18ca      	adds	r2, r1, r3
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	4413      	add	r3, r2
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d001      	beq.n	80008aa <checkDirection+0x66>
            return 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	e006      	b.n	80008b8 <checkDirection+0x74>
    for (int i = 1; i < 4; i++) {
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	3301      	adds	r3, #1
 80008ae:	61fb      	str	r3, [r7, #28]
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	2b03      	cmp	r3, #3
 80008b4:	ddd0      	ble.n	8000858 <checkDirection+0x14>
    }
    return 1;
 80008b6:	2301      	movs	r3, #1
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3724      	adds	r7, #36	@ 0x24
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	200000a4 	.word	0x200000a4

080008c8 <checkWin>:

int checkWin(char piece) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af02      	add	r7, sp, #8
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
    for (int r = 0; r < ROWS; r++) {
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	e047      	b.n	8000968 <checkWin+0xa0>
        for (int c = 0; c < COLS; c++) {
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	e03e      	b.n	800095c <checkWin+0x94>
            if (board[r][c] != piece) continue;
 80008de:	4926      	ldr	r1, [pc, #152]	@ (8000978 <checkWin+0xb0>)
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	4613      	mov	r3, r2
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	1a9b      	subs	r3, r3, r2
 80008e8:	18ca      	adds	r2, r1, r3
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	4413      	add	r3, r2
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	79fa      	ldrb	r2, [r7, #7]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d12e      	bne.n	8000954 <checkWin+0x8c>
            if (checkDirection(r, c, 0, 1, piece)  ||
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2301      	movs	r3, #1
 80008fc:	2200      	movs	r2, #0
 80008fe:	68b9      	ldr	r1, [r7, #8]
 8000900:	68f8      	ldr	r0, [r7, #12]
 8000902:	f7ff ff9f 	bl	8000844 <checkDirection>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d121      	bne.n	8000950 <checkWin+0x88>
                checkDirection(r, c, 1, 0, piece)  ||
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	2300      	movs	r3, #0
 8000912:	2201      	movs	r2, #1
 8000914:	68b9      	ldr	r1, [r7, #8]
 8000916:	68f8      	ldr	r0, [r7, #12]
 8000918:	f7ff ff94 	bl	8000844 <checkDirection>
 800091c:	4603      	mov	r3, r0
            if (checkDirection(r, c, 0, 1, piece)  ||
 800091e:	2b00      	cmp	r3, #0
 8000920:	d116      	bne.n	8000950 <checkWin+0x88>
                checkDirection(r, c, 1, 1, piece)  ||
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	2301      	movs	r3, #1
 8000928:	2201      	movs	r2, #1
 800092a:	68b9      	ldr	r1, [r7, #8]
 800092c:	68f8      	ldr	r0, [r7, #12]
 800092e:	f7ff ff89 	bl	8000844 <checkDirection>
 8000932:	4603      	mov	r3, r0
                checkDirection(r, c, 1, 0, piece)  ||
 8000934:	2b00      	cmp	r3, #0
 8000936:	d10b      	bne.n	8000950 <checkWin+0x88>
                checkDirection(r, c, -1, 1, piece)) {
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2301      	movs	r3, #1
 800093e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000942:	68b9      	ldr	r1, [r7, #8]
 8000944:	68f8      	ldr	r0, [r7, #12]
 8000946:	f7ff ff7d 	bl	8000844 <checkDirection>
 800094a:	4603      	mov	r3, r0
                checkDirection(r, c, 1, 1, piece)  ||
 800094c:	2b00      	cmp	r3, #0
 800094e:	d002      	beq.n	8000956 <checkWin+0x8e>
                return 1;
 8000950:	2301      	movs	r3, #1
 8000952:	e00d      	b.n	8000970 <checkWin+0xa8>
            if (board[r][c] != piece) continue;
 8000954:	bf00      	nop
        for (int c = 0; c < COLS; c++) {
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	3301      	adds	r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	2b06      	cmp	r3, #6
 8000960:	ddbd      	ble.n	80008de <checkWin+0x16>
    for (int r = 0; r < ROWS; r++) {
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	3301      	adds	r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2b05      	cmp	r3, #5
 800096c:	ddb4      	ble.n	80008d8 <checkWin+0x10>
            }
        }
    }
    return 0;
 800096e:	2300      	movs	r3, #0
}
 8000970:	4618      	mov	r0, r3
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200000a4 	.word	0x200000a4

0800097c <isBoardFull>:

int isBoardFull(void) {
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
    for (int r = 0; r < ROWS; r++) {
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	e018      	b.n	80009ba <isBoardFull+0x3e>
        for (int c = 0; c < COLS; c++) {
 8000988:	2300      	movs	r3, #0
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	e00f      	b.n	80009ae <isBoardFull+0x32>
            if (board[r][c] == ' ') return 0;
 800098e:	4910      	ldr	r1, [pc, #64]	@ (80009d0 <isBoardFull+0x54>)
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	4613      	mov	r3, r2
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	1a9b      	subs	r3, r3, r2
 8000998:	18ca      	adds	r2, r1, r3
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	4413      	add	r3, r2
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b20      	cmp	r3, #32
 80009a2:	d101      	bne.n	80009a8 <isBoardFull+0x2c>
 80009a4:	2300      	movs	r3, #0
 80009a6:	e00c      	b.n	80009c2 <isBoardFull+0x46>
        for (int c = 0; c < COLS; c++) {
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	3301      	adds	r3, #1
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	2b06      	cmp	r3, #6
 80009b2:	ddec      	ble.n	800098e <isBoardFull+0x12>
    for (int r = 0; r < ROWS; r++) {
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3301      	adds	r3, #1
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b05      	cmp	r3, #5
 80009be:	dde3      	ble.n	8000988 <isBoardFull+0xc>
        }
    }
    return 1;
 80009c0:	2301      	movs	r3, #1
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	200000a4 	.word	0x200000a4

080009d4 <PlayOnePlayer>:

enum {
    HUMAN = 'X', BOT = 'O'
};

void PlayOnePlayer(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
    initBoard();
 80009da:	f7ff fe63 	bl	80006a4 <initBoard>
    GameScreen_Init();
 80009de:	f7ff fe89 	bl	80006f4 <GameScreen_Init>
    // display mode text unchanged above board
    LCD_SetTextColor(LCD_COLOR_WHITE);
 80009e2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80009e6:	f000 fb1b 	bl	8001020 <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 80009ea:	4857      	ldr	r0, [pc, #348]	@ (8000b48 <PlayOnePlayer+0x174>)
 80009ec:	f000 fb28 	bl	8001040 <LCD_SetFont>
    LCD_DisplayChar(20,20,'S');
 80009f0:	2253      	movs	r2, #83	@ 0x53
 80009f2:	2114      	movs	r1, #20
 80009f4:	2014      	movs	r0, #20
 80009f6:	f000 fba1 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(35,20,'I');
 80009fa:	2249      	movs	r2, #73	@ 0x49
 80009fc:	2114      	movs	r1, #20
 80009fe:	2023      	movs	r0, #35	@ 0x23
 8000a00:	f000 fb9c 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(50,20,'N');
 8000a04:	224e      	movs	r2, #78	@ 0x4e
 8000a06:	2114      	movs	r1, #20
 8000a08:	2032      	movs	r0, #50	@ 0x32
 8000a0a:	f000 fb97 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(65,20,'G');
 8000a0e:	2247      	movs	r2, #71	@ 0x47
 8000a10:	2114      	movs	r1, #20
 8000a12:	2041      	movs	r0, #65	@ 0x41
 8000a14:	f000 fb92 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(80,20,'L');
 8000a18:	224c      	movs	r2, #76	@ 0x4c
 8000a1a:	2114      	movs	r1, #20
 8000a1c:	2050      	movs	r0, #80	@ 0x50
 8000a1e:	f000 fb8d 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(95,20,'E');
 8000a22:	2245      	movs	r2, #69	@ 0x45
 8000a24:	2114      	movs	r1, #20
 8000a26:	205f      	movs	r0, #95	@ 0x5f
 8000a28:	f000 fb88 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(125,20,'P');
 8000a2c:	2250      	movs	r2, #80	@ 0x50
 8000a2e:	2114      	movs	r1, #20
 8000a30:	207d      	movs	r0, #125	@ 0x7d
 8000a32:	f000 fb83 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(140,20,'L');
 8000a36:	224c      	movs	r2, #76	@ 0x4c
 8000a38:	2114      	movs	r1, #20
 8000a3a:	208c      	movs	r0, #140	@ 0x8c
 8000a3c:	f000 fb7e 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(155,20,'A');
 8000a40:	2241      	movs	r2, #65	@ 0x41
 8000a42:	2114      	movs	r1, #20
 8000a44:	209b      	movs	r0, #155	@ 0x9b
 8000a46:	f000 fb79 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(170,20,'Y');
 8000a4a:	2259      	movs	r2, #89	@ 0x59
 8000a4c:	2114      	movs	r1, #20
 8000a4e:	20aa      	movs	r0, #170	@ 0xaa
 8000a50:	f000 fb74 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(185,20,'E');
 8000a54:	2245      	movs	r2, #69	@ 0x45
 8000a56:	2114      	movs	r1, #20
 8000a58:	20b9      	movs	r0, #185	@ 0xb9
 8000a5a:	f000 fb6f 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(200,20,'R');
 8000a5e:	2252      	movs	r2, #82	@ 0x52
 8000a60:	2114      	movs	r1, #20
 8000a62:	20c8      	movs	r0, #200	@ 0xc8
 8000a64:	f000 fb6a 	bl	800113c <LCD_DisplayChar>

    char current = HUMAN;
 8000a68:	2358      	movs	r3, #88	@ 0x58
 8000a6a:	75fb      	strb	r3, [r7, #23]
    while (1) {
        int col;
        if (current == HUMAN) {
 8000a6c:	7dfb      	ldrb	r3, [r7, #23]
 8000a6e:	2b58      	cmp	r3, #88	@ 0x58
 8000a70:	d104      	bne.n	8000a7c <PlayOnePlayer+0xa8>
            col = PollTouchColumn(HUMAN);
 8000a72:	2058      	movs	r0, #88	@ 0x58
 8000a74:	f7ff fe72 	bl	800075c <PollTouchColumn>
 8000a78:	60f8      	str	r0, [r7, #12]
 8000a7a:	e04c      	b.n	8000b16 <PlayOnePlayer+0x142>
        } else {
            
            uint32_t rnd;
            do {
                HAL_RNG_GenerateRandomNumber(&hrng, &rnd);
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4832      	ldr	r0, [pc, #200]	@ (8000b4c <PlayOnePlayer+0x178>)
 8000a82:	f004 fec1 	bl	8005808 <HAL_RNG_GenerateRandomNumber>
                col = rnd % COLS;
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	4b31      	ldr	r3, [pc, #196]	@ (8000b50 <PlayOnePlayer+0x17c>)
 8000a8a:	fba3 2301 	umull	r2, r3, r3, r1
 8000a8e:	1aca      	subs	r2, r1, r3
 8000a90:	0852      	lsrs	r2, r2, #1
 8000a92:	4413      	add	r3, r2
 8000a94:	089a      	lsrs	r2, r3, #2
 8000a96:	4613      	mov	r3, r2
 8000a98:	00db      	lsls	r3, r3, #3
 8000a9a:	1a9b      	subs	r3, r3, r2
 8000a9c:	1aca      	subs	r2, r1, r3
 8000a9e:	60fa      	str	r2, [r7, #12]
            } while (board[0][col] != ' ');
 8000aa0:	4a2c      	ldr	r2, [pc, #176]	@ (8000b54 <PlayOnePlayer+0x180>)
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b20      	cmp	r3, #32
 8000aaa:	d1e7      	bne.n	8000a7c <PlayOnePlayer+0xa8>
          
            for (int r = ROWS - 1; r >= 0; r--) {
 8000aac:	2305      	movs	r3, #5
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	e02e      	b.n	8000b10 <PlayOnePlayer+0x13c>
                if (board[r][col] == ' ') {
 8000ab2:	4928      	ldr	r1, [pc, #160]	@ (8000b54 <PlayOnePlayer+0x180>)
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	1a9b      	subs	r3, r3, r2
 8000abc:	18ca      	adds	r2, r1, r3
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b20      	cmp	r3, #32
 8000ac6:	d120      	bne.n	8000b0a <PlayOnePlayer+0x136>
                    board[r][col] = BOT;
 8000ac8:	4922      	ldr	r1, [pc, #136]	@ (8000b54 <PlayOnePlayer+0x180>)
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4613      	mov	r3, r2
 8000ace:	00db      	lsls	r3, r3, #3
 8000ad0:	1a9b      	subs	r3, r3, r2
 8000ad2:	18ca      	adds	r2, r1, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	224f      	movs	r2, #79	@ 0x4f
 8000ada:	701a      	strb	r2, [r3, #0]
                    uint16_t x = ORIGIN_X + col * CELL_SPACING_X;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	015b      	lsls	r3, r3, #5
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	3314      	adds	r3, #20
 8000ae6:	817b      	strh	r3, [r7, #10]
                    uint16_t y = ORIGIN_Y + r * CELL_SPACING_Y;
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	461a      	mov	r2, r3
 8000aee:	0092      	lsls	r2, r2, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	333c      	adds	r3, #60	@ 0x3c
 8000af8:	813b      	strh	r3, [r7, #8]
                    LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, PLAYER2_COLOR);
 8000afa:	8939      	ldrh	r1, [r7, #8]
 8000afc:	8978      	ldrh	r0, [r7, #10]
 8000afe:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000b02:	220d      	movs	r2, #13
 8000b04:	f000 fa16 	bl	8000f34 <LCD_Draw_Circle_Fill>
                    break;
 8000b08:	e005      	b.n	8000b16 <PlayOnePlayer+0x142>
            for (int r = ROWS - 1; r >= 0; r--) {
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	dacd      	bge.n	8000ab2 <PlayOnePlayer+0xde>
                }
            }
        }
        if (checkWin(current) || isBoardFull()) break;
 8000b16:	7dfb      	ldrb	r3, [r7, #23]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fed5 	bl	80008c8 <checkWin>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10c      	bne.n	8000b3e <PlayOnePlayer+0x16a>
 8000b24:	f7ff ff2a 	bl	800097c <isBoardFull>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d107      	bne.n	8000b3e <PlayOnePlayer+0x16a>
        current = (current == HUMAN) ? BOT : HUMAN;
 8000b2e:	7dfb      	ldrb	r3, [r7, #23]
 8000b30:	2b58      	cmp	r3, #88	@ 0x58
 8000b32:	d101      	bne.n	8000b38 <PlayOnePlayer+0x164>
 8000b34:	234f      	movs	r3, #79	@ 0x4f
 8000b36:	e000      	b.n	8000b3a <PlayOnePlayer+0x166>
 8000b38:	2358      	movs	r3, #88	@ 0x58
 8000b3a:	75fb      	strb	r3, [r7, #23]
    while (1) {
 8000b3c:	e796      	b.n	8000a6c <PlayOnePlayer+0x98>
    }
}
 8000b3e:	bf00      	nop
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000004 	.word	0x20000004
 8000b4c:	20025b0c 	.word	0x20025b0c
 8000b50:	24924925 	.word	0x24924925
 8000b54:	200000a4 	.word	0x200000a4

08000b58 <PlayTwoPlayer>:



void PlayTwoPlayer(void) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
    initBoard();
 8000b5e:	f7ff fda1 	bl	80006a4 <initBoard>
    GameScreen_Init();
 8000b62:	f7ff fdc7 	bl	80006f4 <GameScreen_Init>

    LCD_SetTextColor(LCD_COLOR_WHITE);
 8000b66:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000b6a:	f000 fa59 	bl	8001020 <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 8000b6e:	482e      	ldr	r0, [pc, #184]	@ (8000c28 <PlayTwoPlayer+0xd0>)
 8000b70:	f000 fa66 	bl	8001040 <LCD_SetFont>
    LCD_DisplayChar(20,20,'2');
 8000b74:	2232      	movs	r2, #50	@ 0x32
 8000b76:	2114      	movs	r1, #20
 8000b78:	2014      	movs	r0, #20
 8000b7a:	f000 fadf 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(35,20,'-');
 8000b7e:	222d      	movs	r2, #45	@ 0x2d
 8000b80:	2114      	movs	r1, #20
 8000b82:	2023      	movs	r0, #35	@ 0x23
 8000b84:	f000 fada 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(50,20,'P');
 8000b88:	2250      	movs	r2, #80	@ 0x50
 8000b8a:	2114      	movs	r1, #20
 8000b8c:	2032      	movs	r0, #50	@ 0x32
 8000b8e:	f000 fad5 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(65,20,'L');
 8000b92:	224c      	movs	r2, #76	@ 0x4c
 8000b94:	2114      	movs	r1, #20
 8000b96:	2041      	movs	r0, #65	@ 0x41
 8000b98:	f000 fad0 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(80,20,'A');
 8000b9c:	2241      	movs	r2, #65	@ 0x41
 8000b9e:	2114      	movs	r1, #20
 8000ba0:	2050      	movs	r0, #80	@ 0x50
 8000ba2:	f000 facb 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(95,20,'Y');
 8000ba6:	2259      	movs	r2, #89	@ 0x59
 8000ba8:	2114      	movs	r1, #20
 8000baa:	205f      	movs	r0, #95	@ 0x5f
 8000bac:	f000 fac6 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(110,20,'E');
 8000bb0:	2245      	movs	r2, #69	@ 0x45
 8000bb2:	2114      	movs	r1, #20
 8000bb4:	206e      	movs	r0, #110	@ 0x6e
 8000bb6:	f000 fac1 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(125,20,'R');
 8000bba:	2252      	movs	r2, #82	@ 0x52
 8000bbc:	2114      	movs	r1, #20
 8000bbe:	207d      	movs	r0, #125	@ 0x7d
 8000bc0:	f000 fabc 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(155,20,'M');
 8000bc4:	224d      	movs	r2, #77	@ 0x4d
 8000bc6:	2114      	movs	r1, #20
 8000bc8:	209b      	movs	r0, #155	@ 0x9b
 8000bca:	f000 fab7 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(170,20,'O');
 8000bce:	224f      	movs	r2, #79	@ 0x4f
 8000bd0:	2114      	movs	r1, #20
 8000bd2:	20aa      	movs	r0, #170	@ 0xaa
 8000bd4:	f000 fab2 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(185,20,'D');
 8000bd8:	2244      	movs	r2, #68	@ 0x44
 8000bda:	2114      	movs	r1, #20
 8000bdc:	20b9      	movs	r0, #185	@ 0xb9
 8000bde:	f000 faad 	bl	800113c <LCD_DisplayChar>
    LCD_DisplayChar(200,20,'E');
 8000be2:	2245      	movs	r2, #69	@ 0x45
 8000be4:	2114      	movs	r1, #20
 8000be6:	20c8      	movs	r0, #200	@ 0xc8
 8000be8:	f000 faa8 	bl	800113c <LCD_DisplayChar>

    char current = HUMAN;
 8000bec:	2358      	movs	r3, #88	@ 0x58
 8000bee:	71fb      	strb	r3, [r7, #7]
    while (1) {
      
        PollTouchColumn(current);
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fdb2 	bl	800075c <PollTouchColumn>
        if (checkWin(current) || isBoardFull()) break;
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fe64 	bl	80008c8 <checkWin>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d10c      	bne.n	8000c20 <PlayTwoPlayer+0xc8>
 8000c06:	f7ff feb9 	bl	800097c <isBoardFull>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d107      	bne.n	8000c20 <PlayTwoPlayer+0xc8>
        current = (current == HUMAN) ? BOT : HUMAN;
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b58      	cmp	r3, #88	@ 0x58
 8000c14:	d101      	bne.n	8000c1a <PlayTwoPlayer+0xc2>
 8000c16:	234f      	movs	r3, #79	@ 0x4f
 8000c18:	e000      	b.n	8000c1c <PlayTwoPlayer+0xc4>
 8000c1a:	2358      	movs	r3, #88	@ 0x58
 8000c1c:	71fb      	strb	r3, [r7, #7]
        PollTouchColumn(current);
 8000c1e:	e7e7      	b.n	8000bf0 <PlayTwoPlayer+0x98>
    }
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000004 	.word	0x20000004

08000c2c <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08c      	sub	sp, #48	@ 0x30
 8000c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
 8000c36:	4b5a      	ldr	r3, [pc, #360]	@ (8000da0 <LCD_GPIO_Init+0x174>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3a:	4a59      	ldr	r2, [pc, #356]	@ (8000da0 <LCD_GPIO_Init+0x174>)
 8000c3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c42:	4b57      	ldr	r3, [pc, #348]	@ (8000da0 <LCD_GPIO_Init+0x174>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c4a:	61bb      	str	r3, [r7, #24]
 8000c4c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	4b53      	ldr	r3, [pc, #332]	@ (8000da0 <LCD_GPIO_Init+0x174>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a52      	ldr	r2, [pc, #328]	@ (8000da0 <LCD_GPIO_Init+0x174>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b50      	ldr	r3, [pc, #320]	@ (8000da0 <LCD_GPIO_Init+0x174>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b4c      	ldr	r3, [pc, #304]	@ (8000da0 <LCD_GPIO_Init+0x174>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a4b      	ldr	r2, [pc, #300]	@ (8000da0 <LCD_GPIO_Init+0x174>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b49      	ldr	r3, [pc, #292]	@ (8000da0 <LCD_GPIO_Init+0x174>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b45      	ldr	r3, [pc, #276]	@ (8000da0 <LCD_GPIO_Init+0x174>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a44      	ldr	r2, [pc, #272]	@ (8000da0 <LCD_GPIO_Init+0x174>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b42      	ldr	r3, [pc, #264]	@ (8000da0 <LCD_GPIO_Init+0x174>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	4b3e      	ldr	r3, [pc, #248]	@ (8000da0 <LCD_GPIO_Init+0x174>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a3d      	ldr	r2, [pc, #244]	@ (8000da0 <LCD_GPIO_Init+0x174>)
 8000cac:	f043 0308 	orr.w	r3, r3, #8
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8000da0 <LCD_GPIO_Init+0x174>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0308 	and.w	r3, r3, #8
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b37      	ldr	r3, [pc, #220]	@ (8000da0 <LCD_GPIO_Init+0x174>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	4a36      	ldr	r2, [pc, #216]	@ (8000da0 <LCD_GPIO_Init+0x174>)
 8000cc8:	f043 0320 	orr.w	r3, r3, #32
 8000ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cce:	4b34      	ldr	r3, [pc, #208]	@ (8000da0 <LCD_GPIO_Init+0x174>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	f003 0320 	and.w	r3, r3, #32
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	4b30      	ldr	r3, [pc, #192]	@ (8000da0 <LCD_GPIO_Init+0x174>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a2f      	ldr	r2, [pc, #188]	@ (8000da0 <LCD_GPIO_Init+0x174>)
 8000ce4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b2d      	ldr	r3, [pc, #180]	@ (8000da0 <LCD_GPIO_Init+0x174>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000cf6:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000cfa:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000d04:	2302      	movs	r3, #2
 8000d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000d08:	230e      	movs	r3, #14
 8000d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	4619      	mov	r1, r3
 8000d12:	4824      	ldr	r0, [pc, #144]	@ (8000da4 <LCD_GPIO_Init+0x178>)
 8000d14:	f002 f8f2 	bl	8002efc <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000d18:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000d1c:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4619      	mov	r1, r3
 8000d24:	4820      	ldr	r0, [pc, #128]	@ (8000da8 <LCD_GPIO_Init+0x17c>)
 8000d26:	f002 f8e9 	bl	8002efc <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000d2a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000d2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	481d      	ldr	r0, [pc, #116]	@ (8000dac <LCD_GPIO_Init+0x180>)
 8000d38:	f002 f8e0 	bl	8002efc <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000d3c:	2348      	movs	r3, #72	@ 0x48
 8000d3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	481a      	ldr	r0, [pc, #104]	@ (8000db0 <LCD_GPIO_Init+0x184>)
 8000d48:	f002 f8d8 	bl	8002efc <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000d4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	4816      	ldr	r0, [pc, #88]	@ (8000db4 <LCD_GPIO_Init+0x188>)
 8000d5a:	f002 f8cf 	bl	8002efc <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000d5e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000d62:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4813      	ldr	r0, [pc, #76]	@ (8000db8 <LCD_GPIO_Init+0x18c>)
 8000d6c:	f002 f8c6 	bl	8002efc <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000d70:	2303      	movs	r3, #3
 8000d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000d74:	2309      	movs	r3, #9
 8000d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000d78:	f107 031c 	add.w	r3, r7, #28
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480a      	ldr	r0, [pc, #40]	@ (8000da8 <LCD_GPIO_Init+0x17c>)
 8000d80:	f002 f8bc 	bl	8002efc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000d84:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4809      	ldr	r0, [pc, #36]	@ (8000db8 <LCD_GPIO_Init+0x18c>)
 8000d92:	f002 f8b3 	bl	8002efc <HAL_GPIO_Init>
}
 8000d96:	bf00      	nop
 8000d98:	3730      	adds	r7, #48	@ 0x30
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020000 	.word	0x40020000
 8000da8:	40020400 	.word	0x40020400
 8000dac:	40020800 	.word	0x40020800
 8000db0:	40020c00 	.word	0x40020c00
 8000db4:	40021400 	.word	0x40021400
 8000db8:	40021800 	.word	0x40021800

08000dbc <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b090      	sub	sp, #64	@ 0x40
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000dca:	23f0      	movs	r3, #240	@ 0xf0
 8000dcc:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000dd2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000dd6:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000dd8:	2302      	movs	r3, #2
 8000dda:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000ddc:	23ff      	movs	r3, #255	@ 0xff
 8000dde:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000de4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000de8:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000dea:	2305      	movs	r3, #5
 8000dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d101      	bne.n	8000df8 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <LTCD_Layer_Init+0x78>)
 8000df6:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000df8:	23f0      	movs	r3, #240	@ 0xf0
 8000dfa:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000dfc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e00:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000e14:	79fa      	ldrb	r2, [r7, #7]
 8000e16:	f107 030c 	add.w	r3, r7, #12
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4806      	ldr	r0, [pc, #24]	@ (8000e38 <LTCD_Layer_Init+0x7c>)
 8000e1e:	f003 fcaf 	bl	8004780 <HAL_LTDC_ConfigLayer>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000e28:	f000 f9aa 	bl	8001180 <LCD_Error_Handler>
	}
}
 8000e2c:	bf00      	nop
 8000e2e:	3740      	adds	r7, #64	@ 0x40
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	200001b4 	.word	0x200001b4
 8000e38:	200000d8 	.word	0x200000d8

08000e3c <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000e40:	4b2a      	ldr	r3, [pc, #168]	@ (8000eec <LTCD__Init+0xb0>)
 8000e42:	4a2b      	ldr	r2, [pc, #172]	@ (8000ef0 <LTCD__Init+0xb4>)
 8000e44:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000e46:	4b29      	ldr	r3, [pc, #164]	@ (8000eec <LTCD__Init+0xb0>)
 8000e48:	2209      	movs	r2, #9
 8000e4a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000e4c:	4b27      	ldr	r3, [pc, #156]	@ (8000eec <LTCD__Init+0xb0>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000e52:	4b26      	ldr	r3, [pc, #152]	@ (8000eec <LTCD__Init+0xb0>)
 8000e54:	221d      	movs	r2, #29
 8000e56:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000e58:	4b24      	ldr	r3, [pc, #144]	@ (8000eec <LTCD__Init+0xb0>)
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000e5e:	4b23      	ldr	r3, [pc, #140]	@ (8000eec <LTCD__Init+0xb0>)
 8000e60:	f240 120d 	movw	r2, #269	@ 0x10d
 8000e64:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000e66:	4b21      	ldr	r3, [pc, #132]	@ (8000eec <LTCD__Init+0xb0>)
 8000e68:	f240 1243 	movw	r2, #323	@ 0x143
 8000e6c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <LTCD__Init+0xb0>)
 8000e70:	f240 1217 	movw	r2, #279	@ 0x117
 8000e74:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000e76:	4b1d      	ldr	r3, [pc, #116]	@ (8000eec <LTCD__Init+0xb0>)
 8000e78:	f240 1247 	movw	r2, #327	@ 0x147
 8000e7c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000eec <LTCD__Init+0xb0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000e86:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <LTCD__Init+0xb0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	@ (8000eec <LTCD__Init+0xb0>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000e96:	4b17      	ldr	r3, [pc, #92]	@ (8000ef4 <LTCD__Init+0xb8>)
 8000e98:	2208      	movs	r2, #8
 8000e9a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <LTCD__Init+0xb8>)
 8000e9e:	22c0      	movs	r2, #192	@ 0xc0
 8000ea0:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	@ (8000ef4 <LTCD__Init+0xb8>)
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <LTCD__Init+0xb8>)
 8000eaa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000eae:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000eb0:	4810      	ldr	r0, [pc, #64]	@ (8000ef4 <LTCD__Init+0xb8>)
 8000eb2:	f004 fabf 	bl	8005434 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <LTCD__Init+0xb0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <LTCD__Init+0xb0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <LTCD__Init+0xb0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <LTCD__Init+0xb0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000ece:	f7ff fead 	bl	8000c2c <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ed2:	4806      	ldr	r0, [pc, #24]	@ (8000eec <LTCD__Init+0xb0>)
 8000ed4:	f003 fb84 	bl	80045e0 <HAL_LTDC_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000ede:	f000 f94f 	bl	8001180 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000ee2:	f000 f975 	bl	80011d0 <ili9341_Init>
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200000d8 	.word	0x200000d8
 8000ef0:	40016800 	.word	0x40016800
 8000ef4:	20000180 	.word	0x20000180

08000ef8 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	80fb      	strh	r3, [r7, #6]
 8000f02:	460b      	mov	r3, r1
 8000f04:	80bb      	strh	r3, [r7, #4]
 8000f06:	4613      	mov	r3, r2
 8000f08:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000f0a:	88ba      	ldrh	r2, [r7, #4]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	011b      	lsls	r3, r3, #4
 8000f10:	1a9b      	subs	r3, r3, r2
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	461a      	mov	r2, r3
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	4413      	add	r3, r2
 8000f1a:	4905      	ldr	r1, [pc, #20]	@ (8000f30 <LCD_Draw_Pixel+0x38>)
 8000f1c:	887a      	ldrh	r2, [r7, #2]
 8000f1e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	200001b4 	.word	0x200001b4

08000f34 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	4611      	mov	r1, r2
 8000f40:	461a      	mov	r2, r3
 8000f42:	4623      	mov	r3, r4
 8000f44:	80fb      	strh	r3, [r7, #6]
 8000f46:	4603      	mov	r3, r0
 8000f48:	80bb      	strh	r3, [r7, #4]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	807b      	strh	r3, [r7, #2]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000f52:	887b      	ldrh	r3, [r7, #2]
 8000f54:	425b      	negs	r3, r3
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	81fb      	strh	r3, [r7, #14]
 8000f5a:	e034      	b.n	8000fc6 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000f5c:	887b      	ldrh	r3, [r7, #2]
 8000f5e:	425b      	negs	r3, r3
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	81bb      	strh	r3, [r7, #12]
 8000f64:	e024      	b.n	8000fb0 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000f66:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f6a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000f6e:	fb03 f202 	mul.w	r2, r3, r2
 8000f72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f76:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000f7a:	fb01 f303 	mul.w	r3, r1, r3
 8000f7e:	441a      	add	r2, r3
 8000f80:	887b      	ldrh	r3, [r7, #2]
 8000f82:	8879      	ldrh	r1, [r7, #2]
 8000f84:	fb01 f303 	mul.w	r3, r1, r3
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	dc0b      	bgt.n	8000fa4 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000f8c:	89ba      	ldrh	r2, [r7, #12]
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	4413      	add	r3, r2
 8000f92:	b298      	uxth	r0, r3
 8000f94:	89fa      	ldrh	r2, [r7, #14]
 8000f96:	88bb      	ldrh	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	883a      	ldrh	r2, [r7, #0]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f7ff ffaa 	bl	8000ef8 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000fa4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	3301      	adds	r3, #1
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	81bb      	strh	r3, [r7, #12]
 8000fb0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000fb4:	887b      	ldrh	r3, [r7, #2]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	ddd5      	ble.n	8000f66 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000fba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	81fb      	strh	r3, [r7, #14]
 8000fc6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000fca:	887b      	ldrh	r3, [r7, #2]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	ddc5      	ble.n	8000f5c <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd90      	pop	{r4, r7, pc}
	...

08000fdc <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	460a      	mov	r2, r1
 8000fe6:	71fb      	strb	r3, [r7, #7]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10e      	bne.n	8001010 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	e007      	b.n	8001008 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000ff8:	4908      	ldr	r1, [pc, #32]	@ (800101c <LCD_Clear+0x40>)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	88ba      	ldrh	r2, [r7, #4]
 8000ffe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	3301      	adds	r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 800100e:	d3f3      	bcc.n	8000ff8 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	200001b4 	.word	0x200001b4

08001020 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 800102a:	4a04      	ldr	r2, [pc, #16]	@ (800103c <LCD_SetTextColor+0x1c>)
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	8013      	strh	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	20000000 	.word	0x20000000

08001040 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001048:	4a04      	ldr	r2, [pc, #16]	@ (800105c <LCD_SetFont+0x1c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200001b0 	.word	0x200001b0

08001060 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	603a      	str	r2, [r7, #0]
 800106a:	80fb      	strh	r3, [r7, #6]
 800106c:	460b      	mov	r3, r1
 800106e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	e04c      	b.n	8001118 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	e03f      	b.n	8001104 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	4413      	add	r3, r2
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	4619      	mov	r1, r3
 8001090:	4b27      	ldr	r3, [pc, #156]	@ (8001130 <LCD_Draw_Char+0xd0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	889b      	ldrh	r3, [r3, #4]
 8001096:	4a27      	ldr	r2, [pc, #156]	@ (8001134 <LCD_Draw_Char+0xd4>)
 8001098:	fba2 2303 	umull	r2, r3, r2, r3
 800109c:	08db      	lsrs	r3, r3, #3
 800109e:	b29b      	uxth	r3, r3
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	2280      	movs	r2, #128	@ 0x80
 80010a4:	409a      	lsls	r2, r3
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	fa42 f303 	asr.w	r3, r2, r3
 80010ac:	400b      	ands	r3, r1
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d104      	bne.n	80010bc <LCD_Draw_Char+0x5c>
 80010b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001130 <LCD_Draw_Char+0xd0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	889b      	ldrh	r3, [r3, #4]
 80010b8:	2b0c      	cmp	r3, #12
 80010ba:	d920      	bls.n	80010fe <LCD_Draw_Char+0x9e>
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	fa42 f303 	asr.w	r3, r2, r3
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d104      	bne.n	80010e0 <LCD_Draw_Char+0x80>
 80010d6:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <LCD_Draw_Char+0xd0>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	889b      	ldrh	r3, [r3, #4]
 80010dc:	2b0c      	cmp	r3, #12
 80010de:	d80e      	bhi.n	80010fe <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	4413      	add	r3, r2
 80010e8:	b298      	uxth	r0, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	88bb      	ldrh	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	4a10      	ldr	r2, [pc, #64]	@ (8001138 <LCD_Draw_Char+0xd8>)
 80010f6:	8812      	ldrh	r2, [r2, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	f7ff fefd 	bl	8000ef8 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	3301      	adds	r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <LCD_Draw_Char+0xd0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	889b      	ldrh	r3, [r3, #4]
 800110a:	461a      	mov	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4293      	cmp	r3, r2
 8001110:	d3b8      	bcc.n	8001084 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3301      	adds	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <LCD_Draw_Char+0xd0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	88db      	ldrh	r3, [r3, #6]
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4293      	cmp	r3, r2
 8001124:	d3ab      	bcc.n	800107e <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200001b0 	.word	0x200001b0
 8001134:	aaaaaaab 	.word	0xaaaaaaab
 8001138:	20000000 	.word	0x20000000

0800113c <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	80fb      	strh	r3, [r7, #6]
 8001146:	460b      	mov	r3, r1
 8001148:	80bb      	strh	r3, [r7, #4]
 800114a:	4613      	mov	r3, r2
 800114c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	3b20      	subs	r3, #32
 8001152:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001154:	4b09      	ldr	r3, [pc, #36]	@ (800117c <LCD_DisplayChar+0x40>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	78fb      	ldrb	r3, [r7, #3]
 800115c:	4907      	ldr	r1, [pc, #28]	@ (800117c <LCD_DisplayChar+0x40>)
 800115e:	6809      	ldr	r1, [r1, #0]
 8001160:	88c9      	ldrh	r1, [r1, #6]
 8001162:	fb01 f303 	mul.w	r3, r1, r3
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	441a      	add	r2, r3
 800116a:	88b9      	ldrh	r1, [r7, #4]
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff76 	bl	8001060 <LCD_Draw_Char>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200001b0 	.word	0x200001b0

08001180 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001184:	b672      	cpsid	i
}
 8001186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <LCD_Error_Handler+0x8>

0800118c <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001190:	f001 f93b 	bl	800240a <STMPE811_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b02      	cmp	r3, #2
 8001198:	d001      	beq.n	800119e <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 800119a:	bf00      	nop
 800119c:	e7fd      	b.n	800119a <InitializeLCDTouch+0xe>
  }
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f001 f9e5 	bl	800257a <STMPE811_ReadTouch>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <DetermineTouchPosition>:

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f001 faa5 	bl	8002712 <STMPE811_DetermineTouchPosition>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80011d4:	f000 f9fe 	bl	80015d4 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80011d8:	20ca      	movs	r0, #202	@ 0xca
 80011da:	f000 f943 	bl	8001464 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80011de:	20c3      	movs	r0, #195	@ 0xc3
 80011e0:	f000 f94d 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80011e4:	2008      	movs	r0, #8
 80011e6:	f000 f94a 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80011ea:	2050      	movs	r0, #80	@ 0x50
 80011ec:	f000 f947 	bl	800147e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80011f0:	20cf      	movs	r0, #207	@ 0xcf
 80011f2:	f000 f937 	bl	8001464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80011f6:	2000      	movs	r0, #0
 80011f8:	f000 f941 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80011fc:	20c1      	movs	r0, #193	@ 0xc1
 80011fe:	f000 f93e 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001202:	2030      	movs	r0, #48	@ 0x30
 8001204:	f000 f93b 	bl	800147e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001208:	20ed      	movs	r0, #237	@ 0xed
 800120a:	f000 f92b 	bl	8001464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 800120e:	2064      	movs	r0, #100	@ 0x64
 8001210:	f000 f935 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001214:	2003      	movs	r0, #3
 8001216:	f000 f932 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800121a:	2012      	movs	r0, #18
 800121c:	f000 f92f 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001220:	2081      	movs	r0, #129	@ 0x81
 8001222:	f000 f92c 	bl	800147e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001226:	20e8      	movs	r0, #232	@ 0xe8
 8001228:	f000 f91c 	bl	8001464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 800122c:	2085      	movs	r0, #133	@ 0x85
 800122e:	f000 f926 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001232:	2000      	movs	r0, #0
 8001234:	f000 f923 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001238:	2078      	movs	r0, #120	@ 0x78
 800123a:	f000 f920 	bl	800147e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 800123e:	20cb      	movs	r0, #203	@ 0xcb
 8001240:	f000 f910 	bl	8001464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001244:	2039      	movs	r0, #57	@ 0x39
 8001246:	f000 f91a 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800124a:	202c      	movs	r0, #44	@ 0x2c
 800124c:	f000 f917 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001250:	2000      	movs	r0, #0
 8001252:	f000 f914 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001256:	2034      	movs	r0, #52	@ 0x34
 8001258:	f000 f911 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 800125c:	2002      	movs	r0, #2
 800125e:	f000 f90e 	bl	800147e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001262:	20f7      	movs	r0, #247	@ 0xf7
 8001264:	f000 f8fe 	bl	8001464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001268:	2020      	movs	r0, #32
 800126a:	f000 f908 	bl	800147e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 800126e:	20ea      	movs	r0, #234	@ 0xea
 8001270:	f000 f8f8 	bl	8001464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001274:	2000      	movs	r0, #0
 8001276:	f000 f902 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800127a:	2000      	movs	r0, #0
 800127c:	f000 f8ff 	bl	800147e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001280:	20b1      	movs	r0, #177	@ 0xb1
 8001282:	f000 f8ef 	bl	8001464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001286:	2000      	movs	r0, #0
 8001288:	f000 f8f9 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800128c:	201b      	movs	r0, #27
 800128e:	f000 f8f6 	bl	800147e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001292:	20b6      	movs	r0, #182	@ 0xb6
 8001294:	f000 f8e6 	bl	8001464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001298:	200a      	movs	r0, #10
 800129a:	f000 f8f0 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 800129e:	20a2      	movs	r0, #162	@ 0xa2
 80012a0:	f000 f8ed 	bl	800147e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80012a4:	20c0      	movs	r0, #192	@ 0xc0
 80012a6:	f000 f8dd 	bl	8001464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80012aa:	2010      	movs	r0, #16
 80012ac:	f000 f8e7 	bl	800147e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80012b0:	20c1      	movs	r0, #193	@ 0xc1
 80012b2:	f000 f8d7 	bl	8001464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80012b6:	2010      	movs	r0, #16
 80012b8:	f000 f8e1 	bl	800147e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80012bc:	20c5      	movs	r0, #197	@ 0xc5
 80012be:	f000 f8d1 	bl	8001464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80012c2:	2045      	movs	r0, #69	@ 0x45
 80012c4:	f000 f8db 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80012c8:	2015      	movs	r0, #21
 80012ca:	f000 f8d8 	bl	800147e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80012ce:	20c7      	movs	r0, #199	@ 0xc7
 80012d0:	f000 f8c8 	bl	8001464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80012d4:	2090      	movs	r0, #144	@ 0x90
 80012d6:	f000 f8d2 	bl	800147e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80012da:	2036      	movs	r0, #54	@ 0x36
 80012dc:	f000 f8c2 	bl	8001464 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80012e0:	20c8      	movs	r0, #200	@ 0xc8
 80012e2:	f000 f8cc 	bl	800147e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80012e6:	20f2      	movs	r0, #242	@ 0xf2
 80012e8:	f000 f8bc 	bl	8001464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80012ec:	2000      	movs	r0, #0
 80012ee:	f000 f8c6 	bl	800147e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80012f2:	20b0      	movs	r0, #176	@ 0xb0
 80012f4:	f000 f8b6 	bl	8001464 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80012f8:	20c2      	movs	r0, #194	@ 0xc2
 80012fa:	f000 f8c0 	bl	800147e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80012fe:	20b6      	movs	r0, #182	@ 0xb6
 8001300:	f000 f8b0 	bl	8001464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001304:	200a      	movs	r0, #10
 8001306:	f000 f8ba 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800130a:	20a7      	movs	r0, #167	@ 0xa7
 800130c:	f000 f8b7 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001310:	2027      	movs	r0, #39	@ 0x27
 8001312:	f000 f8b4 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001316:	2004      	movs	r0, #4
 8001318:	f000 f8b1 	bl	800147e <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 800131c:	202a      	movs	r0, #42	@ 0x2a
 800131e:	f000 f8a1 	bl	8001464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001322:	2000      	movs	r0, #0
 8001324:	f000 f8ab 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001328:	2000      	movs	r0, #0
 800132a:	f000 f8a8 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800132e:	2000      	movs	r0, #0
 8001330:	f000 f8a5 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001334:	20ef      	movs	r0, #239	@ 0xef
 8001336:	f000 f8a2 	bl	800147e <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800133a:	202b      	movs	r0, #43	@ 0x2b
 800133c:	f000 f892 	bl	8001464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001340:	2000      	movs	r0, #0
 8001342:	f000 f89c 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001346:	2000      	movs	r0, #0
 8001348:	f000 f899 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 800134c:	2001      	movs	r0, #1
 800134e:	f000 f896 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001352:	203f      	movs	r0, #63	@ 0x3f
 8001354:	f000 f893 	bl	800147e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001358:	20f6      	movs	r0, #246	@ 0xf6
 800135a:	f000 f883 	bl	8001464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800135e:	2001      	movs	r0, #1
 8001360:	f000 f88d 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001364:	2000      	movs	r0, #0
 8001366:	f000 f88a 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800136a:	2006      	movs	r0, #6
 800136c:	f000 f887 	bl	800147e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001370:	202c      	movs	r0, #44	@ 0x2c
 8001372:	f000 f877 	bl	8001464 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001376:	20c8      	movs	r0, #200	@ 0xc8
 8001378:	f000 f9e8 	bl	800174c <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 800137c:	2026      	movs	r0, #38	@ 0x26
 800137e:	f000 f871 	bl	8001464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001382:	2001      	movs	r0, #1
 8001384:	f000 f87b 	bl	800147e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001388:	20e0      	movs	r0, #224	@ 0xe0
 800138a:	f000 f86b 	bl	8001464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 800138e:	200f      	movs	r0, #15
 8001390:	f000 f875 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001394:	2029      	movs	r0, #41	@ 0x29
 8001396:	f000 f872 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 800139a:	2024      	movs	r0, #36	@ 0x24
 800139c:	f000 f86f 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80013a0:	200c      	movs	r0, #12
 80013a2:	f000 f86c 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80013a6:	200e      	movs	r0, #14
 80013a8:	f000 f869 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80013ac:	2009      	movs	r0, #9
 80013ae:	f000 f866 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80013b2:	204e      	movs	r0, #78	@ 0x4e
 80013b4:	f000 f863 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80013b8:	2078      	movs	r0, #120	@ 0x78
 80013ba:	f000 f860 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80013be:	203c      	movs	r0, #60	@ 0x3c
 80013c0:	f000 f85d 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80013c4:	2009      	movs	r0, #9
 80013c6:	f000 f85a 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80013ca:	2013      	movs	r0, #19
 80013cc:	f000 f857 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80013d0:	2005      	movs	r0, #5
 80013d2:	f000 f854 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80013d6:	2017      	movs	r0, #23
 80013d8:	f000 f851 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80013dc:	2011      	movs	r0, #17
 80013de:	f000 f84e 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 f84b 	bl	800147e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80013e8:	20e1      	movs	r0, #225	@ 0xe1
 80013ea:	f000 f83b 	bl	8001464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f000 f845 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80013f4:	2016      	movs	r0, #22
 80013f6:	f000 f842 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80013fa:	201b      	movs	r0, #27
 80013fc:	f000 f83f 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001400:	2004      	movs	r0, #4
 8001402:	f000 f83c 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001406:	2011      	movs	r0, #17
 8001408:	f000 f839 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 800140c:	2007      	movs	r0, #7
 800140e:	f000 f836 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001412:	2031      	movs	r0, #49	@ 0x31
 8001414:	f000 f833 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001418:	2033      	movs	r0, #51	@ 0x33
 800141a:	f000 f830 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 800141e:	2042      	movs	r0, #66	@ 0x42
 8001420:	f000 f82d 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001424:	2005      	movs	r0, #5
 8001426:	f000 f82a 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800142a:	200c      	movs	r0, #12
 800142c:	f000 f827 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001430:	200a      	movs	r0, #10
 8001432:	f000 f824 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001436:	2028      	movs	r0, #40	@ 0x28
 8001438:	f000 f821 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 800143c:	202f      	movs	r0, #47	@ 0x2f
 800143e:	f000 f81e 	bl	800147e <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001442:	200f      	movs	r0, #15
 8001444:	f000 f81b 	bl	800147e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001448:	2011      	movs	r0, #17
 800144a:	f000 f80b 	bl	8001464 <ili9341_Write_Reg>
  LCD_Delay(200);
 800144e:	20c8      	movs	r0, #200	@ 0xc8
 8001450:	f000 f97c 	bl	800174c <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001454:	2029      	movs	r0, #41	@ 0x29
 8001456:	f000 f805 	bl	8001464 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800145a:	202c      	movs	r0, #44	@ 0x2c
 800145c:	f000 f802 	bl	8001464 <ili9341_Write_Reg>
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}

08001464 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	4618      	mov	r0, r3
 8001472:	f000 f949 	bl	8001708 <LCD_IO_WriteReg>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f91a 	bl	80016c4 <LCD_IO_WriteData>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800149c:	4819      	ldr	r0, [pc, #100]	@ (8001504 <SPI_Init+0x6c>)
 800149e:	f004 fbfe 	bl	8005c9e <HAL_SPI_GetState>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d12b      	bne.n	8001500 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80014a8:	4b16      	ldr	r3, [pc, #88]	@ (8001504 <SPI_Init+0x6c>)
 80014aa:	4a17      	ldr	r2, [pc, #92]	@ (8001508 <SPI_Init+0x70>)
 80014ac:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014ae:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <SPI_Init+0x6c>)
 80014b0:	2218      	movs	r2, #24
 80014b2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80014b4:	4b13      	ldr	r3, [pc, #76]	@ (8001504 <SPI_Init+0x6c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80014ba:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <SPI_Init+0x6c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80014c0:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <SPI_Init+0x6c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80014c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <SPI_Init+0x6c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80014cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001504 <SPI_Init+0x6c>)
 80014ce:	2207      	movs	r2, #7
 80014d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <SPI_Init+0x6c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80014d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001504 <SPI_Init+0x6c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80014de:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <SPI_Init+0x6c>)
 80014e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014e4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80014e6:	4b07      	ldr	r3, [pc, #28]	@ (8001504 <SPI_Init+0x6c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <SPI_Init+0x6c>)
 80014ee:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014f2:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80014f4:	4803      	ldr	r0, [pc, #12]	@ (8001504 <SPI_Init+0x6c>)
 80014f6:	f000 f833 	bl	8001560 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80014fa:	4802      	ldr	r0, [pc, #8]	@ (8001504 <SPI_Init+0x6c>)
 80014fc:	f004 f9da 	bl	80058b4 <HAL_SPI_Init>
  }
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200259b4 	.word	0x200259b4
 8001508:	40015000 	.word	0x40015000

0800150c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 800151a:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <SPI_Write+0x34>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	1db9      	adds	r1, r7, #6
 8001520:	2201      	movs	r2, #1
 8001522:	4808      	ldr	r0, [pc, #32]	@ (8001544 <SPI_Write+0x38>)
 8001524:	f004 fa77 	bl	8005a16 <HAL_SPI_Transmit>
 8001528:	4603      	mov	r3, r0
 800152a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001532:	f000 f809 	bl	8001548 <SPI_Error>
  }
}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2000000c 	.word	0x2000000c
 8001544:	200259b4 	.word	0x200259b4

08001548 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800154c:	4803      	ldr	r0, [pc, #12]	@ (800155c <SPI_Error+0x14>)
 800154e:	f004 fa3a 	bl	80059c6 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001552:	f7ff ffa1 	bl	8001498 <SPI_Init>
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200259b4 	.word	0x200259b4

08001560 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	@ 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001568:	2300      	movs	r3, #0
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	4b17      	ldr	r3, [pc, #92]	@ (80015cc <SPI_MspInit+0x6c>)
 800156e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001570:	4a16      	ldr	r2, [pc, #88]	@ (80015cc <SPI_MspInit+0x6c>)
 8001572:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001576:	6453      	str	r3, [r2, #68]	@ 0x44
 8001578:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <SPI_MspInit+0x6c>)
 800157a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <SPI_MspInit+0x6c>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158c:	4a0f      	ldr	r2, [pc, #60]	@ (80015cc <SPI_MspInit+0x6c>)
 800158e:	f043 0320 	orr.w	r3, r3, #32
 8001592:	6313      	str	r3, [r2, #48]	@ 0x30
 8001594:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <SPI_MspInit+0x6c>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001598:	f003 0320 	and.w	r3, r3, #32
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80015a0:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80015a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80015aa:	2302      	movs	r3, #2
 80015ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80015ae:	2301      	movs	r3, #1
 80015b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80015b2:	2305      	movs	r3, #5
 80015b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	4804      	ldr	r0, [pc, #16]	@ (80015d0 <SPI_MspInit+0x70>)
 80015be:	f001 fc9d 	bl	8002efc <HAL_GPIO_Init>
}
 80015c2:	bf00      	nop
 80015c4:	3728      	adds	r7, #40	@ 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40021400 	.word	0x40021400

080015d4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80015da:	4b36      	ldr	r3, [pc, #216]	@ (80016b4 <LCD_IO_Init+0xe0>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d164      	bne.n	80016ac <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80015e2:	4b34      	ldr	r3, [pc, #208]	@ (80016b4 <LCD_IO_Init+0xe0>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	4b32      	ldr	r3, [pc, #200]	@ (80016b8 <LCD_IO_Init+0xe4>)
 80015ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f0:	4a31      	ldr	r2, [pc, #196]	@ (80016b8 <LCD_IO_Init+0xe4>)
 80015f2:	f043 0308 	orr.w	r3, r3, #8
 80015f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f8:	4b2f      	ldr	r3, [pc, #188]	@ (80016b8 <LCD_IO_Init+0xe4>)
 80015fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fc:	f003 0308 	and.w	r3, r3, #8
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001604:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001608:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800160a:	2301      	movs	r3, #1
 800160c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001612:	2302      	movs	r3, #2
 8001614:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	4619      	mov	r1, r3
 800161c:	4827      	ldr	r0, [pc, #156]	@ (80016bc <LCD_IO_Init+0xe8>)
 800161e:	f001 fc6d 	bl	8002efc <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	4b24      	ldr	r3, [pc, #144]	@ (80016b8 <LCD_IO_Init+0xe4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	4a23      	ldr	r2, [pc, #140]	@ (80016b8 <LCD_IO_Init+0xe4>)
 800162c:	f043 0308 	orr.w	r3, r3, #8
 8001630:	6313      	str	r3, [r2, #48]	@ 0x30
 8001632:	4b21      	ldr	r3, [pc, #132]	@ (80016b8 <LCD_IO_Init+0xe4>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800163e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001642:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800164c:	2302      	movs	r3, #2
 800164e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	4619      	mov	r1, r3
 8001656:	4819      	ldr	r0, [pc, #100]	@ (80016bc <LCD_IO_Init+0xe8>)
 8001658:	f001 fc50 	bl	8002efc <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800165c:	2300      	movs	r3, #0
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <LCD_IO_Init+0xe4>)
 8001662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001664:	4a14      	ldr	r2, [pc, #80]	@ (80016b8 <LCD_IO_Init+0xe4>)
 8001666:	f043 0304 	orr.w	r3, r3, #4
 800166a:	6313      	str	r3, [r2, #48]	@ 0x30
 800166c:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <LCD_IO_Init+0xe4>)
 800166e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001678:	2304      	movs	r3, #4
 800167a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800167c:	2301      	movs	r3, #1
 800167e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001684:	2302      	movs	r3, #2
 8001686:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	4619      	mov	r1, r3
 800168e:	480c      	ldr	r0, [pc, #48]	@ (80016c0 <LCD_IO_Init+0xec>)
 8001690:	f001 fc34 	bl	8002efc <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001694:	2200      	movs	r2, #0
 8001696:	2104      	movs	r1, #4
 8001698:	4809      	ldr	r0, [pc, #36]	@ (80016c0 <LCD_IO_Init+0xec>)
 800169a:	f001 fee7 	bl	800346c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800169e:	2201      	movs	r2, #1
 80016a0:	2104      	movs	r1, #4
 80016a2:	4807      	ldr	r0, [pc, #28]	@ (80016c0 <LCD_IO_Init+0xec>)
 80016a4:	f001 fee2 	bl	800346c <HAL_GPIO_WritePin>

    SPI_Init();
 80016a8:	f7ff fef6 	bl	8001498 <SPI_Init>
  }
}
 80016ac:	bf00      	nop
 80016ae:	3720      	adds	r7, #32
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20025a0c 	.word	0x20025a0c
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40020c00 	.word	0x40020c00
 80016c0:	40020800 	.word	0x40020800

080016c4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80016ce:	2201      	movs	r2, #1
 80016d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016d4:	480a      	ldr	r0, [pc, #40]	@ (8001700 <LCD_IO_WriteData+0x3c>)
 80016d6:	f001 fec9 	bl	800346c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80016da:	2200      	movs	r2, #0
 80016dc:	2104      	movs	r1, #4
 80016de:	4809      	ldr	r0, [pc, #36]	@ (8001704 <LCD_IO_WriteData+0x40>)
 80016e0:	f001 fec4 	bl	800346c <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff10 	bl	800150c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80016ec:	2201      	movs	r2, #1
 80016ee:	2104      	movs	r1, #4
 80016f0:	4804      	ldr	r0, [pc, #16]	@ (8001704 <LCD_IO_WriteData+0x40>)
 80016f2:	f001 febb 	bl	800346c <HAL_GPIO_WritePin>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40020c00 	.word	0x40020c00
 8001704:	40020800 	.word	0x40020800

08001708 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001712:	2200      	movs	r2, #0
 8001714:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001718:	480a      	ldr	r0, [pc, #40]	@ (8001744 <LCD_IO_WriteReg+0x3c>)
 800171a:	f001 fea7 	bl	800346c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800171e:	2200      	movs	r2, #0
 8001720:	2104      	movs	r1, #4
 8001722:	4809      	ldr	r0, [pc, #36]	@ (8001748 <LCD_IO_WriteReg+0x40>)
 8001724:	f001 fea2 	bl	800346c <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	b29b      	uxth	r3, r3
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff feed 	bl	800150c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001732:	2201      	movs	r2, #1
 8001734:	2104      	movs	r1, #4
 8001736:	4804      	ldr	r0, [pc, #16]	@ (8001748 <LCD_IO_WriteReg+0x40>)
 8001738:	f001 fe98 	bl	800346c <HAL_GPIO_WritePin>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40020c00 	.word	0x40020c00
 8001748:	40020800 	.word	0x40020800

0800174c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f001 fac7 	bl	8002ce8 <HAL_Delay>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001766:	f001 fa4d 	bl	8002c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800176a:	f000 f817 	bl	800179c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800176e:	f000 fa07 	bl	8001b80 <MX_GPIO_Init>
  MX_LTDC_Init();
 8001772:	f000 f8bd 	bl	80018f0 <MX_LTDC_Init>
  MX_RNG_Init();
 8001776:	f000 f96d 	bl	8001a54 <MX_RNG_Init>
  MX_TIM2_Init();
 800177a:	f000 f9b5 	bl	8001ae8 <MX_TIM2_Init>
  MX_SPI5_Init();
 800177e:	f000 f97d 	bl	8001a7c <MX_SPI5_Init>
  MX_I2C3_Init();
 8001782:	f000 f875 	bl	8001870 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8001786:	f7fe fecf 	bl	8000528 <ApplicationInit>
  ApplicationFirstScreen();
 800178a:	f7fe fee5 	bl	8000558 <ApplicationFirstScreen>

  //LCD_Visual_Demo();
  HAL_Delay(5000);
 800178e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001792:	f001 faa9 	bl	8002ce8 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  LCD_Touch_Polling_Demo();
 8001796:	f7fe fee5 	bl	8000564 <LCD_Touch_Polling_Demo>
 800179a:	e7fc      	b.n	8001796 <main+0x34>

0800179c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b094      	sub	sp, #80	@ 0x50
 80017a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a2:	f107 0320 	add.w	r3, r7, #32
 80017a6:	2230      	movs	r2, #48	@ 0x30
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f005 f96c 	bl	8006a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	4b28      	ldr	r3, [pc, #160]	@ (8001868 <SystemClock_Config+0xcc>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c8:	4a27      	ldr	r2, [pc, #156]	@ (8001868 <SystemClock_Config+0xcc>)
 80017ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d0:	4b25      	ldr	r3, [pc, #148]	@ (8001868 <SystemClock_Config+0xcc>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017dc:	2300      	movs	r3, #0
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	4b22      	ldr	r3, [pc, #136]	@ (800186c <SystemClock_Config+0xd0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a21      	ldr	r2, [pc, #132]	@ (800186c <SystemClock_Config+0xd0>)
 80017e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	4b1f      	ldr	r3, [pc, #124]	@ (800186c <SystemClock_Config+0xd0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017f8:	2301      	movs	r3, #1
 80017fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001800:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001802:	2302      	movs	r3, #2
 8001804:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001806:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800180a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800180c:	2308      	movs	r3, #8
 800180e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001810:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001814:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001816:	2302      	movs	r3, #2
 8001818:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800181a:	2307      	movs	r3, #7
 800181c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800181e:	f107 0320 	add.w	r3, r7, #32
 8001822:	4618      	mov	r0, r3
 8001824:	f003 f982 	bl	8004b2c <HAL_RCC_OscConfig>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800182e:	f000 fb55 	bl	8001edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001832:	230f      	movs	r3, #15
 8001834:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001836:	2302      	movs	r3, #2
 8001838:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800183e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001842:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001844:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001848:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800184a:	f107 030c 	add.w	r3, r7, #12
 800184e:	2105      	movs	r1, #5
 8001850:	4618      	mov	r0, r3
 8001852:	f003 fbe3 	bl	800501c <HAL_RCC_ClockConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800185c:	f000 fb3e 	bl	8001edc <Error_Handler>
  }
}
 8001860:	bf00      	nop
 8001862:	3750      	adds	r7, #80	@ 0x50
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40023800 	.word	0x40023800
 800186c:	40007000 	.word	0x40007000

08001870 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001874:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <MX_I2C3_Init+0x74>)
 8001876:	4a1c      	ldr	r2, [pc, #112]	@ (80018e8 <MX_I2C3_Init+0x78>)
 8001878:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800187a:	4b1a      	ldr	r3, [pc, #104]	@ (80018e4 <MX_I2C3_Init+0x74>)
 800187c:	4a1b      	ldr	r2, [pc, #108]	@ (80018ec <MX_I2C3_Init+0x7c>)
 800187e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001880:	4b18      	ldr	r3, [pc, #96]	@ (80018e4 <MX_I2C3_Init+0x74>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001886:	4b17      	ldr	r3, [pc, #92]	@ (80018e4 <MX_I2C3_Init+0x74>)
 8001888:	2200      	movs	r2, #0
 800188a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800188c:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <MX_I2C3_Init+0x74>)
 800188e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001892:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001894:	4b13      	ldr	r3, [pc, #76]	@ (80018e4 <MX_I2C3_Init+0x74>)
 8001896:	2200      	movs	r2, #0
 8001898:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800189a:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <MX_I2C3_Init+0x74>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a0:	4b10      	ldr	r3, [pc, #64]	@ (80018e4 <MX_I2C3_Init+0x74>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a6:	4b0f      	ldr	r3, [pc, #60]	@ (80018e4 <MX_I2C3_Init+0x74>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018ac:	480d      	ldr	r0, [pc, #52]	@ (80018e4 <MX_I2C3_Init+0x74>)
 80018ae:	f001 fdf7 	bl	80034a0 <HAL_I2C_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80018b8:	f000 fb10 	bl	8001edc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018bc:	2100      	movs	r1, #0
 80018be:	4809      	ldr	r0, [pc, #36]	@ (80018e4 <MX_I2C3_Init+0x74>)
 80018c0:	f002 fe12 	bl	80044e8 <HAL_I2CEx_ConfigAnalogFilter>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80018ca:	f000 fb07 	bl	8001edc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80018ce:	2100      	movs	r1, #0
 80018d0:	4804      	ldr	r0, [pc, #16]	@ (80018e4 <MX_I2C3_Init+0x74>)
 80018d2:	f002 fe45 	bl	8004560 <HAL_I2CEx_ConfigDigitalFilter>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80018dc:	f000 fafe 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20025a10 	.word	0x20025a10
 80018e8:	40005c00 	.word	0x40005c00
 80018ec:	000186a0 	.word	0x000186a0

080018f0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b09a      	sub	sp, #104	@ 0x68
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80018f6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018fa:	2234      	movs	r2, #52	@ 0x34
 80018fc:	2100      	movs	r1, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f005 f8c2 	bl	8006a88 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001904:	463b      	mov	r3, r7
 8001906:	2234      	movs	r2, #52	@ 0x34
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f005 f8bc 	bl	8006a88 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001910:	4b4e      	ldr	r3, [pc, #312]	@ (8001a4c <MX_LTDC_Init+0x15c>)
 8001912:	4a4f      	ldr	r2, [pc, #316]	@ (8001a50 <MX_LTDC_Init+0x160>)
 8001914:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001916:	4b4d      	ldr	r3, [pc, #308]	@ (8001a4c <MX_LTDC_Init+0x15c>)
 8001918:	2200      	movs	r2, #0
 800191a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800191c:	4b4b      	ldr	r3, [pc, #300]	@ (8001a4c <MX_LTDC_Init+0x15c>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001922:	4b4a      	ldr	r3, [pc, #296]	@ (8001a4c <MX_LTDC_Init+0x15c>)
 8001924:	2200      	movs	r2, #0
 8001926:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001928:	4b48      	ldr	r3, [pc, #288]	@ (8001a4c <MX_LTDC_Init+0x15c>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800192e:	4b47      	ldr	r3, [pc, #284]	@ (8001a4c <MX_LTDC_Init+0x15c>)
 8001930:	2207      	movs	r2, #7
 8001932:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001934:	4b45      	ldr	r3, [pc, #276]	@ (8001a4c <MX_LTDC_Init+0x15c>)
 8001936:	2203      	movs	r2, #3
 8001938:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800193a:	4b44      	ldr	r3, [pc, #272]	@ (8001a4c <MX_LTDC_Init+0x15c>)
 800193c:	220e      	movs	r2, #14
 800193e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001940:	4b42      	ldr	r3, [pc, #264]	@ (8001a4c <MX_LTDC_Init+0x15c>)
 8001942:	2205      	movs	r2, #5
 8001944:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001946:	4b41      	ldr	r3, [pc, #260]	@ (8001a4c <MX_LTDC_Init+0x15c>)
 8001948:	f240 228e 	movw	r2, #654	@ 0x28e
 800194c:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800194e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a4c <MX_LTDC_Init+0x15c>)
 8001950:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001954:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8001956:	4b3d      	ldr	r3, [pc, #244]	@ (8001a4c <MX_LTDC_Init+0x15c>)
 8001958:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800195c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 800195e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a4c <MX_LTDC_Init+0x15c>)
 8001960:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001964:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001966:	4b39      	ldr	r3, [pc, #228]	@ (8001a4c <MX_LTDC_Init+0x15c>)
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800196e:	4b37      	ldr	r3, [pc, #220]	@ (8001a4c <MX_LTDC_Init+0x15c>)
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001976:	4b35      	ldr	r3, [pc, #212]	@ (8001a4c <MX_LTDC_Init+0x15c>)
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800197e:	4833      	ldr	r0, [pc, #204]	@ (8001a4c <MX_LTDC_Init+0x15c>)
 8001980:	f002 fe2e 	bl	80045e0 <HAL_LTDC_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800198a:	f000 faa7 	bl	8001edc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800199e:	2300      	movs	r3, #0
 80019a0:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80019aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019ae:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80019b0:	2305      	movs	r3, #5
 80019b2:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80019d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80019d6:	2200      	movs	r2, #0
 80019d8:	4619      	mov	r1, r3
 80019da:	481c      	ldr	r0, [pc, #112]	@ (8001a4c <MX_LTDC_Init+0x15c>)
 80019dc:	f002 fed0 	bl	8004780 <HAL_LTDC_ConfigLayer>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80019e6:	f000 fa79 	bl	8001edc <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001a06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a0a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001a0c:	2305      	movs	r3, #5
 8001a0e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2201      	movs	r2, #1
 8001a32:	4619      	mov	r1, r3
 8001a34:	4805      	ldr	r0, [pc, #20]	@ (8001a4c <MX_LTDC_Init+0x15c>)
 8001a36:	f002 fea3 	bl	8004780 <HAL_LTDC_ConfigLayer>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001a40:	f000 fa4c 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001a44:	bf00      	nop
 8001a46:	3768      	adds	r7, #104	@ 0x68
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20025a64 	.word	0x20025a64
 8001a50:	40016800 	.word	0x40016800

08001a54 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001a58:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <MX_RNG_Init+0x20>)
 8001a5a:	4a07      	ldr	r2, [pc, #28]	@ (8001a78 <MX_RNG_Init+0x24>)
 8001a5c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001a5e:	4805      	ldr	r0, [pc, #20]	@ (8001a74 <MX_RNG_Init+0x20>)
 8001a60:	f003 fea8 	bl	80057b4 <HAL_RNG_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001a6a:	f000 fa37 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20025b0c 	.word	0x20025b0c
 8001a78:	50060800 	.word	0x50060800

08001a7c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001a80:	4b17      	ldr	r3, [pc, #92]	@ (8001ae0 <MX_SPI5_Init+0x64>)
 8001a82:	4a18      	ldr	r2, [pc, #96]	@ (8001ae4 <MX_SPI5_Init+0x68>)
 8001a84:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001a86:	4b16      	ldr	r3, [pc, #88]	@ (8001ae0 <MX_SPI5_Init+0x64>)
 8001a88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a8c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001a8e:	4b14      	ldr	r3, [pc, #80]	@ (8001ae0 <MX_SPI5_Init+0x64>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a94:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <MX_SPI5_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <MX_SPI5_Init+0x64>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae0 <MX_SPI5_Init+0x64>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae0 <MX_SPI5_Init+0x64>)
 8001aa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aac:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aae:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <MX_SPI5_Init+0x64>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <MX_SPI5_Init+0x64>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aba:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <MX_SPI5_Init+0x64>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ac0:	4b07      	ldr	r3, [pc, #28]	@ (8001ae0 <MX_SPI5_Init+0x64>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001ac6:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <MX_SPI5_Init+0x64>)
 8001ac8:	220a      	movs	r2, #10
 8001aca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001acc:	4804      	ldr	r0, [pc, #16]	@ (8001ae0 <MX_SPI5_Init+0x64>)
 8001ace:	f003 fef1 	bl	80058b4 <HAL_SPI_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001ad8:	f000 fa00 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20025b1c 	.word	0x20025b1c
 8001ae4:	40015000 	.word	0x40015000

08001ae8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aee:	f107 0308 	add.w	r3, r7, #8
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afc:	463b      	mov	r3, r7
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b04:	4b1d      	ldr	r3, [pc, #116]	@ (8001b7c <MX_TIM2_Init+0x94>)
 8001b06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b7c <MX_TIM2_Init+0x94>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b12:	4b1a      	ldr	r3, [pc, #104]	@ (8001b7c <MX_TIM2_Init+0x94>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b18:	4b18      	ldr	r3, [pc, #96]	@ (8001b7c <MX_TIM2_Init+0x94>)
 8001b1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b20:	4b16      	ldr	r3, [pc, #88]	@ (8001b7c <MX_TIM2_Init+0x94>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b26:	4b15      	ldr	r3, [pc, #84]	@ (8001b7c <MX_TIM2_Init+0x94>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b2c:	4813      	ldr	r0, [pc, #76]	@ (8001b7c <MX_TIM2_Init+0x94>)
 8001b2e:	f004 f9a1 	bl	8005e74 <HAL_TIM_Base_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b38:	f000 f9d0 	bl	8001edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b42:	f107 0308 	add.w	r3, r7, #8
 8001b46:	4619      	mov	r1, r3
 8001b48:	480c      	ldr	r0, [pc, #48]	@ (8001b7c <MX_TIM2_Init+0x94>)
 8001b4a:	f004 f9e2 	bl	8005f12 <HAL_TIM_ConfigClockSource>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b54:	f000 f9c2 	bl	8001edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b60:	463b      	mov	r3, r7
 8001b62:	4619      	mov	r1, r3
 8001b64:	4805      	ldr	r0, [pc, #20]	@ (8001b7c <MX_TIM2_Init+0x94>)
 8001b66:	f004 fbe1 	bl	800632c <HAL_TIMEx_MasterConfigSynchronization>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b70:	f000 f9b4 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20025b74 	.word	0x20025b74

08001b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08e      	sub	sp, #56	@ 0x38
 8001b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]
 8001b94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
 8001b9a:	4bb2      	ldr	r3, [pc, #712]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	4ab1      	ldr	r2, [pc, #708]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001ba0:	f043 0304 	orr.w	r3, r3, #4
 8001ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba6:	4baf      	ldr	r3, [pc, #700]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	623b      	str	r3, [r7, #32]
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	4bab      	ldr	r3, [pc, #684]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	4aaa      	ldr	r2, [pc, #680]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001bbc:	f043 0320 	orr.w	r3, r3, #32
 8001bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc2:	4ba8      	ldr	r3, [pc, #672]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	f003 0320 	and.w	r3, r3, #32
 8001bca:	61fb      	str	r3, [r7, #28]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
 8001bd2:	4ba4      	ldr	r3, [pc, #656]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	4aa3      	ldr	r2, [pc, #652]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bde:	4ba1      	ldr	r3, [pc, #644]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001be6:	61bb      	str	r3, [r7, #24]
 8001be8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	4b9d      	ldr	r3, [pc, #628]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	4a9c      	ldr	r2, [pc, #624]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfa:	4b9a      	ldr	r3, [pc, #616]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	4b96      	ldr	r3, [pc, #600]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	4a95      	ldr	r2, [pc, #596]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c16:	4b93      	ldr	r3, [pc, #588]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	4b8f      	ldr	r3, [pc, #572]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	4a8e      	ldr	r2, [pc, #568]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001c2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c32:	4b8c      	ldr	r3, [pc, #560]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	4b88      	ldr	r3, [pc, #544]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	4a87      	ldr	r2, [pc, #540]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001c48:	f043 0310 	orr.w	r3, r3, #16
 8001c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4e:	4b85      	ldr	r3, [pc, #532]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	f003 0310 	and.w	r3, r3, #16
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	4b81      	ldr	r3, [pc, #516]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	4a80      	ldr	r2, [pc, #512]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001c64:	f043 0308 	orr.w	r3, r3, #8
 8001c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6a:	4b7e      	ldr	r3, [pc, #504]	@ (8001e64 <MX_GPIO_Init+0x2e4>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	607b      	str	r3, [r7, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2116      	movs	r1, #22
 8001c7a:	487b      	ldr	r0, [pc, #492]	@ (8001e68 <MX_GPIO_Init+0x2e8>)
 8001c7c:	f001 fbf6 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2180      	movs	r1, #128	@ 0x80
 8001c84:	4879      	ldr	r0, [pc, #484]	@ (8001e6c <MX_GPIO_Init+0x2ec>)
 8001c86:	f001 fbf1 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001c90:	4877      	ldr	r0, [pc, #476]	@ (8001e70 <MX_GPIO_Init+0x2f0>)
 8001c92:	f001 fbeb 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001c9c:	4875      	ldr	r0, [pc, #468]	@ (8001e74 <MX_GPIO_Init+0x2f4>)
 8001c9e:	f001 fbe5 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001ca2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001ca6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cb4:	230c      	movs	r3, #12
 8001cb6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	486e      	ldr	r0, [pc, #440]	@ (8001e78 <MX_GPIO_Init+0x2f8>)
 8001cc0:	f001 f91c 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cd4:	230c      	movs	r3, #12
 8001cd6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001cd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4862      	ldr	r0, [pc, #392]	@ (8001e68 <MX_GPIO_Init+0x2e8>)
 8001ce0:	f001 f90c 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001ce4:	2316      	movs	r3, #22
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	485b      	ldr	r0, [pc, #364]	@ (8001e68 <MX_GPIO_Init+0x2e8>)
 8001cfc:	f001 f8fe 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001d00:	f248 0307 	movw	r3, #32775	@ 0x8007
 8001d04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d06:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d14:	4619      	mov	r1, r3
 8001d16:	4855      	ldr	r0, [pc, #340]	@ (8001e6c <MX_GPIO_Init+0x2ec>)
 8001d18:	f001 f8f0 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001d1c:	2380      	movs	r3, #128	@ 0x80
 8001d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d20:	2301      	movs	r3, #1
 8001d22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d30:	4619      	mov	r1, r3
 8001d32:	484e      	ldr	r0, [pc, #312]	@ (8001e6c <MX_GPIO_Init+0x2ec>)
 8001d34:	f001 f8e2 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001d38:	2320      	movs	r3, #32
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d3c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001d40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001d46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4846      	ldr	r0, [pc, #280]	@ (8001e68 <MX_GPIO_Init+0x2e8>)
 8001d4e:	f001 f8d5 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001d52:	2304      	movs	r3, #4
 8001d54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d56:	2300      	movs	r3, #0
 8001d58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001d5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d62:	4619      	mov	r1, r3
 8001d64:	4845      	ldr	r0, [pc, #276]	@ (8001e7c <MX_GPIO_Init+0x2fc>)
 8001d66:	f001 f8c9 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001d6a:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001d6e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d7c:	230c      	movs	r3, #12
 8001d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d84:	4619      	mov	r1, r3
 8001d86:	483b      	ldr	r0, [pc, #236]	@ (8001e74 <MX_GPIO_Init+0x2f4>)
 8001d88:	f001 f8b8 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001d8c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001d90:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d9e:	230c      	movs	r3, #12
 8001da0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001da6:	4619      	mov	r1, r3
 8001da8:	4835      	ldr	r0, [pc, #212]	@ (8001e80 <MX_GPIO_Init+0x300>)
 8001daa:	f001 f8a7 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001dae:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001dc0:	230c      	movs	r3, #12
 8001dc2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dc8:	4619      	mov	r1, r3
 8001dca:	482c      	ldr	r0, [pc, #176]	@ (8001e7c <MX_GPIO_Init+0x2fc>)
 8001dcc:	f001 f896 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001dd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001de2:	4619      	mov	r1, r3
 8001de4:	4825      	ldr	r0, [pc, #148]	@ (8001e7c <MX_GPIO_Init+0x2fc>)
 8001de6:	f001 f889 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001dea:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001dee:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001dfc:	230c      	movs	r3, #12
 8001dfe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e04:	4619      	mov	r1, r3
 8001e06:	481a      	ldr	r0, [pc, #104]	@ (8001e70 <MX_GPIO_Init+0x2f0>)
 8001e08:	f001 f878 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001e0c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e12:	2300      	movs	r3, #0
 8001e14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001e1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4813      	ldr	r0, [pc, #76]	@ (8001e70 <MX_GPIO_Init+0x2f0>)
 8001e22:	f001 f86b 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001e26:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2300      	movs	r3, #0
 8001e36:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	480c      	ldr	r0, [pc, #48]	@ (8001e70 <MX_GPIO_Init+0x2f0>)
 8001e40:	f001 f85c 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001e44:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e56:	2307      	movs	r3, #7
 8001e58:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e5e:	4619      	mov	r1, r3
 8001e60:	e010      	b.n	8001e84 <MX_GPIO_Init+0x304>
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40020800 	.word	0x40020800
 8001e6c:	40020000 	.word	0x40020000
 8001e70:	40020c00 	.word	0x40020c00
 8001e74:	40021800 	.word	0x40021800
 8001e78:	40021400 	.word	0x40021400
 8001e7c:	40020400 	.word	0x40020400
 8001e80:	40021000 	.word	0x40021000
 8001e84:	4812      	ldr	r0, [pc, #72]	@ (8001ed0 <MX_GPIO_Init+0x350>)
 8001e86:	f001 f839 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001e8a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e90:	2301      	movs	r3, #1
 8001e92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	480c      	ldr	r0, [pc, #48]	@ (8001ed4 <MX_GPIO_Init+0x354>)
 8001ea4:	f001 f82a 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001ea8:	2360      	movs	r3, #96	@ 0x60
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001eb8:	230c      	movs	r3, #12
 8001eba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ebc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4805      	ldr	r0, [pc, #20]	@ (8001ed8 <MX_GPIO_Init+0x358>)
 8001ec4:	f001 f81a 	bl	8002efc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ec8:	bf00      	nop
 8001eca:	3738      	adds	r7, #56	@ 0x38
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40021800 	.word	0x40021800
 8001ed8:	40020400 	.word	0x40020400

08001edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee0:	b672      	cpsid	i
}
 8001ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <Error_Handler+0x8>

08001ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	4b10      	ldr	r3, [pc, #64]	@ (8001f34 <HAL_MspInit+0x4c>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8001f34 <HAL_MspInit+0x4c>)
 8001ef8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001efc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001efe:	4b0d      	ldr	r3, [pc, #52]	@ (8001f34 <HAL_MspInit+0x4c>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	603b      	str	r3, [r7, #0]
 8001f0e:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <HAL_MspInit+0x4c>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	4a08      	ldr	r2, [pc, #32]	@ (8001f34 <HAL_MspInit+0x4c>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f1a:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <HAL_MspInit+0x4c>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f26:	2007      	movs	r0, #7
 8001f28:	f000 ffb4 	bl	8002e94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40023800 	.word	0x40023800

08001f38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	@ 0x28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a29      	ldr	r2, [pc, #164]	@ (8001ffc <HAL_I2C_MspInit+0xc4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d14b      	bne.n	8001ff2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	4b28      	ldr	r3, [pc, #160]	@ (8002000 <HAL_I2C_MspInit+0xc8>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	4a27      	ldr	r2, [pc, #156]	@ (8002000 <HAL_I2C_MspInit+0xc8>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f6a:	4b25      	ldr	r3, [pc, #148]	@ (8002000 <HAL_I2C_MspInit+0xc8>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b21      	ldr	r3, [pc, #132]	@ (8002000 <HAL_I2C_MspInit+0xc8>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	4a20      	ldr	r2, [pc, #128]	@ (8002000 <HAL_I2C_MspInit+0xc8>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f86:	4b1e      	ldr	r3, [pc, #120]	@ (8002000 <HAL_I2C_MspInit+0xc8>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001f92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f98:	2312      	movs	r3, #18
 8001f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fa4:	2304      	movs	r3, #4
 8001fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	4619      	mov	r1, r3
 8001fae:	4815      	ldr	r0, [pc, #84]	@ (8002004 <HAL_I2C_MspInit+0xcc>)
 8001fb0:	f000 ffa4 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001fb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fba:	2312      	movs	r3, #18
 8001fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	4619      	mov	r1, r3
 8001fd0:	480d      	ldr	r0, [pc, #52]	@ (8002008 <HAL_I2C_MspInit+0xd0>)
 8001fd2:	f000 ff93 	bl	8002efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <HAL_I2C_MspInit+0xc8>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	4a08      	ldr	r2, [pc, #32]	@ (8002000 <HAL_I2C_MspInit+0xc8>)
 8001fe0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_I2C_MspInit+0xc8>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001ff2:	bf00      	nop
 8001ff4:	3728      	adds	r7, #40	@ 0x28
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40005c00 	.word	0x40005c00
 8002000:	40023800 	.word	0x40023800
 8002004:	40020800 	.word	0x40020800
 8002008:	40020000 	.word	0x40020000

0800200c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b09a      	sub	sp, #104	@ 0x68
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002024:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002028:	2230      	movs	r2, #48	@ 0x30
 800202a:	2100      	movs	r1, #0
 800202c:	4618      	mov	r0, r3
 800202e:	f004 fd2b 	bl	8006a88 <memset>
  if(hltdc->Instance==LTDC)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a81      	ldr	r2, [pc, #516]	@ (800223c <HAL_LTDC_MspInit+0x230>)
 8002038:	4293      	cmp	r3, r2
 800203a:	f040 80fb 	bne.w	8002234 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800203e:	2308      	movs	r3, #8
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8002042:	23c8      	movs	r3, #200	@ 0xc8
 8002044:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002046:	2302      	movs	r3, #2
 8002048:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 800204a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800204e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002050:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002054:	4618      	mov	r0, r3
 8002056:	f003 f9ed 	bl	8005434 <HAL_RCCEx_PeriphCLKConfig>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002060:	f7ff ff3c 	bl	8001edc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002064:	2300      	movs	r3, #0
 8002066:	623b      	str	r3, [r7, #32]
 8002068:	4b75      	ldr	r3, [pc, #468]	@ (8002240 <HAL_LTDC_MspInit+0x234>)
 800206a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206c:	4a74      	ldr	r2, [pc, #464]	@ (8002240 <HAL_LTDC_MspInit+0x234>)
 800206e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002072:	6453      	str	r3, [r2, #68]	@ 0x44
 8002074:	4b72      	ldr	r3, [pc, #456]	@ (8002240 <HAL_LTDC_MspInit+0x234>)
 8002076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002078:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800207c:	623b      	str	r3, [r7, #32]
 800207e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	4b6e      	ldr	r3, [pc, #440]	@ (8002240 <HAL_LTDC_MspInit+0x234>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002088:	4a6d      	ldr	r2, [pc, #436]	@ (8002240 <HAL_LTDC_MspInit+0x234>)
 800208a:	f043 0320 	orr.w	r3, r3, #32
 800208e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002090:	4b6b      	ldr	r3, [pc, #428]	@ (8002240 <HAL_LTDC_MspInit+0x234>)
 8002092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002094:	f003 0320 	and.w	r3, r3, #32
 8002098:	61fb      	str	r3, [r7, #28]
 800209a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209c:	2300      	movs	r3, #0
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	4b67      	ldr	r3, [pc, #412]	@ (8002240 <HAL_LTDC_MspInit+0x234>)
 80020a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a4:	4a66      	ldr	r2, [pc, #408]	@ (8002240 <HAL_LTDC_MspInit+0x234>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ac:	4b64      	ldr	r3, [pc, #400]	@ (8002240 <HAL_LTDC_MspInit+0x234>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	61bb      	str	r3, [r7, #24]
 80020b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	4b60      	ldr	r3, [pc, #384]	@ (8002240 <HAL_LTDC_MspInit+0x234>)
 80020be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c0:	4a5f      	ldr	r2, [pc, #380]	@ (8002240 <HAL_LTDC_MspInit+0x234>)
 80020c2:	f043 0302 	orr.w	r3, r3, #2
 80020c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c8:	4b5d      	ldr	r3, [pc, #372]	@ (8002240 <HAL_LTDC_MspInit+0x234>)
 80020ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	4b59      	ldr	r3, [pc, #356]	@ (8002240 <HAL_LTDC_MspInit+0x234>)
 80020da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020dc:	4a58      	ldr	r2, [pc, #352]	@ (8002240 <HAL_LTDC_MspInit+0x234>)
 80020de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e4:	4b56      	ldr	r3, [pc, #344]	@ (8002240 <HAL_LTDC_MspInit+0x234>)
 80020e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	4b52      	ldr	r3, [pc, #328]	@ (8002240 <HAL_LTDC_MspInit+0x234>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f8:	4a51      	ldr	r2, [pc, #324]	@ (8002240 <HAL_LTDC_MspInit+0x234>)
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002100:	4b4f      	ldr	r3, [pc, #316]	@ (8002240 <HAL_LTDC_MspInit+0x234>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800210c:	2300      	movs	r3, #0
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	4b4b      	ldr	r3, [pc, #300]	@ (8002240 <HAL_LTDC_MspInit+0x234>)
 8002112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002114:	4a4a      	ldr	r2, [pc, #296]	@ (8002240 <HAL_LTDC_MspInit+0x234>)
 8002116:	f043 0308 	orr.w	r3, r3, #8
 800211a:	6313      	str	r3, [r2, #48]	@ 0x30
 800211c:	4b48      	ldr	r3, [pc, #288]	@ (8002240 <HAL_LTDC_MspInit+0x234>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002128:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800212c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800213a:	230e      	movs	r3, #14
 800213c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800213e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002142:	4619      	mov	r1, r3
 8002144:	483f      	ldr	r0, [pc, #252]	@ (8002244 <HAL_LTDC_MspInit+0x238>)
 8002146:	f000 fed9 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800214a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800214e:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002150:	2302      	movs	r3, #2
 8002152:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002158:	2300      	movs	r3, #0
 800215a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800215c:	230e      	movs	r3, #14
 800215e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002160:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002164:	4619      	mov	r1, r3
 8002166:	4838      	ldr	r0, [pc, #224]	@ (8002248 <HAL_LTDC_MspInit+0x23c>)
 8002168:	f000 fec8 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800216c:	2303      	movs	r3, #3
 800216e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002170:	2302      	movs	r3, #2
 8002172:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	2300      	movs	r3, #0
 800217a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800217c:	2309      	movs	r3, #9
 800217e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002180:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002184:	4619      	mov	r1, r3
 8002186:	4831      	ldr	r0, [pc, #196]	@ (800224c <HAL_LTDC_MspInit+0x240>)
 8002188:	f000 feb8 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800218c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002190:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	2300      	movs	r3, #0
 800219c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800219e:	230e      	movs	r3, #14
 80021a0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021a6:	4619      	mov	r1, r3
 80021a8:	4828      	ldr	r0, [pc, #160]	@ (800224c <HAL_LTDC_MspInit+0x240>)
 80021aa:	f000 fea7 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80021ae:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80021b2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b4:	2302      	movs	r3, #2
 80021b6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021bc:	2300      	movs	r3, #0
 80021be:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021c0:	230e      	movs	r3, #14
 80021c2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021c8:	4619      	mov	r1, r3
 80021ca:	4821      	ldr	r0, [pc, #132]	@ (8002250 <HAL_LTDC_MspInit+0x244>)
 80021cc:	f000 fe96 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80021d0:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80021d4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021de:	2300      	movs	r3, #0
 80021e0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021e2:	230e      	movs	r3, #14
 80021e4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021ea:	4619      	mov	r1, r3
 80021ec:	4819      	ldr	r0, [pc, #100]	@ (8002254 <HAL_LTDC_MspInit+0x248>)
 80021ee:	f000 fe85 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80021f2:	2348      	movs	r3, #72	@ 0x48
 80021f4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002202:	230e      	movs	r3, #14
 8002204:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002206:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800220a:	4619      	mov	r1, r3
 800220c:	4812      	ldr	r0, [pc, #72]	@ (8002258 <HAL_LTDC_MspInit+0x24c>)
 800220e:	f000 fe75 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002212:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002216:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002220:	2300      	movs	r3, #0
 8002222:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002224:	2309      	movs	r3, #9
 8002226:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002228:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800222c:	4619      	mov	r1, r3
 800222e:	4808      	ldr	r0, [pc, #32]	@ (8002250 <HAL_LTDC_MspInit+0x244>)
 8002230:	f000 fe64 	bl	8002efc <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002234:	bf00      	nop
 8002236:	3768      	adds	r7, #104	@ 0x68
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40016800 	.word	0x40016800
 8002240:	40023800 	.word	0x40023800
 8002244:	40021400 	.word	0x40021400
 8002248:	40020000 	.word	0x40020000
 800224c:	40020400 	.word	0x40020400
 8002250:	40021800 	.word	0x40021800
 8002254:	40020800 	.word	0x40020800
 8002258:	40020c00 	.word	0x40020c00

0800225c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0b      	ldr	r2, [pc, #44]	@ (8002298 <HAL_RNG_MspInit+0x3c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d10d      	bne.n	800228a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	4b0a      	ldr	r3, [pc, #40]	@ (800229c <HAL_RNG_MspInit+0x40>)
 8002274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002276:	4a09      	ldr	r2, [pc, #36]	@ (800229c <HAL_RNG_MspInit+0x40>)
 8002278:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800227c:	6353      	str	r3, [r2, #52]	@ 0x34
 800227e:	4b07      	ldr	r3, [pc, #28]	@ (800229c <HAL_RNG_MspInit+0x40>)
 8002280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	50060800 	.word	0x50060800
 800229c:	40023800 	.word	0x40023800

080022a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	@ 0x28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a19      	ldr	r2, [pc, #100]	@ (8002324 <HAL_SPI_MspInit+0x84>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d12c      	bne.n	800231c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	4b18      	ldr	r3, [pc, #96]	@ (8002328 <HAL_SPI_MspInit+0x88>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ca:	4a17      	ldr	r2, [pc, #92]	@ (8002328 <HAL_SPI_MspInit+0x88>)
 80022cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022d2:	4b15      	ldr	r3, [pc, #84]	@ (8002328 <HAL_SPI_MspInit+0x88>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	4b11      	ldr	r3, [pc, #68]	@ (8002328 <HAL_SPI_MspInit+0x88>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	4a10      	ldr	r2, [pc, #64]	@ (8002328 <HAL_SPI_MspInit+0x88>)
 80022e8:	f043 0320 	orr.w	r3, r3, #32
 80022ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002328 <HAL_SPI_MspInit+0x88>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80022fa:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80022fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002308:	2300      	movs	r3, #0
 800230a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800230c:	2305      	movs	r3, #5
 800230e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	4619      	mov	r1, r3
 8002316:	4805      	ldr	r0, [pc, #20]	@ (800232c <HAL_SPI_MspInit+0x8c>)
 8002318:	f000 fdf0 	bl	8002efc <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 800231c:	bf00      	nop
 800231e:	3728      	adds	r7, #40	@ 0x28
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40015000 	.word	0x40015000
 8002328:	40023800 	.word	0x40023800
 800232c:	40021400 	.word	0x40021400

08002330 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a08      	ldr	r2, [pc, #32]	@ (8002360 <HAL_SPI_MspDeInit+0x30>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d10a      	bne.n	8002358 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002342:	4b08      	ldr	r3, [pc, #32]	@ (8002364 <HAL_SPI_MspDeInit+0x34>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002346:	4a07      	ldr	r2, [pc, #28]	@ (8002364 <HAL_SPI_MspDeInit+0x34>)
 8002348:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800234c:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800234e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002352:	4805      	ldr	r0, [pc, #20]	@ (8002368 <HAL_SPI_MspDeInit+0x38>)
 8002354:	f000 ff7e 	bl	8003254 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40015000 	.word	0x40015000
 8002364:	40023800 	.word	0x40023800
 8002368:	40021400 	.word	0x40021400

0800236c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800237c:	d10d      	bne.n	800239a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	4b09      	ldr	r3, [pc, #36]	@ (80023a8 <HAL_TIM_Base_MspInit+0x3c>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	4a08      	ldr	r2, [pc, #32]	@ (80023a8 <HAL_TIM_Base_MspInit+0x3c>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6413      	str	r3, [r2, #64]	@ 0x40
 800238e:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <HAL_TIM_Base_MspInit+0x3c>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800239a:	bf00      	nop
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800

080023ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023b0:	bf00      	nop
 80023b2:	e7fd      	b.n	80023b0 <NMI_Handler+0x4>

080023b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023b8:	bf00      	nop
 80023ba:	e7fd      	b.n	80023b8 <HardFault_Handler+0x4>

080023bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c0:	bf00      	nop
 80023c2:	e7fd      	b.n	80023c0 <MemManage_Handler+0x4>

080023c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023c8:	bf00      	nop
 80023ca:	e7fd      	b.n	80023c8 <BusFault_Handler+0x4>

080023cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d0:	bf00      	nop
 80023d2:	e7fd      	b.n	80023d0 <UsageFault_Handler+0x4>

080023d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002402:	f000 fc51 	bl	8002ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}

0800240a <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002410:	f000 fa44 	bl	800289c <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002414:	f000 fa04 	bl	8002820 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002418:	2202      	movs	r2, #2
 800241a:	2103      	movs	r1, #3
 800241c:	2082      	movs	r0, #130	@ 0x82
 800241e:	f000 fa91 	bl	8002944 <I2C3_Write>
    HAL_Delay(5);
 8002422:	2005      	movs	r0, #5
 8002424:	f000 fc60 	bl	8002ce8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002428:	2200      	movs	r2, #0
 800242a:	2103      	movs	r1, #3
 800242c:	2082      	movs	r0, #130	@ 0x82
 800242e:	f000 fa89 	bl	8002944 <I2C3_Write>
    HAL_Delay(2);
 8002432:	2002      	movs	r0, #2
 8002434:	f000 fc58 	bl	8002ce8 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002438:	1cba      	adds	r2, r7, #2
 800243a:	2302      	movs	r3, #2
 800243c:	2100      	movs	r1, #0
 800243e:	2082      	movs	r0, #130	@ 0x82
 8002440:	f000 fad0 	bl	80029e4 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002444:	887b      	ldrh	r3, [r7, #2]
 8002446:	021b      	lsls	r3, r3, #8
 8002448:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 800244a:	887b      	ldrh	r3, [r7, #2]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	b29a      	uxth	r2, r3
 8002450:	88fb      	ldrh	r3, [r7, #6]
 8002452:	4313      	orrs	r3, r2
 8002454:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	f640 0211 	movw	r2, #2065	@ 0x811
 800245c:	4293      	cmp	r3, r2
 800245e:	d001      	beq.n	8002464 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002460:	2303      	movs	r3, #3
 8002462:	e075      	b.n	8002550 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002464:	2202      	movs	r2, #2
 8002466:	2103      	movs	r1, #3
 8002468:	2082      	movs	r0, #130	@ 0x82
 800246a:	f000 fa6b 	bl	8002944 <I2C3_Write>
    HAL_Delay(5);
 800246e:	2005      	movs	r0, #5
 8002470:	f000 fc3a 	bl	8002ce8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002474:	2200      	movs	r2, #0
 8002476:	2103      	movs	r1, #3
 8002478:	2082      	movs	r0, #130	@ 0x82
 800247a:	f000 fa63 	bl	8002944 <I2C3_Write>
    HAL_Delay(2);
 800247e:	2002      	movs	r0, #2
 8002480:	f000 fc32 	bl	8002ce8 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002484:	2004      	movs	r0, #4
 8002486:	f000 f867 	bl	8002558 <STMPE811_Read>
 800248a:	4603      	mov	r3, r0
 800248c:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 800248e:	797b      	ldrb	r3, [r7, #5]
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002496:	797b      	ldrb	r3, [r7, #5]
 8002498:	461a      	mov	r2, r3
 800249a:	2104      	movs	r1, #4
 800249c:	2082      	movs	r0, #130	@ 0x82
 800249e:	f000 fa51 	bl	8002944 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80024a2:	2004      	movs	r0, #4
 80024a4:	f000 f858 	bl	8002558 <STMPE811_Read>
 80024a8:	4603      	mov	r3, r0
 80024aa:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80024ac:	797b      	ldrb	r3, [r7, #5]
 80024ae:	f023 0302 	bic.w	r3, r3, #2
 80024b2:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80024b4:	797b      	ldrb	r3, [r7, #5]
 80024b6:	461a      	mov	r2, r3
 80024b8:	2104      	movs	r1, #4
 80024ba:	2082      	movs	r0, #130	@ 0x82
 80024bc:	f000 fa42 	bl	8002944 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80024c0:	2249      	movs	r2, #73	@ 0x49
 80024c2:	2120      	movs	r1, #32
 80024c4:	2082      	movs	r0, #130	@ 0x82
 80024c6:	f000 fa3d 	bl	8002944 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80024ca:	2002      	movs	r0, #2
 80024cc:	f000 fc0c 	bl	8002ce8 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80024d0:	2201      	movs	r2, #1
 80024d2:	2121      	movs	r1, #33	@ 0x21
 80024d4:	2082      	movs	r0, #130	@ 0x82
 80024d6:	f000 fa35 	bl	8002944 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80024da:	2017      	movs	r0, #23
 80024dc:	f000 f83c 	bl	8002558 <STMPE811_Read>
 80024e0:	4603      	mov	r3, r0
 80024e2:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80024e4:	797b      	ldrb	r3, [r7, #5]
 80024e6:	f043 031e 	orr.w	r3, r3, #30
 80024ea:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80024ec:	797b      	ldrb	r3, [r7, #5]
 80024ee:	461a      	mov	r2, r3
 80024f0:	2117      	movs	r1, #23
 80024f2:	2082      	movs	r0, #130	@ 0x82
 80024f4:	f000 fa26 	bl	8002944 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80024f8:	229a      	movs	r2, #154	@ 0x9a
 80024fa:	2141      	movs	r1, #65	@ 0x41
 80024fc:	2082      	movs	r0, #130	@ 0x82
 80024fe:	f000 fa21 	bl	8002944 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002502:	2201      	movs	r2, #1
 8002504:	214a      	movs	r1, #74	@ 0x4a
 8002506:	2082      	movs	r0, #130	@ 0x82
 8002508:	f000 fa1c 	bl	8002944 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800250c:	2201      	movs	r2, #1
 800250e:	214b      	movs	r1, #75	@ 0x4b
 8002510:	2082      	movs	r0, #130	@ 0x82
 8002512:	f000 fa17 	bl	8002944 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002516:	2200      	movs	r2, #0
 8002518:	214b      	movs	r1, #75	@ 0x4b
 800251a:	2082      	movs	r0, #130	@ 0x82
 800251c:	f000 fa12 	bl	8002944 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002520:	2201      	movs	r2, #1
 8002522:	2156      	movs	r1, #86	@ 0x56
 8002524:	2082      	movs	r0, #130	@ 0x82
 8002526:	f000 fa0d 	bl	8002944 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 800252a:	2201      	movs	r2, #1
 800252c:	2158      	movs	r1, #88	@ 0x58
 800252e:	2082      	movs	r0, #130	@ 0x82
 8002530:	f000 fa08 	bl	8002944 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002534:	2203      	movs	r2, #3
 8002536:	2140      	movs	r1, #64	@ 0x40
 8002538:	2082      	movs	r0, #130	@ 0x82
 800253a:	f000 fa03 	bl	8002944 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 800253e:	22ff      	movs	r2, #255	@ 0xff
 8002540:	210b      	movs	r1, #11
 8002542:	2082      	movs	r0, #130	@ 0x82
 8002544:	f000 f9fe 	bl	8002944 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002548:	20c8      	movs	r0, #200	@ 0xc8
 800254a:	f000 fbcd 	bl	8002ce8 <HAL_Delay>

    return STMPE811_State_Ok;
 800254e:	2302      	movs	r3, #2

}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002562:	f107 020f 	add.w	r2, r7, #15
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	4619      	mov	r1, r3
 800256a:	2082      	movs	r0, #130	@ 0x82
 800256c:	f000 fa14 	bl	8002998 <I2C3_Read>

    return readData;
 8002570:	7bfb      	ldrb	r3, [r7, #15]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	791a      	ldrb	r2, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 800258a:	2040      	movs	r0, #64	@ 0x40
 800258c:	f7ff ffe4 	bl	8002558 <STMPE811_Read>
 8002590:	4603      	mov	r3, r0
 8002592:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002598:	2b00      	cmp	r3, #0
 800259a:	db0e      	blt.n	80025ba <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80025a2:	2201      	movs	r2, #1
 80025a4:	214b      	movs	r1, #75	@ 0x4b
 80025a6:	2082      	movs	r0, #130	@ 0x82
 80025a8:	f000 f9cc 	bl	8002944 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80025ac:	2200      	movs	r2, #0
 80025ae:	214b      	movs	r1, #75	@ 0x4b
 80025b0:	2082      	movs	r0, #130	@ 0x82
 80025b2:	f000 f9c7 	bl	8002944 <I2C3_Write>

        return STMPE811_State_Released;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e0a7      	b.n	800270a <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	799b      	ldrb	r3, [r3, #6]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d117      	bne.n	80025f2 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 fa2e 	bl	8002a28 <TM_STMPE811_ReadX>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	885b      	ldrh	r3, [r3, #2]
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 fa83 	bl	8002ae8 <TM_STMPE811_ReadY>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80025e8:	3301      	adds	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	805a      	strh	r2, [r3, #2]
 80025f0:	e048      	b.n	8002684 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	799b      	ldrb	r3, [r3, #6]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d112      	bne.n	8002620 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 fa12 	bl	8002a28 <TM_STMPE811_ReadX>
 8002604:	4603      	mov	r3, r0
 8002606:	461a      	mov	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	885b      	ldrh	r3, [r3, #2]
 8002610:	4618      	mov	r0, r3
 8002612:	f000 fa69 	bl	8002ae8 <TM_STMPE811_ReadY>
 8002616:	4603      	mov	r3, r0
 8002618:	461a      	mov	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	805a      	strh	r2, [r3, #2]
 800261e:	e031      	b.n	8002684 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	799b      	ldrb	r3, [r3, #6]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d115      	bne.n	8002654 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	885b      	ldrh	r3, [r3, #2]
 800262c:	4618      	mov	r0, r3
 800262e:	f000 f9fb 	bl	8002a28 <TM_STMPE811_ReadX>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f000 fa52 	bl	8002ae8 <TM_STMPE811_ReadY>
 8002644:	4603      	mov	r3, r0
 8002646:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800264a:	3301      	adds	r3, #1
 800264c:	b29a      	uxth	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	801a      	strh	r2, [r3, #0]
 8002652:	e017      	b.n	8002684 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	799b      	ldrb	r3, [r3, #6]
 8002658:	2b03      	cmp	r3, #3
 800265a:	d113      	bne.n	8002684 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f000 f9e1 	bl	8002a28 <TM_STMPE811_ReadX>
 8002666:	4603      	mov	r3, r0
 8002668:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800266c:	b29a      	uxth	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f000 fa36 	bl	8002ae8 <TM_STMPE811_ReadY>
 800267c:	4603      	mov	r3, r0
 800267e:	461a      	mov	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002684:	2201      	movs	r2, #1
 8002686:	214b      	movs	r1, #75	@ 0x4b
 8002688:	2082      	movs	r0, #130	@ 0x82
 800268a:	f000 f95b 	bl	8002944 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800268e:	2200      	movs	r2, #0
 8002690:	214b      	movs	r1, #75	@ 0x4b
 8002692:	2082      	movs	r0, #130	@ 0x82
 8002694:	f000 f956 	bl	8002944 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	799b      	ldrb	r3, [r3, #6]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <STMPE811_ReadTouch+0x12e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	799b      	ldrb	r3, [r3, #6]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d115      	bne.n	80026d4 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d027      	beq.n	8002700 <STMPE811_ReadTouch+0x186>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	2bee      	cmp	r3, #238	@ 0xee
 80026b6:	d823      	bhi.n	8002700 <STMPE811_ReadTouch+0x186>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	885b      	ldrh	r3, [r3, #2]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01f      	beq.n	8002700 <STMPE811_ReadTouch+0x186>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	885b      	ldrh	r3, [r3, #2]
 80026c4:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80026c8:	d81a      	bhi.n	8002700 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80026d0:	2300      	movs	r3, #0
 80026d2:	e01a      	b.n	800270a <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d012      	beq.n	8002702 <STMPE811_ReadTouch+0x188>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80026e4:	d80d      	bhi.n	8002702 <STMPE811_ReadTouch+0x188>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	885b      	ldrh	r3, [r3, #2]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d009      	beq.n	8002702 <STMPE811_ReadTouch+0x188>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	885b      	ldrh	r3, [r3, #2]
 80026f2:	2bee      	cmp	r3, #238	@ 0xee
 80026f4:	d805      	bhi.n	8002702 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80026fc:	2300      	movs	r3, #0
 80026fe:	e004      	b.n	800270a <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002700:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002708:	2301      	movs	r3, #1
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <STMPE811_DetermineTouchPosition>:

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	799b      	ldrb	r3, [r3, #6]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d117      	bne.n	8002752 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f000 f97e 	bl	8002a28 <TM_STMPE811_ReadX>
 800272c:	4603      	mov	r3, r0
 800272e:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002732:	b29a      	uxth	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	885b      	ldrh	r3, [r3, #2]
 800273c:	4618      	mov	r0, r3
 800273e:	f000 f9d3 	bl	8002ae8 <TM_STMPE811_ReadY>
 8002742:	4603      	mov	r3, r0
 8002744:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002748:	3301      	adds	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	805a      	strh	r2, [r3, #2]
 8002750:	e048      	b.n	80027e4 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	799b      	ldrb	r3, [r3, #6]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d112      	bne.n	8002780 <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f000 f962 	bl	8002a28 <TM_STMPE811_ReadX>
 8002764:	4603      	mov	r3, r0
 8002766:	461a      	mov	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	885b      	ldrh	r3, [r3, #2]
 8002770:	4618      	mov	r0, r3
 8002772:	f000 f9b9 	bl	8002ae8 <TM_STMPE811_ReadY>
 8002776:	4603      	mov	r3, r0
 8002778:	461a      	mov	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	805a      	strh	r2, [r3, #2]
 800277e:	e031      	b.n	80027e4 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	799b      	ldrb	r3, [r3, #6]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d115      	bne.n	80027b4 <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	885b      	ldrh	r3, [r3, #2]
 800278c:	4618      	mov	r0, r3
 800278e:	f000 f94b 	bl	8002a28 <TM_STMPE811_ReadX>
 8002792:	4603      	mov	r3, r0
 8002794:	461a      	mov	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f9a2 	bl	8002ae8 <TM_STMPE811_ReadY>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80027aa:	3301      	adds	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	801a      	strh	r2, [r3, #0]
 80027b2:	e017      	b.n	80027e4 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	799b      	ldrb	r3, [r3, #6]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d113      	bne.n	80027e4 <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f000 f931 	bl	8002a28 <TM_STMPE811_ReadX>
 80027c6:	4603      	mov	r3, r0
 80027c8:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f986 	bl	8002ae8 <TM_STMPE811_ReadY>
 80027dc:	4603      	mov	r3, r0
 80027de:	461a      	mov	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80027e4:	2201      	movs	r2, #1
 80027e6:	214b      	movs	r1, #75	@ 0x4b
 80027e8:	2082      	movs	r0, #130	@ 0x82
 80027ea:	f000 f8ab 	bl	8002944 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80027ee:	2200      	movs	r2, #0
 80027f0:	214b      	movs	r1, #75	@ 0x4b
 80027f2:	2082      	movs	r0, #130	@ 0x82
 80027f4:	f000 f8a6 	bl	8002944 <I2C3_Write>
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002804:	4b05      	ldr	r3, [pc, #20]	@ (800281c <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 800280c:	bf00      	nop
 800280e:	e7fd      	b.n	800280c <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	20025c10 	.word	0x20025c10

08002820 <I2C3_Init>:

static void I2C3_Init()
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	4b18      	ldr	r3, [pc, #96]	@ (800288c <I2C3_Init+0x6c>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	4a17      	ldr	r2, [pc, #92]	@ (800288c <I2C3_Init+0x6c>)
 8002830:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002834:	6413      	str	r3, [r2, #64]	@ 0x40
 8002836:	4b15      	ldr	r3, [pc, #84]	@ (800288c <I2C3_Init+0x6c>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002842:	4b13      	ldr	r3, [pc, #76]	@ (8002890 <I2C3_Init+0x70>)
 8002844:	4a13      	ldr	r2, [pc, #76]	@ (8002894 <I2C3_Init+0x74>)
 8002846:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002848:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <I2C3_Init+0x70>)
 800284a:	4a13      	ldr	r2, [pc, #76]	@ (8002898 <I2C3_Init+0x78>)
 800284c:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800284e:	4b10      	ldr	r3, [pc, #64]	@ (8002890 <I2C3_Init+0x70>)
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002854:	4b0e      	ldr	r3, [pc, #56]	@ (8002890 <I2C3_Init+0x70>)
 8002856:	2200      	movs	r2, #0
 8002858:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800285a:	4b0d      	ldr	r3, [pc, #52]	@ (8002890 <I2C3_Init+0x70>)
 800285c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002860:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002862:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <I2C3_Init+0x70>)
 8002864:	2200      	movs	r2, #0
 8002866:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002868:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <I2C3_Init+0x70>)
 800286a:	2200      	movs	r2, #0
 800286c:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800286e:	4808      	ldr	r0, [pc, #32]	@ (8002890 <I2C3_Init+0x70>)
 8002870:	f000 fe16 	bl	80034a0 <HAL_I2C_Init>
 8002874:	4603      	mov	r3, r0
 8002876:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800287e:	bf00      	nop
 8002880:	e7fd      	b.n	800287e <I2C3_Init+0x5e>
    }
    return;
 8002882:	bf00      	nop
}
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800
 8002890:	20025bbc 	.word	0x20025bbc
 8002894:	40005c00 	.word	0x40005c00
 8002898:	000186a0 	.word	0x000186a0

0800289c <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a2:	f107 030c 	add.w	r3, r7, #12
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	609a      	str	r2, [r3, #8]
 80028ae:	60da      	str	r2, [r3, #12]
 80028b0:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	4b20      	ldr	r3, [pc, #128]	@ (8002938 <I2C3_MspInit+0x9c>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	4a1f      	ldr	r2, [pc, #124]	@ (8002938 <I2C3_MspInit+0x9c>)
 80028bc:	f043 0304 	orr.w	r3, r3, #4
 80028c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002938 <I2C3_MspInit+0x9c>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	4b19      	ldr	r3, [pc, #100]	@ (8002938 <I2C3_MspInit+0x9c>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d6:	4a18      	ldr	r2, [pc, #96]	@ (8002938 <I2C3_MspInit+0x9c>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028de:	4b16      	ldr	r3, [pc, #88]	@ (8002938 <I2C3_MspInit+0x9c>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	607b      	str	r3, [r7, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80028ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028f0:	2312      	movs	r3, #18
 80028f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028fc:	2304      	movs	r3, #4
 80028fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002900:	f107 030c 	add.w	r3, r7, #12
 8002904:	4619      	mov	r1, r3
 8002906:	480d      	ldr	r0, [pc, #52]	@ (800293c <I2C3_MspInit+0xa0>)
 8002908:	f000 faf8 	bl	8002efc <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800290c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002910:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002912:	2312      	movs	r3, #18
 8002914:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2300      	movs	r3, #0
 800291c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800291e:	2304      	movs	r3, #4
 8002920:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002922:	f107 030c 	add.w	r3, r7, #12
 8002926:	4619      	mov	r1, r3
 8002928:	4805      	ldr	r0, [pc, #20]	@ (8002940 <I2C3_MspInit+0xa4>)
 800292a:	f000 fae7 	bl	8002efc <HAL_GPIO_Init>
    
}
 800292e:	bf00      	nop
 8002930:	3720      	adds	r7, #32
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800
 800293c:	40020800 	.word	0x40020800
 8002940:	40020000 	.word	0x40020000

08002944 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af04      	add	r7, sp, #16
 800294a:	4603      	mov	r3, r0
 800294c:	80fb      	strh	r3, [r7, #6]
 800294e:	460b      	mov	r3, r1
 8002950:	717b      	strb	r3, [r7, #5]
 8002952:	4613      	mov	r3, r2
 8002954:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002956:	793b      	ldrb	r3, [r7, #4]
 8002958:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800295a:	797b      	ldrb	r3, [r7, #5]
 800295c:	b29a      	uxth	r2, r3
 800295e:	88f9      	ldrh	r1, [r7, #6]
 8002960:	4b0a      	ldr	r3, [pc, #40]	@ (800298c <I2C3_Write+0x48>)
 8002962:	9302      	str	r3, [sp, #8]
 8002964:	2301      	movs	r3, #1
 8002966:	9301      	str	r3, [sp, #4]
 8002968:	f107 030f 	add.w	r3, r7, #15
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	2301      	movs	r3, #1
 8002970:	4807      	ldr	r0, [pc, #28]	@ (8002990 <I2C3_Write+0x4c>)
 8002972:	f000 fed9 	bl	8003728 <HAL_I2C_Mem_Write>
 8002976:	4603      	mov	r3, r0
 8002978:	461a      	mov	r2, r3
 800297a:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <I2C3_Write+0x50>)
 800297c:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800297e:	f7ff ff3f 	bl	8002800 <verifyHAL_I2C_IS_OKAY>
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	0003d090 	.word	0x0003d090
 8002990:	20025bbc 	.word	0x20025bbc
 8002994:	20025c10 	.word	0x20025c10

08002998 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af04      	add	r7, sp, #16
 800299e:	4603      	mov	r3, r0
 80029a0:	603a      	str	r2, [r7, #0]
 80029a2:	71fb      	strb	r3, [r7, #7]
 80029a4:	460b      	mov	r3, r1
 80029a6:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	b299      	uxth	r1, r3
 80029ac:	79bb      	ldrb	r3, [r7, #6]
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	4b09      	ldr	r3, [pc, #36]	@ (80029d8 <I2C3_Read+0x40>)
 80029b2:	9302      	str	r3, [sp, #8]
 80029b4:	2301      	movs	r3, #1
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	2301      	movs	r3, #1
 80029be:	4807      	ldr	r0, [pc, #28]	@ (80029dc <I2C3_Read+0x44>)
 80029c0:	f000 ffac 	bl	800391c <HAL_I2C_Mem_Read>
 80029c4:	4603      	mov	r3, r0
 80029c6:	461a      	mov	r2, r3
 80029c8:	4b05      	ldr	r3, [pc, #20]	@ (80029e0 <I2C3_Read+0x48>)
 80029ca:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80029cc:	f7ff ff18 	bl	8002800 <verifyHAL_I2C_IS_OKAY>
}
 80029d0:	bf00      	nop
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	0003d090 	.word	0x0003d090
 80029dc:	20025bbc 	.word	0x20025bbc
 80029e0:	20025c10 	.word	0x20025c10

080029e4 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af04      	add	r7, sp, #16
 80029ea:	603a      	str	r2, [r7, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	4603      	mov	r3, r0
 80029f0:	71fb      	strb	r3, [r7, #7]
 80029f2:	460b      	mov	r3, r1
 80029f4:	71bb      	strb	r3, [r7, #6]
 80029f6:	4613      	mov	r3, r2
 80029f8:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	b299      	uxth	r1, r3
 80029fe:	79bb      	ldrb	r3, [r7, #6]
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	4b07      	ldr	r3, [pc, #28]	@ (8002a20 <I2C3_MulitByteRead+0x3c>)
 8002a04:	9302      	str	r3, [sp, #8]
 8002a06:	88bb      	ldrh	r3, [r7, #4]
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	2301      	movs	r3, #1
 8002a10:	4804      	ldr	r0, [pc, #16]	@ (8002a24 <I2C3_MulitByteRead+0x40>)
 8002a12:	f000 ff83 	bl	800391c <HAL_I2C_Mem_Read>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	0003d090 	.word	0x0003d090
 8002a24:	20025bbc 	.word	0x20025bbc

08002a28 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002a32:	204d      	movs	r0, #77	@ 0x4d
 8002a34:	f7ff fd90 	bl	8002558 <STMPE811_Read>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002a3c:	204e      	movs	r0, #78	@ 0x4e
 8002a3e:	f7ff fd8b 	bl	8002558 <STMPE811_Read>
 8002a42:	4603      	mov	r3, r0
 8002a44:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002a46:	7a7b      	ldrb	r3, [r7, #9]
 8002a48:	b21b      	sxth	r3, r3
 8002a4a:	021b      	lsls	r3, r3, #8
 8002a4c:	b21a      	sxth	r2, r3
 8002a4e:	7a3b      	ldrb	r3, [r7, #8]
 8002a50:	b21b      	sxth	r3, r3
 8002a52:	4313      	orrs	r3, r2
 8002a54:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002a56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a5a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	dc06      	bgt.n	8002a70 <TM_STMPE811_ReadX+0x48>
        val = 3900 - val;
 8002a62:	89fb      	ldrh	r3, [r7, #14]
 8002a64:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002a68:	330c      	adds	r3, #12
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	81fb      	strh	r3, [r7, #14]
 8002a6e:	e005      	b.n	8002a7c <TM_STMPE811_ReadX+0x54>
    } else {
        val = 3800 - val;
 8002a70:	89fb      	ldrh	r3, [r7, #14]
 8002a72:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002a76:	3308      	adds	r3, #8
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002a7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a80:	4a18      	ldr	r2, [pc, #96]	@ (8002ae4 <TM_STMPE811_ReadX+0xbc>)
 8002a82:	fb82 1203 	smull	r1, r2, r2, r3
 8002a86:	441a      	add	r2, r3
 8002a88:	10d2      	asrs	r2, r2, #3
 8002a8a:	17db      	asrs	r3, r3, #31
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002a90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a94:	2bef      	cmp	r3, #239	@ 0xef
 8002a96:	dd02      	ble.n	8002a9e <TM_STMPE811_ReadX+0x76>
        val = 239;
 8002a98:	23ef      	movs	r3, #239	@ 0xef
 8002a9a:	81fb      	strh	r3, [r7, #14]
 8002a9c:	e005      	b.n	8002aaa <TM_STMPE811_ReadX+0x82>
    } else if (val < 0) {
 8002a9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	da01      	bge.n	8002aaa <TM_STMPE811_ReadX+0x82>
        val = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002aaa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	dd05      	ble.n	8002ac0 <TM_STMPE811_ReadX+0x98>
 8002ab4:	89fa      	ldrh	r2, [r7, #14]
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	b21b      	sxth	r3, r3
 8002abe:	e004      	b.n	8002aca <TM_STMPE811_ReadX+0xa2>
 8002ac0:	89fb      	ldrh	r3, [r7, #14]
 8002ac2:	88fa      	ldrh	r2, [r7, #6]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	b21b      	sxth	r3, r3
 8002aca:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002acc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	dd01      	ble.n	8002ad8 <TM_STMPE811_ReadX+0xb0>
        return val;
 8002ad4:	89fb      	ldrh	r3, [r7, #14]
 8002ad6:	e000      	b.n	8002ada <TM_STMPE811_ReadX+0xb2>
    }
    return x;
 8002ad8:	88fb      	ldrh	r3, [r7, #6]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	88888889 	.word	0x88888889

08002ae8 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002af2:	204f      	movs	r0, #79	@ 0x4f
 8002af4:	f7ff fd30 	bl	8002558 <STMPE811_Read>
 8002af8:	4603      	mov	r3, r0
 8002afa:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002afc:	2050      	movs	r0, #80	@ 0x50
 8002afe:	f7ff fd2b 	bl	8002558 <STMPE811_Read>
 8002b02:	4603      	mov	r3, r0
 8002b04:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002b06:	7a7b      	ldrb	r3, [r7, #9]
 8002b08:	b21b      	sxth	r3, r3
 8002b0a:	021b      	lsls	r3, r3, #8
 8002b0c:	b21a      	sxth	r2, r3
 8002b0e:	7a3b      	ldrb	r3, [r7, #8]
 8002b10:	b21b      	sxth	r3, r3
 8002b12:	4313      	orrs	r3, r2
 8002b14:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002b16:	89fb      	ldrh	r3, [r7, #14]
 8002b18:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002b20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b24:	4a18      	ldr	r2, [pc, #96]	@ (8002b88 <TM_STMPE811_ReadY+0xa0>)
 8002b26:	fb82 1203 	smull	r1, r2, r2, r3
 8002b2a:	1052      	asrs	r2, r2, #1
 8002b2c:	17db      	asrs	r3, r3, #31
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002b32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	dc02      	bgt.n	8002b40 <TM_STMPE811_ReadY+0x58>
        val = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	81fb      	strh	r3, [r7, #14]
 8002b3e:	e007      	b.n	8002b50 <TM_STMPE811_ReadY+0x68>
    } else if (val >= 320) {
 8002b40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b44:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002b48:	db02      	blt.n	8002b50 <TM_STMPE811_ReadY+0x68>
        val = 319;
 8002b4a:	f240 133f 	movw	r3, #319	@ 0x13f
 8002b4e:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002b50:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	dd05      	ble.n	8002b66 <TM_STMPE811_ReadY+0x7e>
 8002b5a:	89fa      	ldrh	r2, [r7, #14]
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	b21b      	sxth	r3, r3
 8002b64:	e004      	b.n	8002b70 <TM_STMPE811_ReadY+0x88>
 8002b66:	89fb      	ldrh	r3, [r7, #14]
 8002b68:	88fa      	ldrh	r2, [r7, #6]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	b21b      	sxth	r3, r3
 8002b70:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002b72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	dd01      	ble.n	8002b7e <TM_STMPE811_ReadY+0x96>
        return val;
 8002b7a:	89fb      	ldrh	r3, [r7, #14]
 8002b7c:	e000      	b.n	8002b80 <TM_STMPE811_ReadY+0x98>
    }
    return y;
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	2e8ba2e9 	.word	0x2e8ba2e9

08002b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b90:	4b06      	ldr	r3, [pc, #24]	@ (8002bac <SystemInit+0x20>)
 8002b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b96:	4a05      	ldr	r2, [pc, #20]	@ (8002bac <SystemInit+0x20>)
 8002b98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002bb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002be8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bb4:	f7ff ffea 	bl	8002b8c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bb8:	480c      	ldr	r0, [pc, #48]	@ (8002bec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bba:	490d      	ldr	r1, [pc, #52]	@ (8002bf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002bf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc0:	e002      	b.n	8002bc8 <LoopCopyDataInit>

08002bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bc6:	3304      	adds	r3, #4

08002bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bcc:	d3f9      	bcc.n	8002bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bce:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bd0:	4c0a      	ldr	r4, [pc, #40]	@ (8002bfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd4:	e001      	b.n	8002bda <LoopFillZerobss>

08002bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bd8:	3204      	adds	r2, #4

08002bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bdc:	d3fb      	bcc.n	8002bd6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002bde:	f003 ff61 	bl	8006aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002be2:	f7fe fdbe 	bl	8001762 <main>
  bx  lr    
 8002be6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002be8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002bf4:	08008038 	.word	0x08008038
  ldr r2, =_sbss
 8002bf8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002bfc:	20025e0c 	.word	0x20025e0c

08002c00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c00:	e7fe      	b.n	8002c00 <ADC_IRQHandler>
	...

08002c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c08:	4b0e      	ldr	r3, [pc, #56]	@ (8002c44 <HAL_Init+0x40>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c44 <HAL_Init+0x40>)
 8002c0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c14:	4b0b      	ldr	r3, [pc, #44]	@ (8002c44 <HAL_Init+0x40>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a0a      	ldr	r2, [pc, #40]	@ (8002c44 <HAL_Init+0x40>)
 8002c1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c20:	4b08      	ldr	r3, [pc, #32]	@ (8002c44 <HAL_Init+0x40>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a07      	ldr	r2, [pc, #28]	@ (8002c44 <HAL_Init+0x40>)
 8002c26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c2c:	2003      	movs	r0, #3
 8002c2e:	f000 f931 	bl	8002e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c32:	2000      	movs	r0, #0
 8002c34:	f000 f808 	bl	8002c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c38:	f7ff f956 	bl	8001ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023c00 	.word	0x40023c00

08002c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c50:	4b12      	ldr	r3, [pc, #72]	@ (8002c9c <HAL_InitTick+0x54>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4b12      	ldr	r3, [pc, #72]	@ (8002ca0 <HAL_InitTick+0x58>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f93b 	bl	8002ee2 <HAL_SYSTICK_Config>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e00e      	b.n	8002c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b0f      	cmp	r3, #15
 8002c7a:	d80a      	bhi.n	8002c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c84:	f000 f911 	bl	8002eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c88:	4a06      	ldr	r2, [pc, #24]	@ (8002ca4 <HAL_InitTick+0x5c>)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	e000      	b.n	8002c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000010 	.word	0x20000010
 8002ca0:	20000018 	.word	0x20000018
 8002ca4:	20000014 	.word	0x20000014

08002ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cac:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <HAL_IncTick+0x20>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <HAL_IncTick+0x24>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	4a04      	ldr	r2, [pc, #16]	@ (8002ccc <HAL_IncTick+0x24>)
 8002cba:	6013      	str	r3, [r2, #0]
}
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000018 	.word	0x20000018
 8002ccc:	20025c14 	.word	0x20025c14

08002cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cd4:	4b03      	ldr	r3, [pc, #12]	@ (8002ce4 <HAL_GetTick+0x14>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	20025c14 	.word	0x20025c14

08002ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cf0:	f7ff ffee 	bl	8002cd0 <HAL_GetTick>
 8002cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d00:	d005      	beq.n	8002d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d02:	4b0a      	ldr	r3, [pc, #40]	@ (8002d2c <HAL_Delay+0x44>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d0e:	bf00      	nop
 8002d10:	f7ff ffde 	bl	8002cd0 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d8f7      	bhi.n	8002d10 <HAL_Delay+0x28>
  {
  }
}
 8002d20:	bf00      	nop
 8002d22:	bf00      	nop
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000018 	.word	0x20000018

08002d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d40:	4b0c      	ldr	r3, [pc, #48]	@ (8002d74 <__NVIC_SetPriorityGrouping+0x44>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d62:	4a04      	ldr	r2, [pc, #16]	@ (8002d74 <__NVIC_SetPriorityGrouping+0x44>)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	60d3      	str	r3, [r2, #12]
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d7c:	4b04      	ldr	r3, [pc, #16]	@ (8002d90 <__NVIC_GetPriorityGrouping+0x18>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	0a1b      	lsrs	r3, r3, #8
 8002d82:	f003 0307 	and.w	r3, r3, #7
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	6039      	str	r1, [r7, #0]
 8002d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	db0a      	blt.n	8002dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	490c      	ldr	r1, [pc, #48]	@ (8002de0 <__NVIC_SetPriority+0x4c>)
 8002dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db2:	0112      	lsls	r2, r2, #4
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	440b      	add	r3, r1
 8002db8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dbc:	e00a      	b.n	8002dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	4908      	ldr	r1, [pc, #32]	@ (8002de4 <__NVIC_SetPriority+0x50>)
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	3b04      	subs	r3, #4
 8002dcc:	0112      	lsls	r2, r2, #4
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	761a      	strb	r2, [r3, #24]
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000e100 	.word	0xe000e100
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b089      	sub	sp, #36	@ 0x24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f1c3 0307 	rsb	r3, r3, #7
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	bf28      	it	cs
 8002e06:	2304      	movcs	r3, #4
 8002e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	2b06      	cmp	r3, #6
 8002e10:	d902      	bls.n	8002e18 <NVIC_EncodePriority+0x30>
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3b03      	subs	r3, #3
 8002e16:	e000      	b.n	8002e1a <NVIC_EncodePriority+0x32>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43da      	mvns	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3a:	43d9      	mvns	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e40:	4313      	orrs	r3, r2
         );
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3724      	adds	r7, #36	@ 0x24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e60:	d301      	bcc.n	8002e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e62:	2301      	movs	r3, #1
 8002e64:	e00f      	b.n	8002e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e66:	4a0a      	ldr	r2, [pc, #40]	@ (8002e90 <SysTick_Config+0x40>)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e6e:	210f      	movs	r1, #15
 8002e70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e74:	f7ff ff8e 	bl	8002d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e78:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <SysTick_Config+0x40>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e7e:	4b04      	ldr	r3, [pc, #16]	@ (8002e90 <SysTick_Config+0x40>)
 8002e80:	2207      	movs	r2, #7
 8002e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	e000e010 	.word	0xe000e010

08002e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff ff47 	bl	8002d30 <__NVIC_SetPriorityGrouping>
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b086      	sub	sp, #24
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ebc:	f7ff ff5c 	bl	8002d78 <__NVIC_GetPriorityGrouping>
 8002ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	6978      	ldr	r0, [r7, #20]
 8002ec8:	f7ff ff8e 	bl	8002de8 <NVIC_EncodePriority>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ff5d 	bl	8002d94 <__NVIC_SetPriority>
}
 8002eda:	bf00      	nop
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7ff ffb0 	bl	8002e50 <SysTick_Config>
 8002ef0:	4603      	mov	r3, r0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b089      	sub	sp, #36	@ 0x24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	e177      	b.n	8003208 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f18:	2201      	movs	r2, #1
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	f040 8166 	bne.w	8003202 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d005      	beq.n	8002f4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d130      	bne.n	8002fb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	2203      	movs	r2, #3
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f84:	2201      	movs	r2, #1
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	091b      	lsrs	r3, r3, #4
 8002f9a:	f003 0201 	and.w	r2, r3, #1
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d017      	beq.n	8002fec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d123      	bne.n	8003040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	08da      	lsrs	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3208      	adds	r2, #8
 8003000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	220f      	movs	r2, #15
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	08da      	lsrs	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3208      	adds	r2, #8
 800303a:	69b9      	ldr	r1, [r7, #24]
 800303c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	2203      	movs	r2, #3
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0203 	and.w	r2, r3, #3
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80c0 	beq.w	8003202 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	4b66      	ldr	r3, [pc, #408]	@ (8003220 <HAL_GPIO_Init+0x324>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308a:	4a65      	ldr	r2, [pc, #404]	@ (8003220 <HAL_GPIO_Init+0x324>)
 800308c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003090:	6453      	str	r3, [r2, #68]	@ 0x44
 8003092:	4b63      	ldr	r3, [pc, #396]	@ (8003220 <HAL_GPIO_Init+0x324>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800309e:	4a61      	ldr	r2, [pc, #388]	@ (8003224 <HAL_GPIO_Init+0x328>)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	089b      	lsrs	r3, r3, #2
 80030a4:	3302      	adds	r3, #2
 80030a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	220f      	movs	r2, #15
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a58      	ldr	r2, [pc, #352]	@ (8003228 <HAL_GPIO_Init+0x32c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d037      	beq.n	800313a <HAL_GPIO_Init+0x23e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a57      	ldr	r2, [pc, #348]	@ (800322c <HAL_GPIO_Init+0x330>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d031      	beq.n	8003136 <HAL_GPIO_Init+0x23a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a56      	ldr	r2, [pc, #344]	@ (8003230 <HAL_GPIO_Init+0x334>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d02b      	beq.n	8003132 <HAL_GPIO_Init+0x236>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a55      	ldr	r2, [pc, #340]	@ (8003234 <HAL_GPIO_Init+0x338>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d025      	beq.n	800312e <HAL_GPIO_Init+0x232>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a54      	ldr	r2, [pc, #336]	@ (8003238 <HAL_GPIO_Init+0x33c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d01f      	beq.n	800312a <HAL_GPIO_Init+0x22e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a53      	ldr	r2, [pc, #332]	@ (800323c <HAL_GPIO_Init+0x340>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d019      	beq.n	8003126 <HAL_GPIO_Init+0x22a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a52      	ldr	r2, [pc, #328]	@ (8003240 <HAL_GPIO_Init+0x344>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d013      	beq.n	8003122 <HAL_GPIO_Init+0x226>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a51      	ldr	r2, [pc, #324]	@ (8003244 <HAL_GPIO_Init+0x348>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00d      	beq.n	800311e <HAL_GPIO_Init+0x222>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a50      	ldr	r2, [pc, #320]	@ (8003248 <HAL_GPIO_Init+0x34c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d007      	beq.n	800311a <HAL_GPIO_Init+0x21e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a4f      	ldr	r2, [pc, #316]	@ (800324c <HAL_GPIO_Init+0x350>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d101      	bne.n	8003116 <HAL_GPIO_Init+0x21a>
 8003112:	2309      	movs	r3, #9
 8003114:	e012      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003116:	230a      	movs	r3, #10
 8003118:	e010      	b.n	800313c <HAL_GPIO_Init+0x240>
 800311a:	2308      	movs	r3, #8
 800311c:	e00e      	b.n	800313c <HAL_GPIO_Init+0x240>
 800311e:	2307      	movs	r3, #7
 8003120:	e00c      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003122:	2306      	movs	r3, #6
 8003124:	e00a      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003126:	2305      	movs	r3, #5
 8003128:	e008      	b.n	800313c <HAL_GPIO_Init+0x240>
 800312a:	2304      	movs	r3, #4
 800312c:	e006      	b.n	800313c <HAL_GPIO_Init+0x240>
 800312e:	2303      	movs	r3, #3
 8003130:	e004      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003132:	2302      	movs	r3, #2
 8003134:	e002      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_GPIO_Init+0x240>
 800313a:	2300      	movs	r3, #0
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	f002 0203 	and.w	r2, r2, #3
 8003142:	0092      	lsls	r2, r2, #2
 8003144:	4093      	lsls	r3, r2
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800314c:	4935      	ldr	r1, [pc, #212]	@ (8003224 <HAL_GPIO_Init+0x328>)
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	089b      	lsrs	r3, r3, #2
 8003152:	3302      	adds	r3, #2
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800315a:	4b3d      	ldr	r3, [pc, #244]	@ (8003250 <HAL_GPIO_Init+0x354>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800317e:	4a34      	ldr	r2, [pc, #208]	@ (8003250 <HAL_GPIO_Init+0x354>)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003184:	4b32      	ldr	r3, [pc, #200]	@ (8003250 <HAL_GPIO_Init+0x354>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031a8:	4a29      	ldr	r2, [pc, #164]	@ (8003250 <HAL_GPIO_Init+0x354>)
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ae:	4b28      	ldr	r3, [pc, #160]	@ (8003250 <HAL_GPIO_Init+0x354>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003250 <HAL_GPIO_Init+0x354>)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003250 <HAL_GPIO_Init+0x354>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031fc:	4a14      	ldr	r2, [pc, #80]	@ (8003250 <HAL_GPIO_Init+0x354>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3301      	adds	r3, #1
 8003206:	61fb      	str	r3, [r7, #28]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	2b0f      	cmp	r3, #15
 800320c:	f67f ae84 	bls.w	8002f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	3724      	adds	r7, #36	@ 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800
 8003224:	40013800 	.word	0x40013800
 8003228:	40020000 	.word	0x40020000
 800322c:	40020400 	.word	0x40020400
 8003230:	40020800 	.word	0x40020800
 8003234:	40020c00 	.word	0x40020c00
 8003238:	40021000 	.word	0x40021000
 800323c:	40021400 	.word	0x40021400
 8003240:	40021800 	.word	0x40021800
 8003244:	40021c00 	.word	0x40021c00
 8003248:	40022000 	.word	0x40022000
 800324c:	40022400 	.word	0x40022400
 8003250:	40013c00 	.word	0x40013c00

08003254 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800325e:	2300      	movs	r3, #0
 8003260:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003266:	2300      	movs	r3, #0
 8003268:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	e0d9      	b.n	8003424 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003270:	2201      	movs	r2, #1
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4013      	ands	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	429a      	cmp	r2, r3
 8003288:	f040 80c9 	bne.w	800341e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800328c:	4a6b      	ldr	r2, [pc, #428]	@ (800343c <HAL_GPIO_DeInit+0x1e8>)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	089b      	lsrs	r3, r3, #2
 8003292:	3302      	adds	r3, #2
 8003294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003298:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	220f      	movs	r2, #15
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	4013      	ands	r3, r2
 80032ac:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a63      	ldr	r2, [pc, #396]	@ (8003440 <HAL_GPIO_DeInit+0x1ec>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d037      	beq.n	8003326 <HAL_GPIO_DeInit+0xd2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a62      	ldr	r2, [pc, #392]	@ (8003444 <HAL_GPIO_DeInit+0x1f0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d031      	beq.n	8003322 <HAL_GPIO_DeInit+0xce>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a61      	ldr	r2, [pc, #388]	@ (8003448 <HAL_GPIO_DeInit+0x1f4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d02b      	beq.n	800331e <HAL_GPIO_DeInit+0xca>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a60      	ldr	r2, [pc, #384]	@ (800344c <HAL_GPIO_DeInit+0x1f8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d025      	beq.n	800331a <HAL_GPIO_DeInit+0xc6>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a5f      	ldr	r2, [pc, #380]	@ (8003450 <HAL_GPIO_DeInit+0x1fc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d01f      	beq.n	8003316 <HAL_GPIO_DeInit+0xc2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a5e      	ldr	r2, [pc, #376]	@ (8003454 <HAL_GPIO_DeInit+0x200>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d019      	beq.n	8003312 <HAL_GPIO_DeInit+0xbe>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a5d      	ldr	r2, [pc, #372]	@ (8003458 <HAL_GPIO_DeInit+0x204>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <HAL_GPIO_DeInit+0xba>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a5c      	ldr	r2, [pc, #368]	@ (800345c <HAL_GPIO_DeInit+0x208>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00d      	beq.n	800330a <HAL_GPIO_DeInit+0xb6>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a5b      	ldr	r2, [pc, #364]	@ (8003460 <HAL_GPIO_DeInit+0x20c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d007      	beq.n	8003306 <HAL_GPIO_DeInit+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a5a      	ldr	r2, [pc, #360]	@ (8003464 <HAL_GPIO_DeInit+0x210>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d101      	bne.n	8003302 <HAL_GPIO_DeInit+0xae>
 80032fe:	2309      	movs	r3, #9
 8003300:	e012      	b.n	8003328 <HAL_GPIO_DeInit+0xd4>
 8003302:	230a      	movs	r3, #10
 8003304:	e010      	b.n	8003328 <HAL_GPIO_DeInit+0xd4>
 8003306:	2308      	movs	r3, #8
 8003308:	e00e      	b.n	8003328 <HAL_GPIO_DeInit+0xd4>
 800330a:	2307      	movs	r3, #7
 800330c:	e00c      	b.n	8003328 <HAL_GPIO_DeInit+0xd4>
 800330e:	2306      	movs	r3, #6
 8003310:	e00a      	b.n	8003328 <HAL_GPIO_DeInit+0xd4>
 8003312:	2305      	movs	r3, #5
 8003314:	e008      	b.n	8003328 <HAL_GPIO_DeInit+0xd4>
 8003316:	2304      	movs	r3, #4
 8003318:	e006      	b.n	8003328 <HAL_GPIO_DeInit+0xd4>
 800331a:	2303      	movs	r3, #3
 800331c:	e004      	b.n	8003328 <HAL_GPIO_DeInit+0xd4>
 800331e:	2302      	movs	r3, #2
 8003320:	e002      	b.n	8003328 <HAL_GPIO_DeInit+0xd4>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <HAL_GPIO_DeInit+0xd4>
 8003326:	2300      	movs	r3, #0
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	f002 0203 	and.w	r2, r2, #3
 800332e:	0092      	lsls	r2, r2, #2
 8003330:	4093      	lsls	r3, r2
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	429a      	cmp	r2, r3
 8003336:	d132      	bne.n	800339e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003338:	4b4b      	ldr	r3, [pc, #300]	@ (8003468 <HAL_GPIO_DeInit+0x214>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	43db      	mvns	r3, r3
 8003340:	4949      	ldr	r1, [pc, #292]	@ (8003468 <HAL_GPIO_DeInit+0x214>)
 8003342:	4013      	ands	r3, r2
 8003344:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003346:	4b48      	ldr	r3, [pc, #288]	@ (8003468 <HAL_GPIO_DeInit+0x214>)
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	43db      	mvns	r3, r3
 800334e:	4946      	ldr	r1, [pc, #280]	@ (8003468 <HAL_GPIO_DeInit+0x214>)
 8003350:	4013      	ands	r3, r2
 8003352:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003354:	4b44      	ldr	r3, [pc, #272]	@ (8003468 <HAL_GPIO_DeInit+0x214>)
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	43db      	mvns	r3, r3
 800335c:	4942      	ldr	r1, [pc, #264]	@ (8003468 <HAL_GPIO_DeInit+0x214>)
 800335e:	4013      	ands	r3, r2
 8003360:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003362:	4b41      	ldr	r3, [pc, #260]	@ (8003468 <HAL_GPIO_DeInit+0x214>)
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	43db      	mvns	r3, r3
 800336a:	493f      	ldr	r1, [pc, #252]	@ (8003468 <HAL_GPIO_DeInit+0x214>)
 800336c:	4013      	ands	r3, r2
 800336e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	220f      	movs	r2, #15
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003380:	4a2e      	ldr	r2, [pc, #184]	@ (800343c <HAL_GPIO_DeInit+0x1e8>)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	089b      	lsrs	r3, r3, #2
 8003386:	3302      	adds	r3, #2
 8003388:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	43da      	mvns	r2, r3
 8003390:	482a      	ldr	r0, [pc, #168]	@ (800343c <HAL_GPIO_DeInit+0x1e8>)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	089b      	lsrs	r3, r3, #2
 8003396:	400a      	ands	r2, r1
 8003398:	3302      	adds	r3, #2
 800339a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	2103      	movs	r1, #3
 80033a8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	401a      	ands	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	08da      	lsrs	r2, r3, #3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3208      	adds	r2, #8
 80033bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	220f      	movs	r2, #15
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	08d2      	lsrs	r2, r2, #3
 80033d4:	4019      	ands	r1, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3208      	adds	r2, #8
 80033da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	2103      	movs	r1, #3
 80033e8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	401a      	ands	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	2101      	movs	r1, #1
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	401a      	ands	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	2103      	movs	r1, #3
 8003412:	fa01 f303 	lsl.w	r3, r1, r3
 8003416:	43db      	mvns	r3, r3
 8003418:	401a      	ands	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	3301      	adds	r3, #1
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2b0f      	cmp	r3, #15
 8003428:	f67f af22 	bls.w	8003270 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800342c:	bf00      	nop
 800342e:	bf00      	nop
 8003430:	371c      	adds	r7, #28
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40013800 	.word	0x40013800
 8003440:	40020000 	.word	0x40020000
 8003444:	40020400 	.word	0x40020400
 8003448:	40020800 	.word	0x40020800
 800344c:	40020c00 	.word	0x40020c00
 8003450:	40021000 	.word	0x40021000
 8003454:	40021400 	.word	0x40021400
 8003458:	40021800 	.word	0x40021800
 800345c:	40021c00 	.word	0x40021c00
 8003460:	40022000 	.word	0x40022000
 8003464:	40022400 	.word	0x40022400
 8003468:	40013c00 	.word	0x40013c00

0800346c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	807b      	strh	r3, [r7, #2]
 8003478:	4613      	mov	r3, r2
 800347a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800347c:	787b      	ldrb	r3, [r7, #1]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003482:	887a      	ldrh	r2, [r7, #2]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003488:	e003      	b.n	8003492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800348a:	887b      	ldrh	r3, [r7, #2]
 800348c:	041a      	lsls	r2, r3, #16
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	619a      	str	r2, [r3, #24]
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
	...

080034a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e12b      	b.n	800370a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fe fd36 	bl	8001f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2224      	movs	r2, #36	@ 0x24
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003502:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003504:	f001 ff82 	bl	800540c <HAL_RCC_GetPCLK1Freq>
 8003508:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4a81      	ldr	r2, [pc, #516]	@ (8003714 <HAL_I2C_Init+0x274>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d807      	bhi.n	8003524 <HAL_I2C_Init+0x84>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4a80      	ldr	r2, [pc, #512]	@ (8003718 <HAL_I2C_Init+0x278>)
 8003518:	4293      	cmp	r3, r2
 800351a:	bf94      	ite	ls
 800351c:	2301      	movls	r3, #1
 800351e:	2300      	movhi	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	e006      	b.n	8003532 <HAL_I2C_Init+0x92>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4a7d      	ldr	r2, [pc, #500]	@ (800371c <HAL_I2C_Init+0x27c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	bf94      	ite	ls
 800352c:	2301      	movls	r3, #1
 800352e:	2300      	movhi	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e0e7      	b.n	800370a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4a78      	ldr	r2, [pc, #480]	@ (8003720 <HAL_I2C_Init+0x280>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	0c9b      	lsrs	r3, r3, #18
 8003544:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	4a6a      	ldr	r2, [pc, #424]	@ (8003714 <HAL_I2C_Init+0x274>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d802      	bhi.n	8003574 <HAL_I2C_Init+0xd4>
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	3301      	adds	r3, #1
 8003572:	e009      	b.n	8003588 <HAL_I2C_Init+0xe8>
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	4a69      	ldr	r2, [pc, #420]	@ (8003724 <HAL_I2C_Init+0x284>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	3301      	adds	r3, #1
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	430b      	orrs	r3, r1
 800358e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800359a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	495c      	ldr	r1, [pc, #368]	@ (8003714 <HAL_I2C_Init+0x274>)
 80035a4:	428b      	cmp	r3, r1
 80035a6:	d819      	bhi.n	80035dc <HAL_I2C_Init+0x13c>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1e59      	subs	r1, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80035b6:	1c59      	adds	r1, r3, #1
 80035b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035bc:	400b      	ands	r3, r1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <HAL_I2C_Init+0x138>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1e59      	subs	r1, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80035d0:	3301      	adds	r3, #1
 80035d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d6:	e051      	b.n	800367c <HAL_I2C_Init+0x1dc>
 80035d8:	2304      	movs	r3, #4
 80035da:	e04f      	b.n	800367c <HAL_I2C_Init+0x1dc>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d111      	bne.n	8003608 <HAL_I2C_Init+0x168>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1e58      	subs	r0, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6859      	ldr	r1, [r3, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	440b      	add	r3, r1
 80035f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035f6:	3301      	adds	r3, #1
 80035f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf0c      	ite	eq
 8003600:	2301      	moveq	r3, #1
 8003602:	2300      	movne	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	e012      	b.n	800362e <HAL_I2C_Init+0x18e>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	1e58      	subs	r0, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6859      	ldr	r1, [r3, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	0099      	lsls	r1, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	fbb0 f3f3 	udiv	r3, r0, r3
 800361e:	3301      	adds	r3, #1
 8003620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003624:	2b00      	cmp	r3, #0
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_I2C_Init+0x196>
 8003632:	2301      	movs	r3, #1
 8003634:	e022      	b.n	800367c <HAL_I2C_Init+0x1dc>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10e      	bne.n	800365c <HAL_I2C_Init+0x1bc>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1e58      	subs	r0, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6859      	ldr	r1, [r3, #4]
 8003646:	460b      	mov	r3, r1
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	440b      	add	r3, r1
 800364c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003650:	3301      	adds	r3, #1
 8003652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800365a:	e00f      	b.n	800367c <HAL_I2C_Init+0x1dc>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	1e58      	subs	r0, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6859      	ldr	r1, [r3, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	0099      	lsls	r1, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003672:	3301      	adds	r3, #1
 8003674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003678:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	6809      	ldr	r1, [r1, #0]
 8003680:	4313      	orrs	r3, r2
 8003682:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69da      	ldr	r2, [r3, #28]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80036aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6911      	ldr	r1, [r2, #16]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	68d2      	ldr	r2, [r2, #12]
 80036b6:	4311      	orrs	r1, r2
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	430b      	orrs	r3, r1
 80036be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695a      	ldr	r2, [r3, #20]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	000186a0 	.word	0x000186a0
 8003718:	001e847f 	.word	0x001e847f
 800371c:	003d08ff 	.word	0x003d08ff
 8003720:	431bde83 	.word	0x431bde83
 8003724:	10624dd3 	.word	0x10624dd3

08003728 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af02      	add	r7, sp, #8
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	4608      	mov	r0, r1
 8003732:	4611      	mov	r1, r2
 8003734:	461a      	mov	r2, r3
 8003736:	4603      	mov	r3, r0
 8003738:	817b      	strh	r3, [r7, #10]
 800373a:	460b      	mov	r3, r1
 800373c:	813b      	strh	r3, [r7, #8]
 800373e:	4613      	mov	r3, r2
 8003740:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003742:	f7ff fac5 	bl	8002cd0 <HAL_GetTick>
 8003746:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b20      	cmp	r3, #32
 8003752:	f040 80d9 	bne.w	8003908 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	2319      	movs	r3, #25
 800375c:	2201      	movs	r2, #1
 800375e:	496d      	ldr	r1, [pc, #436]	@ (8003914 <HAL_I2C_Mem_Write+0x1ec>)
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 fc8b 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800376c:	2302      	movs	r3, #2
 800376e:	e0cc      	b.n	800390a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_I2C_Mem_Write+0x56>
 800377a:	2302      	movs	r3, #2
 800377c:	e0c5      	b.n	800390a <HAL_I2C_Mem_Write+0x1e2>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b01      	cmp	r3, #1
 8003792:	d007      	beq.n	80037a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2221      	movs	r2, #33	@ 0x21
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2240      	movs	r2, #64	@ 0x40
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a3a      	ldr	r2, [r7, #32]
 80037ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80037d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4a4d      	ldr	r2, [pc, #308]	@ (8003918 <HAL_I2C_Mem_Write+0x1f0>)
 80037e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037e6:	88f8      	ldrh	r0, [r7, #6]
 80037e8:	893a      	ldrh	r2, [r7, #8]
 80037ea:	8979      	ldrh	r1, [r7, #10]
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	9301      	str	r3, [sp, #4]
 80037f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	4603      	mov	r3, r0
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 fac2 	bl	8003d80 <I2C_RequestMemoryWrite>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d052      	beq.n	80038a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e081      	b.n	800390a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 fd50 	bl	80042b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00d      	beq.n	8003832 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381a:	2b04      	cmp	r3, #4
 800381c:	d107      	bne.n	800382e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800382c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e06b      	b.n	800390a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	781a      	ldrb	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800384c:	3b01      	subs	r3, #1
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003858:	b29b      	uxth	r3, r3
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b04      	cmp	r3, #4
 800386e:	d11b      	bne.n	80038a8 <HAL_I2C_Mem_Write+0x180>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003874:	2b00      	cmp	r3, #0
 8003876:	d017      	beq.n	80038a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387c:	781a      	ldrb	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1aa      	bne.n	8003806 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 fd43 	bl	8004340 <I2C_WaitOnBTFFlagUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00d      	beq.n	80038dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d107      	bne.n	80038d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e016      	b.n	800390a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	e000      	b.n	800390a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003908:	2302      	movs	r3, #2
  }
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	00100002 	.word	0x00100002
 8003918:	ffff0000 	.word	0xffff0000

0800391c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08c      	sub	sp, #48	@ 0x30
 8003920:	af02      	add	r7, sp, #8
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	4608      	mov	r0, r1
 8003926:	4611      	mov	r1, r2
 8003928:	461a      	mov	r2, r3
 800392a:	4603      	mov	r3, r0
 800392c:	817b      	strh	r3, [r7, #10]
 800392e:	460b      	mov	r3, r1
 8003930:	813b      	strh	r3, [r7, #8]
 8003932:	4613      	mov	r3, r2
 8003934:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003936:	f7ff f9cb 	bl	8002cd0 <HAL_GetTick>
 800393a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b20      	cmp	r3, #32
 8003946:	f040 8214 	bne.w	8003d72 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	2319      	movs	r3, #25
 8003950:	2201      	movs	r2, #1
 8003952:	497b      	ldr	r1, [pc, #492]	@ (8003b40 <HAL_I2C_Mem_Read+0x224>)
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 fb91 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003960:	2302      	movs	r3, #2
 8003962:	e207      	b.n	8003d74 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800396a:	2b01      	cmp	r3, #1
 800396c:	d101      	bne.n	8003972 <HAL_I2C_Mem_Read+0x56>
 800396e:	2302      	movs	r3, #2
 8003970:	e200      	b.n	8003d74 <HAL_I2C_Mem_Read+0x458>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b01      	cmp	r3, #1
 8003986:	d007      	beq.n	8003998 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2222      	movs	r2, #34	@ 0x22
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2240      	movs	r2, #64	@ 0x40
 80039b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80039c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4a5b      	ldr	r2, [pc, #364]	@ (8003b44 <HAL_I2C_Mem_Read+0x228>)
 80039d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039da:	88f8      	ldrh	r0, [r7, #6]
 80039dc:	893a      	ldrh	r2, [r7, #8]
 80039de:	8979      	ldrh	r1, [r7, #10]
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	9301      	str	r3, [sp, #4]
 80039e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	4603      	mov	r3, r0
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 fa5e 	bl	8003eac <I2C_RequestMemoryRead>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e1bc      	b.n	8003d74 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d113      	bne.n	8003a2a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a02:	2300      	movs	r3, #0
 8003a04:	623b      	str	r3, [r7, #32]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	623b      	str	r3, [r7, #32]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	623b      	str	r3, [r7, #32]
 8003a16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	e190      	b.n	8003d4c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d11b      	bne.n	8003a6a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	61fb      	str	r3, [r7, #28]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	e170      	b.n	8003d4c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d11b      	bne.n	8003aaa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a92:	2300      	movs	r3, #0
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	e150      	b.n	8003d4c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ac0:	e144      	b.n	8003d4c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	f200 80f1 	bhi.w	8003cae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d123      	bne.n	8003b1c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fc79 	bl	80043d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e145      	b.n	8003d74 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b1a:	e117      	b.n	8003d4c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d14e      	bne.n	8003bc2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	4906      	ldr	r1, [pc, #24]	@ (8003b48 <HAL_I2C_Mem_Read+0x22c>)
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 faa4 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d008      	beq.n	8003b4c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e11a      	b.n	8003d74 <HAL_I2C_Mem_Read+0x458>
 8003b3e:	bf00      	nop
 8003b40:	00100002 	.word	0x00100002
 8003b44:	ffff0000 	.word	0xffff0000
 8003b48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003bc0:	e0c4      	b.n	8003d4c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc8:	2200      	movs	r2, #0
 8003bca:	496c      	ldr	r1, [pc, #432]	@ (8003d7c <HAL_I2C_Mem_Read+0x460>)
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 fa55 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0cb      	b.n	8003d74 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691a      	ldr	r2, [r3, #16]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c24:	2200      	movs	r2, #0
 8003c26:	4955      	ldr	r1, [pc, #340]	@ (8003d7c <HAL_I2C_Mem_Read+0x460>)
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 fa27 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e09d      	b.n	8003d74 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cac:	e04e      	b.n	8003d4c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cb0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 fb8c 	bl	80043d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e058      	b.n	8003d74 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d124      	bne.n	8003d4c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d107      	bne.n	8003d1a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d18:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f47f aeb6 	bne.w	8003ac2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e000      	b.n	8003d74 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003d72:	2302      	movs	r3, #2
  }
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3728      	adds	r7, #40	@ 0x28
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	00010004 	.word	0x00010004

08003d80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	4608      	mov	r0, r1
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4603      	mov	r3, r0
 8003d90:	817b      	strh	r3, [r7, #10]
 8003d92:	460b      	mov	r3, r1
 8003d94:	813b      	strh	r3, [r7, #8]
 8003d96:	4613      	mov	r3, r2
 8003d98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003da8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f960 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00d      	beq.n	8003dde <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dd0:	d103      	bne.n	8003dda <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dd8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e05f      	b.n	8003e9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dde:	897b      	ldrh	r3, [r7, #10]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003dec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df0:	6a3a      	ldr	r2, [r7, #32]
 8003df2:	492d      	ldr	r1, [pc, #180]	@ (8003ea8 <I2C_RequestMemoryWrite+0x128>)
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 f9bb 	bl	8004170 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e04c      	b.n	8003e9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e1c:	6a39      	ldr	r1, [r7, #32]
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 fa46 	bl	80042b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00d      	beq.n	8003e46 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d107      	bne.n	8003e42 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e02b      	b.n	8003e9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e46:	88fb      	ldrh	r3, [r7, #6]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d105      	bne.n	8003e58 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e4c:	893b      	ldrh	r3, [r7, #8]
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	611a      	str	r2, [r3, #16]
 8003e56:	e021      	b.n	8003e9c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e58:	893b      	ldrh	r3, [r7, #8]
 8003e5a:	0a1b      	lsrs	r3, r3, #8
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e68:	6a39      	ldr	r1, [r7, #32]
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 fa20 	bl	80042b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00d      	beq.n	8003e92 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d107      	bne.n	8003e8e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e005      	b.n	8003e9e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e92:	893b      	ldrh	r3, [r7, #8]
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	00010002 	.word	0x00010002

08003eac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af02      	add	r7, sp, #8
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	4608      	mov	r0, r1
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4603      	mov	r3, r0
 8003ebc:	817b      	strh	r3, [r7, #10]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	813b      	strh	r3, [r7, #8]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ed4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ee4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 f8c2 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00d      	beq.n	8003f1a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f0c:	d103      	bne.n	8003f16 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f14:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e0aa      	b.n	8004070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f1a:	897b      	ldrh	r3, [r7, #10]
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2c:	6a3a      	ldr	r2, [r7, #32]
 8003f2e:	4952      	ldr	r1, [pc, #328]	@ (8004078 <I2C_RequestMemoryRead+0x1cc>)
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 f91d 	bl	8004170 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e097      	b.n	8004070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f58:	6a39      	ldr	r1, [r7, #32]
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 f9a8 	bl	80042b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00d      	beq.n	8003f82 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d107      	bne.n	8003f7e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e076      	b.n	8004070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f82:	88fb      	ldrh	r3, [r7, #6]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d105      	bne.n	8003f94 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f88:	893b      	ldrh	r3, [r7, #8]
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	611a      	str	r2, [r3, #16]
 8003f92:	e021      	b.n	8003fd8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f94:	893b      	ldrh	r3, [r7, #8]
 8003f96:	0a1b      	lsrs	r3, r3, #8
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa4:	6a39      	ldr	r1, [r7, #32]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 f982 	bl	80042b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00d      	beq.n	8003fce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d107      	bne.n	8003fca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e050      	b.n	8004070 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fce:	893b      	ldrh	r3, [r7, #8]
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fda:	6a39      	ldr	r1, [r7, #32]
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f967 	bl	80042b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00d      	beq.n	8004004 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d107      	bne.n	8004000 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ffe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e035      	b.n	8004070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004012:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	2200      	movs	r2, #0
 800401c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f82b 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00d      	beq.n	8004048 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800403a:	d103      	bne.n	8004044 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004042:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e013      	b.n	8004070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004048:	897b      	ldrh	r3, [r7, #10]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	f043 0301 	orr.w	r3, r3, #1
 8004050:	b2da      	uxtb	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	6a3a      	ldr	r2, [r7, #32]
 800405c:	4906      	ldr	r1, [pc, #24]	@ (8004078 <I2C_RequestMemoryRead+0x1cc>)
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 f886 	bl	8004170 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	00010002 	.word	0x00010002

0800407c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	4613      	mov	r3, r2
 800408a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800408c:	e048      	b.n	8004120 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004094:	d044      	beq.n	8004120 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004096:	f7fe fe1b 	bl	8002cd0 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d302      	bcc.n	80040ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d139      	bne.n	8004120 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	0c1b      	lsrs	r3, r3, #16
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d10d      	bne.n	80040d2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	43da      	mvns	r2, r3
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	4013      	ands	r3, r2
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bf0c      	ite	eq
 80040c8:	2301      	moveq	r3, #1
 80040ca:	2300      	movne	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	e00c      	b.n	80040ec <I2C_WaitOnFlagUntilTimeout+0x70>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	43da      	mvns	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4013      	ands	r3, r2
 80040de:	b29b      	uxth	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	bf0c      	ite	eq
 80040e4:	2301      	moveq	r3, #1
 80040e6:	2300      	movne	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d116      	bne.n	8004120 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410c:	f043 0220 	orr.w	r2, r3, #32
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e023      	b.n	8004168 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	0c1b      	lsrs	r3, r3, #16
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b01      	cmp	r3, #1
 8004128:	d10d      	bne.n	8004146 <I2C_WaitOnFlagUntilTimeout+0xca>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	43da      	mvns	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	4013      	ands	r3, r2
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	bf0c      	ite	eq
 800413c:	2301      	moveq	r3, #1
 800413e:	2300      	movne	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	461a      	mov	r2, r3
 8004144:	e00c      	b.n	8004160 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	43da      	mvns	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	4013      	ands	r3, r2
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf0c      	ite	eq
 8004158:	2301      	moveq	r3, #1
 800415a:	2300      	movne	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	461a      	mov	r2, r3
 8004160:	79fb      	ldrb	r3, [r7, #7]
 8004162:	429a      	cmp	r2, r3
 8004164:	d093      	beq.n	800408e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800417e:	e071      	b.n	8004264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800418a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800418e:	d123      	bne.n	80041d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800419e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c4:	f043 0204 	orr.w	r2, r3, #4
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e067      	b.n	80042a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041de:	d041      	beq.n	8004264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e0:	f7fe fd76 	bl	8002cd0 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d302      	bcc.n	80041f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d136      	bne.n	8004264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	0c1b      	lsrs	r3, r3, #16
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d10c      	bne.n	800421a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	43da      	mvns	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4013      	ands	r3, r2
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	bf14      	ite	ne
 8004212:	2301      	movne	r3, #1
 8004214:	2300      	moveq	r3, #0
 8004216:	b2db      	uxtb	r3, r3
 8004218:	e00b      	b.n	8004232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	43da      	mvns	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	4013      	ands	r3, r2
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	bf14      	ite	ne
 800422c:	2301      	movne	r3, #1
 800422e:	2300      	moveq	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d016      	beq.n	8004264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004250:	f043 0220 	orr.w	r2, r3, #32
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e021      	b.n	80042a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	0c1b      	lsrs	r3, r3, #16
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b01      	cmp	r3, #1
 800426c:	d10c      	bne.n	8004288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	43da      	mvns	r2, r3
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	4013      	ands	r3, r2
 800427a:	b29b      	uxth	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	bf14      	ite	ne
 8004280:	2301      	movne	r3, #1
 8004282:	2300      	moveq	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	e00b      	b.n	80042a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	43da      	mvns	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4013      	ands	r3, r2
 8004294:	b29b      	uxth	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	bf14      	ite	ne
 800429a:	2301      	movne	r3, #1
 800429c:	2300      	moveq	r3, #0
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f47f af6d 	bne.w	8004180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042bc:	e034      	b.n	8004328 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 f8e3 	bl	800448a <I2C_IsAcknowledgeFailed>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e034      	b.n	8004338 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042d4:	d028      	beq.n	8004328 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d6:	f7fe fcfb 	bl	8002cd0 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d302      	bcc.n	80042ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d11d      	bne.n	8004328 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042f6:	2b80      	cmp	r3, #128	@ 0x80
 80042f8:	d016      	beq.n	8004328 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004314:	f043 0220 	orr.w	r2, r3, #32
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e007      	b.n	8004338 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004332:	2b80      	cmp	r3, #128	@ 0x80
 8004334:	d1c3      	bne.n	80042be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800434c:	e034      	b.n	80043b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f89b 	bl	800448a <I2C_IsAcknowledgeFailed>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e034      	b.n	80043c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004364:	d028      	beq.n	80043b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004366:	f7fe fcb3 	bl	8002cd0 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	429a      	cmp	r2, r3
 8004374:	d302      	bcc.n	800437c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d11d      	bne.n	80043b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b04      	cmp	r3, #4
 8004388:	d016      	beq.n	80043b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a4:	f043 0220 	orr.w	r2, r3, #32
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e007      	b.n	80043c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d1c3      	bne.n	800434e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043dc:	e049      	b.n	8004472 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d119      	bne.n	8004420 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f06f 0210 	mvn.w	r2, #16
 80043f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e030      	b.n	8004482 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004420:	f7fe fc56 	bl	8002cd0 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	429a      	cmp	r2, r3
 800442e:	d302      	bcc.n	8004436 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d11d      	bne.n	8004472 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004440:	2b40      	cmp	r3, #64	@ 0x40
 8004442:	d016      	beq.n	8004472 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2220      	movs	r2, #32
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	f043 0220 	orr.w	r2, r3, #32
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e007      	b.n	8004482 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447c:	2b40      	cmp	r3, #64	@ 0x40
 800447e:	d1ae      	bne.n	80043de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800449c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044a0:	d11b      	bne.n	80044da <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044aa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c6:	f043 0204 	orr.w	r2, r3, #4
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	d129      	bne.n	8004552 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2224      	movs	r2, #36	@ 0x24
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0201 	bic.w	r2, r2, #1
 8004514:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0210 	bic.w	r2, r2, #16
 8004524:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f042 0201 	orr.w	r2, r2, #1
 8004544:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	e000      	b.n	8004554 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004552:	2302      	movs	r3, #2
  }
}
 8004554:	4618      	mov	r0, r3
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b20      	cmp	r3, #32
 8004578:	d12a      	bne.n	80045d0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2224      	movs	r2, #36	@ 0x24
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0201 	bic.w	r2, r2, #1
 8004590:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004598:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800459a:	89fb      	ldrh	r3, [r7, #14]
 800459c:	f023 030f 	bic.w	r3, r3, #15
 80045a0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	89fb      	ldrh	r3, [r7, #14]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	89fa      	ldrh	r2, [r7, #14]
 80045b2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	e000      	b.n	80045d2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80045d0:	2302      	movs	r3, #2
  }
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
	...

080045e0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e0bf      	b.n	8004772 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fd fd00 	bl	800200c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699a      	ldr	r2, [r3, #24]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004622:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6999      	ldr	r1, [r3, #24]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004638:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6899      	ldr	r1, [r3, #8]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	4b4a      	ldr	r3, [pc, #296]	@ (800477c <HAL_LTDC_Init+0x19c>)
 8004654:	400b      	ands	r3, r1
 8004656:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	041b      	lsls	r3, r3, #16
 800465e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6899      	ldr	r1, [r3, #8]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699a      	ldr	r2, [r3, #24]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68d9      	ldr	r1, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	4b3e      	ldr	r3, [pc, #248]	@ (800477c <HAL_LTDC_Init+0x19c>)
 8004682:	400b      	ands	r3, r1
 8004684:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	041b      	lsls	r3, r3, #16
 800468c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68d9      	ldr	r1, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1a      	ldr	r2, [r3, #32]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6919      	ldr	r1, [r3, #16]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	4b33      	ldr	r3, [pc, #204]	@ (800477c <HAL_LTDC_Init+0x19c>)
 80046b0:	400b      	ands	r3, r1
 80046b2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	041b      	lsls	r3, r3, #16
 80046ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6919      	ldr	r1, [r3, #16]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6959      	ldr	r1, [r3, #20]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4b27      	ldr	r3, [pc, #156]	@ (800477c <HAL_LTDC_Init+0x19c>)
 80046de:	400b      	ands	r3, r1
 80046e0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e6:	041b      	lsls	r3, r3, #16
 80046e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6959      	ldr	r1, [r3, #20]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004706:	021b      	lsls	r3, r3, #8
 8004708:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004710:	041b      	lsls	r3, r3, #16
 8004712:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004722:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0206 	orr.w	r2, r2, #6
 800474e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699a      	ldr	r2, [r3, #24]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	f000f800 	.word	0xf000f800

08004780 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004780:	b5b0      	push	{r4, r5, r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <HAL_LTDC_ConfigLayer+0x1a>
 8004796:	2302      	movs	r3, #2
 8004798:	e02c      	b.n	80047f4 <HAL_LTDC_ConfigLayer+0x74>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2202      	movs	r2, #2
 80047a6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2134      	movs	r1, #52	@ 0x34
 80047b0:	fb01 f303 	mul.w	r3, r1, r3
 80047b4:	4413      	add	r3, r2
 80047b6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	4614      	mov	r4, r2
 80047be:	461d      	mov	r5, r3
 80047c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047cc:	682b      	ldr	r3, [r5, #0]
 80047ce:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 f811 	bl	80047fc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2201      	movs	r2, #1
 80047e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bdb0      	pop	{r4, r5, r7, pc}

080047fc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b089      	sub	sp, #36	@ 0x24
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	0c1b      	lsrs	r3, r3, #16
 8004814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004818:	4413      	add	r3, r2
 800481a:	041b      	lsls	r3, r3, #16
 800481c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	01db      	lsls	r3, r3, #7
 8004828:	4413      	add	r3, r2
 800482a:	3384      	adds	r3, #132	@ 0x84
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	6812      	ldr	r2, [r2, #0]
 8004832:	4611      	mov	r1, r2
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	01d2      	lsls	r2, r2, #7
 8004838:	440a      	add	r2, r1
 800483a:	3284      	adds	r2, #132	@ 0x84
 800483c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004840:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	0c1b      	lsrs	r3, r3, #16
 800484e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004852:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004854:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4619      	mov	r1, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	01db      	lsls	r3, r3, #7
 8004860:	440b      	add	r3, r1
 8004862:	3384      	adds	r3, #132	@ 0x84
 8004864:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800486a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800487a:	4413      	add	r3, r2
 800487c:	041b      	lsls	r3, r3, #16
 800487e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	461a      	mov	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	01db      	lsls	r3, r3, #7
 800488a:	4413      	add	r3, r2
 800488c:	3384      	adds	r3, #132	@ 0x84
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	6812      	ldr	r2, [r2, #0]
 8004894:	4611      	mov	r1, r2
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	01d2      	lsls	r2, r2, #7
 800489a:	440a      	add	r2, r1
 800489c:	3284      	adds	r2, #132	@ 0x84
 800489e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80048a2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048b2:	4413      	add	r3, r2
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4619      	mov	r1, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	01db      	lsls	r3, r3, #7
 80048c0:	440b      	add	r3, r1
 80048c2:	3384      	adds	r3, #132	@ 0x84
 80048c4:	4619      	mov	r1, r3
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	461a      	mov	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	01db      	lsls	r3, r3, #7
 80048d6:	4413      	add	r3, r2
 80048d8:	3384      	adds	r3, #132	@ 0x84
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	6812      	ldr	r2, [r2, #0]
 80048e0:	4611      	mov	r1, r2
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	01d2      	lsls	r2, r2, #7
 80048e6:	440a      	add	r2, r1
 80048e8:	3284      	adds	r2, #132	@ 0x84
 80048ea:	f023 0307 	bic.w	r3, r3, #7
 80048ee:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	461a      	mov	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	01db      	lsls	r3, r3, #7
 80048fa:	4413      	add	r3, r2
 80048fc:	3384      	adds	r3, #132	@ 0x84
 80048fe:	461a      	mov	r2, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800490c:	021b      	lsls	r3, r3, #8
 800490e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004916:	041b      	lsls	r3, r3, #16
 8004918:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	061b      	lsls	r3, r3, #24
 8004920:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	01db      	lsls	r3, r3, #7
 800492c:	4413      	add	r3, r2
 800492e:	3384      	adds	r3, #132	@ 0x84
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	01db      	lsls	r3, r3, #7
 800493c:	4413      	add	r3, r2
 800493e:	3384      	adds	r3, #132	@ 0x84
 8004940:	461a      	mov	r2, r3
 8004942:	2300      	movs	r3, #0
 8004944:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800494c:	461a      	mov	r2, r3
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	431a      	orrs	r2, r3
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	431a      	orrs	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4619      	mov	r1, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	01db      	lsls	r3, r3, #7
 8004960:	440b      	add	r3, r1
 8004962:	3384      	adds	r3, #132	@ 0x84
 8004964:	4619      	mov	r1, r3
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	4313      	orrs	r3, r2
 800496a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	461a      	mov	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	01db      	lsls	r3, r3, #7
 8004976:	4413      	add	r3, r2
 8004978:	3384      	adds	r3, #132	@ 0x84
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	6812      	ldr	r2, [r2, #0]
 8004980:	4611      	mov	r1, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	01d2      	lsls	r2, r2, #7
 8004986:	440a      	add	r2, r1
 8004988:	3284      	adds	r2, #132	@ 0x84
 800498a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800498e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	461a      	mov	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	01db      	lsls	r3, r3, #7
 800499a:	4413      	add	r3, r2
 800499c:	3384      	adds	r3, #132	@ 0x84
 800499e:	461a      	mov	r2, r3
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	461a      	mov	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	01db      	lsls	r3, r3, #7
 80049b0:	4413      	add	r3, r2
 80049b2:	3384      	adds	r3, #132	@ 0x84
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	6812      	ldr	r2, [r2, #0]
 80049ba:	4611      	mov	r1, r2
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	01d2      	lsls	r2, r2, #7
 80049c0:	440a      	add	r2, r1
 80049c2:	3284      	adds	r2, #132	@ 0x84
 80049c4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80049c8:	f023 0307 	bic.w	r3, r3, #7
 80049cc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	69da      	ldr	r2, [r3, #28]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	68f9      	ldr	r1, [r7, #12]
 80049d8:	6809      	ldr	r1, [r1, #0]
 80049da:	4608      	mov	r0, r1
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	01c9      	lsls	r1, r1, #7
 80049e0:	4401      	add	r1, r0
 80049e2:	3184      	adds	r1, #132	@ 0x84
 80049e4:	4313      	orrs	r3, r2
 80049e6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	461a      	mov	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	01db      	lsls	r3, r3, #7
 80049f2:	4413      	add	r3, r2
 80049f4:	3384      	adds	r3, #132	@ 0x84
 80049f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	461a      	mov	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	01db      	lsls	r3, r3, #7
 8004a02:	4413      	add	r3, r2
 8004a04:	3384      	adds	r3, #132	@ 0x84
 8004a06:	461a      	mov	r2, r3
 8004a08:	2300      	movs	r3, #0
 8004a0a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	461a      	mov	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	01db      	lsls	r3, r3, #7
 8004a16:	4413      	add	r3, r2
 8004a18:	3384      	adds	r3, #132	@ 0x84
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a20:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d102      	bne.n	8004a30 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004a2a:	2304      	movs	r3, #4
 8004a2c:	61fb      	str	r3, [r7, #28]
 8004a2e:	e01b      	b.n	8004a68 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d102      	bne.n	8004a3e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	61fb      	str	r3, [r7, #28]
 8004a3c:	e014      	b.n	8004a68 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d00b      	beq.n	8004a5e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d007      	beq.n	8004a5e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a52:	2b03      	cmp	r3, #3
 8004a54:	d003      	beq.n	8004a5e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a5a:	2b07      	cmp	r3, #7
 8004a5c:	d102      	bne.n	8004a64 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004a5e:	2302      	movs	r3, #2
 8004a60:	61fb      	str	r3, [r7, #28]
 8004a62:	e001      	b.n	8004a68 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004a64:	2301      	movs	r3, #1
 8004a66:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	01db      	lsls	r3, r3, #7
 8004a72:	4413      	add	r3, r2
 8004a74:	3384      	adds	r3, #132	@ 0x84
 8004a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	6812      	ldr	r2, [r2, #0]
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	01d2      	lsls	r2, r2, #7
 8004a82:	440a      	add	r2, r1
 8004a84:	3284      	adds	r2, #132	@ 0x84
 8004a86:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004a8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a90:	69fa      	ldr	r2, [r7, #28]
 8004a92:	fb02 f303 	mul.w	r3, r2, r3
 8004a96:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	6859      	ldr	r1, [r3, #4]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	1acb      	subs	r3, r1, r3
 8004aa2:	69f9      	ldr	r1, [r7, #28]
 8004aa4:	fb01 f303 	mul.w	r3, r1, r3
 8004aa8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004aaa:	68f9      	ldr	r1, [r7, #12]
 8004aac:	6809      	ldr	r1, [r1, #0]
 8004aae:	4608      	mov	r0, r1
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	01c9      	lsls	r1, r1, #7
 8004ab4:	4401      	add	r1, r0
 8004ab6:	3184      	adds	r1, #132	@ 0x84
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	01db      	lsls	r3, r3, #7
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3384      	adds	r3, #132	@ 0x84
 8004aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	6812      	ldr	r2, [r2, #0]
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	01d2      	lsls	r2, r2, #7
 8004ad6:	440a      	add	r2, r1
 8004ad8:	3284      	adds	r2, #132	@ 0x84
 8004ada:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004ade:	f023 0307 	bic.w	r3, r3, #7
 8004ae2:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	01db      	lsls	r3, r3, #7
 8004aee:	4413      	add	r3, r2
 8004af0:	3384      	adds	r3, #132	@ 0x84
 8004af2:	461a      	mov	r2, r3
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	01db      	lsls	r3, r3, #7
 8004b04:	4413      	add	r3, r2
 8004b06:	3384      	adds	r3, #132	@ 0x84
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	4611      	mov	r1, r2
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	01d2      	lsls	r2, r2, #7
 8004b14:	440a      	add	r2, r1
 8004b16:	3284      	adds	r2, #132	@ 0x84
 8004b18:	f043 0301 	orr.w	r3, r3, #1
 8004b1c:	6013      	str	r3, [r2, #0]
}
 8004b1e:	bf00      	nop
 8004b20:	3724      	adds	r7, #36	@ 0x24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
	...

08004b2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e267      	b.n	800500e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d075      	beq.n	8004c36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b4a:	4b88      	ldr	r3, [pc, #544]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 030c 	and.w	r3, r3, #12
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d00c      	beq.n	8004b70 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b56:	4b85      	ldr	r3, [pc, #532]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d112      	bne.n	8004b88 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b62:	4b82      	ldr	r3, [pc, #520]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b6e:	d10b      	bne.n	8004b88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b70:	4b7e      	ldr	r3, [pc, #504]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d05b      	beq.n	8004c34 <HAL_RCC_OscConfig+0x108>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d157      	bne.n	8004c34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e242      	b.n	800500e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b90:	d106      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x74>
 8004b92:	4b76      	ldr	r3, [pc, #472]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a75      	ldr	r2, [pc, #468]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	e01d      	b.n	8004bdc <HAL_RCC_OscConfig+0xb0>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ba8:	d10c      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x98>
 8004baa:	4b70      	ldr	r3, [pc, #448]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a6f      	ldr	r2, [pc, #444]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004bb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	4b6d      	ldr	r3, [pc, #436]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a6c      	ldr	r2, [pc, #432]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	e00b      	b.n	8004bdc <HAL_RCC_OscConfig+0xb0>
 8004bc4:	4b69      	ldr	r3, [pc, #420]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a68      	ldr	r2, [pc, #416]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004bca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	4b66      	ldr	r3, [pc, #408]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a65      	ldr	r2, [pc, #404]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004bd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d013      	beq.n	8004c0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be4:	f7fe f874 	bl	8002cd0 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bec:	f7fe f870 	bl	8002cd0 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b64      	cmp	r3, #100	@ 0x64
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e207      	b.n	800500e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfe:	4b5b      	ldr	r3, [pc, #364]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0f0      	beq.n	8004bec <HAL_RCC_OscConfig+0xc0>
 8004c0a:	e014      	b.n	8004c36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0c:	f7fe f860 	bl	8002cd0 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c14:	f7fe f85c 	bl	8002cd0 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b64      	cmp	r3, #100	@ 0x64
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e1f3      	b.n	800500e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c26:	4b51      	ldr	r3, [pc, #324]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1f0      	bne.n	8004c14 <HAL_RCC_OscConfig+0xe8>
 8004c32:	e000      	b.n	8004c36 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d063      	beq.n	8004d0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c42:	4b4a      	ldr	r3, [pc, #296]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 030c 	and.w	r3, r3, #12
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00b      	beq.n	8004c66 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c4e:	4b47      	ldr	r3, [pc, #284]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	d11c      	bne.n	8004c94 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c5a:	4b44      	ldr	r3, [pc, #272]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d116      	bne.n	8004c94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c66:	4b41      	ldr	r3, [pc, #260]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <HAL_RCC_OscConfig+0x152>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d001      	beq.n	8004c7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e1c7      	b.n	800500e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	4937      	ldr	r1, [pc, #220]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c92:	e03a      	b.n	8004d0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d020      	beq.n	8004cde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c9c:	4b34      	ldr	r3, [pc, #208]	@ (8004d70 <HAL_RCC_OscConfig+0x244>)
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca2:	f7fe f815 	bl	8002cd0 <HAL_GetTick>
 8004ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004caa:	f7fe f811 	bl	8002cd0 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e1a8      	b.n	800500e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0f0      	beq.n	8004caa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc8:	4b28      	ldr	r3, [pc, #160]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	4925      	ldr	r1, [pc, #148]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	600b      	str	r3, [r1, #0]
 8004cdc:	e015      	b.n	8004d0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cde:	4b24      	ldr	r3, [pc, #144]	@ (8004d70 <HAL_RCC_OscConfig+0x244>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce4:	f7fd fff4 	bl	8002cd0 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cec:	f7fd fff0 	bl	8002cd0 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e187      	b.n	800500e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d036      	beq.n	8004d84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d016      	beq.n	8004d4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d1e:	4b15      	ldr	r3, [pc, #84]	@ (8004d74 <HAL_RCC_OscConfig+0x248>)
 8004d20:	2201      	movs	r2, #1
 8004d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d24:	f7fd ffd4 	bl	8002cd0 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d2c:	f7fd ffd0 	bl	8002cd0 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e167      	b.n	800500e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d6c <HAL_RCC_OscConfig+0x240>)
 8004d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0x200>
 8004d4a:	e01b      	b.n	8004d84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d4c:	4b09      	ldr	r3, [pc, #36]	@ (8004d74 <HAL_RCC_OscConfig+0x248>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d52:	f7fd ffbd 	bl	8002cd0 <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d58:	e00e      	b.n	8004d78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d5a:	f7fd ffb9 	bl	8002cd0 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d907      	bls.n	8004d78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e150      	b.n	800500e <HAL_RCC_OscConfig+0x4e2>
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	42470000 	.word	0x42470000
 8004d74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d78:	4b88      	ldr	r3, [pc, #544]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1ea      	bne.n	8004d5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 8097 	beq.w	8004ec0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d92:	2300      	movs	r3, #0
 8004d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d96:	4b81      	ldr	r3, [pc, #516]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10f      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004da2:	2300      	movs	r3, #0
 8004da4:	60bb      	str	r3, [r7, #8]
 8004da6:	4b7d      	ldr	r3, [pc, #500]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004daa:	4a7c      	ldr	r2, [pc, #496]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004db2:	4b7a      	ldr	r3, [pc, #488]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dba:	60bb      	str	r3, [r7, #8]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc2:	4b77      	ldr	r3, [pc, #476]	@ (8004fa0 <HAL_RCC_OscConfig+0x474>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d118      	bne.n	8004e00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dce:	4b74      	ldr	r3, [pc, #464]	@ (8004fa0 <HAL_RCC_OscConfig+0x474>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a73      	ldr	r2, [pc, #460]	@ (8004fa0 <HAL_RCC_OscConfig+0x474>)
 8004dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dda:	f7fd ff79 	bl	8002cd0 <HAL_GetTick>
 8004dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de0:	e008      	b.n	8004df4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004de2:	f7fd ff75 	bl	8002cd0 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e10c      	b.n	800500e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df4:	4b6a      	ldr	r3, [pc, #424]	@ (8004fa0 <HAL_RCC_OscConfig+0x474>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0f0      	beq.n	8004de2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d106      	bne.n	8004e16 <HAL_RCC_OscConfig+0x2ea>
 8004e08:	4b64      	ldr	r3, [pc, #400]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e0c:	4a63      	ldr	r2, [pc, #396]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004e0e:	f043 0301 	orr.w	r3, r3, #1
 8004e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e14:	e01c      	b.n	8004e50 <HAL_RCC_OscConfig+0x324>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b05      	cmp	r3, #5
 8004e1c:	d10c      	bne.n	8004e38 <HAL_RCC_OscConfig+0x30c>
 8004e1e:	4b5f      	ldr	r3, [pc, #380]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e22:	4a5e      	ldr	r2, [pc, #376]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004e24:	f043 0304 	orr.w	r3, r3, #4
 8004e28:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e2a:	4b5c      	ldr	r3, [pc, #368]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e2e:	4a5b      	ldr	r2, [pc, #364]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004e30:	f043 0301 	orr.w	r3, r3, #1
 8004e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e36:	e00b      	b.n	8004e50 <HAL_RCC_OscConfig+0x324>
 8004e38:	4b58      	ldr	r3, [pc, #352]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e3c:	4a57      	ldr	r2, [pc, #348]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004e3e:	f023 0301 	bic.w	r3, r3, #1
 8004e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e44:	4b55      	ldr	r3, [pc, #340]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e48:	4a54      	ldr	r2, [pc, #336]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004e4a:	f023 0304 	bic.w	r3, r3, #4
 8004e4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d015      	beq.n	8004e84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e58:	f7fd ff3a 	bl	8002cd0 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e5e:	e00a      	b.n	8004e76 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e60:	f7fd ff36 	bl	8002cd0 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e0cb      	b.n	800500e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e76:	4b49      	ldr	r3, [pc, #292]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0ee      	beq.n	8004e60 <HAL_RCC_OscConfig+0x334>
 8004e82:	e014      	b.n	8004eae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e84:	f7fd ff24 	bl	8002cd0 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e8a:	e00a      	b.n	8004ea2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e8c:	f7fd ff20 	bl	8002cd0 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e0b5      	b.n	800500e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ea2:	4b3e      	ldr	r3, [pc, #248]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1ee      	bne.n	8004e8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004eae:	7dfb      	ldrb	r3, [r7, #23]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d105      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eb4:	4b39      	ldr	r3, [pc, #228]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb8:	4a38      	ldr	r2, [pc, #224]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004eba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ebe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 80a1 	beq.w	800500c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004eca:	4b34      	ldr	r3, [pc, #208]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 030c 	and.w	r3, r3, #12
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	d05c      	beq.n	8004f90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d141      	bne.n	8004f62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ede:	4b31      	ldr	r3, [pc, #196]	@ (8004fa4 <HAL_RCC_OscConfig+0x478>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee4:	f7fd fef4 	bl	8002cd0 <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eec:	f7fd fef0 	bl	8002cd0 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e087      	b.n	800500e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004efe:	4b27      	ldr	r3, [pc, #156]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1f0      	bne.n	8004eec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69da      	ldr	r2, [r3, #28]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f18:	019b      	lsls	r3, r3, #6
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f20:	085b      	lsrs	r3, r3, #1
 8004f22:	3b01      	subs	r3, #1
 8004f24:	041b      	lsls	r3, r3, #16
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2c:	061b      	lsls	r3, r3, #24
 8004f2e:	491b      	ldr	r1, [pc, #108]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f34:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa4 <HAL_RCC_OscConfig+0x478>)
 8004f36:	2201      	movs	r2, #1
 8004f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3a:	f7fd fec9 	bl	8002cd0 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f42:	f7fd fec5 	bl	8002cd0 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e05c      	b.n	800500e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f54:	4b11      	ldr	r3, [pc, #68]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0f0      	beq.n	8004f42 <HAL_RCC_OscConfig+0x416>
 8004f60:	e054      	b.n	800500c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f62:	4b10      	ldr	r3, [pc, #64]	@ (8004fa4 <HAL_RCC_OscConfig+0x478>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f68:	f7fd feb2 	bl	8002cd0 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f70:	f7fd feae 	bl	8002cd0 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e045      	b.n	800500e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f82:	4b06      	ldr	r3, [pc, #24]	@ (8004f9c <HAL_RCC_OscConfig+0x470>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1f0      	bne.n	8004f70 <HAL_RCC_OscConfig+0x444>
 8004f8e:	e03d      	b.n	800500c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d107      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e038      	b.n	800500e <HAL_RCC_OscConfig+0x4e2>
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	40007000 	.word	0x40007000
 8004fa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8005018 <HAL_RCC_OscConfig+0x4ec>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d028      	beq.n	8005008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d121      	bne.n	8005008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d11a      	bne.n	8005008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004fd8:	4013      	ands	r3, r2
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004fde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d111      	bne.n	8005008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fee:	085b      	lsrs	r3, r3, #1
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d107      	bne.n	8005008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005002:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005004:	429a      	cmp	r2, r3
 8005006:	d001      	beq.n	800500c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e000      	b.n	800500e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	40023800 	.word	0x40023800

0800501c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0cc      	b.n	80051ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005030:	4b68      	ldr	r3, [pc, #416]	@ (80051d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 030f 	and.w	r3, r3, #15
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	429a      	cmp	r2, r3
 800503c:	d90c      	bls.n	8005058 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800503e:	4b65      	ldr	r3, [pc, #404]	@ (80051d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005046:	4b63      	ldr	r3, [pc, #396]	@ (80051d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	429a      	cmp	r2, r3
 8005052:	d001      	beq.n	8005058 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e0b8      	b.n	80051ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d020      	beq.n	80050a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005070:	4b59      	ldr	r3, [pc, #356]	@ (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	4a58      	ldr	r2, [pc, #352]	@ (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800507a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b00      	cmp	r3, #0
 8005086:	d005      	beq.n	8005094 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005088:	4b53      	ldr	r3, [pc, #332]	@ (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	4a52      	ldr	r2, [pc, #328]	@ (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005092:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005094:	4b50      	ldr	r3, [pc, #320]	@ (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	494d      	ldr	r1, [pc, #308]	@ (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d044      	beq.n	800513c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d107      	bne.n	80050ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ba:	4b47      	ldr	r3, [pc, #284]	@ (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d119      	bne.n	80050fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e07f      	b.n	80051ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d003      	beq.n	80050da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050d6:	2b03      	cmp	r3, #3
 80050d8:	d107      	bne.n	80050ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050da:	4b3f      	ldr	r3, [pc, #252]	@ (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e06f      	b.n	80051ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ea:	4b3b      	ldr	r3, [pc, #236]	@ (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e067      	b.n	80051ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050fa:	4b37      	ldr	r3, [pc, #220]	@ (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f023 0203 	bic.w	r2, r3, #3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	4934      	ldr	r1, [pc, #208]	@ (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005108:	4313      	orrs	r3, r2
 800510a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800510c:	f7fd fde0 	bl	8002cd0 <HAL_GetTick>
 8005110:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005112:	e00a      	b.n	800512a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005114:	f7fd fddc 	bl	8002cd0 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005122:	4293      	cmp	r3, r2
 8005124:	d901      	bls.n	800512a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e04f      	b.n	80051ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800512a:	4b2b      	ldr	r3, [pc, #172]	@ (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 020c 	and.w	r2, r3, #12
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	429a      	cmp	r2, r3
 800513a:	d1eb      	bne.n	8005114 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800513c:	4b25      	ldr	r3, [pc, #148]	@ (80051d4 <HAL_RCC_ClockConfig+0x1b8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 030f 	and.w	r3, r3, #15
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	429a      	cmp	r2, r3
 8005148:	d20c      	bcs.n	8005164 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514a:	4b22      	ldr	r3, [pc, #136]	@ (80051d4 <HAL_RCC_ClockConfig+0x1b8>)
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005152:	4b20      	ldr	r3, [pc, #128]	@ (80051d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	429a      	cmp	r2, r3
 800515e:	d001      	beq.n	8005164 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e032      	b.n	80051ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d008      	beq.n	8005182 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005170:	4b19      	ldr	r3, [pc, #100]	@ (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	4916      	ldr	r1, [pc, #88]	@ (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	4313      	orrs	r3, r2
 8005180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b00      	cmp	r3, #0
 800518c:	d009      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800518e:	4b12      	ldr	r3, [pc, #72]	@ (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	490e      	ldr	r1, [pc, #56]	@ (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051a2:	f000 f821 	bl	80051e8 <HAL_RCC_GetSysClockFreq>
 80051a6:	4602      	mov	r2, r0
 80051a8:	4b0b      	ldr	r3, [pc, #44]	@ (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	091b      	lsrs	r3, r3, #4
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	490a      	ldr	r1, [pc, #40]	@ (80051dc <HAL_RCC_ClockConfig+0x1c0>)
 80051b4:	5ccb      	ldrb	r3, [r1, r3]
 80051b6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ba:	4a09      	ldr	r2, [pc, #36]	@ (80051e0 <HAL_RCC_ClockConfig+0x1c4>)
 80051bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80051be:	4b09      	ldr	r3, [pc, #36]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fd fd40 	bl	8002c48 <HAL_InitTick>

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	40023c00 	.word	0x40023c00
 80051d8:	40023800 	.word	0x40023800
 80051dc:	08007ff4 	.word	0x08007ff4
 80051e0:	20000010 	.word	0x20000010
 80051e4:	20000014 	.word	0x20000014

080051e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051ec:	b094      	sub	sp, #80	@ 0x50
 80051ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005200:	4b79      	ldr	r3, [pc, #484]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f003 030c 	and.w	r3, r3, #12
 8005208:	2b08      	cmp	r3, #8
 800520a:	d00d      	beq.n	8005228 <HAL_RCC_GetSysClockFreq+0x40>
 800520c:	2b08      	cmp	r3, #8
 800520e:	f200 80e1 	bhi.w	80053d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005212:	2b00      	cmp	r3, #0
 8005214:	d002      	beq.n	800521c <HAL_RCC_GetSysClockFreq+0x34>
 8005216:	2b04      	cmp	r3, #4
 8005218:	d003      	beq.n	8005222 <HAL_RCC_GetSysClockFreq+0x3a>
 800521a:	e0db      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800521c:	4b73      	ldr	r3, [pc, #460]	@ (80053ec <HAL_RCC_GetSysClockFreq+0x204>)
 800521e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005220:	e0db      	b.n	80053da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005222:	4b73      	ldr	r3, [pc, #460]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005224:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005226:	e0d8      	b.n	80053da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005228:	4b6f      	ldr	r3, [pc, #444]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005230:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005232:	4b6d      	ldr	r3, [pc, #436]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d063      	beq.n	8005306 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800523e:	4b6a      	ldr	r3, [pc, #424]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	099b      	lsrs	r3, r3, #6
 8005244:	2200      	movs	r2, #0
 8005246:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005248:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800524a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800524c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005250:	633b      	str	r3, [r7, #48]	@ 0x30
 8005252:	2300      	movs	r3, #0
 8005254:	637b      	str	r3, [r7, #52]	@ 0x34
 8005256:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800525a:	4622      	mov	r2, r4
 800525c:	462b      	mov	r3, r5
 800525e:	f04f 0000 	mov.w	r0, #0
 8005262:	f04f 0100 	mov.w	r1, #0
 8005266:	0159      	lsls	r1, r3, #5
 8005268:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800526c:	0150      	lsls	r0, r2, #5
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	4621      	mov	r1, r4
 8005274:	1a51      	subs	r1, r2, r1
 8005276:	6139      	str	r1, [r7, #16]
 8005278:	4629      	mov	r1, r5
 800527a:	eb63 0301 	sbc.w	r3, r3, r1
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800528c:	4659      	mov	r1, fp
 800528e:	018b      	lsls	r3, r1, #6
 8005290:	4651      	mov	r1, sl
 8005292:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005296:	4651      	mov	r1, sl
 8005298:	018a      	lsls	r2, r1, #6
 800529a:	4651      	mov	r1, sl
 800529c:	ebb2 0801 	subs.w	r8, r2, r1
 80052a0:	4659      	mov	r1, fp
 80052a2:	eb63 0901 	sbc.w	r9, r3, r1
 80052a6:	f04f 0200 	mov.w	r2, #0
 80052aa:	f04f 0300 	mov.w	r3, #0
 80052ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052ba:	4690      	mov	r8, r2
 80052bc:	4699      	mov	r9, r3
 80052be:	4623      	mov	r3, r4
 80052c0:	eb18 0303 	adds.w	r3, r8, r3
 80052c4:	60bb      	str	r3, [r7, #8]
 80052c6:	462b      	mov	r3, r5
 80052c8:	eb49 0303 	adc.w	r3, r9, r3
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	f04f 0300 	mov.w	r3, #0
 80052d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052da:	4629      	mov	r1, r5
 80052dc:	024b      	lsls	r3, r1, #9
 80052de:	4621      	mov	r1, r4
 80052e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052e4:	4621      	mov	r1, r4
 80052e6:	024a      	lsls	r2, r1, #9
 80052e8:	4610      	mov	r0, r2
 80052ea:	4619      	mov	r1, r3
 80052ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052ee:	2200      	movs	r2, #0
 80052f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052f8:	f7fa ff80 	bl	80001fc <__aeabi_uldivmod>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4613      	mov	r3, r2
 8005302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005304:	e058      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005306:	4b38      	ldr	r3, [pc, #224]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	099b      	lsrs	r3, r3, #6
 800530c:	2200      	movs	r2, #0
 800530e:	4618      	mov	r0, r3
 8005310:	4611      	mov	r1, r2
 8005312:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005316:	623b      	str	r3, [r7, #32]
 8005318:	2300      	movs	r3, #0
 800531a:	627b      	str	r3, [r7, #36]	@ 0x24
 800531c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005320:	4642      	mov	r2, r8
 8005322:	464b      	mov	r3, r9
 8005324:	f04f 0000 	mov.w	r0, #0
 8005328:	f04f 0100 	mov.w	r1, #0
 800532c:	0159      	lsls	r1, r3, #5
 800532e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005332:	0150      	lsls	r0, r2, #5
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4641      	mov	r1, r8
 800533a:	ebb2 0a01 	subs.w	sl, r2, r1
 800533e:	4649      	mov	r1, r9
 8005340:	eb63 0b01 	sbc.w	fp, r3, r1
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005350:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005354:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005358:	ebb2 040a 	subs.w	r4, r2, sl
 800535c:	eb63 050b 	sbc.w	r5, r3, fp
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	00eb      	lsls	r3, r5, #3
 800536a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800536e:	00e2      	lsls	r2, r4, #3
 8005370:	4614      	mov	r4, r2
 8005372:	461d      	mov	r5, r3
 8005374:	4643      	mov	r3, r8
 8005376:	18e3      	adds	r3, r4, r3
 8005378:	603b      	str	r3, [r7, #0]
 800537a:	464b      	mov	r3, r9
 800537c:	eb45 0303 	adc.w	r3, r5, r3
 8005380:	607b      	str	r3, [r7, #4]
 8005382:	f04f 0200 	mov.w	r2, #0
 8005386:	f04f 0300 	mov.w	r3, #0
 800538a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800538e:	4629      	mov	r1, r5
 8005390:	028b      	lsls	r3, r1, #10
 8005392:	4621      	mov	r1, r4
 8005394:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005398:	4621      	mov	r1, r4
 800539a:	028a      	lsls	r2, r1, #10
 800539c:	4610      	mov	r0, r2
 800539e:	4619      	mov	r1, r3
 80053a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053a2:	2200      	movs	r2, #0
 80053a4:	61bb      	str	r3, [r7, #24]
 80053a6:	61fa      	str	r2, [r7, #28]
 80053a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053ac:	f7fa ff26 	bl	80001fc <__aeabi_uldivmod>
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	4613      	mov	r3, r2
 80053b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80053b8:	4b0b      	ldr	r3, [pc, #44]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	0c1b      	lsrs	r3, r3, #16
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	3301      	adds	r3, #1
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80053c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053d2:	e002      	b.n	80053da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053d4:	4b05      	ldr	r3, [pc, #20]	@ (80053ec <HAL_RCC_GetSysClockFreq+0x204>)
 80053d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3750      	adds	r7, #80	@ 0x50
 80053e0:	46bd      	mov	sp, r7
 80053e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053e6:	bf00      	nop
 80053e8:	40023800 	.word	0x40023800
 80053ec:	00f42400 	.word	0x00f42400
 80053f0:	007a1200 	.word	0x007a1200

080053f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053f8:	4b03      	ldr	r3, [pc, #12]	@ (8005408 <HAL_RCC_GetHCLKFreq+0x14>)
 80053fa:	681b      	ldr	r3, [r3, #0]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	20000010 	.word	0x20000010

0800540c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005410:	f7ff fff0 	bl	80053f4 <HAL_RCC_GetHCLKFreq>
 8005414:	4602      	mov	r2, r0
 8005416:	4b05      	ldr	r3, [pc, #20]	@ (800542c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	0a9b      	lsrs	r3, r3, #10
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	4903      	ldr	r1, [pc, #12]	@ (8005430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005422:	5ccb      	ldrb	r3, [r1, r3]
 8005424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005428:	4618      	mov	r0, r3
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40023800 	.word	0x40023800
 8005430:	08008004 	.word	0x08008004

08005434 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10b      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005458:	2b00      	cmp	r3, #0
 800545a:	d105      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005464:	2b00      	cmp	r3, #0
 8005466:	d075      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005468:	4b91      	ldr	r3, [pc, #580]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800546e:	f7fd fc2f 	bl	8002cd0 <HAL_GetTick>
 8005472:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005474:	e008      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005476:	f7fd fc2b 	bl	8002cd0 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d901      	bls.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e189      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005488:	4b8a      	ldr	r3, [pc, #552]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1f0      	bne.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	d009      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	019a      	lsls	r2, r3, #6
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	071b      	lsls	r3, r3, #28
 80054ac:	4981      	ldr	r1, [pc, #516]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01f      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80054c0:	4b7c      	ldr	r3, [pc, #496]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054c6:	0f1b      	lsrs	r3, r3, #28
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	019a      	lsls	r2, r3, #6
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	061b      	lsls	r3, r3, #24
 80054da:	431a      	orrs	r2, r3
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	071b      	lsls	r3, r3, #28
 80054e0:	4974      	ldr	r1, [pc, #464]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80054e8:	4b72      	ldr	r3, [pc, #456]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054ee:	f023 021f 	bic.w	r2, r3, #31
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	496e      	ldr	r1, [pc, #440]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00d      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	019a      	lsls	r2, r3, #6
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	061b      	lsls	r3, r3, #24
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	071b      	lsls	r3, r3, #28
 8005520:	4964      	ldr	r1, [pc, #400]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005528:	4b61      	ldr	r3, [pc, #388]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800552a:	2201      	movs	r2, #1
 800552c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800552e:	f7fd fbcf 	bl	8002cd0 <HAL_GetTick>
 8005532:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005534:	e008      	b.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005536:	f7fd fbcb 	bl	8002cd0 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d901      	bls.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e129      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005548:	4b5a      	ldr	r3, [pc, #360]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0f0      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	d105      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005568:	2b00      	cmp	r3, #0
 800556a:	d079      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800556c:	4b52      	ldr	r3, [pc, #328]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005572:	f7fd fbad 	bl	8002cd0 <HAL_GetTick>
 8005576:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005578:	e008      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800557a:	f7fd fba9 	bl	8002cd0 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d901      	bls.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e107      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800558c:	4b49      	ldr	r3, [pc, #292]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005594:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005598:	d0ef      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0304 	and.w	r3, r3, #4
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d020      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055a6:	4b43      	ldr	r3, [pc, #268]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ac:	0f1b      	lsrs	r3, r3, #28
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	019a      	lsls	r2, r3, #6
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	061b      	lsls	r3, r3, #24
 80055c0:	431a      	orrs	r2, r3
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	071b      	lsls	r3, r3, #28
 80055c6:	493b      	ldr	r1, [pc, #236]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80055ce:	4b39      	ldr	r3, [pc, #228]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055d4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	3b01      	subs	r3, #1
 80055de:	021b      	lsls	r3, r3, #8
 80055e0:	4934      	ldr	r1, [pc, #208]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0308 	and.w	r3, r3, #8
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d01e      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055f4:	4b2f      	ldr	r3, [pc, #188]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055fa:	0e1b      	lsrs	r3, r3, #24
 80055fc:	f003 030f 	and.w	r3, r3, #15
 8005600:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	019a      	lsls	r2, r3, #6
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	061b      	lsls	r3, r3, #24
 800560c:	431a      	orrs	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	071b      	lsls	r3, r3, #28
 8005614:	4927      	ldr	r1, [pc, #156]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005616:	4313      	orrs	r3, r2
 8005618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800561c:	4b25      	ldr	r3, [pc, #148]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800561e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005622:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562a:	4922      	ldr	r1, [pc, #136]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005632:	4b21      	ldr	r3, [pc, #132]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005634:	2201      	movs	r2, #1
 8005636:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005638:	f7fd fb4a 	bl	8002cd0 <HAL_GetTick>
 800563c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800563e:	e008      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005640:	f7fd fb46 	bl	8002cd0 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d901      	bls.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e0a4      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005652:	4b18      	ldr	r3, [pc, #96]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800565a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800565e:	d1ef      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 808b 	beq.w	8005784 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	4b10      	ldr	r3, [pc, #64]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005676:	4a0f      	ldr	r2, [pc, #60]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800567c:	6413      	str	r3, [r2, #64]	@ 0x40
 800567e:	4b0d      	ldr	r3, [pc, #52]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800568a:	4b0c      	ldr	r3, [pc, #48]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a0b      	ldr	r2, [pc, #44]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005694:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005696:	f7fd fb1b 	bl	8002cd0 <HAL_GetTick>
 800569a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800569c:	e010      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800569e:	f7fd fb17 	bl	8002cd0 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d909      	bls.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e075      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80056b0:	42470068 	.word	0x42470068
 80056b4:	40023800 	.word	0x40023800
 80056b8:	42470070 	.word	0x42470070
 80056bc:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80056c0:	4b38      	ldr	r3, [pc, #224]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0e8      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056cc:	4b36      	ldr	r3, [pc, #216]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056d4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d02f      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d028      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056ea:	4b2f      	ldr	r3, [pc, #188]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056f4:	4b2d      	ldr	r3, [pc, #180]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80056f6:	2201      	movs	r2, #1
 80056f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056fa:	4b2c      	ldr	r3, [pc, #176]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005700:	4a29      	ldr	r2, [pc, #164]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005706:	4b28      	ldr	r3, [pc, #160]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b01      	cmp	r3, #1
 8005710:	d114      	bne.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005712:	f7fd fadd 	bl	8002cd0 <HAL_GetTick>
 8005716:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005718:	e00a      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800571a:	f7fd fad9 	bl	8002cd0 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005728:	4293      	cmp	r3, r2
 800572a:	d901      	bls.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e035      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005730:	4b1d      	ldr	r3, [pc, #116]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0ee      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005740:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005744:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005748:	d10d      	bne.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800574a:	4b17      	ldr	r3, [pc, #92]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005756:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800575a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800575e:	4912      	ldr	r1, [pc, #72]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005760:	4313      	orrs	r3, r2
 8005762:	608b      	str	r3, [r1, #8]
 8005764:	e005      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005766:	4b10      	ldr	r3, [pc, #64]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	4a0f      	ldr	r2, [pc, #60]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800576c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005770:	6093      	str	r3, [r2, #8]
 8005772:	4b0d      	ldr	r3, [pc, #52]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005774:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800577a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800577e:	490a      	ldr	r1, [pc, #40]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005780:	4313      	orrs	r3, r2
 8005782:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0310 	and.w	r3, r3, #16
 800578c:	2b00      	cmp	r3, #0
 800578e:	d004      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005796:	4b06      	ldr	r3, [pc, #24]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005798:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	40007000 	.word	0x40007000
 80057a8:	40023800 	.word	0x40023800
 80057ac:	42470e40 	.word	0x42470e40
 80057b0:	424711e0 	.word	0x424711e0

080057b4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e01c      	b.n	8005800 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	795b      	ldrb	r3, [r3, #5]
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d105      	bne.n	80057dc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fc fd40 	bl	800225c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f042 0204 	orr.w	r2, r2, #4
 80057f0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	791b      	ldrb	r3, [r3, #4]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d101      	bne.n	8005822 <HAL_RNG_GenerateRandomNumber+0x1a>
 800581e:	2302      	movs	r3, #2
 8005820:	e044      	b.n	80058ac <HAL_RNG_GenerateRandomNumber+0xa4>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	795b      	ldrb	r3, [r3, #5]
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b01      	cmp	r3, #1
 8005830:	d133      	bne.n	800589a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2202      	movs	r2, #2
 8005836:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005838:	f7fd fa4a 	bl	8002cd0 <HAL_GetTick>
 800583c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800583e:	e018      	b.n	8005872 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005840:	f7fd fa46 	bl	8002cd0 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d911      	bls.n	8005872 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b01      	cmp	r3, #1
 800585a:	d00a      	beq.n	8005872 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2202      	movs	r2, #2
 8005866:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e01c      	b.n	80058ac <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b01      	cmp	r3, #1
 800587e:	d1df      	bne.n	8005840 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68da      	ldr	r2, [r3, #12]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	715a      	strb	r2, [r3, #5]
 8005898:	e004      	b.n	80058a4 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2204      	movs	r2, #4
 800589e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	711a      	strb	r2, [r3, #4]

  return status;
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e07b      	b.n	80059be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d108      	bne.n	80058e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058d6:	d009      	beq.n	80058ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	61da      	str	r2, [r3, #28]
 80058de:	e005      	b.n	80058ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fc fcca 	bl	80022a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005922:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	431a      	orrs	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005970:	ea42 0103 	orr.w	r1, r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005978:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	0c1b      	lsrs	r3, r3, #16
 800598a:	f003 0104 	and.w	r1, r3, #4
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005992:	f003 0210 	and.w	r2, r3, #16
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69da      	ldr	r2, [r3, #28]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b082      	sub	sp, #8
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e01a      	b.n	8005a0e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059ee:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f7fc fc9d 	bl	8002330 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b088      	sub	sp, #32
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	60f8      	str	r0, [r7, #12]
 8005a1e:	60b9      	str	r1, [r7, #8]
 8005a20:	603b      	str	r3, [r7, #0]
 8005a22:	4613      	mov	r3, r2
 8005a24:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a26:	f7fd f953 	bl	8002cd0 <HAL_GetTick>
 8005a2a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005a2c:	88fb      	ldrh	r3, [r7, #6]
 8005a2e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d001      	beq.n	8005a40 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	e12a      	b.n	8005c96 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <HAL_SPI_Transmit+0x36>
 8005a46:	88fb      	ldrh	r3, [r7, #6]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e122      	b.n	8005c96 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d101      	bne.n	8005a5e <HAL_SPI_Transmit+0x48>
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	e11b      	b.n	8005c96 <HAL_SPI_Transmit+0x280>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2203      	movs	r2, #3
 8005a6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	88fa      	ldrh	r2, [r7, #6]
 8005a7e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	88fa      	ldrh	r2, [r7, #6]
 8005a84:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aac:	d10f      	bne.n	8005ace <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005abc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005acc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad8:	2b40      	cmp	r3, #64	@ 0x40
 8005ada:	d007      	beq.n	8005aec <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005aea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005af4:	d152      	bne.n	8005b9c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <HAL_SPI_Transmit+0xee>
 8005afe:	8b7b      	ldrh	r3, [r7, #26]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d145      	bne.n	8005b90 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b08:	881a      	ldrh	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b14:	1c9a      	adds	r2, r3, #2
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b28:	e032      	b.n	8005b90 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d112      	bne.n	8005b5e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b3c:	881a      	ldrh	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b48:	1c9a      	adds	r2, r3, #2
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	3b01      	subs	r3, #1
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005b5c:	e018      	b.n	8005b90 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b5e:	f7fd f8b7 	bl	8002cd0 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d803      	bhi.n	8005b76 <HAL_SPI_Transmit+0x160>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b74:	d102      	bne.n	8005b7c <HAL_SPI_Transmit+0x166>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d109      	bne.n	8005b90 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e082      	b.n	8005c96 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1c7      	bne.n	8005b2a <HAL_SPI_Transmit+0x114>
 8005b9a:	e053      	b.n	8005c44 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <HAL_SPI_Transmit+0x194>
 8005ba4:	8b7b      	ldrh	r3, [r7, #26]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d147      	bne.n	8005c3a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	330c      	adds	r3, #12
 8005bb4:	7812      	ldrb	r2, [r2, #0]
 8005bb6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005bd0:	e033      	b.n	8005c3a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d113      	bne.n	8005c08 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	330c      	adds	r3, #12
 8005bea:	7812      	ldrb	r2, [r2, #0]
 8005bec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005c06:	e018      	b.n	8005c3a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c08:	f7fd f862 	bl	8002cd0 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d803      	bhi.n	8005c20 <HAL_SPI_Transmit+0x20a>
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c1e:	d102      	bne.n	8005c26 <HAL_SPI_Transmit+0x210>
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e02d      	b.n	8005c96 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1c6      	bne.n	8005bd2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c44:	69fa      	ldr	r2, [r7, #28]
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 f8bf 	bl	8005dcc <SPI_EndRxTxTransaction>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2220      	movs	r2, #32
 8005c58:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10a      	bne.n	8005c78 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c62:	2300      	movs	r3, #0
 8005c64:	617b      	str	r3, [r7, #20]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	617b      	str	r3, [r7, #20]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	617b      	str	r3, [r7, #20]
 8005c76:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e000      	b.n	8005c96 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005c94:	2300      	movs	r3, #0
  }
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3720      	adds	r7, #32
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cac:	b2db      	uxtb	r3, r3
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
	...

08005cbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b088      	sub	sp, #32
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	603b      	str	r3, [r7, #0]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ccc:	f7fd f800 	bl	8002cd0 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd4:	1a9b      	subs	r3, r3, r2
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	4413      	add	r3, r2
 8005cda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005cdc:	f7fc fff8 	bl	8002cd0 <HAL_GetTick>
 8005ce0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ce2:	4b39      	ldr	r3, [pc, #228]	@ (8005dc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	015b      	lsls	r3, r3, #5
 8005ce8:	0d1b      	lsrs	r3, r3, #20
 8005cea:	69fa      	ldr	r2, [r7, #28]
 8005cec:	fb02 f303 	mul.w	r3, r2, r3
 8005cf0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cf2:	e054      	b.n	8005d9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cfa:	d050      	beq.n	8005d9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cfc:	f7fc ffe8 	bl	8002cd0 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	69fa      	ldr	r2, [r7, #28]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d902      	bls.n	8005d12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d13d      	bne.n	8005d8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d2a:	d111      	bne.n	8005d50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d34:	d004      	beq.n	8005d40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d3e:	d107      	bne.n	8005d50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d58:	d10f      	bne.n	8005d7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e017      	b.n	8005dbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	4013      	ands	r3, r2
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	bf0c      	ite	eq
 8005dae:	2301      	moveq	r3, #1
 8005db0:	2300      	movne	r3, #0
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	461a      	mov	r2, r3
 8005db6:	79fb      	ldrb	r3, [r7, #7]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d19b      	bne.n	8005cf4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3720      	adds	r7, #32
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20000010 	.word	0x20000010

08005dcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b088      	sub	sp, #32
 8005dd0:	af02      	add	r7, sp, #8
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2201      	movs	r2, #1
 8005de0:	2102      	movs	r1, #2
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f7ff ff6a 	bl	8005cbc <SPI_WaitFlagStateUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d007      	beq.n	8005dfe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df2:	f043 0220 	orr.w	r2, r3, #32
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e032      	b.n	8005e64 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8005e6c <SPI_EndRxTxTransaction+0xa0>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a1b      	ldr	r2, [pc, #108]	@ (8005e70 <SPI_EndRxTxTransaction+0xa4>)
 8005e04:	fba2 2303 	umull	r2, r3, r2, r3
 8005e08:	0d5b      	lsrs	r3, r3, #21
 8005e0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e0e:	fb02 f303 	mul.w	r3, r2, r3
 8005e12:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e1c:	d112      	bne.n	8005e44 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2200      	movs	r2, #0
 8005e26:	2180      	movs	r1, #128	@ 0x80
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f7ff ff47 	bl	8005cbc <SPI_WaitFlagStateUntilTimeout>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d016      	beq.n	8005e62 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e38:	f043 0220 	orr.w	r2, r3, #32
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e00f      	b.n	8005e64 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e5a:	2b80      	cmp	r3, #128	@ 0x80
 8005e5c:	d0f2      	beq.n	8005e44 <SPI_EndRxTxTransaction+0x78>
 8005e5e:	e000      	b.n	8005e62 <SPI_EndRxTxTransaction+0x96>
        break;
 8005e60:	bf00      	nop
  }

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3718      	adds	r7, #24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	20000010 	.word	0x20000010
 8005e70:	165e9f81 	.word	0x165e9f81

08005e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e041      	b.n	8005f0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d106      	bne.n	8005ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7fc fa66 	bl	800236c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	3304      	adds	r3, #4
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	f000 f8f4 	bl	80060a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d101      	bne.n	8005f2e <HAL_TIM_ConfigClockSource+0x1c>
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	e0b4      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x186>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2202      	movs	r2, #2
 8005f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f4c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f54:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f66:	d03e      	beq.n	8005fe6 <HAL_TIM_ConfigClockSource+0xd4>
 8005f68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f6c:	f200 8087 	bhi.w	800607e <HAL_TIM_ConfigClockSource+0x16c>
 8005f70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f74:	f000 8086 	beq.w	8006084 <HAL_TIM_ConfigClockSource+0x172>
 8005f78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f7c:	d87f      	bhi.n	800607e <HAL_TIM_ConfigClockSource+0x16c>
 8005f7e:	2b70      	cmp	r3, #112	@ 0x70
 8005f80:	d01a      	beq.n	8005fb8 <HAL_TIM_ConfigClockSource+0xa6>
 8005f82:	2b70      	cmp	r3, #112	@ 0x70
 8005f84:	d87b      	bhi.n	800607e <HAL_TIM_ConfigClockSource+0x16c>
 8005f86:	2b60      	cmp	r3, #96	@ 0x60
 8005f88:	d050      	beq.n	800602c <HAL_TIM_ConfigClockSource+0x11a>
 8005f8a:	2b60      	cmp	r3, #96	@ 0x60
 8005f8c:	d877      	bhi.n	800607e <HAL_TIM_ConfigClockSource+0x16c>
 8005f8e:	2b50      	cmp	r3, #80	@ 0x50
 8005f90:	d03c      	beq.n	800600c <HAL_TIM_ConfigClockSource+0xfa>
 8005f92:	2b50      	cmp	r3, #80	@ 0x50
 8005f94:	d873      	bhi.n	800607e <HAL_TIM_ConfigClockSource+0x16c>
 8005f96:	2b40      	cmp	r3, #64	@ 0x40
 8005f98:	d058      	beq.n	800604c <HAL_TIM_ConfigClockSource+0x13a>
 8005f9a:	2b40      	cmp	r3, #64	@ 0x40
 8005f9c:	d86f      	bhi.n	800607e <HAL_TIM_ConfigClockSource+0x16c>
 8005f9e:	2b30      	cmp	r3, #48	@ 0x30
 8005fa0:	d064      	beq.n	800606c <HAL_TIM_ConfigClockSource+0x15a>
 8005fa2:	2b30      	cmp	r3, #48	@ 0x30
 8005fa4:	d86b      	bhi.n	800607e <HAL_TIM_ConfigClockSource+0x16c>
 8005fa6:	2b20      	cmp	r3, #32
 8005fa8:	d060      	beq.n	800606c <HAL_TIM_ConfigClockSource+0x15a>
 8005faa:	2b20      	cmp	r3, #32
 8005fac:	d867      	bhi.n	800607e <HAL_TIM_ConfigClockSource+0x16c>
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d05c      	beq.n	800606c <HAL_TIM_ConfigClockSource+0x15a>
 8005fb2:	2b10      	cmp	r3, #16
 8005fb4:	d05a      	beq.n	800606c <HAL_TIM_ConfigClockSource+0x15a>
 8005fb6:	e062      	b.n	800607e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fc8:	f000 f990 	bl	80062ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fda:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	609a      	str	r2, [r3, #8]
      break;
 8005fe4:	e04f      	b.n	8006086 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ff6:	f000 f979 	bl	80062ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006008:	609a      	str	r2, [r3, #8]
      break;
 800600a:	e03c      	b.n	8006086 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006018:	461a      	mov	r2, r3
 800601a:	f000 f8ed 	bl	80061f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2150      	movs	r1, #80	@ 0x50
 8006024:	4618      	mov	r0, r3
 8006026:	f000 f946 	bl	80062b6 <TIM_ITRx_SetConfig>
      break;
 800602a:	e02c      	b.n	8006086 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006038:	461a      	mov	r2, r3
 800603a:	f000 f90c 	bl	8006256 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2160      	movs	r1, #96	@ 0x60
 8006044:	4618      	mov	r0, r3
 8006046:	f000 f936 	bl	80062b6 <TIM_ITRx_SetConfig>
      break;
 800604a:	e01c      	b.n	8006086 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006058:	461a      	mov	r2, r3
 800605a:	f000 f8cd 	bl	80061f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2140      	movs	r1, #64	@ 0x40
 8006064:	4618      	mov	r0, r3
 8006066:	f000 f926 	bl	80062b6 <TIM_ITRx_SetConfig>
      break;
 800606a:	e00c      	b.n	8006086 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4619      	mov	r1, r3
 8006076:	4610      	mov	r0, r2
 8006078:	f000 f91d 	bl	80062b6 <TIM_ITRx_SetConfig>
      break;
 800607c:	e003      	b.n	8006086 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	73fb      	strb	r3, [r7, #15]
      break;
 8006082:	e000      	b.n	8006086 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006084:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006096:	7bfb      	ldrb	r3, [r7, #15]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a46      	ldr	r2, [pc, #280]	@ (80061cc <TIM_Base_SetConfig+0x12c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d013      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060be:	d00f      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a43      	ldr	r2, [pc, #268]	@ (80061d0 <TIM_Base_SetConfig+0x130>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d00b      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a42      	ldr	r2, [pc, #264]	@ (80061d4 <TIM_Base_SetConfig+0x134>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d007      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a41      	ldr	r2, [pc, #260]	@ (80061d8 <TIM_Base_SetConfig+0x138>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d003      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a40      	ldr	r2, [pc, #256]	@ (80061dc <TIM_Base_SetConfig+0x13c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d108      	bne.n	80060f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a35      	ldr	r2, [pc, #212]	@ (80061cc <TIM_Base_SetConfig+0x12c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d02b      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006100:	d027      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a32      	ldr	r2, [pc, #200]	@ (80061d0 <TIM_Base_SetConfig+0x130>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d023      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a31      	ldr	r2, [pc, #196]	@ (80061d4 <TIM_Base_SetConfig+0x134>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d01f      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a30      	ldr	r2, [pc, #192]	@ (80061d8 <TIM_Base_SetConfig+0x138>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d01b      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a2f      	ldr	r2, [pc, #188]	@ (80061dc <TIM_Base_SetConfig+0x13c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d017      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a2e      	ldr	r2, [pc, #184]	@ (80061e0 <TIM_Base_SetConfig+0x140>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d013      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a2d      	ldr	r2, [pc, #180]	@ (80061e4 <TIM_Base_SetConfig+0x144>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d00f      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a2c      	ldr	r2, [pc, #176]	@ (80061e8 <TIM_Base_SetConfig+0x148>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00b      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a2b      	ldr	r2, [pc, #172]	@ (80061ec <TIM_Base_SetConfig+0x14c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d007      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a2a      	ldr	r2, [pc, #168]	@ (80061f0 <TIM_Base_SetConfig+0x150>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d003      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a29      	ldr	r2, [pc, #164]	@ (80061f4 <TIM_Base_SetConfig+0x154>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d108      	bne.n	8006164 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4313      	orrs	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a10      	ldr	r2, [pc, #64]	@ (80061cc <TIM_Base_SetConfig+0x12c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d003      	beq.n	8006198 <TIM_Base_SetConfig+0xf8>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a12      	ldr	r2, [pc, #72]	@ (80061dc <TIM_Base_SetConfig+0x13c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d103      	bne.n	80061a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d105      	bne.n	80061be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	f023 0201 	bic.w	r2, r3, #1
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	611a      	str	r2, [r3, #16]
  }
}
 80061be:	bf00      	nop
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	40010000 	.word	0x40010000
 80061d0:	40000400 	.word	0x40000400
 80061d4:	40000800 	.word	0x40000800
 80061d8:	40000c00 	.word	0x40000c00
 80061dc:	40010400 	.word	0x40010400
 80061e0:	40014000 	.word	0x40014000
 80061e4:	40014400 	.word	0x40014400
 80061e8:	40014800 	.word	0x40014800
 80061ec:	40001800 	.word	0x40001800
 80061f0:	40001c00 	.word	0x40001c00
 80061f4:	40002000 	.word	0x40002000

080061f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	f023 0201 	bic.w	r2, r3, #1
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	4313      	orrs	r3, r2
 800622c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f023 030a 	bic.w	r3, r3, #10
 8006234:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	4313      	orrs	r3, r2
 800623c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	621a      	str	r2, [r3, #32]
}
 800624a:	bf00      	nop
 800624c:	371c      	adds	r7, #28
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006256:	b480      	push	{r7}
 8006258:	b087      	sub	sp, #28
 800625a:	af00      	add	r7, sp, #0
 800625c:	60f8      	str	r0, [r7, #12]
 800625e:	60b9      	str	r1, [r7, #8]
 8006260:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	f023 0210 	bic.w	r2, r3, #16
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006280:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	031b      	lsls	r3, r3, #12
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	4313      	orrs	r3, r2
 800628a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006292:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	4313      	orrs	r3, r2
 800629c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	621a      	str	r2, [r3, #32]
}
 80062aa:	bf00      	nop
 80062ac:	371c      	adds	r7, #28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b085      	sub	sp, #20
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f043 0307 	orr.w	r3, r3, #7
 80062d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	609a      	str	r2, [r3, #8]
}
 80062e0:	bf00      	nop
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b087      	sub	sp, #28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
 80062f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006306:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	021a      	lsls	r2, r3, #8
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	431a      	orrs	r2, r3
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4313      	orrs	r3, r2
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	4313      	orrs	r3, r2
 8006318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	609a      	str	r2, [r3, #8]
}
 8006320:	bf00      	nop
 8006322:	371c      	adds	r7, #28
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800633c:	2b01      	cmp	r3, #1
 800633e:	d101      	bne.n	8006344 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006340:	2302      	movs	r3, #2
 8006342:	e05a      	b.n	80063fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2202      	movs	r2, #2
 8006350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800636a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a21      	ldr	r2, [pc, #132]	@ (8006408 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d022      	beq.n	80063ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006390:	d01d      	beq.n	80063ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a1d      	ldr	r2, [pc, #116]	@ (800640c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d018      	beq.n	80063ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006410 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d013      	beq.n	80063ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a1a      	ldr	r2, [pc, #104]	@ (8006414 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d00e      	beq.n	80063ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a18      	ldr	r2, [pc, #96]	@ (8006418 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d009      	beq.n	80063ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a17      	ldr	r2, [pc, #92]	@ (800641c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d004      	beq.n	80063ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a15      	ldr	r2, [pc, #84]	@ (8006420 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d10c      	bne.n	80063e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	4313      	orrs	r3, r2
 80063de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	40010000 	.word	0x40010000
 800640c:	40000400 	.word	0x40000400
 8006410:	40000800 	.word	0x40000800
 8006414:	40000c00 	.word	0x40000c00
 8006418:	40010400 	.word	0x40010400
 800641c:	40014000 	.word	0x40014000
 8006420:	40001800 	.word	0x40001800

08006424 <findslot>:
 8006424:	4b0a      	ldr	r3, [pc, #40]	@ (8006450 <findslot+0x2c>)
 8006426:	b510      	push	{r4, lr}
 8006428:	4604      	mov	r4, r0
 800642a:	6818      	ldr	r0, [r3, #0]
 800642c:	b118      	cbz	r0, 8006436 <findslot+0x12>
 800642e:	6a03      	ldr	r3, [r0, #32]
 8006430:	b90b      	cbnz	r3, 8006436 <findslot+0x12>
 8006432:	f000 faf3 	bl	8006a1c <__sinit>
 8006436:	2c13      	cmp	r4, #19
 8006438:	d807      	bhi.n	800644a <findslot+0x26>
 800643a:	4806      	ldr	r0, [pc, #24]	@ (8006454 <findslot+0x30>)
 800643c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8006440:	3201      	adds	r2, #1
 8006442:	d002      	beq.n	800644a <findslot+0x26>
 8006444:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8006448:	bd10      	pop	{r4, pc}
 800644a:	2000      	movs	r0, #0
 800644c:	e7fc      	b.n	8006448 <findslot+0x24>
 800644e:	bf00      	nop
 8006450:	20000030 	.word	0x20000030
 8006454:	20025c24 	.word	0x20025c24

08006458 <error>:
 8006458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645a:	4604      	mov	r4, r0
 800645c:	f000 fb1c 	bl	8006a98 <__errno>
 8006460:	2613      	movs	r6, #19
 8006462:	4605      	mov	r5, r0
 8006464:	2700      	movs	r7, #0
 8006466:	4630      	mov	r0, r6
 8006468:	4639      	mov	r1, r7
 800646a:	beab      	bkpt	0x00ab
 800646c:	4606      	mov	r6, r0
 800646e:	602e      	str	r6, [r5, #0]
 8006470:	4620      	mov	r0, r4
 8006472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006474 <checkerror>:
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	d101      	bne.n	800647c <checkerror+0x8>
 8006478:	f7ff bfee 	b.w	8006458 <error>
 800647c:	4770      	bx	lr

0800647e <_swiread>:
 800647e:	b530      	push	{r4, r5, lr}
 8006480:	b085      	sub	sp, #20
 8006482:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006486:	9203      	str	r2, [sp, #12]
 8006488:	2406      	movs	r4, #6
 800648a:	ad01      	add	r5, sp, #4
 800648c:	4620      	mov	r0, r4
 800648e:	4629      	mov	r1, r5
 8006490:	beab      	bkpt	0x00ab
 8006492:	4604      	mov	r4, r0
 8006494:	4620      	mov	r0, r4
 8006496:	f7ff ffed 	bl	8006474 <checkerror>
 800649a:	b005      	add	sp, #20
 800649c:	bd30      	pop	{r4, r5, pc}

0800649e <_read>:
 800649e:	b570      	push	{r4, r5, r6, lr}
 80064a0:	460e      	mov	r6, r1
 80064a2:	4614      	mov	r4, r2
 80064a4:	f7ff ffbe 	bl	8006424 <findslot>
 80064a8:	4605      	mov	r5, r0
 80064aa:	b930      	cbnz	r0, 80064ba <_read+0x1c>
 80064ac:	f000 faf4 	bl	8006a98 <__errno>
 80064b0:	2309      	movs	r3, #9
 80064b2:	6003      	str	r3, [r0, #0]
 80064b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064b8:	bd70      	pop	{r4, r5, r6, pc}
 80064ba:	6800      	ldr	r0, [r0, #0]
 80064bc:	4622      	mov	r2, r4
 80064be:	4631      	mov	r1, r6
 80064c0:	f7ff ffdd 	bl	800647e <_swiread>
 80064c4:	1c43      	adds	r3, r0, #1
 80064c6:	d0f5      	beq.n	80064b4 <_read+0x16>
 80064c8:	686b      	ldr	r3, [r5, #4]
 80064ca:	1a20      	subs	r0, r4, r0
 80064cc:	4403      	add	r3, r0
 80064ce:	606b      	str	r3, [r5, #4]
 80064d0:	e7f2      	b.n	80064b8 <_read+0x1a>

080064d2 <_swilseek>:
 80064d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064d4:	460c      	mov	r4, r1
 80064d6:	4616      	mov	r6, r2
 80064d8:	f7ff ffa4 	bl	8006424 <findslot>
 80064dc:	4605      	mov	r5, r0
 80064de:	b940      	cbnz	r0, 80064f2 <_swilseek+0x20>
 80064e0:	f000 fada 	bl	8006a98 <__errno>
 80064e4:	2309      	movs	r3, #9
 80064e6:	6003      	str	r3, [r0, #0]
 80064e8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80064ec:	4620      	mov	r0, r4
 80064ee:	b003      	add	sp, #12
 80064f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064f2:	2e02      	cmp	r6, #2
 80064f4:	d903      	bls.n	80064fe <_swilseek+0x2c>
 80064f6:	f000 facf 	bl	8006a98 <__errno>
 80064fa:	2316      	movs	r3, #22
 80064fc:	e7f3      	b.n	80064e6 <_swilseek+0x14>
 80064fe:	2e01      	cmp	r6, #1
 8006500:	d112      	bne.n	8006528 <_swilseek+0x56>
 8006502:	6843      	ldr	r3, [r0, #4]
 8006504:	18e4      	adds	r4, r4, r3
 8006506:	d4f6      	bmi.n	80064f6 <_swilseek+0x24>
 8006508:	682b      	ldr	r3, [r5, #0]
 800650a:	260a      	movs	r6, #10
 800650c:	e9cd 3400 	strd	r3, r4, [sp]
 8006510:	466f      	mov	r7, sp
 8006512:	4630      	mov	r0, r6
 8006514:	4639      	mov	r1, r7
 8006516:	beab      	bkpt	0x00ab
 8006518:	4606      	mov	r6, r0
 800651a:	4630      	mov	r0, r6
 800651c:	f7ff ffaa 	bl	8006474 <checkerror>
 8006520:	2800      	cmp	r0, #0
 8006522:	dbe1      	blt.n	80064e8 <_swilseek+0x16>
 8006524:	606c      	str	r4, [r5, #4]
 8006526:	e7e1      	b.n	80064ec <_swilseek+0x1a>
 8006528:	2e02      	cmp	r6, #2
 800652a:	6803      	ldr	r3, [r0, #0]
 800652c:	d1ec      	bne.n	8006508 <_swilseek+0x36>
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	260c      	movs	r6, #12
 8006532:	466f      	mov	r7, sp
 8006534:	4630      	mov	r0, r6
 8006536:	4639      	mov	r1, r7
 8006538:	beab      	bkpt	0x00ab
 800653a:	4606      	mov	r6, r0
 800653c:	4630      	mov	r0, r6
 800653e:	f7ff ff99 	bl	8006474 <checkerror>
 8006542:	1c43      	adds	r3, r0, #1
 8006544:	d0d0      	beq.n	80064e8 <_swilseek+0x16>
 8006546:	4404      	add	r4, r0
 8006548:	e7de      	b.n	8006508 <_swilseek+0x36>

0800654a <_lseek>:
 800654a:	f7ff bfc2 	b.w	80064d2 <_swilseek>

0800654e <_swiwrite>:
 800654e:	b530      	push	{r4, r5, lr}
 8006550:	b085      	sub	sp, #20
 8006552:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006556:	9203      	str	r2, [sp, #12]
 8006558:	2405      	movs	r4, #5
 800655a:	ad01      	add	r5, sp, #4
 800655c:	4620      	mov	r0, r4
 800655e:	4629      	mov	r1, r5
 8006560:	beab      	bkpt	0x00ab
 8006562:	4604      	mov	r4, r0
 8006564:	4620      	mov	r0, r4
 8006566:	f7ff ff85 	bl	8006474 <checkerror>
 800656a:	b005      	add	sp, #20
 800656c:	bd30      	pop	{r4, r5, pc}

0800656e <_write>:
 800656e:	b570      	push	{r4, r5, r6, lr}
 8006570:	460e      	mov	r6, r1
 8006572:	4615      	mov	r5, r2
 8006574:	f7ff ff56 	bl	8006424 <findslot>
 8006578:	4604      	mov	r4, r0
 800657a:	b930      	cbnz	r0, 800658a <_write+0x1c>
 800657c:	f000 fa8c 	bl	8006a98 <__errno>
 8006580:	2309      	movs	r3, #9
 8006582:	6003      	str	r3, [r0, #0]
 8006584:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006588:	bd70      	pop	{r4, r5, r6, pc}
 800658a:	6800      	ldr	r0, [r0, #0]
 800658c:	462a      	mov	r2, r5
 800658e:	4631      	mov	r1, r6
 8006590:	f7ff ffdd 	bl	800654e <_swiwrite>
 8006594:	1e03      	subs	r3, r0, #0
 8006596:	dbf5      	blt.n	8006584 <_write+0x16>
 8006598:	6862      	ldr	r2, [r4, #4]
 800659a:	1ae8      	subs	r0, r5, r3
 800659c:	4402      	add	r2, r0
 800659e:	42ab      	cmp	r3, r5
 80065a0:	6062      	str	r2, [r4, #4]
 80065a2:	d1f1      	bne.n	8006588 <_write+0x1a>
 80065a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80065a8:	2000      	movs	r0, #0
 80065aa:	f7ff bf55 	b.w	8006458 <error>

080065ae <_swiclose>:
 80065ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065b0:	2402      	movs	r4, #2
 80065b2:	9001      	str	r0, [sp, #4]
 80065b4:	ad01      	add	r5, sp, #4
 80065b6:	4620      	mov	r0, r4
 80065b8:	4629      	mov	r1, r5
 80065ba:	beab      	bkpt	0x00ab
 80065bc:	4604      	mov	r4, r0
 80065be:	4620      	mov	r0, r4
 80065c0:	f7ff ff58 	bl	8006474 <checkerror>
 80065c4:	b003      	add	sp, #12
 80065c6:	bd30      	pop	{r4, r5, pc}

080065c8 <_close>:
 80065c8:	b538      	push	{r3, r4, r5, lr}
 80065ca:	4605      	mov	r5, r0
 80065cc:	f7ff ff2a 	bl	8006424 <findslot>
 80065d0:	4604      	mov	r4, r0
 80065d2:	b930      	cbnz	r0, 80065e2 <_close+0x1a>
 80065d4:	f000 fa60 	bl	8006a98 <__errno>
 80065d8:	2309      	movs	r3, #9
 80065da:	6003      	str	r3, [r0, #0]
 80065dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065e0:	bd38      	pop	{r3, r4, r5, pc}
 80065e2:	3d01      	subs	r5, #1
 80065e4:	2d01      	cmp	r5, #1
 80065e6:	d809      	bhi.n	80065fc <_close+0x34>
 80065e8:	4b09      	ldr	r3, [pc, #36]	@ (8006610 <_close+0x48>)
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d104      	bne.n	80065fc <_close+0x34>
 80065f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80065f6:	6003      	str	r3, [r0, #0]
 80065f8:	2000      	movs	r0, #0
 80065fa:	e7f1      	b.n	80065e0 <_close+0x18>
 80065fc:	6820      	ldr	r0, [r4, #0]
 80065fe:	f7ff ffd6 	bl	80065ae <_swiclose>
 8006602:	2800      	cmp	r0, #0
 8006604:	d1ec      	bne.n	80065e0 <_close+0x18>
 8006606:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800660a:	6023      	str	r3, [r4, #0]
 800660c:	e7e8      	b.n	80065e0 <_close+0x18>
 800660e:	bf00      	nop
 8006610:	20025c24 	.word	0x20025c24

08006614 <_swistat>:
 8006614:	b570      	push	{r4, r5, r6, lr}
 8006616:	460c      	mov	r4, r1
 8006618:	f7ff ff04 	bl	8006424 <findslot>
 800661c:	4605      	mov	r5, r0
 800661e:	b930      	cbnz	r0, 800662e <_swistat+0x1a>
 8006620:	f000 fa3a 	bl	8006a98 <__errno>
 8006624:	2309      	movs	r3, #9
 8006626:	6003      	str	r3, [r0, #0]
 8006628:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800662c:	bd70      	pop	{r4, r5, r6, pc}
 800662e:	6863      	ldr	r3, [r4, #4]
 8006630:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006634:	6063      	str	r3, [r4, #4]
 8006636:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800663a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800663c:	260c      	movs	r6, #12
 800663e:	4630      	mov	r0, r6
 8006640:	4629      	mov	r1, r5
 8006642:	beab      	bkpt	0x00ab
 8006644:	4605      	mov	r5, r0
 8006646:	4628      	mov	r0, r5
 8006648:	f7ff ff14 	bl	8006474 <checkerror>
 800664c:	1c43      	adds	r3, r0, #1
 800664e:	d0eb      	beq.n	8006628 <_swistat+0x14>
 8006650:	6120      	str	r0, [r4, #16]
 8006652:	2000      	movs	r0, #0
 8006654:	e7ea      	b.n	800662c <_swistat+0x18>

08006656 <_stat>:
 8006656:	b538      	push	{r3, r4, r5, lr}
 8006658:	460d      	mov	r5, r1
 800665a:	4604      	mov	r4, r0
 800665c:	2258      	movs	r2, #88	@ 0x58
 800665e:	2100      	movs	r1, #0
 8006660:	4628      	mov	r0, r5
 8006662:	f000 fa11 	bl	8006a88 <memset>
 8006666:	4620      	mov	r0, r4
 8006668:	2100      	movs	r1, #0
 800666a:	f000 f811 	bl	8006690 <_swiopen>
 800666e:	1c43      	adds	r3, r0, #1
 8006670:	4604      	mov	r4, r0
 8006672:	d00b      	beq.n	800668c <_stat+0x36>
 8006674:	686b      	ldr	r3, [r5, #4]
 8006676:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800667a:	606b      	str	r3, [r5, #4]
 800667c:	4629      	mov	r1, r5
 800667e:	f7ff ffc9 	bl	8006614 <_swistat>
 8006682:	4605      	mov	r5, r0
 8006684:	4620      	mov	r0, r4
 8006686:	f7ff ff9f 	bl	80065c8 <_close>
 800668a:	462c      	mov	r4, r5
 800668c:	4620      	mov	r0, r4
 800668e:	bd38      	pop	{r3, r4, r5, pc}

08006690 <_swiopen>:
 8006690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006694:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8006740 <_swiopen+0xb0>
 8006698:	b096      	sub	sp, #88	@ 0x58
 800669a:	4607      	mov	r7, r0
 800669c:	460e      	mov	r6, r1
 800669e:	2400      	movs	r4, #0
 80066a0:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 80066a4:	3301      	adds	r3, #1
 80066a6:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80066aa:	d032      	beq.n	8006712 <_swiopen+0x82>
 80066ac:	3401      	adds	r4, #1
 80066ae:	2c14      	cmp	r4, #20
 80066b0:	d1f6      	bne.n	80066a0 <_swiopen+0x10>
 80066b2:	f000 f9f1 	bl	8006a98 <__errno>
 80066b6:	2318      	movs	r3, #24
 80066b8:	e03a      	b.n	8006730 <_swiopen+0xa0>
 80066ba:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80066be:	f240 6301 	movw	r3, #1537	@ 0x601
 80066c2:	07b2      	lsls	r2, r6, #30
 80066c4:	bf48      	it	mi
 80066c6:	f045 0502 	orrmi.w	r5, r5, #2
 80066ca:	421e      	tst	r6, r3
 80066cc:	bf18      	it	ne
 80066ce:	f045 0504 	orrne.w	r5, r5, #4
 80066d2:	0733      	lsls	r3, r6, #28
 80066d4:	bf48      	it	mi
 80066d6:	f025 0504 	bicmi.w	r5, r5, #4
 80066da:	4638      	mov	r0, r7
 80066dc:	bf48      	it	mi
 80066de:	f045 0508 	orrmi.w	r5, r5, #8
 80066e2:	9700      	str	r7, [sp, #0]
 80066e4:	f7f9 fd82 	bl	80001ec <strlen>
 80066e8:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80066ec:	2501      	movs	r5, #1
 80066ee:	4628      	mov	r0, r5
 80066f0:	4651      	mov	r1, sl
 80066f2:	beab      	bkpt	0x00ab
 80066f4:	4605      	mov	r5, r0
 80066f6:	2d00      	cmp	r5, #0
 80066f8:	db06      	blt.n	8006708 <_swiopen+0x78>
 80066fa:	44c8      	add	r8, r9
 80066fc:	2300      	movs	r3, #0
 80066fe:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 8006702:	f8c8 3004 	str.w	r3, [r8, #4]
 8006706:	e016      	b.n	8006736 <_swiopen+0xa6>
 8006708:	4628      	mov	r0, r5
 800670a:	f7ff fea5 	bl	8006458 <error>
 800670e:	4604      	mov	r4, r0
 8006710:	e011      	b.n	8006736 <_swiopen+0xa6>
 8006712:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8006716:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800671a:	46ea      	mov	sl, sp
 800671c:	d1cd      	bne.n	80066ba <_swiopen+0x2a>
 800671e:	4651      	mov	r1, sl
 8006720:	4638      	mov	r0, r7
 8006722:	f7ff ff98 	bl	8006656 <_stat>
 8006726:	3001      	adds	r0, #1
 8006728:	d0c7      	beq.n	80066ba <_swiopen+0x2a>
 800672a:	f000 f9b5 	bl	8006a98 <__errno>
 800672e:	2311      	movs	r3, #17
 8006730:	6003      	str	r3, [r0, #0]
 8006732:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006736:	4620      	mov	r0, r4
 8006738:	b016      	add	sp, #88	@ 0x58
 800673a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800673e:	bf00      	nop
 8006740:	20025c24 	.word	0x20025c24

08006744 <_get_semihosting_exts>:
 8006744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006748:	4606      	mov	r6, r0
 800674a:	460f      	mov	r7, r1
 800674c:	4829      	ldr	r0, [pc, #164]	@ (80067f4 <_get_semihosting_exts+0xb0>)
 800674e:	2100      	movs	r1, #0
 8006750:	4615      	mov	r5, r2
 8006752:	f7ff ff9d 	bl	8006690 <_swiopen>
 8006756:	462a      	mov	r2, r5
 8006758:	4604      	mov	r4, r0
 800675a:	2100      	movs	r1, #0
 800675c:	4630      	mov	r0, r6
 800675e:	f000 f993 	bl	8006a88 <memset>
 8006762:	1c63      	adds	r3, r4, #1
 8006764:	d014      	beq.n	8006790 <_get_semihosting_exts+0x4c>
 8006766:	4620      	mov	r0, r4
 8006768:	f7ff fe5c 	bl	8006424 <findslot>
 800676c:	f04f 080c 	mov.w	r8, #12
 8006770:	4681      	mov	r9, r0
 8006772:	4640      	mov	r0, r8
 8006774:	4649      	mov	r1, r9
 8006776:	beab      	bkpt	0x00ab
 8006778:	4680      	mov	r8, r0
 800677a:	4640      	mov	r0, r8
 800677c:	f7ff fe7a 	bl	8006474 <checkerror>
 8006780:	2803      	cmp	r0, #3
 8006782:	dd02      	ble.n	800678a <_get_semihosting_exts+0x46>
 8006784:	1ec3      	subs	r3, r0, #3
 8006786:	42ab      	cmp	r3, r5
 8006788:	dc07      	bgt.n	800679a <_get_semihosting_exts+0x56>
 800678a:	4620      	mov	r0, r4
 800678c:	f7ff ff1c 	bl	80065c8 <_close>
 8006790:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006794:	b003      	add	sp, #12
 8006796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800679a:	2204      	movs	r2, #4
 800679c:	eb0d 0102 	add.w	r1, sp, r2
 80067a0:	4620      	mov	r0, r4
 80067a2:	f7ff fe7c 	bl	800649e <_read>
 80067a6:	2803      	cmp	r0, #3
 80067a8:	ddef      	ble.n	800678a <_get_semihosting_exts+0x46>
 80067aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80067ae:	2b53      	cmp	r3, #83	@ 0x53
 80067b0:	d1eb      	bne.n	800678a <_get_semihosting_exts+0x46>
 80067b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80067b6:	2b48      	cmp	r3, #72	@ 0x48
 80067b8:	d1e7      	bne.n	800678a <_get_semihosting_exts+0x46>
 80067ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80067be:	2b46      	cmp	r3, #70	@ 0x46
 80067c0:	d1e3      	bne.n	800678a <_get_semihosting_exts+0x46>
 80067c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80067c6:	2b42      	cmp	r3, #66	@ 0x42
 80067c8:	d1df      	bne.n	800678a <_get_semihosting_exts+0x46>
 80067ca:	2201      	movs	r2, #1
 80067cc:	4639      	mov	r1, r7
 80067ce:	4620      	mov	r0, r4
 80067d0:	f7ff fe7f 	bl	80064d2 <_swilseek>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	dbd8      	blt.n	800678a <_get_semihosting_exts+0x46>
 80067d8:	462a      	mov	r2, r5
 80067da:	4631      	mov	r1, r6
 80067dc:	4620      	mov	r0, r4
 80067de:	f7ff fe5e 	bl	800649e <_read>
 80067e2:	4605      	mov	r5, r0
 80067e4:	4620      	mov	r0, r4
 80067e6:	f7ff feef 	bl	80065c8 <_close>
 80067ea:	4628      	mov	r0, r5
 80067ec:	f7ff fe42 	bl	8006474 <checkerror>
 80067f0:	e7d0      	b.n	8006794 <_get_semihosting_exts+0x50>
 80067f2:	bf00      	nop
 80067f4:	0800800c 	.word	0x0800800c

080067f8 <initialise_semihosting_exts>:
 80067f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067fa:	4d0a      	ldr	r5, [pc, #40]	@ (8006824 <initialise_semihosting_exts+0x2c>)
 80067fc:	4c0a      	ldr	r4, [pc, #40]	@ (8006828 <initialise_semihosting_exts+0x30>)
 80067fe:	2100      	movs	r1, #0
 8006800:	2201      	movs	r2, #1
 8006802:	a801      	add	r0, sp, #4
 8006804:	6029      	str	r1, [r5, #0]
 8006806:	6022      	str	r2, [r4, #0]
 8006808:	f7ff ff9c 	bl	8006744 <_get_semihosting_exts>
 800680c:	2800      	cmp	r0, #0
 800680e:	dd07      	ble.n	8006820 <initialise_semihosting_exts+0x28>
 8006810:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006814:	f003 0201 	and.w	r2, r3, #1
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	602a      	str	r2, [r5, #0]
 800681e:	6023      	str	r3, [r4, #0]
 8006820:	b003      	add	sp, #12
 8006822:	bd30      	pop	{r4, r5, pc}
 8006824:	20000020 	.word	0x20000020
 8006828:	2000001c 	.word	0x2000001c

0800682c <_has_ext_stdout_stderr>:
 800682c:	b510      	push	{r4, lr}
 800682e:	4c04      	ldr	r4, [pc, #16]	@ (8006840 <_has_ext_stdout_stderr+0x14>)
 8006830:	6823      	ldr	r3, [r4, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	da01      	bge.n	800683a <_has_ext_stdout_stderr+0xe>
 8006836:	f7ff ffdf 	bl	80067f8 <initialise_semihosting_exts>
 800683a:	6820      	ldr	r0, [r4, #0]
 800683c:	bd10      	pop	{r4, pc}
 800683e:	bf00      	nop
 8006840:	2000001c 	.word	0x2000001c

08006844 <initialise_monitor_handles>:
 8006844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006848:	b085      	sub	sp, #20
 800684a:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80068fc <initialise_monitor_handles+0xb8>
 800684e:	f8cd 9004 	str.w	r9, [sp, #4]
 8006852:	2303      	movs	r3, #3
 8006854:	2400      	movs	r4, #0
 8006856:	9303      	str	r3, [sp, #12]
 8006858:	af01      	add	r7, sp, #4
 800685a:	9402      	str	r4, [sp, #8]
 800685c:	2501      	movs	r5, #1
 800685e:	4628      	mov	r0, r5
 8006860:	4639      	mov	r1, r7
 8006862:	beab      	bkpt	0x00ab
 8006864:	4605      	mov	r5, r0
 8006866:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8006900 <initialise_monitor_handles+0xbc>
 800686a:	4623      	mov	r3, r4
 800686c:	4c20      	ldr	r4, [pc, #128]	@ (80068f0 <initialise_monitor_handles+0xac>)
 800686e:	f8c8 5000 	str.w	r5, [r8]
 8006872:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006876:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800687a:	3301      	adds	r3, #1
 800687c:	2b14      	cmp	r3, #20
 800687e:	d1fa      	bne.n	8006876 <initialise_monitor_handles+0x32>
 8006880:	f7ff ffd4 	bl	800682c <_has_ext_stdout_stderr>
 8006884:	4d1b      	ldr	r5, [pc, #108]	@ (80068f4 <initialise_monitor_handles+0xb0>)
 8006886:	b1d0      	cbz	r0, 80068be <initialise_monitor_handles+0x7a>
 8006888:	f04f 0a03 	mov.w	sl, #3
 800688c:	2304      	movs	r3, #4
 800688e:	f8cd 9004 	str.w	r9, [sp, #4]
 8006892:	2601      	movs	r6, #1
 8006894:	f8cd a00c 	str.w	sl, [sp, #12]
 8006898:	9302      	str	r3, [sp, #8]
 800689a:	4630      	mov	r0, r6
 800689c:	4639      	mov	r1, r7
 800689e:	beab      	bkpt	0x00ab
 80068a0:	4683      	mov	fp, r0
 80068a2:	4b15      	ldr	r3, [pc, #84]	@ (80068f8 <initialise_monitor_handles+0xb4>)
 80068a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80068a8:	f8c3 b000 	str.w	fp, [r3]
 80068ac:	2308      	movs	r3, #8
 80068ae:	f8cd a00c 	str.w	sl, [sp, #12]
 80068b2:	9302      	str	r3, [sp, #8]
 80068b4:	4630      	mov	r0, r6
 80068b6:	4639      	mov	r1, r7
 80068b8:	beab      	bkpt	0x00ab
 80068ba:	4606      	mov	r6, r0
 80068bc:	602e      	str	r6, [r5, #0]
 80068be:	682b      	ldr	r3, [r5, #0]
 80068c0:	3301      	adds	r3, #1
 80068c2:	bf02      	ittt	eq
 80068c4:	4b0c      	ldreq	r3, [pc, #48]	@ (80068f8 <initialise_monitor_handles+0xb4>)
 80068c6:	681b      	ldreq	r3, [r3, #0]
 80068c8:	602b      	streq	r3, [r5, #0]
 80068ca:	2600      	movs	r6, #0
 80068cc:	f8d8 3000 	ldr.w	r3, [r8]
 80068d0:	6023      	str	r3, [r4, #0]
 80068d2:	6066      	str	r6, [r4, #4]
 80068d4:	f7ff ffaa 	bl	800682c <_has_ext_stdout_stderr>
 80068d8:	b130      	cbz	r0, 80068e8 <initialise_monitor_handles+0xa4>
 80068da:	4b07      	ldr	r3, [pc, #28]	@ (80068f8 <initialise_monitor_handles+0xb4>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80068e2:	682b      	ldr	r3, [r5, #0]
 80068e4:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80068e8:	b005      	add	sp, #20
 80068ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ee:	bf00      	nop
 80068f0:	20025c24 	.word	0x20025c24
 80068f4:	20025c18 	.word	0x20025c18
 80068f8:	20025c1c 	.word	0x20025c1c
 80068fc:	08008022 	.word	0x08008022
 8006900:	20025c20 	.word	0x20025c20

08006904 <std>:
 8006904:	2300      	movs	r3, #0
 8006906:	b510      	push	{r4, lr}
 8006908:	4604      	mov	r4, r0
 800690a:	e9c0 3300 	strd	r3, r3, [r0]
 800690e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006912:	6083      	str	r3, [r0, #8]
 8006914:	8181      	strh	r1, [r0, #12]
 8006916:	6643      	str	r3, [r0, #100]	@ 0x64
 8006918:	81c2      	strh	r2, [r0, #14]
 800691a:	6183      	str	r3, [r0, #24]
 800691c:	4619      	mov	r1, r3
 800691e:	2208      	movs	r2, #8
 8006920:	305c      	adds	r0, #92	@ 0x5c
 8006922:	f000 f8b1 	bl	8006a88 <memset>
 8006926:	4b0d      	ldr	r3, [pc, #52]	@ (800695c <std+0x58>)
 8006928:	6263      	str	r3, [r4, #36]	@ 0x24
 800692a:	4b0d      	ldr	r3, [pc, #52]	@ (8006960 <std+0x5c>)
 800692c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800692e:	4b0d      	ldr	r3, [pc, #52]	@ (8006964 <std+0x60>)
 8006930:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006932:	4b0d      	ldr	r3, [pc, #52]	@ (8006968 <std+0x64>)
 8006934:	6323      	str	r3, [r4, #48]	@ 0x30
 8006936:	4b0d      	ldr	r3, [pc, #52]	@ (800696c <std+0x68>)
 8006938:	6224      	str	r4, [r4, #32]
 800693a:	429c      	cmp	r4, r3
 800693c:	d006      	beq.n	800694c <std+0x48>
 800693e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006942:	4294      	cmp	r4, r2
 8006944:	d002      	beq.n	800694c <std+0x48>
 8006946:	33d0      	adds	r3, #208	@ 0xd0
 8006948:	429c      	cmp	r4, r3
 800694a:	d105      	bne.n	8006958 <std+0x54>
 800694c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006954:	f000 b8ca 	b.w	8006aec <__retarget_lock_init_recursive>
 8006958:	bd10      	pop	{r4, pc}
 800695a:	bf00      	nop
 800695c:	08006c65 	.word	0x08006c65
 8006960:	08006c87 	.word	0x08006c87
 8006964:	08006cbf 	.word	0x08006cbf
 8006968:	08006ce3 	.word	0x08006ce3
 800696c:	20025cc4 	.word	0x20025cc4

08006970 <stdio_exit_handler>:
 8006970:	4a02      	ldr	r2, [pc, #8]	@ (800697c <stdio_exit_handler+0xc>)
 8006972:	4903      	ldr	r1, [pc, #12]	@ (8006980 <stdio_exit_handler+0x10>)
 8006974:	4803      	ldr	r0, [pc, #12]	@ (8006984 <stdio_exit_handler+0x14>)
 8006976:	f000 b869 	b.w	8006a4c <_fwalk_sglue>
 800697a:	bf00      	nop
 800697c:	20000024 	.word	0x20000024
 8006980:	08006bfd 	.word	0x08006bfd
 8006984:	20000034 	.word	0x20000034

08006988 <cleanup_stdio>:
 8006988:	6841      	ldr	r1, [r0, #4]
 800698a:	4b0c      	ldr	r3, [pc, #48]	@ (80069bc <cleanup_stdio+0x34>)
 800698c:	4299      	cmp	r1, r3
 800698e:	b510      	push	{r4, lr}
 8006990:	4604      	mov	r4, r0
 8006992:	d001      	beq.n	8006998 <cleanup_stdio+0x10>
 8006994:	f000 f932 	bl	8006bfc <_fflush_r>
 8006998:	68a1      	ldr	r1, [r4, #8]
 800699a:	4b09      	ldr	r3, [pc, #36]	@ (80069c0 <cleanup_stdio+0x38>)
 800699c:	4299      	cmp	r1, r3
 800699e:	d002      	beq.n	80069a6 <cleanup_stdio+0x1e>
 80069a0:	4620      	mov	r0, r4
 80069a2:	f000 f92b 	bl	8006bfc <_fflush_r>
 80069a6:	68e1      	ldr	r1, [r4, #12]
 80069a8:	4b06      	ldr	r3, [pc, #24]	@ (80069c4 <cleanup_stdio+0x3c>)
 80069aa:	4299      	cmp	r1, r3
 80069ac:	d004      	beq.n	80069b8 <cleanup_stdio+0x30>
 80069ae:	4620      	mov	r0, r4
 80069b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069b4:	f000 b922 	b.w	8006bfc <_fflush_r>
 80069b8:	bd10      	pop	{r4, pc}
 80069ba:	bf00      	nop
 80069bc:	20025cc4 	.word	0x20025cc4
 80069c0:	20025d2c 	.word	0x20025d2c
 80069c4:	20025d94 	.word	0x20025d94

080069c8 <global_stdio_init.part.0>:
 80069c8:	b510      	push	{r4, lr}
 80069ca:	4b0b      	ldr	r3, [pc, #44]	@ (80069f8 <global_stdio_init.part.0+0x30>)
 80069cc:	4c0b      	ldr	r4, [pc, #44]	@ (80069fc <global_stdio_init.part.0+0x34>)
 80069ce:	4a0c      	ldr	r2, [pc, #48]	@ (8006a00 <global_stdio_init.part.0+0x38>)
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	4620      	mov	r0, r4
 80069d4:	2200      	movs	r2, #0
 80069d6:	2104      	movs	r1, #4
 80069d8:	f7ff ff94 	bl	8006904 <std>
 80069dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80069e0:	2201      	movs	r2, #1
 80069e2:	2109      	movs	r1, #9
 80069e4:	f7ff ff8e 	bl	8006904 <std>
 80069e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80069ec:	2202      	movs	r2, #2
 80069ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069f2:	2112      	movs	r1, #18
 80069f4:	f7ff bf86 	b.w	8006904 <std>
 80069f8:	20025dfc 	.word	0x20025dfc
 80069fc:	20025cc4 	.word	0x20025cc4
 8006a00:	08006971 	.word	0x08006971

08006a04 <__sfp_lock_acquire>:
 8006a04:	4801      	ldr	r0, [pc, #4]	@ (8006a0c <__sfp_lock_acquire+0x8>)
 8006a06:	f000 b872 	b.w	8006aee <__retarget_lock_acquire_recursive>
 8006a0a:	bf00      	nop
 8006a0c:	20025e01 	.word	0x20025e01

08006a10 <__sfp_lock_release>:
 8006a10:	4801      	ldr	r0, [pc, #4]	@ (8006a18 <__sfp_lock_release+0x8>)
 8006a12:	f000 b86d 	b.w	8006af0 <__retarget_lock_release_recursive>
 8006a16:	bf00      	nop
 8006a18:	20025e01 	.word	0x20025e01

08006a1c <__sinit>:
 8006a1c:	b510      	push	{r4, lr}
 8006a1e:	4604      	mov	r4, r0
 8006a20:	f7ff fff0 	bl	8006a04 <__sfp_lock_acquire>
 8006a24:	6a23      	ldr	r3, [r4, #32]
 8006a26:	b11b      	cbz	r3, 8006a30 <__sinit+0x14>
 8006a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a2c:	f7ff bff0 	b.w	8006a10 <__sfp_lock_release>
 8006a30:	4b04      	ldr	r3, [pc, #16]	@ (8006a44 <__sinit+0x28>)
 8006a32:	6223      	str	r3, [r4, #32]
 8006a34:	4b04      	ldr	r3, [pc, #16]	@ (8006a48 <__sinit+0x2c>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1f5      	bne.n	8006a28 <__sinit+0xc>
 8006a3c:	f7ff ffc4 	bl	80069c8 <global_stdio_init.part.0>
 8006a40:	e7f2      	b.n	8006a28 <__sinit+0xc>
 8006a42:	bf00      	nop
 8006a44:	08006989 	.word	0x08006989
 8006a48:	20025dfc 	.word	0x20025dfc

08006a4c <_fwalk_sglue>:
 8006a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a50:	4607      	mov	r7, r0
 8006a52:	4688      	mov	r8, r1
 8006a54:	4614      	mov	r4, r2
 8006a56:	2600      	movs	r6, #0
 8006a58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a5c:	f1b9 0901 	subs.w	r9, r9, #1
 8006a60:	d505      	bpl.n	8006a6e <_fwalk_sglue+0x22>
 8006a62:	6824      	ldr	r4, [r4, #0]
 8006a64:	2c00      	cmp	r4, #0
 8006a66:	d1f7      	bne.n	8006a58 <_fwalk_sglue+0xc>
 8006a68:	4630      	mov	r0, r6
 8006a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a6e:	89ab      	ldrh	r3, [r5, #12]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d907      	bls.n	8006a84 <_fwalk_sglue+0x38>
 8006a74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	d003      	beq.n	8006a84 <_fwalk_sglue+0x38>
 8006a7c:	4629      	mov	r1, r5
 8006a7e:	4638      	mov	r0, r7
 8006a80:	47c0      	blx	r8
 8006a82:	4306      	orrs	r6, r0
 8006a84:	3568      	adds	r5, #104	@ 0x68
 8006a86:	e7e9      	b.n	8006a5c <_fwalk_sglue+0x10>

08006a88 <memset>:
 8006a88:	4402      	add	r2, r0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d100      	bne.n	8006a92 <memset+0xa>
 8006a90:	4770      	bx	lr
 8006a92:	f803 1b01 	strb.w	r1, [r3], #1
 8006a96:	e7f9      	b.n	8006a8c <memset+0x4>

08006a98 <__errno>:
 8006a98:	4b01      	ldr	r3, [pc, #4]	@ (8006aa0 <__errno+0x8>)
 8006a9a:	6818      	ldr	r0, [r3, #0]
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	20000030 	.word	0x20000030

08006aa4 <__libc_init_array>:
 8006aa4:	b570      	push	{r4, r5, r6, lr}
 8006aa6:	4d0d      	ldr	r5, [pc, #52]	@ (8006adc <__libc_init_array+0x38>)
 8006aa8:	4c0d      	ldr	r4, [pc, #52]	@ (8006ae0 <__libc_init_array+0x3c>)
 8006aaa:	1b64      	subs	r4, r4, r5
 8006aac:	10a4      	asrs	r4, r4, #2
 8006aae:	2600      	movs	r6, #0
 8006ab0:	42a6      	cmp	r6, r4
 8006ab2:	d109      	bne.n	8006ac8 <__libc_init_array+0x24>
 8006ab4:	4d0b      	ldr	r5, [pc, #44]	@ (8006ae4 <__libc_init_array+0x40>)
 8006ab6:	4c0c      	ldr	r4, [pc, #48]	@ (8006ae8 <__libc_init_array+0x44>)
 8006ab8:	f000 f9a8 	bl	8006e0c <_init>
 8006abc:	1b64      	subs	r4, r4, r5
 8006abe:	10a4      	asrs	r4, r4, #2
 8006ac0:	2600      	movs	r6, #0
 8006ac2:	42a6      	cmp	r6, r4
 8006ac4:	d105      	bne.n	8006ad2 <__libc_init_array+0x2e>
 8006ac6:	bd70      	pop	{r4, r5, r6, pc}
 8006ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006acc:	4798      	blx	r3
 8006ace:	3601      	adds	r6, #1
 8006ad0:	e7ee      	b.n	8006ab0 <__libc_init_array+0xc>
 8006ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ad6:	4798      	blx	r3
 8006ad8:	3601      	adds	r6, #1
 8006ada:	e7f2      	b.n	8006ac2 <__libc_init_array+0x1e>
 8006adc:	08008030 	.word	0x08008030
 8006ae0:	08008030 	.word	0x08008030
 8006ae4:	08008030 	.word	0x08008030
 8006ae8:	08008034 	.word	0x08008034

08006aec <__retarget_lock_init_recursive>:
 8006aec:	4770      	bx	lr

08006aee <__retarget_lock_acquire_recursive>:
 8006aee:	4770      	bx	lr

08006af0 <__retarget_lock_release_recursive>:
 8006af0:	4770      	bx	lr
	...

08006af4 <__sflush_r>:
 8006af4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006afc:	0716      	lsls	r6, r2, #28
 8006afe:	4605      	mov	r5, r0
 8006b00:	460c      	mov	r4, r1
 8006b02:	d454      	bmi.n	8006bae <__sflush_r+0xba>
 8006b04:	684b      	ldr	r3, [r1, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	dc02      	bgt.n	8006b10 <__sflush_r+0x1c>
 8006b0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	dd48      	ble.n	8006ba2 <__sflush_r+0xae>
 8006b10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b12:	2e00      	cmp	r6, #0
 8006b14:	d045      	beq.n	8006ba2 <__sflush_r+0xae>
 8006b16:	2300      	movs	r3, #0
 8006b18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b1c:	682f      	ldr	r7, [r5, #0]
 8006b1e:	6a21      	ldr	r1, [r4, #32]
 8006b20:	602b      	str	r3, [r5, #0]
 8006b22:	d030      	beq.n	8006b86 <__sflush_r+0x92>
 8006b24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b26:	89a3      	ldrh	r3, [r4, #12]
 8006b28:	0759      	lsls	r1, r3, #29
 8006b2a:	d505      	bpl.n	8006b38 <__sflush_r+0x44>
 8006b2c:	6863      	ldr	r3, [r4, #4]
 8006b2e:	1ad2      	subs	r2, r2, r3
 8006b30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b32:	b10b      	cbz	r3, 8006b38 <__sflush_r+0x44>
 8006b34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b36:	1ad2      	subs	r2, r2, r3
 8006b38:	2300      	movs	r3, #0
 8006b3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b3c:	6a21      	ldr	r1, [r4, #32]
 8006b3e:	4628      	mov	r0, r5
 8006b40:	47b0      	blx	r6
 8006b42:	1c43      	adds	r3, r0, #1
 8006b44:	89a3      	ldrh	r3, [r4, #12]
 8006b46:	d106      	bne.n	8006b56 <__sflush_r+0x62>
 8006b48:	6829      	ldr	r1, [r5, #0]
 8006b4a:	291d      	cmp	r1, #29
 8006b4c:	d82b      	bhi.n	8006ba6 <__sflush_r+0xb2>
 8006b4e:	4a2a      	ldr	r2, [pc, #168]	@ (8006bf8 <__sflush_r+0x104>)
 8006b50:	40ca      	lsrs	r2, r1
 8006b52:	07d6      	lsls	r6, r2, #31
 8006b54:	d527      	bpl.n	8006ba6 <__sflush_r+0xb2>
 8006b56:	2200      	movs	r2, #0
 8006b58:	6062      	str	r2, [r4, #4]
 8006b5a:	04d9      	lsls	r1, r3, #19
 8006b5c:	6922      	ldr	r2, [r4, #16]
 8006b5e:	6022      	str	r2, [r4, #0]
 8006b60:	d504      	bpl.n	8006b6c <__sflush_r+0x78>
 8006b62:	1c42      	adds	r2, r0, #1
 8006b64:	d101      	bne.n	8006b6a <__sflush_r+0x76>
 8006b66:	682b      	ldr	r3, [r5, #0]
 8006b68:	b903      	cbnz	r3, 8006b6c <__sflush_r+0x78>
 8006b6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b6e:	602f      	str	r7, [r5, #0]
 8006b70:	b1b9      	cbz	r1, 8006ba2 <__sflush_r+0xae>
 8006b72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b76:	4299      	cmp	r1, r3
 8006b78:	d002      	beq.n	8006b80 <__sflush_r+0x8c>
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	f000 f8fc 	bl	8006d78 <_free_r>
 8006b80:	2300      	movs	r3, #0
 8006b82:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b84:	e00d      	b.n	8006ba2 <__sflush_r+0xae>
 8006b86:	2301      	movs	r3, #1
 8006b88:	4628      	mov	r0, r5
 8006b8a:	47b0      	blx	r6
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	1c50      	adds	r0, r2, #1
 8006b90:	d1c9      	bne.n	8006b26 <__sflush_r+0x32>
 8006b92:	682b      	ldr	r3, [r5, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d0c6      	beq.n	8006b26 <__sflush_r+0x32>
 8006b98:	2b1d      	cmp	r3, #29
 8006b9a:	d001      	beq.n	8006ba0 <__sflush_r+0xac>
 8006b9c:	2b16      	cmp	r3, #22
 8006b9e:	d11e      	bne.n	8006bde <__sflush_r+0xea>
 8006ba0:	602f      	str	r7, [r5, #0]
 8006ba2:	2000      	movs	r0, #0
 8006ba4:	e022      	b.n	8006bec <__sflush_r+0xf8>
 8006ba6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006baa:	b21b      	sxth	r3, r3
 8006bac:	e01b      	b.n	8006be6 <__sflush_r+0xf2>
 8006bae:	690f      	ldr	r7, [r1, #16]
 8006bb0:	2f00      	cmp	r7, #0
 8006bb2:	d0f6      	beq.n	8006ba2 <__sflush_r+0xae>
 8006bb4:	0793      	lsls	r3, r2, #30
 8006bb6:	680e      	ldr	r6, [r1, #0]
 8006bb8:	bf08      	it	eq
 8006bba:	694b      	ldreq	r3, [r1, #20]
 8006bbc:	600f      	str	r7, [r1, #0]
 8006bbe:	bf18      	it	ne
 8006bc0:	2300      	movne	r3, #0
 8006bc2:	eba6 0807 	sub.w	r8, r6, r7
 8006bc6:	608b      	str	r3, [r1, #8]
 8006bc8:	f1b8 0f00 	cmp.w	r8, #0
 8006bcc:	dde9      	ble.n	8006ba2 <__sflush_r+0xae>
 8006bce:	6a21      	ldr	r1, [r4, #32]
 8006bd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006bd2:	4643      	mov	r3, r8
 8006bd4:	463a      	mov	r2, r7
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	47b0      	blx	r6
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	dc08      	bgt.n	8006bf0 <__sflush_r+0xfc>
 8006bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006be6:	81a3      	strh	r3, [r4, #12]
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bf0:	4407      	add	r7, r0
 8006bf2:	eba8 0800 	sub.w	r8, r8, r0
 8006bf6:	e7e7      	b.n	8006bc8 <__sflush_r+0xd4>
 8006bf8:	20400001 	.word	0x20400001

08006bfc <_fflush_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	690b      	ldr	r3, [r1, #16]
 8006c00:	4605      	mov	r5, r0
 8006c02:	460c      	mov	r4, r1
 8006c04:	b913      	cbnz	r3, 8006c0c <_fflush_r+0x10>
 8006c06:	2500      	movs	r5, #0
 8006c08:	4628      	mov	r0, r5
 8006c0a:	bd38      	pop	{r3, r4, r5, pc}
 8006c0c:	b118      	cbz	r0, 8006c16 <_fflush_r+0x1a>
 8006c0e:	6a03      	ldr	r3, [r0, #32]
 8006c10:	b90b      	cbnz	r3, 8006c16 <_fflush_r+0x1a>
 8006c12:	f7ff ff03 	bl	8006a1c <__sinit>
 8006c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d0f3      	beq.n	8006c06 <_fflush_r+0xa>
 8006c1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c20:	07d0      	lsls	r0, r2, #31
 8006c22:	d404      	bmi.n	8006c2e <_fflush_r+0x32>
 8006c24:	0599      	lsls	r1, r3, #22
 8006c26:	d402      	bmi.n	8006c2e <_fflush_r+0x32>
 8006c28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c2a:	f7ff ff60 	bl	8006aee <__retarget_lock_acquire_recursive>
 8006c2e:	4628      	mov	r0, r5
 8006c30:	4621      	mov	r1, r4
 8006c32:	f7ff ff5f 	bl	8006af4 <__sflush_r>
 8006c36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c38:	07da      	lsls	r2, r3, #31
 8006c3a:	4605      	mov	r5, r0
 8006c3c:	d4e4      	bmi.n	8006c08 <_fflush_r+0xc>
 8006c3e:	89a3      	ldrh	r3, [r4, #12]
 8006c40:	059b      	lsls	r3, r3, #22
 8006c42:	d4e1      	bmi.n	8006c08 <_fflush_r+0xc>
 8006c44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c46:	f7ff ff53 	bl	8006af0 <__retarget_lock_release_recursive>
 8006c4a:	e7dd      	b.n	8006c08 <_fflush_r+0xc>

08006c4c <__malloc_lock>:
 8006c4c:	4801      	ldr	r0, [pc, #4]	@ (8006c54 <__malloc_lock+0x8>)
 8006c4e:	f7ff bf4e 	b.w	8006aee <__retarget_lock_acquire_recursive>
 8006c52:	bf00      	nop
 8006c54:	20025e00 	.word	0x20025e00

08006c58 <__malloc_unlock>:
 8006c58:	4801      	ldr	r0, [pc, #4]	@ (8006c60 <__malloc_unlock+0x8>)
 8006c5a:	f7ff bf49 	b.w	8006af0 <__retarget_lock_release_recursive>
 8006c5e:	bf00      	nop
 8006c60:	20025e00 	.word	0x20025e00

08006c64 <__sread>:
 8006c64:	b510      	push	{r4, lr}
 8006c66:	460c      	mov	r4, r1
 8006c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c6c:	f000 f850 	bl	8006d10 <_read_r>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	bfab      	itete	ge
 8006c74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c76:	89a3      	ldrhlt	r3, [r4, #12]
 8006c78:	181b      	addge	r3, r3, r0
 8006c7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c7e:	bfac      	ite	ge
 8006c80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c82:	81a3      	strhlt	r3, [r4, #12]
 8006c84:	bd10      	pop	{r4, pc}

08006c86 <__swrite>:
 8006c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c8a:	461f      	mov	r7, r3
 8006c8c:	898b      	ldrh	r3, [r1, #12]
 8006c8e:	05db      	lsls	r3, r3, #23
 8006c90:	4605      	mov	r5, r0
 8006c92:	460c      	mov	r4, r1
 8006c94:	4616      	mov	r6, r2
 8006c96:	d505      	bpl.n	8006ca4 <__swrite+0x1e>
 8006c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f000 f824 	bl	8006cec <_lseek_r>
 8006ca4:	89a3      	ldrh	r3, [r4, #12]
 8006ca6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006caa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cae:	81a3      	strh	r3, [r4, #12]
 8006cb0:	4632      	mov	r2, r6
 8006cb2:	463b      	mov	r3, r7
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cba:	f000 b83b 	b.w	8006d34 <_write_r>

08006cbe <__sseek>:
 8006cbe:	b510      	push	{r4, lr}
 8006cc0:	460c      	mov	r4, r1
 8006cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc6:	f000 f811 	bl	8006cec <_lseek_r>
 8006cca:	1c43      	adds	r3, r0, #1
 8006ccc:	89a3      	ldrh	r3, [r4, #12]
 8006cce:	bf15      	itete	ne
 8006cd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006cd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006cd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006cda:	81a3      	strheq	r3, [r4, #12]
 8006cdc:	bf18      	it	ne
 8006cde:	81a3      	strhne	r3, [r4, #12]
 8006ce0:	bd10      	pop	{r4, pc}

08006ce2 <__sclose>:
 8006ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce6:	f000 b837 	b.w	8006d58 <_close_r>
	...

08006cec <_lseek_r>:
 8006cec:	b538      	push	{r3, r4, r5, lr}
 8006cee:	4d07      	ldr	r5, [pc, #28]	@ (8006d0c <_lseek_r+0x20>)
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	4608      	mov	r0, r1
 8006cf4:	4611      	mov	r1, r2
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	602a      	str	r2, [r5, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f7ff fc25 	bl	800654a <_lseek>
 8006d00:	1c43      	adds	r3, r0, #1
 8006d02:	d102      	bne.n	8006d0a <_lseek_r+0x1e>
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	b103      	cbz	r3, 8006d0a <_lseek_r+0x1e>
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	bd38      	pop	{r3, r4, r5, pc}
 8006d0c:	20025e08 	.word	0x20025e08

08006d10 <_read_r>:
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	4d07      	ldr	r5, [pc, #28]	@ (8006d30 <_read_r+0x20>)
 8006d14:	4604      	mov	r4, r0
 8006d16:	4608      	mov	r0, r1
 8006d18:	4611      	mov	r1, r2
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	602a      	str	r2, [r5, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f7ff fbbd 	bl	800649e <_read>
 8006d24:	1c43      	adds	r3, r0, #1
 8006d26:	d102      	bne.n	8006d2e <_read_r+0x1e>
 8006d28:	682b      	ldr	r3, [r5, #0]
 8006d2a:	b103      	cbz	r3, 8006d2e <_read_r+0x1e>
 8006d2c:	6023      	str	r3, [r4, #0]
 8006d2e:	bd38      	pop	{r3, r4, r5, pc}
 8006d30:	20025e08 	.word	0x20025e08

08006d34 <_write_r>:
 8006d34:	b538      	push	{r3, r4, r5, lr}
 8006d36:	4d07      	ldr	r5, [pc, #28]	@ (8006d54 <_write_r+0x20>)
 8006d38:	4604      	mov	r4, r0
 8006d3a:	4608      	mov	r0, r1
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	2200      	movs	r2, #0
 8006d40:	602a      	str	r2, [r5, #0]
 8006d42:	461a      	mov	r2, r3
 8006d44:	f7ff fc13 	bl	800656e <_write>
 8006d48:	1c43      	adds	r3, r0, #1
 8006d4a:	d102      	bne.n	8006d52 <_write_r+0x1e>
 8006d4c:	682b      	ldr	r3, [r5, #0]
 8006d4e:	b103      	cbz	r3, 8006d52 <_write_r+0x1e>
 8006d50:	6023      	str	r3, [r4, #0]
 8006d52:	bd38      	pop	{r3, r4, r5, pc}
 8006d54:	20025e08 	.word	0x20025e08

08006d58 <_close_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	4d06      	ldr	r5, [pc, #24]	@ (8006d74 <_close_r+0x1c>)
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	4604      	mov	r4, r0
 8006d60:	4608      	mov	r0, r1
 8006d62:	602b      	str	r3, [r5, #0]
 8006d64:	f7ff fc30 	bl	80065c8 <_close>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d102      	bne.n	8006d72 <_close_r+0x1a>
 8006d6c:	682b      	ldr	r3, [r5, #0]
 8006d6e:	b103      	cbz	r3, 8006d72 <_close_r+0x1a>
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	20025e08 	.word	0x20025e08

08006d78 <_free_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	2900      	cmp	r1, #0
 8006d7e:	d041      	beq.n	8006e04 <_free_r+0x8c>
 8006d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d84:	1f0c      	subs	r4, r1, #4
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	bfb8      	it	lt
 8006d8a:	18e4      	addlt	r4, r4, r3
 8006d8c:	f7ff ff5e 	bl	8006c4c <__malloc_lock>
 8006d90:	4a1d      	ldr	r2, [pc, #116]	@ (8006e08 <_free_r+0x90>)
 8006d92:	6813      	ldr	r3, [r2, #0]
 8006d94:	b933      	cbnz	r3, 8006da4 <_free_r+0x2c>
 8006d96:	6063      	str	r3, [r4, #4]
 8006d98:	6014      	str	r4, [r2, #0]
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006da0:	f7ff bf5a 	b.w	8006c58 <__malloc_unlock>
 8006da4:	42a3      	cmp	r3, r4
 8006da6:	d908      	bls.n	8006dba <_free_r+0x42>
 8006da8:	6820      	ldr	r0, [r4, #0]
 8006daa:	1821      	adds	r1, r4, r0
 8006dac:	428b      	cmp	r3, r1
 8006dae:	bf01      	itttt	eq
 8006db0:	6819      	ldreq	r1, [r3, #0]
 8006db2:	685b      	ldreq	r3, [r3, #4]
 8006db4:	1809      	addeq	r1, r1, r0
 8006db6:	6021      	streq	r1, [r4, #0]
 8006db8:	e7ed      	b.n	8006d96 <_free_r+0x1e>
 8006dba:	461a      	mov	r2, r3
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	b10b      	cbz	r3, 8006dc4 <_free_r+0x4c>
 8006dc0:	42a3      	cmp	r3, r4
 8006dc2:	d9fa      	bls.n	8006dba <_free_r+0x42>
 8006dc4:	6811      	ldr	r1, [r2, #0]
 8006dc6:	1850      	adds	r0, r2, r1
 8006dc8:	42a0      	cmp	r0, r4
 8006dca:	d10b      	bne.n	8006de4 <_free_r+0x6c>
 8006dcc:	6820      	ldr	r0, [r4, #0]
 8006dce:	4401      	add	r1, r0
 8006dd0:	1850      	adds	r0, r2, r1
 8006dd2:	4283      	cmp	r3, r0
 8006dd4:	6011      	str	r1, [r2, #0]
 8006dd6:	d1e0      	bne.n	8006d9a <_free_r+0x22>
 8006dd8:	6818      	ldr	r0, [r3, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	6053      	str	r3, [r2, #4]
 8006dde:	4408      	add	r0, r1
 8006de0:	6010      	str	r0, [r2, #0]
 8006de2:	e7da      	b.n	8006d9a <_free_r+0x22>
 8006de4:	d902      	bls.n	8006dec <_free_r+0x74>
 8006de6:	230c      	movs	r3, #12
 8006de8:	602b      	str	r3, [r5, #0]
 8006dea:	e7d6      	b.n	8006d9a <_free_r+0x22>
 8006dec:	6820      	ldr	r0, [r4, #0]
 8006dee:	1821      	adds	r1, r4, r0
 8006df0:	428b      	cmp	r3, r1
 8006df2:	bf04      	itt	eq
 8006df4:	6819      	ldreq	r1, [r3, #0]
 8006df6:	685b      	ldreq	r3, [r3, #4]
 8006df8:	6063      	str	r3, [r4, #4]
 8006dfa:	bf04      	itt	eq
 8006dfc:	1809      	addeq	r1, r1, r0
 8006dfe:	6021      	streq	r1, [r4, #0]
 8006e00:	6054      	str	r4, [r2, #4]
 8006e02:	e7ca      	b.n	8006d9a <_free_r+0x22>
 8006e04:	bd38      	pop	{r3, r4, r5, pc}
 8006e06:	bf00      	nop
 8006e08:	20025e04 	.word	0x20025e04

08006e0c <_init>:
 8006e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0e:	bf00      	nop
 8006e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e12:	bc08      	pop	{r3}
 8006e14:	469e      	mov	lr, r3
 8006e16:	4770      	bx	lr

08006e18 <_fini>:
 8006e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1a:	bf00      	nop
 8006e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1e:	bc08      	pop	{r3}
 8006e20:	469e      	mov	lr, r3
 8006e22:	4770      	bx	lr
