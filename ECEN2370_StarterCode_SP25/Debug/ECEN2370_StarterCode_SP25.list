
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005728  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e8  080058d4  080058d4  000068d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006abc  08006abc  0000801c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006abc  08006abc  00007abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ac4  08006ac4  0000801c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ac4  08006ac4  00007ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ac8  08006ac8  00007ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08006acc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000801c  2**0
                  CONTENTS
 10 .bss          00025b64  2000001c  2000001c  0000801c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025b80  20025b80  0000801c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000801c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f55  00000000  00000000  0000804c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fc9  00000000  00000000  0001afa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  0001df70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f29  00000000  00000000  0001f318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026ebe  00000000  00000000  00020241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000173d5  00000000  00000000  000470ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2a84  00000000  00000000  0005e4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00140f58  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005248  00000000  00000000  00140f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a3  00000000  00000000  001461e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080058bc 	.word	0x080058bc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	080058bc 	.word	0x080058bc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 800051c:	f001 fda4 	bl	8002068 <initialise_monitor_handles>
    LTCD__Init();
 8000520:	f000 f958 	bl	80007d4 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000524:	2000      	movs	r0, #0
 8000526:	f000 f915 	bl	8000754 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 800052a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800052e:	2000      	movs	r0, #0
 8000530:	f000 f9cc 	bl	80008cc <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 8000534:	f000 faa2 	bl	8000a7c <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 8000538:	4b02      	ldr	r3, [pc, #8]	@ (8000544 <ApplicationInit+0x2c>)
 800053a:	2201      	movs	r2, #1
 800053c:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000038 	.word	0x20000038

08000548 <ApplicationFirstScreen>:
void ApplicationFirstScreen(){
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	firstScreen();
 800054c:	f000 f802 	bl	8000554 <firstScreen>
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}

08000554 <firstScreen>:
#define ROWS 6
#define COLS 7

char board[ROWS][COLS];

void firstScreen(void){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLUE);
 8000558:	211f      	movs	r1, #31
 800055a:	2000      	movs	r0, #0
 800055c:	f000 f9b6 	bl	80008cc <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000560:	2000      	movs	r0, #0
 8000562:	f000 f9d5 	bl	8000910 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000566:	4816      	ldr	r0, [pc, #88]	@ (80005c0 <firstScreen+0x6c>)
 8000568:	f000 f9e2 	bl	8000930 <LCD_SetFont>
	LCD_DisplayChar(100,140,'C');
 800056c:	2243      	movs	r2, #67	@ 0x43
 800056e:	218c      	movs	r1, #140	@ 0x8c
 8000570:	2064      	movs	r0, #100	@ 0x64
 8000572:	f000 fa5b 	bl	8000a2c <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'o');
 8000576:	226f      	movs	r2, #111	@ 0x6f
 8000578:	218c      	movs	r1, #140	@ 0x8c
 800057a:	2073      	movs	r0, #115	@ 0x73
 800057c:	f000 fa56 	bl	8000a2c <LCD_DisplayChar>
	LCD_DisplayChar(125,140,'n');
 8000580:	226e      	movs	r2, #110	@ 0x6e
 8000582:	218c      	movs	r1, #140	@ 0x8c
 8000584:	207d      	movs	r0, #125	@ 0x7d
 8000586:	f000 fa51 	bl	8000a2c <LCD_DisplayChar>
	LCD_DisplayChar(135,140,'n');
 800058a:	226e      	movs	r2, #110	@ 0x6e
 800058c:	218c      	movs	r1, #140	@ 0x8c
 800058e:	2087      	movs	r0, #135	@ 0x87
 8000590:	f000 fa4c 	bl	8000a2c <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'e');
 8000594:	2265      	movs	r2, #101	@ 0x65
 8000596:	218c      	movs	r1, #140	@ 0x8c
 8000598:	2091      	movs	r0, #145	@ 0x91
 800059a:	f000 fa47 	bl	8000a2c <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'c');
 800059e:	2263      	movs	r2, #99	@ 0x63
 80005a0:	218c      	movs	r1, #140	@ 0x8c
 80005a2:	209b      	movs	r0, #155	@ 0x9b
 80005a4:	f000 fa42 	bl	8000a2c <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'t');
 80005a8:	2274      	movs	r2, #116	@ 0x74
 80005aa:	218c      	movs	r1, #140	@ 0x8c
 80005ac:	20a5      	movs	r0, #165	@ 0xa5
 80005ae:	f000 fa3d 	bl	8000a2c <LCD_DisplayChar>
	LCD_DisplayChar(190,140,'4');
 80005b2:	2234      	movs	r2, #52	@ 0x34
 80005b4:	218c      	movs	r1, #140	@ 0x8c
 80005b6:	20be      	movs	r0, #190	@ 0xbe
 80005b8:	f000 fa38 	bl	8000a2c <LCD_DisplayChar>

}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000004 	.word	0x20000004

080005c4 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08c      	sub	sp, #48	@ 0x30
 80005c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
 80005ce:	4b5a      	ldr	r3, [pc, #360]	@ (8000738 <LCD_GPIO_Init+0x174>)
 80005d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005d2:	4a59      	ldr	r2, [pc, #356]	@ (8000738 <LCD_GPIO_Init+0x174>)
 80005d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80005d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80005da:	4b57      	ldr	r3, [pc, #348]	@ (8000738 <LCD_GPIO_Init+0x174>)
 80005dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80005e2:	61bb      	str	r3, [r7, #24]
 80005e4:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
 80005ea:	4b53      	ldr	r3, [pc, #332]	@ (8000738 <LCD_GPIO_Init+0x174>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	4a52      	ldr	r2, [pc, #328]	@ (8000738 <LCD_GPIO_Init+0x174>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f6:	4b50      	ldr	r3, [pc, #320]	@ (8000738 <LCD_GPIO_Init+0x174>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
 8000606:	4b4c      	ldr	r3, [pc, #304]	@ (8000738 <LCD_GPIO_Init+0x174>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	4a4b      	ldr	r2, [pc, #300]	@ (8000738 <LCD_GPIO_Init+0x174>)
 800060c:	f043 0302 	orr.w	r3, r3, #2
 8000610:	6313      	str	r3, [r2, #48]	@ 0x30
 8000612:	4b49      	ldr	r3, [pc, #292]	@ (8000738 <LCD_GPIO_Init+0x174>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	f003 0302 	and.w	r3, r3, #2
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	4b45      	ldr	r3, [pc, #276]	@ (8000738 <LCD_GPIO_Init+0x174>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	4a44      	ldr	r2, [pc, #272]	@ (8000738 <LCD_GPIO_Init+0x174>)
 8000628:	f043 0304 	orr.w	r3, r3, #4
 800062c:	6313      	str	r3, [r2, #48]	@ 0x30
 800062e:	4b42      	ldr	r3, [pc, #264]	@ (8000738 <LCD_GPIO_Init+0x174>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	f003 0304 	and.w	r3, r3, #4
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	4b3e      	ldr	r3, [pc, #248]	@ (8000738 <LCD_GPIO_Init+0x174>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	4a3d      	ldr	r2, [pc, #244]	@ (8000738 <LCD_GPIO_Init+0x174>)
 8000644:	f043 0308 	orr.w	r3, r3, #8
 8000648:	6313      	str	r3, [r2, #48]	@ 0x30
 800064a:	4b3b      	ldr	r3, [pc, #236]	@ (8000738 <LCD_GPIO_Init+0x174>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	f003 0308 	and.w	r3, r3, #8
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b37      	ldr	r3, [pc, #220]	@ (8000738 <LCD_GPIO_Init+0x174>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	4a36      	ldr	r2, [pc, #216]	@ (8000738 <LCD_GPIO_Init+0x174>)
 8000660:	f043 0320 	orr.w	r3, r3, #32
 8000664:	6313      	str	r3, [r2, #48]	@ 0x30
 8000666:	4b34      	ldr	r3, [pc, #208]	@ (8000738 <LCD_GPIO_Init+0x174>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	f003 0320 	and.w	r3, r3, #32
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	4b30      	ldr	r3, [pc, #192]	@ (8000738 <LCD_GPIO_Init+0x174>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	4a2f      	ldr	r2, [pc, #188]	@ (8000738 <LCD_GPIO_Init+0x174>)
 800067c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000680:	6313      	str	r3, [r2, #48]	@ 0x30
 8000682:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <LCD_GPIO_Init+0x174>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800068e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000692:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800069c:	2302      	movs	r3, #2
 800069e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80006a0:	230e      	movs	r3, #14
 80006a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4619      	mov	r1, r3
 80006aa:	4824      	ldr	r0, [pc, #144]	@ (800073c <LCD_GPIO_Init+0x178>)
 80006ac:	f001 fe9c 	bl	80023e8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80006b0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80006b4:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	4619      	mov	r1, r3
 80006bc:	4820      	ldr	r0, [pc, #128]	@ (8000740 <LCD_GPIO_Init+0x17c>)
 80006be:	f001 fe93 	bl	80023e8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80006c2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80006c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	481d      	ldr	r0, [pc, #116]	@ (8000744 <LCD_GPIO_Init+0x180>)
 80006d0:	f001 fe8a 	bl	80023e8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80006d4:	2348      	movs	r3, #72	@ 0x48
 80006d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	481a      	ldr	r0, [pc, #104]	@ (8000748 <LCD_GPIO_Init+0x184>)
 80006e0:	f001 fe82 	bl	80023e8 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80006e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4619      	mov	r1, r3
 80006f0:	4816      	ldr	r0, [pc, #88]	@ (800074c <LCD_GPIO_Init+0x188>)
 80006f2:	f001 fe79 	bl	80023e8 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80006f6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80006fa:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4619      	mov	r1, r3
 8000702:	4813      	ldr	r0, [pc, #76]	@ (8000750 <LCD_GPIO_Init+0x18c>)
 8000704:	f001 fe70 	bl	80023e8 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000708:	2303      	movs	r3, #3
 800070a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800070c:	2309      	movs	r3, #9
 800070e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4619      	mov	r1, r3
 8000716:	480a      	ldr	r0, [pc, #40]	@ (8000740 <LCD_GPIO_Init+0x17c>)
 8000718:	f001 fe66 	bl	80023e8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800071c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	4809      	ldr	r0, [pc, #36]	@ (8000750 <LCD_GPIO_Init+0x18c>)
 800072a:	f001 fe5d 	bl	80023e8 <HAL_GPIO_Init>
}
 800072e:	bf00      	nop
 8000730:	3730      	adds	r7, #48	@ 0x30
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	40020000 	.word	0x40020000
 8000740:	40020400 	.word	0x40020400
 8000744:	40020800 	.word	0x40020800
 8000748:	40020c00 	.word	0x40020c00
 800074c:	40021400 	.word	0x40021400
 8000750:	40021800 	.word	0x40021800

08000754 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b090      	sub	sp, #64	@ 0x40
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000762:	23f0      	movs	r3, #240	@ 0xf0
 8000764:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800076a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800076e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000770:	2302      	movs	r3, #2
 8000772:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000774:	23ff      	movs	r3, #255	@ 0xff
 8000776:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800077c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000780:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000782:	2305      	movs	r3, #5
 8000784:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d101      	bne.n	8000790 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 800078c:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <LTCD_Layer_Init+0x78>)
 800078e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000790:	23f0      	movs	r3, #240	@ 0xf0
 8000792:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000794:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000798:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80007ac:	79fa      	ldrb	r2, [r7, #7]
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	4619      	mov	r1, r3
 80007b4:	4806      	ldr	r0, [pc, #24]	@ (80007d0 <LTCD_Layer_Init+0x7c>)
 80007b6:	f003 fa59 	bl	8003c6c <HAL_LTDC_ConfigLayer>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80007c0:	f000 f956 	bl	8000a70 <LCD_Error_Handler>
	}
}
 80007c4:	bf00      	nop
 80007c6:	3740      	adds	r7, #64	@ 0x40
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	2000011c 	.word	0x2000011c
 80007d0:	20000040 	.word	0x20000040

080007d4 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80007d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000884 <LTCD__Init+0xb0>)
 80007da:	4a2b      	ldr	r2, [pc, #172]	@ (8000888 <LTCD__Init+0xb4>)
 80007dc:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80007de:	4b29      	ldr	r3, [pc, #164]	@ (8000884 <LTCD__Init+0xb0>)
 80007e0:	2209      	movs	r2, #9
 80007e2:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80007e4:	4b27      	ldr	r3, [pc, #156]	@ (8000884 <LTCD__Init+0xb0>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80007ea:	4b26      	ldr	r3, [pc, #152]	@ (8000884 <LTCD__Init+0xb0>)
 80007ec:	221d      	movs	r2, #29
 80007ee:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80007f0:	4b24      	ldr	r3, [pc, #144]	@ (8000884 <LTCD__Init+0xb0>)
 80007f2:	2203      	movs	r2, #3
 80007f4:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80007f6:	4b23      	ldr	r3, [pc, #140]	@ (8000884 <LTCD__Init+0xb0>)
 80007f8:	f240 120d 	movw	r2, #269	@ 0x10d
 80007fc:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80007fe:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <LTCD__Init+0xb0>)
 8000800:	f240 1243 	movw	r2, #323	@ 0x143
 8000804:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000806:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <LTCD__Init+0xb0>)
 8000808:	f240 1217 	movw	r2, #279	@ 0x117
 800080c:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800080e:	4b1d      	ldr	r3, [pc, #116]	@ (8000884 <LTCD__Init+0xb0>)
 8000810:	f240 1247 	movw	r2, #327	@ 0x147
 8000814:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000816:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <LTCD__Init+0xb0>)
 8000818:	2200      	movs	r2, #0
 800081a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800081e:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <LTCD__Init+0xb0>)
 8000820:	2200      	movs	r2, #0
 8000822:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000826:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <LTCD__Init+0xb0>)
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800082e:	4b17      	ldr	r3, [pc, #92]	@ (800088c <LTCD__Init+0xb8>)
 8000830:	2208      	movs	r2, #8
 8000832:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000834:	4b15      	ldr	r3, [pc, #84]	@ (800088c <LTCD__Init+0xb8>)
 8000836:	22c0      	movs	r2, #192	@ 0xc0
 8000838:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800083a:	4b14      	ldr	r3, [pc, #80]	@ (800088c <LTCD__Init+0xb8>)
 800083c:	2204      	movs	r2, #4
 800083e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <LTCD__Init+0xb8>)
 8000842:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000846:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000848:	4810      	ldr	r0, [pc, #64]	@ (800088c <LTCD__Init+0xb8>)
 800084a:	f004 f869 	bl	8004920 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800084e:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <LTCD__Init+0xb0>)
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000854:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <LTCD__Init+0xb0>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800085a:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <LTCD__Init+0xb0>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000860:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <LTCD__Init+0xb0>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000866:	f7ff fead 	bl	80005c4 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800086a:	4806      	ldr	r0, [pc, #24]	@ (8000884 <LTCD__Init+0xb0>)
 800086c:	f003 f92e 	bl	8003acc <HAL_LTDC_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000876:	f000 f8fb 	bl	8000a70 <LCD_Error_Handler>
	 }

	ili9341_Init();
 800087a:	f000 f90a 	bl	8000a92 <ili9341_Init>
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000040 	.word	0x20000040
 8000888:	40016800 	.word	0x40016800
 800088c:	200000e8 	.word	0x200000e8

08000890 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
 800089a:	460b      	mov	r3, r1
 800089c:	80bb      	strh	r3, [r7, #4]
 800089e:	4613      	mov	r3, r2
 80008a0:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80008a2:	88ba      	ldrh	r2, [r7, #4]
 80008a4:	4613      	mov	r3, r2
 80008a6:	011b      	lsls	r3, r3, #4
 80008a8:	1a9b      	subs	r3, r3, r2
 80008aa:	011b      	lsls	r3, r3, #4
 80008ac:	461a      	mov	r2, r3
 80008ae:	88fb      	ldrh	r3, [r7, #6]
 80008b0:	4413      	add	r3, r2
 80008b2:	4905      	ldr	r1, [pc, #20]	@ (80008c8 <LCD_Draw_Pixel+0x38>)
 80008b4:	887a      	ldrh	r2, [r7, #2]
 80008b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	2000011c 	.word	0x2000011c

080008cc <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	460a      	mov	r2, r1
 80008d6:	71fb      	strb	r3, [r7, #7]
 80008d8:	4613      	mov	r3, r2
 80008da:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d10e      	bne.n	8000900 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	e007      	b.n	80008f8 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80008e8:	4908      	ldr	r1, [pc, #32]	@ (800090c <LCD_Clear+0x40>)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	88ba      	ldrh	r2, [r7, #4]
 80008ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3301      	adds	r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80008fe:	d3f3      	bcc.n	80008e8 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000900:	bf00      	nop
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	2000011c 	.word	0x2000011c

08000910 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 800091a:	4a04      	ldr	r2, [pc, #16]	@ (800092c <LCD_SetTextColor+0x1c>)
 800091c:	88fb      	ldrh	r3, [r7, #6]
 800091e:	8013      	strh	r3, [r2, #0]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	20000000 	.word	0x20000000

08000930 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000938:	4a04      	ldr	r2, [pc, #16]	@ (800094c <LCD_SetFont+0x1c>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000118 	.word	0x20000118

08000950 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	603a      	str	r2, [r7, #0]
 800095a:	80fb      	strh	r3, [r7, #6]
 800095c:	460b      	mov	r3, r1
 800095e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	e04c      	b.n	8000a08 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	e03f      	b.n	80009f4 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	683a      	ldr	r2, [r7, #0]
 800097a:	4413      	add	r3, r2
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	4619      	mov	r1, r3
 8000980:	4b27      	ldr	r3, [pc, #156]	@ (8000a20 <LCD_Draw_Char+0xd0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	889b      	ldrh	r3, [r3, #4]
 8000986:	4a27      	ldr	r2, [pc, #156]	@ (8000a24 <LCD_Draw_Char+0xd4>)
 8000988:	fba2 2303 	umull	r2, r3, r2, r3
 800098c:	08db      	lsrs	r3, r3, #3
 800098e:	b29b      	uxth	r3, r3
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	2280      	movs	r2, #128	@ 0x80
 8000994:	409a      	lsls	r2, r3
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	fa42 f303 	asr.w	r3, r2, r3
 800099c:	400b      	ands	r3, r1
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d104      	bne.n	80009ac <LCD_Draw_Char+0x5c>
 80009a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a20 <LCD_Draw_Char+0xd0>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	889b      	ldrh	r3, [r3, #4]
 80009a8:	2b0c      	cmp	r3, #12
 80009aa:	d920      	bls.n	80009ee <LCD_Draw_Char+0x9e>
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	4413      	add	r3, r2
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	fa42 f303 	asr.w	r3, r2, r3
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d104      	bne.n	80009d0 <LCD_Draw_Char+0x80>
 80009c6:	4b16      	ldr	r3, [pc, #88]	@ (8000a20 <LCD_Draw_Char+0xd0>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	889b      	ldrh	r3, [r3, #4]
 80009cc:	2b0c      	cmp	r3, #12
 80009ce:	d80e      	bhi.n	80009ee <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	88fb      	ldrh	r3, [r7, #6]
 80009d6:	4413      	add	r3, r2
 80009d8:	b298      	uxth	r0, r3
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	b29a      	uxth	r2, r3
 80009de:	88bb      	ldrh	r3, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	4a10      	ldr	r2, [pc, #64]	@ (8000a28 <LCD_Draw_Char+0xd8>)
 80009e6:	8812      	ldrh	r2, [r2, #0]
 80009e8:	4619      	mov	r1, r3
 80009ea:	f7ff ff51 	bl	8000890 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	3301      	adds	r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <LCD_Draw_Char+0xd0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	889b      	ldrh	r3, [r3, #4]
 80009fa:	461a      	mov	r2, r3
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d3b8      	bcc.n	8000974 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	3301      	adds	r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	4b05      	ldr	r3, [pc, #20]	@ (8000a20 <LCD_Draw_Char+0xd0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	88db      	ldrh	r3, [r3, #6]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d3ab      	bcc.n	800096e <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000a16:	bf00      	nop
 8000a18:	bf00      	nop
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000118 	.word	0x20000118
 8000a24:	aaaaaaab 	.word	0xaaaaaaab
 8000a28:	20000000 	.word	0x20000000

08000a2c <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	80fb      	strh	r3, [r7, #6]
 8000a36:	460b      	mov	r3, r1
 8000a38:	80bb      	strh	r3, [r7, #4]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000a3e:	78fb      	ldrb	r3, [r7, #3]
 8000a40:	3b20      	subs	r3, #32
 8000a42:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000a44:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <LCD_DisplayChar+0x40>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	78fb      	ldrb	r3, [r7, #3]
 8000a4c:	4907      	ldr	r1, [pc, #28]	@ (8000a6c <LCD_DisplayChar+0x40>)
 8000a4e:	6809      	ldr	r1, [r1, #0]
 8000a50:	88c9      	ldrh	r1, [r1, #6]
 8000a52:	fb01 f303 	mul.w	r3, r1, r3
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	441a      	add	r2, r3
 8000a5a:	88b9      	ldrh	r1, [r7, #4]
 8000a5c:	88fb      	ldrh	r3, [r7, #6]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ff76 	bl	8000950 <LCD_Draw_Char>
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000118 	.word	0x20000118

08000a70 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <LCD_Error_Handler+0x8>

08000a7c <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000a80:	f001 f925 	bl	8001cce <STMPE811_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d001      	beq.n	8000a8e <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000a8a:	bf00      	nop
 8000a8c:	e7fd      	b.n	8000a8a <InitializeLCDTouch+0xe>
  }
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000a96:	f000 f9ff 	bl	8000e98 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000a9a:	20ca      	movs	r0, #202	@ 0xca
 8000a9c:	f000 f943 	bl	8000d26 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000aa0:	20c3      	movs	r0, #195	@ 0xc3
 8000aa2:	f000 f94d 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000aa6:	2008      	movs	r0, #8
 8000aa8:	f000 f94a 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000aac:	2050      	movs	r0, #80	@ 0x50
 8000aae:	f000 f947 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000ab2:	20cf      	movs	r0, #207	@ 0xcf
 8000ab4:	f000 f937 	bl	8000d26 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f000 f941 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000abe:	20c1      	movs	r0, #193	@ 0xc1
 8000ac0:	f000 f93e 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000ac4:	2030      	movs	r0, #48	@ 0x30
 8000ac6:	f000 f93b 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000aca:	20ed      	movs	r0, #237	@ 0xed
 8000acc:	f000 f92b 	bl	8000d26 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000ad0:	2064      	movs	r0, #100	@ 0x64
 8000ad2:	f000 f935 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000ad6:	2003      	movs	r0, #3
 8000ad8:	f000 f932 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000adc:	2012      	movs	r0, #18
 8000ade:	f000 f92f 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000ae2:	2081      	movs	r0, #129	@ 0x81
 8000ae4:	f000 f92c 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000ae8:	20e8      	movs	r0, #232	@ 0xe8
 8000aea:	f000 f91c 	bl	8000d26 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000aee:	2085      	movs	r0, #133	@ 0x85
 8000af0:	f000 f926 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000af4:	2000      	movs	r0, #0
 8000af6:	f000 f923 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000afa:	2078      	movs	r0, #120	@ 0x78
 8000afc:	f000 f920 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000b00:	20cb      	movs	r0, #203	@ 0xcb
 8000b02:	f000 f910 	bl	8000d26 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000b06:	2039      	movs	r0, #57	@ 0x39
 8000b08:	f000 f91a 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000b0c:	202c      	movs	r0, #44	@ 0x2c
 8000b0e:	f000 f917 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000b12:	2000      	movs	r0, #0
 8000b14:	f000 f914 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000b18:	2034      	movs	r0, #52	@ 0x34
 8000b1a:	f000 f911 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000b1e:	2002      	movs	r0, #2
 8000b20:	f000 f90e 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000b24:	20f7      	movs	r0, #247	@ 0xf7
 8000b26:	f000 f8fe 	bl	8000d26 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000b2a:	2020      	movs	r0, #32
 8000b2c:	f000 f908 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000b30:	20ea      	movs	r0, #234	@ 0xea
 8000b32:	f000 f8f8 	bl	8000d26 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000b36:	2000      	movs	r0, #0
 8000b38:	f000 f902 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f000 f8ff 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000b42:	20b1      	movs	r0, #177	@ 0xb1
 8000b44:	f000 f8ef 	bl	8000d26 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f000 f8f9 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000b4e:	201b      	movs	r0, #27
 8000b50:	f000 f8f6 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000b54:	20b6      	movs	r0, #182	@ 0xb6
 8000b56:	f000 f8e6 	bl	8000d26 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000b5a:	200a      	movs	r0, #10
 8000b5c:	f000 f8f0 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8000b60:	20a2      	movs	r0, #162	@ 0xa2
 8000b62:	f000 f8ed 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8000b66:	20c0      	movs	r0, #192	@ 0xc0
 8000b68:	f000 f8dd 	bl	8000d26 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000b6c:	2010      	movs	r0, #16
 8000b6e:	f000 f8e7 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8000b72:	20c1      	movs	r0, #193	@ 0xc1
 8000b74:	f000 f8d7 	bl	8000d26 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000b78:	2010      	movs	r0, #16
 8000b7a:	f000 f8e1 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8000b7e:	20c5      	movs	r0, #197	@ 0xc5
 8000b80:	f000 f8d1 	bl	8000d26 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8000b84:	2045      	movs	r0, #69	@ 0x45
 8000b86:	f000 f8db 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8000b8a:	2015      	movs	r0, #21
 8000b8c:	f000 f8d8 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8000b90:	20c7      	movs	r0, #199	@ 0xc7
 8000b92:	f000 f8c8 	bl	8000d26 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8000b96:	2090      	movs	r0, #144	@ 0x90
 8000b98:	f000 f8d2 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8000b9c:	2036      	movs	r0, #54	@ 0x36
 8000b9e:	f000 f8c2 	bl	8000d26 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8000ba2:	20c8      	movs	r0, #200	@ 0xc8
 8000ba4:	f000 f8cc 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8000ba8:	20f2      	movs	r0, #242	@ 0xf2
 8000baa:	f000 f8bc 	bl	8000d26 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f000 f8c6 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8000bb4:	20b0      	movs	r0, #176	@ 0xb0
 8000bb6:	f000 f8b6 	bl	8000d26 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8000bba:	20c2      	movs	r0, #194	@ 0xc2
 8000bbc:	f000 f8c0 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000bc0:	20b6      	movs	r0, #182	@ 0xb6
 8000bc2:	f000 f8b0 	bl	8000d26 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000bc6:	200a      	movs	r0, #10
 8000bc8:	f000 f8ba 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8000bcc:	20a7      	movs	r0, #167	@ 0xa7
 8000bce:	f000 f8b7 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8000bd2:	2027      	movs	r0, #39	@ 0x27
 8000bd4:	f000 f8b4 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000bd8:	2004      	movs	r0, #4
 8000bda:	f000 f8b1 	bl	8000d40 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8000bde:	202a      	movs	r0, #42	@ 0x2a
 8000be0:	f000 f8a1 	bl	8000d26 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000be4:	2000      	movs	r0, #0
 8000be6:	f000 f8ab 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f000 f8a8 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f000 f8a5 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8000bf6:	20ef      	movs	r0, #239	@ 0xef
 8000bf8:	f000 f8a2 	bl	8000d40 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8000bfc:	202b      	movs	r0, #43	@ 0x2b
 8000bfe:	f000 f892 	bl	8000d26 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000c02:	2000      	movs	r0, #0
 8000c04:	f000 f89c 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f000 f899 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f000 f896 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8000c14:	203f      	movs	r0, #63	@ 0x3f
 8000c16:	f000 f893 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8000c1a:	20f6      	movs	r0, #246	@ 0xf6
 8000c1c:	f000 f883 	bl	8000d26 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f000 f88d 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000c26:	2000      	movs	r0, #0
 8000c28:	f000 f88a 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8000c2c:	2006      	movs	r0, #6
 8000c2e:	f000 f887 	bl	8000d40 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8000c32:	202c      	movs	r0, #44	@ 0x2c
 8000c34:	f000 f877 	bl	8000d26 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000c38:	20c8      	movs	r0, #200	@ 0xc8
 8000c3a:	f000 f9e9 	bl	8001010 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8000c3e:	2026      	movs	r0, #38	@ 0x26
 8000c40:	f000 f871 	bl	8000d26 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f000 f87b 	bl	8000d40 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8000c4a:	20e0      	movs	r0, #224	@ 0xe0
 8000c4c:	f000 f86b 	bl	8000d26 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8000c50:	200f      	movs	r0, #15
 8000c52:	f000 f875 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8000c56:	2029      	movs	r0, #41	@ 0x29
 8000c58:	f000 f872 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8000c5c:	2024      	movs	r0, #36	@ 0x24
 8000c5e:	f000 f86f 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000c62:	200c      	movs	r0, #12
 8000c64:	f000 f86c 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8000c68:	200e      	movs	r0, #14
 8000c6a:	f000 f869 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000c6e:	2009      	movs	r0, #9
 8000c70:	f000 f866 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8000c74:	204e      	movs	r0, #78	@ 0x4e
 8000c76:	f000 f863 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000c7a:	2078      	movs	r0, #120	@ 0x78
 8000c7c:	f000 f860 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8000c80:	203c      	movs	r0, #60	@ 0x3c
 8000c82:	f000 f85d 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000c86:	2009      	movs	r0, #9
 8000c88:	f000 f85a 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8000c8c:	2013      	movs	r0, #19
 8000c8e:	f000 f857 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000c92:	2005      	movs	r0, #5
 8000c94:	f000 f854 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8000c98:	2017      	movs	r0, #23
 8000c9a:	f000 f851 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000c9e:	2011      	movs	r0, #17
 8000ca0:	f000 f84e 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f000 f84b 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8000caa:	20e1      	movs	r0, #225	@ 0xe1
 8000cac:	f000 f83b 	bl	8000d26 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f000 f845 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8000cb6:	2016      	movs	r0, #22
 8000cb8:	f000 f842 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000cbc:	201b      	movs	r0, #27
 8000cbe:	f000 f83f 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000cc2:	2004      	movs	r0, #4
 8000cc4:	f000 f83c 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000cc8:	2011      	movs	r0, #17
 8000cca:	f000 f839 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8000cce:	2007      	movs	r0, #7
 8000cd0:	f000 f836 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8000cd4:	2031      	movs	r0, #49	@ 0x31
 8000cd6:	f000 f833 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8000cda:	2033      	movs	r0, #51	@ 0x33
 8000cdc:	f000 f830 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8000ce0:	2042      	movs	r0, #66	@ 0x42
 8000ce2:	f000 f82d 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000ce6:	2005      	movs	r0, #5
 8000ce8:	f000 f82a 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000cec:	200c      	movs	r0, #12
 8000cee:	f000 f827 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8000cf2:	200a      	movs	r0, #10
 8000cf4:	f000 f824 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8000cf8:	2028      	movs	r0, #40	@ 0x28
 8000cfa:	f000 f821 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8000cfe:	202f      	movs	r0, #47	@ 0x2f
 8000d00:	f000 f81e 	bl	8000d40 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8000d04:	200f      	movs	r0, #15
 8000d06:	f000 f81b 	bl	8000d40 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8000d0a:	2011      	movs	r0, #17
 8000d0c:	f000 f80b 	bl	8000d26 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000d10:	20c8      	movs	r0, #200	@ 0xc8
 8000d12:	f000 f97d 	bl	8001010 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8000d16:	2029      	movs	r0, #41	@ 0x29
 8000d18:	f000 f805 	bl	8000d26 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8000d1c:	202c      	movs	r0, #44	@ 0x2c
 8000d1e:	f000 f802 	bl	8000d26 <ili9341_Write_Reg>
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 f94a 	bl	8000fcc <LCD_IO_WriteReg>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 f91b 	bl	8000f88 <LCD_IO_WriteData>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000d60:	4819      	ldr	r0, [pc, #100]	@ (8000dc8 <SPI_Init+0x6c>)
 8000d62:	f004 f9bc 	bl	80050de <HAL_SPI_GetState>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d12b      	bne.n	8000dc4 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8000d6c:	4b16      	ldr	r3, [pc, #88]	@ (8000dc8 <SPI_Init+0x6c>)
 8000d6e:	4a17      	ldr	r2, [pc, #92]	@ (8000dcc <SPI_Init+0x70>)
 8000d70:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d72:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <SPI_Init+0x6c>)
 8000d74:	2218      	movs	r2, #24
 8000d76:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000d78:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <SPI_Init+0x6c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000d7e:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <SPI_Init+0x6c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000d84:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <SPI_Init+0x6c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <SPI_Init+0x6c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000d90:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <SPI_Init+0x6c>)
 8000d92:	2207      	movs	r2, #7
 8000d94:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000d96:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <SPI_Init+0x6c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <SPI_Init+0x6c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000da2:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <SPI_Init+0x6c>)
 8000da4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000da8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000daa:	4b07      	ldr	r3, [pc, #28]	@ (8000dc8 <SPI_Init+0x6c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000db0:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <SPI_Init+0x6c>)
 8000db2:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000db6:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8000db8:	4803      	ldr	r0, [pc, #12]	@ (8000dc8 <SPI_Init+0x6c>)
 8000dba:	f000 f833 	bl	8000e24 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000dbe:	4802      	ldr	r0, [pc, #8]	@ (8000dc8 <SPI_Init+0x6c>)
 8000dc0:	f003 ff98 	bl	8004cf4 <HAL_SPI_Init>
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2002591c 	.word	0x2002591c
 8000dcc:	40015000 	.word	0x40015000

08000dd0 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8000dde:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <SPI_Write+0x34>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	1db9      	adds	r1, r7, #6
 8000de4:	2201      	movs	r2, #1
 8000de6:	4808      	ldr	r0, [pc, #32]	@ (8000e08 <SPI_Write+0x38>)
 8000de8:	f004 f835 	bl	8004e56 <HAL_SPI_Transmit>
 8000dec:	4603      	mov	r3, r0
 8000dee:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8000df6:	f000 f809 	bl	8000e0c <SPI_Error>
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	2000000c 	.word	0x2000000c
 8000e08:	2002591c 	.word	0x2002591c

08000e0c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000e10:	4803      	ldr	r0, [pc, #12]	@ (8000e20 <SPI_Error+0x14>)
 8000e12:	f003 fff8 	bl	8004e06 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8000e16:	f7ff ffa1 	bl	8000d5c <SPI_Init>
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2002591c 	.word	0x2002591c

08000e24 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	@ 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	4b17      	ldr	r3, [pc, #92]	@ (8000e90 <SPI_MspInit+0x6c>)
 8000e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e34:	4a16      	ldr	r2, [pc, #88]	@ (8000e90 <SPI_MspInit+0x6c>)
 8000e36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e3a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e3c:	4b14      	ldr	r3, [pc, #80]	@ (8000e90 <SPI_MspInit+0x6c>)
 8000e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <SPI_MspInit+0x6c>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e50:	4a0f      	ldr	r2, [pc, #60]	@ (8000e90 <SPI_MspInit+0x6c>)
 8000e52:	f043 0320 	orr.w	r3, r3, #32
 8000e56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e58:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <SPI_MspInit+0x6c>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5c:	f003 0320 	and.w	r3, r3, #32
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8000e64:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000e72:	2301      	movs	r3, #1
 8000e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8000e76:	2305      	movs	r3, #5
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4804      	ldr	r0, [pc, #16]	@ (8000e94 <SPI_MspInit+0x70>)
 8000e82:	f001 fab1 	bl	80023e8 <HAL_GPIO_Init>
}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	@ 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40021400 	.word	0x40021400

08000e98 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8000e9e:	4b36      	ldr	r3, [pc, #216]	@ (8000f78 <LCD_IO_Init+0xe0>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d164      	bne.n	8000f70 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8000ea6:	4b34      	ldr	r3, [pc, #208]	@ (8000f78 <LCD_IO_Init+0xe0>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	4b32      	ldr	r3, [pc, #200]	@ (8000f7c <LCD_IO_Init+0xe4>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb4:	4a31      	ldr	r2, [pc, #196]	@ (8000f7c <LCD_IO_Init+0xe4>)
 8000eb6:	f043 0308 	orr.w	r3, r3, #8
 8000eba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebc:	4b2f      	ldr	r3, [pc, #188]	@ (8000f7c <LCD_IO_Init+0xe4>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec0:	f003 0308 	and.w	r3, r3, #8
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000ec8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ecc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000eda:	f107 030c 	add.w	r3, r7, #12
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4827      	ldr	r0, [pc, #156]	@ (8000f80 <LCD_IO_Init+0xe8>)
 8000ee2:	f001 fa81 	bl	80023e8 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	4b24      	ldr	r3, [pc, #144]	@ (8000f7c <LCD_IO_Init+0xe4>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	4a23      	ldr	r2, [pc, #140]	@ (8000f7c <LCD_IO_Init+0xe4>)
 8000ef0:	f043 0308 	orr.w	r3, r3, #8
 8000ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef6:	4b21      	ldr	r3, [pc, #132]	@ (8000f7c <LCD_IO_Init+0xe4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8000f02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000f10:	2302      	movs	r3, #2
 8000f12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4819      	ldr	r0, [pc, #100]	@ (8000f80 <LCD_IO_Init+0xe8>)
 8000f1c:	f001 fa64 	bl	80023e8 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8000f20:	2300      	movs	r3, #0
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <LCD_IO_Init+0xe4>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f28:	4a14      	ldr	r2, [pc, #80]	@ (8000f7c <LCD_IO_Init+0xe4>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <LCD_IO_Init+0xe4>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	603b      	str	r3, [r7, #0]
 8000f3a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	4619      	mov	r1, r3
 8000f52:	480c      	ldr	r0, [pc, #48]	@ (8000f84 <LCD_IO_Init+0xec>)
 8000f54:	f001 fa48 	bl	80023e8 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	4809      	ldr	r0, [pc, #36]	@ (8000f84 <LCD_IO_Init+0xec>)
 8000f5e:	f001 fcfb 	bl	8002958 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000f62:	2201      	movs	r2, #1
 8000f64:	2104      	movs	r1, #4
 8000f66:	4807      	ldr	r0, [pc, #28]	@ (8000f84 <LCD_IO_Init+0xec>)
 8000f68:	f001 fcf6 	bl	8002958 <HAL_GPIO_WritePin>

    SPI_Init();
 8000f6c:	f7ff fef6 	bl	8000d5c <SPI_Init>
  }
}
 8000f70:	bf00      	nop
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20025974 	.word	0x20025974
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020c00 	.word	0x40020c00
 8000f84:	40020800 	.word	0x40020800

08000f88 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000f92:	2201      	movs	r2, #1
 8000f94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f98:	480a      	ldr	r0, [pc, #40]	@ (8000fc4 <LCD_IO_WriteData+0x3c>)
 8000f9a:	f001 fcdd 	bl	8002958 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2104      	movs	r1, #4
 8000fa2:	4809      	ldr	r0, [pc, #36]	@ (8000fc8 <LCD_IO_WriteData+0x40>)
 8000fa4:	f001 fcd8 	bl	8002958 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff10 	bl	8000dd0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2104      	movs	r1, #4
 8000fb4:	4804      	ldr	r0, [pc, #16]	@ (8000fc8 <LCD_IO_WriteData+0x40>)
 8000fb6:	f001 fccf 	bl	8002958 <HAL_GPIO_WritePin>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40020c00 	.word	0x40020c00
 8000fc8:	40020800 	.word	0x40020800

08000fcc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fdc:	480a      	ldr	r0, [pc, #40]	@ (8001008 <LCD_IO_WriteReg+0x3c>)
 8000fde:	f001 fcbb 	bl	8002958 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2104      	movs	r1, #4
 8000fe6:	4809      	ldr	r0, [pc, #36]	@ (800100c <LCD_IO_WriteReg+0x40>)
 8000fe8:	f001 fcb6 	bl	8002958 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff feed 	bl	8000dd0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2104      	movs	r1, #4
 8000ffa:	4804      	ldr	r0, [pc, #16]	@ (800100c <LCD_IO_WriteReg+0x40>)
 8000ffc:	f001 fcac 	bl	8002958 <HAL_GPIO_WritePin>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40020c00 	.word	0x40020c00
 800100c:	40020800 	.word	0x40020800

08001010 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f001 f8db 	bl	80021d4 <HAL_Delay>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102a:	f001 f861 	bl	80020f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102e:	f000 f817 	bl	8001060 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001032:	f000 fa07 	bl	8001444 <MX_GPIO_Init>
  MX_LTDC_Init();
 8001036:	f000 f8bd 	bl	80011b4 <MX_LTDC_Init>
  MX_RNG_Init();
 800103a:	f000 f96d 	bl	8001318 <MX_RNG_Init>
  MX_TIM2_Init();
 800103e:	f000 f9b5 	bl	80013ac <MX_TIM2_Init>
  MX_SPI5_Init();
 8001042:	f000 f97d 	bl	8001340 <MX_SPI5_Init>
  MX_I2C3_Init();
 8001046:	f000 f875 	bl	8001134 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 800104a:	f7ff fa65 	bl	8000518 <ApplicationInit>
  ApplicationFirstScreen();
 800104e:	f7ff fa7b 	bl	8000548 <ApplicationFirstScreen>
  //LCD_Visual_Demo();
  HAL_Delay(5000);
 8001052:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001056:	f001 f8bd 	bl	80021d4 <HAL_Delay>
//#if COMPILE_TOUCH_FUNCTIONS == 1 // This block will need to be deleted
//  LCD_Touch_Polling_Demo(); // This function Will not return
//#endif
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800105a:	bf00      	nop
 800105c:	e7fd      	b.n	800105a <main+0x34>
	...

08001060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b094      	sub	sp, #80	@ 0x50
 8001064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001066:	f107 0320 	add.w	r3, r7, #32
 800106a:	2230      	movs	r2, #48	@ 0x30
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f004 fbf8 	bl	8005864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	4b28      	ldr	r3, [pc, #160]	@ (800112c <SystemClock_Config+0xcc>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108c:	4a27      	ldr	r2, [pc, #156]	@ (800112c <SystemClock_Config+0xcc>)
 800108e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001092:	6413      	str	r3, [r2, #64]	@ 0x40
 8001094:	4b25      	ldr	r3, [pc, #148]	@ (800112c <SystemClock_Config+0xcc>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a0:	2300      	movs	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	4b22      	ldr	r3, [pc, #136]	@ (8001130 <SystemClock_Config+0xd0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a21      	ldr	r2, [pc, #132]	@ (8001130 <SystemClock_Config+0xd0>)
 80010aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001130 <SystemClock_Config+0xd0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010bc:	2301      	movs	r3, #1
 80010be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c6:	2302      	movs	r3, #2
 80010c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010d0:	2308      	movs	r3, #8
 80010d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010d4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010da:	2302      	movs	r3, #2
 80010dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010de:	2307      	movs	r3, #7
 80010e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e2:	f107 0320 	add.w	r3, r7, #32
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 ff96 	bl	8004018 <HAL_RCC_OscConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010f2:	f000 fb55 	bl	80017a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f6:	230f      	movs	r3, #15
 80010f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fa:	2302      	movs	r3, #2
 80010fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001102:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001106:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001108:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800110c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	2105      	movs	r1, #5
 8001114:	4618      	mov	r0, r3
 8001116:	f003 f9f7 	bl	8004508 <HAL_RCC_ClockConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001120:	f000 fb3e 	bl	80017a0 <Error_Handler>
  }
}
 8001124:	bf00      	nop
 8001126:	3750      	adds	r7, #80	@ 0x50
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40023800 	.word	0x40023800
 8001130:	40007000 	.word	0x40007000

08001134 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001138:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <MX_I2C3_Init+0x74>)
 800113a:	4a1c      	ldr	r2, [pc, #112]	@ (80011ac <MX_I2C3_Init+0x78>)
 800113c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800113e:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <MX_I2C3_Init+0x74>)
 8001140:	4a1b      	ldr	r2, [pc, #108]	@ (80011b0 <MX_I2C3_Init+0x7c>)
 8001142:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001144:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <MX_I2C3_Init+0x74>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800114a:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <MX_I2C3_Init+0x74>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001150:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <MX_I2C3_Init+0x74>)
 8001152:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001156:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001158:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <MX_I2C3_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800115e:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <MX_I2C3_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001164:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <MX_I2C3_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116a:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <MX_I2C3_Init+0x74>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001170:	480d      	ldr	r0, [pc, #52]	@ (80011a8 <MX_I2C3_Init+0x74>)
 8001172:	f001 fc0b 	bl	800298c <HAL_I2C_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800117c:	f000 fb10 	bl	80017a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001180:	2100      	movs	r1, #0
 8001182:	4809      	ldr	r0, [pc, #36]	@ (80011a8 <MX_I2C3_Init+0x74>)
 8001184:	f002 fc26 	bl	80039d4 <HAL_I2CEx_ConfigAnalogFilter>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800118e:	f000 fb07 	bl	80017a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001192:	2100      	movs	r1, #0
 8001194:	4804      	ldr	r0, [pc, #16]	@ (80011a8 <MX_I2C3_Init+0x74>)
 8001196:	f002 fc59 	bl	8003a4c <HAL_I2CEx_ConfigDigitalFilter>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80011a0:	f000 fafe 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20025978 	.word	0x20025978
 80011ac:	40005c00 	.word	0x40005c00
 80011b0:	000186a0 	.word	0x000186a0

080011b4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b09a      	sub	sp, #104	@ 0x68
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80011ba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011be:	2234      	movs	r2, #52	@ 0x34
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f004 fb4e 	bl	8005864 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80011c8:	463b      	mov	r3, r7
 80011ca:	2234      	movs	r2, #52	@ 0x34
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 fb48 	bl	8005864 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80011d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001310 <MX_LTDC_Init+0x15c>)
 80011d6:	4a4f      	ldr	r2, [pc, #316]	@ (8001314 <MX_LTDC_Init+0x160>)
 80011d8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80011da:	4b4d      	ldr	r3, [pc, #308]	@ (8001310 <MX_LTDC_Init+0x15c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80011e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001310 <MX_LTDC_Init+0x15c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80011e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001310 <MX_LTDC_Init+0x15c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80011ec:	4b48      	ldr	r3, [pc, #288]	@ (8001310 <MX_LTDC_Init+0x15c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80011f2:	4b47      	ldr	r3, [pc, #284]	@ (8001310 <MX_LTDC_Init+0x15c>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80011f8:	4b45      	ldr	r3, [pc, #276]	@ (8001310 <MX_LTDC_Init+0x15c>)
 80011fa:	2203      	movs	r2, #3
 80011fc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80011fe:	4b44      	ldr	r3, [pc, #272]	@ (8001310 <MX_LTDC_Init+0x15c>)
 8001200:	220e      	movs	r2, #14
 8001202:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001204:	4b42      	ldr	r3, [pc, #264]	@ (8001310 <MX_LTDC_Init+0x15c>)
 8001206:	2205      	movs	r2, #5
 8001208:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800120a:	4b41      	ldr	r3, [pc, #260]	@ (8001310 <MX_LTDC_Init+0x15c>)
 800120c:	f240 228e 	movw	r2, #654	@ 0x28e
 8001210:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001212:	4b3f      	ldr	r3, [pc, #252]	@ (8001310 <MX_LTDC_Init+0x15c>)
 8001214:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001218:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 800121a:	4b3d      	ldr	r3, [pc, #244]	@ (8001310 <MX_LTDC_Init+0x15c>)
 800121c:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001220:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001222:	4b3b      	ldr	r3, [pc, #236]	@ (8001310 <MX_LTDC_Init+0x15c>)
 8001224:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001228:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800122a:	4b39      	ldr	r3, [pc, #228]	@ (8001310 <MX_LTDC_Init+0x15c>)
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001232:	4b37      	ldr	r3, [pc, #220]	@ (8001310 <MX_LTDC_Init+0x15c>)
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800123a:	4b35      	ldr	r3, [pc, #212]	@ (8001310 <MX_LTDC_Init+0x15c>)
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001242:	4833      	ldr	r0, [pc, #204]	@ (8001310 <MX_LTDC_Init+0x15c>)
 8001244:	f002 fc42 	bl	8003acc <HAL_LTDC_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800124e:	f000 faa7 	bl	80017a0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001262:	2300      	movs	r3, #0
 8001264:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800126e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001272:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001274:	2305      	movs	r3, #5
 8001276:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001296:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800129a:	2200      	movs	r2, #0
 800129c:	4619      	mov	r1, r3
 800129e:	481c      	ldr	r0, [pc, #112]	@ (8001310 <MX_LTDC_Init+0x15c>)
 80012a0:	f002 fce4 	bl	8003c6c <HAL_LTDC_ConfigLayer>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80012aa:	f000 fa79 	bl	80017a0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80012ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012ce:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80012d0:	2305      	movs	r3, #5
 80012d2:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80012f2:	463b      	mov	r3, r7
 80012f4:	2201      	movs	r2, #1
 80012f6:	4619      	mov	r1, r3
 80012f8:	4805      	ldr	r0, [pc, #20]	@ (8001310 <MX_LTDC_Init+0x15c>)
 80012fa:	f002 fcb7 	bl	8003c6c <HAL_LTDC_ConfigLayer>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001304:	f000 fa4c 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	3768      	adds	r7, #104	@ 0x68
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200259cc 	.word	0x200259cc
 8001314:	40016800 	.word	0x40016800

08001318 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <MX_RNG_Init+0x20>)
 800131e:	4a07      	ldr	r2, [pc, #28]	@ (800133c <MX_RNG_Init+0x24>)
 8001320:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001322:	4805      	ldr	r0, [pc, #20]	@ (8001338 <MX_RNG_Init+0x20>)
 8001324:	f003 fcbc 	bl	8004ca0 <HAL_RNG_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800132e:	f000 fa37 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20025a74 	.word	0x20025a74
 800133c:	50060800 	.word	0x50060800

08001340 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001344:	4b17      	ldr	r3, [pc, #92]	@ (80013a4 <MX_SPI5_Init+0x64>)
 8001346:	4a18      	ldr	r2, [pc, #96]	@ (80013a8 <MX_SPI5_Init+0x68>)
 8001348:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800134a:	4b16      	ldr	r3, [pc, #88]	@ (80013a4 <MX_SPI5_Init+0x64>)
 800134c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001350:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001352:	4b14      	ldr	r3, [pc, #80]	@ (80013a4 <MX_SPI5_Init+0x64>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001358:	4b12      	ldr	r3, [pc, #72]	@ (80013a4 <MX_SPI5_Init+0x64>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800135e:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <MX_SPI5_Init+0x64>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001364:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <MX_SPI5_Init+0x64>)
 8001366:	2200      	movs	r2, #0
 8001368:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800136a:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <MX_SPI5_Init+0x64>)
 800136c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001370:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001372:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <MX_SPI5_Init+0x64>)
 8001374:	2200      	movs	r2, #0
 8001376:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001378:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <MX_SPI5_Init+0x64>)
 800137a:	2200      	movs	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800137e:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <MX_SPI5_Init+0x64>)
 8001380:	2200      	movs	r2, #0
 8001382:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001384:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <MX_SPI5_Init+0x64>)
 8001386:	2200      	movs	r2, #0
 8001388:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800138a:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <MX_SPI5_Init+0x64>)
 800138c:	220a      	movs	r2, #10
 800138e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001390:	4804      	ldr	r0, [pc, #16]	@ (80013a4 <MX_SPI5_Init+0x64>)
 8001392:	f003 fcaf 	bl	8004cf4 <HAL_SPI_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800139c:	f000 fa00 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20025a84 	.word	0x20025a84
 80013a8:	40015000 	.word	0x40015000

080013ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c0:	463b      	mov	r3, r7
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001440 <MX_TIM2_Init+0x94>)
 80013ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <MX_TIM2_Init+0x94>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <MX_TIM2_Init+0x94>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013dc:	4b18      	ldr	r3, [pc, #96]	@ (8001440 <MX_TIM2_Init+0x94>)
 80013de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e4:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <MX_TIM2_Init+0x94>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ea:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <MX_TIM2_Init+0x94>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013f0:	4813      	ldr	r0, [pc, #76]	@ (8001440 <MX_TIM2_Init+0x94>)
 80013f2:	f003 ff5f 	bl	80052b4 <HAL_TIM_Base_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013fc:	f000 f9d0 	bl	80017a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001400:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001404:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	4619      	mov	r1, r3
 800140c:	480c      	ldr	r0, [pc, #48]	@ (8001440 <MX_TIM2_Init+0x94>)
 800140e:	f003 ffa0 	bl	8005352 <HAL_TIM_ConfigClockSource>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001418:	f000 f9c2 	bl	80017a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141c:	2300      	movs	r3, #0
 800141e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001424:	463b      	mov	r3, r7
 8001426:	4619      	mov	r1, r3
 8001428:	4805      	ldr	r0, [pc, #20]	@ (8001440 <MX_TIM2_Init+0x94>)
 800142a:	f004 f99f 	bl	800576c <HAL_TIMEx_MasterConfigSynchronization>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001434:	f000 f9b4 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20025adc 	.word	0x20025adc

08001444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08e      	sub	sp, #56	@ 0x38
 8001448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
 800145e:	4bb2      	ldr	r3, [pc, #712]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4ab1      	ldr	r2, [pc, #708]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4baf      	ldr	r3, [pc, #700]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	623b      	str	r3, [r7, #32]
 8001474:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
 800147a:	4bab      	ldr	r3, [pc, #684]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	4aaa      	ldr	r2, [pc, #680]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 8001480:	f043 0320 	orr.w	r3, r3, #32
 8001484:	6313      	str	r3, [r2, #48]	@ 0x30
 8001486:	4ba8      	ldr	r3, [pc, #672]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	f003 0320 	and.w	r3, r3, #32
 800148e:	61fb      	str	r3, [r7, #28]
 8001490:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
 8001496:	4ba4      	ldr	r3, [pc, #656]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4aa3      	ldr	r2, [pc, #652]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 800149c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4ba1      	ldr	r3, [pc, #644]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014aa:	61bb      	str	r3, [r7, #24]
 80014ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	4b9d      	ldr	r3, [pc, #628]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a9c      	ldr	r2, [pc, #624]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b9a      	ldr	r3, [pc, #616]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b96      	ldr	r3, [pc, #600]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a95      	ldr	r2, [pc, #596]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b93      	ldr	r3, [pc, #588]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b8f      	ldr	r3, [pc, #572]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a8e      	ldr	r2, [pc, #568]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 80014f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b8c      	ldr	r3, [pc, #560]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b88      	ldr	r3, [pc, #544]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a87      	ldr	r2, [pc, #540]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 800150c:	f043 0310 	orr.w	r3, r3, #16
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b85      	ldr	r3, [pc, #532]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f003 0310 	and.w	r3, r3, #16
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b81      	ldr	r3, [pc, #516]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	4a80      	ldr	r2, [pc, #512]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 8001528:	f043 0308 	orr.w	r3, r3, #8
 800152c:	6313      	str	r3, [r2, #48]	@ 0x30
 800152e:	4b7e      	ldr	r3, [pc, #504]	@ (8001728 <MX_GPIO_Init+0x2e4>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	2116      	movs	r1, #22
 800153e:	487b      	ldr	r0, [pc, #492]	@ (800172c <MX_GPIO_Init+0x2e8>)
 8001540:	f001 fa0a 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	2180      	movs	r1, #128	@ 0x80
 8001548:	4879      	ldr	r0, [pc, #484]	@ (8001730 <MX_GPIO_Init+0x2ec>)
 800154a:	f001 fa05 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001554:	4877      	ldr	r0, [pc, #476]	@ (8001734 <MX_GPIO_Init+0x2f0>)
 8001556:	f001 f9ff 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001560:	4875      	ldr	r0, [pc, #468]	@ (8001738 <MX_GPIO_Init+0x2f4>)
 8001562:	f001 f9f9 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001566:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001578:	230c      	movs	r3, #12
 800157a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800157c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001580:	4619      	mov	r1, r3
 8001582:	486e      	ldr	r0, [pc, #440]	@ (800173c <MX_GPIO_Init+0x2f8>)
 8001584:	f000 ff30 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001588:	2301      	movs	r3, #1
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001598:	230c      	movs	r3, #12
 800159a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a0:	4619      	mov	r1, r3
 80015a2:	4862      	ldr	r0, [pc, #392]	@ (800172c <MX_GPIO_Init+0x2e8>)
 80015a4:	f000 ff20 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80015a8:	2316      	movs	r3, #22
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015bc:	4619      	mov	r1, r3
 80015be:	485b      	ldr	r0, [pc, #364]	@ (800172c <MX_GPIO_Init+0x2e8>)
 80015c0:	f000 ff12 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80015c4:	f248 0307 	movw	r3, #32775	@ 0x8007
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015ca:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80015ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d8:	4619      	mov	r1, r3
 80015da:	4855      	ldr	r0, [pc, #340]	@ (8001730 <MX_GPIO_Init+0x2ec>)
 80015dc:	f000 ff04 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80015e0:	2380      	movs	r3, #128	@ 0x80
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f4:	4619      	mov	r1, r3
 80015f6:	484e      	ldr	r0, [pc, #312]	@ (8001730 <MX_GPIO_Init+0x2ec>)
 80015f8:	f000 fef6 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80015fc:	2320      	movs	r3, #32
 80015fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001600:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001604:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160e:	4619      	mov	r1, r3
 8001610:	4846      	ldr	r0, [pc, #280]	@ (800172c <MX_GPIO_Init+0x2e8>)
 8001612:	f000 fee9 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001616:	2304      	movs	r3, #4
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161a:	2300      	movs	r3, #0
 800161c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001626:	4619      	mov	r1, r3
 8001628:	4845      	ldr	r0, [pc, #276]	@ (8001740 <MX_GPIO_Init+0x2fc>)
 800162a:	f000 fedd 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800162e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001632:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001640:	230c      	movs	r3, #12
 8001642:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001648:	4619      	mov	r1, r3
 800164a:	483b      	ldr	r0, [pc, #236]	@ (8001738 <MX_GPIO_Init+0x2f4>)
 800164c:	f000 fecc 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001650:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165e:	2303      	movs	r3, #3
 8001660:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001662:	230c      	movs	r3, #12
 8001664:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800166a:	4619      	mov	r1, r3
 800166c:	4835      	ldr	r0, [pc, #212]	@ (8001744 <MX_GPIO_Init+0x300>)
 800166e:	f000 febb 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001672:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001684:	230c      	movs	r3, #12
 8001686:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800168c:	4619      	mov	r1, r3
 800168e:	482c      	ldr	r0, [pc, #176]	@ (8001740 <MX_GPIO_Init+0x2fc>)
 8001690:	f000 feaa 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001694:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169a:	2300      	movs	r3, #0
 800169c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80016a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a6:	4619      	mov	r1, r3
 80016a8:	4825      	ldr	r0, [pc, #148]	@ (8001740 <MX_GPIO_Init+0x2fc>)
 80016aa:	f000 fe9d 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80016ae:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016bc:	2303      	movs	r3, #3
 80016be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016c0:	230c      	movs	r3, #12
 80016c2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016c8:	4619      	mov	r1, r3
 80016ca:	481a      	ldr	r0, [pc, #104]	@ (8001734 <MX_GPIO_Init+0x2f0>)
 80016cc:	f000 fe8c 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80016d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80016de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016e2:	4619      	mov	r1, r3
 80016e4:	4813      	ldr	r0, [pc, #76]	@ (8001734 <MX_GPIO_Init+0x2f0>)
 80016e6:	f000 fe7f 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80016ea:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001700:	4619      	mov	r1, r3
 8001702:	480c      	ldr	r0, [pc, #48]	@ (8001734 <MX_GPIO_Init+0x2f0>)
 8001704:	f000 fe70 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001708:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800171a:	2307      	movs	r3, #7
 800171c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001722:	4619      	mov	r1, r3
 8001724:	e010      	b.n	8001748 <MX_GPIO_Init+0x304>
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	40020800 	.word	0x40020800
 8001730:	40020000 	.word	0x40020000
 8001734:	40020c00 	.word	0x40020c00
 8001738:	40021800 	.word	0x40021800
 800173c:	40021400 	.word	0x40021400
 8001740:	40020400 	.word	0x40020400
 8001744:	40021000 	.word	0x40021000
 8001748:	4812      	ldr	r0, [pc, #72]	@ (8001794 <MX_GPIO_Init+0x350>)
 800174a:	f000 fe4d 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800174e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001754:	2301      	movs	r3, #1
 8001756:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001760:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001764:	4619      	mov	r1, r3
 8001766:	480c      	ldr	r0, [pc, #48]	@ (8001798 <MX_GPIO_Init+0x354>)
 8001768:	f000 fe3e 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800176c:	2360      	movs	r3, #96	@ 0x60
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800177c:	230c      	movs	r3, #12
 800177e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001780:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001784:	4619      	mov	r1, r3
 8001786:	4805      	ldr	r0, [pc, #20]	@ (800179c <MX_GPIO_Init+0x358>)
 8001788:	f000 fe2e 	bl	80023e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800178c:	bf00      	nop
 800178e:	3738      	adds	r7, #56	@ 0x38
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40020000 	.word	0x40020000
 8001798:	40021800 	.word	0x40021800
 800179c:	40020400 	.word	0x40020400

080017a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017a4:	b672      	cpsid	i
}
 80017a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <Error_Handler+0x8>

080017ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ba:	4a0f      	ldr	r2, [pc, #60]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017c2:	4b0d      	ldr	r3, [pc, #52]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	4a08      	ldr	r2, [pc, #32]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017de:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017ea:	2007      	movs	r0, #7
 80017ec:	f000 fdc8 	bl	8002380 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40023800 	.word	0x40023800

080017fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	@ 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a29      	ldr	r2, [pc, #164]	@ (80018c0 <HAL_I2C_MspInit+0xc4>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d14b      	bne.n	80018b6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b28      	ldr	r3, [pc, #160]	@ (80018c4 <HAL_I2C_MspInit+0xc8>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	4a27      	ldr	r2, [pc, #156]	@ (80018c4 <HAL_I2C_MspInit+0xc8>)
 8001828:	f043 0304 	orr.w	r3, r3, #4
 800182c:	6313      	str	r3, [r2, #48]	@ 0x30
 800182e:	4b25      	ldr	r3, [pc, #148]	@ (80018c4 <HAL_I2C_MspInit+0xc8>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b21      	ldr	r3, [pc, #132]	@ (80018c4 <HAL_I2C_MspInit+0xc8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	4a20      	ldr	r2, [pc, #128]	@ (80018c4 <HAL_I2C_MspInit+0xc8>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	4b1e      	ldr	r3, [pc, #120]	@ (80018c4 <HAL_I2C_MspInit+0xc8>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001856:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800185c:	2312      	movs	r3, #18
 800185e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001868:	2304      	movs	r3, #4
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	4815      	ldr	r0, [pc, #84]	@ (80018c8 <HAL_I2C_MspInit+0xcc>)
 8001874:	f000 fdb8 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001878:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800187e:	2312      	movs	r3, #18
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800188a:	2304      	movs	r3, #4
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	480d      	ldr	r0, [pc, #52]	@ (80018cc <HAL_I2C_MspInit+0xd0>)
 8001896:	f000 fda7 	bl	80023e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	4b09      	ldr	r3, [pc, #36]	@ (80018c4 <HAL_I2C_MspInit+0xc8>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	4a08      	ldr	r2, [pc, #32]	@ (80018c4 <HAL_I2C_MspInit+0xc8>)
 80018a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018aa:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_I2C_MspInit+0xc8>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80018b6:	bf00      	nop
 80018b8:	3728      	adds	r7, #40	@ 0x28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40005c00 	.word	0x40005c00
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40020800 	.word	0x40020800
 80018cc:	40020000 	.word	0x40020000

080018d0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b09a      	sub	sp, #104	@ 0x68
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ec:	2230      	movs	r2, #48	@ 0x30
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f003 ffb7 	bl	8005864 <memset>
  if(hltdc->Instance==LTDC)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a81      	ldr	r2, [pc, #516]	@ (8001b00 <HAL_LTDC_MspInit+0x230>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	f040 80fb 	bne.w	8001af8 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001902:	2308      	movs	r3, #8
 8001904:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8001906:	23c8      	movs	r3, #200	@ 0xc8
 8001908:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800190a:	2302      	movs	r3, #2
 800190c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 800190e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001912:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001914:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001918:	4618      	mov	r0, r3
 800191a:	f003 f801 	bl	8004920 <HAL_RCCEx_PeriphCLKConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001924:	f7ff ff3c 	bl	80017a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
 800192c:	4b75      	ldr	r3, [pc, #468]	@ (8001b04 <HAL_LTDC_MspInit+0x234>)
 800192e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001930:	4a74      	ldr	r2, [pc, #464]	@ (8001b04 <HAL_LTDC_MspInit+0x234>)
 8001932:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001936:	6453      	str	r3, [r2, #68]	@ 0x44
 8001938:	4b72      	ldr	r3, [pc, #456]	@ (8001b04 <HAL_LTDC_MspInit+0x234>)
 800193a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001940:	623b      	str	r3, [r7, #32]
 8001942:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
 8001948:	4b6e      	ldr	r3, [pc, #440]	@ (8001b04 <HAL_LTDC_MspInit+0x234>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194c:	4a6d      	ldr	r2, [pc, #436]	@ (8001b04 <HAL_LTDC_MspInit+0x234>)
 800194e:	f043 0320 	orr.w	r3, r3, #32
 8001952:	6313      	str	r3, [r2, #48]	@ 0x30
 8001954:	4b6b      	ldr	r3, [pc, #428]	@ (8001b04 <HAL_LTDC_MspInit+0x234>)
 8001956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001958:	f003 0320 	and.w	r3, r3, #32
 800195c:	61fb      	str	r3, [r7, #28]
 800195e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	61bb      	str	r3, [r7, #24]
 8001964:	4b67      	ldr	r3, [pc, #412]	@ (8001b04 <HAL_LTDC_MspInit+0x234>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001968:	4a66      	ldr	r2, [pc, #408]	@ (8001b04 <HAL_LTDC_MspInit+0x234>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001970:	4b64      	ldr	r3, [pc, #400]	@ (8001b04 <HAL_LTDC_MspInit+0x234>)
 8001972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	61bb      	str	r3, [r7, #24]
 800197a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	4b60      	ldr	r3, [pc, #384]	@ (8001b04 <HAL_LTDC_MspInit+0x234>)
 8001982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001984:	4a5f      	ldr	r2, [pc, #380]	@ (8001b04 <HAL_LTDC_MspInit+0x234>)
 8001986:	f043 0302 	orr.w	r3, r3, #2
 800198a:	6313      	str	r3, [r2, #48]	@ 0x30
 800198c:	4b5d      	ldr	r3, [pc, #372]	@ (8001b04 <HAL_LTDC_MspInit+0x234>)
 800198e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	4b59      	ldr	r3, [pc, #356]	@ (8001b04 <HAL_LTDC_MspInit+0x234>)
 800199e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a0:	4a58      	ldr	r2, [pc, #352]	@ (8001b04 <HAL_LTDC_MspInit+0x234>)
 80019a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a8:	4b56      	ldr	r3, [pc, #344]	@ (8001b04 <HAL_LTDC_MspInit+0x234>)
 80019aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	4b52      	ldr	r3, [pc, #328]	@ (8001b04 <HAL_LTDC_MspInit+0x234>)
 80019ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019bc:	4a51      	ldr	r2, [pc, #324]	@ (8001b04 <HAL_LTDC_MspInit+0x234>)
 80019be:	f043 0304 	orr.w	r3, r3, #4
 80019c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c4:	4b4f      	ldr	r3, [pc, #316]	@ (8001b04 <HAL_LTDC_MspInit+0x234>)
 80019c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d0:	2300      	movs	r3, #0
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001b04 <HAL_LTDC_MspInit+0x234>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d8:	4a4a      	ldr	r2, [pc, #296]	@ (8001b04 <HAL_LTDC_MspInit+0x234>)
 80019da:	f043 0308 	orr.w	r3, r3, #8
 80019de:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e0:	4b48      	ldr	r3, [pc, #288]	@ (8001b04 <HAL_LTDC_MspInit+0x234>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80019ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019f0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019fe:	230e      	movs	r3, #14
 8001a00:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001a02:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a06:	4619      	mov	r1, r3
 8001a08:	483f      	ldr	r0, [pc, #252]	@ (8001b08 <HAL_LTDC_MspInit+0x238>)
 8001a0a:	f000 fced 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001a0e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001a12:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a20:	230e      	movs	r3, #14
 8001a22:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a24:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4838      	ldr	r0, [pc, #224]	@ (8001b0c <HAL_LTDC_MspInit+0x23c>)
 8001a2c:	f000 fcdc 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001a30:	2303      	movs	r3, #3
 8001a32:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001a40:	2309      	movs	r3, #9
 8001a42:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a44:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4831      	ldr	r0, [pc, #196]	@ (8001b10 <HAL_LTDC_MspInit+0x240>)
 8001a4c:	f000 fccc 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001a50:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001a54:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a62:	230e      	movs	r3, #14
 8001a64:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a66:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4828      	ldr	r0, [pc, #160]	@ (8001b10 <HAL_LTDC_MspInit+0x240>)
 8001a6e:	f000 fcbb 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001a72:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001a76:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a84:	230e      	movs	r3, #14
 8001a86:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a88:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4821      	ldr	r0, [pc, #132]	@ (8001b14 <HAL_LTDC_MspInit+0x244>)
 8001a90:	f000 fcaa 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001a94:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001a98:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001aa6:	230e      	movs	r3, #14
 8001aa8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aaa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4819      	ldr	r0, [pc, #100]	@ (8001b18 <HAL_LTDC_MspInit+0x248>)
 8001ab2:	f000 fc99 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001ab6:	2348      	movs	r3, #72	@ 0x48
 8001ab8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ac6:	230e      	movs	r3, #14
 8001ac8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4812      	ldr	r0, [pc, #72]	@ (8001b1c <HAL_LTDC_MspInit+0x24c>)
 8001ad2:	f000 fc89 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001ad6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ada:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001ae8:	2309      	movs	r3, #9
 8001aea:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001af0:	4619      	mov	r1, r3
 8001af2:	4808      	ldr	r0, [pc, #32]	@ (8001b14 <HAL_LTDC_MspInit+0x244>)
 8001af4:	f000 fc78 	bl	80023e8 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001af8:	bf00      	nop
 8001afa:	3768      	adds	r7, #104	@ 0x68
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40016800 	.word	0x40016800
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40021400 	.word	0x40021400
 8001b0c:	40020000 	.word	0x40020000
 8001b10:	40020400 	.word	0x40020400
 8001b14:	40021800 	.word	0x40021800
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40020c00 	.word	0x40020c00

08001b20 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b5c <HAL_RNG_MspInit+0x3c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d10d      	bne.n	8001b4e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <HAL_RNG_MspInit+0x40>)
 8001b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b3a:	4a09      	ldr	r2, [pc, #36]	@ (8001b60 <HAL_RNG_MspInit+0x40>)
 8001b3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b40:	6353      	str	r3, [r2, #52]	@ 0x34
 8001b42:	4b07      	ldr	r3, [pc, #28]	@ (8001b60 <HAL_RNG_MspInit+0x40>)
 8001b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	50060800 	.word	0x50060800
 8001b60:	40023800 	.word	0x40023800

08001b64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	@ 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a19      	ldr	r2, [pc, #100]	@ (8001be8 <HAL_SPI_MspInit+0x84>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d12c      	bne.n	8001be0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	4b18      	ldr	r3, [pc, #96]	@ (8001bec <HAL_SPI_MspInit+0x88>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8e:	4a17      	ldr	r2, [pc, #92]	@ (8001bec <HAL_SPI_MspInit+0x88>)
 8001b90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b96:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <HAL_SPI_MspInit+0x88>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <HAL_SPI_MspInit+0x88>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	4a10      	ldr	r2, [pc, #64]	@ (8001bec <HAL_SPI_MspInit+0x88>)
 8001bac:	f043 0320 	orr.w	r3, r3, #32
 8001bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <HAL_SPI_MspInit+0x88>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	f003 0320 	and.w	r3, r3, #32
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001bbe:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001bd0:	2305      	movs	r3, #5
 8001bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4805      	ldr	r0, [pc, #20]	@ (8001bf0 <HAL_SPI_MspInit+0x8c>)
 8001bdc:	f000 fc04 	bl	80023e8 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001be0:	bf00      	nop
 8001be2:	3728      	adds	r7, #40	@ 0x28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40015000 	.word	0x40015000
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40021400 	.word	0x40021400

08001bf4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a08      	ldr	r2, [pc, #32]	@ (8001c24 <HAL_SPI_MspDeInit+0x30>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d10a      	bne.n	8001c1c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001c06:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <HAL_SPI_MspDeInit+0x34>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0a:	4a07      	ldr	r2, [pc, #28]	@ (8001c28 <HAL_SPI_MspDeInit+0x34>)
 8001c0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001c10:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001c12:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001c16:	4805      	ldr	r0, [pc, #20]	@ (8001c2c <HAL_SPI_MspDeInit+0x38>)
 8001c18:	f000 fd92 	bl	8002740 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40015000 	.word	0x40015000
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40021400 	.word	0x40021400

08001c30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c40:	d10d      	bne.n	8001c5e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <HAL_TIM_Base_MspInit+0x3c>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	4a08      	ldr	r2, [pc, #32]	@ (8001c6c <HAL_TIM_Base_MspInit+0x3c>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_TIM_Base_MspInit+0x3c>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800

08001c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <NMI_Handler+0x4>

08001c78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <HardFault_Handler+0x4>

08001c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <MemManage_Handler+0x4>

08001c88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <BusFault_Handler+0x4>

08001c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <UsageFault_Handler+0x4>

08001c98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc6:	f000 fa65 	bl	8002194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8001cd4:	f000 f902 	bl	8001edc <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8001cd8:	f000 f8c2 	bl	8001e60 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8001cdc:	2202      	movs	r2, #2
 8001cde:	2103      	movs	r1, #3
 8001ce0:	2082      	movs	r0, #130	@ 0x82
 8001ce2:	f000 f94f 	bl	8001f84 <I2C3_Write>
    HAL_Delay(5);
 8001ce6:	2005      	movs	r0, #5
 8001ce8:	f000 fa74 	bl	80021d4 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2103      	movs	r1, #3
 8001cf0:	2082      	movs	r0, #130	@ 0x82
 8001cf2:	f000 f947 	bl	8001f84 <I2C3_Write>
    HAL_Delay(2);
 8001cf6:	2002      	movs	r0, #2
 8001cf8:	f000 fa6c 	bl	80021d4 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8001cfc:	1cba      	adds	r2, r7, #2
 8001cfe:	2302      	movs	r3, #2
 8001d00:	2100      	movs	r1, #0
 8001d02:	2082      	movs	r0, #130	@ 0x82
 8001d04:	f000 f98e 	bl	8002024 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8001d08:	887b      	ldrh	r3, [r7, #2]
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8001d0e:	887b      	ldrh	r3, [r7, #2]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	f640 0211 	movw	r2, #2065	@ 0x811
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d001      	beq.n	8001d28 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e075      	b.n	8001e14 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8001d28:	2202      	movs	r2, #2
 8001d2a:	2103      	movs	r1, #3
 8001d2c:	2082      	movs	r0, #130	@ 0x82
 8001d2e:	f000 f929 	bl	8001f84 <I2C3_Write>
    HAL_Delay(5);
 8001d32:	2005      	movs	r0, #5
 8001d34:	f000 fa4e 	bl	80021d4 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2103      	movs	r1, #3
 8001d3c:	2082      	movs	r0, #130	@ 0x82
 8001d3e:	f000 f921 	bl	8001f84 <I2C3_Write>
    HAL_Delay(2);
 8001d42:	2002      	movs	r0, #2
 8001d44:	f000 fa46 	bl	80021d4 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8001d48:	2004      	movs	r0, #4
 8001d4a:	f000 f867 	bl	8001e1c <STMPE811_Read>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8001d52:	797b      	ldrb	r3, [r7, #5]
 8001d54:	f023 0301 	bic.w	r3, r3, #1
 8001d58:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8001d5a:	797b      	ldrb	r3, [r7, #5]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	2104      	movs	r1, #4
 8001d60:	2082      	movs	r0, #130	@ 0x82
 8001d62:	f000 f90f 	bl	8001f84 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8001d66:	2004      	movs	r0, #4
 8001d68:	f000 f858 	bl	8001e1c <STMPE811_Read>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8001d70:	797b      	ldrb	r3, [r7, #5]
 8001d72:	f023 0302 	bic.w	r3, r3, #2
 8001d76:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8001d78:	797b      	ldrb	r3, [r7, #5]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	2104      	movs	r1, #4
 8001d7e:	2082      	movs	r0, #130	@ 0x82
 8001d80:	f000 f900 	bl	8001f84 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8001d84:	2249      	movs	r2, #73	@ 0x49
 8001d86:	2120      	movs	r1, #32
 8001d88:	2082      	movs	r0, #130	@ 0x82
 8001d8a:	f000 f8fb 	bl	8001f84 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8001d8e:	2002      	movs	r0, #2
 8001d90:	f000 fa20 	bl	80021d4 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8001d94:	2201      	movs	r2, #1
 8001d96:	2121      	movs	r1, #33	@ 0x21
 8001d98:	2082      	movs	r0, #130	@ 0x82
 8001d9a:	f000 f8f3 	bl	8001f84 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8001d9e:	2017      	movs	r0, #23
 8001da0:	f000 f83c 	bl	8001e1c <STMPE811_Read>
 8001da4:	4603      	mov	r3, r0
 8001da6:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8001da8:	797b      	ldrb	r3, [r7, #5]
 8001daa:	f043 031e 	orr.w	r3, r3, #30
 8001dae:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8001db0:	797b      	ldrb	r3, [r7, #5]
 8001db2:	461a      	mov	r2, r3
 8001db4:	2117      	movs	r1, #23
 8001db6:	2082      	movs	r0, #130	@ 0x82
 8001db8:	f000 f8e4 	bl	8001f84 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8001dbc:	229a      	movs	r2, #154	@ 0x9a
 8001dbe:	2141      	movs	r1, #65	@ 0x41
 8001dc0:	2082      	movs	r0, #130	@ 0x82
 8001dc2:	f000 f8df 	bl	8001f84 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	214a      	movs	r1, #74	@ 0x4a
 8001dca:	2082      	movs	r0, #130	@ 0x82
 8001dcc:	f000 f8da 	bl	8001f84 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	214b      	movs	r1, #75	@ 0x4b
 8001dd4:	2082      	movs	r0, #130	@ 0x82
 8001dd6:	f000 f8d5 	bl	8001f84 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	214b      	movs	r1, #75	@ 0x4b
 8001dde:	2082      	movs	r0, #130	@ 0x82
 8001de0:	f000 f8d0 	bl	8001f84 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8001de4:	2201      	movs	r2, #1
 8001de6:	2156      	movs	r1, #86	@ 0x56
 8001de8:	2082      	movs	r0, #130	@ 0x82
 8001dea:	f000 f8cb 	bl	8001f84 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8001dee:	2201      	movs	r2, #1
 8001df0:	2158      	movs	r1, #88	@ 0x58
 8001df2:	2082      	movs	r0, #130	@ 0x82
 8001df4:	f000 f8c6 	bl	8001f84 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8001df8:	2203      	movs	r2, #3
 8001dfa:	2140      	movs	r1, #64	@ 0x40
 8001dfc:	2082      	movs	r0, #130	@ 0x82
 8001dfe:	f000 f8c1 	bl	8001f84 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8001e02:	22ff      	movs	r2, #255	@ 0xff
 8001e04:	210b      	movs	r1, #11
 8001e06:	2082      	movs	r0, #130	@ 0x82
 8001e08:	f000 f8bc 	bl	8001f84 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8001e0c:	20c8      	movs	r0, #200	@ 0xc8
 8001e0e:	f000 f9e1 	bl	80021d4 <HAL_Delay>

    return STMPE811_State_Ok;
 8001e12:	2302      	movs	r3, #2

}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8001e26:	f107 020f 	add.w	r2, r7, #15
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	2082      	movs	r0, #130	@ 0x82
 8001e30:	f000 f8d2 	bl	8001fd8 <I2C3_Read>

    return readData;
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8001e44:	4b05      	ldr	r3, [pc, #20]	@ (8001e5c <verifyHAL_I2C_IS_OKAY+0x1c>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20025b78 	.word	0x20025b78

08001e60 <I2C3_Init>:

static void I2C3_Init()
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	603b      	str	r3, [r7, #0]
 8001e6a:	4b18      	ldr	r3, [pc, #96]	@ (8001ecc <I2C3_Init+0x6c>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	4a17      	ldr	r2, [pc, #92]	@ (8001ecc <I2C3_Init+0x6c>)
 8001e70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e76:	4b15      	ldr	r3, [pc, #84]	@ (8001ecc <I2C3_Init+0x6c>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8001e82:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <I2C3_Init+0x70>)
 8001e84:	4a13      	ldr	r2, [pc, #76]	@ (8001ed4 <I2C3_Init+0x74>)
 8001e86:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8001e88:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <I2C3_Init+0x70>)
 8001e8a:	4a13      	ldr	r2, [pc, #76]	@ (8001ed8 <I2C3_Init+0x78>)
 8001e8c:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <I2C3_Init+0x70>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8001e94:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed0 <I2C3_Init+0x70>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed0 <I2C3_Init+0x70>)
 8001e9c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ea0:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed0 <I2C3_Init+0x70>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ea8:	4b09      	ldr	r3, [pc, #36]	@ (8001ed0 <I2C3_Init+0x70>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8001eae:	4808      	ldr	r0, [pc, #32]	@ (8001ed0 <I2C3_Init+0x70>)
 8001eb0:	f000 fd6c 	bl	800298c <HAL_I2C_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8001ebe:	bf00      	nop
 8001ec0:	e7fd      	b.n	8001ebe <I2C3_Init+0x5e>
    }
    return;
 8001ec2:	bf00      	nop
}
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	20025b24 	.word	0x20025b24
 8001ed4:	40005c00 	.word	0x40005c00
 8001ed8:	000186a0 	.word	0x000186a0

08001edc <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee2:	f107 030c 	add.w	r3, r7, #12
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]
 8001ef0:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	4b20      	ldr	r3, [pc, #128]	@ (8001f78 <I2C3_MspInit+0x9c>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	4a1f      	ldr	r2, [pc, #124]	@ (8001f78 <I2C3_MspInit+0x9c>)
 8001efc:	f043 0304 	orr.w	r3, r3, #4
 8001f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f02:	4b1d      	ldr	r3, [pc, #116]	@ (8001f78 <I2C3_MspInit+0x9c>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	4b19      	ldr	r3, [pc, #100]	@ (8001f78 <I2C3_MspInit+0x9c>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	4a18      	ldr	r2, [pc, #96]	@ (8001f78 <I2C3_MspInit+0x9c>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1e:	4b16      	ldr	r3, [pc, #88]	@ (8001f78 <I2C3_MspInit+0x9c>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001f2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f30:	2312      	movs	r3, #18
 8001f32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	4619      	mov	r1, r3
 8001f46:	480d      	ldr	r0, [pc, #52]	@ (8001f7c <I2C3_MspInit+0xa0>)
 8001f48:	f000 fa4e 	bl	80023e8 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001f4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f52:	2312      	movs	r3, #18
 8001f54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f5e:	2304      	movs	r3, #4
 8001f60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001f62:	f107 030c 	add.w	r3, r7, #12
 8001f66:	4619      	mov	r1, r3
 8001f68:	4805      	ldr	r0, [pc, #20]	@ (8001f80 <I2C3_MspInit+0xa4>)
 8001f6a:	f000 fa3d 	bl	80023e8 <HAL_GPIO_Init>
    
}
 8001f6e:	bf00      	nop
 8001f70:	3720      	adds	r7, #32
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40020800 	.word	0x40020800
 8001f80:	40020000 	.word	0x40020000

08001f84 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af04      	add	r7, sp, #16
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	80fb      	strh	r3, [r7, #6]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	717b      	strb	r3, [r7, #5]
 8001f92:	4613      	mov	r3, r2
 8001f94:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8001f96:	793b      	ldrb	r3, [r7, #4]
 8001f98:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8001f9a:	797b      	ldrb	r3, [r7, #5]
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	88f9      	ldrh	r1, [r7, #6]
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fcc <I2C3_Write+0x48>)
 8001fa2:	9302      	str	r3, [sp, #8]
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	9301      	str	r3, [sp, #4]
 8001fa8:	f107 030f 	add.w	r3, r7, #15
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	2301      	movs	r3, #1
 8001fb0:	4807      	ldr	r0, [pc, #28]	@ (8001fd0 <I2C3_Write+0x4c>)
 8001fb2:	f000 fe2f 	bl	8002c14 <HAL_I2C_Mem_Write>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <I2C3_Write+0x50>)
 8001fbc:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8001fbe:	f7ff ff3f 	bl	8001e40 <verifyHAL_I2C_IS_OKAY>
}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	0003d090 	.word	0x0003d090
 8001fd0:	20025b24 	.word	0x20025b24
 8001fd4:	20025b78 	.word	0x20025b78

08001fd8 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af04      	add	r7, sp, #16
 8001fde:	4603      	mov	r3, r0
 8001fe0:	603a      	str	r2, [r7, #0]
 8001fe2:	71fb      	strb	r3, [r7, #7]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	b299      	uxth	r1, r3
 8001fec:	79bb      	ldrb	r3, [r7, #6]
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <I2C3_Read+0x40>)
 8001ff2:	9302      	str	r3, [sp, #8]
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	4807      	ldr	r0, [pc, #28]	@ (800201c <I2C3_Read+0x44>)
 8002000:	f000 ff02 	bl	8002e08 <HAL_I2C_Mem_Read>
 8002004:	4603      	mov	r3, r0
 8002006:	461a      	mov	r2, r3
 8002008:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <I2C3_Read+0x48>)
 800200a:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800200c:	f7ff ff18 	bl	8001e40 <verifyHAL_I2C_IS_OKAY>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	0003d090 	.word	0x0003d090
 800201c:	20025b24 	.word	0x20025b24
 8002020:	20025b78 	.word	0x20025b78

08002024 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af04      	add	r7, sp, #16
 800202a:	603a      	str	r2, [r7, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
 8002032:	460b      	mov	r3, r1
 8002034:	71bb      	strb	r3, [r7, #6]
 8002036:	4613      	mov	r3, r2
 8002038:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	b299      	uxth	r1, r3
 800203e:	79bb      	ldrb	r3, [r7, #6]
 8002040:	b29a      	uxth	r2, r3
 8002042:	4b07      	ldr	r3, [pc, #28]	@ (8002060 <I2C3_MulitByteRead+0x3c>)
 8002044:	9302      	str	r3, [sp, #8]
 8002046:	88bb      	ldrh	r3, [r7, #4]
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	2301      	movs	r3, #1
 8002050:	4804      	ldr	r0, [pc, #16]	@ (8002064 <I2C3_MulitByteRead+0x40>)
 8002052:	f000 fed9 	bl	8002e08 <HAL_I2C_Mem_Read>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	0003d090 	.word	0x0003d090
 8002064:	20025b24 	.word	0x20025b24

08002068 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800207c:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <SystemInit+0x20>)
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002082:	4a05      	ldr	r2, [pc, #20]	@ (8002098 <SystemInit+0x20>)
 8002084:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002088:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800209c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020a0:	f7ff ffea 	bl	8002078 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020a4:	480c      	ldr	r0, [pc, #48]	@ (80020d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020a6:	490d      	ldr	r1, [pc, #52]	@ (80020dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020a8:	4a0d      	ldr	r2, [pc, #52]	@ (80020e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ac:	e002      	b.n	80020b4 <LoopCopyDataInit>

080020ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020b2:	3304      	adds	r3, #4

080020b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b8:	d3f9      	bcc.n	80020ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ba:	4a0a      	ldr	r2, [pc, #40]	@ (80020e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020bc:	4c0a      	ldr	r4, [pc, #40]	@ (80020e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c0:	e001      	b.n	80020c6 <LoopFillZerobss>

080020c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c4:	3204      	adds	r2, #4

080020c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c8:	d3fb      	bcc.n	80020c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80020ca:	f003 fbd3 	bl	8005874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ce:	f7fe ffaa 	bl	8001026 <main>
  bx  lr    
 80020d2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80020d4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80020d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020dc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80020e0:	08006acc 	.word	0x08006acc
  ldr r2, =_sbss
 80020e4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80020e8:	20025b80 	.word	0x20025b80

080020ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020ec:	e7fe      	b.n	80020ec <ADC_IRQHandler>
	...

080020f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002130 <HAL_Init+0x40>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002130 <HAL_Init+0x40>)
 80020fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002100:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <HAL_Init+0x40>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0a      	ldr	r2, [pc, #40]	@ (8002130 <HAL_Init+0x40>)
 8002106:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800210a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800210c:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <HAL_Init+0x40>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a07      	ldr	r2, [pc, #28]	@ (8002130 <HAL_Init+0x40>)
 8002112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002116:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002118:	2003      	movs	r0, #3
 800211a:	f000 f931 	bl	8002380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800211e:	2000      	movs	r0, #0
 8002120:	f000 f808 	bl	8002134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002124:	f7ff fb42 	bl	80017ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40023c00 	.word	0x40023c00

08002134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800213c:	4b12      	ldr	r3, [pc, #72]	@ (8002188 <HAL_InitTick+0x54>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b12      	ldr	r3, [pc, #72]	@ (800218c <HAL_InitTick+0x58>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	4619      	mov	r1, r3
 8002146:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800214a:	fbb3 f3f1 	udiv	r3, r3, r1
 800214e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f93b 	bl	80023ce <HAL_SYSTICK_Config>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e00e      	b.n	8002180 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b0f      	cmp	r3, #15
 8002166:	d80a      	bhi.n	800217e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002168:	2200      	movs	r2, #0
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002170:	f000 f911 	bl	8002396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002174:	4a06      	ldr	r2, [pc, #24]	@ (8002190 <HAL_InitTick+0x5c>)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	e000      	b.n	8002180 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
}
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000010 	.word	0x20000010
 800218c:	20000018 	.word	0x20000018
 8002190:	20000014 	.word	0x20000014

08002194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002198:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <HAL_IncTick+0x20>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <HAL_IncTick+0x24>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4413      	add	r3, r2
 80021a4:	4a04      	ldr	r2, [pc, #16]	@ (80021b8 <HAL_IncTick+0x24>)
 80021a6:	6013      	str	r3, [r2, #0]
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000018 	.word	0x20000018
 80021b8:	20025b7c 	.word	0x20025b7c

080021bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return uwTick;
 80021c0:	4b03      	ldr	r3, [pc, #12]	@ (80021d0 <HAL_GetTick+0x14>)
 80021c2:	681b      	ldr	r3, [r3, #0]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	20025b7c 	.word	0x20025b7c

080021d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021dc:	f7ff ffee 	bl	80021bc <HAL_GetTick>
 80021e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021ec:	d005      	beq.n	80021fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002218 <HAL_Delay+0x44>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4413      	add	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021fa:	bf00      	nop
 80021fc:	f7ff ffde 	bl	80021bc <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	429a      	cmp	r2, r3
 800220a:	d8f7      	bhi.n	80021fc <HAL_Delay+0x28>
  {
  }
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000018 	.word	0x20000018

0800221c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800222c:	4b0c      	ldr	r3, [pc, #48]	@ (8002260 <__NVIC_SetPriorityGrouping+0x44>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002238:	4013      	ands	r3, r2
 800223a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002244:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800224c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800224e:	4a04      	ldr	r2, [pc, #16]	@ (8002260 <__NVIC_SetPriorityGrouping+0x44>)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	60d3      	str	r3, [r2, #12]
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002268:	4b04      	ldr	r3, [pc, #16]	@ (800227c <__NVIC_GetPriorityGrouping+0x18>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	0a1b      	lsrs	r3, r3, #8
 800226e:	f003 0307 	and.w	r3, r3, #7
}
 8002272:	4618      	mov	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	6039      	str	r1, [r7, #0]
 800228a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	2b00      	cmp	r3, #0
 8002292:	db0a      	blt.n	80022aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	490c      	ldr	r1, [pc, #48]	@ (80022cc <__NVIC_SetPriority+0x4c>)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	0112      	lsls	r2, r2, #4
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	440b      	add	r3, r1
 80022a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a8:	e00a      	b.n	80022c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4908      	ldr	r1, [pc, #32]	@ (80022d0 <__NVIC_SetPriority+0x50>)
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	3b04      	subs	r3, #4
 80022b8:	0112      	lsls	r2, r2, #4
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	440b      	add	r3, r1
 80022be:	761a      	strb	r2, [r3, #24]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000e100 	.word	0xe000e100
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	@ 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f1c3 0307 	rsb	r3, r3, #7
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	bf28      	it	cs
 80022f2:	2304      	movcs	r3, #4
 80022f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3304      	adds	r3, #4
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d902      	bls.n	8002304 <NVIC_EncodePriority+0x30>
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3b03      	subs	r3, #3
 8002302:	e000      	b.n	8002306 <NVIC_EncodePriority+0x32>
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002308:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	401a      	ands	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800231c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	43d9      	mvns	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	4313      	orrs	r3, r2
         );
}
 800232e:	4618      	mov	r0, r3
 8002330:	3724      	adds	r7, #36	@ 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800234c:	d301      	bcc.n	8002352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800234e:	2301      	movs	r3, #1
 8002350:	e00f      	b.n	8002372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002352:	4a0a      	ldr	r2, [pc, #40]	@ (800237c <SysTick_Config+0x40>)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235a:	210f      	movs	r1, #15
 800235c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002360:	f7ff ff8e 	bl	8002280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002364:	4b05      	ldr	r3, [pc, #20]	@ (800237c <SysTick_Config+0x40>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236a:	4b04      	ldr	r3, [pc, #16]	@ (800237c <SysTick_Config+0x40>)
 800236c:	2207      	movs	r2, #7
 800236e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	e000e010 	.word	0xe000e010

08002380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ff47 	bl	800221c <__NVIC_SetPriorityGrouping>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af00      	add	r7, sp, #0
 800239c:	4603      	mov	r3, r0
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023a8:	f7ff ff5c 	bl	8002264 <__NVIC_GetPriorityGrouping>
 80023ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	68b9      	ldr	r1, [r7, #8]
 80023b2:	6978      	ldr	r0, [r7, #20]
 80023b4:	f7ff ff8e 	bl	80022d4 <NVIC_EncodePriority>
 80023b8:	4602      	mov	r2, r0
 80023ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023be:	4611      	mov	r1, r2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ff5d 	bl	8002280 <__NVIC_SetPriority>
}
 80023c6:	bf00      	nop
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff ffb0 	bl	800233c <SysTick_Config>
 80023dc:	4603      	mov	r3, r0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	@ 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	e177      	b.n	80026f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002404:	2201      	movs	r2, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	429a      	cmp	r2, r3
 800241e:	f040 8166 	bne.w	80026ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d005      	beq.n	800243a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002436:	2b02      	cmp	r3, #2
 8002438:	d130      	bne.n	800249c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	2203      	movs	r2, #3
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002470:	2201      	movs	r2, #1
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 0201 	and.w	r2, r3, #1
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d017      	beq.n	80024d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d123      	bne.n	800252c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	08da      	lsrs	r2, r3, #3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3208      	adds	r2, #8
 80024ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	220f      	movs	r2, #15
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	08da      	lsrs	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3208      	adds	r2, #8
 8002526:	69b9      	ldr	r1, [r7, #24]
 8002528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0203 	and.w	r2, r3, #3
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80c0 	beq.w	80026ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b66      	ldr	r3, [pc, #408]	@ (800270c <HAL_GPIO_Init+0x324>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002576:	4a65      	ldr	r2, [pc, #404]	@ (800270c <HAL_GPIO_Init+0x324>)
 8002578:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800257c:	6453      	str	r3, [r2, #68]	@ 0x44
 800257e:	4b63      	ldr	r3, [pc, #396]	@ (800270c <HAL_GPIO_Init+0x324>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800258a:	4a61      	ldr	r2, [pc, #388]	@ (8002710 <HAL_GPIO_Init+0x328>)
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	089b      	lsrs	r3, r3, #2
 8002590:	3302      	adds	r3, #2
 8002592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	220f      	movs	r2, #15
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a58      	ldr	r2, [pc, #352]	@ (8002714 <HAL_GPIO_Init+0x32c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d037      	beq.n	8002626 <HAL_GPIO_Init+0x23e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a57      	ldr	r2, [pc, #348]	@ (8002718 <HAL_GPIO_Init+0x330>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d031      	beq.n	8002622 <HAL_GPIO_Init+0x23a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a56      	ldr	r2, [pc, #344]	@ (800271c <HAL_GPIO_Init+0x334>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d02b      	beq.n	800261e <HAL_GPIO_Init+0x236>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a55      	ldr	r2, [pc, #340]	@ (8002720 <HAL_GPIO_Init+0x338>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d025      	beq.n	800261a <HAL_GPIO_Init+0x232>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a54      	ldr	r2, [pc, #336]	@ (8002724 <HAL_GPIO_Init+0x33c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d01f      	beq.n	8002616 <HAL_GPIO_Init+0x22e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a53      	ldr	r2, [pc, #332]	@ (8002728 <HAL_GPIO_Init+0x340>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d019      	beq.n	8002612 <HAL_GPIO_Init+0x22a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a52      	ldr	r2, [pc, #328]	@ (800272c <HAL_GPIO_Init+0x344>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d013      	beq.n	800260e <HAL_GPIO_Init+0x226>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a51      	ldr	r2, [pc, #324]	@ (8002730 <HAL_GPIO_Init+0x348>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00d      	beq.n	800260a <HAL_GPIO_Init+0x222>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a50      	ldr	r2, [pc, #320]	@ (8002734 <HAL_GPIO_Init+0x34c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d007      	beq.n	8002606 <HAL_GPIO_Init+0x21e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a4f      	ldr	r2, [pc, #316]	@ (8002738 <HAL_GPIO_Init+0x350>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d101      	bne.n	8002602 <HAL_GPIO_Init+0x21a>
 80025fe:	2309      	movs	r3, #9
 8002600:	e012      	b.n	8002628 <HAL_GPIO_Init+0x240>
 8002602:	230a      	movs	r3, #10
 8002604:	e010      	b.n	8002628 <HAL_GPIO_Init+0x240>
 8002606:	2308      	movs	r3, #8
 8002608:	e00e      	b.n	8002628 <HAL_GPIO_Init+0x240>
 800260a:	2307      	movs	r3, #7
 800260c:	e00c      	b.n	8002628 <HAL_GPIO_Init+0x240>
 800260e:	2306      	movs	r3, #6
 8002610:	e00a      	b.n	8002628 <HAL_GPIO_Init+0x240>
 8002612:	2305      	movs	r3, #5
 8002614:	e008      	b.n	8002628 <HAL_GPIO_Init+0x240>
 8002616:	2304      	movs	r3, #4
 8002618:	e006      	b.n	8002628 <HAL_GPIO_Init+0x240>
 800261a:	2303      	movs	r3, #3
 800261c:	e004      	b.n	8002628 <HAL_GPIO_Init+0x240>
 800261e:	2302      	movs	r3, #2
 8002620:	e002      	b.n	8002628 <HAL_GPIO_Init+0x240>
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <HAL_GPIO_Init+0x240>
 8002626:	2300      	movs	r3, #0
 8002628:	69fa      	ldr	r2, [r7, #28]
 800262a:	f002 0203 	and.w	r2, r2, #3
 800262e:	0092      	lsls	r2, r2, #2
 8002630:	4093      	lsls	r3, r2
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002638:	4935      	ldr	r1, [pc, #212]	@ (8002710 <HAL_GPIO_Init+0x328>)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	089b      	lsrs	r3, r3, #2
 800263e:	3302      	adds	r3, #2
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002646:	4b3d      	ldr	r3, [pc, #244]	@ (800273c <HAL_GPIO_Init+0x354>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800266a:	4a34      	ldr	r2, [pc, #208]	@ (800273c <HAL_GPIO_Init+0x354>)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002670:	4b32      	ldr	r3, [pc, #200]	@ (800273c <HAL_GPIO_Init+0x354>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002694:	4a29      	ldr	r2, [pc, #164]	@ (800273c <HAL_GPIO_Init+0x354>)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800269a:	4b28      	ldr	r3, [pc, #160]	@ (800273c <HAL_GPIO_Init+0x354>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026be:	4a1f      	ldr	r2, [pc, #124]	@ (800273c <HAL_GPIO_Init+0x354>)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c4:	4b1d      	ldr	r3, [pc, #116]	@ (800273c <HAL_GPIO_Init+0x354>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e8:	4a14      	ldr	r2, [pc, #80]	@ (800273c <HAL_GPIO_Init+0x354>)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3301      	adds	r3, #1
 80026f2:	61fb      	str	r3, [r7, #28]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	2b0f      	cmp	r3, #15
 80026f8:	f67f ae84 	bls.w	8002404 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	3724      	adds	r7, #36	@ 0x24
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800
 8002710:	40013800 	.word	0x40013800
 8002714:	40020000 	.word	0x40020000
 8002718:	40020400 	.word	0x40020400
 800271c:	40020800 	.word	0x40020800
 8002720:	40020c00 	.word	0x40020c00
 8002724:	40021000 	.word	0x40021000
 8002728:	40021400 	.word	0x40021400
 800272c:	40021800 	.word	0x40021800
 8002730:	40021c00 	.word	0x40021c00
 8002734:	40022000 	.word	0x40022000
 8002738:	40022400 	.word	0x40022400
 800273c:	40013c00 	.word	0x40013c00

08002740 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	e0d9      	b.n	8002910 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800275c:	2201      	movs	r2, #1
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4013      	ands	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	429a      	cmp	r2, r3
 8002774:	f040 80c9 	bne.w	800290a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002778:	4a6b      	ldr	r2, [pc, #428]	@ (8002928 <HAL_GPIO_DeInit+0x1e8>)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	3302      	adds	r3, #2
 8002780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002784:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	220f      	movs	r2, #15
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	4013      	ands	r3, r2
 8002798:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a63      	ldr	r2, [pc, #396]	@ (800292c <HAL_GPIO_DeInit+0x1ec>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d037      	beq.n	8002812 <HAL_GPIO_DeInit+0xd2>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a62      	ldr	r2, [pc, #392]	@ (8002930 <HAL_GPIO_DeInit+0x1f0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d031      	beq.n	800280e <HAL_GPIO_DeInit+0xce>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a61      	ldr	r2, [pc, #388]	@ (8002934 <HAL_GPIO_DeInit+0x1f4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d02b      	beq.n	800280a <HAL_GPIO_DeInit+0xca>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a60      	ldr	r2, [pc, #384]	@ (8002938 <HAL_GPIO_DeInit+0x1f8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d025      	beq.n	8002806 <HAL_GPIO_DeInit+0xc6>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a5f      	ldr	r2, [pc, #380]	@ (800293c <HAL_GPIO_DeInit+0x1fc>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d01f      	beq.n	8002802 <HAL_GPIO_DeInit+0xc2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a5e      	ldr	r2, [pc, #376]	@ (8002940 <HAL_GPIO_DeInit+0x200>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d019      	beq.n	80027fe <HAL_GPIO_DeInit+0xbe>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a5d      	ldr	r2, [pc, #372]	@ (8002944 <HAL_GPIO_DeInit+0x204>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d013      	beq.n	80027fa <HAL_GPIO_DeInit+0xba>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a5c      	ldr	r2, [pc, #368]	@ (8002948 <HAL_GPIO_DeInit+0x208>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00d      	beq.n	80027f6 <HAL_GPIO_DeInit+0xb6>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a5b      	ldr	r2, [pc, #364]	@ (800294c <HAL_GPIO_DeInit+0x20c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d007      	beq.n	80027f2 <HAL_GPIO_DeInit+0xb2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a5a      	ldr	r2, [pc, #360]	@ (8002950 <HAL_GPIO_DeInit+0x210>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d101      	bne.n	80027ee <HAL_GPIO_DeInit+0xae>
 80027ea:	2309      	movs	r3, #9
 80027ec:	e012      	b.n	8002814 <HAL_GPIO_DeInit+0xd4>
 80027ee:	230a      	movs	r3, #10
 80027f0:	e010      	b.n	8002814 <HAL_GPIO_DeInit+0xd4>
 80027f2:	2308      	movs	r3, #8
 80027f4:	e00e      	b.n	8002814 <HAL_GPIO_DeInit+0xd4>
 80027f6:	2307      	movs	r3, #7
 80027f8:	e00c      	b.n	8002814 <HAL_GPIO_DeInit+0xd4>
 80027fa:	2306      	movs	r3, #6
 80027fc:	e00a      	b.n	8002814 <HAL_GPIO_DeInit+0xd4>
 80027fe:	2305      	movs	r3, #5
 8002800:	e008      	b.n	8002814 <HAL_GPIO_DeInit+0xd4>
 8002802:	2304      	movs	r3, #4
 8002804:	e006      	b.n	8002814 <HAL_GPIO_DeInit+0xd4>
 8002806:	2303      	movs	r3, #3
 8002808:	e004      	b.n	8002814 <HAL_GPIO_DeInit+0xd4>
 800280a:	2302      	movs	r3, #2
 800280c:	e002      	b.n	8002814 <HAL_GPIO_DeInit+0xd4>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_GPIO_DeInit+0xd4>
 8002812:	2300      	movs	r3, #0
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	f002 0203 	and.w	r2, r2, #3
 800281a:	0092      	lsls	r2, r2, #2
 800281c:	4093      	lsls	r3, r2
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	429a      	cmp	r2, r3
 8002822:	d132      	bne.n	800288a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002824:	4b4b      	ldr	r3, [pc, #300]	@ (8002954 <HAL_GPIO_DeInit+0x214>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	43db      	mvns	r3, r3
 800282c:	4949      	ldr	r1, [pc, #292]	@ (8002954 <HAL_GPIO_DeInit+0x214>)
 800282e:	4013      	ands	r3, r2
 8002830:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002832:	4b48      	ldr	r3, [pc, #288]	@ (8002954 <HAL_GPIO_DeInit+0x214>)
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	43db      	mvns	r3, r3
 800283a:	4946      	ldr	r1, [pc, #280]	@ (8002954 <HAL_GPIO_DeInit+0x214>)
 800283c:	4013      	ands	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002840:	4b44      	ldr	r3, [pc, #272]	@ (8002954 <HAL_GPIO_DeInit+0x214>)
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	43db      	mvns	r3, r3
 8002848:	4942      	ldr	r1, [pc, #264]	@ (8002954 <HAL_GPIO_DeInit+0x214>)
 800284a:	4013      	ands	r3, r2
 800284c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800284e:	4b41      	ldr	r3, [pc, #260]	@ (8002954 <HAL_GPIO_DeInit+0x214>)
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	43db      	mvns	r3, r3
 8002856:	493f      	ldr	r1, [pc, #252]	@ (8002954 <HAL_GPIO_DeInit+0x214>)
 8002858:	4013      	ands	r3, r2
 800285a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	220f      	movs	r2, #15
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800286c:	4a2e      	ldr	r2, [pc, #184]	@ (8002928 <HAL_GPIO_DeInit+0x1e8>)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	089b      	lsrs	r3, r3, #2
 8002872:	3302      	adds	r3, #2
 8002874:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	43da      	mvns	r2, r3
 800287c:	482a      	ldr	r0, [pc, #168]	@ (8002928 <HAL_GPIO_DeInit+0x1e8>)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	089b      	lsrs	r3, r3, #2
 8002882:	400a      	ands	r2, r1
 8002884:	3302      	adds	r3, #2
 8002886:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2103      	movs	r1, #3
 8002894:	fa01 f303 	lsl.w	r3, r1, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	401a      	ands	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	08da      	lsrs	r2, r3, #3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3208      	adds	r2, #8
 80028a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	220f      	movs	r2, #15
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	08d2      	lsrs	r2, r2, #3
 80028c0:	4019      	ands	r1, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3208      	adds	r2, #8
 80028c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	2103      	movs	r1, #3
 80028d4:	fa01 f303 	lsl.w	r3, r1, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	401a      	ands	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	2101      	movs	r1, #1
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	401a      	ands	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	2103      	movs	r1, #3
 80028fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	401a      	ands	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	3301      	adds	r3, #1
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2b0f      	cmp	r3, #15
 8002914:	f67f af22 	bls.w	800275c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	371c      	adds	r7, #28
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40013800 	.word	0x40013800
 800292c:	40020000 	.word	0x40020000
 8002930:	40020400 	.word	0x40020400
 8002934:	40020800 	.word	0x40020800
 8002938:	40020c00 	.word	0x40020c00
 800293c:	40021000 	.word	0x40021000
 8002940:	40021400 	.word	0x40021400
 8002944:	40021800 	.word	0x40021800
 8002948:	40021c00 	.word	0x40021c00
 800294c:	40022000 	.word	0x40022000
 8002950:	40022400 	.word	0x40022400
 8002954:	40013c00 	.word	0x40013c00

08002958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]
 8002964:	4613      	mov	r3, r2
 8002966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002968:	787b      	ldrb	r3, [r7, #1]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800296e:	887a      	ldrh	r2, [r7, #2]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002974:	e003      	b.n	800297e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002976:	887b      	ldrh	r3, [r7, #2]
 8002978:	041a      	lsls	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	619a      	str	r2, [r3, #24]
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
	...

0800298c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e12b      	b.n	8002bf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe ff22 	bl	80017fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2224      	movs	r2, #36	@ 0x24
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0201 	bic.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029f0:	f001 ff82 	bl	80048f8 <HAL_RCC_GetPCLK1Freq>
 80029f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4a81      	ldr	r2, [pc, #516]	@ (8002c00 <HAL_I2C_Init+0x274>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d807      	bhi.n	8002a10 <HAL_I2C_Init+0x84>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4a80      	ldr	r2, [pc, #512]	@ (8002c04 <HAL_I2C_Init+0x278>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	bf94      	ite	ls
 8002a08:	2301      	movls	r3, #1
 8002a0a:	2300      	movhi	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	e006      	b.n	8002a1e <HAL_I2C_Init+0x92>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4a7d      	ldr	r2, [pc, #500]	@ (8002c08 <HAL_I2C_Init+0x27c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	bf94      	ite	ls
 8002a18:	2301      	movls	r3, #1
 8002a1a:	2300      	movhi	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e0e7      	b.n	8002bf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a78      	ldr	r2, [pc, #480]	@ (8002c0c <HAL_I2C_Init+0x280>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	0c9b      	lsrs	r3, r3, #18
 8002a30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a6a      	ldr	r2, [pc, #424]	@ (8002c00 <HAL_I2C_Init+0x274>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d802      	bhi.n	8002a60 <HAL_I2C_Init+0xd4>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	e009      	b.n	8002a74 <HAL_I2C_Init+0xe8>
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	4a69      	ldr	r2, [pc, #420]	@ (8002c10 <HAL_I2C_Init+0x284>)
 8002a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a70:	099b      	lsrs	r3, r3, #6
 8002a72:	3301      	adds	r3, #1
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	495c      	ldr	r1, [pc, #368]	@ (8002c00 <HAL_I2C_Init+0x274>)
 8002a90:	428b      	cmp	r3, r1
 8002a92:	d819      	bhi.n	8002ac8 <HAL_I2C_Init+0x13c>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1e59      	subs	r1, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aa2:	1c59      	adds	r1, r3, #1
 8002aa4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002aa8:	400b      	ands	r3, r1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_I2C_Init+0x138>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1e59      	subs	r1, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002abc:	3301      	adds	r3, #1
 8002abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac2:	e051      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002ac4:	2304      	movs	r3, #4
 8002ac6:	e04f      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d111      	bne.n	8002af4 <HAL_I2C_Init+0x168>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1e58      	subs	r0, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	440b      	add	r3, r1
 8002ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	e012      	b.n	8002b1a <HAL_I2C_Init+0x18e>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1e58      	subs	r0, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	0099      	lsls	r1, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_I2C_Init+0x196>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e022      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10e      	bne.n	8002b48 <HAL_I2C_Init+0x1bc>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1e58      	subs	r0, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6859      	ldr	r1, [r3, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	440b      	add	r3, r1
 8002b38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b46:	e00f      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1e58      	subs	r0, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	0099      	lsls	r1, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	6809      	ldr	r1, [r1, #0]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69da      	ldr	r2, [r3, #28]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6911      	ldr	r1, [r2, #16]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68d2      	ldr	r2, [r2, #12]
 8002ba2:	4311      	orrs	r1, r2
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	000186a0 	.word	0x000186a0
 8002c04:	001e847f 	.word	0x001e847f
 8002c08:	003d08ff 	.word	0x003d08ff
 8002c0c:	431bde83 	.word	0x431bde83
 8002c10:	10624dd3 	.word	0x10624dd3

08002c14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	4608      	mov	r0, r1
 8002c1e:	4611      	mov	r1, r2
 8002c20:	461a      	mov	r2, r3
 8002c22:	4603      	mov	r3, r0
 8002c24:	817b      	strh	r3, [r7, #10]
 8002c26:	460b      	mov	r3, r1
 8002c28:	813b      	strh	r3, [r7, #8]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c2e:	f7ff fac5 	bl	80021bc <HAL_GetTick>
 8002c32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	f040 80d9 	bne.w	8002df4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	2319      	movs	r3, #25
 8002c48:	2201      	movs	r2, #1
 8002c4a:	496d      	ldr	r1, [pc, #436]	@ (8002e00 <HAL_I2C_Mem_Write+0x1ec>)
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 fc8b 	bl	8003568 <I2C_WaitOnFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e0cc      	b.n	8002df6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_I2C_Mem_Write+0x56>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e0c5      	b.n	8002df6 <HAL_I2C_Mem_Write+0x1e2>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d007      	beq.n	8002c90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2221      	movs	r2, #33	@ 0x21
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2240      	movs	r2, #64	@ 0x40
 8002cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a3a      	ldr	r2, [r7, #32]
 8002cba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4a4d      	ldr	r2, [pc, #308]	@ (8002e04 <HAL_I2C_Mem_Write+0x1f0>)
 8002cd0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cd2:	88f8      	ldrh	r0, [r7, #6]
 8002cd4:	893a      	ldrh	r2, [r7, #8]
 8002cd6:	8979      	ldrh	r1, [r7, #10]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	9301      	str	r3, [sp, #4]
 8002cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 fac2 	bl	800326c <I2C_RequestMemoryWrite>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d052      	beq.n	8002d94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e081      	b.n	8002df6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 fd50 	bl	800379c <I2C_WaitOnTXEFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00d      	beq.n	8002d1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d107      	bne.n	8002d1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e06b      	b.n	8002df6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d22:	781a      	ldrb	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d11b      	bne.n	8002d94 <HAL_I2C_Mem_Write+0x180>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d017      	beq.n	8002d94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d68:	781a      	ldrb	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1aa      	bne.n	8002cf2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 fd43 	bl	800382c <I2C_WaitOnBTFFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00d      	beq.n	8002dc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d107      	bne.n	8002dc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e016      	b.n	8002df6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	00100002 	.word	0x00100002
 8002e04:	ffff0000 	.word	0xffff0000

08002e08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08c      	sub	sp, #48	@ 0x30
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	4608      	mov	r0, r1
 8002e12:	4611      	mov	r1, r2
 8002e14:	461a      	mov	r2, r3
 8002e16:	4603      	mov	r3, r0
 8002e18:	817b      	strh	r3, [r7, #10]
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	813b      	strh	r3, [r7, #8]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e22:	f7ff f9cb 	bl	80021bc <HAL_GetTick>
 8002e26:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	f040 8214 	bne.w	800325e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	2319      	movs	r3, #25
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	497b      	ldr	r1, [pc, #492]	@ (800302c <HAL_I2C_Mem_Read+0x224>)
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 fb91 	bl	8003568 <I2C_WaitOnFlagUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e207      	b.n	8003260 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_I2C_Mem_Read+0x56>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e200      	b.n	8003260 <HAL_I2C_Mem_Read+0x458>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d007      	beq.n	8002e84 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2222      	movs	r2, #34	@ 0x22
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2240      	movs	r2, #64	@ 0x40
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4a5b      	ldr	r2, [pc, #364]	@ (8003030 <HAL_I2C_Mem_Read+0x228>)
 8002ec4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ec6:	88f8      	ldrh	r0, [r7, #6]
 8002ec8:	893a      	ldrh	r2, [r7, #8]
 8002eca:	8979      	ldrh	r1, [r7, #10]
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ece:	9301      	str	r3, [sp, #4]
 8002ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 fa5e 	bl	8003398 <I2C_RequestMemoryRead>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e1bc      	b.n	8003260 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d113      	bne.n	8002f16 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eee:	2300      	movs	r3, #0
 8002ef0:	623b      	str	r3, [r7, #32]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	623b      	str	r3, [r7, #32]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	623b      	str	r3, [r7, #32]
 8002f02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	e190      	b.n	8003238 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d11b      	bne.n	8002f56 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	61fb      	str	r3, [r7, #28]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	e170      	b.n	8003238 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d11b      	bne.n	8002f96 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61bb      	str	r3, [r7, #24]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	61bb      	str	r3, [r7, #24]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	61bb      	str	r3, [r7, #24]
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	e150      	b.n	8003238 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002fac:	e144      	b.n	8003238 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	f200 80f1 	bhi.w	800319a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d123      	bne.n	8003008 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 fc79 	bl	80038bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e145      	b.n	8003260 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003006:	e117      	b.n	8003238 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300c:	2b02      	cmp	r3, #2
 800300e:	d14e      	bne.n	80030ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003016:	2200      	movs	r2, #0
 8003018:	4906      	ldr	r1, [pc, #24]	@ (8003034 <HAL_I2C_Mem_Read+0x22c>)
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 faa4 	bl	8003568 <I2C_WaitOnFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d008      	beq.n	8003038 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e11a      	b.n	8003260 <HAL_I2C_Mem_Read+0x458>
 800302a:	bf00      	nop
 800302c:	00100002 	.word	0x00100002
 8003030:	ffff0000 	.word	0xffff0000
 8003034:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691a      	ldr	r2, [r3, #16]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003070:	b29b      	uxth	r3, r3
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030ac:	e0c4      	b.n	8003238 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b4:	2200      	movs	r2, #0
 80030b6:	496c      	ldr	r1, [pc, #432]	@ (8003268 <HAL_I2C_Mem_Read+0x460>)
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 fa55 	bl	8003568 <I2C_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0cb      	b.n	8003260 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003110:	2200      	movs	r2, #0
 8003112:	4955      	ldr	r1, [pc, #340]	@ (8003268 <HAL_I2C_Mem_Read+0x460>)
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 fa27 	bl	8003568 <I2C_WaitOnFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e09d      	b.n	8003260 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003132:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691a      	ldr	r2, [r3, #16]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800315c:	b29b      	uxth	r3, r3
 800315e:	3b01      	subs	r3, #1
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318e:	b29b      	uxth	r3, r3
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003198:	e04e      	b.n	8003238 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800319a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800319c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 fb8c 	bl	80038bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e058      	b.n	8003260 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d124      	bne.n	8003238 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d107      	bne.n	8003206 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003204:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323c:	2b00      	cmp	r3, #0
 800323e:	f47f aeb6 	bne.w	8002fae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2220      	movs	r2, #32
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	e000      	b.n	8003260 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800325e:	2302      	movs	r3, #2
  }
}
 8003260:	4618      	mov	r0, r3
 8003262:	3728      	adds	r7, #40	@ 0x28
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	00010004 	.word	0x00010004

0800326c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b088      	sub	sp, #32
 8003270:	af02      	add	r7, sp, #8
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	4608      	mov	r0, r1
 8003276:	4611      	mov	r1, r2
 8003278:	461a      	mov	r2, r3
 800327a:	4603      	mov	r3, r0
 800327c:	817b      	strh	r3, [r7, #10]
 800327e:	460b      	mov	r3, r1
 8003280:	813b      	strh	r3, [r7, #8]
 8003282:	4613      	mov	r3, r2
 8003284:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003294:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	2200      	movs	r2, #0
 800329e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 f960 	bl	8003568 <I2C_WaitOnFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00d      	beq.n	80032ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032bc:	d103      	bne.n	80032c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e05f      	b.n	800338a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ca:	897b      	ldrh	r3, [r7, #10]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032dc:	6a3a      	ldr	r2, [r7, #32]
 80032de:	492d      	ldr	r1, [pc, #180]	@ (8003394 <I2C_RequestMemoryWrite+0x128>)
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f9bb 	bl	800365c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e04c      	b.n	800338a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003308:	6a39      	ldr	r1, [r7, #32]
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 fa46 	bl	800379c <I2C_WaitOnTXEFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00d      	beq.n	8003332 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331a:	2b04      	cmp	r3, #4
 800331c:	d107      	bne.n	800332e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800332c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e02b      	b.n	800338a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d105      	bne.n	8003344 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003338:	893b      	ldrh	r3, [r7, #8]
 800333a:	b2da      	uxtb	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	611a      	str	r2, [r3, #16]
 8003342:	e021      	b.n	8003388 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003344:	893b      	ldrh	r3, [r7, #8]
 8003346:	0a1b      	lsrs	r3, r3, #8
 8003348:	b29b      	uxth	r3, r3
 800334a:	b2da      	uxtb	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003354:	6a39      	ldr	r1, [r7, #32]
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 fa20 	bl	800379c <I2C_WaitOnTXEFlagUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00d      	beq.n	800337e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	2b04      	cmp	r3, #4
 8003368:	d107      	bne.n	800337a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003378:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e005      	b.n	800338a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800337e:	893b      	ldrh	r3, [r7, #8]
 8003380:	b2da      	uxtb	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	00010002 	.word	0x00010002

08003398 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af02      	add	r7, sp, #8
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	4608      	mov	r0, r1
 80033a2:	4611      	mov	r1, r2
 80033a4:	461a      	mov	r2, r3
 80033a6:	4603      	mov	r3, r0
 80033a8:	817b      	strh	r3, [r7, #10]
 80033aa:	460b      	mov	r3, r1
 80033ac:	813b      	strh	r3, [r7, #8]
 80033ae:	4613      	mov	r3, r2
 80033b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	2200      	movs	r2, #0
 80033da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f8c2 	bl	8003568 <I2C_WaitOnFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00d      	beq.n	8003406 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033f8:	d103      	bne.n	8003402 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003400:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e0aa      	b.n	800355c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003406:	897b      	ldrh	r3, [r7, #10]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003414:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003418:	6a3a      	ldr	r2, [r7, #32]
 800341a:	4952      	ldr	r1, [pc, #328]	@ (8003564 <I2C_RequestMemoryRead+0x1cc>)
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f91d 	bl	800365c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e097      	b.n	800355c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003444:	6a39      	ldr	r1, [r7, #32]
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f9a8 	bl	800379c <I2C_WaitOnTXEFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00d      	beq.n	800346e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	2b04      	cmp	r3, #4
 8003458:	d107      	bne.n	800346a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003468:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e076      	b.n	800355c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800346e:	88fb      	ldrh	r3, [r7, #6]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d105      	bne.n	8003480 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003474:	893b      	ldrh	r3, [r7, #8]
 8003476:	b2da      	uxtb	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	611a      	str	r2, [r3, #16]
 800347e:	e021      	b.n	80034c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003480:	893b      	ldrh	r3, [r7, #8]
 8003482:	0a1b      	lsrs	r3, r3, #8
 8003484:	b29b      	uxth	r3, r3
 8003486:	b2da      	uxtb	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800348e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003490:	6a39      	ldr	r1, [r7, #32]
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 f982 	bl	800379c <I2C_WaitOnTXEFlagUntilTimeout>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00d      	beq.n	80034ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d107      	bne.n	80034b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e050      	b.n	800355c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034ba:	893b      	ldrh	r3, [r7, #8]
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c6:	6a39      	ldr	r1, [r7, #32]
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f967 	bl	800379c <I2C_WaitOnTXEFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00d      	beq.n	80034f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d107      	bne.n	80034ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e035      	b.n	800355c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	2200      	movs	r2, #0
 8003508:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f82b 	bl	8003568 <I2C_WaitOnFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00d      	beq.n	8003534 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003526:	d103      	bne.n	8003530 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800352e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e013      	b.n	800355c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003534:	897b      	ldrh	r3, [r7, #10]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	b2da      	uxtb	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003546:	6a3a      	ldr	r2, [r7, #32]
 8003548:	4906      	ldr	r1, [pc, #24]	@ (8003564 <I2C_RequestMemoryRead+0x1cc>)
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f886 	bl	800365c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	00010002 	.word	0x00010002

08003568 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	603b      	str	r3, [r7, #0]
 8003574:	4613      	mov	r3, r2
 8003576:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003578:	e048      	b.n	800360c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003580:	d044      	beq.n	800360c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003582:	f7fe fe1b 	bl	80021bc <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d302      	bcc.n	8003598 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d139      	bne.n	800360c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	0c1b      	lsrs	r3, r3, #16
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d10d      	bne.n	80035be <I2C_WaitOnFlagUntilTimeout+0x56>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	43da      	mvns	r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4013      	ands	r3, r2
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	bf0c      	ite	eq
 80035b4:	2301      	moveq	r3, #1
 80035b6:	2300      	movne	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	461a      	mov	r2, r3
 80035bc:	e00c      	b.n	80035d8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	43da      	mvns	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4013      	ands	r3, r2
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf0c      	ite	eq
 80035d0:	2301      	moveq	r3, #1
 80035d2:	2300      	movne	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d116      	bne.n	800360c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f8:	f043 0220 	orr.w	r2, r3, #32
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e023      	b.n	8003654 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	0c1b      	lsrs	r3, r3, #16
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b01      	cmp	r3, #1
 8003614:	d10d      	bne.n	8003632 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	43da      	mvns	r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	4013      	ands	r3, r2
 8003622:	b29b      	uxth	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	461a      	mov	r2, r3
 8003630:	e00c      	b.n	800364c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	43da      	mvns	r2, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	4013      	ands	r3, r2
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	bf0c      	ite	eq
 8003644:	2301      	moveq	r3, #1
 8003646:	2300      	movne	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	429a      	cmp	r2, r3
 8003650:	d093      	beq.n	800357a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800366a:	e071      	b.n	8003750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800367a:	d123      	bne.n	80036c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800368a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003694:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b0:	f043 0204 	orr.w	r2, r3, #4
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e067      	b.n	8003794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036ca:	d041      	beq.n	8003750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036cc:	f7fe fd76 	bl	80021bc <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d302      	bcc.n	80036e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d136      	bne.n	8003750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	0c1b      	lsrs	r3, r3, #16
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d10c      	bne.n	8003706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	43da      	mvns	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4013      	ands	r3, r2
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	bf14      	ite	ne
 80036fe:	2301      	movne	r3, #1
 8003700:	2300      	moveq	r3, #0
 8003702:	b2db      	uxtb	r3, r3
 8003704:	e00b      	b.n	800371e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	43da      	mvns	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4013      	ands	r3, r2
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf14      	ite	ne
 8003718:	2301      	movne	r3, #1
 800371a:	2300      	moveq	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d016      	beq.n	8003750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373c:	f043 0220 	orr.w	r2, r3, #32
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e021      	b.n	8003794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	0c1b      	lsrs	r3, r3, #16
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b01      	cmp	r3, #1
 8003758:	d10c      	bne.n	8003774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	43da      	mvns	r2, r3
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	4013      	ands	r3, r2
 8003766:	b29b      	uxth	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	bf14      	ite	ne
 800376c:	2301      	movne	r3, #1
 800376e:	2300      	moveq	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	e00b      	b.n	800378c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	43da      	mvns	r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4013      	ands	r3, r2
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	bf14      	ite	ne
 8003786:	2301      	movne	r3, #1
 8003788:	2300      	moveq	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	f47f af6d 	bne.w	800366c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037a8:	e034      	b.n	8003814 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f8e3 	bl	8003976 <I2C_IsAcknowledgeFailed>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e034      	b.n	8003824 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037c0:	d028      	beq.n	8003814 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c2:	f7fe fcfb 	bl	80021bc <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d302      	bcc.n	80037d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d11d      	bne.n	8003814 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e2:	2b80      	cmp	r3, #128	@ 0x80
 80037e4:	d016      	beq.n	8003814 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	f043 0220 	orr.w	r2, r3, #32
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e007      	b.n	8003824 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800381e:	2b80      	cmp	r3, #128	@ 0x80
 8003820:	d1c3      	bne.n	80037aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003838:	e034      	b.n	80038a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 f89b 	bl	8003976 <I2C_IsAcknowledgeFailed>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e034      	b.n	80038b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003850:	d028      	beq.n	80038a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003852:	f7fe fcb3 	bl	80021bc <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	429a      	cmp	r2, r3
 8003860:	d302      	bcc.n	8003868 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d11d      	bne.n	80038a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b04      	cmp	r3, #4
 8003874:	d016      	beq.n	80038a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003890:	f043 0220 	orr.w	r2, r3, #32
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e007      	b.n	80038b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d1c3      	bne.n	800383a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038c8:	e049      	b.n	800395e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b10      	cmp	r3, #16
 80038d6:	d119      	bne.n	800390c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0210 	mvn.w	r2, #16
 80038e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e030      	b.n	800396e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800390c:	f7fe fc56 	bl	80021bc <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	429a      	cmp	r2, r3
 800391a:	d302      	bcc.n	8003922 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d11d      	bne.n	800395e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800392c:	2b40      	cmp	r3, #64	@ 0x40
 800392e:	d016      	beq.n	800395e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2220      	movs	r2, #32
 800393a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394a:	f043 0220 	orr.w	r2, r3, #32
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e007      	b.n	800396e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003968:	2b40      	cmp	r3, #64	@ 0x40
 800396a:	d1ae      	bne.n	80038ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800398c:	d11b      	bne.n	80039c6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003996:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b2:	f043 0204 	orr.w	r2, r3, #4
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	d129      	bne.n	8003a3e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2224      	movs	r2, #36	@ 0x24
 80039ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0201 	bic.w	r2, r2, #1
 8003a00:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0210 	bic.w	r2, r2, #16
 8003a10:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0201 	orr.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e000      	b.n	8003a40 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003a3e:	2302      	movs	r3, #2
  }
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d12a      	bne.n	8003abc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2224      	movs	r2, #36	@ 0x24
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a84:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003a86:	89fb      	ldrh	r3, [r7, #14]
 8003a88:	f023 030f 	bic.w	r3, r3, #15
 8003a8c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	89fb      	ldrh	r3, [r7, #14]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	89fa      	ldrh	r2, [r7, #14]
 8003a9e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	e000      	b.n	8003abe <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003abc:	2302      	movs	r3, #2
  }
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e0bf      	b.n	8003c5e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fd feec 	bl	80018d0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699a      	ldr	r2, [r3, #24]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003b0e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6999      	ldr	r1, [r3, #24]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003b24:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6899      	ldr	r1, [r3, #8]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c68 <HAL_LTDC_Init+0x19c>)
 8003b40:	400b      	ands	r3, r1
 8003b42:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	041b      	lsls	r3, r3, #16
 8003b4a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6899      	ldr	r1, [r3, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68d9      	ldr	r1, [r3, #12]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	4b3e      	ldr	r3, [pc, #248]	@ (8003c68 <HAL_LTDC_Init+0x19c>)
 8003b6e:	400b      	ands	r3, r1
 8003b70:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	041b      	lsls	r3, r3, #16
 8003b78:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68d9      	ldr	r1, [r3, #12]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a1a      	ldr	r2, [r3, #32]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6919      	ldr	r1, [r3, #16]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	4b33      	ldr	r3, [pc, #204]	@ (8003c68 <HAL_LTDC_Init+0x19c>)
 8003b9c:	400b      	ands	r3, r1
 8003b9e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	041b      	lsls	r3, r3, #16
 8003ba6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6919      	ldr	r1, [r3, #16]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6959      	ldr	r1, [r3, #20]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4b27      	ldr	r3, [pc, #156]	@ (8003c68 <HAL_LTDC_Init+0x19c>)
 8003bca:	400b      	ands	r3, r1
 8003bcc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd2:	041b      	lsls	r3, r3, #16
 8003bd4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6959      	ldr	r1, [r3, #20]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bf2:	021b      	lsls	r3, r3, #8
 8003bf4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003bfc:	041b      	lsls	r3, r3, #16
 8003bfe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003c0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0206 	orr.w	r2, r2, #6
 8003c3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	f000f800 	.word	0xf000f800

08003c6c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003c6c:	b5b0      	push	{r4, r5, r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_LTDC_ConfigLayer+0x1a>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e02c      	b.n	8003ce0 <HAL_LTDC_ConfigLayer+0x74>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2202      	movs	r2, #2
 8003c92:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2134      	movs	r1, #52	@ 0x34
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	4614      	mov	r4, r2
 8003caa:	461d      	mov	r5, r3
 8003cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cb8:	682b      	ldr	r3, [r5, #0]
 8003cba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f811 	bl	8003ce8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bdb0      	pop	{r4, r5, r7, pc}

08003ce8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b089      	sub	sp, #36	@ 0x24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	0c1b      	lsrs	r3, r3, #16
 8003d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d04:	4413      	add	r3, r2
 8003d06:	041b      	lsls	r3, r3, #16
 8003d08:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	01db      	lsls	r3, r3, #7
 8003d14:	4413      	add	r3, r2
 8003d16:	3384      	adds	r3, #132	@ 0x84
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	6812      	ldr	r2, [r2, #0]
 8003d1e:	4611      	mov	r1, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	01d2      	lsls	r2, r2, #7
 8003d24:	440a      	add	r2, r1
 8003d26:	3284      	adds	r2, #132	@ 0x84
 8003d28:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003d2c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	0c1b      	lsrs	r3, r3, #16
 8003d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003d3e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003d40:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4619      	mov	r1, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	01db      	lsls	r3, r3, #7
 8003d4c:	440b      	add	r3, r1
 8003d4e:	3384      	adds	r3, #132	@ 0x84
 8003d50:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003d56:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d66:	4413      	add	r3, r2
 8003d68:	041b      	lsls	r3, r3, #16
 8003d6a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	461a      	mov	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	01db      	lsls	r3, r3, #7
 8003d76:	4413      	add	r3, r2
 8003d78:	3384      	adds	r3, #132	@ 0x84
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	4611      	mov	r1, r2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	01d2      	lsls	r2, r2, #7
 8003d86:	440a      	add	r2, r1
 8003d88:	3284      	adds	r2, #132	@ 0x84
 8003d8a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003d8e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d9e:	4413      	add	r3, r2
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4619      	mov	r1, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	01db      	lsls	r3, r3, #7
 8003dac:	440b      	add	r3, r1
 8003dae:	3384      	adds	r3, #132	@ 0x84
 8003db0:	4619      	mov	r1, r3
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	01db      	lsls	r3, r3, #7
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3384      	adds	r3, #132	@ 0x84
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	4611      	mov	r1, r2
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	01d2      	lsls	r2, r2, #7
 8003dd2:	440a      	add	r2, r1
 8003dd4:	3284      	adds	r2, #132	@ 0x84
 8003dd6:	f023 0307 	bic.w	r3, r3, #7
 8003dda:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	461a      	mov	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	01db      	lsls	r3, r3, #7
 8003de6:	4413      	add	r3, r2
 8003de8:	3384      	adds	r3, #132	@ 0x84
 8003dea:	461a      	mov	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003e02:	041b      	lsls	r3, r3, #16
 8003e04:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	061b      	lsls	r3, r3, #24
 8003e0c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	01db      	lsls	r3, r3, #7
 8003e18:	4413      	add	r3, r2
 8003e1a:	3384      	adds	r3, #132	@ 0x84
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	01db      	lsls	r3, r3, #7
 8003e28:	4413      	add	r3, r2
 8003e2a:	3384      	adds	r3, #132	@ 0x84
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2300      	movs	r3, #0
 8003e30:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e38:	461a      	mov	r2, r3
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	431a      	orrs	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4619      	mov	r1, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	01db      	lsls	r3, r3, #7
 8003e4c:	440b      	add	r3, r1
 8003e4e:	3384      	adds	r3, #132	@ 0x84
 8003e50:	4619      	mov	r1, r3
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	01db      	lsls	r3, r3, #7
 8003e62:	4413      	add	r3, r2
 8003e64:	3384      	adds	r3, #132	@ 0x84
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	01d2      	lsls	r2, r2, #7
 8003e72:	440a      	add	r2, r1
 8003e74:	3284      	adds	r2, #132	@ 0x84
 8003e76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e7a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	01db      	lsls	r3, r3, #7
 8003e86:	4413      	add	r3, r2
 8003e88:	3384      	adds	r3, #132	@ 0x84
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	01db      	lsls	r3, r3, #7
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3384      	adds	r3, #132	@ 0x84
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	6812      	ldr	r2, [r2, #0]
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	01d2      	lsls	r2, r2, #7
 8003eac:	440a      	add	r2, r1
 8003eae:	3284      	adds	r2, #132	@ 0x84
 8003eb0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003eb4:	f023 0307 	bic.w	r3, r3, #7
 8003eb8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	69da      	ldr	r2, [r3, #28]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	68f9      	ldr	r1, [r7, #12]
 8003ec4:	6809      	ldr	r1, [r1, #0]
 8003ec6:	4608      	mov	r0, r1
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	01c9      	lsls	r1, r1, #7
 8003ecc:	4401      	add	r1, r0
 8003ece:	3184      	adds	r1, #132	@ 0x84
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	01db      	lsls	r3, r3, #7
 8003ede:	4413      	add	r3, r2
 8003ee0:	3384      	adds	r3, #132	@ 0x84
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	01db      	lsls	r3, r3, #7
 8003eee:	4413      	add	r3, r2
 8003ef0:	3384      	adds	r3, #132	@ 0x84
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	461a      	mov	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	01db      	lsls	r3, r3, #7
 8003f02:	4413      	add	r3, r2
 8003f04:	3384      	adds	r3, #132	@ 0x84
 8003f06:	461a      	mov	r2, r3
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d102      	bne.n	8003f1c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003f16:	2304      	movs	r3, #4
 8003f18:	61fb      	str	r3, [r7, #28]
 8003f1a:	e01b      	b.n	8003f54 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d102      	bne.n	8003f2a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003f24:	2303      	movs	r3, #3
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	e014      	b.n	8003f54 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d00b      	beq.n	8003f4a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d007      	beq.n	8003f4a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d003      	beq.n	8003f4a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003f46:	2b07      	cmp	r3, #7
 8003f48:	d102      	bne.n	8003f50 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	61fb      	str	r3, [r7, #28]
 8003f4e:	e001      	b.n	8003f54 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003f50:	2301      	movs	r3, #1
 8003f52:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	01db      	lsls	r3, r3, #7
 8003f5e:	4413      	add	r3, r2
 8003f60:	3384      	adds	r3, #132	@ 0x84
 8003f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	6812      	ldr	r2, [r2, #0]
 8003f68:	4611      	mov	r1, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	01d2      	lsls	r2, r2, #7
 8003f6e:	440a      	add	r2, r1
 8003f70:	3284      	adds	r2, #132	@ 0x84
 8003f72:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8003f76:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	fb02 f303 	mul.w	r3, r2, r3
 8003f82:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	6859      	ldr	r1, [r3, #4]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	1acb      	subs	r3, r1, r3
 8003f8e:	69f9      	ldr	r1, [r7, #28]
 8003f90:	fb01 f303 	mul.w	r3, r1, r3
 8003f94:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003f96:	68f9      	ldr	r1, [r7, #12]
 8003f98:	6809      	ldr	r1, [r1, #0]
 8003f9a:	4608      	mov	r0, r1
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	01c9      	lsls	r1, r1, #7
 8003fa0:	4401      	add	r1, r0
 8003fa2:	3184      	adds	r1, #132	@ 0x84
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	461a      	mov	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	01db      	lsls	r3, r3, #7
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3384      	adds	r3, #132	@ 0x84
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	01d2      	lsls	r2, r2, #7
 8003fc2:	440a      	add	r2, r1
 8003fc4:	3284      	adds	r2, #132	@ 0x84
 8003fc6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003fca:	f023 0307 	bic.w	r3, r3, #7
 8003fce:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	01db      	lsls	r3, r3, #7
 8003fda:	4413      	add	r3, r2
 8003fdc:	3384      	adds	r3, #132	@ 0x84
 8003fde:	461a      	mov	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	01db      	lsls	r3, r3, #7
 8003ff0:	4413      	add	r3, r2
 8003ff2:	3384      	adds	r3, #132	@ 0x84
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	6812      	ldr	r2, [r2, #0]
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	01d2      	lsls	r2, r2, #7
 8004000:	440a      	add	r2, r1
 8004002:	3284      	adds	r2, #132	@ 0x84
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	6013      	str	r3, [r2, #0]
}
 800400a:	bf00      	nop
 800400c:	3724      	adds	r7, #36	@ 0x24
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e267      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d075      	beq.n	8004122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004036:	4b88      	ldr	r3, [pc, #544]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
 800403e:	2b04      	cmp	r3, #4
 8004040:	d00c      	beq.n	800405c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004042:	4b85      	ldr	r3, [pc, #532]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800404a:	2b08      	cmp	r3, #8
 800404c:	d112      	bne.n	8004074 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800404e:	4b82      	ldr	r3, [pc, #520]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004056:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800405a:	d10b      	bne.n	8004074 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800405c:	4b7e      	ldr	r3, [pc, #504]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d05b      	beq.n	8004120 <HAL_RCC_OscConfig+0x108>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d157      	bne.n	8004120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e242      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800407c:	d106      	bne.n	800408c <HAL_RCC_OscConfig+0x74>
 800407e:	4b76      	ldr	r3, [pc, #472]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a75      	ldr	r2, [pc, #468]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	e01d      	b.n	80040c8 <HAL_RCC_OscConfig+0xb0>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004094:	d10c      	bne.n	80040b0 <HAL_RCC_OscConfig+0x98>
 8004096:	4b70      	ldr	r3, [pc, #448]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a6f      	ldr	r2, [pc, #444]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 800409c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a6c      	ldr	r2, [pc, #432]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80040a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	e00b      	b.n	80040c8 <HAL_RCC_OscConfig+0xb0>
 80040b0:	4b69      	ldr	r3, [pc, #420]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a68      	ldr	r2, [pc, #416]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80040b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	4b66      	ldr	r3, [pc, #408]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a65      	ldr	r2, [pc, #404]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80040c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d013      	beq.n	80040f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d0:	f7fe f874 	bl	80021bc <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d8:	f7fe f870 	bl	80021bc <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b64      	cmp	r3, #100	@ 0x64
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e207      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0f0      	beq.n	80040d8 <HAL_RCC_OscConfig+0xc0>
 80040f6:	e014      	b.n	8004122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f8:	f7fe f860 	bl	80021bc <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004100:	f7fe f85c 	bl	80021bc <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b64      	cmp	r3, #100	@ 0x64
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e1f3      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004112:	4b51      	ldr	r3, [pc, #324]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f0      	bne.n	8004100 <HAL_RCC_OscConfig+0xe8>
 800411e:	e000      	b.n	8004122 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d063      	beq.n	80041f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800412e:	4b4a      	ldr	r3, [pc, #296]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 030c 	and.w	r3, r3, #12
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00b      	beq.n	8004152 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800413a:	4b47      	ldr	r3, [pc, #284]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004142:	2b08      	cmp	r3, #8
 8004144:	d11c      	bne.n	8004180 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004146:	4b44      	ldr	r3, [pc, #272]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d116      	bne.n	8004180 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004152:	4b41      	ldr	r3, [pc, #260]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d005      	beq.n	800416a <HAL_RCC_OscConfig+0x152>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d001      	beq.n	800416a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e1c7      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800416a:	4b3b      	ldr	r3, [pc, #236]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4937      	ldr	r1, [pc, #220]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 800417a:	4313      	orrs	r3, r2
 800417c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417e:	e03a      	b.n	80041f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d020      	beq.n	80041ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004188:	4b34      	ldr	r3, [pc, #208]	@ (800425c <HAL_RCC_OscConfig+0x244>)
 800418a:	2201      	movs	r2, #1
 800418c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418e:	f7fe f815 	bl	80021bc <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004196:	f7fe f811 	bl	80021bc <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e1a8      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0f0      	beq.n	8004196 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b4:	4b28      	ldr	r3, [pc, #160]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	4925      	ldr	r1, [pc, #148]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	600b      	str	r3, [r1, #0]
 80041c8:	e015      	b.n	80041f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ca:	4b24      	ldr	r3, [pc, #144]	@ (800425c <HAL_RCC_OscConfig+0x244>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7fd fff4 	bl	80021bc <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d8:	f7fd fff0 	bl	80021bc <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e187      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d036      	beq.n	8004270 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d016      	beq.n	8004238 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800420a:	4b15      	ldr	r3, [pc, #84]	@ (8004260 <HAL_RCC_OscConfig+0x248>)
 800420c:	2201      	movs	r2, #1
 800420e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004210:	f7fd ffd4 	bl	80021bc <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004218:	f7fd ffd0 	bl	80021bc <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e167      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800422a:	4b0b      	ldr	r3, [pc, #44]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 800422c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0f0      	beq.n	8004218 <HAL_RCC_OscConfig+0x200>
 8004236:	e01b      	b.n	8004270 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004238:	4b09      	ldr	r3, [pc, #36]	@ (8004260 <HAL_RCC_OscConfig+0x248>)
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800423e:	f7fd ffbd 	bl	80021bc <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004244:	e00e      	b.n	8004264 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004246:	f7fd ffb9 	bl	80021bc <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d907      	bls.n	8004264 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e150      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
 8004258:	40023800 	.word	0x40023800
 800425c:	42470000 	.word	0x42470000
 8004260:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004264:	4b88      	ldr	r3, [pc, #544]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1ea      	bne.n	8004246 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 8097 	beq.w	80043ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800427e:	2300      	movs	r3, #0
 8004280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004282:	4b81      	ldr	r3, [pc, #516]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10f      	bne.n	80042ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800428e:	2300      	movs	r3, #0
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	4b7d      	ldr	r3, [pc, #500]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004296:	4a7c      	ldr	r2, [pc, #496]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800429c:	6413      	str	r3, [r2, #64]	@ 0x40
 800429e:	4b7a      	ldr	r3, [pc, #488]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 80042a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a6:	60bb      	str	r3, [r7, #8]
 80042a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042aa:	2301      	movs	r3, #1
 80042ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ae:	4b77      	ldr	r3, [pc, #476]	@ (800448c <HAL_RCC_OscConfig+0x474>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d118      	bne.n	80042ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042ba:	4b74      	ldr	r3, [pc, #464]	@ (800448c <HAL_RCC_OscConfig+0x474>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a73      	ldr	r2, [pc, #460]	@ (800448c <HAL_RCC_OscConfig+0x474>)
 80042c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042c6:	f7fd ff79 	bl	80021bc <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ce:	f7fd ff75 	bl	80021bc <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e10c      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e0:	4b6a      	ldr	r3, [pc, #424]	@ (800448c <HAL_RCC_OscConfig+0x474>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0f0      	beq.n	80042ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d106      	bne.n	8004302 <HAL_RCC_OscConfig+0x2ea>
 80042f4:	4b64      	ldr	r3, [pc, #400]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 80042f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f8:	4a63      	ldr	r2, [pc, #396]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004300:	e01c      	b.n	800433c <HAL_RCC_OscConfig+0x324>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	2b05      	cmp	r3, #5
 8004308:	d10c      	bne.n	8004324 <HAL_RCC_OscConfig+0x30c>
 800430a:	4b5f      	ldr	r3, [pc, #380]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430e:	4a5e      	ldr	r2, [pc, #376]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004310:	f043 0304 	orr.w	r3, r3, #4
 8004314:	6713      	str	r3, [r2, #112]	@ 0x70
 8004316:	4b5c      	ldr	r3, [pc, #368]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800431a:	4a5b      	ldr	r2, [pc, #364]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	6713      	str	r3, [r2, #112]	@ 0x70
 8004322:	e00b      	b.n	800433c <HAL_RCC_OscConfig+0x324>
 8004324:	4b58      	ldr	r3, [pc, #352]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004328:	4a57      	ldr	r2, [pc, #348]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 800432a:	f023 0301 	bic.w	r3, r3, #1
 800432e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004330:	4b55      	ldr	r3, [pc, #340]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004334:	4a54      	ldr	r2, [pc, #336]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004336:	f023 0304 	bic.w	r3, r3, #4
 800433a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d015      	beq.n	8004370 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004344:	f7fd ff3a 	bl	80021bc <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800434a:	e00a      	b.n	8004362 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800434c:	f7fd ff36 	bl	80021bc <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800435a:	4293      	cmp	r3, r2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e0cb      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004362:	4b49      	ldr	r3, [pc, #292]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0ee      	beq.n	800434c <HAL_RCC_OscConfig+0x334>
 800436e:	e014      	b.n	800439a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004370:	f7fd ff24 	bl	80021bc <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004376:	e00a      	b.n	800438e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004378:	f7fd ff20 	bl	80021bc <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004386:	4293      	cmp	r3, r2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e0b5      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800438e:	4b3e      	ldr	r3, [pc, #248]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1ee      	bne.n	8004378 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800439a:	7dfb      	ldrb	r3, [r7, #23]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d105      	bne.n	80043ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a0:	4b39      	ldr	r3, [pc, #228]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 80043a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a4:	4a38      	ldr	r2, [pc, #224]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 80043a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 80a1 	beq.w	80044f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043b6:	4b34      	ldr	r3, [pc, #208]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 030c 	and.w	r3, r3, #12
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d05c      	beq.n	800447c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d141      	bne.n	800444e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ca:	4b31      	ldr	r3, [pc, #196]	@ (8004490 <HAL_RCC_OscConfig+0x478>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d0:	f7fd fef4 	bl	80021bc <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d8:	f7fd fef0 	bl	80021bc <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e087      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ea:	4b27      	ldr	r3, [pc, #156]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69da      	ldr	r2, [r3, #28]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004404:	019b      	lsls	r3, r3, #6
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440c:	085b      	lsrs	r3, r3, #1
 800440e:	3b01      	subs	r3, #1
 8004410:	041b      	lsls	r3, r3, #16
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004418:	061b      	lsls	r3, r3, #24
 800441a:	491b      	ldr	r1, [pc, #108]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 800441c:	4313      	orrs	r3, r2
 800441e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004420:	4b1b      	ldr	r3, [pc, #108]	@ (8004490 <HAL_RCC_OscConfig+0x478>)
 8004422:	2201      	movs	r2, #1
 8004424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004426:	f7fd fec9 	bl	80021bc <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800442e:	f7fd fec5 	bl	80021bc <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e05c      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004440:	4b11      	ldr	r3, [pc, #68]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0f0      	beq.n	800442e <HAL_RCC_OscConfig+0x416>
 800444c:	e054      	b.n	80044f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444e:	4b10      	ldr	r3, [pc, #64]	@ (8004490 <HAL_RCC_OscConfig+0x478>)
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004454:	f7fd feb2 	bl	80021bc <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800445c:	f7fd feae 	bl	80021bc <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e045      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446e:	4b06      	ldr	r3, [pc, #24]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0x444>
 800447a:	e03d      	b.n	80044f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d107      	bne.n	8004494 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e038      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
 8004488:	40023800 	.word	0x40023800
 800448c:	40007000 	.word	0x40007000
 8004490:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004494:	4b1b      	ldr	r3, [pc, #108]	@ (8004504 <HAL_RCC_OscConfig+0x4ec>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d028      	beq.n	80044f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d121      	bne.n	80044f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d11a      	bne.n	80044f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044c4:	4013      	ands	r3, r2
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d111      	bne.n	80044f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044da:	085b      	lsrs	r3, r3, #1
 80044dc:	3b01      	subs	r3, #1
 80044de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d107      	bne.n	80044f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d001      	beq.n	80044f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40023800 	.word	0x40023800

08004508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e0cc      	b.n	80046b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800451c:	4b68      	ldr	r3, [pc, #416]	@ (80046c0 <HAL_RCC_ClockConfig+0x1b8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 030f 	and.w	r3, r3, #15
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d90c      	bls.n	8004544 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452a:	4b65      	ldr	r3, [pc, #404]	@ (80046c0 <HAL_RCC_ClockConfig+0x1b8>)
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004532:	4b63      	ldr	r3, [pc, #396]	@ (80046c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	429a      	cmp	r2, r3
 800453e:	d001      	beq.n	8004544 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e0b8      	b.n	80046b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d020      	beq.n	8004592 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800455c:	4b59      	ldr	r3, [pc, #356]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	4a58      	ldr	r2, [pc, #352]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004566:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0308 	and.w	r3, r3, #8
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004574:	4b53      	ldr	r3, [pc, #332]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4a52      	ldr	r2, [pc, #328]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800457e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004580:	4b50      	ldr	r3, [pc, #320]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	494d      	ldr	r1, [pc, #308]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	4313      	orrs	r3, r2
 8004590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d044      	beq.n	8004628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d107      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a6:	4b47      	ldr	r3, [pc, #284]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d119      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e07f      	b.n	80046b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d003      	beq.n	80045c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d107      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c6:	4b3f      	ldr	r3, [pc, #252]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d109      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e06f      	b.n	80046b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d6:	4b3b      	ldr	r3, [pc, #236]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e067      	b.n	80046b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045e6:	4b37      	ldr	r3, [pc, #220]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f023 0203 	bic.w	r2, r3, #3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	4934      	ldr	r1, [pc, #208]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045f8:	f7fd fde0 	bl	80021bc <HAL_GetTick>
 80045fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fe:	e00a      	b.n	8004616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004600:	f7fd fddc 	bl	80021bc <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e04f      	b.n	80046b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004616:	4b2b      	ldr	r3, [pc, #172]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 020c 	and.w	r2, r3, #12
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	429a      	cmp	r2, r3
 8004626:	d1eb      	bne.n	8004600 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004628:	4b25      	ldr	r3, [pc, #148]	@ (80046c0 <HAL_RCC_ClockConfig+0x1b8>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 030f 	and.w	r3, r3, #15
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	429a      	cmp	r2, r3
 8004634:	d20c      	bcs.n	8004650 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004636:	4b22      	ldr	r3, [pc, #136]	@ (80046c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800463e:	4b20      	ldr	r3, [pc, #128]	@ (80046c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d001      	beq.n	8004650 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e032      	b.n	80046b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d008      	beq.n	800466e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800465c:	4b19      	ldr	r3, [pc, #100]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	4916      	ldr	r1, [pc, #88]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	4313      	orrs	r3, r2
 800466c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d009      	beq.n	800468e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800467a:	4b12      	ldr	r3, [pc, #72]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	490e      	ldr	r1, [pc, #56]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	4313      	orrs	r3, r2
 800468c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800468e:	f000 f821 	bl	80046d4 <HAL_RCC_GetSysClockFreq>
 8004692:	4602      	mov	r2, r0
 8004694:	4b0b      	ldr	r3, [pc, #44]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	091b      	lsrs	r3, r3, #4
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	490a      	ldr	r1, [pc, #40]	@ (80046c8 <HAL_RCC_ClockConfig+0x1c0>)
 80046a0:	5ccb      	ldrb	r3, [r1, r3]
 80046a2:	fa22 f303 	lsr.w	r3, r2, r3
 80046a6:	4a09      	ldr	r2, [pc, #36]	@ (80046cc <HAL_RCC_ClockConfig+0x1c4>)
 80046a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80046aa:	4b09      	ldr	r3, [pc, #36]	@ (80046d0 <HAL_RCC_ClockConfig+0x1c8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fd fd40 	bl	8002134 <HAL_InitTick>

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40023c00 	.word	0x40023c00
 80046c4:	40023800 	.word	0x40023800
 80046c8:	08006aa4 	.word	0x08006aa4
 80046cc:	20000010 	.word	0x20000010
 80046d0:	20000014 	.word	0x20000014

080046d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d8:	b094      	sub	sp, #80	@ 0x50
 80046da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046ec:	4b79      	ldr	r3, [pc, #484]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 030c 	and.w	r3, r3, #12
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d00d      	beq.n	8004714 <HAL_RCC_GetSysClockFreq+0x40>
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	f200 80e1 	bhi.w	80048c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <HAL_RCC_GetSysClockFreq+0x34>
 8004702:	2b04      	cmp	r3, #4
 8004704:	d003      	beq.n	800470e <HAL_RCC_GetSysClockFreq+0x3a>
 8004706:	e0db      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004708:	4b73      	ldr	r3, [pc, #460]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800470a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800470c:	e0db      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800470e:	4b73      	ldr	r3, [pc, #460]	@ (80048dc <HAL_RCC_GetSysClockFreq+0x208>)
 8004710:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004712:	e0d8      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004714:	4b6f      	ldr	r3, [pc, #444]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800471c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800471e:	4b6d      	ldr	r3, [pc, #436]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d063      	beq.n	80047f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800472a:	4b6a      	ldr	r3, [pc, #424]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	099b      	lsrs	r3, r3, #6
 8004730:	2200      	movs	r2, #0
 8004732:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004734:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800473c:	633b      	str	r3, [r7, #48]	@ 0x30
 800473e:	2300      	movs	r3, #0
 8004740:	637b      	str	r3, [r7, #52]	@ 0x34
 8004742:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004746:	4622      	mov	r2, r4
 8004748:	462b      	mov	r3, r5
 800474a:	f04f 0000 	mov.w	r0, #0
 800474e:	f04f 0100 	mov.w	r1, #0
 8004752:	0159      	lsls	r1, r3, #5
 8004754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004758:	0150      	lsls	r0, r2, #5
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4621      	mov	r1, r4
 8004760:	1a51      	subs	r1, r2, r1
 8004762:	6139      	str	r1, [r7, #16]
 8004764:	4629      	mov	r1, r5
 8004766:	eb63 0301 	sbc.w	r3, r3, r1
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004778:	4659      	mov	r1, fp
 800477a:	018b      	lsls	r3, r1, #6
 800477c:	4651      	mov	r1, sl
 800477e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004782:	4651      	mov	r1, sl
 8004784:	018a      	lsls	r2, r1, #6
 8004786:	4651      	mov	r1, sl
 8004788:	ebb2 0801 	subs.w	r8, r2, r1
 800478c:	4659      	mov	r1, fp
 800478e:	eb63 0901 	sbc.w	r9, r3, r1
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800479e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047a6:	4690      	mov	r8, r2
 80047a8:	4699      	mov	r9, r3
 80047aa:	4623      	mov	r3, r4
 80047ac:	eb18 0303 	adds.w	r3, r8, r3
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	462b      	mov	r3, r5
 80047b4:	eb49 0303 	adc.w	r3, r9, r3
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	f04f 0200 	mov.w	r2, #0
 80047be:	f04f 0300 	mov.w	r3, #0
 80047c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047c6:	4629      	mov	r1, r5
 80047c8:	024b      	lsls	r3, r1, #9
 80047ca:	4621      	mov	r1, r4
 80047cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047d0:	4621      	mov	r1, r4
 80047d2:	024a      	lsls	r2, r1, #9
 80047d4:	4610      	mov	r0, r2
 80047d6:	4619      	mov	r1, r3
 80047d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047da:	2200      	movs	r2, #0
 80047dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047e4:	f7fb fd02 	bl	80001ec <__aeabi_uldivmod>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4613      	mov	r3, r2
 80047ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047f0:	e058      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047f2:	4b38      	ldr	r3, [pc, #224]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	099b      	lsrs	r3, r3, #6
 80047f8:	2200      	movs	r2, #0
 80047fa:	4618      	mov	r0, r3
 80047fc:	4611      	mov	r1, r2
 80047fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004802:	623b      	str	r3, [r7, #32]
 8004804:	2300      	movs	r3, #0
 8004806:	627b      	str	r3, [r7, #36]	@ 0x24
 8004808:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800480c:	4642      	mov	r2, r8
 800480e:	464b      	mov	r3, r9
 8004810:	f04f 0000 	mov.w	r0, #0
 8004814:	f04f 0100 	mov.w	r1, #0
 8004818:	0159      	lsls	r1, r3, #5
 800481a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800481e:	0150      	lsls	r0, r2, #5
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4641      	mov	r1, r8
 8004826:	ebb2 0a01 	subs.w	sl, r2, r1
 800482a:	4649      	mov	r1, r9
 800482c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800483c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004840:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004844:	ebb2 040a 	subs.w	r4, r2, sl
 8004848:	eb63 050b 	sbc.w	r5, r3, fp
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	00eb      	lsls	r3, r5, #3
 8004856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800485a:	00e2      	lsls	r2, r4, #3
 800485c:	4614      	mov	r4, r2
 800485e:	461d      	mov	r5, r3
 8004860:	4643      	mov	r3, r8
 8004862:	18e3      	adds	r3, r4, r3
 8004864:	603b      	str	r3, [r7, #0]
 8004866:	464b      	mov	r3, r9
 8004868:	eb45 0303 	adc.w	r3, r5, r3
 800486c:	607b      	str	r3, [r7, #4]
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800487a:	4629      	mov	r1, r5
 800487c:	028b      	lsls	r3, r1, #10
 800487e:	4621      	mov	r1, r4
 8004880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004884:	4621      	mov	r1, r4
 8004886:	028a      	lsls	r2, r1, #10
 8004888:	4610      	mov	r0, r2
 800488a:	4619      	mov	r1, r3
 800488c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800488e:	2200      	movs	r2, #0
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	61fa      	str	r2, [r7, #28]
 8004894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004898:	f7fb fca8 	bl	80001ec <__aeabi_uldivmod>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4613      	mov	r3, r2
 80048a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80048a4:	4b0b      	ldr	r3, [pc, #44]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	0c1b      	lsrs	r3, r3, #16
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	3301      	adds	r3, #1
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80048b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048be:	e002      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048c0:	4b05      	ldr	r3, [pc, #20]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80048c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3750      	adds	r7, #80	@ 0x50
 80048cc:	46bd      	mov	sp, r7
 80048ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048d2:	bf00      	nop
 80048d4:	40023800 	.word	0x40023800
 80048d8:	00f42400 	.word	0x00f42400
 80048dc:	007a1200 	.word	0x007a1200

080048e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048e4:	4b03      	ldr	r3, [pc, #12]	@ (80048f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048e6:	681b      	ldr	r3, [r3, #0]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	20000010 	.word	0x20000010

080048f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048fc:	f7ff fff0 	bl	80048e0 <HAL_RCC_GetHCLKFreq>
 8004900:	4602      	mov	r2, r0
 8004902:	4b05      	ldr	r3, [pc, #20]	@ (8004918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	0a9b      	lsrs	r3, r3, #10
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	4903      	ldr	r1, [pc, #12]	@ (800491c <HAL_RCC_GetPCLK1Freq+0x24>)
 800490e:	5ccb      	ldrb	r3, [r1, r3]
 8004910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004914:	4618      	mov	r0, r3
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40023800 	.word	0x40023800
 800491c:	08006ab4 	.word	0x08006ab4

08004920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10b      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004944:	2b00      	cmp	r3, #0
 8004946:	d105      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004950:	2b00      	cmp	r3, #0
 8004952:	d075      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004954:	4b91      	ldr	r3, [pc, #580]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004956:	2200      	movs	r2, #0
 8004958:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800495a:	f7fd fc2f 	bl	80021bc <HAL_GetTick>
 800495e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004960:	e008      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004962:	f7fd fc2b 	bl	80021bc <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e189      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004974:	4b8a      	ldr	r3, [pc, #552]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1f0      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b00      	cmp	r3, #0
 800498a:	d009      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	019a      	lsls	r2, r3, #6
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	071b      	lsls	r3, r3, #28
 8004998:	4981      	ldr	r1, [pc, #516]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01f      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049ac:	4b7c      	ldr	r3, [pc, #496]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049b2:	0f1b      	lsrs	r3, r3, #28
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	019a      	lsls	r2, r3, #6
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	061b      	lsls	r3, r3, #24
 80049c6:	431a      	orrs	r2, r3
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	071b      	lsls	r3, r3, #28
 80049cc:	4974      	ldr	r1, [pc, #464]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049d4:	4b72      	ldr	r3, [pc, #456]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049da:	f023 021f 	bic.w	r2, r3, #31
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	496e      	ldr	r1, [pc, #440]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00d      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	019a      	lsls	r2, r3, #6
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	061b      	lsls	r3, r3, #24
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	071b      	lsls	r3, r3, #28
 8004a0c:	4964      	ldr	r1, [pc, #400]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a14:	4b61      	ldr	r3, [pc, #388]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004a16:	2201      	movs	r2, #1
 8004a18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a1a:	f7fd fbcf 	bl	80021bc <HAL_GetTick>
 8004a1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a20:	e008      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a22:	f7fd fbcb 	bl	80021bc <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e129      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a34:	4b5a      	ldr	r3, [pc, #360]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0f0      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d105      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d079      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a58:	4b52      	ldr	r3, [pc, #328]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a5e:	f7fd fbad 	bl	80021bc <HAL_GetTick>
 8004a62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a64:	e008      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a66:	f7fd fba9 	bl	80021bc <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e107      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a78:	4b49      	ldr	r3, [pc, #292]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a84:	d0ef      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d020      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a92:	4b43      	ldr	r3, [pc, #268]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a98:	0f1b      	lsrs	r3, r3, #28
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	019a      	lsls	r2, r3, #6
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	061b      	lsls	r3, r3, #24
 8004aac:	431a      	orrs	r2, r3
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	071b      	lsls	r3, r3, #28
 8004ab2:	493b      	ldr	r1, [pc, #236]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004aba:	4b39      	ldr	r3, [pc, #228]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ac0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	021b      	lsls	r3, r3, #8
 8004acc:	4934      	ldr	r1, [pc, #208]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0308 	and.w	r3, r3, #8
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01e      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ae0:	4b2f      	ldr	r3, [pc, #188]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae6:	0e1b      	lsrs	r3, r3, #24
 8004ae8:	f003 030f 	and.w	r3, r3, #15
 8004aec:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	019a      	lsls	r2, r3, #6
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	061b      	lsls	r3, r3, #24
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	071b      	lsls	r3, r3, #28
 8004b00:	4927      	ldr	r1, [pc, #156]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b08:	4b25      	ldr	r3, [pc, #148]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b0e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b16:	4922      	ldr	r1, [pc, #136]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b1e:	4b21      	ldr	r3, [pc, #132]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b24:	f7fd fb4a 	bl	80021bc <HAL_GetTick>
 8004b28:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b2c:	f7fd fb46 	bl	80021bc <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e0a4      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b3e:	4b18      	ldr	r3, [pc, #96]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b4a:	d1ef      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 808b 	beq.w	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b62:	4a0f      	ldr	r2, [pc, #60]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b76:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a0b      	ldr	r2, [pc, #44]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b80:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b82:	f7fd fb1b 	bl	80021bc <HAL_GetTick>
 8004b86:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004b88:	e010      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b8a:	f7fd fb17 	bl	80021bc <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d909      	bls.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e075      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004b9c:	42470068 	.word	0x42470068
 8004ba0:	40023800 	.word	0x40023800
 8004ba4:	42470070 	.word	0x42470070
 8004ba8:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004bac:	4b38      	ldr	r3, [pc, #224]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0e8      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bb8:	4b36      	ldr	r3, [pc, #216]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bc0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d02f      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d028      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bde:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004be0:	4b2d      	ldr	r3, [pc, #180]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004be6:	4b2c      	ldr	r3, [pc, #176]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004bec:	4a29      	ldr	r2, [pc, #164]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bf2:	4b28      	ldr	r3, [pc, #160]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d114      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004bfe:	f7fd fadd 	bl	80021bc <HAL_GetTick>
 8004c02:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c04:	e00a      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c06:	f7fd fad9 	bl	80021bc <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d901      	bls.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e035      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0ee      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c34:	d10d      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004c36:	4b17      	ldr	r3, [pc, #92]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c42:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004c46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c4a:	4912      	ldr	r1, [pc, #72]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	608b      	str	r3, [r1, #8]
 8004c50:	e005      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004c52:	4b10      	ldr	r3, [pc, #64]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	4a0f      	ldr	r2, [pc, #60]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c58:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004c5c:	6093      	str	r3, [r2, #8]
 8004c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c60:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c6a:	490a      	ldr	r1, [pc, #40]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d004      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004c82:	4b06      	ldr	r3, [pc, #24]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004c84:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40007000 	.word	0x40007000
 8004c94:	40023800 	.word	0x40023800
 8004c98:	42470e40 	.word	0x42470e40
 8004c9c:	424711e0 	.word	0x424711e0

08004ca0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e01c      	b.n	8004cec <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	795b      	ldrb	r3, [r3, #5]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d105      	bne.n	8004cc8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7fc ff2c 	bl	8001b20 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f042 0204 	orr.w	r2, r2, #4
 8004cdc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e07b      	b.n	8004dfe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d108      	bne.n	8004d20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d16:	d009      	beq.n	8004d2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	61da      	str	r2, [r3, #28]
 8004d1e:	e005      	b.n	8004d2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d106      	bne.n	8004d4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fc ff0c 	bl	8001b64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004db0:	ea42 0103 	orr.w	r1, r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	0c1b      	lsrs	r3, r3, #16
 8004dca:	f003 0104 	and.w	r1, r3, #4
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd2:	f003 0210 	and.w	r2, r3, #16
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69da      	ldr	r2, [r3, #28]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004dec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b082      	sub	sp, #8
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e01a      	b.n	8004e4e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e2e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7fc fedf 	bl	8001bf4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b088      	sub	sp, #32
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	603b      	str	r3, [r7, #0]
 8004e62:	4613      	mov	r3, r2
 8004e64:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e66:	f7fd f9a9 	bl	80021bc <HAL_GetTick>
 8004e6a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004e6c:	88fb      	ldrh	r3, [r7, #6]
 8004e6e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d001      	beq.n	8004e80 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e12a      	b.n	80050d6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <HAL_SPI_Transmit+0x36>
 8004e86:	88fb      	ldrh	r3, [r7, #6]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e122      	b.n	80050d6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <HAL_SPI_Transmit+0x48>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e11b      	b.n	80050d6 <HAL_SPI_Transmit+0x280>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2203      	movs	r2, #3
 8004eaa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	88fa      	ldrh	r2, [r7, #6]
 8004ebe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	88fa      	ldrh	r2, [r7, #6]
 8004ec4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eec:	d10f      	bne.n	8004f0e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004efc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f18:	2b40      	cmp	r3, #64	@ 0x40
 8004f1a:	d007      	beq.n	8004f2c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f34:	d152      	bne.n	8004fdc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <HAL_SPI_Transmit+0xee>
 8004f3e:	8b7b      	ldrh	r3, [r7, #26]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d145      	bne.n	8004fd0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f48:	881a      	ldrh	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f54:	1c9a      	adds	r2, r3, #2
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f68:	e032      	b.n	8004fd0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d112      	bne.n	8004f9e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7c:	881a      	ldrh	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f88:	1c9a      	adds	r2, r3, #2
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f9c:	e018      	b.n	8004fd0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f9e:	f7fd f90d 	bl	80021bc <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d803      	bhi.n	8004fb6 <HAL_SPI_Transmit+0x160>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fb4:	d102      	bne.n	8004fbc <HAL_SPI_Transmit+0x166>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d109      	bne.n	8004fd0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e082      	b.n	80050d6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1c7      	bne.n	8004f6a <HAL_SPI_Transmit+0x114>
 8004fda:	e053      	b.n	8005084 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <HAL_SPI_Transmit+0x194>
 8004fe4:	8b7b      	ldrh	r3, [r7, #26]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d147      	bne.n	800507a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	330c      	adds	r3, #12
 8004ff4:	7812      	ldrb	r2, [r2, #0]
 8004ff6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005010:	e033      	b.n	800507a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b02      	cmp	r3, #2
 800501e:	d113      	bne.n	8005048 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	330c      	adds	r3, #12
 800502a:	7812      	ldrb	r2, [r2, #0]
 800502c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800503c:	b29b      	uxth	r3, r3
 800503e:	3b01      	subs	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005046:	e018      	b.n	800507a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005048:	f7fd f8b8 	bl	80021bc <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d803      	bhi.n	8005060 <HAL_SPI_Transmit+0x20a>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800505e:	d102      	bne.n	8005066 <HAL_SPI_Transmit+0x210>
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e02d      	b.n	80050d6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800507e:	b29b      	uxth	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1c6      	bne.n	8005012 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005084:	69fa      	ldr	r2, [r7, #28]
 8005086:	6839      	ldr	r1, [r7, #0]
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 f8bf 	bl	800520c <SPI_EndRxTxTransaction>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2220      	movs	r2, #32
 8005098:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10a      	bne.n	80050b8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050a2:	2300      	movs	r3, #0
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e000      	b.n	80050d6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80050d4:	2300      	movs	r3, #0
  }
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3720      	adds	r7, #32
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050ec:	b2db      	uxtb	r3, r3
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
	...

080050fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	603b      	str	r3, [r7, #0]
 8005108:	4613      	mov	r3, r2
 800510a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800510c:	f7fd f856 	bl	80021bc <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005114:	1a9b      	subs	r3, r3, r2
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	4413      	add	r3, r2
 800511a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800511c:	f7fd f84e 	bl	80021bc <HAL_GetTick>
 8005120:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005122:	4b39      	ldr	r3, [pc, #228]	@ (8005208 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	015b      	lsls	r3, r3, #5
 8005128:	0d1b      	lsrs	r3, r3, #20
 800512a:	69fa      	ldr	r2, [r7, #28]
 800512c:	fb02 f303 	mul.w	r3, r2, r3
 8005130:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005132:	e054      	b.n	80051de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800513a:	d050      	beq.n	80051de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800513c:	f7fd f83e 	bl	80021bc <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	429a      	cmp	r2, r3
 800514a:	d902      	bls.n	8005152 <SPI_WaitFlagStateUntilTimeout+0x56>
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d13d      	bne.n	80051ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005160:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800516a:	d111      	bne.n	8005190 <SPI_WaitFlagStateUntilTimeout+0x94>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005174:	d004      	beq.n	8005180 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800517e:	d107      	bne.n	8005190 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800518e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005194:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005198:	d10f      	bne.n	80051ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e017      	b.n	80051fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	3b01      	subs	r3, #1
 80051dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4013      	ands	r3, r2
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	bf0c      	ite	eq
 80051ee:	2301      	moveq	r3, #1
 80051f0:	2300      	movne	r3, #0
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	461a      	mov	r2, r3
 80051f6:	79fb      	ldrb	r3, [r7, #7]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d19b      	bne.n	8005134 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3720      	adds	r7, #32
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20000010 	.word	0x20000010

0800520c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af02      	add	r7, sp, #8
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2201      	movs	r2, #1
 8005220:	2102      	movs	r1, #2
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f7ff ff6a 	bl	80050fc <SPI_WaitFlagStateUntilTimeout>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d007      	beq.n	800523e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005232:	f043 0220 	orr.w	r2, r3, #32
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e032      	b.n	80052a4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800523e:	4b1b      	ldr	r3, [pc, #108]	@ (80052ac <SPI_EndRxTxTransaction+0xa0>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a1b      	ldr	r2, [pc, #108]	@ (80052b0 <SPI_EndRxTxTransaction+0xa4>)
 8005244:	fba2 2303 	umull	r2, r3, r2, r3
 8005248:	0d5b      	lsrs	r3, r3, #21
 800524a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800524e:	fb02 f303 	mul.w	r3, r2, r3
 8005252:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800525c:	d112      	bne.n	8005284 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2200      	movs	r2, #0
 8005266:	2180      	movs	r1, #128	@ 0x80
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f7ff ff47 	bl	80050fc <SPI_WaitFlagStateUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d016      	beq.n	80052a2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005278:	f043 0220 	orr.w	r2, r3, #32
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e00f      	b.n	80052a4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	3b01      	subs	r3, #1
 800528e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800529a:	2b80      	cmp	r3, #128	@ 0x80
 800529c:	d0f2      	beq.n	8005284 <SPI_EndRxTxTransaction+0x78>
 800529e:	e000      	b.n	80052a2 <SPI_EndRxTxTransaction+0x96>
        break;
 80052a0:	bf00      	nop
  }

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	20000010 	.word	0x20000010
 80052b0:	165e9f81 	.word	0x165e9f81

080052b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e041      	b.n	800534a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d106      	bne.n	80052e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7fc fca8 	bl	8001c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3304      	adds	r3, #4
 80052f0:	4619      	mov	r1, r3
 80052f2:	4610      	mov	r0, r2
 80052f4:	f000 f8f4 	bl	80054e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005366:	2b01      	cmp	r3, #1
 8005368:	d101      	bne.n	800536e <HAL_TIM_ConfigClockSource+0x1c>
 800536a:	2302      	movs	r3, #2
 800536c:	e0b4      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x186>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2202      	movs	r2, #2
 800537a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800538c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005394:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053a6:	d03e      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0xd4>
 80053a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053ac:	f200 8087 	bhi.w	80054be <HAL_TIM_ConfigClockSource+0x16c>
 80053b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053b4:	f000 8086 	beq.w	80054c4 <HAL_TIM_ConfigClockSource+0x172>
 80053b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053bc:	d87f      	bhi.n	80054be <HAL_TIM_ConfigClockSource+0x16c>
 80053be:	2b70      	cmp	r3, #112	@ 0x70
 80053c0:	d01a      	beq.n	80053f8 <HAL_TIM_ConfigClockSource+0xa6>
 80053c2:	2b70      	cmp	r3, #112	@ 0x70
 80053c4:	d87b      	bhi.n	80054be <HAL_TIM_ConfigClockSource+0x16c>
 80053c6:	2b60      	cmp	r3, #96	@ 0x60
 80053c8:	d050      	beq.n	800546c <HAL_TIM_ConfigClockSource+0x11a>
 80053ca:	2b60      	cmp	r3, #96	@ 0x60
 80053cc:	d877      	bhi.n	80054be <HAL_TIM_ConfigClockSource+0x16c>
 80053ce:	2b50      	cmp	r3, #80	@ 0x50
 80053d0:	d03c      	beq.n	800544c <HAL_TIM_ConfigClockSource+0xfa>
 80053d2:	2b50      	cmp	r3, #80	@ 0x50
 80053d4:	d873      	bhi.n	80054be <HAL_TIM_ConfigClockSource+0x16c>
 80053d6:	2b40      	cmp	r3, #64	@ 0x40
 80053d8:	d058      	beq.n	800548c <HAL_TIM_ConfigClockSource+0x13a>
 80053da:	2b40      	cmp	r3, #64	@ 0x40
 80053dc:	d86f      	bhi.n	80054be <HAL_TIM_ConfigClockSource+0x16c>
 80053de:	2b30      	cmp	r3, #48	@ 0x30
 80053e0:	d064      	beq.n	80054ac <HAL_TIM_ConfigClockSource+0x15a>
 80053e2:	2b30      	cmp	r3, #48	@ 0x30
 80053e4:	d86b      	bhi.n	80054be <HAL_TIM_ConfigClockSource+0x16c>
 80053e6:	2b20      	cmp	r3, #32
 80053e8:	d060      	beq.n	80054ac <HAL_TIM_ConfigClockSource+0x15a>
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d867      	bhi.n	80054be <HAL_TIM_ConfigClockSource+0x16c>
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d05c      	beq.n	80054ac <HAL_TIM_ConfigClockSource+0x15a>
 80053f2:	2b10      	cmp	r3, #16
 80053f4:	d05a      	beq.n	80054ac <HAL_TIM_ConfigClockSource+0x15a>
 80053f6:	e062      	b.n	80054be <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005408:	f000 f990 	bl	800572c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800541a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	609a      	str	r2, [r3, #8]
      break;
 8005424:	e04f      	b.n	80054c6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005436:	f000 f979 	bl	800572c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005448:	609a      	str	r2, [r3, #8]
      break;
 800544a:	e03c      	b.n	80054c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005458:	461a      	mov	r2, r3
 800545a:	f000 f8ed 	bl	8005638 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2150      	movs	r1, #80	@ 0x50
 8005464:	4618      	mov	r0, r3
 8005466:	f000 f946 	bl	80056f6 <TIM_ITRx_SetConfig>
      break;
 800546a:	e02c      	b.n	80054c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005478:	461a      	mov	r2, r3
 800547a:	f000 f90c 	bl	8005696 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2160      	movs	r1, #96	@ 0x60
 8005484:	4618      	mov	r0, r3
 8005486:	f000 f936 	bl	80056f6 <TIM_ITRx_SetConfig>
      break;
 800548a:	e01c      	b.n	80054c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005498:	461a      	mov	r2, r3
 800549a:	f000 f8cd 	bl	8005638 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2140      	movs	r1, #64	@ 0x40
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 f926 	bl	80056f6 <TIM_ITRx_SetConfig>
      break;
 80054aa:	e00c      	b.n	80054c6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4619      	mov	r1, r3
 80054b6:	4610      	mov	r0, r2
 80054b8:	f000 f91d 	bl	80056f6 <TIM_ITRx_SetConfig>
      break;
 80054bc:	e003      	b.n	80054c6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	73fb      	strb	r3, [r7, #15]
      break;
 80054c2:	e000      	b.n	80054c6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a46      	ldr	r2, [pc, #280]	@ (800560c <TIM_Base_SetConfig+0x12c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d013      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054fe:	d00f      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a43      	ldr	r2, [pc, #268]	@ (8005610 <TIM_Base_SetConfig+0x130>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00b      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a42      	ldr	r2, [pc, #264]	@ (8005614 <TIM_Base_SetConfig+0x134>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d007      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a41      	ldr	r2, [pc, #260]	@ (8005618 <TIM_Base_SetConfig+0x138>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d003      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a40      	ldr	r2, [pc, #256]	@ (800561c <TIM_Base_SetConfig+0x13c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d108      	bne.n	8005532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a35      	ldr	r2, [pc, #212]	@ (800560c <TIM_Base_SetConfig+0x12c>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d02b      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005540:	d027      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a32      	ldr	r2, [pc, #200]	@ (8005610 <TIM_Base_SetConfig+0x130>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d023      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a31      	ldr	r2, [pc, #196]	@ (8005614 <TIM_Base_SetConfig+0x134>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d01f      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a30      	ldr	r2, [pc, #192]	@ (8005618 <TIM_Base_SetConfig+0x138>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d01b      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a2f      	ldr	r2, [pc, #188]	@ (800561c <TIM_Base_SetConfig+0x13c>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d017      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a2e      	ldr	r2, [pc, #184]	@ (8005620 <TIM_Base_SetConfig+0x140>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d013      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a2d      	ldr	r2, [pc, #180]	@ (8005624 <TIM_Base_SetConfig+0x144>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00f      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a2c      	ldr	r2, [pc, #176]	@ (8005628 <TIM_Base_SetConfig+0x148>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00b      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a2b      	ldr	r2, [pc, #172]	@ (800562c <TIM_Base_SetConfig+0x14c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d007      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a2a      	ldr	r2, [pc, #168]	@ (8005630 <TIM_Base_SetConfig+0x150>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d003      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a29      	ldr	r2, [pc, #164]	@ (8005634 <TIM_Base_SetConfig+0x154>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d108      	bne.n	80055a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a10      	ldr	r2, [pc, #64]	@ (800560c <TIM_Base_SetConfig+0x12c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d003      	beq.n	80055d8 <TIM_Base_SetConfig+0xf8>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a12      	ldr	r2, [pc, #72]	@ (800561c <TIM_Base_SetConfig+0x13c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d103      	bne.n	80055e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d105      	bne.n	80055fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f023 0201 	bic.w	r2, r3, #1
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	611a      	str	r2, [r3, #16]
  }
}
 80055fe:	bf00      	nop
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	40010000 	.word	0x40010000
 8005610:	40000400 	.word	0x40000400
 8005614:	40000800 	.word	0x40000800
 8005618:	40000c00 	.word	0x40000c00
 800561c:	40010400 	.word	0x40010400
 8005620:	40014000 	.word	0x40014000
 8005624:	40014400 	.word	0x40014400
 8005628:	40014800 	.word	0x40014800
 800562c:	40001800 	.word	0x40001800
 8005630:	40001c00 	.word	0x40001c00
 8005634:	40002000 	.word	0x40002000

08005638 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	f023 0201 	bic.w	r2, r3, #1
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005662:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	4313      	orrs	r3, r2
 800566c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f023 030a 	bic.w	r3, r3, #10
 8005674:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	621a      	str	r2, [r3, #32]
}
 800568a:	bf00      	nop
 800568c:	371c      	adds	r7, #28
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005696:	b480      	push	{r7}
 8005698:	b087      	sub	sp, #28
 800569a:	af00      	add	r7, sp, #0
 800569c:	60f8      	str	r0, [r7, #12]
 800569e:	60b9      	str	r1, [r7, #8]
 80056a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	f023 0210 	bic.w	r2, r3, #16
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	031b      	lsls	r3, r3, #12
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80056d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	621a      	str	r2, [r3, #32]
}
 80056ea:	bf00      	nop
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b085      	sub	sp, #20
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800570c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	f043 0307 	orr.w	r3, r3, #7
 8005718:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	609a      	str	r2, [r3, #8]
}
 8005720:	bf00      	nop
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
 8005738:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005746:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	021a      	lsls	r2, r3, #8
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	431a      	orrs	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4313      	orrs	r3, r2
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	609a      	str	r2, [r3, #8]
}
 8005760:	bf00      	nop
 8005762:	371c      	adds	r7, #28
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005780:	2302      	movs	r3, #2
 8005782:	e05a      	b.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a21      	ldr	r2, [pc, #132]	@ (8005848 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d022      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057d0:	d01d      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a1d      	ldr	r2, [pc, #116]	@ (800584c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d018      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d013      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00e      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a18      	ldr	r2, [pc, #96]	@ (8005858 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d009      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a17      	ldr	r2, [pc, #92]	@ (800585c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d004      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a15      	ldr	r2, [pc, #84]	@ (8005860 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d10c      	bne.n	8005828 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005814:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	4313      	orrs	r3, r2
 800581e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	40010000 	.word	0x40010000
 800584c:	40000400 	.word	0x40000400
 8005850:	40000800 	.word	0x40000800
 8005854:	40000c00 	.word	0x40000c00
 8005858:	40010400 	.word	0x40010400
 800585c:	40014000 	.word	0x40014000
 8005860:	40001800 	.word	0x40001800

08005864 <memset>:
 8005864:	4402      	add	r2, r0
 8005866:	4603      	mov	r3, r0
 8005868:	4293      	cmp	r3, r2
 800586a:	d100      	bne.n	800586e <memset+0xa>
 800586c:	4770      	bx	lr
 800586e:	f803 1b01 	strb.w	r1, [r3], #1
 8005872:	e7f9      	b.n	8005868 <memset+0x4>

08005874 <__libc_init_array>:
 8005874:	b570      	push	{r4, r5, r6, lr}
 8005876:	4d0d      	ldr	r5, [pc, #52]	@ (80058ac <__libc_init_array+0x38>)
 8005878:	4c0d      	ldr	r4, [pc, #52]	@ (80058b0 <__libc_init_array+0x3c>)
 800587a:	1b64      	subs	r4, r4, r5
 800587c:	10a4      	asrs	r4, r4, #2
 800587e:	2600      	movs	r6, #0
 8005880:	42a6      	cmp	r6, r4
 8005882:	d109      	bne.n	8005898 <__libc_init_array+0x24>
 8005884:	4d0b      	ldr	r5, [pc, #44]	@ (80058b4 <__libc_init_array+0x40>)
 8005886:	4c0c      	ldr	r4, [pc, #48]	@ (80058b8 <__libc_init_array+0x44>)
 8005888:	f000 f818 	bl	80058bc <_init>
 800588c:	1b64      	subs	r4, r4, r5
 800588e:	10a4      	asrs	r4, r4, #2
 8005890:	2600      	movs	r6, #0
 8005892:	42a6      	cmp	r6, r4
 8005894:	d105      	bne.n	80058a2 <__libc_init_array+0x2e>
 8005896:	bd70      	pop	{r4, r5, r6, pc}
 8005898:	f855 3b04 	ldr.w	r3, [r5], #4
 800589c:	4798      	blx	r3
 800589e:	3601      	adds	r6, #1
 80058a0:	e7ee      	b.n	8005880 <__libc_init_array+0xc>
 80058a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a6:	4798      	blx	r3
 80058a8:	3601      	adds	r6, #1
 80058aa:	e7f2      	b.n	8005892 <__libc_init_array+0x1e>
 80058ac:	08006ac4 	.word	0x08006ac4
 80058b0:	08006ac4 	.word	0x08006ac4
 80058b4:	08006ac4 	.word	0x08006ac4
 80058b8:	08006ac8 	.word	0x08006ac8

080058bc <_init>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	bf00      	nop
 80058c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c2:	bc08      	pop	{r3}
 80058c4:	469e      	mov	lr, r3
 80058c6:	4770      	bx	lr

080058c8 <_fini>:
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	bf00      	nop
 80058cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ce:	bc08      	pop	{r3}
 80058d0:	469e      	mov	lr, r3
 80058d2:	4770      	bx	lr
