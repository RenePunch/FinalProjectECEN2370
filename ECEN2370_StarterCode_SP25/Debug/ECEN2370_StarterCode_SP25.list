
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d70  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001240  08006f20  08006f20  00007f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008160  08008160  0000a078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008160  08008160  00009160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008168  08008168  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008168  08008168  00009168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800816c  0800816c  0000916c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08008170  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a078  2**0
                  CONTENTS
 10 .bss          00025cb4  20000078  20000078  0000a078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025d2c  20025d2c  0000a078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013098  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003073  00000000  00000000  0001d140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d0  00000000  00000000  000201b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f43  00000000  00000000  00021588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000271e3  00000000  00000000  000224cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017955  00000000  00000000  000496ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2af3  00000000  00000000  00061003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00143af6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a64  00000000  00000000  00143b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a3  00000000  00000000  001495a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006f08 	.word	0x08006f08

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08006f08 	.word	0x08006f08

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80005c0:	f002 f878 	bl	80026b4 <initialise_monitor_handles>
    LTCD__Init();
 80005c4:	f000 f978 	bl	80008b8 <LTCD__Init>
    LTCD_Layer_Init(0);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f000 f935 	bl	8000838 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80005ce:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005d2:	2000      	movs	r0, #0
 80005d4:	f000 fa66 	bl	8000aa4 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005d8:	f000 fbe8 	bl	8000dac <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005dc:	4b02      	ldr	r3, [pc, #8]	@ (80005e8 <ApplicationInit+0x2c>)
 80005de:	2201      	movs	r2, #1
 80005e0:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000094 	.word	0x20000094

080005ec <LCD_Visual_Demo>:

void LCD_Visual_Demo(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	visualDemo();
 80005f0:	f000 fb2a 	bl	8000c48 <visualDemo>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <LCD_Touch_Polling_Demo>:

#if COMPILE_TOUCH_FUNCTIONS == 1
void LCD_Touch_Polling_Demo(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_GREEN);
 80005fc:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8000600:	2000      	movs	r0, #0
 8000602:	f000 fa4f 	bl	8000aa4 <LCD_Clear>
	while (1) {
		/* If touch pressed */
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000606:	480f      	ldr	r0, [pc, #60]	@ (8000644 <LCD_Touch_Polling_Demo+0x4c>)
 8000608:	f000 fbdb 	bl	8000dc2 <returnTouchStateAndLocation>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d10e      	bne.n	8000630 <LCD_Touch_Polling_Demo+0x38>
			/* Touch valid */
			printf("\nX: %03d\nY: %03d\n", StaticTouchData.x, StaticTouchData.y);
 8000612:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <LCD_Touch_Polling_Demo+0x4c>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	4619      	mov	r1, r3
 8000618:	4b0a      	ldr	r3, [pc, #40]	@ (8000644 <LCD_Touch_Polling_Demo+0x4c>)
 800061a:	885b      	ldrh	r3, [r3, #2]
 800061c:	461a      	mov	r2, r3
 800061e:	480a      	ldr	r0, [pc, #40]	@ (8000648 <LCD_Touch_Polling_Demo+0x50>)
 8000620:	f005 fdaa 	bl	8006178 <iprintf>
			LCD_Clear(0, LCD_COLOR_RED);
 8000624:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8000628:	2000      	movs	r0, #0
 800062a:	f000 fa3b 	bl	8000aa4 <LCD_Clear>
 800062e:	e7ea      	b.n	8000606 <LCD_Touch_Polling_Demo+0xe>
		} else {
			/* Touch not pressed */
			printf("Not Pressed\n\n");
 8000630:	4806      	ldr	r0, [pc, #24]	@ (800064c <LCD_Touch_Polling_Demo+0x54>)
 8000632:	f005 fe09 	bl	8006248 <puts>
			LCD_Clear(0, LCD_COLOR_GREEN);
 8000636:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800063a:	2000      	movs	r0, #0
 800063c:	f000 fa32 	bl	8000aa4 <LCD_Clear>
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000640:	e7e1      	b.n	8000606 <LCD_Touch_Polling_Demo+0xe>
 8000642:	bf00      	nop
 8000644:	20000094 	.word	0x20000094
 8000648:	08006f20 	.word	0x08006f20
 800064c:	08006f34 	.word	0x08006f34

08000650 <firstScreen>:
#define ROWS 6
#define COLS 7

char board[ROWS][COLS];

void firstScreen(void){
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	LCD_DisplayChar(100,140,'C');
 8000654:	2243      	movs	r2, #67	@ 0x43
 8000656:	218c      	movs	r1, #140	@ 0x8c
 8000658:	2064      	movs	r0, #100	@ 0x64
 800065a:	f000 fad3 	bl	8000c04 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'o');
 800065e:	226f      	movs	r2, #111	@ 0x6f
 8000660:	218c      	movs	r1, #140	@ 0x8c
 8000662:	2073      	movs	r0, #115	@ 0x73
 8000664:	f000 face 	bl	8000c04 <LCD_DisplayChar>
	LCD_DisplayChar(125,140,'n');
 8000668:	226e      	movs	r2, #110	@ 0x6e
 800066a:	218c      	movs	r1, #140	@ 0x8c
 800066c:	207d      	movs	r0, #125	@ 0x7d
 800066e:	f000 fac9 	bl	8000c04 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'n');
 8000672:	226e      	movs	r2, #110	@ 0x6e
 8000674:	218c      	movs	r1, #140	@ 0x8c
 8000676:	2082      	movs	r0, #130	@ 0x82
 8000678:	f000 fac4 	bl	8000c04 <LCD_DisplayChar>
	LCD_DisplayChar(140,140,'e');
 800067c:	2265      	movs	r2, #101	@ 0x65
 800067e:	218c      	movs	r1, #140	@ 0x8c
 8000680:	208c      	movs	r0, #140	@ 0x8c
 8000682:	f000 fabf 	bl	8000c04 <LCD_DisplayChar>
	LCD_DisplayChar(150,140,'c');
 8000686:	2263      	movs	r2, #99	@ 0x63
 8000688:	218c      	movs	r1, #140	@ 0x8c
 800068a:	2096      	movs	r0, #150	@ 0x96
 800068c:	f000 faba 	bl	8000c04 <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'t');
 8000690:	2274      	movs	r2, #116	@ 0x74
 8000692:	218c      	movs	r1, #140	@ 0x8c
 8000694:	20a5      	movs	r0, #165	@ 0xa5
 8000696:	f000 fab5 	bl	8000c04 <LCD_DisplayChar>
	LCD_DisplayChar(175,140,'4');
 800069a:	2234      	movs	r2, #52	@ 0x34
 800069c:	218c      	movs	r1, #140	@ 0x8c
 800069e:	20af      	movs	r0, #175	@ 0xaf
 80006a0:	f000 fab0 	bl	8000c04 <LCD_DisplayChar>

}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08c      	sub	sp, #48	@ 0x30
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	61bb      	str	r3, [r7, #24]
 80006b2:	4b5a      	ldr	r3, [pc, #360]	@ (800081c <LCD_GPIO_Init+0x174>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b6:	4a59      	ldr	r2, [pc, #356]	@ (800081c <LCD_GPIO_Init+0x174>)
 80006b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80006bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80006be:	4b57      	ldr	r3, [pc, #348]	@ (800081c <LCD_GPIO_Init+0x174>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80006c6:	61bb      	str	r3, [r7, #24]
 80006c8:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	4b53      	ldr	r3, [pc, #332]	@ (800081c <LCD_GPIO_Init+0x174>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a52      	ldr	r2, [pc, #328]	@ (800081c <LCD_GPIO_Init+0x174>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b50      	ldr	r3, [pc, #320]	@ (800081c <LCD_GPIO_Init+0x174>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b4c      	ldr	r3, [pc, #304]	@ (800081c <LCD_GPIO_Init+0x174>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a4b      	ldr	r2, [pc, #300]	@ (800081c <LCD_GPIO_Init+0x174>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b49      	ldr	r3, [pc, #292]	@ (800081c <LCD_GPIO_Init+0x174>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b45      	ldr	r3, [pc, #276]	@ (800081c <LCD_GPIO_Init+0x174>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a44      	ldr	r2, [pc, #272]	@ (800081c <LCD_GPIO_Init+0x174>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b42      	ldr	r3, [pc, #264]	@ (800081c <LCD_GPIO_Init+0x174>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b3e      	ldr	r3, [pc, #248]	@ (800081c <LCD_GPIO_Init+0x174>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a3d      	ldr	r2, [pc, #244]	@ (800081c <LCD_GPIO_Init+0x174>)
 8000728:	f043 0308 	orr.w	r3, r3, #8
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b3b      	ldr	r3, [pc, #236]	@ (800081c <LCD_GPIO_Init+0x174>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0308 	and.w	r3, r3, #8
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b37      	ldr	r3, [pc, #220]	@ (800081c <LCD_GPIO_Init+0x174>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a36      	ldr	r2, [pc, #216]	@ (800081c <LCD_GPIO_Init+0x174>)
 8000744:	f043 0320 	orr.w	r3, r3, #32
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b34      	ldr	r3, [pc, #208]	@ (800081c <LCD_GPIO_Init+0x174>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0320 	and.w	r3, r3, #32
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4b30      	ldr	r3, [pc, #192]	@ (800081c <LCD_GPIO_Init+0x174>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a2f      	ldr	r2, [pc, #188]	@ (800081c <LCD_GPIO_Init+0x174>)
 8000760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b2d      	ldr	r3, [pc, #180]	@ (800081c <LCD_GPIO_Init+0x174>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000772:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000776:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000780:	2302      	movs	r3, #2
 8000782:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000784:	230e      	movs	r3, #14
 8000786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	4824      	ldr	r0, [pc, #144]	@ (8000820 <LCD_GPIO_Init+0x178>)
 8000790:	f002 f9f2 	bl	8002b78 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000794:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000798:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	4820      	ldr	r0, [pc, #128]	@ (8000824 <LCD_GPIO_Init+0x17c>)
 80007a2:	f002 f9e9 	bl	8002b78 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80007a6:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80007aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4619      	mov	r1, r3
 80007b2:	481d      	ldr	r0, [pc, #116]	@ (8000828 <LCD_GPIO_Init+0x180>)
 80007b4:	f002 f9e0 	bl	8002b78 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80007b8:	2348      	movs	r3, #72	@ 0x48
 80007ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4619      	mov	r1, r3
 80007c2:	481a      	ldr	r0, [pc, #104]	@ (800082c <LCD_GPIO_Init+0x184>)
 80007c4:	f002 f9d8 	bl	8002b78 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80007c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	4816      	ldr	r0, [pc, #88]	@ (8000830 <LCD_GPIO_Init+0x188>)
 80007d6:	f002 f9cf 	bl	8002b78 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80007da:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80007de:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4619      	mov	r1, r3
 80007e6:	4813      	ldr	r0, [pc, #76]	@ (8000834 <LCD_GPIO_Init+0x18c>)
 80007e8:	f002 f9c6 	bl	8002b78 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80007ec:	2303      	movs	r3, #3
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80007f0:	2309      	movs	r3, #9
 80007f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	480a      	ldr	r0, [pc, #40]	@ (8000824 <LCD_GPIO_Init+0x17c>)
 80007fc:	f002 f9bc 	bl	8002b78 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000800:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4809      	ldr	r0, [pc, #36]	@ (8000834 <LCD_GPIO_Init+0x18c>)
 800080e:	f002 f9b3 	bl	8002b78 <HAL_GPIO_Init>
}
 8000812:	bf00      	nop
 8000814:	3730      	adds	r7, #48	@ 0x30
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800
 8000820:	40020000 	.word	0x40020000
 8000824:	40020400 	.word	0x40020400
 8000828:	40020800 	.word	0x40020800
 800082c:	40020c00 	.word	0x40020c00
 8000830:	40021400 	.word	0x40021400
 8000834:	40021800 	.word	0x40021800

08000838 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b090      	sub	sp, #64	@ 0x40
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000846:	23f0      	movs	r3, #240	@ 0xf0
 8000848:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800084e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000852:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000854:	2302      	movs	r3, #2
 8000856:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000858:	23ff      	movs	r3, #255	@ 0xff
 800085a:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000860:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000864:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000866:	2305      	movs	r3, #5
 8000868:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d101      	bne.n	8000874 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <LTCD_Layer_Init+0x78>)
 8000872:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000874:	23f0      	movs	r3, #240	@ 0xf0
 8000876:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000878:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800087c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000890:	79fa      	ldrb	r2, [r7, #7]
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	4619      	mov	r1, r3
 8000898:	4806      	ldr	r0, [pc, #24]	@ (80008b4 <LTCD_Layer_Init+0x7c>)
 800089a:	f003 fdaf 	bl	80043fc <HAL_LTDC_ConfigLayer>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80008a4:	f000 fa7c 	bl	8000da0 <LCD_Error_Handler>
	}
}
 80008a8:	bf00      	nop
 80008aa:	3740      	adds	r7, #64	@ 0x40
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000178 	.word	0x20000178
 80008b4:	2000009c 	.word	0x2000009c

080008b8 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80008bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000968 <LTCD__Init+0xb0>)
 80008be:	4a2b      	ldr	r2, [pc, #172]	@ (800096c <LTCD__Init+0xb4>)
 80008c0:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80008c2:	4b29      	ldr	r3, [pc, #164]	@ (8000968 <LTCD__Init+0xb0>)
 80008c4:	2209      	movs	r2, #9
 80008c6:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80008c8:	4b27      	ldr	r3, [pc, #156]	@ (8000968 <LTCD__Init+0xb0>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80008ce:	4b26      	ldr	r3, [pc, #152]	@ (8000968 <LTCD__Init+0xb0>)
 80008d0:	221d      	movs	r2, #29
 80008d2:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80008d4:	4b24      	ldr	r3, [pc, #144]	@ (8000968 <LTCD__Init+0xb0>)
 80008d6:	2203      	movs	r2, #3
 80008d8:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80008da:	4b23      	ldr	r3, [pc, #140]	@ (8000968 <LTCD__Init+0xb0>)
 80008dc:	f240 120d 	movw	r2, #269	@ 0x10d
 80008e0:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80008e2:	4b21      	ldr	r3, [pc, #132]	@ (8000968 <LTCD__Init+0xb0>)
 80008e4:	f240 1243 	movw	r2, #323	@ 0x143
 80008e8:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80008ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000968 <LTCD__Init+0xb0>)
 80008ec:	f240 1217 	movw	r2, #279	@ 0x117
 80008f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80008f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000968 <LTCD__Init+0xb0>)
 80008f4:	f240 1247 	movw	r2, #327	@ 0x147
 80008f8:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80008fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <LTCD__Init+0xb0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000902:	4b19      	ldr	r3, [pc, #100]	@ (8000968 <LTCD__Init+0xb0>)
 8000904:	2200      	movs	r2, #0
 8000906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800090a:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <LTCD__Init+0xb0>)
 800090c:	2200      	movs	r2, #0
 800090e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000912:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <LTCD__Init+0xb8>)
 8000914:	2208      	movs	r2, #8
 8000916:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000918:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <LTCD__Init+0xb8>)
 800091a:	22c0      	movs	r2, #192	@ 0xc0
 800091c:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800091e:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <LTCD__Init+0xb8>)
 8000920:	2204      	movs	r2, #4
 8000922:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <LTCD__Init+0xb8>)
 8000926:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800092a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800092c:	4810      	ldr	r0, [pc, #64]	@ (8000970 <LTCD__Init+0xb8>)
 800092e:	f004 fbbf 	bl	80050b0 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000932:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <LTCD__Init+0xb0>)
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000938:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <LTCD__Init+0xb0>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800093e:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <LTCD__Init+0xb0>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000944:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <LTCD__Init+0xb0>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 800094a:	f7ff fead 	bl	80006a8 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800094e:	4806      	ldr	r0, [pc, #24]	@ (8000968 <LTCD__Init+0xb0>)
 8000950:	f003 fc84 	bl	800425c <HAL_LTDC_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 800095a:	f000 fa21 	bl	8000da0 <LCD_Error_Handler>
	 }

	ili9341_Init();
 800095e:	f000 fa3c 	bl	8000dda <ili9341_Init>
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000009c 	.word	0x2000009c
 800096c:	40016800 	.word	0x40016800
 8000970:	20000144 	.word	0x20000144

08000974 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	80fb      	strh	r3, [r7, #6]
 800097e:	460b      	mov	r3, r1
 8000980:	80bb      	strh	r3, [r7, #4]
 8000982:	4613      	mov	r3, r2
 8000984:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000986:	88ba      	ldrh	r2, [r7, #4]
 8000988:	4613      	mov	r3, r2
 800098a:	011b      	lsls	r3, r3, #4
 800098c:	1a9b      	subs	r3, r3, r2
 800098e:	011b      	lsls	r3, r3, #4
 8000990:	461a      	mov	r2, r3
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	4413      	add	r3, r2
 8000996:	4905      	ldr	r1, [pc, #20]	@ (80009ac <LCD_Draw_Pixel+0x38>)
 8000998:	887a      	ldrh	r2, [r7, #2]
 800099a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000178 	.word	0x20000178

080009b0 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4604      	mov	r4, r0
 80009b8:	4608      	mov	r0, r1
 80009ba:	4611      	mov	r1, r2
 80009bc:	461a      	mov	r2, r3
 80009be:	4623      	mov	r3, r4
 80009c0:	80fb      	strh	r3, [r7, #6]
 80009c2:	4603      	mov	r3, r0
 80009c4:	80bb      	strh	r3, [r7, #4]
 80009c6:	460b      	mov	r3, r1
 80009c8:	807b      	strh	r3, [r7, #2]
 80009ca:	4613      	mov	r3, r2
 80009cc:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 80009ce:	887b      	ldrh	r3, [r7, #2]
 80009d0:	425b      	negs	r3, r3
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	81fb      	strh	r3, [r7, #14]
 80009d6:	e034      	b.n	8000a42 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 80009d8:	887b      	ldrh	r3, [r7, #2]
 80009da:	425b      	negs	r3, r3
 80009dc:	b29b      	uxth	r3, r3
 80009de:	81bb      	strh	r3, [r7, #12]
 80009e0:	e024      	b.n	8000a2c <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 80009e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80009e6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009ea:	fb03 f202 	mul.w	r2, r3, r2
 80009ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009f2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80009f6:	fb01 f303 	mul.w	r3, r1, r3
 80009fa:	441a      	add	r2, r3
 80009fc:	887b      	ldrh	r3, [r7, #2]
 80009fe:	8879      	ldrh	r1, [r7, #2]
 8000a00:	fb01 f303 	mul.w	r3, r1, r3
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dc0b      	bgt.n	8000a20 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000a08:	89ba      	ldrh	r2, [r7, #12]
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	b298      	uxth	r0, r3
 8000a10:	89fa      	ldrh	r2, [r7, #14]
 8000a12:	88bb      	ldrh	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	883a      	ldrh	r2, [r7, #0]
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f7ff ffaa 	bl	8000974 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000a20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	3301      	adds	r3, #1
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	81bb      	strh	r3, [r7, #12]
 8000a2c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a30:	887b      	ldrh	r3, [r7, #2]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	ddd5      	ble.n	80009e2 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000a36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	81fb      	strh	r3, [r7, #14]
 8000a42:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000a46:	887b      	ldrh	r3, [r7, #2]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	ddc5      	ble.n	80009d8 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd90      	pop	{r4, r7, pc}

08000a56 <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000a56:	b590      	push	{r4, r7, lr}
 8000a58:	b085      	sub	sp, #20
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4604      	mov	r4, r0
 8000a5e:	4608      	mov	r0, r1
 8000a60:	4611      	mov	r1, r2
 8000a62:	461a      	mov	r2, r3
 8000a64:	4623      	mov	r3, r4
 8000a66:	80fb      	strh	r3, [r7, #6]
 8000a68:	4603      	mov	r3, r0
 8000a6a:	80bb      	strh	r3, [r7, #4]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	807b      	strh	r3, [r7, #2]
 8000a70:	4613      	mov	r3, r2
 8000a72:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000a74:	2300      	movs	r3, #0
 8000a76:	81fb      	strh	r3, [r7, #14]
 8000a78:	e00b      	b.n	8000a92 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000a7a:	89fa      	ldrh	r2, [r7, #14]
 8000a7c:	88bb      	ldrh	r3, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	b299      	uxth	r1, r3
 8000a82:	883a      	ldrh	r2, [r7, #0]
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ff74 	bl	8000974 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000a8c:	89fb      	ldrh	r3, [r7, #14]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	81fb      	strh	r3, [r7, #14]
 8000a92:	89fa      	ldrh	r2, [r7, #14]
 8000a94:	887b      	ldrh	r3, [r7, #2]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d3ef      	bcc.n	8000a7a <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd90      	pop	{r4, r7, pc}

08000aa4 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	460a      	mov	r2, r1
 8000aae:	71fb      	strb	r3, [r7, #7]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d10e      	bne.n	8000ad8 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	e007      	b.n	8000ad0 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000ac0:	4908      	ldr	r1, [pc, #32]	@ (8000ae4 <LCD_Clear+0x40>)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	88ba      	ldrh	r2, [r7, #4]
 8000ac6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	3301      	adds	r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000ad6:	d3f3      	bcc.n	8000ac0 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	20000178 	.word	0x20000178

08000ae8 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000af2:	4a04      	ldr	r2, [pc, #16]	@ (8000b04 <LCD_SetTextColor+0x1c>)
 8000af4:	88fb      	ldrh	r3, [r7, #6]
 8000af6:	8013      	strh	r3, [r2, #0]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	20000000 	.word	0x20000000

08000b08 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000b10:	4a04      	ldr	r2, [pc, #16]	@ (8000b24 <LCD_SetFont+0x1c>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000174 	.word	0x20000174

08000b28 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	603a      	str	r2, [r7, #0]
 8000b32:	80fb      	strh	r3, [r7, #6]
 8000b34:	460b      	mov	r3, r1
 8000b36:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	e04c      	b.n	8000be0 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	e03f      	b.n	8000bcc <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	683a      	ldr	r2, [r7, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	4619      	mov	r1, r3
 8000b58:	4b27      	ldr	r3, [pc, #156]	@ (8000bf8 <LCD_Draw_Char+0xd0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	889b      	ldrh	r3, [r3, #4]
 8000b5e:	4a27      	ldr	r2, [pc, #156]	@ (8000bfc <LCD_Draw_Char+0xd4>)
 8000b60:	fba2 2303 	umull	r2, r3, r2, r3
 8000b64:	08db      	lsrs	r3, r3, #3
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	2280      	movs	r2, #128	@ 0x80
 8000b6c:	409a      	lsls	r2, r3
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	fa42 f303 	asr.w	r3, r2, r3
 8000b74:	400b      	ands	r3, r1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d104      	bne.n	8000b84 <LCD_Draw_Char+0x5c>
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf8 <LCD_Draw_Char+0xd0>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	889b      	ldrh	r3, [r3, #4]
 8000b80:	2b0c      	cmp	r3, #12
 8000b82:	d920      	bls.n	8000bc6 <LCD_Draw_Char+0x9e>
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	fa42 f303 	asr.w	r3, r2, r3
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d104      	bne.n	8000ba8 <LCD_Draw_Char+0x80>
 8000b9e:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <LCD_Draw_Char+0xd0>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	889b      	ldrh	r3, [r3, #4]
 8000ba4:	2b0c      	cmp	r3, #12
 8000ba6:	d80e      	bhi.n	8000bc6 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	88fb      	ldrh	r3, [r7, #6]
 8000bae:	4413      	add	r3, r2
 8000bb0:	b298      	uxth	r0, r3
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	88bb      	ldrh	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	4a10      	ldr	r2, [pc, #64]	@ (8000c00 <LCD_Draw_Char+0xd8>)
 8000bbe:	8812      	ldrh	r2, [r2, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f7ff fed7 	bl	8000974 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <LCD_Draw_Char+0xd0>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	889b      	ldrh	r3, [r3, #4]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d3b8      	bcc.n	8000b4c <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <LCD_Draw_Char+0xd0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	88db      	ldrh	r3, [r3, #6]
 8000be6:	461a      	mov	r2, r3
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d3ab      	bcc.n	8000b46 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000bee:	bf00      	nop
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000174 	.word	0x20000174
 8000bfc:	aaaaaaab 	.word	0xaaaaaaab
 8000c00:	20000000 	.word	0x20000000

08000c04 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	80fb      	strh	r3, [r7, #6]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	80bb      	strh	r3, [r7, #4]
 8000c12:	4613      	mov	r3, r2
 8000c14:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000c16:	78fb      	ldrb	r3, [r7, #3]
 8000c18:	3b20      	subs	r3, #32
 8000c1a:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000c1c:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <LCD_DisplayChar+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	78fb      	ldrb	r3, [r7, #3]
 8000c24:	4907      	ldr	r1, [pc, #28]	@ (8000c44 <LCD_DisplayChar+0x40>)
 8000c26:	6809      	ldr	r1, [r1, #0]
 8000c28:	88c9      	ldrh	r1, [r1, #6]
 8000c2a:	fb01 f303 	mul.w	r3, r1, r3
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	441a      	add	r2, r3
 8000c32:	88b9      	ldrh	r1, [r7, #4]
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff76 	bl	8000b28 <LCD_Draw_Char>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000174 	.word	0x20000174

08000c48 <visualDemo>:

void visualDemo(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
	uint16_t x;
	uint16_t y;
	// This for loop just illustrates how with using logic and for loops, you can create interesting things
	// this may or not be useful ;)
	for(y=0; y<LCD_PIXEL_HEIGHT; y++){
 8000c4e:	2300      	movs	r3, #0
 8000c50:	80bb      	strh	r3, [r7, #4]
 8000c52:	e022      	b.n	8000c9a <visualDemo+0x52>
		for(x=0; x < LCD_PIXEL_WIDTH; x++){
 8000c54:	2300      	movs	r3, #0
 8000c56:	80fb      	strh	r3, [r7, #6]
 8000c58:	e019      	b.n	8000c8e <visualDemo+0x46>
			if (x & 32)
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	f003 0320 	and.w	r3, r3, #32
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d009      	beq.n	8000c78 <visualDemo+0x30>
				frameBuffer[x*y] = LCD_COLOR_WHITE;
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	88ba      	ldrh	r2, [r7, #4]
 8000c68:	fb02 f303 	mul.w	r3, r2, r3
 8000c6c:	4a4a      	ldr	r2, [pc, #296]	@ (8000d98 <visualDemo+0x150>)
 8000c6e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000c72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c76:	e007      	b.n	8000c88 <visualDemo+0x40>
			else
				frameBuffer[x*y] = LCD_COLOR_BLACK;
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	88ba      	ldrh	r2, [r7, #4]
 8000c7c:	fb02 f303 	mul.w	r3, r2, r3
 8000c80:	4a45      	ldr	r2, [pc, #276]	@ (8000d98 <visualDemo+0x150>)
 8000c82:	2100      	movs	r1, #0
 8000c84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(x=0; x < LCD_PIXEL_WIDTH; x++){
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	80fb      	strh	r3, [r7, #6]
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	2bef      	cmp	r3, #239	@ 0xef
 8000c92:	d9e2      	bls.n	8000c5a <visualDemo+0x12>
	for(y=0; y<LCD_PIXEL_HEIGHT; y++){
 8000c94:	88bb      	ldrh	r3, [r7, #4]
 8000c96:	3301      	adds	r3, #1
 8000c98:	80bb      	strh	r3, [r7, #4]
 8000c9a:	88bb      	ldrh	r3, [r7, #4]
 8000c9c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000ca0:	d3d8      	bcc.n	8000c54 <visualDemo+0xc>
		}
	}

	HAL_Delay(1500);
 8000ca2:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000ca6:	f001 fe5d 	bl	8002964 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_GREEN);
 8000caa:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f7ff fef8 	bl	8000aa4 <LCD_Clear>
	HAL_Delay(1500);
 8000cb4:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000cb8:	f001 fe54 	bl	8002964 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_RED);
 8000cbc:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f7ff feef 	bl	8000aa4 <LCD_Clear>
	HAL_Delay(1500);
 8000cc6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000cca:	f001 fe4b 	bl	8002964 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_WHITE);
 8000cce:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f7ff fee6 	bl	8000aa4 <LCD_Clear>
	LCD_Draw_Vertical_Line(10,10,250,LCD_COLOR_MAGENTA);
 8000cd8:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000cdc:	22fa      	movs	r2, #250	@ 0xfa
 8000cde:	210a      	movs	r1, #10
 8000ce0:	200a      	movs	r0, #10
 8000ce2:	f7ff feb8 	bl	8000a56 <LCD_Draw_Vertical_Line>
	HAL_Delay(1500);
 8000ce6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000cea:	f001 fe3b 	bl	8002964 <HAL_Delay>
	LCD_Draw_Vertical_Line(230,10,250,LCD_COLOR_MAGENTA);
 8000cee:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000cf2:	22fa      	movs	r2, #250	@ 0xfa
 8000cf4:	210a      	movs	r1, #10
 8000cf6:	20e6      	movs	r0, #230	@ 0xe6
 8000cf8:	f7ff fead 	bl	8000a56 <LCD_Draw_Vertical_Line>
	HAL_Delay(1500);
 8000cfc:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000d00:	f001 fe30 	bl	8002964 <HAL_Delay>

	LCD_Draw_Circle_Fill(125,150,20,LCD_COLOR_BLACK);
 8000d04:	2300      	movs	r3, #0
 8000d06:	2214      	movs	r2, #20
 8000d08:	2196      	movs	r1, #150	@ 0x96
 8000d0a:	207d      	movs	r0, #125	@ 0x7d
 8000d0c:	f7ff fe50 	bl	80009b0 <LCD_Draw_Circle_Fill>
	HAL_Delay(2000);
 8000d10:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d14:	f001 fe26 	bl	8002964 <HAL_Delay>

	LCD_Clear(0,LCD_COLOR_BLUE);
 8000d18:	211f      	movs	r1, #31
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f7ff fec2 	bl	8000aa4 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff fee1 	bl	8000ae8 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000d26:	481d      	ldr	r0, [pc, #116]	@ (8000d9c <visualDemo+0x154>)
 8000d28:	f7ff feee 	bl	8000b08 <LCD_SetFont>

	LCD_DisplayChar(100,140,'H');
 8000d2c:	2248      	movs	r2, #72	@ 0x48
 8000d2e:	218c      	movs	r1, #140	@ 0x8c
 8000d30:	2064      	movs	r0, #100	@ 0x64
 8000d32:	f7ff ff67 	bl	8000c04 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'e');
 8000d36:	2265      	movs	r2, #101	@ 0x65
 8000d38:	218c      	movs	r1, #140	@ 0x8c
 8000d3a:	2073      	movs	r0, #115	@ 0x73
 8000d3c:	f7ff ff62 	bl	8000c04 <LCD_DisplayChar>
	LCD_DisplayChar(125,140,'l');
 8000d40:	226c      	movs	r2, #108	@ 0x6c
 8000d42:	218c      	movs	r1, #140	@ 0x8c
 8000d44:	207d      	movs	r0, #125	@ 0x7d
 8000d46:	f7ff ff5d 	bl	8000c04 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'l');
 8000d4a:	226c      	movs	r2, #108	@ 0x6c
 8000d4c:	218c      	movs	r1, #140	@ 0x8c
 8000d4e:	2082      	movs	r0, #130	@ 0x82
 8000d50:	f7ff ff58 	bl	8000c04 <LCD_DisplayChar>
	LCD_DisplayChar(140,140,'o');
 8000d54:	226f      	movs	r2, #111	@ 0x6f
 8000d56:	218c      	movs	r1, #140	@ 0x8c
 8000d58:	208c      	movs	r0, #140	@ 0x8c
 8000d5a:	f7ff ff53 	bl	8000c04 <LCD_DisplayChar>

	LCD_DisplayChar(100,160,'W');
 8000d5e:	2257      	movs	r2, #87	@ 0x57
 8000d60:	21a0      	movs	r1, #160	@ 0xa0
 8000d62:	2064      	movs	r0, #100	@ 0x64
 8000d64:	f7ff ff4e 	bl	8000c04 <LCD_DisplayChar>
	LCD_DisplayChar(115,160,'o');
 8000d68:	226f      	movs	r2, #111	@ 0x6f
 8000d6a:	21a0      	movs	r1, #160	@ 0xa0
 8000d6c:	2073      	movs	r0, #115	@ 0x73
 8000d6e:	f7ff ff49 	bl	8000c04 <LCD_DisplayChar>
	LCD_DisplayChar(125,160,'r');
 8000d72:	2272      	movs	r2, #114	@ 0x72
 8000d74:	21a0      	movs	r1, #160	@ 0xa0
 8000d76:	207d      	movs	r0, #125	@ 0x7d
 8000d78:	f7ff ff44 	bl	8000c04 <LCD_DisplayChar>
	LCD_DisplayChar(130,160,'l');
 8000d7c:	226c      	movs	r2, #108	@ 0x6c
 8000d7e:	21a0      	movs	r1, #160	@ 0xa0
 8000d80:	2082      	movs	r0, #130	@ 0x82
 8000d82:	f7ff ff3f 	bl	8000c04 <LCD_DisplayChar>
	LCD_DisplayChar(140,160,'d');
 8000d86:	2264      	movs	r2, #100	@ 0x64
 8000d88:	21a0      	movs	r1, #160	@ 0xa0
 8000d8a:	208c      	movs	r0, #140	@ 0x8c
 8000d8c:	f7ff ff3a 	bl	8000c04 <LCD_DisplayChar>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000178 	.word	0x20000178
 8000d9c:	20000004 	.word	0x20000004

08000da0 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <LCD_Error_Handler+0x8>

08000dac <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000db0:	f001 f935 	bl	800201e <STMPE811_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d001      	beq.n	8000dbe <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000dba:	bf00      	nop
 8000dbc:	e7fd      	b.n	8000dba <InitializeLCDTouch+0xe>
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f001 f9df 	bl	800218e <STMPE811_ReadTouch>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000dde:	f000 f9ff 	bl	80011e0 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000de2:	20ca      	movs	r0, #202	@ 0xca
 8000de4:	f000 f943 	bl	800106e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000de8:	20c3      	movs	r0, #195	@ 0xc3
 8000dea:	f000 f94d 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000dee:	2008      	movs	r0, #8
 8000df0:	f000 f94a 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000df4:	2050      	movs	r0, #80	@ 0x50
 8000df6:	f000 f947 	bl	8001088 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000dfa:	20cf      	movs	r0, #207	@ 0xcf
 8000dfc:	f000 f937 	bl	800106e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000e00:	2000      	movs	r0, #0
 8000e02:	f000 f941 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000e06:	20c1      	movs	r0, #193	@ 0xc1
 8000e08:	f000 f93e 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000e0c:	2030      	movs	r0, #48	@ 0x30
 8000e0e:	f000 f93b 	bl	8001088 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000e12:	20ed      	movs	r0, #237	@ 0xed
 8000e14:	f000 f92b 	bl	800106e <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000e18:	2064      	movs	r0, #100	@ 0x64
 8000e1a:	f000 f935 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000e1e:	2003      	movs	r0, #3
 8000e20:	f000 f932 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000e24:	2012      	movs	r0, #18
 8000e26:	f000 f92f 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000e2a:	2081      	movs	r0, #129	@ 0x81
 8000e2c:	f000 f92c 	bl	8001088 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000e30:	20e8      	movs	r0, #232	@ 0xe8
 8000e32:	f000 f91c 	bl	800106e <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000e36:	2085      	movs	r0, #133	@ 0x85
 8000e38:	f000 f926 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f000 f923 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000e42:	2078      	movs	r0, #120	@ 0x78
 8000e44:	f000 f920 	bl	8001088 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000e48:	20cb      	movs	r0, #203	@ 0xcb
 8000e4a:	f000 f910 	bl	800106e <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000e4e:	2039      	movs	r0, #57	@ 0x39
 8000e50:	f000 f91a 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000e54:	202c      	movs	r0, #44	@ 0x2c
 8000e56:	f000 f917 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f000 f914 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000e60:	2034      	movs	r0, #52	@ 0x34
 8000e62:	f000 f911 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000e66:	2002      	movs	r0, #2
 8000e68:	f000 f90e 	bl	8001088 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000e6c:	20f7      	movs	r0, #247	@ 0xf7
 8000e6e:	f000 f8fe 	bl	800106e <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000e72:	2020      	movs	r0, #32
 8000e74:	f000 f908 	bl	8001088 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000e78:	20ea      	movs	r0, #234	@ 0xea
 8000e7a:	f000 f8f8 	bl	800106e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f000 f902 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000e84:	2000      	movs	r0, #0
 8000e86:	f000 f8ff 	bl	8001088 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000e8a:	20b1      	movs	r0, #177	@ 0xb1
 8000e8c:	f000 f8ef 	bl	800106e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000e90:	2000      	movs	r0, #0
 8000e92:	f000 f8f9 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000e96:	201b      	movs	r0, #27
 8000e98:	f000 f8f6 	bl	8001088 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000e9c:	20b6      	movs	r0, #182	@ 0xb6
 8000e9e:	f000 f8e6 	bl	800106e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000ea2:	200a      	movs	r0, #10
 8000ea4:	f000 f8f0 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8000ea8:	20a2      	movs	r0, #162	@ 0xa2
 8000eaa:	f000 f8ed 	bl	8001088 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8000eae:	20c0      	movs	r0, #192	@ 0xc0
 8000eb0:	f000 f8dd 	bl	800106e <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000eb4:	2010      	movs	r0, #16
 8000eb6:	f000 f8e7 	bl	8001088 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8000eba:	20c1      	movs	r0, #193	@ 0xc1
 8000ebc:	f000 f8d7 	bl	800106e <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000ec0:	2010      	movs	r0, #16
 8000ec2:	f000 f8e1 	bl	8001088 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8000ec6:	20c5      	movs	r0, #197	@ 0xc5
 8000ec8:	f000 f8d1 	bl	800106e <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8000ecc:	2045      	movs	r0, #69	@ 0x45
 8000ece:	f000 f8db 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8000ed2:	2015      	movs	r0, #21
 8000ed4:	f000 f8d8 	bl	8001088 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8000ed8:	20c7      	movs	r0, #199	@ 0xc7
 8000eda:	f000 f8c8 	bl	800106e <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8000ede:	2090      	movs	r0, #144	@ 0x90
 8000ee0:	f000 f8d2 	bl	8001088 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8000ee4:	2036      	movs	r0, #54	@ 0x36
 8000ee6:	f000 f8c2 	bl	800106e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8000eea:	20c8      	movs	r0, #200	@ 0xc8
 8000eec:	f000 f8cc 	bl	8001088 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8000ef0:	20f2      	movs	r0, #242	@ 0xf2
 8000ef2:	f000 f8bc 	bl	800106e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 f8c6 	bl	8001088 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8000efc:	20b0      	movs	r0, #176	@ 0xb0
 8000efe:	f000 f8b6 	bl	800106e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8000f02:	20c2      	movs	r0, #194	@ 0xc2
 8000f04:	f000 f8c0 	bl	8001088 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000f08:	20b6      	movs	r0, #182	@ 0xb6
 8000f0a:	f000 f8b0 	bl	800106e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000f0e:	200a      	movs	r0, #10
 8000f10:	f000 f8ba 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8000f14:	20a7      	movs	r0, #167	@ 0xa7
 8000f16:	f000 f8b7 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8000f1a:	2027      	movs	r0, #39	@ 0x27
 8000f1c:	f000 f8b4 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000f20:	2004      	movs	r0, #4
 8000f22:	f000 f8b1 	bl	8001088 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8000f26:	202a      	movs	r0, #42	@ 0x2a
 8000f28:	f000 f8a1 	bl	800106e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f000 f8ab 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f000 f8a8 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f000 f8a5 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8000f3e:	20ef      	movs	r0, #239	@ 0xef
 8000f40:	f000 f8a2 	bl	8001088 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8000f44:	202b      	movs	r0, #43	@ 0x2b
 8000f46:	f000 f892 	bl	800106e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f000 f89c 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f000 f899 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8000f56:	2001      	movs	r0, #1
 8000f58:	f000 f896 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8000f5c:	203f      	movs	r0, #63	@ 0x3f
 8000f5e:	f000 f893 	bl	8001088 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8000f62:	20f6      	movs	r0, #246	@ 0xf6
 8000f64:	f000 f883 	bl	800106e <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f000 f88d 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f000 f88a 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8000f74:	2006      	movs	r0, #6
 8000f76:	f000 f887 	bl	8001088 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8000f7a:	202c      	movs	r0, #44	@ 0x2c
 8000f7c:	f000 f877 	bl	800106e <ili9341_Write_Reg>
  LCD_Delay(200);
 8000f80:	20c8      	movs	r0, #200	@ 0xc8
 8000f82:	f000 f9e9 	bl	8001358 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8000f86:	2026      	movs	r0, #38	@ 0x26
 8000f88:	f000 f871 	bl	800106e <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f000 f87b 	bl	8001088 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8000f92:	20e0      	movs	r0, #224	@ 0xe0
 8000f94:	f000 f86b 	bl	800106e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8000f98:	200f      	movs	r0, #15
 8000f9a:	f000 f875 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8000f9e:	2029      	movs	r0, #41	@ 0x29
 8000fa0:	f000 f872 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8000fa4:	2024      	movs	r0, #36	@ 0x24
 8000fa6:	f000 f86f 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000faa:	200c      	movs	r0, #12
 8000fac:	f000 f86c 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8000fb0:	200e      	movs	r0, #14
 8000fb2:	f000 f869 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000fb6:	2009      	movs	r0, #9
 8000fb8:	f000 f866 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8000fbc:	204e      	movs	r0, #78	@ 0x4e
 8000fbe:	f000 f863 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000fc2:	2078      	movs	r0, #120	@ 0x78
 8000fc4:	f000 f860 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8000fc8:	203c      	movs	r0, #60	@ 0x3c
 8000fca:	f000 f85d 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000fce:	2009      	movs	r0, #9
 8000fd0:	f000 f85a 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8000fd4:	2013      	movs	r0, #19
 8000fd6:	f000 f857 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000fda:	2005      	movs	r0, #5
 8000fdc:	f000 f854 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8000fe0:	2017      	movs	r0, #23
 8000fe2:	f000 f851 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000fe6:	2011      	movs	r0, #17
 8000fe8:	f000 f84e 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000fec:	2000      	movs	r0, #0
 8000fee:	f000 f84b 	bl	8001088 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8000ff2:	20e1      	movs	r0, #225	@ 0xe1
 8000ff4:	f000 f83b 	bl	800106e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f000 f845 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8000ffe:	2016      	movs	r0, #22
 8001000:	f000 f842 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001004:	201b      	movs	r0, #27
 8001006:	f000 f83f 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800100a:	2004      	movs	r0, #4
 800100c:	f000 f83c 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001010:	2011      	movs	r0, #17
 8001012:	f000 f839 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001016:	2007      	movs	r0, #7
 8001018:	f000 f836 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800101c:	2031      	movs	r0, #49	@ 0x31
 800101e:	f000 f833 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001022:	2033      	movs	r0, #51	@ 0x33
 8001024:	f000 f830 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001028:	2042      	movs	r0, #66	@ 0x42
 800102a:	f000 f82d 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800102e:	2005      	movs	r0, #5
 8001030:	f000 f82a 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001034:	200c      	movs	r0, #12
 8001036:	f000 f827 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 800103a:	200a      	movs	r0, #10
 800103c:	f000 f824 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001040:	2028      	movs	r0, #40	@ 0x28
 8001042:	f000 f821 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001046:	202f      	movs	r0, #47	@ 0x2f
 8001048:	f000 f81e 	bl	8001088 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800104c:	200f      	movs	r0, #15
 800104e:	f000 f81b 	bl	8001088 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001052:	2011      	movs	r0, #17
 8001054:	f000 f80b 	bl	800106e <ili9341_Write_Reg>
  LCD_Delay(200);
 8001058:	20c8      	movs	r0, #200	@ 0xc8
 800105a:	f000 f97d 	bl	8001358 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800105e:	2029      	movs	r0, #41	@ 0x29
 8001060:	f000 f805 	bl	800106e <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001064:	202c      	movs	r0, #44	@ 0x2c
 8001066:	f000 f802 	bl	800106e <ili9341_Write_Reg>
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}

0800106e <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f94a 	bl	8001314 <LCD_IO_WriteReg>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f91b 	bl	80012d0 <LCD_IO_WriteData>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80010a8:	4819      	ldr	r0, [pc, #100]	@ (8001110 <SPI_Init+0x6c>)
 80010aa:	f004 fbe0 	bl	800586e <HAL_SPI_GetState>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d12b      	bne.n	800110c <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80010b4:	4b16      	ldr	r3, [pc, #88]	@ (8001110 <SPI_Init+0x6c>)
 80010b6:	4a17      	ldr	r2, [pc, #92]	@ (8001114 <SPI_Init+0x70>)
 80010b8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <SPI_Init+0x6c>)
 80010bc:	2218      	movs	r2, #24
 80010be:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80010c0:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <SPI_Init+0x6c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80010c6:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <SPI_Init+0x6c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80010cc:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <SPI_Init+0x6c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80010d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <SPI_Init+0x6c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80010d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001110 <SPI_Init+0x6c>)
 80010da:	2207      	movs	r2, #7
 80010dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80010de:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <SPI_Init+0x6c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <SPI_Init+0x6c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80010ea:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <SPI_Init+0x6c>)
 80010ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010f0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80010f2:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <SPI_Init+0x6c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80010f8:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <SPI_Init+0x6c>)
 80010fa:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010fe:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001100:	4803      	ldr	r0, [pc, #12]	@ (8001110 <SPI_Init+0x6c>)
 8001102:	f000 f833 	bl	800116c <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001106:	4802      	ldr	r0, [pc, #8]	@ (8001110 <SPI_Init+0x6c>)
 8001108:	f004 f9bc 	bl	8005484 <HAL_SPI_Init>
  }
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20025978 	.word	0x20025978
 8001114:	40015000 	.word	0x40015000

08001118 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001126:	4b09      	ldr	r3, [pc, #36]	@ (800114c <SPI_Write+0x34>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	1db9      	adds	r1, r7, #6
 800112c:	2201      	movs	r2, #1
 800112e:	4808      	ldr	r0, [pc, #32]	@ (8001150 <SPI_Write+0x38>)
 8001130:	f004 fa59 	bl	80055e6 <HAL_SPI_Transmit>
 8001134:	4603      	mov	r3, r0
 8001136:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800113e:	f000 f809 	bl	8001154 <SPI_Error>
  }
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000000c 	.word	0x2000000c
 8001150:	20025978 	.word	0x20025978

08001154 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001158:	4803      	ldr	r0, [pc, #12]	@ (8001168 <SPI_Error+0x14>)
 800115a:	f004 fa1c 	bl	8005596 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800115e:	f7ff ffa1 	bl	80010a4 <SPI_Init>
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20025978 	.word	0x20025978

0800116c <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	@ 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	4b17      	ldr	r3, [pc, #92]	@ (80011d8 <SPI_MspInit+0x6c>)
 800117a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117c:	4a16      	ldr	r2, [pc, #88]	@ (80011d8 <SPI_MspInit+0x6c>)
 800117e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001182:	6453      	str	r3, [r2, #68]	@ 0x44
 8001184:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <SPI_MspInit+0x6c>)
 8001186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001188:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <SPI_MspInit+0x6c>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001198:	4a0f      	ldr	r2, [pc, #60]	@ (80011d8 <SPI_MspInit+0x6c>)
 800119a:	f043 0320 	orr.w	r3, r3, #32
 800119e:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a0:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <SPI_MspInit+0x6c>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a4:	f003 0320 	and.w	r3, r3, #32
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80011ac:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80011b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80011b6:	2302      	movs	r3, #2
 80011b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80011ba:	2301      	movs	r3, #1
 80011bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80011be:	2305      	movs	r3, #5
 80011c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	4619      	mov	r1, r3
 80011c8:	4804      	ldr	r0, [pc, #16]	@ (80011dc <SPI_MspInit+0x70>)
 80011ca:	f001 fcd5 	bl	8002b78 <HAL_GPIO_Init>
}
 80011ce:	bf00      	nop
 80011d0:	3728      	adds	r7, #40	@ 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40021400 	.word	0x40021400

080011e0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80011e6:	4b36      	ldr	r3, [pc, #216]	@ (80012c0 <LCD_IO_Init+0xe0>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d164      	bne.n	80012b8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80011ee:	4b34      	ldr	r3, [pc, #208]	@ (80012c0 <LCD_IO_Init+0xe0>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	4b32      	ldr	r3, [pc, #200]	@ (80012c4 <LCD_IO_Init+0xe4>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fc:	4a31      	ldr	r2, [pc, #196]	@ (80012c4 <LCD_IO_Init+0xe4>)
 80011fe:	f043 0308 	orr.w	r3, r3, #8
 8001202:	6313      	str	r3, [r2, #48]	@ 0x30
 8001204:	4b2f      	ldr	r3, [pc, #188]	@ (80012c4 <LCD_IO_Init+0xe4>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001208:	f003 0308 	and.w	r3, r3, #8
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001210:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001214:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800121e:	2302      	movs	r3, #2
 8001220:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	4619      	mov	r1, r3
 8001228:	4827      	ldr	r0, [pc, #156]	@ (80012c8 <LCD_IO_Init+0xe8>)
 800122a:	f001 fca5 	bl	8002b78 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	4b24      	ldr	r3, [pc, #144]	@ (80012c4 <LCD_IO_Init+0xe4>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	4a23      	ldr	r2, [pc, #140]	@ (80012c4 <LCD_IO_Init+0xe4>)
 8001238:	f043 0308 	orr.w	r3, r3, #8
 800123c:	6313      	str	r3, [r2, #48]	@ 0x30
 800123e:	4b21      	ldr	r3, [pc, #132]	@ (80012c4 <LCD_IO_Init+0xe4>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800124a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800124e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001258:	2302      	movs	r3, #2
 800125a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	4619      	mov	r1, r3
 8001262:	4819      	ldr	r0, [pc, #100]	@ (80012c8 <LCD_IO_Init+0xe8>)
 8001264:	f001 fc88 	bl	8002b78 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001268:	2300      	movs	r3, #0
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <LCD_IO_Init+0xe4>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001270:	4a14      	ldr	r2, [pc, #80]	@ (80012c4 <LCD_IO_Init+0xe4>)
 8001272:	f043 0304 	orr.w	r3, r3, #4
 8001276:	6313      	str	r3, [r2, #48]	@ 0x30
 8001278:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <LCD_IO_Init+0xe4>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001284:	2304      	movs	r3, #4
 8001286:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001288:	2301      	movs	r3, #1
 800128a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001290:	2302      	movs	r3, #2
 8001292:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	4619      	mov	r1, r3
 800129a:	480c      	ldr	r0, [pc, #48]	@ (80012cc <LCD_IO_Init+0xec>)
 800129c:	f001 fc6c 	bl	8002b78 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80012a0:	2200      	movs	r2, #0
 80012a2:	2104      	movs	r1, #4
 80012a4:	4809      	ldr	r0, [pc, #36]	@ (80012cc <LCD_IO_Init+0xec>)
 80012a6:	f001 ff1f 	bl	80030e8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80012aa:	2201      	movs	r2, #1
 80012ac:	2104      	movs	r1, #4
 80012ae:	4807      	ldr	r0, [pc, #28]	@ (80012cc <LCD_IO_Init+0xec>)
 80012b0:	f001 ff1a 	bl	80030e8 <HAL_GPIO_WritePin>

    SPI_Init();
 80012b4:	f7ff fef6 	bl	80010a4 <SPI_Init>
  }
}
 80012b8:	bf00      	nop
 80012ba:	3720      	adds	r7, #32
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200259d0 	.word	0x200259d0
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020c00 	.word	0x40020c00
 80012cc:	40020800 	.word	0x40020800

080012d0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80012da:	2201      	movs	r2, #1
 80012dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012e0:	480a      	ldr	r0, [pc, #40]	@ (800130c <LCD_IO_WriteData+0x3c>)
 80012e2:	f001 ff01 	bl	80030e8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80012e6:	2200      	movs	r2, #0
 80012e8:	2104      	movs	r1, #4
 80012ea:	4809      	ldr	r0, [pc, #36]	@ (8001310 <LCD_IO_WriteData+0x40>)
 80012ec:	f001 fefc 	bl	80030e8 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ff10 	bl	8001118 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80012f8:	2201      	movs	r2, #1
 80012fa:	2104      	movs	r1, #4
 80012fc:	4804      	ldr	r0, [pc, #16]	@ (8001310 <LCD_IO_WriteData+0x40>)
 80012fe:	f001 fef3 	bl	80030e8 <HAL_GPIO_WritePin>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40020c00 	.word	0x40020c00
 8001310:	40020800 	.word	0x40020800

08001314 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001324:	480a      	ldr	r0, [pc, #40]	@ (8001350 <LCD_IO_WriteReg+0x3c>)
 8001326:	f001 fedf 	bl	80030e8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800132a:	2200      	movs	r2, #0
 800132c:	2104      	movs	r1, #4
 800132e:	4809      	ldr	r0, [pc, #36]	@ (8001354 <LCD_IO_WriteReg+0x40>)
 8001330:	f001 feda 	bl	80030e8 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	b29b      	uxth	r3, r3
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff feed 	bl	8001118 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800133e:	2201      	movs	r2, #1
 8001340:	2104      	movs	r1, #4
 8001342:	4804      	ldr	r0, [pc, #16]	@ (8001354 <LCD_IO_WriteReg+0x40>)
 8001344:	f001 fed0 	bl	80030e8 <HAL_GPIO_WritePin>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40020c00 	.word	0x40020c00
 8001354:	40020800 	.word	0x40020800

08001358 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f001 faff 	bl	8002964 <HAL_Delay>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001372:	f001 fa85 	bl	8002880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001376:	f000 f81b 	bl	80013b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800137a:	f000 fa0b 	bl	8001794 <MX_GPIO_Init>
  MX_LTDC_Init();
 800137e:	f000 f8c1 	bl	8001504 <MX_LTDC_Init>
  MX_RNG_Init();
 8001382:	f000 f971 	bl	8001668 <MX_RNG_Init>
  MX_TIM2_Init();
 8001386:	f000 f9b9 	bl	80016fc <MX_TIM2_Init>
  MX_SPI5_Init();
 800138a:	f000 f981 	bl	8001690 <MX_SPI5_Init>
  MX_I2C3_Init();
 800138e:	f000 f879 	bl	8001484 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8001392:	f7ff f913 	bl	80005bc <ApplicationInit>
  LCD_Visual_Demo();
 8001396:	f7ff f929 	bl	80005ec <LCD_Visual_Demo>
  HAL_Delay(5000);
 800139a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800139e:	f001 fae1 	bl	8002964 <HAL_Delay>
  /* USER CODE END 2 */
  
#if COMPILE_TOUCH_FUNCTIONS == 1 // This block will need to be deleted
  LCD_Touch_Polling_Demo(); // This function Will not return
 80013a2:	f7ff f929 	bl	80005f8 <LCD_Touch_Polling_Demo>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  firstScreen();
 80013a6:	f7ff f953 	bl	8000650 <firstScreen>
  {
 80013aa:	bf00      	nop
 80013ac:	e7fb      	b.n	80013a6 <main+0x38>
	...

080013b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b094      	sub	sp, #80	@ 0x50
 80013b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b6:	f107 0320 	add.w	r3, r7, #32
 80013ba:	2230      	movs	r2, #48	@ 0x30
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f004 ff4a 	bl	8006258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	4b28      	ldr	r3, [pc, #160]	@ (800147c <SystemClock_Config+0xcc>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013dc:	4a27      	ldr	r2, [pc, #156]	@ (800147c <SystemClock_Config+0xcc>)
 80013de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e4:	4b25      	ldr	r3, [pc, #148]	@ (800147c <SystemClock_Config+0xcc>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f0:	2300      	movs	r3, #0
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	4b22      	ldr	r3, [pc, #136]	@ (8001480 <SystemClock_Config+0xd0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a21      	ldr	r2, [pc, #132]	@ (8001480 <SystemClock_Config+0xd0>)
 80013fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b1f      	ldr	r3, [pc, #124]	@ (8001480 <SystemClock_Config+0xd0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800140c:	2301      	movs	r3, #1
 800140e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001410:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001416:	2302      	movs	r3, #2
 8001418:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800141a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800141e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001420:	2308      	movs	r3, #8
 8001422:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001424:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001428:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800142a:	2302      	movs	r3, #2
 800142c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800142e:	2307      	movs	r3, #7
 8001430:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001432:	f107 0320 	add.w	r3, r7, #32
 8001436:	4618      	mov	r0, r3
 8001438:	f003 f9b6 	bl	80047a8 <HAL_RCC_OscConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001442:	f000 fb55 	bl	8001af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001446:	230f      	movs	r3, #15
 8001448:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800144a:	2302      	movs	r3, #2
 800144c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001452:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001456:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001458:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800145c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	2105      	movs	r1, #5
 8001464:	4618      	mov	r0, r3
 8001466:	f003 fc17 	bl	8004c98 <HAL_RCC_ClockConfig>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001470:	f000 fb3e 	bl	8001af0 <Error_Handler>
  }
}
 8001474:	bf00      	nop
 8001476:	3750      	adds	r7, #80	@ 0x50
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40023800 	.word	0x40023800
 8001480:	40007000 	.word	0x40007000

08001484 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001488:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <MX_I2C3_Init+0x74>)
 800148a:	4a1c      	ldr	r2, [pc, #112]	@ (80014fc <MX_I2C3_Init+0x78>)
 800148c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800148e:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <MX_I2C3_Init+0x74>)
 8001490:	4a1b      	ldr	r2, [pc, #108]	@ (8001500 <MX_I2C3_Init+0x7c>)
 8001492:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001494:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <MX_I2C3_Init+0x74>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800149a:	4b17      	ldr	r3, [pc, #92]	@ (80014f8 <MX_I2C3_Init+0x74>)
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a0:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <MX_I2C3_Init+0x74>)
 80014a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014a6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a8:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <MX_I2C3_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80014ae:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <MX_I2C3_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b4:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <MX_I2C3_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ba:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <MX_I2C3_Init+0x74>)
 80014bc:	2200      	movs	r2, #0
 80014be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014c0:	480d      	ldr	r0, [pc, #52]	@ (80014f8 <MX_I2C3_Init+0x74>)
 80014c2:	f001 fe2b 	bl	800311c <HAL_I2C_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80014cc:	f000 fb10 	bl	8001af0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014d0:	2100      	movs	r1, #0
 80014d2:	4809      	ldr	r0, [pc, #36]	@ (80014f8 <MX_I2C3_Init+0x74>)
 80014d4:	f002 fe46 	bl	8004164 <HAL_I2CEx_ConfigAnalogFilter>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80014de:	f000 fb07 	bl	8001af0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014e2:	2100      	movs	r1, #0
 80014e4:	4804      	ldr	r0, [pc, #16]	@ (80014f8 <MX_I2C3_Init+0x74>)
 80014e6:	f002 fe79 	bl	80041dc <HAL_I2CEx_ConfigDigitalFilter>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80014f0:	f000 fafe 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200259d4 	.word	0x200259d4
 80014fc:	40005c00 	.word	0x40005c00
 8001500:	000186a0 	.word	0x000186a0

08001504 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b09a      	sub	sp, #104	@ 0x68
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800150a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800150e:	2234      	movs	r2, #52	@ 0x34
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f004 fea0 	bl	8006258 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001518:	463b      	mov	r3, r7
 800151a:	2234      	movs	r2, #52	@ 0x34
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f004 fe9a 	bl	8006258 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001524:	4b4e      	ldr	r3, [pc, #312]	@ (8001660 <MX_LTDC_Init+0x15c>)
 8001526:	4a4f      	ldr	r2, [pc, #316]	@ (8001664 <MX_LTDC_Init+0x160>)
 8001528:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800152a:	4b4d      	ldr	r3, [pc, #308]	@ (8001660 <MX_LTDC_Init+0x15c>)
 800152c:	2200      	movs	r2, #0
 800152e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001530:	4b4b      	ldr	r3, [pc, #300]	@ (8001660 <MX_LTDC_Init+0x15c>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001536:	4b4a      	ldr	r3, [pc, #296]	@ (8001660 <MX_LTDC_Init+0x15c>)
 8001538:	2200      	movs	r2, #0
 800153a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800153c:	4b48      	ldr	r3, [pc, #288]	@ (8001660 <MX_LTDC_Init+0x15c>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001542:	4b47      	ldr	r3, [pc, #284]	@ (8001660 <MX_LTDC_Init+0x15c>)
 8001544:	2207      	movs	r2, #7
 8001546:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001548:	4b45      	ldr	r3, [pc, #276]	@ (8001660 <MX_LTDC_Init+0x15c>)
 800154a:	2203      	movs	r2, #3
 800154c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800154e:	4b44      	ldr	r3, [pc, #272]	@ (8001660 <MX_LTDC_Init+0x15c>)
 8001550:	220e      	movs	r2, #14
 8001552:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001554:	4b42      	ldr	r3, [pc, #264]	@ (8001660 <MX_LTDC_Init+0x15c>)
 8001556:	2205      	movs	r2, #5
 8001558:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800155a:	4b41      	ldr	r3, [pc, #260]	@ (8001660 <MX_LTDC_Init+0x15c>)
 800155c:	f240 228e 	movw	r2, #654	@ 0x28e
 8001560:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001562:	4b3f      	ldr	r3, [pc, #252]	@ (8001660 <MX_LTDC_Init+0x15c>)
 8001564:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001568:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 800156a:	4b3d      	ldr	r3, [pc, #244]	@ (8001660 <MX_LTDC_Init+0x15c>)
 800156c:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001570:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001572:	4b3b      	ldr	r3, [pc, #236]	@ (8001660 <MX_LTDC_Init+0x15c>)
 8001574:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001578:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800157a:	4b39      	ldr	r3, [pc, #228]	@ (8001660 <MX_LTDC_Init+0x15c>)
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001582:	4b37      	ldr	r3, [pc, #220]	@ (8001660 <MX_LTDC_Init+0x15c>)
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800158a:	4b35      	ldr	r3, [pc, #212]	@ (8001660 <MX_LTDC_Init+0x15c>)
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001592:	4833      	ldr	r0, [pc, #204]	@ (8001660 <MX_LTDC_Init+0x15c>)
 8001594:	f002 fe62 	bl	800425c <HAL_LTDC_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800159e:	f000 faa7 	bl	8001af0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80015b2:	2300      	movs	r3, #0
 80015b4:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80015be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015c2:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80015c4:	2305      	movs	r3, #5
 80015c6:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80015e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80015ea:	2200      	movs	r2, #0
 80015ec:	4619      	mov	r1, r3
 80015ee:	481c      	ldr	r0, [pc, #112]	@ (8001660 <MX_LTDC_Init+0x15c>)
 80015f0:	f002 ff04 	bl	80043fc <HAL_LTDC_ConfigLayer>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80015fa:	f000 fa79 	bl	8001af0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800161a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800161e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001620:	2305      	movs	r3, #5
 8001622:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001642:	463b      	mov	r3, r7
 8001644:	2201      	movs	r2, #1
 8001646:	4619      	mov	r1, r3
 8001648:	4805      	ldr	r0, [pc, #20]	@ (8001660 <MX_LTDC_Init+0x15c>)
 800164a:	f002 fed7 	bl	80043fc <HAL_LTDC_ConfigLayer>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001654:	f000 fa4c 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	3768      	adds	r7, #104	@ 0x68
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20025a28 	.word	0x20025a28
 8001664:	40016800 	.word	0x40016800

08001668 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800166c:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <MX_RNG_Init+0x20>)
 800166e:	4a07      	ldr	r2, [pc, #28]	@ (800168c <MX_RNG_Init+0x24>)
 8001670:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	@ (8001688 <MX_RNG_Init+0x20>)
 8001674:	f003 fedc 	bl	8005430 <HAL_RNG_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800167e:	f000 fa37 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20025ad0 	.word	0x20025ad0
 800168c:	50060800 	.word	0x50060800

08001690 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001694:	4b17      	ldr	r3, [pc, #92]	@ (80016f4 <MX_SPI5_Init+0x64>)
 8001696:	4a18      	ldr	r2, [pc, #96]	@ (80016f8 <MX_SPI5_Init+0x68>)
 8001698:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800169a:	4b16      	ldr	r3, [pc, #88]	@ (80016f4 <MX_SPI5_Init+0x64>)
 800169c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016a0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80016a2:	4b14      	ldr	r3, [pc, #80]	@ (80016f4 <MX_SPI5_Init+0x64>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80016a8:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <MX_SPI5_Init+0x64>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ae:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <MX_SPI5_Init+0x64>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	@ (80016f4 <MX_SPI5_Init+0x64>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	@ (80016f4 <MX_SPI5_Init+0x64>)
 80016bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016c0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016c2:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <MX_SPI5_Init+0x64>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c8:	4b0a      	ldr	r3, [pc, #40]	@ (80016f4 <MX_SPI5_Init+0x64>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ce:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <MX_SPI5_Init+0x64>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d4:	4b07      	ldr	r3, [pc, #28]	@ (80016f4 <MX_SPI5_Init+0x64>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80016da:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <MX_SPI5_Init+0x64>)
 80016dc:	220a      	movs	r2, #10
 80016de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80016e0:	4804      	ldr	r0, [pc, #16]	@ (80016f4 <MX_SPI5_Init+0x64>)
 80016e2:	f003 fecf 	bl	8005484 <HAL_SPI_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80016ec:	f000 fa00 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20025ae0 	.word	0x20025ae0
 80016f8:	40015000 	.word	0x40015000

080016fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001710:	463b      	mov	r3, r7
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001718:	4b1d      	ldr	r3, [pc, #116]	@ (8001790 <MX_TIM2_Init+0x94>)
 800171a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800171e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001720:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <MX_TIM2_Init+0x94>)
 8001722:	2200      	movs	r2, #0
 8001724:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001726:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <MX_TIM2_Init+0x94>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800172c:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <MX_TIM2_Init+0x94>)
 800172e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001732:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001734:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <MX_TIM2_Init+0x94>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173a:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <MX_TIM2_Init+0x94>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001740:	4813      	ldr	r0, [pc, #76]	@ (8001790 <MX_TIM2_Init+0x94>)
 8001742:	f004 f97f 	bl	8005a44 <HAL_TIM_Base_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800174c:	f000 f9d0 	bl	8001af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001750:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001754:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	4619      	mov	r1, r3
 800175c:	480c      	ldr	r0, [pc, #48]	@ (8001790 <MX_TIM2_Init+0x94>)
 800175e:	f004 f9c0 	bl	8005ae2 <HAL_TIM_ConfigClockSource>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001768:	f000 f9c2 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176c:	2300      	movs	r3, #0
 800176e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001774:	463b      	mov	r3, r7
 8001776:	4619      	mov	r1, r3
 8001778:	4805      	ldr	r0, [pc, #20]	@ (8001790 <MX_TIM2_Init+0x94>)
 800177a:	f004 fbbf 	bl	8005efc <HAL_TIMEx_MasterConfigSynchronization>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001784:	f000 f9b4 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20025b38 	.word	0x20025b38

08001794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08e      	sub	sp, #56	@ 0x38
 8001798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
 80017ae:	4bb2      	ldr	r3, [pc, #712]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	4ab1      	ldr	r2, [pc, #708]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ba:	4baf      	ldr	r3, [pc, #700]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	623b      	str	r3, [r7, #32]
 80017c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	4bab      	ldr	r3, [pc, #684]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	4aaa      	ldr	r2, [pc, #680]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 80017d0:	f043 0320 	orr.w	r3, r3, #32
 80017d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d6:	4ba8      	ldr	r3, [pc, #672]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	f003 0320 	and.w	r3, r3, #32
 80017de:	61fb      	str	r3, [r7, #28]
 80017e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
 80017e6:	4ba4      	ldr	r3, [pc, #656]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	4aa3      	ldr	r2, [pc, #652]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 80017ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f2:	4ba1      	ldr	r3, [pc, #644]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017fa:	61bb      	str	r3, [r7, #24]
 80017fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	4b9d      	ldr	r3, [pc, #628]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	4a9c      	ldr	r2, [pc, #624]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6313      	str	r3, [r2, #48]	@ 0x30
 800180e:	4b9a      	ldr	r3, [pc, #616]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	4b96      	ldr	r3, [pc, #600]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	4a95      	ldr	r2, [pc, #596]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	6313      	str	r3, [r2, #48]	@ 0x30
 800182a:	4b93      	ldr	r3, [pc, #588]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	4b8f      	ldr	r3, [pc, #572]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	4a8e      	ldr	r2, [pc, #568]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 8001840:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001844:	6313      	str	r3, [r2, #48]	@ 0x30
 8001846:	4b8c      	ldr	r3, [pc, #560]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	4b88      	ldr	r3, [pc, #544]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	4a87      	ldr	r2, [pc, #540]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 800185c:	f043 0310 	orr.w	r3, r3, #16
 8001860:	6313      	str	r3, [r2, #48]	@ 0x30
 8001862:	4b85      	ldr	r3, [pc, #532]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	f003 0310 	and.w	r3, r3, #16
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	4b81      	ldr	r3, [pc, #516]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	4a80      	ldr	r2, [pc, #512]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 8001878:	f043 0308 	orr.w	r3, r3, #8
 800187c:	6313      	str	r3, [r2, #48]	@ 0x30
 800187e:	4b7e      	ldr	r3, [pc, #504]	@ (8001a78 <MX_GPIO_Init+0x2e4>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	2116      	movs	r1, #22
 800188e:	487b      	ldr	r0, [pc, #492]	@ (8001a7c <MX_GPIO_Init+0x2e8>)
 8001890:	f001 fc2a 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	2180      	movs	r1, #128	@ 0x80
 8001898:	4879      	ldr	r0, [pc, #484]	@ (8001a80 <MX_GPIO_Init+0x2ec>)
 800189a:	f001 fc25 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80018a4:	4877      	ldr	r0, [pc, #476]	@ (8001a84 <MX_GPIO_Init+0x2f0>)
 80018a6:	f001 fc1f 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80018b0:	4875      	ldr	r0, [pc, #468]	@ (8001a88 <MX_GPIO_Init+0x2f4>)
 80018b2:	f001 fc19 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80018b6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c4:	2303      	movs	r3, #3
 80018c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018c8:	230c      	movs	r3, #12
 80018ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018d0:	4619      	mov	r1, r3
 80018d2:	486e      	ldr	r0, [pc, #440]	@ (8001a8c <MX_GPIO_Init+0x2f8>)
 80018d4:	f001 f950 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80018d8:	2301      	movs	r3, #1
 80018da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018e8:	230c      	movs	r3, #12
 80018ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80018ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f0:	4619      	mov	r1, r3
 80018f2:	4862      	ldr	r0, [pc, #392]	@ (8001a7c <MX_GPIO_Init+0x2e8>)
 80018f4:	f001 f940 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80018f8:	2316      	movs	r3, #22
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fc:	2301      	movs	r3, #1
 80018fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001904:	2300      	movs	r3, #0
 8001906:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001908:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800190c:	4619      	mov	r1, r3
 800190e:	485b      	ldr	r0, [pc, #364]	@ (8001a7c <MX_GPIO_Init+0x2e8>)
 8001910:	f001 f932 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001914:	f248 0307 	movw	r3, #32775	@ 0x8007
 8001918:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800191a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800191e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001928:	4619      	mov	r1, r3
 800192a:	4855      	ldr	r0, [pc, #340]	@ (8001a80 <MX_GPIO_Init+0x2ec>)
 800192c:	f001 f924 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001930:	2380      	movs	r3, #128	@ 0x80
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001934:	2301      	movs	r3, #1
 8001936:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001944:	4619      	mov	r1, r3
 8001946:	484e      	ldr	r0, [pc, #312]	@ (8001a80 <MX_GPIO_Init+0x2ec>)
 8001948:	f001 f916 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800194c:	2320      	movs	r3, #32
 800194e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001950:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001954:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800195a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800195e:	4619      	mov	r1, r3
 8001960:	4846      	ldr	r0, [pc, #280]	@ (8001a7c <MX_GPIO_Init+0x2e8>)
 8001962:	f001 f909 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001966:	2304      	movs	r3, #4
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196a:	2300      	movs	r3, #0
 800196c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001972:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001976:	4619      	mov	r1, r3
 8001978:	4845      	ldr	r0, [pc, #276]	@ (8001a90 <MX_GPIO_Init+0x2fc>)
 800197a:	f001 f8fd 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800197e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001982:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198c:	2303      	movs	r3, #3
 800198e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001990:	230c      	movs	r3, #12
 8001992:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001994:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001998:	4619      	mov	r1, r3
 800199a:	483b      	ldr	r0, [pc, #236]	@ (8001a88 <MX_GPIO_Init+0x2f4>)
 800199c:	f001 f8ec 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80019a0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ae:	2303      	movs	r3, #3
 80019b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019b2:	230c      	movs	r3, #12
 80019b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ba:	4619      	mov	r1, r3
 80019bc:	4835      	ldr	r0, [pc, #212]	@ (8001a94 <MX_GPIO_Init+0x300>)
 80019be:	f001 f8db 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80019c2:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80019c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80019d4:	230c      	movs	r3, #12
 80019d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019dc:	4619      	mov	r1, r3
 80019de:	482c      	ldr	r0, [pc, #176]	@ (8001a90 <MX_GPIO_Init+0x2fc>)
 80019e0:	f001 f8ca 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80019e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80019f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019f6:	4619      	mov	r1, r3
 80019f8:	4825      	ldr	r0, [pc, #148]	@ (8001a90 <MX_GPIO_Init+0x2fc>)
 80019fa:	f001 f8bd 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80019fe:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001a02:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a10:	230c      	movs	r3, #12
 8001a12:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a18:	4619      	mov	r1, r3
 8001a1a:	481a      	ldr	r0, [pc, #104]	@ (8001a84 <MX_GPIO_Init+0x2f0>)
 8001a1c:	f001 f8ac 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001a20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001a2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a32:	4619      	mov	r1, r3
 8001a34:	4813      	ldr	r0, [pc, #76]	@ (8001a84 <MX_GPIO_Init+0x2f0>)
 8001a36:	f001 f89f 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001a3a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a40:	2301      	movs	r3, #1
 8001a42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a50:	4619      	mov	r1, r3
 8001a52:	480c      	ldr	r0, [pc, #48]	@ (8001a84 <MX_GPIO_Init+0x2f0>)
 8001a54:	f001 f890 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001a58:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a66:	2303      	movs	r3, #3
 8001a68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a6a:	2307      	movs	r3, #7
 8001a6c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a72:	4619      	mov	r1, r3
 8001a74:	e010      	b.n	8001a98 <MX_GPIO_Init+0x304>
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40020800 	.word	0x40020800
 8001a80:	40020000 	.word	0x40020000
 8001a84:	40020c00 	.word	0x40020c00
 8001a88:	40021800 	.word	0x40021800
 8001a8c:	40021400 	.word	0x40021400
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40021000 	.word	0x40021000
 8001a98:	4812      	ldr	r0, [pc, #72]	@ (8001ae4 <MX_GPIO_Init+0x350>)
 8001a9a:	f001 f86d 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001a9e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2300      	movs	r3, #0
 8001aae:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480c      	ldr	r0, [pc, #48]	@ (8001ae8 <MX_GPIO_Init+0x354>)
 8001ab8:	f001 f85e 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001abc:	2360      	movs	r3, #96	@ 0x60
 8001abe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001acc:	230c      	movs	r3, #12
 8001ace:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4805      	ldr	r0, [pc, #20]	@ (8001aec <MX_GPIO_Init+0x358>)
 8001ad8:	f001 f84e 	bl	8002b78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001adc:	bf00      	nop
 8001ade:	3738      	adds	r7, #56	@ 0x38
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	40021800 	.word	0x40021800
 8001aec:	40020400 	.word	0x40020400

08001af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001af4:	b672      	cpsid	i
}
 8001af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <Error_Handler+0x8>

08001afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	4b10      	ldr	r3, [pc, #64]	@ (8001b48 <HAL_MspInit+0x4c>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0a:	4a0f      	ldr	r2, [pc, #60]	@ (8001b48 <HAL_MspInit+0x4c>)
 8001b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b12:	4b0d      	ldr	r3, [pc, #52]	@ (8001b48 <HAL_MspInit+0x4c>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	603b      	str	r3, [r7, #0]
 8001b22:	4b09      	ldr	r3, [pc, #36]	@ (8001b48 <HAL_MspInit+0x4c>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	4a08      	ldr	r2, [pc, #32]	@ (8001b48 <HAL_MspInit+0x4c>)
 8001b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b2e:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <HAL_MspInit+0x4c>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b3a:	2007      	movs	r0, #7
 8001b3c:	f000 ffe8 	bl	8002b10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40023800 	.word	0x40023800

08001b4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	@ 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a29      	ldr	r2, [pc, #164]	@ (8001c10 <HAL_I2C_MspInit+0xc4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d14b      	bne.n	8001c06 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	4b28      	ldr	r3, [pc, #160]	@ (8001c14 <HAL_I2C_MspInit+0xc8>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	4a27      	ldr	r2, [pc, #156]	@ (8001c14 <HAL_I2C_MspInit+0xc8>)
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7e:	4b25      	ldr	r3, [pc, #148]	@ (8001c14 <HAL_I2C_MspInit+0xc8>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b21      	ldr	r3, [pc, #132]	@ (8001c14 <HAL_I2C_MspInit+0xc8>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	4a20      	ldr	r2, [pc, #128]	@ (8001c14 <HAL_I2C_MspInit+0xc8>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c14 <HAL_I2C_MspInit+0xc8>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001ba6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bac:	2312      	movs	r3, #18
 8001bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bb8:	2304      	movs	r3, #4
 8001bba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4815      	ldr	r0, [pc, #84]	@ (8001c18 <HAL_I2C_MspInit+0xcc>)
 8001bc4:	f000 ffd8 	bl	8002b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001bc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bce:	2312      	movs	r3, #18
 8001bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bda:	2304      	movs	r3, #4
 8001bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4619      	mov	r1, r3
 8001be4:	480d      	ldr	r0, [pc, #52]	@ (8001c1c <HAL_I2C_MspInit+0xd0>)
 8001be6:	f000 ffc7 	bl	8002b78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	4b09      	ldr	r3, [pc, #36]	@ (8001c14 <HAL_I2C_MspInit+0xc8>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	4a08      	ldr	r2, [pc, #32]	@ (8001c14 <HAL_I2C_MspInit+0xc8>)
 8001bf4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bfa:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <HAL_I2C_MspInit+0xc8>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001c06:	bf00      	nop
 8001c08:	3728      	adds	r7, #40	@ 0x28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40005c00 	.word	0x40005c00
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40020800 	.word	0x40020800
 8001c1c:	40020000 	.word	0x40020000

08001c20 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b09a      	sub	sp, #104	@ 0x68
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c3c:	2230      	movs	r2, #48	@ 0x30
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f004 fb09 	bl	8006258 <memset>
  if(hltdc->Instance==LTDC)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a81      	ldr	r2, [pc, #516]	@ (8001e50 <HAL_LTDC_MspInit+0x230>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	f040 80fb 	bne.w	8001e48 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001c52:	2308      	movs	r3, #8
 8001c54:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8001c56:	23c8      	movs	r3, #200	@ 0xc8
 8001c58:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8001c5e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001c62:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f003 fa21 	bl	80050b0 <HAL_RCCEx_PeriphCLKConfig>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001c74:	f7ff ff3c 	bl	8001af0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001c78:	2300      	movs	r3, #0
 8001c7a:	623b      	str	r3, [r7, #32]
 8001c7c:	4b75      	ldr	r3, [pc, #468]	@ (8001e54 <HAL_LTDC_MspInit+0x234>)
 8001c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c80:	4a74      	ldr	r2, [pc, #464]	@ (8001e54 <HAL_LTDC_MspInit+0x234>)
 8001c82:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c86:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c88:	4b72      	ldr	r3, [pc, #456]	@ (8001e54 <HAL_LTDC_MspInit+0x234>)
 8001c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c90:	623b      	str	r3, [r7, #32]
 8001c92:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	4b6e      	ldr	r3, [pc, #440]	@ (8001e54 <HAL_LTDC_MspInit+0x234>)
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9c:	4a6d      	ldr	r2, [pc, #436]	@ (8001e54 <HAL_LTDC_MspInit+0x234>)
 8001c9e:	f043 0320 	orr.w	r3, r3, #32
 8001ca2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca4:	4b6b      	ldr	r3, [pc, #428]	@ (8001e54 <HAL_LTDC_MspInit+0x234>)
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	4b67      	ldr	r3, [pc, #412]	@ (8001e54 <HAL_LTDC_MspInit+0x234>)
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb8:	4a66      	ldr	r2, [pc, #408]	@ (8001e54 <HAL_LTDC_MspInit+0x234>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc0:	4b64      	ldr	r3, [pc, #400]	@ (8001e54 <HAL_LTDC_MspInit+0x234>)
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	61bb      	str	r3, [r7, #24]
 8001cca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	4b60      	ldr	r3, [pc, #384]	@ (8001e54 <HAL_LTDC_MspInit+0x234>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd4:	4a5f      	ldr	r2, [pc, #380]	@ (8001e54 <HAL_LTDC_MspInit+0x234>)
 8001cd6:	f043 0302 	orr.w	r3, r3, #2
 8001cda:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cdc:	4b5d      	ldr	r3, [pc, #372]	@ (8001e54 <HAL_LTDC_MspInit+0x234>)
 8001cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	4b59      	ldr	r3, [pc, #356]	@ (8001e54 <HAL_LTDC_MspInit+0x234>)
 8001cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf0:	4a58      	ldr	r2, [pc, #352]	@ (8001e54 <HAL_LTDC_MspInit+0x234>)
 8001cf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf8:	4b56      	ldr	r3, [pc, #344]	@ (8001e54 <HAL_LTDC_MspInit+0x234>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	4b52      	ldr	r3, [pc, #328]	@ (8001e54 <HAL_LTDC_MspInit+0x234>)
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0c:	4a51      	ldr	r2, [pc, #324]	@ (8001e54 <HAL_LTDC_MspInit+0x234>)
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d14:	4b4f      	ldr	r3, [pc, #316]	@ (8001e54 <HAL_LTDC_MspInit+0x234>)
 8001d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	4b4b      	ldr	r3, [pc, #300]	@ (8001e54 <HAL_LTDC_MspInit+0x234>)
 8001d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d28:	4a4a      	ldr	r2, [pc, #296]	@ (8001e54 <HAL_LTDC_MspInit+0x234>)
 8001d2a:	f043 0308 	orr.w	r3, r3, #8
 8001d2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d30:	4b48      	ldr	r3, [pc, #288]	@ (8001e54 <HAL_LTDC_MspInit+0x234>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001d3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d40:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d4e:	230e      	movs	r3, #14
 8001d50:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001d52:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d56:	4619      	mov	r1, r3
 8001d58:	483f      	ldr	r0, [pc, #252]	@ (8001e58 <HAL_LTDC_MspInit+0x238>)
 8001d5a:	f000 ff0d 	bl	8002b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001d5e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001d62:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d70:	230e      	movs	r3, #14
 8001d72:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4838      	ldr	r0, [pc, #224]	@ (8001e5c <HAL_LTDC_MspInit+0x23c>)
 8001d7c:	f000 fefc 	bl	8002b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001d80:	2303      	movs	r3, #3
 8001d82:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d90:	2309      	movs	r3, #9
 8001d92:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4831      	ldr	r0, [pc, #196]	@ (8001e60 <HAL_LTDC_MspInit+0x240>)
 8001d9c:	f000 feec 	bl	8002b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001da0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001da4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001db2:	230e      	movs	r3, #14
 8001db4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4828      	ldr	r0, [pc, #160]	@ (8001e60 <HAL_LTDC_MspInit+0x240>)
 8001dbe:	f000 fedb 	bl	8002b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001dc2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001dc6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dd4:	230e      	movs	r3, #14
 8001dd6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dd8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4821      	ldr	r0, [pc, #132]	@ (8001e64 <HAL_LTDC_MspInit+0x244>)
 8001de0:	f000 feca 	bl	8002b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001de4:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001de8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	2300      	movs	r3, #0
 8001df4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001df6:	230e      	movs	r3, #14
 8001df8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dfa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4819      	ldr	r0, [pc, #100]	@ (8001e68 <HAL_LTDC_MspInit+0x248>)
 8001e02:	f000 feb9 	bl	8002b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001e06:	2348      	movs	r3, #72	@ 0x48
 8001e08:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e16:	230e      	movs	r3, #14
 8001e18:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e1a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4812      	ldr	r0, [pc, #72]	@ (8001e6c <HAL_LTDC_MspInit+0x24c>)
 8001e22:	f000 fea9 	bl	8002b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001e26:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e2a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2300      	movs	r3, #0
 8001e36:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e38:	2309      	movs	r3, #9
 8001e3a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e3c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e40:	4619      	mov	r1, r3
 8001e42:	4808      	ldr	r0, [pc, #32]	@ (8001e64 <HAL_LTDC_MspInit+0x244>)
 8001e44:	f000 fe98 	bl	8002b78 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001e48:	bf00      	nop
 8001e4a:	3768      	adds	r7, #104	@ 0x68
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40016800 	.word	0x40016800
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40021400 	.word	0x40021400
 8001e5c:	40020000 	.word	0x40020000
 8001e60:	40020400 	.word	0x40020400
 8001e64:	40021800 	.word	0x40021800
 8001e68:	40020800 	.word	0x40020800
 8001e6c:	40020c00 	.word	0x40020c00

08001e70 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001eac <HAL_RNG_MspInit+0x3c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d10d      	bne.n	8001e9e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb0 <HAL_RNG_MspInit+0x40>)
 8001e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e8a:	4a09      	ldr	r2, [pc, #36]	@ (8001eb0 <HAL_RNG_MspInit+0x40>)
 8001e8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e90:	6353      	str	r3, [r2, #52]	@ 0x34
 8001e92:	4b07      	ldr	r3, [pc, #28]	@ (8001eb0 <HAL_RNG_MspInit+0x40>)
 8001e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	50060800 	.word	0x50060800
 8001eb0:	40023800 	.word	0x40023800

08001eb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	@ 0x28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a19      	ldr	r2, [pc, #100]	@ (8001f38 <HAL_SPI_MspInit+0x84>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d12c      	bne.n	8001f30 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	4b18      	ldr	r3, [pc, #96]	@ (8001f3c <HAL_SPI_MspInit+0x88>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ede:	4a17      	ldr	r2, [pc, #92]	@ (8001f3c <HAL_SPI_MspInit+0x88>)
 8001ee0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ee4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ee6:	4b15      	ldr	r3, [pc, #84]	@ (8001f3c <HAL_SPI_MspInit+0x88>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	4b11      	ldr	r3, [pc, #68]	@ (8001f3c <HAL_SPI_MspInit+0x88>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	4a10      	ldr	r2, [pc, #64]	@ (8001f3c <HAL_SPI_MspInit+0x88>)
 8001efc:	f043 0320 	orr.w	r3, r3, #32
 8001f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f02:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <HAL_SPI_MspInit+0x88>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	f003 0320 	and.w	r3, r3, #32
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001f0e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f14:	2302      	movs	r3, #2
 8001f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001f20:	2305      	movs	r3, #5
 8001f22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4805      	ldr	r0, [pc, #20]	@ (8001f40 <HAL_SPI_MspInit+0x8c>)
 8001f2c:	f000 fe24 	bl	8002b78 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001f30:	bf00      	nop
 8001f32:	3728      	adds	r7, #40	@ 0x28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40015000 	.word	0x40015000
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40021400 	.word	0x40021400

08001f44 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a08      	ldr	r2, [pc, #32]	@ (8001f74 <HAL_SPI_MspDeInit+0x30>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d10a      	bne.n	8001f6c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001f56:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <HAL_SPI_MspDeInit+0x34>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5a:	4a07      	ldr	r2, [pc, #28]	@ (8001f78 <HAL_SPI_MspDeInit+0x34>)
 8001f5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001f60:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001f62:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001f66:	4805      	ldr	r0, [pc, #20]	@ (8001f7c <HAL_SPI_MspDeInit+0x38>)
 8001f68:	f000 ffb2 	bl	8002ed0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001f6c:	bf00      	nop
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40015000 	.word	0x40015000
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40021400 	.word	0x40021400

08001f80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f90:	d10d      	bne.n	8001fae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <HAL_TIM_Base_MspInit+0x3c>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	4a08      	ldr	r2, [pc, #32]	@ (8001fbc <HAL_TIM_Base_MspInit+0x3c>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa2:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <HAL_TIM_Base_MspInit+0x3c>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800

08001fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <NMI_Handler+0x4>

08001fc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fcc:	bf00      	nop
 8001fce:	e7fd      	b.n	8001fcc <HardFault_Handler+0x4>

08001fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <MemManage_Handler+0x4>

08001fd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <BusFault_Handler+0x4>

08001fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <UsageFault_Handler+0x4>

08001fe8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002016:	f000 fc85 	bl	8002924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}

0800201e <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002024:	f000 f9ce 	bl	80023c4 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002028:	f000 f98e 	bl	8002348 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800202c:	2202      	movs	r2, #2
 800202e:	2103      	movs	r1, #3
 8002030:	2082      	movs	r0, #130	@ 0x82
 8002032:	f000 fa1b 	bl	800246c <I2C3_Write>
    HAL_Delay(5);
 8002036:	2005      	movs	r0, #5
 8002038:	f000 fc94 	bl	8002964 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800203c:	2200      	movs	r2, #0
 800203e:	2103      	movs	r1, #3
 8002040:	2082      	movs	r0, #130	@ 0x82
 8002042:	f000 fa13 	bl	800246c <I2C3_Write>
    HAL_Delay(2);
 8002046:	2002      	movs	r0, #2
 8002048:	f000 fc8c 	bl	8002964 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 800204c:	1cba      	adds	r2, r7, #2
 800204e:	2302      	movs	r3, #2
 8002050:	2100      	movs	r1, #0
 8002052:	2082      	movs	r0, #130	@ 0x82
 8002054:	f000 fa5a 	bl	800250c <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002058:	887b      	ldrh	r3, [r7, #2]
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 800205e:	887b      	ldrh	r3, [r7, #2]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	b29a      	uxth	r2, r3
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	4313      	orrs	r3, r2
 8002068:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	f640 0211 	movw	r2, #2065	@ 0x811
 8002070:	4293      	cmp	r3, r2
 8002072:	d001      	beq.n	8002078 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002074:	2303      	movs	r3, #3
 8002076:	e075      	b.n	8002164 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002078:	2202      	movs	r2, #2
 800207a:	2103      	movs	r1, #3
 800207c:	2082      	movs	r0, #130	@ 0x82
 800207e:	f000 f9f5 	bl	800246c <I2C3_Write>
    HAL_Delay(5);
 8002082:	2005      	movs	r0, #5
 8002084:	f000 fc6e 	bl	8002964 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002088:	2200      	movs	r2, #0
 800208a:	2103      	movs	r1, #3
 800208c:	2082      	movs	r0, #130	@ 0x82
 800208e:	f000 f9ed 	bl	800246c <I2C3_Write>
    HAL_Delay(2);
 8002092:	2002      	movs	r0, #2
 8002094:	f000 fc66 	bl	8002964 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002098:	2004      	movs	r0, #4
 800209a:	f000 f867 	bl	800216c <STMPE811_Read>
 800209e:	4603      	mov	r3, r0
 80020a0:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 80020a2:	797b      	ldrb	r3, [r7, #5]
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80020aa:	797b      	ldrb	r3, [r7, #5]
 80020ac:	461a      	mov	r2, r3
 80020ae:	2104      	movs	r1, #4
 80020b0:	2082      	movs	r0, #130	@ 0x82
 80020b2:	f000 f9db 	bl	800246c <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80020b6:	2004      	movs	r0, #4
 80020b8:	f000 f858 	bl	800216c <STMPE811_Read>
 80020bc:	4603      	mov	r3, r0
 80020be:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80020c0:	797b      	ldrb	r3, [r7, #5]
 80020c2:	f023 0302 	bic.w	r3, r3, #2
 80020c6:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80020c8:	797b      	ldrb	r3, [r7, #5]
 80020ca:	461a      	mov	r2, r3
 80020cc:	2104      	movs	r1, #4
 80020ce:	2082      	movs	r0, #130	@ 0x82
 80020d0:	f000 f9cc 	bl	800246c <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80020d4:	2249      	movs	r2, #73	@ 0x49
 80020d6:	2120      	movs	r1, #32
 80020d8:	2082      	movs	r0, #130	@ 0x82
 80020da:	f000 f9c7 	bl	800246c <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80020de:	2002      	movs	r0, #2
 80020e0:	f000 fc40 	bl	8002964 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80020e4:	2201      	movs	r2, #1
 80020e6:	2121      	movs	r1, #33	@ 0x21
 80020e8:	2082      	movs	r0, #130	@ 0x82
 80020ea:	f000 f9bf 	bl	800246c <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80020ee:	2017      	movs	r0, #23
 80020f0:	f000 f83c 	bl	800216c <STMPE811_Read>
 80020f4:	4603      	mov	r3, r0
 80020f6:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80020f8:	797b      	ldrb	r3, [r7, #5]
 80020fa:	f043 031e 	orr.w	r3, r3, #30
 80020fe:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002100:	797b      	ldrb	r3, [r7, #5]
 8002102:	461a      	mov	r2, r3
 8002104:	2117      	movs	r1, #23
 8002106:	2082      	movs	r0, #130	@ 0x82
 8002108:	f000 f9b0 	bl	800246c <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 800210c:	229a      	movs	r2, #154	@ 0x9a
 800210e:	2141      	movs	r1, #65	@ 0x41
 8002110:	2082      	movs	r0, #130	@ 0x82
 8002112:	f000 f9ab 	bl	800246c <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002116:	2201      	movs	r2, #1
 8002118:	214a      	movs	r1, #74	@ 0x4a
 800211a:	2082      	movs	r0, #130	@ 0x82
 800211c:	f000 f9a6 	bl	800246c <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002120:	2201      	movs	r2, #1
 8002122:	214b      	movs	r1, #75	@ 0x4b
 8002124:	2082      	movs	r0, #130	@ 0x82
 8002126:	f000 f9a1 	bl	800246c <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800212a:	2200      	movs	r2, #0
 800212c:	214b      	movs	r1, #75	@ 0x4b
 800212e:	2082      	movs	r0, #130	@ 0x82
 8002130:	f000 f99c 	bl	800246c <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002134:	2201      	movs	r2, #1
 8002136:	2156      	movs	r1, #86	@ 0x56
 8002138:	2082      	movs	r0, #130	@ 0x82
 800213a:	f000 f997 	bl	800246c <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 800213e:	2201      	movs	r2, #1
 8002140:	2158      	movs	r1, #88	@ 0x58
 8002142:	2082      	movs	r0, #130	@ 0x82
 8002144:	f000 f992 	bl	800246c <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002148:	2203      	movs	r2, #3
 800214a:	2140      	movs	r1, #64	@ 0x40
 800214c:	2082      	movs	r0, #130	@ 0x82
 800214e:	f000 f98d 	bl	800246c <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002152:	22ff      	movs	r2, #255	@ 0xff
 8002154:	210b      	movs	r1, #11
 8002156:	2082      	movs	r0, #130	@ 0x82
 8002158:	f000 f988 	bl	800246c <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 800215c:	20c8      	movs	r0, #200	@ 0xc8
 800215e:	f000 fc01 	bl	8002964 <HAL_Delay>

    return STMPE811_State_Ok;
 8002162:	2302      	movs	r3, #2

}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002176:	f107 020f 	add.w	r2, r7, #15
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	4619      	mov	r1, r3
 800217e:	2082      	movs	r0, #130	@ 0x82
 8002180:	f000 f99e 	bl	80024c0 <I2C3_Read>

    return readData;
 8002184:	7bfb      	ldrb	r3, [r7, #15]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	791a      	ldrb	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 800219e:	2040      	movs	r0, #64	@ 0x40
 80021a0:	f7ff ffe4 	bl	800216c <STMPE811_Read>
 80021a4:	4603      	mov	r3, r0
 80021a6:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 80021a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	db0e      	blt.n	80021ce <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80021b6:	2201      	movs	r2, #1
 80021b8:	214b      	movs	r1, #75	@ 0x4b
 80021ba:	2082      	movs	r0, #130	@ 0x82
 80021bc:	f000 f956 	bl	800246c <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80021c0:	2200      	movs	r2, #0
 80021c2:	214b      	movs	r1, #75	@ 0x4b
 80021c4:	2082      	movs	r0, #130	@ 0x82
 80021c6:	f000 f951 	bl	800246c <I2C3_Write>

        return STMPE811_State_Released;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e0a7      	b.n	800231e <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	799b      	ldrb	r3, [r3, #6]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d117      	bne.n	8002206 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f9b8 	bl	8002550 <TM_STMPE811_ReadX>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	885b      	ldrh	r3, [r3, #2]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 fa0d 	bl	8002610 <TM_STMPE811_ReadY>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80021fc:	3301      	adds	r3, #1
 80021fe:	b29a      	uxth	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	805a      	strh	r2, [r3, #2]
 8002204:	e048      	b.n	8002298 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	799b      	ldrb	r3, [r3, #6]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d112      	bne.n	8002234 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f000 f99c 	bl	8002550 <TM_STMPE811_ReadX>
 8002218:	4603      	mov	r3, r0
 800221a:	461a      	mov	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	885b      	ldrh	r3, [r3, #2]
 8002224:	4618      	mov	r0, r3
 8002226:	f000 f9f3 	bl	8002610 <TM_STMPE811_ReadY>
 800222a:	4603      	mov	r3, r0
 800222c:	461a      	mov	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	805a      	strh	r2, [r3, #2]
 8002232:	e031      	b.n	8002298 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	799b      	ldrb	r3, [r3, #6]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d115      	bne.n	8002268 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	885b      	ldrh	r3, [r3, #2]
 8002240:	4618      	mov	r0, r3
 8002242:	f000 f985 	bl	8002550 <TM_STMPE811_ReadX>
 8002246:	4603      	mov	r3, r0
 8002248:	461a      	mov	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f9dc 	bl	8002610 <TM_STMPE811_ReadY>
 8002258:	4603      	mov	r3, r0
 800225a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800225e:	3301      	adds	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	801a      	strh	r2, [r3, #0]
 8002266:	e017      	b.n	8002298 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	799b      	ldrb	r3, [r3, #6]
 800226c:	2b03      	cmp	r3, #3
 800226e:	d113      	bne.n	8002298 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f000 f96b 	bl	8002550 <TM_STMPE811_ReadX>
 800227a:	4603      	mov	r3, r0
 800227c:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002280:	b29a      	uxth	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f000 f9c0 	bl	8002610 <TM_STMPE811_ReadY>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002298:	2201      	movs	r2, #1
 800229a:	214b      	movs	r1, #75	@ 0x4b
 800229c:	2082      	movs	r0, #130	@ 0x82
 800229e:	f000 f8e5 	bl	800246c <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80022a2:	2200      	movs	r2, #0
 80022a4:	214b      	movs	r1, #75	@ 0x4b
 80022a6:	2082      	movs	r0, #130	@ 0x82
 80022a8:	f000 f8e0 	bl	800246c <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	799b      	ldrb	r3, [r3, #6]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <STMPE811_ReadTouch+0x12e>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	799b      	ldrb	r3, [r3, #6]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d115      	bne.n	80022e8 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d027      	beq.n	8002314 <STMPE811_ReadTouch+0x186>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	2bee      	cmp	r3, #238	@ 0xee
 80022ca:	d823      	bhi.n	8002314 <STMPE811_ReadTouch+0x186>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	885b      	ldrh	r3, [r3, #2]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d01f      	beq.n	8002314 <STMPE811_ReadTouch+0x186>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	885b      	ldrh	r3, [r3, #2]
 80022d8:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80022dc:	d81a      	bhi.n	8002314 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80022e4:	2300      	movs	r3, #0
 80022e6:	e01a      	b.n	800231e <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d012      	beq.n	8002316 <STMPE811_ReadTouch+0x188>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80022f8:	d80d      	bhi.n	8002316 <STMPE811_ReadTouch+0x188>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	885b      	ldrh	r3, [r3, #2]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <STMPE811_ReadTouch+0x188>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	885b      	ldrh	r3, [r3, #2]
 8002306:	2bee      	cmp	r3, #238	@ 0xee
 8002308:	d805      	bhi.n	8002316 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002310:	2300      	movs	r3, #0
 8002312:	e004      	b.n	800231e <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002314:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 800231c:	2301      	movs	r3, #1
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 800232c:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <verifyHAL_I2C_IS_OKAY+0x1c>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002334:	bf00      	nop
 8002336:	e7fd      	b.n	8002334 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20025bd4 	.word	0x20025bd4

08002348 <I2C3_Init>:

static void I2C3_Init()
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	603b      	str	r3, [r7, #0]
 8002352:	4b18      	ldr	r3, [pc, #96]	@ (80023b4 <I2C3_Init+0x6c>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	4a17      	ldr	r2, [pc, #92]	@ (80023b4 <I2C3_Init+0x6c>)
 8002358:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800235c:	6413      	str	r3, [r2, #64]	@ 0x40
 800235e:	4b15      	ldr	r3, [pc, #84]	@ (80023b4 <I2C3_Init+0x6c>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800236a:	4b13      	ldr	r3, [pc, #76]	@ (80023b8 <I2C3_Init+0x70>)
 800236c:	4a13      	ldr	r2, [pc, #76]	@ (80023bc <I2C3_Init+0x74>)
 800236e:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002370:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <I2C3_Init+0x70>)
 8002372:	4a13      	ldr	r2, [pc, #76]	@ (80023c0 <I2C3_Init+0x78>)
 8002374:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002376:	4b10      	ldr	r3, [pc, #64]	@ (80023b8 <I2C3_Init+0x70>)
 8002378:	2200      	movs	r2, #0
 800237a:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 800237c:	4b0e      	ldr	r3, [pc, #56]	@ (80023b8 <I2C3_Init+0x70>)
 800237e:	2200      	movs	r2, #0
 8002380:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002382:	4b0d      	ldr	r3, [pc, #52]	@ (80023b8 <I2C3_Init+0x70>)
 8002384:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002388:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800238a:	4b0b      	ldr	r3, [pc, #44]	@ (80023b8 <I2C3_Init+0x70>)
 800238c:	2200      	movs	r2, #0
 800238e:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002390:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <I2C3_Init+0x70>)
 8002392:	2200      	movs	r2, #0
 8002394:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002396:	4808      	ldr	r0, [pc, #32]	@ (80023b8 <I2C3_Init+0x70>)
 8002398:	f000 fec0 	bl	800311c <HAL_I2C_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 80023a6:	bf00      	nop
 80023a8:	e7fd      	b.n	80023a6 <I2C3_Init+0x5e>
    }
    return;
 80023aa:	bf00      	nop
}
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	20025b80 	.word	0x20025b80
 80023bc:	40005c00 	.word	0x40005c00
 80023c0:	000186a0 	.word	0x000186a0

080023c4 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ca:	f107 030c 	add.w	r3, r7, #12
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	60da      	str	r2, [r3, #12]
 80023d8:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	4b20      	ldr	r3, [pc, #128]	@ (8002460 <I2C3_MspInit+0x9c>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002460 <I2C3_MspInit+0x9c>)
 80023e4:	f043 0304 	orr.w	r3, r3, #4
 80023e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002460 <I2C3_MspInit+0x9c>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	607b      	str	r3, [r7, #4]
 80023fa:	4b19      	ldr	r3, [pc, #100]	@ (8002460 <I2C3_MspInit+0x9c>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	4a18      	ldr	r2, [pc, #96]	@ (8002460 <I2C3_MspInit+0x9c>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6313      	str	r3, [r2, #48]	@ 0x30
 8002406:	4b16      	ldr	r3, [pc, #88]	@ (8002460 <I2C3_MspInit+0x9c>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002412:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002416:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002418:	2312      	movs	r3, #18
 800241a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002420:	2300      	movs	r3, #0
 8002422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002424:	2304      	movs	r3, #4
 8002426:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002428:	f107 030c 	add.w	r3, r7, #12
 800242c:	4619      	mov	r1, r3
 800242e:	480d      	ldr	r0, [pc, #52]	@ (8002464 <I2C3_MspInit+0xa0>)
 8002430:	f000 fba2 	bl	8002b78 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002434:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002438:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800243a:	2312      	movs	r3, #18
 800243c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002446:	2304      	movs	r3, #4
 8002448:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800244a:	f107 030c 	add.w	r3, r7, #12
 800244e:	4619      	mov	r1, r3
 8002450:	4805      	ldr	r0, [pc, #20]	@ (8002468 <I2C3_MspInit+0xa4>)
 8002452:	f000 fb91 	bl	8002b78 <HAL_GPIO_Init>
    
}
 8002456:	bf00      	nop
 8002458:	3720      	adds	r7, #32
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800
 8002464:	40020800 	.word	0x40020800
 8002468:	40020000 	.word	0x40020000

0800246c <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b088      	sub	sp, #32
 8002470:	af04      	add	r7, sp, #16
 8002472:	4603      	mov	r3, r0
 8002474:	80fb      	strh	r3, [r7, #6]
 8002476:	460b      	mov	r3, r1
 8002478:	717b      	strb	r3, [r7, #5]
 800247a:	4613      	mov	r3, r2
 800247c:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 800247e:	793b      	ldrb	r3, [r7, #4]
 8002480:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002482:	797b      	ldrb	r3, [r7, #5]
 8002484:	b29a      	uxth	r2, r3
 8002486:	88f9      	ldrh	r1, [r7, #6]
 8002488:	4b0a      	ldr	r3, [pc, #40]	@ (80024b4 <I2C3_Write+0x48>)
 800248a:	9302      	str	r3, [sp, #8]
 800248c:	2301      	movs	r3, #1
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	f107 030f 	add.w	r3, r7, #15
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	2301      	movs	r3, #1
 8002498:	4807      	ldr	r0, [pc, #28]	@ (80024b8 <I2C3_Write+0x4c>)
 800249a:	f000 ff83 	bl	80033a4 <HAL_I2C_Mem_Write>
 800249e:	4603      	mov	r3, r0
 80024a0:	461a      	mov	r2, r3
 80024a2:	4b06      	ldr	r3, [pc, #24]	@ (80024bc <I2C3_Write+0x50>)
 80024a4:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80024a6:	f7ff ff3f 	bl	8002328 <verifyHAL_I2C_IS_OKAY>
}
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	0003d090 	.word	0x0003d090
 80024b8:	20025b80 	.word	0x20025b80
 80024bc:	20025bd4 	.word	0x20025bd4

080024c0 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af04      	add	r7, sp, #16
 80024c6:	4603      	mov	r3, r0
 80024c8:	603a      	str	r2, [r7, #0]
 80024ca:	71fb      	strb	r3, [r7, #7]
 80024cc:	460b      	mov	r3, r1
 80024ce:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	b299      	uxth	r1, r3
 80024d4:	79bb      	ldrb	r3, [r7, #6]
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	4b09      	ldr	r3, [pc, #36]	@ (8002500 <I2C3_Read+0x40>)
 80024da:	9302      	str	r3, [sp, #8]
 80024dc:	2301      	movs	r3, #1
 80024de:	9301      	str	r3, [sp, #4]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2301      	movs	r3, #1
 80024e6:	4807      	ldr	r0, [pc, #28]	@ (8002504 <I2C3_Read+0x44>)
 80024e8:	f001 f856 	bl	8003598 <HAL_I2C_Mem_Read>
 80024ec:	4603      	mov	r3, r0
 80024ee:	461a      	mov	r2, r3
 80024f0:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <I2C3_Read+0x48>)
 80024f2:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80024f4:	f7ff ff18 	bl	8002328 <verifyHAL_I2C_IS_OKAY>
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	0003d090 	.word	0x0003d090
 8002504:	20025b80 	.word	0x20025b80
 8002508:	20025bd4 	.word	0x20025bd4

0800250c <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af04      	add	r7, sp, #16
 8002512:	603a      	str	r2, [r7, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	4603      	mov	r3, r0
 8002518:	71fb      	strb	r3, [r7, #7]
 800251a:	460b      	mov	r3, r1
 800251c:	71bb      	strb	r3, [r7, #6]
 800251e:	4613      	mov	r3, r2
 8002520:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	b299      	uxth	r1, r3
 8002526:	79bb      	ldrb	r3, [r7, #6]
 8002528:	b29a      	uxth	r2, r3
 800252a:	4b07      	ldr	r3, [pc, #28]	@ (8002548 <I2C3_MulitByteRead+0x3c>)
 800252c:	9302      	str	r3, [sp, #8]
 800252e:	88bb      	ldrh	r3, [r7, #4]
 8002530:	9301      	str	r3, [sp, #4]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	2301      	movs	r3, #1
 8002538:	4804      	ldr	r0, [pc, #16]	@ (800254c <I2C3_MulitByteRead+0x40>)
 800253a:	f001 f82d 	bl	8003598 <HAL_I2C_Mem_Read>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	0003d090 	.word	0x0003d090
 800254c:	20025b80 	.word	0x20025b80

08002550 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800255a:	204d      	movs	r0, #77	@ 0x4d
 800255c:	f7ff fe06 	bl	800216c <STMPE811_Read>
 8002560:	4603      	mov	r3, r0
 8002562:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002564:	204e      	movs	r0, #78	@ 0x4e
 8002566:	f7ff fe01 	bl	800216c <STMPE811_Read>
 800256a:	4603      	mov	r3, r0
 800256c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800256e:	7a7b      	ldrb	r3, [r7, #9]
 8002570:	b21b      	sxth	r3, r3
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	b21a      	sxth	r2, r3
 8002576:	7a3b      	ldrb	r3, [r7, #8]
 8002578:	b21b      	sxth	r3, r3
 800257a:	4313      	orrs	r3, r2
 800257c:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 800257e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002582:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002586:	4293      	cmp	r3, r2
 8002588:	dc06      	bgt.n	8002598 <TM_STMPE811_ReadX+0x48>
        val = 3900 - val;
 800258a:	89fb      	ldrh	r3, [r7, #14]
 800258c:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002590:	330c      	adds	r3, #12
 8002592:	b29b      	uxth	r3, r3
 8002594:	81fb      	strh	r3, [r7, #14]
 8002596:	e005      	b.n	80025a4 <TM_STMPE811_ReadX+0x54>
    } else {
        val = 3800 - val;
 8002598:	89fb      	ldrh	r3, [r7, #14]
 800259a:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800259e:	3308      	adds	r3, #8
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 80025a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025a8:	4a18      	ldr	r2, [pc, #96]	@ (800260c <TM_STMPE811_ReadX+0xbc>)
 80025aa:	fb82 1203 	smull	r1, r2, r2, r3
 80025ae:	441a      	add	r2, r3
 80025b0:	10d2      	asrs	r2, r2, #3
 80025b2:	17db      	asrs	r3, r3, #31
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80025b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025bc:	2bef      	cmp	r3, #239	@ 0xef
 80025be:	dd02      	ble.n	80025c6 <TM_STMPE811_ReadX+0x76>
        val = 239;
 80025c0:	23ef      	movs	r3, #239	@ 0xef
 80025c2:	81fb      	strh	r3, [r7, #14]
 80025c4:	e005      	b.n	80025d2 <TM_STMPE811_ReadX+0x82>
    } else if (val < 0) {
 80025c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	da01      	bge.n	80025d2 <TM_STMPE811_ReadX+0x82>
        val = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80025d2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	429a      	cmp	r2, r3
 80025da:	dd05      	ble.n	80025e8 <TM_STMPE811_ReadX+0x98>
 80025dc:	89fa      	ldrh	r2, [r7, #14]
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	b21b      	sxth	r3, r3
 80025e6:	e004      	b.n	80025f2 <TM_STMPE811_ReadX+0xa2>
 80025e8:	89fb      	ldrh	r3, [r7, #14]
 80025ea:	88fa      	ldrh	r2, [r7, #6]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	b21b      	sxth	r3, r3
 80025f2:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80025f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	dd01      	ble.n	8002600 <TM_STMPE811_ReadX+0xb0>
        return val;
 80025fc:	89fb      	ldrh	r3, [r7, #14]
 80025fe:	e000      	b.n	8002602 <TM_STMPE811_ReadX+0xb2>
    }
    return x;
 8002600:	88fb      	ldrh	r3, [r7, #6]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	88888889 	.word	0x88888889

08002610 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 800261a:	204f      	movs	r0, #79	@ 0x4f
 800261c:	f7ff fda6 	bl	800216c <STMPE811_Read>
 8002620:	4603      	mov	r3, r0
 8002622:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002624:	2050      	movs	r0, #80	@ 0x50
 8002626:	f7ff fda1 	bl	800216c <STMPE811_Read>
 800262a:	4603      	mov	r3, r0
 800262c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800262e:	7a7b      	ldrb	r3, [r7, #9]
 8002630:	b21b      	sxth	r3, r3
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	b21a      	sxth	r2, r3
 8002636:	7a3b      	ldrb	r3, [r7, #8]
 8002638:	b21b      	sxth	r3, r3
 800263a:	4313      	orrs	r3, r2
 800263c:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 800263e:	89fb      	ldrh	r3, [r7, #14]
 8002640:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002644:	b29b      	uxth	r3, r3
 8002646:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002648:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800264c:	4a18      	ldr	r2, [pc, #96]	@ (80026b0 <TM_STMPE811_ReadY+0xa0>)
 800264e:	fb82 1203 	smull	r1, r2, r2, r3
 8002652:	1052      	asrs	r2, r2, #1
 8002654:	17db      	asrs	r3, r3, #31
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 800265a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800265e:	2b00      	cmp	r3, #0
 8002660:	dc02      	bgt.n	8002668 <TM_STMPE811_ReadY+0x58>
        val = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	81fb      	strh	r3, [r7, #14]
 8002666:	e007      	b.n	8002678 <TM_STMPE811_ReadY+0x68>
    } else if (val >= 320) {
 8002668:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800266c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002670:	db02      	blt.n	8002678 <TM_STMPE811_ReadY+0x68>
        val = 319;
 8002672:	f240 133f 	movw	r3, #319	@ 0x13f
 8002676:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002678:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	429a      	cmp	r2, r3
 8002680:	dd05      	ble.n	800268e <TM_STMPE811_ReadY+0x7e>
 8002682:	89fa      	ldrh	r2, [r7, #14]
 8002684:	88fb      	ldrh	r3, [r7, #6]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	b29b      	uxth	r3, r3
 800268a:	b21b      	sxth	r3, r3
 800268c:	e004      	b.n	8002698 <TM_STMPE811_ReadY+0x88>
 800268e:	89fb      	ldrh	r3, [r7, #14]
 8002690:	88fa      	ldrh	r2, [r7, #6]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	b29b      	uxth	r3, r3
 8002696:	b21b      	sxth	r3, r3
 8002698:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 800269a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800269e:	2b04      	cmp	r3, #4
 80026a0:	dd01      	ble.n	80026a6 <TM_STMPE811_ReadY+0x96>
        return val;
 80026a2:	89fb      	ldrh	r3, [r7, #14]
 80026a4:	e000      	b.n	80026a8 <TM_STMPE811_ReadY+0x98>
    }
    return y;
 80026a6:	88fb      	ldrh	r3, [r7, #6]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	2e8ba2e9 	.word	0x2e8ba2e9

080026b4 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b086      	sub	sp, #24
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	e00a      	b.n	80026ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026d4:	f3af 8000 	nop.w
 80026d8:	4601      	mov	r1, r0
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	60ba      	str	r2, [r7, #8]
 80026e0:	b2ca      	uxtb	r2, r1
 80026e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	3301      	adds	r3, #1
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	dbf0      	blt.n	80026d4 <_read+0x12>
  }

  return len;
 80026f2:	687b      	ldr	r3, [r7, #4]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	e009      	b.n	8002722 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	60ba      	str	r2, [r7, #8]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	3301      	adds	r3, #1
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	429a      	cmp	r2, r3
 8002728:	dbf1      	blt.n	800270e <_write+0x12>
  }
  return len;
 800272a:	687b      	ldr	r3, [r7, #4]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <_close>:

int _close(int file)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800273c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800275c:	605a      	str	r2, [r3, #4]
  return 0;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <_isatty>:

int _isatty(int file)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002774:	2301      	movs	r3, #1
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002782:	b480      	push	{r7}
 8002784:	b085      	sub	sp, #20
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027a4:	4a14      	ldr	r2, [pc, #80]	@ (80027f8 <_sbrk+0x5c>)
 80027a6:	4b15      	ldr	r3, [pc, #84]	@ (80027fc <_sbrk+0x60>)
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027b0:	4b13      	ldr	r3, [pc, #76]	@ (8002800 <_sbrk+0x64>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d102      	bne.n	80027be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027b8:	4b11      	ldr	r3, [pc, #68]	@ (8002800 <_sbrk+0x64>)
 80027ba:	4a12      	ldr	r2, [pc, #72]	@ (8002804 <_sbrk+0x68>)
 80027bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027be:	4b10      	ldr	r3, [pc, #64]	@ (8002800 <_sbrk+0x64>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d207      	bcs.n	80027dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027cc:	f003 fd4c 	bl	8006268 <__errno>
 80027d0:	4603      	mov	r3, r0
 80027d2:	220c      	movs	r2, #12
 80027d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027da:	e009      	b.n	80027f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027dc:	4b08      	ldr	r3, [pc, #32]	@ (8002800 <_sbrk+0x64>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027e2:	4b07      	ldr	r3, [pc, #28]	@ (8002800 <_sbrk+0x64>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4413      	add	r3, r2
 80027ea:	4a05      	ldr	r2, [pc, #20]	@ (8002800 <_sbrk+0x64>)
 80027ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ee:	68fb      	ldr	r3, [r7, #12]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20030000 	.word	0x20030000
 80027fc:	00000400 	.word	0x00000400
 8002800:	20025bd8 	.word	0x20025bd8
 8002804:	20025d30 	.word	0x20025d30

08002808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800280c:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <SystemInit+0x20>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002812:	4a05      	ldr	r2, [pc, #20]	@ (8002828 <SystemInit+0x20>)
 8002814:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002818:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800282c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002864 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002830:	f7ff ffea 	bl	8002808 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002834:	480c      	ldr	r0, [pc, #48]	@ (8002868 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002836:	490d      	ldr	r1, [pc, #52]	@ (800286c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002838:	4a0d      	ldr	r2, [pc, #52]	@ (8002870 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800283a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800283c:	e002      	b.n	8002844 <LoopCopyDataInit>

0800283e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800283e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002842:	3304      	adds	r3, #4

08002844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002848:	d3f9      	bcc.n	800283e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800284a:	4a0a      	ldr	r2, [pc, #40]	@ (8002874 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800284c:	4c0a      	ldr	r4, [pc, #40]	@ (8002878 <LoopFillZerobss+0x22>)
  movs r3, #0
 800284e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002850:	e001      	b.n	8002856 <LoopFillZerobss>

08002852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002854:	3204      	adds	r2, #4

08002856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002858:	d3fb      	bcc.n	8002852 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800285a:	f003 fd0b 	bl	8006274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800285e:	f7fe fd86 	bl	800136e <main>
  bx  lr    
 8002862:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002864:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800286c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002870:	08008170 	.word	0x08008170
  ldr r2, =_sbss
 8002874:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002878:	20025d2c 	.word	0x20025d2c

0800287c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800287c:	e7fe      	b.n	800287c <ADC_IRQHandler>
	...

08002880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002884:	4b0e      	ldr	r3, [pc, #56]	@ (80028c0 <HAL_Init+0x40>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a0d      	ldr	r2, [pc, #52]	@ (80028c0 <HAL_Init+0x40>)
 800288a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800288e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002890:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <HAL_Init+0x40>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a0a      	ldr	r2, [pc, #40]	@ (80028c0 <HAL_Init+0x40>)
 8002896:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800289a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800289c:	4b08      	ldr	r3, [pc, #32]	@ (80028c0 <HAL_Init+0x40>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a07      	ldr	r2, [pc, #28]	@ (80028c0 <HAL_Init+0x40>)
 80028a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028a8:	2003      	movs	r0, #3
 80028aa:	f000 f931 	bl	8002b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ae:	2000      	movs	r0, #0
 80028b0:	f000 f808 	bl	80028c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028b4:	f7ff f922 	bl	8001afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40023c00 	.word	0x40023c00

080028c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028cc:	4b12      	ldr	r3, [pc, #72]	@ (8002918 <HAL_InitTick+0x54>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b12      	ldr	r3, [pc, #72]	@ (800291c <HAL_InitTick+0x58>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	4619      	mov	r1, r3
 80028d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028da:	fbb3 f3f1 	udiv	r3, r3, r1
 80028de:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 f93b 	bl	8002b5e <HAL_SYSTICK_Config>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e00e      	b.n	8002910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b0f      	cmp	r3, #15
 80028f6:	d80a      	bhi.n	800290e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028f8:	2200      	movs	r2, #0
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002900:	f000 f911 	bl	8002b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002904:	4a06      	ldr	r2, [pc, #24]	@ (8002920 <HAL_InitTick+0x5c>)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	e000      	b.n	8002910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
}
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20000010 	.word	0x20000010
 800291c:	20000018 	.word	0x20000018
 8002920:	20000014 	.word	0x20000014

08002924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002928:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <HAL_IncTick+0x20>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	461a      	mov	r2, r3
 800292e:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <HAL_IncTick+0x24>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4413      	add	r3, r2
 8002934:	4a04      	ldr	r2, [pc, #16]	@ (8002948 <HAL_IncTick+0x24>)
 8002936:	6013      	str	r3, [r2, #0]
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	20000018 	.word	0x20000018
 8002948:	20025bdc 	.word	0x20025bdc

0800294c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return uwTick;
 8002950:	4b03      	ldr	r3, [pc, #12]	@ (8002960 <HAL_GetTick+0x14>)
 8002952:	681b      	ldr	r3, [r3, #0]
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	20025bdc 	.word	0x20025bdc

08002964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800296c:	f7ff ffee 	bl	800294c <HAL_GetTick>
 8002970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800297c:	d005      	beq.n	800298a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800297e:	4b0a      	ldr	r3, [pc, #40]	@ (80029a8 <HAL_Delay+0x44>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4413      	add	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800298a:	bf00      	nop
 800298c:	f7ff ffde 	bl	800294c <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	429a      	cmp	r2, r3
 800299a:	d8f7      	bhi.n	800298c <HAL_Delay+0x28>
  {
  }
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000018 	.word	0x20000018

080029ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029bc:	4b0c      	ldr	r3, [pc, #48]	@ (80029f0 <__NVIC_SetPriorityGrouping+0x44>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029c8:	4013      	ands	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029de:	4a04      	ldr	r2, [pc, #16]	@ (80029f0 <__NVIC_SetPriorityGrouping+0x44>)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	60d3      	str	r3, [r2, #12]
}
 80029e4:	bf00      	nop
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f8:	4b04      	ldr	r3, [pc, #16]	@ (8002a0c <__NVIC_GetPriorityGrouping+0x18>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	0a1b      	lsrs	r3, r3, #8
 80029fe:	f003 0307 	and.w	r3, r3, #7
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	6039      	str	r1, [r7, #0]
 8002a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	db0a      	blt.n	8002a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	490c      	ldr	r1, [pc, #48]	@ (8002a5c <__NVIC_SetPriority+0x4c>)
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	0112      	lsls	r2, r2, #4
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	440b      	add	r3, r1
 8002a34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a38:	e00a      	b.n	8002a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	4908      	ldr	r1, [pc, #32]	@ (8002a60 <__NVIC_SetPriority+0x50>)
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	3b04      	subs	r3, #4
 8002a48:	0112      	lsls	r2, r2, #4
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	761a      	strb	r2, [r3, #24]
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	e000e100 	.word	0xe000e100
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b089      	sub	sp, #36	@ 0x24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f1c3 0307 	rsb	r3, r3, #7
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	bf28      	it	cs
 8002a82:	2304      	movcs	r3, #4
 8002a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	2b06      	cmp	r3, #6
 8002a8c:	d902      	bls.n	8002a94 <NVIC_EncodePriority+0x30>
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3b03      	subs	r3, #3
 8002a92:	e000      	b.n	8002a96 <NVIC_EncodePriority+0x32>
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43da      	mvns	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab6:	43d9      	mvns	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002abc:	4313      	orrs	r3, r2
         );
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3724      	adds	r7, #36	@ 0x24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002adc:	d301      	bcc.n	8002ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e00f      	b.n	8002b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b0c <SysTick_Config+0x40>)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aea:	210f      	movs	r1, #15
 8002aec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002af0:	f7ff ff8e 	bl	8002a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002af4:	4b05      	ldr	r3, [pc, #20]	@ (8002b0c <SysTick_Config+0x40>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002afa:	4b04      	ldr	r3, [pc, #16]	@ (8002b0c <SysTick_Config+0x40>)
 8002afc:	2207      	movs	r2, #7
 8002afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	e000e010 	.word	0xe000e010

08002b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff ff47 	bl	80029ac <__NVIC_SetPriorityGrouping>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b086      	sub	sp, #24
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b38:	f7ff ff5c 	bl	80029f4 <__NVIC_GetPriorityGrouping>
 8002b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	6978      	ldr	r0, [r7, #20]
 8002b44:	f7ff ff8e 	bl	8002a64 <NVIC_EncodePriority>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ff5d 	bl	8002a10 <__NVIC_SetPriority>
}
 8002b56:	bf00      	nop
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff ffb0 	bl	8002acc <SysTick_Config>
 8002b6c:	4603      	mov	r3, r0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	@ 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	e177      	b.n	8002e84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b94:	2201      	movs	r2, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	f040 8166 	bne.w	8002e7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d005      	beq.n	8002bca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d130      	bne.n	8002c2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c00:	2201      	movs	r2, #1
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 0201 	and.w	r2, r3, #1
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0303 	and.w	r3, r3, #3
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d017      	beq.n	8002c68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	2203      	movs	r2, #3
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d123      	bne.n	8002cbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	08da      	lsrs	r2, r3, #3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3208      	adds	r2, #8
 8002c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	220f      	movs	r2, #15
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	08da      	lsrs	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3208      	adds	r2, #8
 8002cb6:	69b9      	ldr	r1, [r7, #24]
 8002cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 0203 	and.w	r2, r3, #3
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80c0 	beq.w	8002e7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	4b66      	ldr	r3, [pc, #408]	@ (8002e9c <HAL_GPIO_Init+0x324>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d06:	4a65      	ldr	r2, [pc, #404]	@ (8002e9c <HAL_GPIO_Init+0x324>)
 8002d08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d0e:	4b63      	ldr	r3, [pc, #396]	@ (8002e9c <HAL_GPIO_Init+0x324>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d1a:	4a61      	ldr	r2, [pc, #388]	@ (8002ea0 <HAL_GPIO_Init+0x328>)
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	089b      	lsrs	r3, r3, #2
 8002d20:	3302      	adds	r3, #2
 8002d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	220f      	movs	r2, #15
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a58      	ldr	r2, [pc, #352]	@ (8002ea4 <HAL_GPIO_Init+0x32c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d037      	beq.n	8002db6 <HAL_GPIO_Init+0x23e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a57      	ldr	r2, [pc, #348]	@ (8002ea8 <HAL_GPIO_Init+0x330>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d031      	beq.n	8002db2 <HAL_GPIO_Init+0x23a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a56      	ldr	r2, [pc, #344]	@ (8002eac <HAL_GPIO_Init+0x334>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d02b      	beq.n	8002dae <HAL_GPIO_Init+0x236>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a55      	ldr	r2, [pc, #340]	@ (8002eb0 <HAL_GPIO_Init+0x338>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d025      	beq.n	8002daa <HAL_GPIO_Init+0x232>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a54      	ldr	r2, [pc, #336]	@ (8002eb4 <HAL_GPIO_Init+0x33c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d01f      	beq.n	8002da6 <HAL_GPIO_Init+0x22e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a53      	ldr	r2, [pc, #332]	@ (8002eb8 <HAL_GPIO_Init+0x340>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d019      	beq.n	8002da2 <HAL_GPIO_Init+0x22a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a52      	ldr	r2, [pc, #328]	@ (8002ebc <HAL_GPIO_Init+0x344>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d013      	beq.n	8002d9e <HAL_GPIO_Init+0x226>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a51      	ldr	r2, [pc, #324]	@ (8002ec0 <HAL_GPIO_Init+0x348>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00d      	beq.n	8002d9a <HAL_GPIO_Init+0x222>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a50      	ldr	r2, [pc, #320]	@ (8002ec4 <HAL_GPIO_Init+0x34c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d007      	beq.n	8002d96 <HAL_GPIO_Init+0x21e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4f      	ldr	r2, [pc, #316]	@ (8002ec8 <HAL_GPIO_Init+0x350>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d101      	bne.n	8002d92 <HAL_GPIO_Init+0x21a>
 8002d8e:	2309      	movs	r3, #9
 8002d90:	e012      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002d92:	230a      	movs	r3, #10
 8002d94:	e010      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002d96:	2308      	movs	r3, #8
 8002d98:	e00e      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002d9a:	2307      	movs	r3, #7
 8002d9c:	e00c      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002d9e:	2306      	movs	r3, #6
 8002da0:	e00a      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002da2:	2305      	movs	r3, #5
 8002da4:	e008      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002da6:	2304      	movs	r3, #4
 8002da8:	e006      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002daa:	2303      	movs	r3, #3
 8002dac:	e004      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002dae:	2302      	movs	r3, #2
 8002db0:	e002      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002db6:	2300      	movs	r3, #0
 8002db8:	69fa      	ldr	r2, [r7, #28]
 8002dba:	f002 0203 	and.w	r2, r2, #3
 8002dbe:	0092      	lsls	r2, r2, #2
 8002dc0:	4093      	lsls	r3, r2
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dc8:	4935      	ldr	r1, [pc, #212]	@ (8002ea0 <HAL_GPIO_Init+0x328>)
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	089b      	lsrs	r3, r3, #2
 8002dce:	3302      	adds	r3, #2
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dd6:	4b3d      	ldr	r3, [pc, #244]	@ (8002ecc <HAL_GPIO_Init+0x354>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dfa:	4a34      	ldr	r2, [pc, #208]	@ (8002ecc <HAL_GPIO_Init+0x354>)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e00:	4b32      	ldr	r3, [pc, #200]	@ (8002ecc <HAL_GPIO_Init+0x354>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e24:	4a29      	ldr	r2, [pc, #164]	@ (8002ecc <HAL_GPIO_Init+0x354>)
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e2a:	4b28      	ldr	r3, [pc, #160]	@ (8002ecc <HAL_GPIO_Init+0x354>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002ecc <HAL_GPIO_Init+0x354>)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e54:	4b1d      	ldr	r3, [pc, #116]	@ (8002ecc <HAL_GPIO_Init+0x354>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e78:	4a14      	ldr	r2, [pc, #80]	@ (8002ecc <HAL_GPIO_Init+0x354>)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3301      	adds	r3, #1
 8002e82:	61fb      	str	r3, [r7, #28]
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	2b0f      	cmp	r3, #15
 8002e88:	f67f ae84 	bls.w	8002b94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	bf00      	nop
 8002e90:	3724      	adds	r7, #36	@ 0x24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40013800 	.word	0x40013800
 8002ea4:	40020000 	.word	0x40020000
 8002ea8:	40020400 	.word	0x40020400
 8002eac:	40020800 	.word	0x40020800
 8002eb0:	40020c00 	.word	0x40020c00
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40021400 	.word	0x40021400
 8002ebc:	40021800 	.word	0x40021800
 8002ec0:	40021c00 	.word	0x40021c00
 8002ec4:	40022000 	.word	0x40022000
 8002ec8:	40022400 	.word	0x40022400
 8002ecc:	40013c00 	.word	0x40013c00

08002ed0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	e0d9      	b.n	80030a0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002eec:	2201      	movs	r2, #1
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4013      	ands	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	f040 80c9 	bne.w	800309a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002f08:	4a6b      	ldr	r2, [pc, #428]	@ (80030b8 <HAL_GPIO_DeInit+0x1e8>)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	089b      	lsrs	r3, r3, #2
 8002f0e:	3302      	adds	r3, #2
 8002f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f14:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	220f      	movs	r2, #15
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	4013      	ands	r3, r2
 8002f28:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a63      	ldr	r2, [pc, #396]	@ (80030bc <HAL_GPIO_DeInit+0x1ec>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d037      	beq.n	8002fa2 <HAL_GPIO_DeInit+0xd2>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a62      	ldr	r2, [pc, #392]	@ (80030c0 <HAL_GPIO_DeInit+0x1f0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d031      	beq.n	8002f9e <HAL_GPIO_DeInit+0xce>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a61      	ldr	r2, [pc, #388]	@ (80030c4 <HAL_GPIO_DeInit+0x1f4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d02b      	beq.n	8002f9a <HAL_GPIO_DeInit+0xca>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a60      	ldr	r2, [pc, #384]	@ (80030c8 <HAL_GPIO_DeInit+0x1f8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d025      	beq.n	8002f96 <HAL_GPIO_DeInit+0xc6>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a5f      	ldr	r2, [pc, #380]	@ (80030cc <HAL_GPIO_DeInit+0x1fc>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d01f      	beq.n	8002f92 <HAL_GPIO_DeInit+0xc2>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a5e      	ldr	r2, [pc, #376]	@ (80030d0 <HAL_GPIO_DeInit+0x200>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d019      	beq.n	8002f8e <HAL_GPIO_DeInit+0xbe>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a5d      	ldr	r2, [pc, #372]	@ (80030d4 <HAL_GPIO_DeInit+0x204>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d013      	beq.n	8002f8a <HAL_GPIO_DeInit+0xba>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a5c      	ldr	r2, [pc, #368]	@ (80030d8 <HAL_GPIO_DeInit+0x208>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00d      	beq.n	8002f86 <HAL_GPIO_DeInit+0xb6>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a5b      	ldr	r2, [pc, #364]	@ (80030dc <HAL_GPIO_DeInit+0x20c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d007      	beq.n	8002f82 <HAL_GPIO_DeInit+0xb2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a5a      	ldr	r2, [pc, #360]	@ (80030e0 <HAL_GPIO_DeInit+0x210>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d101      	bne.n	8002f7e <HAL_GPIO_DeInit+0xae>
 8002f7a:	2309      	movs	r3, #9
 8002f7c:	e012      	b.n	8002fa4 <HAL_GPIO_DeInit+0xd4>
 8002f7e:	230a      	movs	r3, #10
 8002f80:	e010      	b.n	8002fa4 <HAL_GPIO_DeInit+0xd4>
 8002f82:	2308      	movs	r3, #8
 8002f84:	e00e      	b.n	8002fa4 <HAL_GPIO_DeInit+0xd4>
 8002f86:	2307      	movs	r3, #7
 8002f88:	e00c      	b.n	8002fa4 <HAL_GPIO_DeInit+0xd4>
 8002f8a:	2306      	movs	r3, #6
 8002f8c:	e00a      	b.n	8002fa4 <HAL_GPIO_DeInit+0xd4>
 8002f8e:	2305      	movs	r3, #5
 8002f90:	e008      	b.n	8002fa4 <HAL_GPIO_DeInit+0xd4>
 8002f92:	2304      	movs	r3, #4
 8002f94:	e006      	b.n	8002fa4 <HAL_GPIO_DeInit+0xd4>
 8002f96:	2303      	movs	r3, #3
 8002f98:	e004      	b.n	8002fa4 <HAL_GPIO_DeInit+0xd4>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e002      	b.n	8002fa4 <HAL_GPIO_DeInit+0xd4>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <HAL_GPIO_DeInit+0xd4>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	f002 0203 	and.w	r2, r2, #3
 8002faa:	0092      	lsls	r2, r2, #2
 8002fac:	4093      	lsls	r3, r2
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d132      	bne.n	800301a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002fb4:	4b4b      	ldr	r3, [pc, #300]	@ (80030e4 <HAL_GPIO_DeInit+0x214>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	4949      	ldr	r1, [pc, #292]	@ (80030e4 <HAL_GPIO_DeInit+0x214>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002fc2:	4b48      	ldr	r3, [pc, #288]	@ (80030e4 <HAL_GPIO_DeInit+0x214>)
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	4946      	ldr	r1, [pc, #280]	@ (80030e4 <HAL_GPIO_DeInit+0x214>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002fd0:	4b44      	ldr	r3, [pc, #272]	@ (80030e4 <HAL_GPIO_DeInit+0x214>)
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	4942      	ldr	r1, [pc, #264]	@ (80030e4 <HAL_GPIO_DeInit+0x214>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002fde:	4b41      	ldr	r3, [pc, #260]	@ (80030e4 <HAL_GPIO_DeInit+0x214>)
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	493f      	ldr	r1, [pc, #252]	@ (80030e4 <HAL_GPIO_DeInit+0x214>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	220f      	movs	r2, #15
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002ffc:	4a2e      	ldr	r2, [pc, #184]	@ (80030b8 <HAL_GPIO_DeInit+0x1e8>)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	089b      	lsrs	r3, r3, #2
 8003002:	3302      	adds	r3, #2
 8003004:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	43da      	mvns	r2, r3
 800300c:	482a      	ldr	r0, [pc, #168]	@ (80030b8 <HAL_GPIO_DeInit+0x1e8>)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	400a      	ands	r2, r1
 8003014:	3302      	adds	r3, #2
 8003016:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	2103      	movs	r1, #3
 8003024:	fa01 f303 	lsl.w	r3, r1, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	401a      	ands	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	08da      	lsrs	r2, r3, #3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3208      	adds	r2, #8
 8003038:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	220f      	movs	r2, #15
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43db      	mvns	r3, r3
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	08d2      	lsrs	r2, r2, #3
 8003050:	4019      	ands	r1, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3208      	adds	r2, #8
 8003056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	2103      	movs	r1, #3
 8003064:	fa01 f303 	lsl.w	r3, r1, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	401a      	ands	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	2101      	movs	r1, #1
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	401a      	ands	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	2103      	movs	r1, #3
 800308e:	fa01 f303 	lsl.w	r3, r1, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	401a      	ands	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	3301      	adds	r3, #1
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2b0f      	cmp	r3, #15
 80030a4:	f67f af22 	bls.w	8002eec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	371c      	adds	r7, #28
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40013800 	.word	0x40013800
 80030bc:	40020000 	.word	0x40020000
 80030c0:	40020400 	.word	0x40020400
 80030c4:	40020800 	.word	0x40020800
 80030c8:	40020c00 	.word	0x40020c00
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40021400 	.word	0x40021400
 80030d4:	40021800 	.word	0x40021800
 80030d8:	40021c00 	.word	0x40021c00
 80030dc:	40022000 	.word	0x40022000
 80030e0:	40022400 	.word	0x40022400
 80030e4:	40013c00 	.word	0x40013c00

080030e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
 80030f4:	4613      	mov	r3, r2
 80030f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030f8:	787b      	ldrb	r3, [r7, #1]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030fe:	887a      	ldrh	r2, [r7, #2]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003104:	e003      	b.n	800310e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003106:	887b      	ldrh	r3, [r7, #2]
 8003108:	041a      	lsls	r2, r3, #16
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	619a      	str	r2, [r3, #24]
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e12b      	b.n	8003386 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fe fd02 	bl	8001b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2224      	movs	r2, #36	@ 0x24
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0201 	bic.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800316e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800317e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003180:	f001 ff82 	bl	8005088 <HAL_RCC_GetPCLK1Freq>
 8003184:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4a81      	ldr	r2, [pc, #516]	@ (8003390 <HAL_I2C_Init+0x274>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d807      	bhi.n	80031a0 <HAL_I2C_Init+0x84>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4a80      	ldr	r2, [pc, #512]	@ (8003394 <HAL_I2C_Init+0x278>)
 8003194:	4293      	cmp	r3, r2
 8003196:	bf94      	ite	ls
 8003198:	2301      	movls	r3, #1
 800319a:	2300      	movhi	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	e006      	b.n	80031ae <HAL_I2C_Init+0x92>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4a7d      	ldr	r2, [pc, #500]	@ (8003398 <HAL_I2C_Init+0x27c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	bf94      	ite	ls
 80031a8:	2301      	movls	r3, #1
 80031aa:	2300      	movhi	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e0e7      	b.n	8003386 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4a78      	ldr	r2, [pc, #480]	@ (800339c <HAL_I2C_Init+0x280>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	0c9b      	lsrs	r3, r3, #18
 80031c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003390 <HAL_I2C_Init+0x274>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d802      	bhi.n	80031f0 <HAL_I2C_Init+0xd4>
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	3301      	adds	r3, #1
 80031ee:	e009      	b.n	8003204 <HAL_I2C_Init+0xe8>
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80031f6:	fb02 f303 	mul.w	r3, r2, r3
 80031fa:	4a69      	ldr	r2, [pc, #420]	@ (80033a0 <HAL_I2C_Init+0x284>)
 80031fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003200:	099b      	lsrs	r3, r3, #6
 8003202:	3301      	adds	r3, #1
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	430b      	orrs	r3, r1
 800320a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003216:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	495c      	ldr	r1, [pc, #368]	@ (8003390 <HAL_I2C_Init+0x274>)
 8003220:	428b      	cmp	r3, r1
 8003222:	d819      	bhi.n	8003258 <HAL_I2C_Init+0x13c>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	1e59      	subs	r1, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003232:	1c59      	adds	r1, r3, #1
 8003234:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003238:	400b      	ands	r3, r1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_I2C_Init+0x138>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1e59      	subs	r1, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fbb1 f3f3 	udiv	r3, r1, r3
 800324c:	3301      	adds	r3, #1
 800324e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003252:	e051      	b.n	80032f8 <HAL_I2C_Init+0x1dc>
 8003254:	2304      	movs	r3, #4
 8003256:	e04f      	b.n	80032f8 <HAL_I2C_Init+0x1dc>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d111      	bne.n	8003284 <HAL_I2C_Init+0x168>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	1e58      	subs	r0, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6859      	ldr	r1, [r3, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	440b      	add	r3, r1
 800326e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003272:	3301      	adds	r3, #1
 8003274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003278:	2b00      	cmp	r3, #0
 800327a:	bf0c      	ite	eq
 800327c:	2301      	moveq	r3, #1
 800327e:	2300      	movne	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	e012      	b.n	80032aa <HAL_I2C_Init+0x18e>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	1e58      	subs	r0, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6859      	ldr	r1, [r3, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	0099      	lsls	r1, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	fbb0 f3f3 	udiv	r3, r0, r3
 800329a:	3301      	adds	r3, #1
 800329c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bf0c      	ite	eq
 80032a4:	2301      	moveq	r3, #1
 80032a6:	2300      	movne	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_I2C_Init+0x196>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e022      	b.n	80032f8 <HAL_I2C_Init+0x1dc>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10e      	bne.n	80032d8 <HAL_I2C_Init+0x1bc>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1e58      	subs	r0, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6859      	ldr	r1, [r3, #4]
 80032c2:	460b      	mov	r3, r1
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	440b      	add	r3, r1
 80032c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80032cc:	3301      	adds	r3, #1
 80032ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032d6:	e00f      	b.n	80032f8 <HAL_I2C_Init+0x1dc>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1e58      	subs	r0, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6859      	ldr	r1, [r3, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	0099      	lsls	r1, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ee:	3301      	adds	r3, #1
 80032f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	6809      	ldr	r1, [r1, #0]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69da      	ldr	r2, [r3, #28]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003326:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6911      	ldr	r1, [r2, #16]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	68d2      	ldr	r2, [r2, #12]
 8003332:	4311      	orrs	r1, r2
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	430b      	orrs	r3, r1
 800333a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695a      	ldr	r2, [r3, #20]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0201 	orr.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2220      	movs	r2, #32
 8003372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	000186a0 	.word	0x000186a0
 8003394:	001e847f 	.word	0x001e847f
 8003398:	003d08ff 	.word	0x003d08ff
 800339c:	431bde83 	.word	0x431bde83
 80033a0:	10624dd3 	.word	0x10624dd3

080033a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	4608      	mov	r0, r1
 80033ae:	4611      	mov	r1, r2
 80033b0:	461a      	mov	r2, r3
 80033b2:	4603      	mov	r3, r0
 80033b4:	817b      	strh	r3, [r7, #10]
 80033b6:	460b      	mov	r3, r1
 80033b8:	813b      	strh	r3, [r7, #8]
 80033ba:	4613      	mov	r3, r2
 80033bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033be:	f7ff fac5 	bl	800294c <HAL_GetTick>
 80033c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b20      	cmp	r3, #32
 80033ce:	f040 80d9 	bne.w	8003584 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	2319      	movs	r3, #25
 80033d8:	2201      	movs	r2, #1
 80033da:	496d      	ldr	r1, [pc, #436]	@ (8003590 <HAL_I2C_Mem_Write+0x1ec>)
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 fc8b 	bl	8003cf8 <I2C_WaitOnFlagUntilTimeout>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80033e8:	2302      	movs	r3, #2
 80033ea:	e0cc      	b.n	8003586 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_I2C_Mem_Write+0x56>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e0c5      	b.n	8003586 <HAL_I2C_Mem_Write+0x1e2>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b01      	cmp	r3, #1
 800340e:	d007      	beq.n	8003420 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0201 	orr.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800342e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2221      	movs	r2, #33	@ 0x21
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2240      	movs	r2, #64	@ 0x40
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a3a      	ldr	r2, [r7, #32]
 800344a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003450:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4a4d      	ldr	r2, [pc, #308]	@ (8003594 <HAL_I2C_Mem_Write+0x1f0>)
 8003460:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003462:	88f8      	ldrh	r0, [r7, #6]
 8003464:	893a      	ldrh	r2, [r7, #8]
 8003466:	8979      	ldrh	r1, [r7, #10]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	9301      	str	r3, [sp, #4]
 800346c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	4603      	mov	r3, r0
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fac2 	bl	80039fc <I2C_RequestMemoryWrite>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d052      	beq.n	8003524 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e081      	b.n	8003586 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 fd50 	bl	8003f2c <I2C_WaitOnTXEFlagUntilTimeout>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00d      	beq.n	80034ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	2b04      	cmp	r3, #4
 8003498:	d107      	bne.n	80034aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e06b      	b.n	8003586 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b2:	781a      	ldrb	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d11b      	bne.n	8003524 <HAL_I2C_Mem_Write+0x180>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d017      	beq.n	8003524 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f8:	781a      	ldrb	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1aa      	bne.n	8003482 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 fd43 	bl	8003fbc <I2C_WaitOnBTFFlagUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00d      	beq.n	8003558 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003540:	2b04      	cmp	r3, #4
 8003542:	d107      	bne.n	8003554 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003552:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e016      	b.n	8003586 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003566:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	e000      	b.n	8003586 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003584:	2302      	movs	r3, #2
  }
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	00100002 	.word	0x00100002
 8003594:	ffff0000 	.word	0xffff0000

08003598 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08c      	sub	sp, #48	@ 0x30
 800359c:	af02      	add	r7, sp, #8
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	4608      	mov	r0, r1
 80035a2:	4611      	mov	r1, r2
 80035a4:	461a      	mov	r2, r3
 80035a6:	4603      	mov	r3, r0
 80035a8:	817b      	strh	r3, [r7, #10]
 80035aa:	460b      	mov	r3, r1
 80035ac:	813b      	strh	r3, [r7, #8]
 80035ae:	4613      	mov	r3, r2
 80035b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035b2:	f7ff f9cb 	bl	800294c <HAL_GetTick>
 80035b6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b20      	cmp	r3, #32
 80035c2:	f040 8214 	bne.w	80039ee <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	2319      	movs	r3, #25
 80035cc:	2201      	movs	r2, #1
 80035ce:	497b      	ldr	r1, [pc, #492]	@ (80037bc <HAL_I2C_Mem_Read+0x224>)
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 fb91 	bl	8003cf8 <I2C_WaitOnFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80035dc:	2302      	movs	r3, #2
 80035de:	e207      	b.n	80039f0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_I2C_Mem_Read+0x56>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e200      	b.n	80039f0 <HAL_I2C_Mem_Read+0x458>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b01      	cmp	r3, #1
 8003602:	d007      	beq.n	8003614 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0201 	orr.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003622:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2222      	movs	r2, #34	@ 0x22
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2240      	movs	r2, #64	@ 0x40
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800363e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003644:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4a5b      	ldr	r2, [pc, #364]	@ (80037c0 <HAL_I2C_Mem_Read+0x228>)
 8003654:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003656:	88f8      	ldrh	r0, [r7, #6]
 8003658:	893a      	ldrh	r2, [r7, #8]
 800365a:	8979      	ldrh	r1, [r7, #10]
 800365c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365e:	9301      	str	r3, [sp, #4]
 8003660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	4603      	mov	r3, r0
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 fa5e 	bl	8003b28 <I2C_RequestMemoryRead>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e1bc      	b.n	80039f0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800367a:	2b00      	cmp	r3, #0
 800367c:	d113      	bne.n	80036a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800367e:	2300      	movs	r3, #0
 8003680:	623b      	str	r3, [r7, #32]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	623b      	str	r3, [r7, #32]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	623b      	str	r3, [r7, #32]
 8003692:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	e190      	b.n	80039c8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d11b      	bne.n	80036e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	e170      	b.n	80039c8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d11b      	bne.n	8003726 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800370c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800370e:	2300      	movs	r3, #0
 8003710:	61bb      	str	r3, [r7, #24]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	e150      	b.n	80039c8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800373c:	e144      	b.n	80039c8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003742:	2b03      	cmp	r3, #3
 8003744:	f200 80f1 	bhi.w	800392a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374c:	2b01      	cmp	r3, #1
 800374e:	d123      	bne.n	8003798 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003752:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 fc79 	bl	800404c <I2C_WaitOnRXNEFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e145      	b.n	80039f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691a      	ldr	r2, [r3, #16]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800378c:	b29b      	uxth	r3, r3
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003796:	e117      	b.n	80039c8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379c:	2b02      	cmp	r3, #2
 800379e:	d14e      	bne.n	800383e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a6:	2200      	movs	r2, #0
 80037a8:	4906      	ldr	r1, [pc, #24]	@ (80037c4 <HAL_I2C_Mem_Read+0x22c>)
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 faa4 	bl	8003cf8 <I2C_WaitOnFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d008      	beq.n	80037c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e11a      	b.n	80039f0 <HAL_I2C_Mem_Read+0x458>
 80037ba:	bf00      	nop
 80037bc:	00100002 	.word	0x00100002
 80037c0:	ffff0000 	.word	0xffff0000
 80037c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691a      	ldr	r2, [r3, #16]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003832:	b29b      	uxth	r3, r3
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800383c:	e0c4      	b.n	80039c8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800383e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003844:	2200      	movs	r2, #0
 8003846:	496c      	ldr	r1, [pc, #432]	@ (80039f8 <HAL_I2C_Mem_Read+0x460>)
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 fa55 	bl	8003cf8 <I2C_WaitOnFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0cb      	b.n	80039f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003866:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800389a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a0:	2200      	movs	r2, #0
 80038a2:	4955      	ldr	r1, [pc, #340]	@ (80039f8 <HAL_I2C_Mem_Read+0x460>)
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 fa27 	bl	8003cf8 <I2C_WaitOnFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e09d      	b.n	80039f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003928:	e04e      	b.n	80039c8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800392a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800392c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 fb8c 	bl	800404c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e058      	b.n	80039f0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	2b04      	cmp	r3, #4
 800397c:	d124      	bne.n	80039c8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003982:	2b03      	cmp	r3, #3
 8003984:	d107      	bne.n	8003996 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003994:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f47f aeb6 	bne.w	800373e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e000      	b.n	80039f0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80039ee:	2302      	movs	r3, #2
  }
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3728      	adds	r7, #40	@ 0x28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	00010004 	.word	0x00010004

080039fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	4608      	mov	r0, r1
 8003a06:	4611      	mov	r1, r2
 8003a08:	461a      	mov	r2, r3
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	817b      	strh	r3, [r7, #10]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	813b      	strh	r3, [r7, #8]
 8003a12:	4613      	mov	r3, r2
 8003a14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f960 	bl	8003cf8 <I2C_WaitOnFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00d      	beq.n	8003a5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a4c:	d103      	bne.n	8003a56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a54:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e05f      	b.n	8003b1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a5a:	897b      	ldrh	r3, [r7, #10]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6c:	6a3a      	ldr	r2, [r7, #32]
 8003a6e:	492d      	ldr	r1, [pc, #180]	@ (8003b24 <I2C_RequestMemoryWrite+0x128>)
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f9bb 	bl	8003dec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e04c      	b.n	8003b1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a98:	6a39      	ldr	r1, [r7, #32]
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 fa46 	bl	8003f2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00d      	beq.n	8003ac2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d107      	bne.n	8003abe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003abc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e02b      	b.n	8003b1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d105      	bne.n	8003ad4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac8:	893b      	ldrh	r3, [r7, #8]
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	611a      	str	r2, [r3, #16]
 8003ad2:	e021      	b.n	8003b18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ad4:	893b      	ldrh	r3, [r7, #8]
 8003ad6:	0a1b      	lsrs	r3, r3, #8
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae4:	6a39      	ldr	r1, [r7, #32]
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 fa20 	bl	8003f2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00d      	beq.n	8003b0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d107      	bne.n	8003b0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e005      	b.n	8003b1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b0e:	893b      	ldrh	r3, [r7, #8]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	00010002 	.word	0x00010002

08003b28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af02      	add	r7, sp, #8
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	4608      	mov	r0, r1
 8003b32:	4611      	mov	r1, r2
 8003b34:	461a      	mov	r2, r3
 8003b36:	4603      	mov	r3, r0
 8003b38:	817b      	strh	r3, [r7, #10]
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	813b      	strh	r3, [r7, #8]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f8c2 	bl	8003cf8 <I2C_WaitOnFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00d      	beq.n	8003b96 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b88:	d103      	bne.n	8003b92 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b90:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e0aa      	b.n	8003cec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b96:	897b      	ldrh	r3, [r7, #10]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ba4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba8:	6a3a      	ldr	r2, [r7, #32]
 8003baa:	4952      	ldr	r1, [pc, #328]	@ (8003cf4 <I2C_RequestMemoryRead+0x1cc>)
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f91d 	bl	8003dec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e097      	b.n	8003cec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd4:	6a39      	ldr	r1, [r7, #32]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 f9a8 	bl	8003f2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00d      	beq.n	8003bfe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d107      	bne.n	8003bfa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bf8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e076      	b.n	8003cec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bfe:	88fb      	ldrh	r3, [r7, #6]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d105      	bne.n	8003c10 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c04:	893b      	ldrh	r3, [r7, #8]
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	611a      	str	r2, [r3, #16]
 8003c0e:	e021      	b.n	8003c54 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c10:	893b      	ldrh	r3, [r7, #8]
 8003c12:	0a1b      	lsrs	r3, r3, #8
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c20:	6a39      	ldr	r1, [r7, #32]
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 f982 	bl	8003f2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00d      	beq.n	8003c4a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d107      	bne.n	8003c46 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e050      	b.n	8003cec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c4a:	893b      	ldrh	r3, [r7, #8]
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c56:	6a39      	ldr	r1, [r7, #32]
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 f967 	bl	8003f2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00d      	beq.n	8003c80 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d107      	bne.n	8003c7c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e035      	b.n	8003cec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c8e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f82b 	bl	8003cf8 <I2C_WaitOnFlagUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00d      	beq.n	8003cc4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cb6:	d103      	bne.n	8003cc0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cbe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e013      	b.n	8003cec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003cc4:	897b      	ldrh	r3, [r7, #10]
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	f043 0301 	orr.w	r3, r3, #1
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd6:	6a3a      	ldr	r2, [r7, #32]
 8003cd8:	4906      	ldr	r1, [pc, #24]	@ (8003cf4 <I2C_RequestMemoryRead+0x1cc>)
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f886 	bl	8003dec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	00010002 	.word	0x00010002

08003cf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	4613      	mov	r3, r2
 8003d06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d08:	e048      	b.n	8003d9c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d10:	d044      	beq.n	8003d9c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d12:	f7fe fe1b 	bl	800294c <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d302      	bcc.n	8003d28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d139      	bne.n	8003d9c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	0c1b      	lsrs	r3, r3, #16
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d10d      	bne.n	8003d4e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	43da      	mvns	r2, r3
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bf0c      	ite	eq
 8003d44:	2301      	moveq	r3, #1
 8003d46:	2300      	movne	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	e00c      	b.n	8003d68 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	43da      	mvns	r2, r3
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bf0c      	ite	eq
 8003d60:	2301      	moveq	r3, #1
 8003d62:	2300      	movne	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	461a      	mov	r2, r3
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d116      	bne.n	8003d9c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d88:	f043 0220 	orr.w	r2, r3, #32
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e023      	b.n	8003de4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	0c1b      	lsrs	r3, r3, #16
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d10d      	bne.n	8003dc2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	43da      	mvns	r2, r3
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	4013      	ands	r3, r2
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	bf0c      	ite	eq
 8003db8:	2301      	moveq	r3, #1
 8003dba:	2300      	movne	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	e00c      	b.n	8003ddc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	43da      	mvns	r2, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	bf0c      	ite	eq
 8003dd4:	2301      	moveq	r3, #1
 8003dd6:	2300      	movne	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	461a      	mov	r2, r3
 8003ddc:	79fb      	ldrb	r3, [r7, #7]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d093      	beq.n	8003d0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dfa:	e071      	b.n	8003ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e0a:	d123      	bne.n	8003e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e40:	f043 0204 	orr.w	r2, r3, #4
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e067      	b.n	8003f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e5a:	d041      	beq.n	8003ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5c:	f7fe fd76 	bl	800294c <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d302      	bcc.n	8003e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d136      	bne.n	8003ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	0c1b      	lsrs	r3, r3, #16
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d10c      	bne.n	8003e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	43da      	mvns	r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4013      	ands	r3, r2
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	bf14      	ite	ne
 8003e8e:	2301      	movne	r3, #1
 8003e90:	2300      	moveq	r3, #0
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	e00b      	b.n	8003eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	43da      	mvns	r2, r3
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	bf14      	ite	ne
 8003ea8:	2301      	movne	r3, #1
 8003eaa:	2300      	moveq	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d016      	beq.n	8003ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ecc:	f043 0220 	orr.w	r2, r3, #32
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e021      	b.n	8003f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	0c1b      	lsrs	r3, r3, #16
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d10c      	bne.n	8003f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	43da      	mvns	r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	bf14      	ite	ne
 8003efc:	2301      	movne	r3, #1
 8003efe:	2300      	moveq	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	e00b      	b.n	8003f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	43da      	mvns	r2, r3
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	bf14      	ite	ne
 8003f16:	2301      	movne	r3, #1
 8003f18:	2300      	moveq	r3, #0
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f47f af6d 	bne.w	8003dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f38:	e034      	b.n	8003fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 f8e3 	bl	8004106 <I2C_IsAcknowledgeFailed>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e034      	b.n	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f50:	d028      	beq.n	8003fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f52:	f7fe fcfb 	bl	800294c <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d302      	bcc.n	8003f68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d11d      	bne.n	8003fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f72:	2b80      	cmp	r3, #128	@ 0x80
 8003f74:	d016      	beq.n	8003fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f90:	f043 0220 	orr.w	r2, r3, #32
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e007      	b.n	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fae:	2b80      	cmp	r3, #128	@ 0x80
 8003fb0:	d1c3      	bne.n	8003f3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fc8:	e034      	b.n	8004034 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f89b 	bl	8004106 <I2C_IsAcknowledgeFailed>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e034      	b.n	8004044 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fe0:	d028      	beq.n	8004034 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe2:	f7fe fcb3 	bl	800294c <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d302      	bcc.n	8003ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d11d      	bne.n	8004034 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	2b04      	cmp	r3, #4
 8004004:	d016      	beq.n	8004034 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004020:	f043 0220 	orr.w	r2, r3, #32
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e007      	b.n	8004044 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f003 0304 	and.w	r3, r3, #4
 800403e:	2b04      	cmp	r3, #4
 8004040:	d1c3      	bne.n	8003fca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004058:	e049      	b.n	80040ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	f003 0310 	and.w	r3, r3, #16
 8004064:	2b10      	cmp	r3, #16
 8004066:	d119      	bne.n	800409c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0210 	mvn.w	r2, #16
 8004070:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e030      	b.n	80040fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800409c:	f7fe fc56 	bl	800294c <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d302      	bcc.n	80040b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d11d      	bne.n	80040ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040bc:	2b40      	cmp	r3, #64	@ 0x40
 80040be:	d016      	beq.n	80040ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	f043 0220 	orr.w	r2, r3, #32
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e007      	b.n	80040fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f8:	2b40      	cmp	r3, #64	@ 0x40
 80040fa:	d1ae      	bne.n	800405a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004118:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800411c:	d11b      	bne.n	8004156 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004126:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004142:	f043 0204 	orr.w	r2, r3, #4
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b20      	cmp	r3, #32
 8004178:	d129      	bne.n	80041ce <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2224      	movs	r2, #36	@ 0x24
 800417e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0201 	bic.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0210 	bic.w	r2, r2, #16
 80041a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0201 	orr.w	r2, r2, #1
 80041c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	e000      	b.n	80041d0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80041ce:	2302      	movs	r3, #2
  }
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b20      	cmp	r3, #32
 80041f4:	d12a      	bne.n	800424c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2224      	movs	r2, #36	@ 0x24
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0201 	bic.w	r2, r2, #1
 800420c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004214:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004216:	89fb      	ldrh	r3, [r7, #14]
 8004218:	f023 030f 	bic.w	r3, r3, #15
 800421c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	b29a      	uxth	r2, r3
 8004222:	89fb      	ldrh	r3, [r7, #14]
 8004224:	4313      	orrs	r3, r2
 8004226:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	89fa      	ldrh	r2, [r7, #14]
 800422e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0201 	orr.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004248:	2300      	movs	r3, #0
 800424a:	e000      	b.n	800424e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800424c:	2302      	movs	r3, #2
  }
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
	...

0800425c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e0bf      	b.n	80043ee <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fd fccc 	bl	8001c20 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800429e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6999      	ldr	r1, [r3, #24]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042b4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6899      	ldr	r1, [r3, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4b4a      	ldr	r3, [pc, #296]	@ (80043f8 <HAL_LTDC_Init+0x19c>)
 80042d0:	400b      	ands	r3, r1
 80042d2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	041b      	lsls	r3, r3, #16
 80042da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6899      	ldr	r1, [r3, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699a      	ldr	r2, [r3, #24]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68d9      	ldr	r1, [r3, #12]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	4b3e      	ldr	r3, [pc, #248]	@ (80043f8 <HAL_LTDC_Init+0x19c>)
 80042fe:	400b      	ands	r3, r1
 8004300:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	041b      	lsls	r3, r3, #16
 8004308:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68d9      	ldr	r1, [r3, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1a      	ldr	r2, [r3, #32]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6919      	ldr	r1, [r3, #16]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4b33      	ldr	r3, [pc, #204]	@ (80043f8 <HAL_LTDC_Init+0x19c>)
 800432c:	400b      	ands	r3, r1
 800432e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004334:	041b      	lsls	r3, r3, #16
 8004336:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6919      	ldr	r1, [r3, #16]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6959      	ldr	r1, [r3, #20]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	4b27      	ldr	r3, [pc, #156]	@ (80043f8 <HAL_LTDC_Init+0x19c>)
 800435a:	400b      	ands	r3, r1
 800435c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004362:	041b      	lsls	r3, r3, #16
 8004364:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6959      	ldr	r1, [r3, #20]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800438c:	041b      	lsls	r3, r3, #16
 800438e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800439e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0206 	orr.w	r2, r2, #6
 80043ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699a      	ldr	r2, [r3, #24]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	f000f800 	.word	0xf000f800

080043fc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80043fc:	b5b0      	push	{r4, r5, r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_LTDC_ConfigLayer+0x1a>
 8004412:	2302      	movs	r3, #2
 8004414:	e02c      	b.n	8004470 <HAL_LTDC_ConfigLayer+0x74>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2202      	movs	r2, #2
 8004422:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2134      	movs	r1, #52	@ 0x34
 800442c:	fb01 f303 	mul.w	r3, r1, r3
 8004430:	4413      	add	r3, r2
 8004432:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	4614      	mov	r4, r2
 800443a:	461d      	mov	r5, r3
 800443c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800443e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004448:	682b      	ldr	r3, [r5, #0]
 800444a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	68b9      	ldr	r1, [r7, #8]
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f811 	bl	8004478 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2201      	movs	r2, #1
 800445c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bdb0      	pop	{r4, r5, r7, pc}

08004478 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004478:	b480      	push	{r7}
 800447a:	b089      	sub	sp, #36	@ 0x24
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	0c1b      	lsrs	r3, r3, #16
 8004490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004494:	4413      	add	r3, r2
 8004496:	041b      	lsls	r3, r3, #16
 8004498:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	01db      	lsls	r3, r3, #7
 80044a4:	4413      	add	r3, r2
 80044a6:	3384      	adds	r3, #132	@ 0x84
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	4611      	mov	r1, r2
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	01d2      	lsls	r2, r2, #7
 80044b4:	440a      	add	r2, r1
 80044b6:	3284      	adds	r2, #132	@ 0x84
 80044b8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80044bc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	0c1b      	lsrs	r3, r3, #16
 80044ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044ce:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80044d0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4619      	mov	r1, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	01db      	lsls	r3, r3, #7
 80044dc:	440b      	add	r3, r1
 80044de:	3384      	adds	r3, #132	@ 0x84
 80044e0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044e6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044f6:	4413      	add	r3, r2
 80044f8:	041b      	lsls	r3, r3, #16
 80044fa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	461a      	mov	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	01db      	lsls	r3, r3, #7
 8004506:	4413      	add	r3, r2
 8004508:	3384      	adds	r3, #132	@ 0x84
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	6812      	ldr	r2, [r2, #0]
 8004510:	4611      	mov	r1, r2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	01d2      	lsls	r2, r2, #7
 8004516:	440a      	add	r2, r1
 8004518:	3284      	adds	r2, #132	@ 0x84
 800451a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800451e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800452e:	4413      	add	r3, r2
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4619      	mov	r1, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	01db      	lsls	r3, r3, #7
 800453c:	440b      	add	r3, r1
 800453e:	3384      	adds	r3, #132	@ 0x84
 8004540:	4619      	mov	r1, r3
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	4313      	orrs	r3, r2
 8004546:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	461a      	mov	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	01db      	lsls	r3, r3, #7
 8004552:	4413      	add	r3, r2
 8004554:	3384      	adds	r3, #132	@ 0x84
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	4611      	mov	r1, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	01d2      	lsls	r2, r2, #7
 8004562:	440a      	add	r2, r1
 8004564:	3284      	adds	r2, #132	@ 0x84
 8004566:	f023 0307 	bic.w	r3, r3, #7
 800456a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	01db      	lsls	r3, r3, #7
 8004576:	4413      	add	r3, r2
 8004578:	3384      	adds	r3, #132	@ 0x84
 800457a:	461a      	mov	r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004588:	021b      	lsls	r3, r3, #8
 800458a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004592:	041b      	lsls	r3, r3, #16
 8004594:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	061b      	lsls	r3, r3, #24
 800459c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	01db      	lsls	r3, r3, #7
 80045a8:	4413      	add	r3, r2
 80045aa:	3384      	adds	r3, #132	@ 0x84
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	01db      	lsls	r3, r3, #7
 80045b8:	4413      	add	r3, r2
 80045ba:	3384      	adds	r3, #132	@ 0x84
 80045bc:	461a      	mov	r2, r3
 80045be:	2300      	movs	r3, #0
 80045c0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80045c8:	461a      	mov	r2, r3
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	431a      	orrs	r2, r3
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	431a      	orrs	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4619      	mov	r1, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	01db      	lsls	r3, r3, #7
 80045dc:	440b      	add	r3, r1
 80045de:	3384      	adds	r3, #132	@ 0x84
 80045e0:	4619      	mov	r1, r3
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	461a      	mov	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	01db      	lsls	r3, r3, #7
 80045f2:	4413      	add	r3, r2
 80045f4:	3384      	adds	r3, #132	@ 0x84
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	6812      	ldr	r2, [r2, #0]
 80045fc:	4611      	mov	r1, r2
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	01d2      	lsls	r2, r2, #7
 8004602:	440a      	add	r2, r1
 8004604:	3284      	adds	r2, #132	@ 0x84
 8004606:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800460a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	461a      	mov	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	01db      	lsls	r3, r3, #7
 8004616:	4413      	add	r3, r2
 8004618:	3384      	adds	r3, #132	@ 0x84
 800461a:	461a      	mov	r2, r3
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	01db      	lsls	r3, r3, #7
 800462c:	4413      	add	r3, r2
 800462e:	3384      	adds	r3, #132	@ 0x84
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	6812      	ldr	r2, [r2, #0]
 8004636:	4611      	mov	r1, r2
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	01d2      	lsls	r2, r2, #7
 800463c:	440a      	add	r2, r1
 800463e:	3284      	adds	r2, #132	@ 0x84
 8004640:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004644:	f023 0307 	bic.w	r3, r3, #7
 8004648:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	69da      	ldr	r2, [r3, #28]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	68f9      	ldr	r1, [r7, #12]
 8004654:	6809      	ldr	r1, [r1, #0]
 8004656:	4608      	mov	r0, r1
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	01c9      	lsls	r1, r1, #7
 800465c:	4401      	add	r1, r0
 800465e:	3184      	adds	r1, #132	@ 0x84
 8004660:	4313      	orrs	r3, r2
 8004662:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	01db      	lsls	r3, r3, #7
 800466e:	4413      	add	r3, r2
 8004670:	3384      	adds	r3, #132	@ 0x84
 8004672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	01db      	lsls	r3, r3, #7
 800467e:	4413      	add	r3, r2
 8004680:	3384      	adds	r3, #132	@ 0x84
 8004682:	461a      	mov	r2, r3
 8004684:	2300      	movs	r3, #0
 8004686:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	01db      	lsls	r3, r3, #7
 8004692:	4413      	add	r3, r2
 8004694:	3384      	adds	r3, #132	@ 0x84
 8004696:	461a      	mov	r2, r3
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d102      	bne.n	80046ac <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80046a6:	2304      	movs	r3, #4
 80046a8:	61fb      	str	r3, [r7, #28]
 80046aa:	e01b      	b.n	80046e4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d102      	bne.n	80046ba <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80046b4:	2303      	movs	r3, #3
 80046b6:	61fb      	str	r3, [r7, #28]
 80046b8:	e014      	b.n	80046e4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d00b      	beq.n	80046da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d007      	beq.n	80046da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d003      	beq.n	80046da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80046d6:	2b07      	cmp	r3, #7
 80046d8:	d102      	bne.n	80046e0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80046da:	2302      	movs	r3, #2
 80046dc:	61fb      	str	r3, [r7, #28]
 80046de:	e001      	b.n	80046e4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80046e0:	2301      	movs	r3, #1
 80046e2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	461a      	mov	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	01db      	lsls	r3, r3, #7
 80046ee:	4413      	add	r3, r2
 80046f0:	3384      	adds	r3, #132	@ 0x84
 80046f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	4611      	mov	r1, r2
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	01d2      	lsls	r2, r2, #7
 80046fe:	440a      	add	r2, r1
 8004700:	3284      	adds	r2, #132	@ 0x84
 8004702:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004706:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800470c:	69fa      	ldr	r2, [r7, #28]
 800470e:	fb02 f303 	mul.w	r3, r2, r3
 8004712:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	6859      	ldr	r1, [r3, #4]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	1acb      	subs	r3, r1, r3
 800471e:	69f9      	ldr	r1, [r7, #28]
 8004720:	fb01 f303 	mul.w	r3, r1, r3
 8004724:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004726:	68f9      	ldr	r1, [r7, #12]
 8004728:	6809      	ldr	r1, [r1, #0]
 800472a:	4608      	mov	r0, r1
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	01c9      	lsls	r1, r1, #7
 8004730:	4401      	add	r1, r0
 8004732:	3184      	adds	r1, #132	@ 0x84
 8004734:	4313      	orrs	r3, r2
 8004736:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	01db      	lsls	r3, r3, #7
 8004742:	4413      	add	r3, r2
 8004744:	3384      	adds	r3, #132	@ 0x84
 8004746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	4611      	mov	r1, r2
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	01d2      	lsls	r2, r2, #7
 8004752:	440a      	add	r2, r1
 8004754:	3284      	adds	r2, #132	@ 0x84
 8004756:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800475a:	f023 0307 	bic.w	r3, r3, #7
 800475e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	01db      	lsls	r3, r3, #7
 800476a:	4413      	add	r3, r2
 800476c:	3384      	adds	r3, #132	@ 0x84
 800476e:	461a      	mov	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004774:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	01db      	lsls	r3, r3, #7
 8004780:	4413      	add	r3, r2
 8004782:	3384      	adds	r3, #132	@ 0x84
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	4611      	mov	r1, r2
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	01d2      	lsls	r2, r2, #7
 8004790:	440a      	add	r2, r1
 8004792:	3284      	adds	r2, #132	@ 0x84
 8004794:	f043 0301 	orr.w	r3, r3, #1
 8004798:	6013      	str	r3, [r2, #0]
}
 800479a:	bf00      	nop
 800479c:	3724      	adds	r7, #36	@ 0x24
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
	...

080047a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e267      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d075      	beq.n	80048b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80047c6:	4b88      	ldr	r3, [pc, #544]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 030c 	and.w	r3, r3, #12
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d00c      	beq.n	80047ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047d2:	4b85      	ldr	r3, [pc, #532]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80047da:	2b08      	cmp	r3, #8
 80047dc:	d112      	bne.n	8004804 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047de:	4b82      	ldr	r3, [pc, #520]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047ea:	d10b      	bne.n	8004804 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ec:	4b7e      	ldr	r3, [pc, #504]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d05b      	beq.n	80048b0 <HAL_RCC_OscConfig+0x108>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d157      	bne.n	80048b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e242      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800480c:	d106      	bne.n	800481c <HAL_RCC_OscConfig+0x74>
 800480e:	4b76      	ldr	r3, [pc, #472]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a75      	ldr	r2, [pc, #468]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	e01d      	b.n	8004858 <HAL_RCC_OscConfig+0xb0>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004824:	d10c      	bne.n	8004840 <HAL_RCC_OscConfig+0x98>
 8004826:	4b70      	ldr	r3, [pc, #448]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a6f      	ldr	r2, [pc, #444]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 800482c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	4b6d      	ldr	r3, [pc, #436]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a6c      	ldr	r2, [pc, #432]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	e00b      	b.n	8004858 <HAL_RCC_OscConfig+0xb0>
 8004840:	4b69      	ldr	r3, [pc, #420]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a68      	ldr	r2, [pc, #416]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004846:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	4b66      	ldr	r3, [pc, #408]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a65      	ldr	r2, [pc, #404]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d013      	beq.n	8004888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004860:	f7fe f874 	bl	800294c <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004868:	f7fe f870 	bl	800294c <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b64      	cmp	r3, #100	@ 0x64
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e207      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800487a:	4b5b      	ldr	r3, [pc, #364]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0xc0>
 8004886:	e014      	b.n	80048b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004888:	f7fe f860 	bl	800294c <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004890:	f7fe f85c 	bl	800294c <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b64      	cmp	r3, #100	@ 0x64
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e1f3      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048a2:	4b51      	ldr	r3, [pc, #324]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f0      	bne.n	8004890 <HAL_RCC_OscConfig+0xe8>
 80048ae:	e000      	b.n	80048b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d063      	beq.n	8004986 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80048be:	4b4a      	ldr	r3, [pc, #296]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 030c 	and.w	r3, r3, #12
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00b      	beq.n	80048e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ca:	4b47      	ldr	r3, [pc, #284]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d11c      	bne.n	8004910 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048d6:	4b44      	ldr	r3, [pc, #272]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d116      	bne.n	8004910 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048e2:	4b41      	ldr	r3, [pc, #260]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d005      	beq.n	80048fa <HAL_RCC_OscConfig+0x152>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d001      	beq.n	80048fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e1c7      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048fa:	4b3b      	ldr	r3, [pc, #236]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	4937      	ldr	r1, [pc, #220]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 800490a:	4313      	orrs	r3, r2
 800490c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800490e:	e03a      	b.n	8004986 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d020      	beq.n	800495a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004918:	4b34      	ldr	r3, [pc, #208]	@ (80049ec <HAL_RCC_OscConfig+0x244>)
 800491a:	2201      	movs	r2, #1
 800491c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491e:	f7fe f815 	bl	800294c <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004924:	e008      	b.n	8004938 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004926:	f7fe f811 	bl	800294c <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e1a8      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004938:	4b2b      	ldr	r3, [pc, #172]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0f0      	beq.n	8004926 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004944:	4b28      	ldr	r3, [pc, #160]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	4925      	ldr	r1, [pc, #148]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004954:	4313      	orrs	r3, r2
 8004956:	600b      	str	r3, [r1, #0]
 8004958:	e015      	b.n	8004986 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800495a:	4b24      	ldr	r3, [pc, #144]	@ (80049ec <HAL_RCC_OscConfig+0x244>)
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004960:	f7fd fff4 	bl	800294c <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004968:	f7fd fff0 	bl	800294c <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e187      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800497a:	4b1b      	ldr	r3, [pc, #108]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f0      	bne.n	8004968 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d036      	beq.n	8004a00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d016      	beq.n	80049c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800499a:	4b15      	ldr	r3, [pc, #84]	@ (80049f0 <HAL_RCC_OscConfig+0x248>)
 800499c:	2201      	movs	r2, #1
 800499e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a0:	f7fd ffd4 	bl	800294c <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049a8:	f7fd ffd0 	bl	800294c <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e167      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ba:	4b0b      	ldr	r3, [pc, #44]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 80049bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0f0      	beq.n	80049a8 <HAL_RCC_OscConfig+0x200>
 80049c6:	e01b      	b.n	8004a00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049c8:	4b09      	ldr	r3, [pc, #36]	@ (80049f0 <HAL_RCC_OscConfig+0x248>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ce:	f7fd ffbd 	bl	800294c <HAL_GetTick>
 80049d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049d4:	e00e      	b.n	80049f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049d6:	f7fd ffb9 	bl	800294c <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d907      	bls.n	80049f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e150      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
 80049e8:	40023800 	.word	0x40023800
 80049ec:	42470000 	.word	0x42470000
 80049f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049f4:	4b88      	ldr	r3, [pc, #544]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 80049f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1ea      	bne.n	80049d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 8097 	beq.w	8004b3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a12:	4b81      	ldr	r3, [pc, #516]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10f      	bne.n	8004a3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60bb      	str	r3, [r7, #8]
 8004a22:	4b7d      	ldr	r3, [pc, #500]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a26:	4a7c      	ldr	r2, [pc, #496]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a2e:	4b7a      	ldr	r3, [pc, #488]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a36:	60bb      	str	r3, [r7, #8]
 8004a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a3e:	4b77      	ldr	r3, [pc, #476]	@ (8004c1c <HAL_RCC_OscConfig+0x474>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d118      	bne.n	8004a7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a4a:	4b74      	ldr	r3, [pc, #464]	@ (8004c1c <HAL_RCC_OscConfig+0x474>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a73      	ldr	r2, [pc, #460]	@ (8004c1c <HAL_RCC_OscConfig+0x474>)
 8004a50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a56:	f7fd ff79 	bl	800294c <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a5e:	f7fd ff75 	bl	800294c <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e10c      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a70:	4b6a      	ldr	r3, [pc, #424]	@ (8004c1c <HAL_RCC_OscConfig+0x474>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0f0      	beq.n	8004a5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d106      	bne.n	8004a92 <HAL_RCC_OscConfig+0x2ea>
 8004a84:	4b64      	ldr	r3, [pc, #400]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a88:	4a63      	ldr	r2, [pc, #396]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a8a:	f043 0301 	orr.w	r3, r3, #1
 8004a8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a90:	e01c      	b.n	8004acc <HAL_RCC_OscConfig+0x324>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	2b05      	cmp	r3, #5
 8004a98:	d10c      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x30c>
 8004a9a:	4b5f      	ldr	r3, [pc, #380]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a9e:	4a5e      	ldr	r2, [pc, #376]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004aa0:	f043 0304 	orr.w	r3, r3, #4
 8004aa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aa6:	4b5c      	ldr	r3, [pc, #368]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aaa:	4a5b      	ldr	r2, [pc, #364]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004aac:	f043 0301 	orr.w	r3, r3, #1
 8004ab0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ab2:	e00b      	b.n	8004acc <HAL_RCC_OscConfig+0x324>
 8004ab4:	4b58      	ldr	r3, [pc, #352]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab8:	4a57      	ldr	r2, [pc, #348]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004aba:	f023 0301 	bic.w	r3, r3, #1
 8004abe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ac0:	4b55      	ldr	r3, [pc, #340]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac4:	4a54      	ldr	r2, [pc, #336]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004ac6:	f023 0304 	bic.w	r3, r3, #4
 8004aca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d015      	beq.n	8004b00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad4:	f7fd ff3a 	bl	800294c <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ada:	e00a      	b.n	8004af2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004adc:	f7fd ff36 	bl	800294c <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e0cb      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af2:	4b49      	ldr	r3, [pc, #292]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0ee      	beq.n	8004adc <HAL_RCC_OscConfig+0x334>
 8004afe:	e014      	b.n	8004b2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b00:	f7fd ff24 	bl	800294c <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b06:	e00a      	b.n	8004b1e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b08:	f7fd ff20 	bl	800294c <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e0b5      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b1e:	4b3e      	ldr	r3, [pc, #248]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1ee      	bne.n	8004b08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b2a:	7dfb      	ldrb	r3, [r7, #23]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d105      	bne.n	8004b3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b30:	4b39      	ldr	r3, [pc, #228]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b34:	4a38      	ldr	r2, [pc, #224]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004b36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 80a1 	beq.w	8004c88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b46:	4b34      	ldr	r3, [pc, #208]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 030c 	and.w	r3, r3, #12
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d05c      	beq.n	8004c0c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d141      	bne.n	8004bde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5a:	4b31      	ldr	r3, [pc, #196]	@ (8004c20 <HAL_RCC_OscConfig+0x478>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b60:	f7fd fef4 	bl	800294c <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b68:	f7fd fef0 	bl	800294c <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e087      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b7a:	4b27      	ldr	r3, [pc, #156]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69da      	ldr	r2, [r3, #28]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b94:	019b      	lsls	r3, r3, #6
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9c:	085b      	lsrs	r3, r3, #1
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	041b      	lsls	r3, r3, #16
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba8:	061b      	lsls	r3, r3, #24
 8004baa:	491b      	ldr	r1, [pc, #108]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8004c20 <HAL_RCC_OscConfig+0x478>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb6:	f7fd fec9 	bl	800294c <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bbe:	f7fd fec5 	bl	800294c <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e05c      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd0:	4b11      	ldr	r3, [pc, #68]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0f0      	beq.n	8004bbe <HAL_RCC_OscConfig+0x416>
 8004bdc:	e054      	b.n	8004c88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bde:	4b10      	ldr	r3, [pc, #64]	@ (8004c20 <HAL_RCC_OscConfig+0x478>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be4:	f7fd feb2 	bl	800294c <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bec:	f7fd feae 	bl	800294c <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e045      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfe:	4b06      	ldr	r3, [pc, #24]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCC_OscConfig+0x444>
 8004c0a:	e03d      	b.n	8004c88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d107      	bne.n	8004c24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e038      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	40007000 	.word	0x40007000
 8004c20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c24:	4b1b      	ldr	r3, [pc, #108]	@ (8004c94 <HAL_RCC_OscConfig+0x4ec>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d028      	beq.n	8004c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d121      	bne.n	8004c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d11a      	bne.n	8004c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c54:	4013      	ands	r3, r2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d111      	bne.n	8004c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6a:	085b      	lsrs	r3, r3, #1
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d107      	bne.n	8004c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d001      	beq.n	8004c88 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40023800 	.word	0x40023800

08004c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0cc      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cac:	4b68      	ldr	r3, [pc, #416]	@ (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d90c      	bls.n	8004cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cba:	4b65      	ldr	r3, [pc, #404]	@ (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc2:	4b63      	ldr	r3, [pc, #396]	@ (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e0b8      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d020      	beq.n	8004d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cec:	4b59      	ldr	r3, [pc, #356]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	4a58      	ldr	r2, [pc, #352]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004cf6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0308 	and.w	r3, r3, #8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d04:	4b53      	ldr	r3, [pc, #332]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	4a52      	ldr	r2, [pc, #328]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d10:	4b50      	ldr	r3, [pc, #320]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	494d      	ldr	r1, [pc, #308]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d044      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d107      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d36:	4b47      	ldr	r3, [pc, #284]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d119      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e07f      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d003      	beq.n	8004d56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	d107      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d56:	4b3f      	ldr	r3, [pc, #252]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d109      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e06f      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d66:	4b3b      	ldr	r3, [pc, #236]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e067      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d76:	4b37      	ldr	r3, [pc, #220]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f023 0203 	bic.w	r2, r3, #3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	4934      	ldr	r1, [pc, #208]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d88:	f7fd fde0 	bl	800294c <HAL_GetTick>
 8004d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d8e:	e00a      	b.n	8004da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d90:	f7fd fddc 	bl	800294c <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e04f      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da6:	4b2b      	ldr	r3, [pc, #172]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 020c 	and.w	r2, r3, #12
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d1eb      	bne.n	8004d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004db8:	4b25      	ldr	r3, [pc, #148]	@ (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 030f 	and.w	r3, r3, #15
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d20c      	bcs.n	8004de0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc6:	4b22      	ldr	r3, [pc, #136]	@ (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dce:	4b20      	ldr	r3, [pc, #128]	@ (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d001      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e032      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d008      	beq.n	8004dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dec:	4b19      	ldr	r3, [pc, #100]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	4916      	ldr	r1, [pc, #88]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d009      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e0a:	4b12      	ldr	r3, [pc, #72]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	490e      	ldr	r1, [pc, #56]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e1e:	f000 f821 	bl	8004e64 <HAL_RCC_GetSysClockFreq>
 8004e22:	4602      	mov	r2, r0
 8004e24:	4b0b      	ldr	r3, [pc, #44]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	091b      	lsrs	r3, r3, #4
 8004e2a:	f003 030f 	and.w	r3, r3, #15
 8004e2e:	490a      	ldr	r1, [pc, #40]	@ (8004e58 <HAL_RCC_ClockConfig+0x1c0>)
 8004e30:	5ccb      	ldrb	r3, [r1, r3]
 8004e32:	fa22 f303 	lsr.w	r3, r2, r3
 8004e36:	4a09      	ldr	r2, [pc, #36]	@ (8004e5c <HAL_RCC_ClockConfig+0x1c4>)
 8004e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004e3a:	4b09      	ldr	r3, [pc, #36]	@ (8004e60 <HAL_RCC_ClockConfig+0x1c8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fd fd40 	bl	80028c4 <HAL_InitTick>

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40023c00 	.word	0x40023c00
 8004e54:	40023800 	.word	0x40023800
 8004e58:	08008114 	.word	0x08008114
 8004e5c:	20000010 	.word	0x20000010
 8004e60:	20000014 	.word	0x20000014

08004e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e68:	b094      	sub	sp, #80	@ 0x50
 8004e6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e7c:	4b79      	ldr	r3, [pc, #484]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 030c 	and.w	r3, r3, #12
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d00d      	beq.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	f200 80e1 	bhi.w	8005050 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <HAL_RCC_GetSysClockFreq+0x34>
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d003      	beq.n	8004e9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e96:	e0db      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e98:	4b73      	ldr	r3, [pc, #460]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e9c:	e0db      	b.n	8005056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e9e:	4b73      	ldr	r3, [pc, #460]	@ (800506c <HAL_RCC_GetSysClockFreq+0x208>)
 8004ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ea2:	e0d8      	b.n	8005056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ea4:	4b6f      	ldr	r3, [pc, #444]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004eac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eae:	4b6d      	ldr	r3, [pc, #436]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d063      	beq.n	8004f82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eba:	4b6a      	ldr	r3, [pc, #424]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	099b      	lsrs	r3, r3, #6
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ec4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ecc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ece:	2300      	movs	r3, #0
 8004ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ed2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ed6:	4622      	mov	r2, r4
 8004ed8:	462b      	mov	r3, r5
 8004eda:	f04f 0000 	mov.w	r0, #0
 8004ede:	f04f 0100 	mov.w	r1, #0
 8004ee2:	0159      	lsls	r1, r3, #5
 8004ee4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ee8:	0150      	lsls	r0, r2, #5
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	4621      	mov	r1, r4
 8004ef0:	1a51      	subs	r1, r2, r1
 8004ef2:	6139      	str	r1, [r7, #16]
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f08:	4659      	mov	r1, fp
 8004f0a:	018b      	lsls	r3, r1, #6
 8004f0c:	4651      	mov	r1, sl
 8004f0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f12:	4651      	mov	r1, sl
 8004f14:	018a      	lsls	r2, r1, #6
 8004f16:	4651      	mov	r1, sl
 8004f18:	ebb2 0801 	subs.w	r8, r2, r1
 8004f1c:	4659      	mov	r1, fp
 8004f1e:	eb63 0901 	sbc.w	r9, r3, r1
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	f04f 0300 	mov.w	r3, #0
 8004f2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f36:	4690      	mov	r8, r2
 8004f38:	4699      	mov	r9, r3
 8004f3a:	4623      	mov	r3, r4
 8004f3c:	eb18 0303 	adds.w	r3, r8, r3
 8004f40:	60bb      	str	r3, [r7, #8]
 8004f42:	462b      	mov	r3, r5
 8004f44:	eb49 0303 	adc.w	r3, r9, r3
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	f04f 0300 	mov.w	r3, #0
 8004f52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f56:	4629      	mov	r1, r5
 8004f58:	024b      	lsls	r3, r1, #9
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f60:	4621      	mov	r1, r4
 8004f62:	024a      	lsls	r2, r1, #9
 8004f64:	4610      	mov	r0, r2
 8004f66:	4619      	mov	r1, r3
 8004f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f74:	f7fb f98c 	bl	8000290 <__aeabi_uldivmod>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f80:	e058      	b.n	8005034 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f82:	4b38      	ldr	r3, [pc, #224]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	099b      	lsrs	r3, r3, #6
 8004f88:	2200      	movs	r2, #0
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f92:	623b      	str	r3, [r7, #32]
 8004f94:	2300      	movs	r3, #0
 8004f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f9c:	4642      	mov	r2, r8
 8004f9e:	464b      	mov	r3, r9
 8004fa0:	f04f 0000 	mov.w	r0, #0
 8004fa4:	f04f 0100 	mov.w	r1, #0
 8004fa8:	0159      	lsls	r1, r3, #5
 8004faa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fae:	0150      	lsls	r0, r2, #5
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4641      	mov	r1, r8
 8004fb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fba:	4649      	mov	r1, r9
 8004fbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fd4:	ebb2 040a 	subs.w	r4, r2, sl
 8004fd8:	eb63 050b 	sbc.w	r5, r3, fp
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	00eb      	lsls	r3, r5, #3
 8004fe6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fea:	00e2      	lsls	r2, r4, #3
 8004fec:	4614      	mov	r4, r2
 8004fee:	461d      	mov	r5, r3
 8004ff0:	4643      	mov	r3, r8
 8004ff2:	18e3      	adds	r3, r4, r3
 8004ff4:	603b      	str	r3, [r7, #0]
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	eb45 0303 	adc.w	r3, r5, r3
 8004ffc:	607b      	str	r3, [r7, #4]
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	e9d7 4500 	ldrd	r4, r5, [r7]
 800500a:	4629      	mov	r1, r5
 800500c:	028b      	lsls	r3, r1, #10
 800500e:	4621      	mov	r1, r4
 8005010:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005014:	4621      	mov	r1, r4
 8005016:	028a      	lsls	r2, r1, #10
 8005018:	4610      	mov	r0, r2
 800501a:	4619      	mov	r1, r3
 800501c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800501e:	2200      	movs	r2, #0
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	61fa      	str	r2, [r7, #28]
 8005024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005028:	f7fb f932 	bl	8000290 <__aeabi_uldivmod>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4613      	mov	r3, r2
 8005032:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005034:	4b0b      	ldr	r3, [pc, #44]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	0c1b      	lsrs	r3, r3, #16
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	3301      	adds	r3, #1
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005044:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005048:	fbb2 f3f3 	udiv	r3, r2, r3
 800504c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800504e:	e002      	b.n	8005056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005050:	4b05      	ldr	r3, [pc, #20]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x204>)
 8005052:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005056:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005058:	4618      	mov	r0, r3
 800505a:	3750      	adds	r7, #80	@ 0x50
 800505c:	46bd      	mov	sp, r7
 800505e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005062:	bf00      	nop
 8005064:	40023800 	.word	0x40023800
 8005068:	00f42400 	.word	0x00f42400
 800506c:	007a1200 	.word	0x007a1200

08005070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005074:	4b03      	ldr	r3, [pc, #12]	@ (8005084 <HAL_RCC_GetHCLKFreq+0x14>)
 8005076:	681b      	ldr	r3, [r3, #0]
}
 8005078:	4618      	mov	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	20000010 	.word	0x20000010

08005088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800508c:	f7ff fff0 	bl	8005070 <HAL_RCC_GetHCLKFreq>
 8005090:	4602      	mov	r2, r0
 8005092:	4b05      	ldr	r3, [pc, #20]	@ (80050a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	0a9b      	lsrs	r3, r3, #10
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	4903      	ldr	r1, [pc, #12]	@ (80050ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800509e:	5ccb      	ldrb	r3, [r1, r3]
 80050a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	40023800 	.word	0x40023800
 80050ac:	08008124 	.word	0x08008124

080050b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10b      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d105      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d075      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050e4:	4b91      	ldr	r3, [pc, #580]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050ea:	f7fd fc2f 	bl	800294c <HAL_GetTick>
 80050ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050f0:	e008      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050f2:	f7fd fc2b 	bl	800294c <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d901      	bls.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e189      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005104:	4b8a      	ldr	r3, [pc, #552]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1f0      	bne.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	d009      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	019a      	lsls	r2, r3, #6
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	071b      	lsls	r3, r3, #28
 8005128:	4981      	ldr	r1, [pc, #516]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01f      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800513c:	4b7c      	ldr	r3, [pc, #496]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800513e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005142:	0f1b      	lsrs	r3, r3, #28
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	019a      	lsls	r2, r3, #6
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	061b      	lsls	r3, r3, #24
 8005156:	431a      	orrs	r2, r3
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	071b      	lsls	r3, r3, #28
 800515c:	4974      	ldr	r1, [pc, #464]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005164:	4b72      	ldr	r3, [pc, #456]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005166:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800516a:	f023 021f 	bic.w	r2, r3, #31
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	3b01      	subs	r3, #1
 8005174:	496e      	ldr	r1, [pc, #440]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00d      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	019a      	lsls	r2, r3, #6
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	061b      	lsls	r3, r3, #24
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	071b      	lsls	r3, r3, #28
 800519c:	4964      	ldr	r1, [pc, #400]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051a4:	4b61      	ldr	r3, [pc, #388]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80051a6:	2201      	movs	r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051aa:	f7fd fbcf 	bl	800294c <HAL_GetTick>
 80051ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051b0:	e008      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051b2:	f7fd fbcb 	bl	800294c <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d901      	bls.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e129      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051c4:	4b5a      	ldr	r3, [pc, #360]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0f0      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d105      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d079      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80051e8:	4b52      	ldr	r3, [pc, #328]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051ee:	f7fd fbad 	bl	800294c <HAL_GetTick>
 80051f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051f4:	e008      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051f6:	f7fd fba9 	bl	800294c <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e107      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005208:	4b49      	ldr	r3, [pc, #292]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005214:	d0ef      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0304 	and.w	r3, r3, #4
 800521e:	2b00      	cmp	r3, #0
 8005220:	d020      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005222:	4b43      	ldr	r3, [pc, #268]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005228:	0f1b      	lsrs	r3, r3, #28
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	019a      	lsls	r2, r3, #6
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	061b      	lsls	r3, r3, #24
 800523c:	431a      	orrs	r2, r3
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	071b      	lsls	r3, r3, #28
 8005242:	493b      	ldr	r1, [pc, #236]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005244:	4313      	orrs	r3, r2
 8005246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800524a:	4b39      	ldr	r3, [pc, #228]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800524c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005250:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	3b01      	subs	r3, #1
 800525a:	021b      	lsls	r3, r3, #8
 800525c:	4934      	ldr	r1, [pc, #208]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800525e:	4313      	orrs	r3, r2
 8005260:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0308 	and.w	r3, r3, #8
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01e      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005270:	4b2f      	ldr	r3, [pc, #188]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005276:	0e1b      	lsrs	r3, r3, #24
 8005278:	f003 030f 	and.w	r3, r3, #15
 800527c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	019a      	lsls	r2, r3, #6
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	061b      	lsls	r3, r3, #24
 8005288:	431a      	orrs	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	071b      	lsls	r3, r3, #28
 8005290:	4927      	ldr	r1, [pc, #156]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005292:	4313      	orrs	r3, r2
 8005294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005298:	4b25      	ldr	r3, [pc, #148]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800529a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800529e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a6:	4922      	ldr	r1, [pc, #136]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052ae:	4b21      	ldr	r3, [pc, #132]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80052b0:	2201      	movs	r2, #1
 80052b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052b4:	f7fd fb4a 	bl	800294c <HAL_GetTick>
 80052b8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052ba:	e008      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052bc:	f7fd fb46 	bl	800294c <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e0a4      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052ce:	4b18      	ldr	r3, [pc, #96]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052da:	d1ef      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0320 	and.w	r3, r3, #32
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 808b 	beq.w	8005400 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052ea:	2300      	movs	r3, #0
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	4b10      	ldr	r3, [pc, #64]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f2:	4a0f      	ldr	r2, [pc, #60]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80052fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005306:	4b0c      	ldr	r3, [pc, #48]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a0b      	ldr	r2, [pc, #44]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800530c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005310:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005312:	f7fd fb1b 	bl	800294c <HAL_GetTick>
 8005316:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005318:	e010      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800531a:	f7fd fb17 	bl	800294c <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d909      	bls.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e075      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800532c:	42470068 	.word	0x42470068
 8005330:	40023800 	.word	0x40023800
 8005334:	42470070 	.word	0x42470070
 8005338:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800533c:	4b38      	ldr	r3, [pc, #224]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0e8      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005348:	4b36      	ldr	r3, [pc, #216]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800534a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800534c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005350:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d02f      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	429a      	cmp	r2, r3
 8005364:	d028      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005366:	4b2f      	ldr	r3, [pc, #188]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800536a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800536e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005370:	4b2d      	ldr	r3, [pc, #180]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005372:	2201      	movs	r2, #1
 8005374:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005376:	4b2c      	ldr	r3, [pc, #176]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800537c:	4a29      	ldr	r2, [pc, #164]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005382:	4b28      	ldr	r3, [pc, #160]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b01      	cmp	r3, #1
 800538c:	d114      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800538e:	f7fd fadd 	bl	800294c <HAL_GetTick>
 8005392:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005394:	e00a      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005396:	f7fd fad9 	bl	800294c <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d901      	bls.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e035      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d0ee      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053c4:	d10d      	bne.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80053c6:	4b17      	ldr	r3, [pc, #92]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80053d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053da:	4912      	ldr	r1, [pc, #72]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	608b      	str	r3, [r1, #8]
 80053e0:	e005      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80053e2:	4b10      	ldr	r3, [pc, #64]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	4a0f      	ldr	r2, [pc, #60]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053e8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80053ec:	6093      	str	r3, [r2, #8]
 80053ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053f0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053fa:	490a      	ldr	r1, [pc, #40]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0310 	and.w	r3, r3, #16
 8005408:	2b00      	cmp	r3, #0
 800540a:	d004      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005412:	4b06      	ldr	r3, [pc, #24]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005414:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40007000 	.word	0x40007000
 8005424:	40023800 	.word	0x40023800
 8005428:	42470e40 	.word	0x42470e40
 800542c:	424711e0 	.word	0x424711e0

08005430 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e01c      	b.n	800547c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	795b      	ldrb	r3, [r3, #5]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d105      	bne.n	8005458 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fc fd0c 	bl	8001e70 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f042 0204 	orr.w	r2, r2, #4
 800546c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e07b      	b.n	800558e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549a:	2b00      	cmp	r3, #0
 800549c:	d108      	bne.n	80054b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054a6:	d009      	beq.n	80054bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	61da      	str	r2, [r3, #28]
 80054ae:	e005      	b.n	80054bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d106      	bne.n	80054dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7fc fcec 	bl	8001eb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005504:	431a      	orrs	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005540:	ea42 0103 	orr.w	r1, r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005548:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	0c1b      	lsrs	r3, r3, #16
 800555a:	f003 0104 	and.w	r1, r3, #4
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005562:	f003 0210 	and.w	r2, r3, #16
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	69da      	ldr	r2, [r3, #28]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800557c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b082      	sub	sp, #8
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e01a      	b.n	80055de <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055be:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7fc fcbf 	bl	8001f44 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b088      	sub	sp, #32
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	603b      	str	r3, [r7, #0]
 80055f2:	4613      	mov	r3, r2
 80055f4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055f6:	f7fd f9a9 	bl	800294c <HAL_GetTick>
 80055fa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b01      	cmp	r3, #1
 800560a:	d001      	beq.n	8005610 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800560c:	2302      	movs	r3, #2
 800560e:	e12a      	b.n	8005866 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <HAL_SPI_Transmit+0x36>
 8005616:	88fb      	ldrh	r3, [r7, #6]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e122      	b.n	8005866 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <HAL_SPI_Transmit+0x48>
 800562a:	2302      	movs	r3, #2
 800562c:	e11b      	b.n	8005866 <HAL_SPI_Transmit+0x280>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2203      	movs	r2, #3
 800563a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	88fa      	ldrh	r2, [r7, #6]
 800564e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	88fa      	ldrh	r2, [r7, #6]
 8005654:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800567c:	d10f      	bne.n	800569e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800568c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800569c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a8:	2b40      	cmp	r3, #64	@ 0x40
 80056aa:	d007      	beq.n	80056bc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056c4:	d152      	bne.n	800576c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <HAL_SPI_Transmit+0xee>
 80056ce:	8b7b      	ldrh	r3, [r7, #26]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d145      	bne.n	8005760 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d8:	881a      	ldrh	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e4:	1c9a      	adds	r2, r3, #2
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056f8:	e032      	b.n	8005760 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b02      	cmp	r3, #2
 8005706:	d112      	bne.n	800572e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570c:	881a      	ldrh	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005718:	1c9a      	adds	r2, r3, #2
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005722:	b29b      	uxth	r3, r3
 8005724:	3b01      	subs	r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800572c:	e018      	b.n	8005760 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800572e:	f7fd f90d 	bl	800294c <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d803      	bhi.n	8005746 <HAL_SPI_Transmit+0x160>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005744:	d102      	bne.n	800574c <HAL_SPI_Transmit+0x166>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d109      	bne.n	8005760 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e082      	b.n	8005866 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005764:	b29b      	uxth	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1c7      	bne.n	80056fa <HAL_SPI_Transmit+0x114>
 800576a:	e053      	b.n	8005814 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <HAL_SPI_Transmit+0x194>
 8005774:	8b7b      	ldrh	r3, [r7, #26]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d147      	bne.n	800580a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	330c      	adds	r3, #12
 8005784:	7812      	ldrb	r2, [r2, #0]
 8005786:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005796:	b29b      	uxth	r3, r3
 8005798:	3b01      	subs	r3, #1
 800579a:	b29a      	uxth	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80057a0:	e033      	b.n	800580a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d113      	bne.n	80057d8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	330c      	adds	r3, #12
 80057ba:	7812      	ldrb	r2, [r2, #0]
 80057bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80057d6:	e018      	b.n	800580a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057d8:	f7fd f8b8 	bl	800294c <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d803      	bhi.n	80057f0 <HAL_SPI_Transmit+0x20a>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057ee:	d102      	bne.n	80057f6 <HAL_SPI_Transmit+0x210>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d109      	bne.n	800580a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e02d      	b.n	8005866 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800580e:	b29b      	uxth	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1c6      	bne.n	80057a2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005814:	69fa      	ldr	r2, [r7, #28]
 8005816:	6839      	ldr	r1, [r7, #0]
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f8bf 	bl	800599c <SPI_EndRxTxTransaction>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2220      	movs	r2, #32
 8005828:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10a      	bne.n	8005848 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005832:	2300      	movs	r3, #0
 8005834:	617b      	str	r3, [r7, #20]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	617b      	str	r3, [r7, #20]
 8005846:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e000      	b.n	8005866 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005864:	2300      	movs	r3, #0
  }
}
 8005866:	4618      	mov	r0, r3
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800587c:	b2db      	uxtb	r3, r3
}
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b088      	sub	sp, #32
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	603b      	str	r3, [r7, #0]
 8005898:	4613      	mov	r3, r2
 800589a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800589c:	f7fd f856 	bl	800294c <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a4:	1a9b      	subs	r3, r3, r2
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	4413      	add	r3, r2
 80058aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058ac:	f7fd f84e 	bl	800294c <HAL_GetTick>
 80058b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058b2:	4b39      	ldr	r3, [pc, #228]	@ (8005998 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	015b      	lsls	r3, r3, #5
 80058b8:	0d1b      	lsrs	r3, r3, #20
 80058ba:	69fa      	ldr	r2, [r7, #28]
 80058bc:	fb02 f303 	mul.w	r3, r2, r3
 80058c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058c2:	e054      	b.n	800596e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058ca:	d050      	beq.n	800596e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058cc:	f7fd f83e 	bl	800294c <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d902      	bls.n	80058e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d13d      	bne.n	800595e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80058f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058fa:	d111      	bne.n	8005920 <SPI_WaitFlagStateUntilTimeout+0x94>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005904:	d004      	beq.n	8005910 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800590e:	d107      	bne.n	8005920 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800591e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005924:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005928:	d10f      	bne.n	800594a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005948:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e017      	b.n	800598e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	3b01      	subs	r3, #1
 800596c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4013      	ands	r3, r2
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	429a      	cmp	r2, r3
 800597c:	bf0c      	ite	eq
 800597e:	2301      	moveq	r3, #1
 8005980:	2300      	movne	r3, #0
 8005982:	b2db      	uxtb	r3, r3
 8005984:	461a      	mov	r2, r3
 8005986:	79fb      	ldrb	r3, [r7, #7]
 8005988:	429a      	cmp	r2, r3
 800598a:	d19b      	bne.n	80058c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3720      	adds	r7, #32
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20000010 	.word	0x20000010

0800599c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2201      	movs	r2, #1
 80059b0:	2102      	movs	r1, #2
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f7ff ff6a 	bl	800588c <SPI_WaitFlagStateUntilTimeout>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d007      	beq.n	80059ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059c2:	f043 0220 	orr.w	r2, r3, #32
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e032      	b.n	8005a34 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80059ce:	4b1b      	ldr	r3, [pc, #108]	@ (8005a3c <SPI_EndRxTxTransaction+0xa0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005a40 <SPI_EndRxTxTransaction+0xa4>)
 80059d4:	fba2 2303 	umull	r2, r3, r2, r3
 80059d8:	0d5b      	lsrs	r3, r3, #21
 80059da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80059de:	fb02 f303 	mul.w	r3, r2, r3
 80059e2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059ec:	d112      	bne.n	8005a14 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2200      	movs	r2, #0
 80059f6:	2180      	movs	r1, #128	@ 0x80
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f7ff ff47 	bl	800588c <SPI_WaitFlagStateUntilTimeout>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d016      	beq.n	8005a32 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a08:	f043 0220 	orr.w	r2, r3, #32
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e00f      	b.n	8005a34 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a2a:	2b80      	cmp	r3, #128	@ 0x80
 8005a2c:	d0f2      	beq.n	8005a14 <SPI_EndRxTxTransaction+0x78>
 8005a2e:	e000      	b.n	8005a32 <SPI_EndRxTxTransaction+0x96>
        break;
 8005a30:	bf00      	nop
  }

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	20000010 	.word	0x20000010
 8005a40:	165e9f81 	.word	0x165e9f81

08005a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e041      	b.n	8005ada <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d106      	bne.n	8005a70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7fc fa88 	bl	8001f80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3304      	adds	r3, #4
 8005a80:	4619      	mov	r1, r3
 8005a82:	4610      	mov	r0, r2
 8005a84:	f000 f8f4 	bl	8005c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b084      	sub	sp, #16
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
 8005aea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aec:	2300      	movs	r3, #0
 8005aee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d101      	bne.n	8005afe <HAL_TIM_ConfigClockSource+0x1c>
 8005afa:	2302      	movs	r3, #2
 8005afc:	e0b4      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x186>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005b1c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b24:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b36:	d03e      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0xd4>
 8005b38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b3c:	f200 8087 	bhi.w	8005c4e <HAL_TIM_ConfigClockSource+0x16c>
 8005b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b44:	f000 8086 	beq.w	8005c54 <HAL_TIM_ConfigClockSource+0x172>
 8005b48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b4c:	d87f      	bhi.n	8005c4e <HAL_TIM_ConfigClockSource+0x16c>
 8005b4e:	2b70      	cmp	r3, #112	@ 0x70
 8005b50:	d01a      	beq.n	8005b88 <HAL_TIM_ConfigClockSource+0xa6>
 8005b52:	2b70      	cmp	r3, #112	@ 0x70
 8005b54:	d87b      	bhi.n	8005c4e <HAL_TIM_ConfigClockSource+0x16c>
 8005b56:	2b60      	cmp	r3, #96	@ 0x60
 8005b58:	d050      	beq.n	8005bfc <HAL_TIM_ConfigClockSource+0x11a>
 8005b5a:	2b60      	cmp	r3, #96	@ 0x60
 8005b5c:	d877      	bhi.n	8005c4e <HAL_TIM_ConfigClockSource+0x16c>
 8005b5e:	2b50      	cmp	r3, #80	@ 0x50
 8005b60:	d03c      	beq.n	8005bdc <HAL_TIM_ConfigClockSource+0xfa>
 8005b62:	2b50      	cmp	r3, #80	@ 0x50
 8005b64:	d873      	bhi.n	8005c4e <HAL_TIM_ConfigClockSource+0x16c>
 8005b66:	2b40      	cmp	r3, #64	@ 0x40
 8005b68:	d058      	beq.n	8005c1c <HAL_TIM_ConfigClockSource+0x13a>
 8005b6a:	2b40      	cmp	r3, #64	@ 0x40
 8005b6c:	d86f      	bhi.n	8005c4e <HAL_TIM_ConfigClockSource+0x16c>
 8005b6e:	2b30      	cmp	r3, #48	@ 0x30
 8005b70:	d064      	beq.n	8005c3c <HAL_TIM_ConfigClockSource+0x15a>
 8005b72:	2b30      	cmp	r3, #48	@ 0x30
 8005b74:	d86b      	bhi.n	8005c4e <HAL_TIM_ConfigClockSource+0x16c>
 8005b76:	2b20      	cmp	r3, #32
 8005b78:	d060      	beq.n	8005c3c <HAL_TIM_ConfigClockSource+0x15a>
 8005b7a:	2b20      	cmp	r3, #32
 8005b7c:	d867      	bhi.n	8005c4e <HAL_TIM_ConfigClockSource+0x16c>
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d05c      	beq.n	8005c3c <HAL_TIM_ConfigClockSource+0x15a>
 8005b82:	2b10      	cmp	r3, #16
 8005b84:	d05a      	beq.n	8005c3c <HAL_TIM_ConfigClockSource+0x15a>
 8005b86:	e062      	b.n	8005c4e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b98:	f000 f990 	bl	8005ebc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005baa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	609a      	str	r2, [r3, #8]
      break;
 8005bb4:	e04f      	b.n	8005c56 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bc6:	f000 f979 	bl	8005ebc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bd8:	609a      	str	r2, [r3, #8]
      break;
 8005bda:	e03c      	b.n	8005c56 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005be8:	461a      	mov	r2, r3
 8005bea:	f000 f8ed 	bl	8005dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2150      	movs	r1, #80	@ 0x50
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 f946 	bl	8005e86 <TIM_ITRx_SetConfig>
      break;
 8005bfa:	e02c      	b.n	8005c56 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c08:	461a      	mov	r2, r3
 8005c0a:	f000 f90c 	bl	8005e26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2160      	movs	r1, #96	@ 0x60
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 f936 	bl	8005e86 <TIM_ITRx_SetConfig>
      break;
 8005c1a:	e01c      	b.n	8005c56 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c28:	461a      	mov	r2, r3
 8005c2a:	f000 f8cd 	bl	8005dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2140      	movs	r1, #64	@ 0x40
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 f926 	bl	8005e86 <TIM_ITRx_SetConfig>
      break;
 8005c3a:	e00c      	b.n	8005c56 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4619      	mov	r1, r3
 8005c46:	4610      	mov	r0, r2
 8005c48:	f000 f91d 	bl	8005e86 <TIM_ITRx_SetConfig>
      break;
 8005c4c:	e003      	b.n	8005c56 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	73fb      	strb	r3, [r7, #15]
      break;
 8005c52:	e000      	b.n	8005c56 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a46      	ldr	r2, [pc, #280]	@ (8005d9c <TIM_Base_SetConfig+0x12c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d013      	beq.n	8005cb0 <TIM_Base_SetConfig+0x40>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c8e:	d00f      	beq.n	8005cb0 <TIM_Base_SetConfig+0x40>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a43      	ldr	r2, [pc, #268]	@ (8005da0 <TIM_Base_SetConfig+0x130>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d00b      	beq.n	8005cb0 <TIM_Base_SetConfig+0x40>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a42      	ldr	r2, [pc, #264]	@ (8005da4 <TIM_Base_SetConfig+0x134>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d007      	beq.n	8005cb0 <TIM_Base_SetConfig+0x40>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a41      	ldr	r2, [pc, #260]	@ (8005da8 <TIM_Base_SetConfig+0x138>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d003      	beq.n	8005cb0 <TIM_Base_SetConfig+0x40>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a40      	ldr	r2, [pc, #256]	@ (8005dac <TIM_Base_SetConfig+0x13c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d108      	bne.n	8005cc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a35      	ldr	r2, [pc, #212]	@ (8005d9c <TIM_Base_SetConfig+0x12c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d02b      	beq.n	8005d22 <TIM_Base_SetConfig+0xb2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cd0:	d027      	beq.n	8005d22 <TIM_Base_SetConfig+0xb2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a32      	ldr	r2, [pc, #200]	@ (8005da0 <TIM_Base_SetConfig+0x130>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d023      	beq.n	8005d22 <TIM_Base_SetConfig+0xb2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a31      	ldr	r2, [pc, #196]	@ (8005da4 <TIM_Base_SetConfig+0x134>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d01f      	beq.n	8005d22 <TIM_Base_SetConfig+0xb2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a30      	ldr	r2, [pc, #192]	@ (8005da8 <TIM_Base_SetConfig+0x138>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d01b      	beq.n	8005d22 <TIM_Base_SetConfig+0xb2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a2f      	ldr	r2, [pc, #188]	@ (8005dac <TIM_Base_SetConfig+0x13c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d017      	beq.n	8005d22 <TIM_Base_SetConfig+0xb2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a2e      	ldr	r2, [pc, #184]	@ (8005db0 <TIM_Base_SetConfig+0x140>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d013      	beq.n	8005d22 <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a2d      	ldr	r2, [pc, #180]	@ (8005db4 <TIM_Base_SetConfig+0x144>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d00f      	beq.n	8005d22 <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a2c      	ldr	r2, [pc, #176]	@ (8005db8 <TIM_Base_SetConfig+0x148>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d00b      	beq.n	8005d22 <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a2b      	ldr	r2, [pc, #172]	@ (8005dbc <TIM_Base_SetConfig+0x14c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d007      	beq.n	8005d22 <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a2a      	ldr	r2, [pc, #168]	@ (8005dc0 <TIM_Base_SetConfig+0x150>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d003      	beq.n	8005d22 <TIM_Base_SetConfig+0xb2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a29      	ldr	r2, [pc, #164]	@ (8005dc4 <TIM_Base_SetConfig+0x154>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d108      	bne.n	8005d34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a10      	ldr	r2, [pc, #64]	@ (8005d9c <TIM_Base_SetConfig+0x12c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d003      	beq.n	8005d68 <TIM_Base_SetConfig+0xf8>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a12      	ldr	r2, [pc, #72]	@ (8005dac <TIM_Base_SetConfig+0x13c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d103      	bne.n	8005d70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	691a      	ldr	r2, [r3, #16]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d105      	bne.n	8005d8e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	f023 0201 	bic.w	r2, r3, #1
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	611a      	str	r2, [r3, #16]
  }
}
 8005d8e:	bf00      	nop
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40010000 	.word	0x40010000
 8005da0:	40000400 	.word	0x40000400
 8005da4:	40000800 	.word	0x40000800
 8005da8:	40000c00 	.word	0x40000c00
 8005dac:	40010400 	.word	0x40010400
 8005db0:	40014000 	.word	0x40014000
 8005db4:	40014400 	.word	0x40014400
 8005db8:	40014800 	.word	0x40014800
 8005dbc:	40001800 	.word	0x40001800
 8005dc0:	40001c00 	.word	0x40001c00
 8005dc4:	40002000 	.word	0x40002000

08005dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	f023 0201 	bic.w	r2, r3, #1
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f023 030a 	bic.w	r3, r3, #10
 8005e04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	621a      	str	r2, [r3, #32]
}
 8005e1a:	bf00      	nop
 8005e1c:	371c      	adds	r7, #28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b087      	sub	sp, #28
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	60f8      	str	r0, [r7, #12]
 8005e2e:	60b9      	str	r1, [r7, #8]
 8005e30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	f023 0210 	bic.w	r2, r3, #16
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	031b      	lsls	r3, r3, #12
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	011b      	lsls	r3, r3, #4
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	621a      	str	r2, [r3, #32]
}
 8005e7a:	bf00      	nop
 8005e7c:	371c      	adds	r7, #28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b085      	sub	sp, #20
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	f043 0307 	orr.w	r3, r3, #7
 8005ea8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	609a      	str	r2, [r3, #8]
}
 8005eb0:	bf00      	nop
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ed6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	021a      	lsls	r2, r3, #8
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	609a      	str	r2, [r3, #8]
}
 8005ef0:	bf00      	nop
 8005ef2:	371c      	adds	r7, #28
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d101      	bne.n	8005f14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f10:	2302      	movs	r3, #2
 8005f12:	e05a      	b.n	8005fca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a21      	ldr	r2, [pc, #132]	@ (8005fd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d022      	beq.n	8005f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f60:	d01d      	beq.n	8005f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a1d      	ldr	r2, [pc, #116]	@ (8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d018      	beq.n	8005f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a1b      	ldr	r2, [pc, #108]	@ (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d013      	beq.n	8005f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a1a      	ldr	r2, [pc, #104]	@ (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d00e      	beq.n	8005f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a18      	ldr	r2, [pc, #96]	@ (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d009      	beq.n	8005f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a17      	ldr	r2, [pc, #92]	@ (8005fec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d004      	beq.n	8005f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a15      	ldr	r2, [pc, #84]	@ (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d10c      	bne.n	8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	40010000 	.word	0x40010000
 8005fdc:	40000400 	.word	0x40000400
 8005fe0:	40000800 	.word	0x40000800
 8005fe4:	40000c00 	.word	0x40000c00
 8005fe8:	40010400 	.word	0x40010400
 8005fec:	40014000 	.word	0x40014000
 8005ff0:	40001800 	.word	0x40001800

08005ff4 <std>:
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	b510      	push	{r4, lr}
 8005ff8:	4604      	mov	r4, r0
 8005ffa:	e9c0 3300 	strd	r3, r3, [r0]
 8005ffe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006002:	6083      	str	r3, [r0, #8]
 8006004:	8181      	strh	r1, [r0, #12]
 8006006:	6643      	str	r3, [r0, #100]	@ 0x64
 8006008:	81c2      	strh	r2, [r0, #14]
 800600a:	6183      	str	r3, [r0, #24]
 800600c:	4619      	mov	r1, r3
 800600e:	2208      	movs	r2, #8
 8006010:	305c      	adds	r0, #92	@ 0x5c
 8006012:	f000 f921 	bl	8006258 <memset>
 8006016:	4b0d      	ldr	r3, [pc, #52]	@ (800604c <std+0x58>)
 8006018:	6263      	str	r3, [r4, #36]	@ 0x24
 800601a:	4b0d      	ldr	r3, [pc, #52]	@ (8006050 <std+0x5c>)
 800601c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800601e:	4b0d      	ldr	r3, [pc, #52]	@ (8006054 <std+0x60>)
 8006020:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006022:	4b0d      	ldr	r3, [pc, #52]	@ (8006058 <std+0x64>)
 8006024:	6323      	str	r3, [r4, #48]	@ 0x30
 8006026:	4b0d      	ldr	r3, [pc, #52]	@ (800605c <std+0x68>)
 8006028:	6224      	str	r4, [r4, #32]
 800602a:	429c      	cmp	r4, r3
 800602c:	d006      	beq.n	800603c <std+0x48>
 800602e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006032:	4294      	cmp	r4, r2
 8006034:	d002      	beq.n	800603c <std+0x48>
 8006036:	33d0      	adds	r3, #208	@ 0xd0
 8006038:	429c      	cmp	r4, r3
 800603a:	d105      	bne.n	8006048 <std+0x54>
 800603c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006044:	f000 b93a 	b.w	80062bc <__retarget_lock_init_recursive>
 8006048:	bd10      	pop	{r4, pc}
 800604a:	bf00      	nop
 800604c:	08006b11 	.word	0x08006b11
 8006050:	08006b33 	.word	0x08006b33
 8006054:	08006b6b 	.word	0x08006b6b
 8006058:	08006b8f 	.word	0x08006b8f
 800605c:	20025be0 	.word	0x20025be0

08006060 <stdio_exit_handler>:
 8006060:	4a02      	ldr	r2, [pc, #8]	@ (800606c <stdio_exit_handler+0xc>)
 8006062:	4903      	ldr	r1, [pc, #12]	@ (8006070 <stdio_exit_handler+0x10>)
 8006064:	4803      	ldr	r0, [pc, #12]	@ (8006074 <stdio_exit_handler+0x14>)
 8006066:	f000 b869 	b.w	800613c <_fwalk_sglue>
 800606a:	bf00      	nop
 800606c:	2000001c 	.word	0x2000001c
 8006070:	08006aa9 	.word	0x08006aa9
 8006074:	2000002c 	.word	0x2000002c

08006078 <cleanup_stdio>:
 8006078:	6841      	ldr	r1, [r0, #4]
 800607a:	4b0c      	ldr	r3, [pc, #48]	@ (80060ac <cleanup_stdio+0x34>)
 800607c:	4299      	cmp	r1, r3
 800607e:	b510      	push	{r4, lr}
 8006080:	4604      	mov	r4, r0
 8006082:	d001      	beq.n	8006088 <cleanup_stdio+0x10>
 8006084:	f000 fd10 	bl	8006aa8 <_fflush_r>
 8006088:	68a1      	ldr	r1, [r4, #8]
 800608a:	4b09      	ldr	r3, [pc, #36]	@ (80060b0 <cleanup_stdio+0x38>)
 800608c:	4299      	cmp	r1, r3
 800608e:	d002      	beq.n	8006096 <cleanup_stdio+0x1e>
 8006090:	4620      	mov	r0, r4
 8006092:	f000 fd09 	bl	8006aa8 <_fflush_r>
 8006096:	68e1      	ldr	r1, [r4, #12]
 8006098:	4b06      	ldr	r3, [pc, #24]	@ (80060b4 <cleanup_stdio+0x3c>)
 800609a:	4299      	cmp	r1, r3
 800609c:	d004      	beq.n	80060a8 <cleanup_stdio+0x30>
 800609e:	4620      	mov	r0, r4
 80060a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060a4:	f000 bd00 	b.w	8006aa8 <_fflush_r>
 80060a8:	bd10      	pop	{r4, pc}
 80060aa:	bf00      	nop
 80060ac:	20025be0 	.word	0x20025be0
 80060b0:	20025c48 	.word	0x20025c48
 80060b4:	20025cb0 	.word	0x20025cb0

080060b8 <global_stdio_init.part.0>:
 80060b8:	b510      	push	{r4, lr}
 80060ba:	4b0b      	ldr	r3, [pc, #44]	@ (80060e8 <global_stdio_init.part.0+0x30>)
 80060bc:	4c0b      	ldr	r4, [pc, #44]	@ (80060ec <global_stdio_init.part.0+0x34>)
 80060be:	4a0c      	ldr	r2, [pc, #48]	@ (80060f0 <global_stdio_init.part.0+0x38>)
 80060c0:	601a      	str	r2, [r3, #0]
 80060c2:	4620      	mov	r0, r4
 80060c4:	2200      	movs	r2, #0
 80060c6:	2104      	movs	r1, #4
 80060c8:	f7ff ff94 	bl	8005ff4 <std>
 80060cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80060d0:	2201      	movs	r2, #1
 80060d2:	2109      	movs	r1, #9
 80060d4:	f7ff ff8e 	bl	8005ff4 <std>
 80060d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80060dc:	2202      	movs	r2, #2
 80060de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060e2:	2112      	movs	r1, #18
 80060e4:	f7ff bf86 	b.w	8005ff4 <std>
 80060e8:	20025d18 	.word	0x20025d18
 80060ec:	20025be0 	.word	0x20025be0
 80060f0:	08006061 	.word	0x08006061

080060f4 <__sfp_lock_acquire>:
 80060f4:	4801      	ldr	r0, [pc, #4]	@ (80060fc <__sfp_lock_acquire+0x8>)
 80060f6:	f000 b8e2 	b.w	80062be <__retarget_lock_acquire_recursive>
 80060fa:	bf00      	nop
 80060fc:	20025d1d 	.word	0x20025d1d

08006100 <__sfp_lock_release>:
 8006100:	4801      	ldr	r0, [pc, #4]	@ (8006108 <__sfp_lock_release+0x8>)
 8006102:	f000 b8dd 	b.w	80062c0 <__retarget_lock_release_recursive>
 8006106:	bf00      	nop
 8006108:	20025d1d 	.word	0x20025d1d

0800610c <__sinit>:
 800610c:	b510      	push	{r4, lr}
 800610e:	4604      	mov	r4, r0
 8006110:	f7ff fff0 	bl	80060f4 <__sfp_lock_acquire>
 8006114:	6a23      	ldr	r3, [r4, #32]
 8006116:	b11b      	cbz	r3, 8006120 <__sinit+0x14>
 8006118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800611c:	f7ff bff0 	b.w	8006100 <__sfp_lock_release>
 8006120:	4b04      	ldr	r3, [pc, #16]	@ (8006134 <__sinit+0x28>)
 8006122:	6223      	str	r3, [r4, #32]
 8006124:	4b04      	ldr	r3, [pc, #16]	@ (8006138 <__sinit+0x2c>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1f5      	bne.n	8006118 <__sinit+0xc>
 800612c:	f7ff ffc4 	bl	80060b8 <global_stdio_init.part.0>
 8006130:	e7f2      	b.n	8006118 <__sinit+0xc>
 8006132:	bf00      	nop
 8006134:	08006079 	.word	0x08006079
 8006138:	20025d18 	.word	0x20025d18

0800613c <_fwalk_sglue>:
 800613c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006140:	4607      	mov	r7, r0
 8006142:	4688      	mov	r8, r1
 8006144:	4614      	mov	r4, r2
 8006146:	2600      	movs	r6, #0
 8006148:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800614c:	f1b9 0901 	subs.w	r9, r9, #1
 8006150:	d505      	bpl.n	800615e <_fwalk_sglue+0x22>
 8006152:	6824      	ldr	r4, [r4, #0]
 8006154:	2c00      	cmp	r4, #0
 8006156:	d1f7      	bne.n	8006148 <_fwalk_sglue+0xc>
 8006158:	4630      	mov	r0, r6
 800615a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800615e:	89ab      	ldrh	r3, [r5, #12]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d907      	bls.n	8006174 <_fwalk_sglue+0x38>
 8006164:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006168:	3301      	adds	r3, #1
 800616a:	d003      	beq.n	8006174 <_fwalk_sglue+0x38>
 800616c:	4629      	mov	r1, r5
 800616e:	4638      	mov	r0, r7
 8006170:	47c0      	blx	r8
 8006172:	4306      	orrs	r6, r0
 8006174:	3568      	adds	r5, #104	@ 0x68
 8006176:	e7e9      	b.n	800614c <_fwalk_sglue+0x10>

08006178 <iprintf>:
 8006178:	b40f      	push	{r0, r1, r2, r3}
 800617a:	b507      	push	{r0, r1, r2, lr}
 800617c:	4906      	ldr	r1, [pc, #24]	@ (8006198 <iprintf+0x20>)
 800617e:	ab04      	add	r3, sp, #16
 8006180:	6808      	ldr	r0, [r1, #0]
 8006182:	f853 2b04 	ldr.w	r2, [r3], #4
 8006186:	6881      	ldr	r1, [r0, #8]
 8006188:	9301      	str	r3, [sp, #4]
 800618a:	f000 f8c3 	bl	8006314 <_vfiprintf_r>
 800618e:	b003      	add	sp, #12
 8006190:	f85d eb04 	ldr.w	lr, [sp], #4
 8006194:	b004      	add	sp, #16
 8006196:	4770      	bx	lr
 8006198:	20000028 	.word	0x20000028

0800619c <_puts_r>:
 800619c:	6a03      	ldr	r3, [r0, #32]
 800619e:	b570      	push	{r4, r5, r6, lr}
 80061a0:	6884      	ldr	r4, [r0, #8]
 80061a2:	4605      	mov	r5, r0
 80061a4:	460e      	mov	r6, r1
 80061a6:	b90b      	cbnz	r3, 80061ac <_puts_r+0x10>
 80061a8:	f7ff ffb0 	bl	800610c <__sinit>
 80061ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061ae:	07db      	lsls	r3, r3, #31
 80061b0:	d405      	bmi.n	80061be <_puts_r+0x22>
 80061b2:	89a3      	ldrh	r3, [r4, #12]
 80061b4:	0598      	lsls	r0, r3, #22
 80061b6:	d402      	bmi.n	80061be <_puts_r+0x22>
 80061b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061ba:	f000 f880 	bl	80062be <__retarget_lock_acquire_recursive>
 80061be:	89a3      	ldrh	r3, [r4, #12]
 80061c0:	0719      	lsls	r1, r3, #28
 80061c2:	d502      	bpl.n	80061ca <_puts_r+0x2e>
 80061c4:	6923      	ldr	r3, [r4, #16]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d135      	bne.n	8006236 <_puts_r+0x9a>
 80061ca:	4621      	mov	r1, r4
 80061cc:	4628      	mov	r0, r5
 80061ce:	f000 fd21 	bl	8006c14 <__swsetup_r>
 80061d2:	b380      	cbz	r0, 8006236 <_puts_r+0x9a>
 80061d4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80061d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061da:	07da      	lsls	r2, r3, #31
 80061dc:	d405      	bmi.n	80061ea <_puts_r+0x4e>
 80061de:	89a3      	ldrh	r3, [r4, #12]
 80061e0:	059b      	lsls	r3, r3, #22
 80061e2:	d402      	bmi.n	80061ea <_puts_r+0x4e>
 80061e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061e6:	f000 f86b 	bl	80062c0 <__retarget_lock_release_recursive>
 80061ea:	4628      	mov	r0, r5
 80061ec:	bd70      	pop	{r4, r5, r6, pc}
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	da04      	bge.n	80061fc <_puts_r+0x60>
 80061f2:	69a2      	ldr	r2, [r4, #24]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	dc17      	bgt.n	8006228 <_puts_r+0x8c>
 80061f8:	290a      	cmp	r1, #10
 80061fa:	d015      	beq.n	8006228 <_puts_r+0x8c>
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	6022      	str	r2, [r4, #0]
 8006202:	7019      	strb	r1, [r3, #0]
 8006204:	68a3      	ldr	r3, [r4, #8]
 8006206:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800620a:	3b01      	subs	r3, #1
 800620c:	60a3      	str	r3, [r4, #8]
 800620e:	2900      	cmp	r1, #0
 8006210:	d1ed      	bne.n	80061ee <_puts_r+0x52>
 8006212:	2b00      	cmp	r3, #0
 8006214:	da11      	bge.n	800623a <_puts_r+0x9e>
 8006216:	4622      	mov	r2, r4
 8006218:	210a      	movs	r1, #10
 800621a:	4628      	mov	r0, r5
 800621c:	f000 fcbb 	bl	8006b96 <__swbuf_r>
 8006220:	3001      	adds	r0, #1
 8006222:	d0d7      	beq.n	80061d4 <_puts_r+0x38>
 8006224:	250a      	movs	r5, #10
 8006226:	e7d7      	b.n	80061d8 <_puts_r+0x3c>
 8006228:	4622      	mov	r2, r4
 800622a:	4628      	mov	r0, r5
 800622c:	f000 fcb3 	bl	8006b96 <__swbuf_r>
 8006230:	3001      	adds	r0, #1
 8006232:	d1e7      	bne.n	8006204 <_puts_r+0x68>
 8006234:	e7ce      	b.n	80061d4 <_puts_r+0x38>
 8006236:	3e01      	subs	r6, #1
 8006238:	e7e4      	b.n	8006204 <_puts_r+0x68>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	6022      	str	r2, [r4, #0]
 8006240:	220a      	movs	r2, #10
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	e7ee      	b.n	8006224 <_puts_r+0x88>
	...

08006248 <puts>:
 8006248:	4b02      	ldr	r3, [pc, #8]	@ (8006254 <puts+0xc>)
 800624a:	4601      	mov	r1, r0
 800624c:	6818      	ldr	r0, [r3, #0]
 800624e:	f7ff bfa5 	b.w	800619c <_puts_r>
 8006252:	bf00      	nop
 8006254:	20000028 	.word	0x20000028

08006258 <memset>:
 8006258:	4402      	add	r2, r0
 800625a:	4603      	mov	r3, r0
 800625c:	4293      	cmp	r3, r2
 800625e:	d100      	bne.n	8006262 <memset+0xa>
 8006260:	4770      	bx	lr
 8006262:	f803 1b01 	strb.w	r1, [r3], #1
 8006266:	e7f9      	b.n	800625c <memset+0x4>

08006268 <__errno>:
 8006268:	4b01      	ldr	r3, [pc, #4]	@ (8006270 <__errno+0x8>)
 800626a:	6818      	ldr	r0, [r3, #0]
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	20000028 	.word	0x20000028

08006274 <__libc_init_array>:
 8006274:	b570      	push	{r4, r5, r6, lr}
 8006276:	4d0d      	ldr	r5, [pc, #52]	@ (80062ac <__libc_init_array+0x38>)
 8006278:	4c0d      	ldr	r4, [pc, #52]	@ (80062b0 <__libc_init_array+0x3c>)
 800627a:	1b64      	subs	r4, r4, r5
 800627c:	10a4      	asrs	r4, r4, #2
 800627e:	2600      	movs	r6, #0
 8006280:	42a6      	cmp	r6, r4
 8006282:	d109      	bne.n	8006298 <__libc_init_array+0x24>
 8006284:	4d0b      	ldr	r5, [pc, #44]	@ (80062b4 <__libc_init_array+0x40>)
 8006286:	4c0c      	ldr	r4, [pc, #48]	@ (80062b8 <__libc_init_array+0x44>)
 8006288:	f000 fe3e 	bl	8006f08 <_init>
 800628c:	1b64      	subs	r4, r4, r5
 800628e:	10a4      	asrs	r4, r4, #2
 8006290:	2600      	movs	r6, #0
 8006292:	42a6      	cmp	r6, r4
 8006294:	d105      	bne.n	80062a2 <__libc_init_array+0x2e>
 8006296:	bd70      	pop	{r4, r5, r6, pc}
 8006298:	f855 3b04 	ldr.w	r3, [r5], #4
 800629c:	4798      	blx	r3
 800629e:	3601      	adds	r6, #1
 80062a0:	e7ee      	b.n	8006280 <__libc_init_array+0xc>
 80062a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80062a6:	4798      	blx	r3
 80062a8:	3601      	adds	r6, #1
 80062aa:	e7f2      	b.n	8006292 <__libc_init_array+0x1e>
 80062ac:	08008168 	.word	0x08008168
 80062b0:	08008168 	.word	0x08008168
 80062b4:	08008168 	.word	0x08008168
 80062b8:	0800816c 	.word	0x0800816c

080062bc <__retarget_lock_init_recursive>:
 80062bc:	4770      	bx	lr

080062be <__retarget_lock_acquire_recursive>:
 80062be:	4770      	bx	lr

080062c0 <__retarget_lock_release_recursive>:
 80062c0:	4770      	bx	lr

080062c2 <__sfputc_r>:
 80062c2:	6893      	ldr	r3, [r2, #8]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	b410      	push	{r4}
 80062ca:	6093      	str	r3, [r2, #8]
 80062cc:	da08      	bge.n	80062e0 <__sfputc_r+0x1e>
 80062ce:	6994      	ldr	r4, [r2, #24]
 80062d0:	42a3      	cmp	r3, r4
 80062d2:	db01      	blt.n	80062d8 <__sfputc_r+0x16>
 80062d4:	290a      	cmp	r1, #10
 80062d6:	d103      	bne.n	80062e0 <__sfputc_r+0x1e>
 80062d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062dc:	f000 bc5b 	b.w	8006b96 <__swbuf_r>
 80062e0:	6813      	ldr	r3, [r2, #0]
 80062e2:	1c58      	adds	r0, r3, #1
 80062e4:	6010      	str	r0, [r2, #0]
 80062e6:	7019      	strb	r1, [r3, #0]
 80062e8:	4608      	mov	r0, r1
 80062ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <__sfputs_r>:
 80062f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f2:	4606      	mov	r6, r0
 80062f4:	460f      	mov	r7, r1
 80062f6:	4614      	mov	r4, r2
 80062f8:	18d5      	adds	r5, r2, r3
 80062fa:	42ac      	cmp	r4, r5
 80062fc:	d101      	bne.n	8006302 <__sfputs_r+0x12>
 80062fe:	2000      	movs	r0, #0
 8006300:	e007      	b.n	8006312 <__sfputs_r+0x22>
 8006302:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006306:	463a      	mov	r2, r7
 8006308:	4630      	mov	r0, r6
 800630a:	f7ff ffda 	bl	80062c2 <__sfputc_r>
 800630e:	1c43      	adds	r3, r0, #1
 8006310:	d1f3      	bne.n	80062fa <__sfputs_r+0xa>
 8006312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006314 <_vfiprintf_r>:
 8006314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006318:	460d      	mov	r5, r1
 800631a:	b09d      	sub	sp, #116	@ 0x74
 800631c:	4614      	mov	r4, r2
 800631e:	4698      	mov	r8, r3
 8006320:	4606      	mov	r6, r0
 8006322:	b118      	cbz	r0, 800632c <_vfiprintf_r+0x18>
 8006324:	6a03      	ldr	r3, [r0, #32]
 8006326:	b90b      	cbnz	r3, 800632c <_vfiprintf_r+0x18>
 8006328:	f7ff fef0 	bl	800610c <__sinit>
 800632c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800632e:	07d9      	lsls	r1, r3, #31
 8006330:	d405      	bmi.n	800633e <_vfiprintf_r+0x2a>
 8006332:	89ab      	ldrh	r3, [r5, #12]
 8006334:	059a      	lsls	r2, r3, #22
 8006336:	d402      	bmi.n	800633e <_vfiprintf_r+0x2a>
 8006338:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800633a:	f7ff ffc0 	bl	80062be <__retarget_lock_acquire_recursive>
 800633e:	89ab      	ldrh	r3, [r5, #12]
 8006340:	071b      	lsls	r3, r3, #28
 8006342:	d501      	bpl.n	8006348 <_vfiprintf_r+0x34>
 8006344:	692b      	ldr	r3, [r5, #16]
 8006346:	b99b      	cbnz	r3, 8006370 <_vfiprintf_r+0x5c>
 8006348:	4629      	mov	r1, r5
 800634a:	4630      	mov	r0, r6
 800634c:	f000 fc62 	bl	8006c14 <__swsetup_r>
 8006350:	b170      	cbz	r0, 8006370 <_vfiprintf_r+0x5c>
 8006352:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006354:	07dc      	lsls	r4, r3, #31
 8006356:	d504      	bpl.n	8006362 <_vfiprintf_r+0x4e>
 8006358:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800635c:	b01d      	add	sp, #116	@ 0x74
 800635e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006362:	89ab      	ldrh	r3, [r5, #12]
 8006364:	0598      	lsls	r0, r3, #22
 8006366:	d4f7      	bmi.n	8006358 <_vfiprintf_r+0x44>
 8006368:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800636a:	f7ff ffa9 	bl	80062c0 <__retarget_lock_release_recursive>
 800636e:	e7f3      	b.n	8006358 <_vfiprintf_r+0x44>
 8006370:	2300      	movs	r3, #0
 8006372:	9309      	str	r3, [sp, #36]	@ 0x24
 8006374:	2320      	movs	r3, #32
 8006376:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800637a:	f8cd 800c 	str.w	r8, [sp, #12]
 800637e:	2330      	movs	r3, #48	@ 0x30
 8006380:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006530 <_vfiprintf_r+0x21c>
 8006384:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006388:	f04f 0901 	mov.w	r9, #1
 800638c:	4623      	mov	r3, r4
 800638e:	469a      	mov	sl, r3
 8006390:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006394:	b10a      	cbz	r2, 800639a <_vfiprintf_r+0x86>
 8006396:	2a25      	cmp	r2, #37	@ 0x25
 8006398:	d1f9      	bne.n	800638e <_vfiprintf_r+0x7a>
 800639a:	ebba 0b04 	subs.w	fp, sl, r4
 800639e:	d00b      	beq.n	80063b8 <_vfiprintf_r+0xa4>
 80063a0:	465b      	mov	r3, fp
 80063a2:	4622      	mov	r2, r4
 80063a4:	4629      	mov	r1, r5
 80063a6:	4630      	mov	r0, r6
 80063a8:	f7ff ffa2 	bl	80062f0 <__sfputs_r>
 80063ac:	3001      	adds	r0, #1
 80063ae:	f000 80a7 	beq.w	8006500 <_vfiprintf_r+0x1ec>
 80063b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063b4:	445a      	add	r2, fp
 80063b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80063b8:	f89a 3000 	ldrb.w	r3, [sl]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 809f 	beq.w	8006500 <_vfiprintf_r+0x1ec>
 80063c2:	2300      	movs	r3, #0
 80063c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80063c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063cc:	f10a 0a01 	add.w	sl, sl, #1
 80063d0:	9304      	str	r3, [sp, #16]
 80063d2:	9307      	str	r3, [sp, #28]
 80063d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80063d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80063da:	4654      	mov	r4, sl
 80063dc:	2205      	movs	r2, #5
 80063de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063e2:	4853      	ldr	r0, [pc, #332]	@ (8006530 <_vfiprintf_r+0x21c>)
 80063e4:	f7f9 ff04 	bl	80001f0 <memchr>
 80063e8:	9a04      	ldr	r2, [sp, #16]
 80063ea:	b9d8      	cbnz	r0, 8006424 <_vfiprintf_r+0x110>
 80063ec:	06d1      	lsls	r1, r2, #27
 80063ee:	bf44      	itt	mi
 80063f0:	2320      	movmi	r3, #32
 80063f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063f6:	0713      	lsls	r3, r2, #28
 80063f8:	bf44      	itt	mi
 80063fa:	232b      	movmi	r3, #43	@ 0x2b
 80063fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006400:	f89a 3000 	ldrb.w	r3, [sl]
 8006404:	2b2a      	cmp	r3, #42	@ 0x2a
 8006406:	d015      	beq.n	8006434 <_vfiprintf_r+0x120>
 8006408:	9a07      	ldr	r2, [sp, #28]
 800640a:	4654      	mov	r4, sl
 800640c:	2000      	movs	r0, #0
 800640e:	f04f 0c0a 	mov.w	ip, #10
 8006412:	4621      	mov	r1, r4
 8006414:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006418:	3b30      	subs	r3, #48	@ 0x30
 800641a:	2b09      	cmp	r3, #9
 800641c:	d94b      	bls.n	80064b6 <_vfiprintf_r+0x1a2>
 800641e:	b1b0      	cbz	r0, 800644e <_vfiprintf_r+0x13a>
 8006420:	9207      	str	r2, [sp, #28]
 8006422:	e014      	b.n	800644e <_vfiprintf_r+0x13a>
 8006424:	eba0 0308 	sub.w	r3, r0, r8
 8006428:	fa09 f303 	lsl.w	r3, r9, r3
 800642c:	4313      	orrs	r3, r2
 800642e:	9304      	str	r3, [sp, #16]
 8006430:	46a2      	mov	sl, r4
 8006432:	e7d2      	b.n	80063da <_vfiprintf_r+0xc6>
 8006434:	9b03      	ldr	r3, [sp, #12]
 8006436:	1d19      	adds	r1, r3, #4
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	9103      	str	r1, [sp, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	bfbb      	ittet	lt
 8006440:	425b      	neglt	r3, r3
 8006442:	f042 0202 	orrlt.w	r2, r2, #2
 8006446:	9307      	strge	r3, [sp, #28]
 8006448:	9307      	strlt	r3, [sp, #28]
 800644a:	bfb8      	it	lt
 800644c:	9204      	strlt	r2, [sp, #16]
 800644e:	7823      	ldrb	r3, [r4, #0]
 8006450:	2b2e      	cmp	r3, #46	@ 0x2e
 8006452:	d10a      	bne.n	800646a <_vfiprintf_r+0x156>
 8006454:	7863      	ldrb	r3, [r4, #1]
 8006456:	2b2a      	cmp	r3, #42	@ 0x2a
 8006458:	d132      	bne.n	80064c0 <_vfiprintf_r+0x1ac>
 800645a:	9b03      	ldr	r3, [sp, #12]
 800645c:	1d1a      	adds	r2, r3, #4
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	9203      	str	r2, [sp, #12]
 8006462:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006466:	3402      	adds	r4, #2
 8006468:	9305      	str	r3, [sp, #20]
 800646a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006540 <_vfiprintf_r+0x22c>
 800646e:	7821      	ldrb	r1, [r4, #0]
 8006470:	2203      	movs	r2, #3
 8006472:	4650      	mov	r0, sl
 8006474:	f7f9 febc 	bl	80001f0 <memchr>
 8006478:	b138      	cbz	r0, 800648a <_vfiprintf_r+0x176>
 800647a:	9b04      	ldr	r3, [sp, #16]
 800647c:	eba0 000a 	sub.w	r0, r0, sl
 8006480:	2240      	movs	r2, #64	@ 0x40
 8006482:	4082      	lsls	r2, r0
 8006484:	4313      	orrs	r3, r2
 8006486:	3401      	adds	r4, #1
 8006488:	9304      	str	r3, [sp, #16]
 800648a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800648e:	4829      	ldr	r0, [pc, #164]	@ (8006534 <_vfiprintf_r+0x220>)
 8006490:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006494:	2206      	movs	r2, #6
 8006496:	f7f9 feab 	bl	80001f0 <memchr>
 800649a:	2800      	cmp	r0, #0
 800649c:	d03f      	beq.n	800651e <_vfiprintf_r+0x20a>
 800649e:	4b26      	ldr	r3, [pc, #152]	@ (8006538 <_vfiprintf_r+0x224>)
 80064a0:	bb1b      	cbnz	r3, 80064ea <_vfiprintf_r+0x1d6>
 80064a2:	9b03      	ldr	r3, [sp, #12]
 80064a4:	3307      	adds	r3, #7
 80064a6:	f023 0307 	bic.w	r3, r3, #7
 80064aa:	3308      	adds	r3, #8
 80064ac:	9303      	str	r3, [sp, #12]
 80064ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064b0:	443b      	add	r3, r7
 80064b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80064b4:	e76a      	b.n	800638c <_vfiprintf_r+0x78>
 80064b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80064ba:	460c      	mov	r4, r1
 80064bc:	2001      	movs	r0, #1
 80064be:	e7a8      	b.n	8006412 <_vfiprintf_r+0xfe>
 80064c0:	2300      	movs	r3, #0
 80064c2:	3401      	adds	r4, #1
 80064c4:	9305      	str	r3, [sp, #20]
 80064c6:	4619      	mov	r1, r3
 80064c8:	f04f 0c0a 	mov.w	ip, #10
 80064cc:	4620      	mov	r0, r4
 80064ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064d2:	3a30      	subs	r2, #48	@ 0x30
 80064d4:	2a09      	cmp	r2, #9
 80064d6:	d903      	bls.n	80064e0 <_vfiprintf_r+0x1cc>
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d0c6      	beq.n	800646a <_vfiprintf_r+0x156>
 80064dc:	9105      	str	r1, [sp, #20]
 80064de:	e7c4      	b.n	800646a <_vfiprintf_r+0x156>
 80064e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80064e4:	4604      	mov	r4, r0
 80064e6:	2301      	movs	r3, #1
 80064e8:	e7f0      	b.n	80064cc <_vfiprintf_r+0x1b8>
 80064ea:	ab03      	add	r3, sp, #12
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	462a      	mov	r2, r5
 80064f0:	4b12      	ldr	r3, [pc, #72]	@ (800653c <_vfiprintf_r+0x228>)
 80064f2:	a904      	add	r1, sp, #16
 80064f4:	4630      	mov	r0, r6
 80064f6:	f3af 8000 	nop.w
 80064fa:	4607      	mov	r7, r0
 80064fc:	1c78      	adds	r0, r7, #1
 80064fe:	d1d6      	bne.n	80064ae <_vfiprintf_r+0x19a>
 8006500:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006502:	07d9      	lsls	r1, r3, #31
 8006504:	d405      	bmi.n	8006512 <_vfiprintf_r+0x1fe>
 8006506:	89ab      	ldrh	r3, [r5, #12]
 8006508:	059a      	lsls	r2, r3, #22
 800650a:	d402      	bmi.n	8006512 <_vfiprintf_r+0x1fe>
 800650c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800650e:	f7ff fed7 	bl	80062c0 <__retarget_lock_release_recursive>
 8006512:	89ab      	ldrh	r3, [r5, #12]
 8006514:	065b      	lsls	r3, r3, #25
 8006516:	f53f af1f 	bmi.w	8006358 <_vfiprintf_r+0x44>
 800651a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800651c:	e71e      	b.n	800635c <_vfiprintf_r+0x48>
 800651e:	ab03      	add	r3, sp, #12
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	462a      	mov	r2, r5
 8006524:	4b05      	ldr	r3, [pc, #20]	@ (800653c <_vfiprintf_r+0x228>)
 8006526:	a904      	add	r1, sp, #16
 8006528:	4630      	mov	r0, r6
 800652a:	f000 f91b 	bl	8006764 <_printf_i>
 800652e:	e7e4      	b.n	80064fa <_vfiprintf_r+0x1e6>
 8006530:	0800812c 	.word	0x0800812c
 8006534:	08008136 	.word	0x08008136
 8006538:	00000000 	.word	0x00000000
 800653c:	080062f1 	.word	0x080062f1
 8006540:	08008132 	.word	0x08008132

08006544 <sbrk_aligned>:
 8006544:	b570      	push	{r4, r5, r6, lr}
 8006546:	4e0f      	ldr	r6, [pc, #60]	@ (8006584 <sbrk_aligned+0x40>)
 8006548:	460c      	mov	r4, r1
 800654a:	6831      	ldr	r1, [r6, #0]
 800654c:	4605      	mov	r5, r0
 800654e:	b911      	cbnz	r1, 8006556 <sbrk_aligned+0x12>
 8006550:	f000 fc4c 	bl	8006dec <_sbrk_r>
 8006554:	6030      	str	r0, [r6, #0]
 8006556:	4621      	mov	r1, r4
 8006558:	4628      	mov	r0, r5
 800655a:	f000 fc47 	bl	8006dec <_sbrk_r>
 800655e:	1c43      	adds	r3, r0, #1
 8006560:	d103      	bne.n	800656a <sbrk_aligned+0x26>
 8006562:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006566:	4620      	mov	r0, r4
 8006568:	bd70      	pop	{r4, r5, r6, pc}
 800656a:	1cc4      	adds	r4, r0, #3
 800656c:	f024 0403 	bic.w	r4, r4, #3
 8006570:	42a0      	cmp	r0, r4
 8006572:	d0f8      	beq.n	8006566 <sbrk_aligned+0x22>
 8006574:	1a21      	subs	r1, r4, r0
 8006576:	4628      	mov	r0, r5
 8006578:	f000 fc38 	bl	8006dec <_sbrk_r>
 800657c:	3001      	adds	r0, #1
 800657e:	d1f2      	bne.n	8006566 <sbrk_aligned+0x22>
 8006580:	e7ef      	b.n	8006562 <sbrk_aligned+0x1e>
 8006582:	bf00      	nop
 8006584:	20025d20 	.word	0x20025d20

08006588 <_malloc_r>:
 8006588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800658c:	1ccd      	adds	r5, r1, #3
 800658e:	f025 0503 	bic.w	r5, r5, #3
 8006592:	3508      	adds	r5, #8
 8006594:	2d0c      	cmp	r5, #12
 8006596:	bf38      	it	cc
 8006598:	250c      	movcc	r5, #12
 800659a:	2d00      	cmp	r5, #0
 800659c:	4606      	mov	r6, r0
 800659e:	db01      	blt.n	80065a4 <_malloc_r+0x1c>
 80065a0:	42a9      	cmp	r1, r5
 80065a2:	d904      	bls.n	80065ae <_malloc_r+0x26>
 80065a4:	230c      	movs	r3, #12
 80065a6:	6033      	str	r3, [r6, #0]
 80065a8:	2000      	movs	r0, #0
 80065aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006684 <_malloc_r+0xfc>
 80065b2:	f000 faa1 	bl	8006af8 <__malloc_lock>
 80065b6:	f8d8 3000 	ldr.w	r3, [r8]
 80065ba:	461c      	mov	r4, r3
 80065bc:	bb44      	cbnz	r4, 8006610 <_malloc_r+0x88>
 80065be:	4629      	mov	r1, r5
 80065c0:	4630      	mov	r0, r6
 80065c2:	f7ff ffbf 	bl	8006544 <sbrk_aligned>
 80065c6:	1c43      	adds	r3, r0, #1
 80065c8:	4604      	mov	r4, r0
 80065ca:	d158      	bne.n	800667e <_malloc_r+0xf6>
 80065cc:	f8d8 4000 	ldr.w	r4, [r8]
 80065d0:	4627      	mov	r7, r4
 80065d2:	2f00      	cmp	r7, #0
 80065d4:	d143      	bne.n	800665e <_malloc_r+0xd6>
 80065d6:	2c00      	cmp	r4, #0
 80065d8:	d04b      	beq.n	8006672 <_malloc_r+0xea>
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	4639      	mov	r1, r7
 80065de:	4630      	mov	r0, r6
 80065e0:	eb04 0903 	add.w	r9, r4, r3
 80065e4:	f000 fc02 	bl	8006dec <_sbrk_r>
 80065e8:	4581      	cmp	r9, r0
 80065ea:	d142      	bne.n	8006672 <_malloc_r+0xea>
 80065ec:	6821      	ldr	r1, [r4, #0]
 80065ee:	1a6d      	subs	r5, r5, r1
 80065f0:	4629      	mov	r1, r5
 80065f2:	4630      	mov	r0, r6
 80065f4:	f7ff ffa6 	bl	8006544 <sbrk_aligned>
 80065f8:	3001      	adds	r0, #1
 80065fa:	d03a      	beq.n	8006672 <_malloc_r+0xea>
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	442b      	add	r3, r5
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	f8d8 3000 	ldr.w	r3, [r8]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	bb62      	cbnz	r2, 8006664 <_malloc_r+0xdc>
 800660a:	f8c8 7000 	str.w	r7, [r8]
 800660e:	e00f      	b.n	8006630 <_malloc_r+0xa8>
 8006610:	6822      	ldr	r2, [r4, #0]
 8006612:	1b52      	subs	r2, r2, r5
 8006614:	d420      	bmi.n	8006658 <_malloc_r+0xd0>
 8006616:	2a0b      	cmp	r2, #11
 8006618:	d917      	bls.n	800664a <_malloc_r+0xc2>
 800661a:	1961      	adds	r1, r4, r5
 800661c:	42a3      	cmp	r3, r4
 800661e:	6025      	str	r5, [r4, #0]
 8006620:	bf18      	it	ne
 8006622:	6059      	strne	r1, [r3, #4]
 8006624:	6863      	ldr	r3, [r4, #4]
 8006626:	bf08      	it	eq
 8006628:	f8c8 1000 	streq.w	r1, [r8]
 800662c:	5162      	str	r2, [r4, r5]
 800662e:	604b      	str	r3, [r1, #4]
 8006630:	4630      	mov	r0, r6
 8006632:	f000 fa67 	bl	8006b04 <__malloc_unlock>
 8006636:	f104 000b 	add.w	r0, r4, #11
 800663a:	1d23      	adds	r3, r4, #4
 800663c:	f020 0007 	bic.w	r0, r0, #7
 8006640:	1ac2      	subs	r2, r0, r3
 8006642:	bf1c      	itt	ne
 8006644:	1a1b      	subne	r3, r3, r0
 8006646:	50a3      	strne	r3, [r4, r2]
 8006648:	e7af      	b.n	80065aa <_malloc_r+0x22>
 800664a:	6862      	ldr	r2, [r4, #4]
 800664c:	42a3      	cmp	r3, r4
 800664e:	bf0c      	ite	eq
 8006650:	f8c8 2000 	streq.w	r2, [r8]
 8006654:	605a      	strne	r2, [r3, #4]
 8006656:	e7eb      	b.n	8006630 <_malloc_r+0xa8>
 8006658:	4623      	mov	r3, r4
 800665a:	6864      	ldr	r4, [r4, #4]
 800665c:	e7ae      	b.n	80065bc <_malloc_r+0x34>
 800665e:	463c      	mov	r4, r7
 8006660:	687f      	ldr	r7, [r7, #4]
 8006662:	e7b6      	b.n	80065d2 <_malloc_r+0x4a>
 8006664:	461a      	mov	r2, r3
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	42a3      	cmp	r3, r4
 800666a:	d1fb      	bne.n	8006664 <_malloc_r+0xdc>
 800666c:	2300      	movs	r3, #0
 800666e:	6053      	str	r3, [r2, #4]
 8006670:	e7de      	b.n	8006630 <_malloc_r+0xa8>
 8006672:	230c      	movs	r3, #12
 8006674:	6033      	str	r3, [r6, #0]
 8006676:	4630      	mov	r0, r6
 8006678:	f000 fa44 	bl	8006b04 <__malloc_unlock>
 800667c:	e794      	b.n	80065a8 <_malloc_r+0x20>
 800667e:	6005      	str	r5, [r0, #0]
 8006680:	e7d6      	b.n	8006630 <_malloc_r+0xa8>
 8006682:	bf00      	nop
 8006684:	20025d24 	.word	0x20025d24

08006688 <_printf_common>:
 8006688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800668c:	4616      	mov	r6, r2
 800668e:	4698      	mov	r8, r3
 8006690:	688a      	ldr	r2, [r1, #8]
 8006692:	690b      	ldr	r3, [r1, #16]
 8006694:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006698:	4293      	cmp	r3, r2
 800669a:	bfb8      	it	lt
 800669c:	4613      	movlt	r3, r2
 800669e:	6033      	str	r3, [r6, #0]
 80066a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066a4:	4607      	mov	r7, r0
 80066a6:	460c      	mov	r4, r1
 80066a8:	b10a      	cbz	r2, 80066ae <_printf_common+0x26>
 80066aa:	3301      	adds	r3, #1
 80066ac:	6033      	str	r3, [r6, #0]
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	0699      	lsls	r1, r3, #26
 80066b2:	bf42      	ittt	mi
 80066b4:	6833      	ldrmi	r3, [r6, #0]
 80066b6:	3302      	addmi	r3, #2
 80066b8:	6033      	strmi	r3, [r6, #0]
 80066ba:	6825      	ldr	r5, [r4, #0]
 80066bc:	f015 0506 	ands.w	r5, r5, #6
 80066c0:	d106      	bne.n	80066d0 <_printf_common+0x48>
 80066c2:	f104 0a19 	add.w	sl, r4, #25
 80066c6:	68e3      	ldr	r3, [r4, #12]
 80066c8:	6832      	ldr	r2, [r6, #0]
 80066ca:	1a9b      	subs	r3, r3, r2
 80066cc:	42ab      	cmp	r3, r5
 80066ce:	dc26      	bgt.n	800671e <_printf_common+0x96>
 80066d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80066d4:	6822      	ldr	r2, [r4, #0]
 80066d6:	3b00      	subs	r3, #0
 80066d8:	bf18      	it	ne
 80066da:	2301      	movne	r3, #1
 80066dc:	0692      	lsls	r2, r2, #26
 80066de:	d42b      	bmi.n	8006738 <_printf_common+0xb0>
 80066e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80066e4:	4641      	mov	r1, r8
 80066e6:	4638      	mov	r0, r7
 80066e8:	47c8      	blx	r9
 80066ea:	3001      	adds	r0, #1
 80066ec:	d01e      	beq.n	800672c <_printf_common+0xa4>
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	6922      	ldr	r2, [r4, #16]
 80066f2:	f003 0306 	and.w	r3, r3, #6
 80066f6:	2b04      	cmp	r3, #4
 80066f8:	bf02      	ittt	eq
 80066fa:	68e5      	ldreq	r5, [r4, #12]
 80066fc:	6833      	ldreq	r3, [r6, #0]
 80066fe:	1aed      	subeq	r5, r5, r3
 8006700:	68a3      	ldr	r3, [r4, #8]
 8006702:	bf0c      	ite	eq
 8006704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006708:	2500      	movne	r5, #0
 800670a:	4293      	cmp	r3, r2
 800670c:	bfc4      	itt	gt
 800670e:	1a9b      	subgt	r3, r3, r2
 8006710:	18ed      	addgt	r5, r5, r3
 8006712:	2600      	movs	r6, #0
 8006714:	341a      	adds	r4, #26
 8006716:	42b5      	cmp	r5, r6
 8006718:	d11a      	bne.n	8006750 <_printf_common+0xc8>
 800671a:	2000      	movs	r0, #0
 800671c:	e008      	b.n	8006730 <_printf_common+0xa8>
 800671e:	2301      	movs	r3, #1
 8006720:	4652      	mov	r2, sl
 8006722:	4641      	mov	r1, r8
 8006724:	4638      	mov	r0, r7
 8006726:	47c8      	blx	r9
 8006728:	3001      	adds	r0, #1
 800672a:	d103      	bne.n	8006734 <_printf_common+0xac>
 800672c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006734:	3501      	adds	r5, #1
 8006736:	e7c6      	b.n	80066c6 <_printf_common+0x3e>
 8006738:	18e1      	adds	r1, r4, r3
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	2030      	movs	r0, #48	@ 0x30
 800673e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006742:	4422      	add	r2, r4
 8006744:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006748:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800674c:	3302      	adds	r3, #2
 800674e:	e7c7      	b.n	80066e0 <_printf_common+0x58>
 8006750:	2301      	movs	r3, #1
 8006752:	4622      	mov	r2, r4
 8006754:	4641      	mov	r1, r8
 8006756:	4638      	mov	r0, r7
 8006758:	47c8      	blx	r9
 800675a:	3001      	adds	r0, #1
 800675c:	d0e6      	beq.n	800672c <_printf_common+0xa4>
 800675e:	3601      	adds	r6, #1
 8006760:	e7d9      	b.n	8006716 <_printf_common+0x8e>
	...

08006764 <_printf_i>:
 8006764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006768:	7e0f      	ldrb	r7, [r1, #24]
 800676a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800676c:	2f78      	cmp	r7, #120	@ 0x78
 800676e:	4691      	mov	r9, r2
 8006770:	4680      	mov	r8, r0
 8006772:	460c      	mov	r4, r1
 8006774:	469a      	mov	sl, r3
 8006776:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800677a:	d807      	bhi.n	800678c <_printf_i+0x28>
 800677c:	2f62      	cmp	r7, #98	@ 0x62
 800677e:	d80a      	bhi.n	8006796 <_printf_i+0x32>
 8006780:	2f00      	cmp	r7, #0
 8006782:	f000 80d1 	beq.w	8006928 <_printf_i+0x1c4>
 8006786:	2f58      	cmp	r7, #88	@ 0x58
 8006788:	f000 80b8 	beq.w	80068fc <_printf_i+0x198>
 800678c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006790:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006794:	e03a      	b.n	800680c <_printf_i+0xa8>
 8006796:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800679a:	2b15      	cmp	r3, #21
 800679c:	d8f6      	bhi.n	800678c <_printf_i+0x28>
 800679e:	a101      	add	r1, pc, #4	@ (adr r1, 80067a4 <_printf_i+0x40>)
 80067a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067a4:	080067fd 	.word	0x080067fd
 80067a8:	08006811 	.word	0x08006811
 80067ac:	0800678d 	.word	0x0800678d
 80067b0:	0800678d 	.word	0x0800678d
 80067b4:	0800678d 	.word	0x0800678d
 80067b8:	0800678d 	.word	0x0800678d
 80067bc:	08006811 	.word	0x08006811
 80067c0:	0800678d 	.word	0x0800678d
 80067c4:	0800678d 	.word	0x0800678d
 80067c8:	0800678d 	.word	0x0800678d
 80067cc:	0800678d 	.word	0x0800678d
 80067d0:	0800690f 	.word	0x0800690f
 80067d4:	0800683b 	.word	0x0800683b
 80067d8:	080068c9 	.word	0x080068c9
 80067dc:	0800678d 	.word	0x0800678d
 80067e0:	0800678d 	.word	0x0800678d
 80067e4:	08006931 	.word	0x08006931
 80067e8:	0800678d 	.word	0x0800678d
 80067ec:	0800683b 	.word	0x0800683b
 80067f0:	0800678d 	.word	0x0800678d
 80067f4:	0800678d 	.word	0x0800678d
 80067f8:	080068d1 	.word	0x080068d1
 80067fc:	6833      	ldr	r3, [r6, #0]
 80067fe:	1d1a      	adds	r2, r3, #4
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6032      	str	r2, [r6, #0]
 8006804:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006808:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800680c:	2301      	movs	r3, #1
 800680e:	e09c      	b.n	800694a <_printf_i+0x1e6>
 8006810:	6833      	ldr	r3, [r6, #0]
 8006812:	6820      	ldr	r0, [r4, #0]
 8006814:	1d19      	adds	r1, r3, #4
 8006816:	6031      	str	r1, [r6, #0]
 8006818:	0606      	lsls	r6, r0, #24
 800681a:	d501      	bpl.n	8006820 <_printf_i+0xbc>
 800681c:	681d      	ldr	r5, [r3, #0]
 800681e:	e003      	b.n	8006828 <_printf_i+0xc4>
 8006820:	0645      	lsls	r5, r0, #25
 8006822:	d5fb      	bpl.n	800681c <_printf_i+0xb8>
 8006824:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006828:	2d00      	cmp	r5, #0
 800682a:	da03      	bge.n	8006834 <_printf_i+0xd0>
 800682c:	232d      	movs	r3, #45	@ 0x2d
 800682e:	426d      	negs	r5, r5
 8006830:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006834:	4858      	ldr	r0, [pc, #352]	@ (8006998 <_printf_i+0x234>)
 8006836:	230a      	movs	r3, #10
 8006838:	e011      	b.n	800685e <_printf_i+0xfa>
 800683a:	6821      	ldr	r1, [r4, #0]
 800683c:	6833      	ldr	r3, [r6, #0]
 800683e:	0608      	lsls	r0, r1, #24
 8006840:	f853 5b04 	ldr.w	r5, [r3], #4
 8006844:	d402      	bmi.n	800684c <_printf_i+0xe8>
 8006846:	0649      	lsls	r1, r1, #25
 8006848:	bf48      	it	mi
 800684a:	b2ad      	uxthmi	r5, r5
 800684c:	2f6f      	cmp	r7, #111	@ 0x6f
 800684e:	4852      	ldr	r0, [pc, #328]	@ (8006998 <_printf_i+0x234>)
 8006850:	6033      	str	r3, [r6, #0]
 8006852:	bf14      	ite	ne
 8006854:	230a      	movne	r3, #10
 8006856:	2308      	moveq	r3, #8
 8006858:	2100      	movs	r1, #0
 800685a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800685e:	6866      	ldr	r6, [r4, #4]
 8006860:	60a6      	str	r6, [r4, #8]
 8006862:	2e00      	cmp	r6, #0
 8006864:	db05      	blt.n	8006872 <_printf_i+0x10e>
 8006866:	6821      	ldr	r1, [r4, #0]
 8006868:	432e      	orrs	r6, r5
 800686a:	f021 0104 	bic.w	r1, r1, #4
 800686e:	6021      	str	r1, [r4, #0]
 8006870:	d04b      	beq.n	800690a <_printf_i+0x1a6>
 8006872:	4616      	mov	r6, r2
 8006874:	fbb5 f1f3 	udiv	r1, r5, r3
 8006878:	fb03 5711 	mls	r7, r3, r1, r5
 800687c:	5dc7      	ldrb	r7, [r0, r7]
 800687e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006882:	462f      	mov	r7, r5
 8006884:	42bb      	cmp	r3, r7
 8006886:	460d      	mov	r5, r1
 8006888:	d9f4      	bls.n	8006874 <_printf_i+0x110>
 800688a:	2b08      	cmp	r3, #8
 800688c:	d10b      	bne.n	80068a6 <_printf_i+0x142>
 800688e:	6823      	ldr	r3, [r4, #0]
 8006890:	07df      	lsls	r7, r3, #31
 8006892:	d508      	bpl.n	80068a6 <_printf_i+0x142>
 8006894:	6923      	ldr	r3, [r4, #16]
 8006896:	6861      	ldr	r1, [r4, #4]
 8006898:	4299      	cmp	r1, r3
 800689a:	bfde      	ittt	le
 800689c:	2330      	movle	r3, #48	@ 0x30
 800689e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068a2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80068a6:	1b92      	subs	r2, r2, r6
 80068a8:	6122      	str	r2, [r4, #16]
 80068aa:	f8cd a000 	str.w	sl, [sp]
 80068ae:	464b      	mov	r3, r9
 80068b0:	aa03      	add	r2, sp, #12
 80068b2:	4621      	mov	r1, r4
 80068b4:	4640      	mov	r0, r8
 80068b6:	f7ff fee7 	bl	8006688 <_printf_common>
 80068ba:	3001      	adds	r0, #1
 80068bc:	d14a      	bne.n	8006954 <_printf_i+0x1f0>
 80068be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80068c2:	b004      	add	sp, #16
 80068c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	f043 0320 	orr.w	r3, r3, #32
 80068ce:	6023      	str	r3, [r4, #0]
 80068d0:	4832      	ldr	r0, [pc, #200]	@ (800699c <_printf_i+0x238>)
 80068d2:	2778      	movs	r7, #120	@ 0x78
 80068d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	6831      	ldr	r1, [r6, #0]
 80068dc:	061f      	lsls	r7, r3, #24
 80068de:	f851 5b04 	ldr.w	r5, [r1], #4
 80068e2:	d402      	bmi.n	80068ea <_printf_i+0x186>
 80068e4:	065f      	lsls	r7, r3, #25
 80068e6:	bf48      	it	mi
 80068e8:	b2ad      	uxthmi	r5, r5
 80068ea:	6031      	str	r1, [r6, #0]
 80068ec:	07d9      	lsls	r1, r3, #31
 80068ee:	bf44      	itt	mi
 80068f0:	f043 0320 	orrmi.w	r3, r3, #32
 80068f4:	6023      	strmi	r3, [r4, #0]
 80068f6:	b11d      	cbz	r5, 8006900 <_printf_i+0x19c>
 80068f8:	2310      	movs	r3, #16
 80068fa:	e7ad      	b.n	8006858 <_printf_i+0xf4>
 80068fc:	4826      	ldr	r0, [pc, #152]	@ (8006998 <_printf_i+0x234>)
 80068fe:	e7e9      	b.n	80068d4 <_printf_i+0x170>
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	f023 0320 	bic.w	r3, r3, #32
 8006906:	6023      	str	r3, [r4, #0]
 8006908:	e7f6      	b.n	80068f8 <_printf_i+0x194>
 800690a:	4616      	mov	r6, r2
 800690c:	e7bd      	b.n	800688a <_printf_i+0x126>
 800690e:	6833      	ldr	r3, [r6, #0]
 8006910:	6825      	ldr	r5, [r4, #0]
 8006912:	6961      	ldr	r1, [r4, #20]
 8006914:	1d18      	adds	r0, r3, #4
 8006916:	6030      	str	r0, [r6, #0]
 8006918:	062e      	lsls	r6, r5, #24
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	d501      	bpl.n	8006922 <_printf_i+0x1be>
 800691e:	6019      	str	r1, [r3, #0]
 8006920:	e002      	b.n	8006928 <_printf_i+0x1c4>
 8006922:	0668      	lsls	r0, r5, #25
 8006924:	d5fb      	bpl.n	800691e <_printf_i+0x1ba>
 8006926:	8019      	strh	r1, [r3, #0]
 8006928:	2300      	movs	r3, #0
 800692a:	6123      	str	r3, [r4, #16]
 800692c:	4616      	mov	r6, r2
 800692e:	e7bc      	b.n	80068aa <_printf_i+0x146>
 8006930:	6833      	ldr	r3, [r6, #0]
 8006932:	1d1a      	adds	r2, r3, #4
 8006934:	6032      	str	r2, [r6, #0]
 8006936:	681e      	ldr	r6, [r3, #0]
 8006938:	6862      	ldr	r2, [r4, #4]
 800693a:	2100      	movs	r1, #0
 800693c:	4630      	mov	r0, r6
 800693e:	f7f9 fc57 	bl	80001f0 <memchr>
 8006942:	b108      	cbz	r0, 8006948 <_printf_i+0x1e4>
 8006944:	1b80      	subs	r0, r0, r6
 8006946:	6060      	str	r0, [r4, #4]
 8006948:	6863      	ldr	r3, [r4, #4]
 800694a:	6123      	str	r3, [r4, #16]
 800694c:	2300      	movs	r3, #0
 800694e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006952:	e7aa      	b.n	80068aa <_printf_i+0x146>
 8006954:	6923      	ldr	r3, [r4, #16]
 8006956:	4632      	mov	r2, r6
 8006958:	4649      	mov	r1, r9
 800695a:	4640      	mov	r0, r8
 800695c:	47d0      	blx	sl
 800695e:	3001      	adds	r0, #1
 8006960:	d0ad      	beq.n	80068be <_printf_i+0x15a>
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	079b      	lsls	r3, r3, #30
 8006966:	d413      	bmi.n	8006990 <_printf_i+0x22c>
 8006968:	68e0      	ldr	r0, [r4, #12]
 800696a:	9b03      	ldr	r3, [sp, #12]
 800696c:	4298      	cmp	r0, r3
 800696e:	bfb8      	it	lt
 8006970:	4618      	movlt	r0, r3
 8006972:	e7a6      	b.n	80068c2 <_printf_i+0x15e>
 8006974:	2301      	movs	r3, #1
 8006976:	4632      	mov	r2, r6
 8006978:	4649      	mov	r1, r9
 800697a:	4640      	mov	r0, r8
 800697c:	47d0      	blx	sl
 800697e:	3001      	adds	r0, #1
 8006980:	d09d      	beq.n	80068be <_printf_i+0x15a>
 8006982:	3501      	adds	r5, #1
 8006984:	68e3      	ldr	r3, [r4, #12]
 8006986:	9903      	ldr	r1, [sp, #12]
 8006988:	1a5b      	subs	r3, r3, r1
 800698a:	42ab      	cmp	r3, r5
 800698c:	dcf2      	bgt.n	8006974 <_printf_i+0x210>
 800698e:	e7eb      	b.n	8006968 <_printf_i+0x204>
 8006990:	2500      	movs	r5, #0
 8006992:	f104 0619 	add.w	r6, r4, #25
 8006996:	e7f5      	b.n	8006984 <_printf_i+0x220>
 8006998:	0800813d 	.word	0x0800813d
 800699c:	0800814e 	.word	0x0800814e

080069a0 <__sflush_r>:
 80069a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069a8:	0716      	lsls	r6, r2, #28
 80069aa:	4605      	mov	r5, r0
 80069ac:	460c      	mov	r4, r1
 80069ae:	d454      	bmi.n	8006a5a <__sflush_r+0xba>
 80069b0:	684b      	ldr	r3, [r1, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	dc02      	bgt.n	80069bc <__sflush_r+0x1c>
 80069b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	dd48      	ble.n	8006a4e <__sflush_r+0xae>
 80069bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069be:	2e00      	cmp	r6, #0
 80069c0:	d045      	beq.n	8006a4e <__sflush_r+0xae>
 80069c2:	2300      	movs	r3, #0
 80069c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80069c8:	682f      	ldr	r7, [r5, #0]
 80069ca:	6a21      	ldr	r1, [r4, #32]
 80069cc:	602b      	str	r3, [r5, #0]
 80069ce:	d030      	beq.n	8006a32 <__sflush_r+0x92>
 80069d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80069d2:	89a3      	ldrh	r3, [r4, #12]
 80069d4:	0759      	lsls	r1, r3, #29
 80069d6:	d505      	bpl.n	80069e4 <__sflush_r+0x44>
 80069d8:	6863      	ldr	r3, [r4, #4]
 80069da:	1ad2      	subs	r2, r2, r3
 80069dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80069de:	b10b      	cbz	r3, 80069e4 <__sflush_r+0x44>
 80069e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80069e2:	1ad2      	subs	r2, r2, r3
 80069e4:	2300      	movs	r3, #0
 80069e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069e8:	6a21      	ldr	r1, [r4, #32]
 80069ea:	4628      	mov	r0, r5
 80069ec:	47b0      	blx	r6
 80069ee:	1c43      	adds	r3, r0, #1
 80069f0:	89a3      	ldrh	r3, [r4, #12]
 80069f2:	d106      	bne.n	8006a02 <__sflush_r+0x62>
 80069f4:	6829      	ldr	r1, [r5, #0]
 80069f6:	291d      	cmp	r1, #29
 80069f8:	d82b      	bhi.n	8006a52 <__sflush_r+0xb2>
 80069fa:	4a2a      	ldr	r2, [pc, #168]	@ (8006aa4 <__sflush_r+0x104>)
 80069fc:	40ca      	lsrs	r2, r1
 80069fe:	07d6      	lsls	r6, r2, #31
 8006a00:	d527      	bpl.n	8006a52 <__sflush_r+0xb2>
 8006a02:	2200      	movs	r2, #0
 8006a04:	6062      	str	r2, [r4, #4]
 8006a06:	04d9      	lsls	r1, r3, #19
 8006a08:	6922      	ldr	r2, [r4, #16]
 8006a0a:	6022      	str	r2, [r4, #0]
 8006a0c:	d504      	bpl.n	8006a18 <__sflush_r+0x78>
 8006a0e:	1c42      	adds	r2, r0, #1
 8006a10:	d101      	bne.n	8006a16 <__sflush_r+0x76>
 8006a12:	682b      	ldr	r3, [r5, #0]
 8006a14:	b903      	cbnz	r3, 8006a18 <__sflush_r+0x78>
 8006a16:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a1a:	602f      	str	r7, [r5, #0]
 8006a1c:	b1b9      	cbz	r1, 8006a4e <__sflush_r+0xae>
 8006a1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a22:	4299      	cmp	r1, r3
 8006a24:	d002      	beq.n	8006a2c <__sflush_r+0x8c>
 8006a26:	4628      	mov	r0, r5
 8006a28:	f000 fa24 	bl	8006e74 <_free_r>
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a30:	e00d      	b.n	8006a4e <__sflush_r+0xae>
 8006a32:	2301      	movs	r3, #1
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b0      	blx	r6
 8006a38:	4602      	mov	r2, r0
 8006a3a:	1c50      	adds	r0, r2, #1
 8006a3c:	d1c9      	bne.n	80069d2 <__sflush_r+0x32>
 8006a3e:	682b      	ldr	r3, [r5, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d0c6      	beq.n	80069d2 <__sflush_r+0x32>
 8006a44:	2b1d      	cmp	r3, #29
 8006a46:	d001      	beq.n	8006a4c <__sflush_r+0xac>
 8006a48:	2b16      	cmp	r3, #22
 8006a4a:	d11e      	bne.n	8006a8a <__sflush_r+0xea>
 8006a4c:	602f      	str	r7, [r5, #0]
 8006a4e:	2000      	movs	r0, #0
 8006a50:	e022      	b.n	8006a98 <__sflush_r+0xf8>
 8006a52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a56:	b21b      	sxth	r3, r3
 8006a58:	e01b      	b.n	8006a92 <__sflush_r+0xf2>
 8006a5a:	690f      	ldr	r7, [r1, #16]
 8006a5c:	2f00      	cmp	r7, #0
 8006a5e:	d0f6      	beq.n	8006a4e <__sflush_r+0xae>
 8006a60:	0793      	lsls	r3, r2, #30
 8006a62:	680e      	ldr	r6, [r1, #0]
 8006a64:	bf08      	it	eq
 8006a66:	694b      	ldreq	r3, [r1, #20]
 8006a68:	600f      	str	r7, [r1, #0]
 8006a6a:	bf18      	it	ne
 8006a6c:	2300      	movne	r3, #0
 8006a6e:	eba6 0807 	sub.w	r8, r6, r7
 8006a72:	608b      	str	r3, [r1, #8]
 8006a74:	f1b8 0f00 	cmp.w	r8, #0
 8006a78:	dde9      	ble.n	8006a4e <__sflush_r+0xae>
 8006a7a:	6a21      	ldr	r1, [r4, #32]
 8006a7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006a7e:	4643      	mov	r3, r8
 8006a80:	463a      	mov	r2, r7
 8006a82:	4628      	mov	r0, r5
 8006a84:	47b0      	blx	r6
 8006a86:	2800      	cmp	r0, #0
 8006a88:	dc08      	bgt.n	8006a9c <__sflush_r+0xfc>
 8006a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a92:	81a3      	strh	r3, [r4, #12]
 8006a94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a9c:	4407      	add	r7, r0
 8006a9e:	eba8 0800 	sub.w	r8, r8, r0
 8006aa2:	e7e7      	b.n	8006a74 <__sflush_r+0xd4>
 8006aa4:	20400001 	.word	0x20400001

08006aa8 <_fflush_r>:
 8006aa8:	b538      	push	{r3, r4, r5, lr}
 8006aaa:	690b      	ldr	r3, [r1, #16]
 8006aac:	4605      	mov	r5, r0
 8006aae:	460c      	mov	r4, r1
 8006ab0:	b913      	cbnz	r3, 8006ab8 <_fflush_r+0x10>
 8006ab2:	2500      	movs	r5, #0
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	bd38      	pop	{r3, r4, r5, pc}
 8006ab8:	b118      	cbz	r0, 8006ac2 <_fflush_r+0x1a>
 8006aba:	6a03      	ldr	r3, [r0, #32]
 8006abc:	b90b      	cbnz	r3, 8006ac2 <_fflush_r+0x1a>
 8006abe:	f7ff fb25 	bl	800610c <__sinit>
 8006ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0f3      	beq.n	8006ab2 <_fflush_r+0xa>
 8006aca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006acc:	07d0      	lsls	r0, r2, #31
 8006ace:	d404      	bmi.n	8006ada <_fflush_r+0x32>
 8006ad0:	0599      	lsls	r1, r3, #22
 8006ad2:	d402      	bmi.n	8006ada <_fflush_r+0x32>
 8006ad4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ad6:	f7ff fbf2 	bl	80062be <__retarget_lock_acquire_recursive>
 8006ada:	4628      	mov	r0, r5
 8006adc:	4621      	mov	r1, r4
 8006ade:	f7ff ff5f 	bl	80069a0 <__sflush_r>
 8006ae2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ae4:	07da      	lsls	r2, r3, #31
 8006ae6:	4605      	mov	r5, r0
 8006ae8:	d4e4      	bmi.n	8006ab4 <_fflush_r+0xc>
 8006aea:	89a3      	ldrh	r3, [r4, #12]
 8006aec:	059b      	lsls	r3, r3, #22
 8006aee:	d4e1      	bmi.n	8006ab4 <_fflush_r+0xc>
 8006af0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006af2:	f7ff fbe5 	bl	80062c0 <__retarget_lock_release_recursive>
 8006af6:	e7dd      	b.n	8006ab4 <_fflush_r+0xc>

08006af8 <__malloc_lock>:
 8006af8:	4801      	ldr	r0, [pc, #4]	@ (8006b00 <__malloc_lock+0x8>)
 8006afa:	f7ff bbe0 	b.w	80062be <__retarget_lock_acquire_recursive>
 8006afe:	bf00      	nop
 8006b00:	20025d1c 	.word	0x20025d1c

08006b04 <__malloc_unlock>:
 8006b04:	4801      	ldr	r0, [pc, #4]	@ (8006b0c <__malloc_unlock+0x8>)
 8006b06:	f7ff bbdb 	b.w	80062c0 <__retarget_lock_release_recursive>
 8006b0a:	bf00      	nop
 8006b0c:	20025d1c 	.word	0x20025d1c

08006b10 <__sread>:
 8006b10:	b510      	push	{r4, lr}
 8006b12:	460c      	mov	r4, r1
 8006b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b18:	f000 f956 	bl	8006dc8 <_read_r>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	bfab      	itete	ge
 8006b20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b22:	89a3      	ldrhlt	r3, [r4, #12]
 8006b24:	181b      	addge	r3, r3, r0
 8006b26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b2a:	bfac      	ite	ge
 8006b2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b2e:	81a3      	strhlt	r3, [r4, #12]
 8006b30:	bd10      	pop	{r4, pc}

08006b32 <__swrite>:
 8006b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b36:	461f      	mov	r7, r3
 8006b38:	898b      	ldrh	r3, [r1, #12]
 8006b3a:	05db      	lsls	r3, r3, #23
 8006b3c:	4605      	mov	r5, r0
 8006b3e:	460c      	mov	r4, r1
 8006b40:	4616      	mov	r6, r2
 8006b42:	d505      	bpl.n	8006b50 <__swrite+0x1e>
 8006b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b48:	2302      	movs	r3, #2
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f000 f92a 	bl	8006da4 <_lseek_r>
 8006b50:	89a3      	ldrh	r3, [r4, #12]
 8006b52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b5a:	81a3      	strh	r3, [r4, #12]
 8006b5c:	4632      	mov	r2, r6
 8006b5e:	463b      	mov	r3, r7
 8006b60:	4628      	mov	r0, r5
 8006b62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b66:	f000 b951 	b.w	8006e0c <_write_r>

08006b6a <__sseek>:
 8006b6a:	b510      	push	{r4, lr}
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b72:	f000 f917 	bl	8006da4 <_lseek_r>
 8006b76:	1c43      	adds	r3, r0, #1
 8006b78:	89a3      	ldrh	r3, [r4, #12]
 8006b7a:	bf15      	itete	ne
 8006b7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b86:	81a3      	strheq	r3, [r4, #12]
 8006b88:	bf18      	it	ne
 8006b8a:	81a3      	strhne	r3, [r4, #12]
 8006b8c:	bd10      	pop	{r4, pc}

08006b8e <__sclose>:
 8006b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b92:	f000 b94d 	b.w	8006e30 <_close_r>

08006b96 <__swbuf_r>:
 8006b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b98:	460e      	mov	r6, r1
 8006b9a:	4614      	mov	r4, r2
 8006b9c:	4605      	mov	r5, r0
 8006b9e:	b118      	cbz	r0, 8006ba8 <__swbuf_r+0x12>
 8006ba0:	6a03      	ldr	r3, [r0, #32]
 8006ba2:	b90b      	cbnz	r3, 8006ba8 <__swbuf_r+0x12>
 8006ba4:	f7ff fab2 	bl	800610c <__sinit>
 8006ba8:	69a3      	ldr	r3, [r4, #24]
 8006baa:	60a3      	str	r3, [r4, #8]
 8006bac:	89a3      	ldrh	r3, [r4, #12]
 8006bae:	071a      	lsls	r2, r3, #28
 8006bb0:	d501      	bpl.n	8006bb6 <__swbuf_r+0x20>
 8006bb2:	6923      	ldr	r3, [r4, #16]
 8006bb4:	b943      	cbnz	r3, 8006bc8 <__swbuf_r+0x32>
 8006bb6:	4621      	mov	r1, r4
 8006bb8:	4628      	mov	r0, r5
 8006bba:	f000 f82b 	bl	8006c14 <__swsetup_r>
 8006bbe:	b118      	cbz	r0, 8006bc8 <__swbuf_r+0x32>
 8006bc0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc8:	6823      	ldr	r3, [r4, #0]
 8006bca:	6922      	ldr	r2, [r4, #16]
 8006bcc:	1a98      	subs	r0, r3, r2
 8006bce:	6963      	ldr	r3, [r4, #20]
 8006bd0:	b2f6      	uxtb	r6, r6
 8006bd2:	4283      	cmp	r3, r0
 8006bd4:	4637      	mov	r7, r6
 8006bd6:	dc05      	bgt.n	8006be4 <__swbuf_r+0x4e>
 8006bd8:	4621      	mov	r1, r4
 8006bda:	4628      	mov	r0, r5
 8006bdc:	f7ff ff64 	bl	8006aa8 <_fflush_r>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d1ed      	bne.n	8006bc0 <__swbuf_r+0x2a>
 8006be4:	68a3      	ldr	r3, [r4, #8]
 8006be6:	3b01      	subs	r3, #1
 8006be8:	60a3      	str	r3, [r4, #8]
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	6022      	str	r2, [r4, #0]
 8006bf0:	701e      	strb	r6, [r3, #0]
 8006bf2:	6962      	ldr	r2, [r4, #20]
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d004      	beq.n	8006c04 <__swbuf_r+0x6e>
 8006bfa:	89a3      	ldrh	r3, [r4, #12]
 8006bfc:	07db      	lsls	r3, r3, #31
 8006bfe:	d5e1      	bpl.n	8006bc4 <__swbuf_r+0x2e>
 8006c00:	2e0a      	cmp	r6, #10
 8006c02:	d1df      	bne.n	8006bc4 <__swbuf_r+0x2e>
 8006c04:	4621      	mov	r1, r4
 8006c06:	4628      	mov	r0, r5
 8006c08:	f7ff ff4e 	bl	8006aa8 <_fflush_r>
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	d0d9      	beq.n	8006bc4 <__swbuf_r+0x2e>
 8006c10:	e7d6      	b.n	8006bc0 <__swbuf_r+0x2a>
	...

08006c14 <__swsetup_r>:
 8006c14:	b538      	push	{r3, r4, r5, lr}
 8006c16:	4b29      	ldr	r3, [pc, #164]	@ (8006cbc <__swsetup_r+0xa8>)
 8006c18:	4605      	mov	r5, r0
 8006c1a:	6818      	ldr	r0, [r3, #0]
 8006c1c:	460c      	mov	r4, r1
 8006c1e:	b118      	cbz	r0, 8006c28 <__swsetup_r+0x14>
 8006c20:	6a03      	ldr	r3, [r0, #32]
 8006c22:	b90b      	cbnz	r3, 8006c28 <__swsetup_r+0x14>
 8006c24:	f7ff fa72 	bl	800610c <__sinit>
 8006c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c2c:	0719      	lsls	r1, r3, #28
 8006c2e:	d422      	bmi.n	8006c76 <__swsetup_r+0x62>
 8006c30:	06da      	lsls	r2, r3, #27
 8006c32:	d407      	bmi.n	8006c44 <__swsetup_r+0x30>
 8006c34:	2209      	movs	r2, #9
 8006c36:	602a      	str	r2, [r5, #0]
 8006c38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c3c:	81a3      	strh	r3, [r4, #12]
 8006c3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c42:	e033      	b.n	8006cac <__swsetup_r+0x98>
 8006c44:	0758      	lsls	r0, r3, #29
 8006c46:	d512      	bpl.n	8006c6e <__swsetup_r+0x5a>
 8006c48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c4a:	b141      	cbz	r1, 8006c5e <__swsetup_r+0x4a>
 8006c4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c50:	4299      	cmp	r1, r3
 8006c52:	d002      	beq.n	8006c5a <__swsetup_r+0x46>
 8006c54:	4628      	mov	r0, r5
 8006c56:	f000 f90d 	bl	8006e74 <_free_r>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c5e:	89a3      	ldrh	r3, [r4, #12]
 8006c60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006c64:	81a3      	strh	r3, [r4, #12]
 8006c66:	2300      	movs	r3, #0
 8006c68:	6063      	str	r3, [r4, #4]
 8006c6a:	6923      	ldr	r3, [r4, #16]
 8006c6c:	6023      	str	r3, [r4, #0]
 8006c6e:	89a3      	ldrh	r3, [r4, #12]
 8006c70:	f043 0308 	orr.w	r3, r3, #8
 8006c74:	81a3      	strh	r3, [r4, #12]
 8006c76:	6923      	ldr	r3, [r4, #16]
 8006c78:	b94b      	cbnz	r3, 8006c8e <__swsetup_r+0x7a>
 8006c7a:	89a3      	ldrh	r3, [r4, #12]
 8006c7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c84:	d003      	beq.n	8006c8e <__swsetup_r+0x7a>
 8006c86:	4621      	mov	r1, r4
 8006c88:	4628      	mov	r0, r5
 8006c8a:	f000 f83f 	bl	8006d0c <__smakebuf_r>
 8006c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c92:	f013 0201 	ands.w	r2, r3, #1
 8006c96:	d00a      	beq.n	8006cae <__swsetup_r+0x9a>
 8006c98:	2200      	movs	r2, #0
 8006c9a:	60a2      	str	r2, [r4, #8]
 8006c9c:	6962      	ldr	r2, [r4, #20]
 8006c9e:	4252      	negs	r2, r2
 8006ca0:	61a2      	str	r2, [r4, #24]
 8006ca2:	6922      	ldr	r2, [r4, #16]
 8006ca4:	b942      	cbnz	r2, 8006cb8 <__swsetup_r+0xa4>
 8006ca6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006caa:	d1c5      	bne.n	8006c38 <__swsetup_r+0x24>
 8006cac:	bd38      	pop	{r3, r4, r5, pc}
 8006cae:	0799      	lsls	r1, r3, #30
 8006cb0:	bf58      	it	pl
 8006cb2:	6962      	ldrpl	r2, [r4, #20]
 8006cb4:	60a2      	str	r2, [r4, #8]
 8006cb6:	e7f4      	b.n	8006ca2 <__swsetup_r+0x8e>
 8006cb8:	2000      	movs	r0, #0
 8006cba:	e7f7      	b.n	8006cac <__swsetup_r+0x98>
 8006cbc:	20000028 	.word	0x20000028

08006cc0 <__swhatbuf_r>:
 8006cc0:	b570      	push	{r4, r5, r6, lr}
 8006cc2:	460c      	mov	r4, r1
 8006cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc8:	2900      	cmp	r1, #0
 8006cca:	b096      	sub	sp, #88	@ 0x58
 8006ccc:	4615      	mov	r5, r2
 8006cce:	461e      	mov	r6, r3
 8006cd0:	da0d      	bge.n	8006cee <__swhatbuf_r+0x2e>
 8006cd2:	89a3      	ldrh	r3, [r4, #12]
 8006cd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006cd8:	f04f 0100 	mov.w	r1, #0
 8006cdc:	bf14      	ite	ne
 8006cde:	2340      	movne	r3, #64	@ 0x40
 8006ce0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	6031      	str	r1, [r6, #0]
 8006ce8:	602b      	str	r3, [r5, #0]
 8006cea:	b016      	add	sp, #88	@ 0x58
 8006cec:	bd70      	pop	{r4, r5, r6, pc}
 8006cee:	466a      	mov	r2, sp
 8006cf0:	f000 f8ae 	bl	8006e50 <_fstat_r>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	dbec      	blt.n	8006cd2 <__swhatbuf_r+0x12>
 8006cf8:	9901      	ldr	r1, [sp, #4]
 8006cfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006cfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006d02:	4259      	negs	r1, r3
 8006d04:	4159      	adcs	r1, r3
 8006d06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d0a:	e7eb      	b.n	8006ce4 <__swhatbuf_r+0x24>

08006d0c <__smakebuf_r>:
 8006d0c:	898b      	ldrh	r3, [r1, #12]
 8006d0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d10:	079d      	lsls	r5, r3, #30
 8006d12:	4606      	mov	r6, r0
 8006d14:	460c      	mov	r4, r1
 8006d16:	d507      	bpl.n	8006d28 <__smakebuf_r+0x1c>
 8006d18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	6123      	str	r3, [r4, #16]
 8006d20:	2301      	movs	r3, #1
 8006d22:	6163      	str	r3, [r4, #20]
 8006d24:	b003      	add	sp, #12
 8006d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d28:	ab01      	add	r3, sp, #4
 8006d2a:	466a      	mov	r2, sp
 8006d2c:	f7ff ffc8 	bl	8006cc0 <__swhatbuf_r>
 8006d30:	9f00      	ldr	r7, [sp, #0]
 8006d32:	4605      	mov	r5, r0
 8006d34:	4639      	mov	r1, r7
 8006d36:	4630      	mov	r0, r6
 8006d38:	f7ff fc26 	bl	8006588 <_malloc_r>
 8006d3c:	b948      	cbnz	r0, 8006d52 <__smakebuf_r+0x46>
 8006d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d42:	059a      	lsls	r2, r3, #22
 8006d44:	d4ee      	bmi.n	8006d24 <__smakebuf_r+0x18>
 8006d46:	f023 0303 	bic.w	r3, r3, #3
 8006d4a:	f043 0302 	orr.w	r3, r3, #2
 8006d4e:	81a3      	strh	r3, [r4, #12]
 8006d50:	e7e2      	b.n	8006d18 <__smakebuf_r+0xc>
 8006d52:	89a3      	ldrh	r3, [r4, #12]
 8006d54:	6020      	str	r0, [r4, #0]
 8006d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d5a:	81a3      	strh	r3, [r4, #12]
 8006d5c:	9b01      	ldr	r3, [sp, #4]
 8006d5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006d62:	b15b      	cbz	r3, 8006d7c <__smakebuf_r+0x70>
 8006d64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d68:	4630      	mov	r0, r6
 8006d6a:	f000 f80b 	bl	8006d84 <_isatty_r>
 8006d6e:	b128      	cbz	r0, 8006d7c <__smakebuf_r+0x70>
 8006d70:	89a3      	ldrh	r3, [r4, #12]
 8006d72:	f023 0303 	bic.w	r3, r3, #3
 8006d76:	f043 0301 	orr.w	r3, r3, #1
 8006d7a:	81a3      	strh	r3, [r4, #12]
 8006d7c:	89a3      	ldrh	r3, [r4, #12]
 8006d7e:	431d      	orrs	r5, r3
 8006d80:	81a5      	strh	r5, [r4, #12]
 8006d82:	e7cf      	b.n	8006d24 <__smakebuf_r+0x18>

08006d84 <_isatty_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	4d06      	ldr	r5, [pc, #24]	@ (8006da0 <_isatty_r+0x1c>)
 8006d88:	2300      	movs	r3, #0
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	4608      	mov	r0, r1
 8006d8e:	602b      	str	r3, [r5, #0]
 8006d90:	f7fb fcec 	bl	800276c <_isatty>
 8006d94:	1c43      	adds	r3, r0, #1
 8006d96:	d102      	bne.n	8006d9e <_isatty_r+0x1a>
 8006d98:	682b      	ldr	r3, [r5, #0]
 8006d9a:	b103      	cbz	r3, 8006d9e <_isatty_r+0x1a>
 8006d9c:	6023      	str	r3, [r4, #0]
 8006d9e:	bd38      	pop	{r3, r4, r5, pc}
 8006da0:	20025d28 	.word	0x20025d28

08006da4 <_lseek_r>:
 8006da4:	b538      	push	{r3, r4, r5, lr}
 8006da6:	4d07      	ldr	r5, [pc, #28]	@ (8006dc4 <_lseek_r+0x20>)
 8006da8:	4604      	mov	r4, r0
 8006daa:	4608      	mov	r0, r1
 8006dac:	4611      	mov	r1, r2
 8006dae:	2200      	movs	r2, #0
 8006db0:	602a      	str	r2, [r5, #0]
 8006db2:	461a      	mov	r2, r3
 8006db4:	f7fb fce5 	bl	8002782 <_lseek>
 8006db8:	1c43      	adds	r3, r0, #1
 8006dba:	d102      	bne.n	8006dc2 <_lseek_r+0x1e>
 8006dbc:	682b      	ldr	r3, [r5, #0]
 8006dbe:	b103      	cbz	r3, 8006dc2 <_lseek_r+0x1e>
 8006dc0:	6023      	str	r3, [r4, #0]
 8006dc2:	bd38      	pop	{r3, r4, r5, pc}
 8006dc4:	20025d28 	.word	0x20025d28

08006dc8 <_read_r>:
 8006dc8:	b538      	push	{r3, r4, r5, lr}
 8006dca:	4d07      	ldr	r5, [pc, #28]	@ (8006de8 <_read_r+0x20>)
 8006dcc:	4604      	mov	r4, r0
 8006dce:	4608      	mov	r0, r1
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	602a      	str	r2, [r5, #0]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	f7fb fc73 	bl	80026c2 <_read>
 8006ddc:	1c43      	adds	r3, r0, #1
 8006dde:	d102      	bne.n	8006de6 <_read_r+0x1e>
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	b103      	cbz	r3, 8006de6 <_read_r+0x1e>
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	bd38      	pop	{r3, r4, r5, pc}
 8006de8:	20025d28 	.word	0x20025d28

08006dec <_sbrk_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	4d06      	ldr	r5, [pc, #24]	@ (8006e08 <_sbrk_r+0x1c>)
 8006df0:	2300      	movs	r3, #0
 8006df2:	4604      	mov	r4, r0
 8006df4:	4608      	mov	r0, r1
 8006df6:	602b      	str	r3, [r5, #0]
 8006df8:	f7fb fcd0 	bl	800279c <_sbrk>
 8006dfc:	1c43      	adds	r3, r0, #1
 8006dfe:	d102      	bne.n	8006e06 <_sbrk_r+0x1a>
 8006e00:	682b      	ldr	r3, [r5, #0]
 8006e02:	b103      	cbz	r3, 8006e06 <_sbrk_r+0x1a>
 8006e04:	6023      	str	r3, [r4, #0]
 8006e06:	bd38      	pop	{r3, r4, r5, pc}
 8006e08:	20025d28 	.word	0x20025d28

08006e0c <_write_r>:
 8006e0c:	b538      	push	{r3, r4, r5, lr}
 8006e0e:	4d07      	ldr	r5, [pc, #28]	@ (8006e2c <_write_r+0x20>)
 8006e10:	4604      	mov	r4, r0
 8006e12:	4608      	mov	r0, r1
 8006e14:	4611      	mov	r1, r2
 8006e16:	2200      	movs	r2, #0
 8006e18:	602a      	str	r2, [r5, #0]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	f7fb fc6e 	bl	80026fc <_write>
 8006e20:	1c43      	adds	r3, r0, #1
 8006e22:	d102      	bne.n	8006e2a <_write_r+0x1e>
 8006e24:	682b      	ldr	r3, [r5, #0]
 8006e26:	b103      	cbz	r3, 8006e2a <_write_r+0x1e>
 8006e28:	6023      	str	r3, [r4, #0]
 8006e2a:	bd38      	pop	{r3, r4, r5, pc}
 8006e2c:	20025d28 	.word	0x20025d28

08006e30 <_close_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	4d06      	ldr	r5, [pc, #24]	@ (8006e4c <_close_r+0x1c>)
 8006e34:	2300      	movs	r3, #0
 8006e36:	4604      	mov	r4, r0
 8006e38:	4608      	mov	r0, r1
 8006e3a:	602b      	str	r3, [r5, #0]
 8006e3c:	f7fb fc7a 	bl	8002734 <_close>
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	d102      	bne.n	8006e4a <_close_r+0x1a>
 8006e44:	682b      	ldr	r3, [r5, #0]
 8006e46:	b103      	cbz	r3, 8006e4a <_close_r+0x1a>
 8006e48:	6023      	str	r3, [r4, #0]
 8006e4a:	bd38      	pop	{r3, r4, r5, pc}
 8006e4c:	20025d28 	.word	0x20025d28

08006e50 <_fstat_r>:
 8006e50:	b538      	push	{r3, r4, r5, lr}
 8006e52:	4d07      	ldr	r5, [pc, #28]	@ (8006e70 <_fstat_r+0x20>)
 8006e54:	2300      	movs	r3, #0
 8006e56:	4604      	mov	r4, r0
 8006e58:	4608      	mov	r0, r1
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	602b      	str	r3, [r5, #0]
 8006e5e:	f7fb fc75 	bl	800274c <_fstat>
 8006e62:	1c43      	adds	r3, r0, #1
 8006e64:	d102      	bne.n	8006e6c <_fstat_r+0x1c>
 8006e66:	682b      	ldr	r3, [r5, #0]
 8006e68:	b103      	cbz	r3, 8006e6c <_fstat_r+0x1c>
 8006e6a:	6023      	str	r3, [r4, #0]
 8006e6c:	bd38      	pop	{r3, r4, r5, pc}
 8006e6e:	bf00      	nop
 8006e70:	20025d28 	.word	0x20025d28

08006e74 <_free_r>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	4605      	mov	r5, r0
 8006e78:	2900      	cmp	r1, #0
 8006e7a:	d041      	beq.n	8006f00 <_free_r+0x8c>
 8006e7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e80:	1f0c      	subs	r4, r1, #4
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	bfb8      	it	lt
 8006e86:	18e4      	addlt	r4, r4, r3
 8006e88:	f7ff fe36 	bl	8006af8 <__malloc_lock>
 8006e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8006f04 <_free_r+0x90>)
 8006e8e:	6813      	ldr	r3, [r2, #0]
 8006e90:	b933      	cbnz	r3, 8006ea0 <_free_r+0x2c>
 8006e92:	6063      	str	r3, [r4, #4]
 8006e94:	6014      	str	r4, [r2, #0]
 8006e96:	4628      	mov	r0, r5
 8006e98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e9c:	f7ff be32 	b.w	8006b04 <__malloc_unlock>
 8006ea0:	42a3      	cmp	r3, r4
 8006ea2:	d908      	bls.n	8006eb6 <_free_r+0x42>
 8006ea4:	6820      	ldr	r0, [r4, #0]
 8006ea6:	1821      	adds	r1, r4, r0
 8006ea8:	428b      	cmp	r3, r1
 8006eaa:	bf01      	itttt	eq
 8006eac:	6819      	ldreq	r1, [r3, #0]
 8006eae:	685b      	ldreq	r3, [r3, #4]
 8006eb0:	1809      	addeq	r1, r1, r0
 8006eb2:	6021      	streq	r1, [r4, #0]
 8006eb4:	e7ed      	b.n	8006e92 <_free_r+0x1e>
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	b10b      	cbz	r3, 8006ec0 <_free_r+0x4c>
 8006ebc:	42a3      	cmp	r3, r4
 8006ebe:	d9fa      	bls.n	8006eb6 <_free_r+0x42>
 8006ec0:	6811      	ldr	r1, [r2, #0]
 8006ec2:	1850      	adds	r0, r2, r1
 8006ec4:	42a0      	cmp	r0, r4
 8006ec6:	d10b      	bne.n	8006ee0 <_free_r+0x6c>
 8006ec8:	6820      	ldr	r0, [r4, #0]
 8006eca:	4401      	add	r1, r0
 8006ecc:	1850      	adds	r0, r2, r1
 8006ece:	4283      	cmp	r3, r0
 8006ed0:	6011      	str	r1, [r2, #0]
 8006ed2:	d1e0      	bne.n	8006e96 <_free_r+0x22>
 8006ed4:	6818      	ldr	r0, [r3, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	6053      	str	r3, [r2, #4]
 8006eda:	4408      	add	r0, r1
 8006edc:	6010      	str	r0, [r2, #0]
 8006ede:	e7da      	b.n	8006e96 <_free_r+0x22>
 8006ee0:	d902      	bls.n	8006ee8 <_free_r+0x74>
 8006ee2:	230c      	movs	r3, #12
 8006ee4:	602b      	str	r3, [r5, #0]
 8006ee6:	e7d6      	b.n	8006e96 <_free_r+0x22>
 8006ee8:	6820      	ldr	r0, [r4, #0]
 8006eea:	1821      	adds	r1, r4, r0
 8006eec:	428b      	cmp	r3, r1
 8006eee:	bf04      	itt	eq
 8006ef0:	6819      	ldreq	r1, [r3, #0]
 8006ef2:	685b      	ldreq	r3, [r3, #4]
 8006ef4:	6063      	str	r3, [r4, #4]
 8006ef6:	bf04      	itt	eq
 8006ef8:	1809      	addeq	r1, r1, r0
 8006efa:	6021      	streq	r1, [r4, #0]
 8006efc:	6054      	str	r4, [r2, #4]
 8006efe:	e7ca      	b.n	8006e96 <_free_r+0x22>
 8006f00:	bd38      	pop	{r3, r4, r5, pc}
 8006f02:	bf00      	nop
 8006f04:	20025d24 	.word	0x20025d24

08006f08 <_init>:
 8006f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0a:	bf00      	nop
 8006f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0e:	bc08      	pop	{r3}
 8006f10:	469e      	mov	lr, r3
 8006f12:	4770      	bx	lr

08006f14 <_fini>:
 8006f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f16:	bf00      	nop
 8006f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f1a:	bc08      	pop	{r3}
 8006f1c:	469e      	mov	lr, r3
 8006f1e:	4770      	bx	lr
