
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a68  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b70  08007c18  08007c18  00008c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009788  08009788  0000b088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009788  08009788  0000a788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009790  08009790  0000b088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009790  08009790  0000a790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009794  08009794  0000a794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08009798  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b088  2**0
                  CONTENTS
 10 .bss          00025d9c  20000088  20000088  0000b088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025e24  20025e24  0000b088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013260  00000000  00000000  0000b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003032  00000000  00000000  0001e318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  00021350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eee  00000000  00000000  000226a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000267f9  00000000  00000000  0002358e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017653  00000000  00000000  00049d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e11da  00000000  00000000  000613da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001425b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b5c  00000000  00000000  001425f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a3  00000000  00000000  00148154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007c00 	.word	0x08007c00

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08007c00 	.word	0x08007c00

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80005d0:	f006 fc0a 	bl	8006de8 <initialise_monitor_handles>
    LTCD__Init();
 80005d4:	f000 fece 	bl	8001374 <LTCD__Init>
    LTCD_Layer_Init(0);
 80005d8:	2000      	movs	r0, #0
 80005da:	f000 fe8b 	bl	80012f4 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80005de:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 ff96 	bl	8001514 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005e8:	f001 f86c 	bl	80016c4 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005ec:	4b02      	ldr	r3, [pc, #8]	@ (80005f8 <ApplicationInit+0x2c>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	200000a4 	.word	0x200000a4

080005fc <ApplicationFirstScreen>:
void ApplicationFirstScreen(){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	firstScreen();
 8000600:	f000 f858 	bl	80006b4 <firstScreen>
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}

08000608 <ApplicationEndScreen>:

void ApplicationEndScreen(char winner)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
    endScreen(winner);
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	4618      	mov	r0, r3
 8000616:	f000 f8d5 	bl	80007c4 <endScreen>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <LCD_Touch_Polling_Demo>:
// 	visualDemo();
// }

#if COMPILE_TOUCH_FUNCTIONS == 1
void LCD_Touch_Polling_Demo(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 
    ApplicationFirstScreen();
 800062a:	f7ff ffe7 	bl	80005fc <ApplicationFirstScreen>

    while (1)
    {

        if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed)
 800062e:	4820      	ldr	r0, [pc, #128]	@ (80006b0 <LCD_Touch_Polling_Demo+0x8c>)
 8000630:	f001 f853 	bl	80016da <returnTouchStateAndLocation>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d136      	bne.n	80006a8 <LCD_Touch_Polling_Demo+0x84>
        {
            char winner = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	71fb      	strb	r3, [r7, #7]

      
            if (StaticTouchData.x <= 120)
 800063e:	4b1c      	ldr	r3, [pc, #112]	@ (80006b0 <LCD_Touch_Polling_Demo+0x8c>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	2b78      	cmp	r3, #120	@ 0x78
 8000644:	d813      	bhi.n	800066e <LCD_Touch_Polling_Demo+0x4a>
            {
            
                PlayOnePlayer();
 8000646:	f000 fc33 	bl	8000eb0 <PlayOnePlayer>
                
                if      (checkWin('X')) winner = 'X';
 800064a:	2058      	movs	r0, #88	@ 0x58
 800064c:	f000 fbaa 	bl	8000da4 <checkWin>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d002      	beq.n	800065c <LCD_Touch_Polling_Demo+0x38>
 8000656:	2358      	movs	r3, #88	@ 0x58
 8000658:	71fb      	strb	r3, [r7, #7]
 800065a:	e01b      	b.n	8000694 <LCD_Touch_Polling_Demo+0x70>
                else if (checkWin('O')) winner = 'O';
 800065c:	204f      	movs	r0, #79	@ 0x4f
 800065e:	f000 fba1 	bl	8000da4 <checkWin>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d015      	beq.n	8000694 <LCD_Touch_Polling_Demo+0x70>
 8000668:	234f      	movs	r3, #79	@ 0x4f
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	e012      	b.n	8000694 <LCD_Touch_Polling_Demo+0x70>
            }
            else
            {
          
                PlayTwoPlayer();
 800066e:	f000 fcf9 	bl	8001064 <PlayTwoPlayer>
                if      (checkWin('X')) winner = 'X';
 8000672:	2058      	movs	r0, #88	@ 0x58
 8000674:	f000 fb96 	bl	8000da4 <checkWin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <LCD_Touch_Polling_Demo+0x60>
 800067e:	2358      	movs	r3, #88	@ 0x58
 8000680:	71fb      	strb	r3, [r7, #7]
 8000682:	e007      	b.n	8000694 <LCD_Touch_Polling_Demo+0x70>
                else if (checkWin('O')) winner = 'O';
 8000684:	204f      	movs	r0, #79	@ 0x4f
 8000686:	f000 fb8d 	bl	8000da4 <checkWin>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <LCD_Touch_Polling_Demo+0x70>
 8000690:	234f      	movs	r3, #79	@ 0x4f
 8000692:	71fb      	strb	r3, [r7, #7]
            }

     
            ApplicationEndScreen(winner);
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ffb6 	bl	8000608 <ApplicationEndScreen>

         
            HAL_Delay(10000);
 800069c:	f242 7010 	movw	r0, #10000	@ 0x2710
 80006a0:	f002 fdf4 	bl	800328c <HAL_Delay>


            ApplicationFirstScreen();
 80006a4:	f7ff ffaa 	bl	80005fc <ApplicationFirstScreen>
        }

        HAL_Delay(50);
 80006a8:	2032      	movs	r0, #50	@ 0x32
 80006aa:	f002 fdef 	bl	800328c <HAL_Delay>
        if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed)
 80006ae:	e7be      	b.n	800062e <LCD_Touch_Polling_Demo+0xa>
 80006b0:	200000a4 	.word	0x200000a4

080006b4 <firstScreen>:





void firstScreen(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	touchData.orientation = STMPE811_Orientation_Portrait_2;
 80006b8:	4b40      	ldr	r3, [pc, #256]	@ (80007bc <firstScreen+0x108>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	719a      	strb	r2, [r3, #6]
    LCD_Clear(0,LCD_COLOR_BLUE);
 80006be:	211f      	movs	r1, #31
 80006c0:	2000      	movs	r0, #0
 80006c2:	f000 ff27 	bl	8001514 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 80006c6:	2000      	movs	r0, #0
 80006c8:	f000 ff46 	bl	8001558 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80006cc:	483c      	ldr	r0, [pc, #240]	@ (80007c0 <firstScreen+0x10c>)
 80006ce:	f000 ff53 	bl	8001578 <LCD_SetFont>
	LCD_DisplayChar(60,140,'C');
 80006d2:	2243      	movs	r2, #67	@ 0x43
 80006d4:	218c      	movs	r1, #140	@ 0x8c
 80006d6:	203c      	movs	r0, #60	@ 0x3c
 80006d8:	f000 ffcc 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(75,140,'o');
 80006dc:	226f      	movs	r2, #111	@ 0x6f
 80006de:	218c      	movs	r1, #140	@ 0x8c
 80006e0:	204b      	movs	r0, #75	@ 0x4b
 80006e2:	f000 ffc7 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(90,140,'n');
 80006e6:	226e      	movs	r2, #110	@ 0x6e
 80006e8:	218c      	movs	r1, #140	@ 0x8c
 80006ea:	205a      	movs	r0, #90	@ 0x5a
 80006ec:	f000 ffc2 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(105,140,'n');
 80006f0:	226e      	movs	r2, #110	@ 0x6e
 80006f2:	218c      	movs	r1, #140	@ 0x8c
 80006f4:	2069      	movs	r0, #105	@ 0x69
 80006f6:	f000 ffbd 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(120,140,'e');
 80006fa:	2265      	movs	r2, #101	@ 0x65
 80006fc:	218c      	movs	r1, #140	@ 0x8c
 80006fe:	2078      	movs	r0, #120	@ 0x78
 8000700:	f000 ffb8 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(135,140,'c');
 8000704:	2263      	movs	r2, #99	@ 0x63
 8000706:	218c      	movs	r1, #140	@ 0x8c
 8000708:	2087      	movs	r0, #135	@ 0x87
 800070a:	f000 ffb3 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(150,140,'t');
 800070e:	2274      	movs	r2, #116	@ 0x74
 8000710:	218c      	movs	r1, #140	@ 0x8c
 8000712:	2096      	movs	r0, #150	@ 0x96
 8000714:	f000 ffae 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(180,140,'4');
 8000718:	2234      	movs	r2, #52	@ 0x34
 800071a:	218c      	movs	r1, #140	@ 0x8c
 800071c:	20b4      	movs	r0, #180	@ 0xb4
 800071e:	f000 ffa9 	bl	8001674 <LCD_DisplayChar>

    LCD_DisplayChar(10,190,'1');
 8000722:	2231      	movs	r2, #49	@ 0x31
 8000724:	21be      	movs	r1, #190	@ 0xbe
 8000726:	200a      	movs	r0, #10
 8000728:	f000 ffa4 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(20,190,'P');
 800072c:	2250      	movs	r2, #80	@ 0x50
 800072e:	21be      	movs	r1, #190	@ 0xbe
 8000730:	2014      	movs	r0, #20
 8000732:	f000 ff9f 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(30,190,'L');
 8000736:	224c      	movs	r2, #76	@ 0x4c
 8000738:	21be      	movs	r1, #190	@ 0xbe
 800073a:	201e      	movs	r0, #30
 800073c:	f000 ff9a 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(40,190,'A');
 8000740:	2241      	movs	r2, #65	@ 0x41
 8000742:	21be      	movs	r1, #190	@ 0xbe
 8000744:	2028      	movs	r0, #40	@ 0x28
 8000746:	f000 ff95 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(55,190,'Y');
 800074a:	2259      	movs	r2, #89	@ 0x59
 800074c:	21be      	movs	r1, #190	@ 0xbe
 800074e:	2037      	movs	r0, #55	@ 0x37
 8000750:	f000 ff90 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(70,190,'E');
 8000754:	2245      	movs	r2, #69	@ 0x45
 8000756:	21be      	movs	r1, #190	@ 0xbe
 8000758:	2046      	movs	r0, #70	@ 0x46
 800075a:	f000 ff8b 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(85,190,'R');
 800075e:	2252      	movs	r2, #82	@ 0x52
 8000760:	21be      	movs	r1, #190	@ 0xbe
 8000762:	2055      	movs	r0, #85	@ 0x55
 8000764:	f000 ff86 	bl	8001674 <LCD_DisplayChar>
    

    LCD_DisplayChar(115,190,'2');
 8000768:	2232      	movs	r2, #50	@ 0x32
 800076a:	21be      	movs	r1, #190	@ 0xbe
 800076c:	2073      	movs	r0, #115	@ 0x73
 800076e:	f000 ff81 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(135,190,'P');
 8000772:	2250      	movs	r2, #80	@ 0x50
 8000774:	21be      	movs	r1, #190	@ 0xbe
 8000776:	2087      	movs	r0, #135	@ 0x87
 8000778:	f000 ff7c 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(145,190,'L');
 800077c:	224c      	movs	r2, #76	@ 0x4c
 800077e:	21be      	movs	r1, #190	@ 0xbe
 8000780:	2091      	movs	r0, #145	@ 0x91
 8000782:	f000 ff77 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(155,190,'A');
 8000786:	2241      	movs	r2, #65	@ 0x41
 8000788:	21be      	movs	r1, #190	@ 0xbe
 800078a:	209b      	movs	r0, #155	@ 0x9b
 800078c:	f000 ff72 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(170,190,'Y');
 8000790:	2259      	movs	r2, #89	@ 0x59
 8000792:	21be      	movs	r1, #190	@ 0xbe
 8000794:	20aa      	movs	r0, #170	@ 0xaa
 8000796:	f000 ff6d 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(185,190,'E');
 800079a:	2245      	movs	r2, #69	@ 0x45
 800079c:	21be      	movs	r1, #190	@ 0xbe
 800079e:	20b9      	movs	r0, #185	@ 0xb9
 80007a0:	f000 ff68 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(200,190,'R');
 80007a4:	2252      	movs	r2, #82	@ 0x52
 80007a6:	21be      	movs	r1, #190	@ 0xbe
 80007a8:	20c8      	movs	r0, #200	@ 0xc8
 80007aa:	f000 ff63 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(215,190,'S');
 80007ae:	2253      	movs	r2, #83	@ 0x53
 80007b0:	21be      	movs	r1, #190	@ 0xbe
 80007b2:	20d7      	movs	r0, #215	@ 0xd7
 80007b4:	f000 ff5e 	bl	8001674 <LCD_DisplayChar>
    
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200000e0 	.word	0x200000e0
 80007c0:	20000004 	.word	0x20000004

080007c4 <endScreen>:
int endScreen(char winner) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b0a4      	sub	sp, #144	@ 0x90
 80007c8:	af02      	add	r7, sp, #8
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
    touchData.orientation = STMPE811_Orientation_Portrait_2;
 80007ce:	4ba2      	ldr	r3, [pc, #648]	@ (8000a58 <endScreen+0x294>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	719a      	strb	r2, [r3, #6]
    LCD_Clear(0, LCD_COLOR_BLUE);
 80007d4:	211f      	movs	r1, #31
 80007d6:	2000      	movs	r0, #0
 80007d8:	f000 fe9c 	bl	8001514 <LCD_Clear>

   
    LCD_SetTextColor(LCD_COLOR_BLACK);
 80007dc:	2000      	movs	r0, #0
 80007de:	f000 febb 	bl	8001558 <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 80007e2:	489e      	ldr	r0, [pc, #632]	@ (8000a5c <endScreen+0x298>)
 80007e4:	f000 fec8 	bl	8001578 <LCD_SetFont>
    {
        const char *title = "GAME OVER";
 80007e8:	4b9d      	ldr	r3, [pc, #628]	@ (8000a60 <endScreen+0x29c>)
 80007ea:	673b      	str	r3, [r7, #112]	@ 0x70
        uint16_t w = Font16x24.Width+2, x0 = (LCD_PIXEL_WIDTH - strlen(title)*w)/2, y0 = 60;
 80007ec:	4b9b      	ldr	r3, [pc, #620]	@ (8000a5c <endScreen+0x298>)
 80007ee:	889b      	ldrh	r3, [r3, #4]
 80007f0:	3302      	adds	r3, #2
 80007f2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80007f6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80007f8:	f7ff fcfa 	bl	80001f0 <strlen>
 80007fc:	4602      	mov	r2, r0
 80007fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000802:	fb02 f303 	mul.w	r3, r2, r3
 8000806:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800080a:	085b      	lsrs	r3, r3, #1
 800080c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8000810:	233c      	movs	r3, #60	@ 0x3c
 8000812:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
        for (int i = 0; i < strlen(title); ++i)
 8000816:	2300      	movs	r3, #0
 8000818:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800081c:	e01a      	b.n	8000854 <endScreen+0x90>
            LCD_DisplayChar(x0 + i*w, y0, title[i]);
 800081e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000822:	b29b      	uxth	r3, r3
 8000824:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000828:	fb12 f303 	smulbb	r3, r2, r3
 800082c:	b29a      	uxth	r2, r3
 800082e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8000832:	4413      	add	r3, r2
 8000834:	b298      	uxth	r0, r3
 8000836:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800083a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800083c:	4413      	add	r3, r2
 800083e:	781a      	ldrb	r2, [r3, #0]
 8000840:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8000844:	4619      	mov	r1, r3
 8000846:	f000 ff15 	bl	8001674 <LCD_DisplayChar>
        for (int i = 0; i < strlen(title); ++i)
 800084a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800084e:	3301      	adds	r3, #1
 8000850:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000854:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000856:	f7ff fccb 	bl	80001f0 <strlen>
 800085a:	4602      	mov	r2, r0
 800085c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000860:	429a      	cmp	r2, r3
 8000862:	d8dc      	bhi.n	800081e <endScreen+0x5a>
    }

  
    if      (winner == 'X') scoreX++;
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	2b58      	cmp	r3, #88	@ 0x58
 8000868:	d106      	bne.n	8000878 <endScreen+0xb4>
 800086a:	4b7e      	ldr	r3, [pc, #504]	@ (8000a64 <endScreen+0x2a0>)
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	3301      	adds	r3, #1
 8000870:	b29a      	uxth	r2, r3
 8000872:	4b7c      	ldr	r3, [pc, #496]	@ (8000a64 <endScreen+0x2a0>)
 8000874:	801a      	strh	r2, [r3, #0]
 8000876:	e008      	b.n	800088a <endScreen+0xc6>
    else if (winner == 'O') scoreO++;
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	2b4f      	cmp	r3, #79	@ 0x4f
 800087c:	d105      	bne.n	800088a <endScreen+0xc6>
 800087e:	4b7a      	ldr	r3, [pc, #488]	@ (8000a68 <endScreen+0x2a4>)
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	3301      	adds	r3, #1
 8000884:	b29a      	uxth	r2, r3
 8000886:	4b78      	ldr	r3, [pc, #480]	@ (8000a68 <endScreen+0x2a4>)
 8000888:	801a      	strh	r2, [r3, #0]

  
    LCD_SetFont(&Font12x12);
 800088a:	4878      	ldr	r0, [pc, #480]	@ (8000a6c <endScreen+0x2a8>)
 800088c:	f000 fe74 	bl	8001578 <LCD_SetFont>
    uint16_t sw = Font12x12.Width+1, sh = Font12x12.Height;
 8000890:	4b76      	ldr	r3, [pc, #472]	@ (8000a6c <endScreen+0x2a8>)
 8000892:	889b      	ldrh	r3, [r3, #4]
 8000894:	3301      	adds	r3, #1
 8000896:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800089a:	4b74      	ldr	r3, [pc, #464]	@ (8000a6c <endScreen+0x2a8>)
 800089c:	88db      	ldrh	r3, [r3, #6]
 800089e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    char buf[32];


    snprintf(buf, sizeof(buf), "P1:%u  P2:%u", scoreX, scoreO);
 80008a2:	4b70      	ldr	r3, [pc, #448]	@ (8000a64 <endScreen+0x2a0>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	4b6f      	ldr	r3, [pc, #444]	@ (8000a68 <endScreen+0x2a4>)
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	f107 0010 	add.w	r0, r7, #16
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	4613      	mov	r3, r2
 80008b4:	4a6e      	ldr	r2, [pc, #440]	@ (8000a70 <endScreen+0x2ac>)
 80008b6:	2120      	movs	r1, #32
 80008b8:	f006 faf6 	bl	8006ea8 <sniprintf>
    {
        int len = strlen(buf);
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fc95 	bl	80001f0 <strlen>
 80008c6:	4603      	mov	r3, r0
 80008c8:	663b      	str	r3, [r7, #96]	@ 0x60
        uint16_t x = (LCD_PIXEL_WIDTH - len*sw)/2, y = 60 + Font16x24.Height + 20;
 80008ca:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80008ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80008d0:	fb02 f303 	mul.w	r3, r2, r3
 80008d4:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80008d8:	0fda      	lsrs	r2, r3, #31
 80008da:	4413      	add	r3, r2
 80008dc:	105b      	asrs	r3, r3, #1
 80008de:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80008e2:	4b5e      	ldr	r3, [pc, #376]	@ (8000a5c <endScreen+0x298>)
 80008e4:	88db      	ldrh	r3, [r3, #6]
 80008e6:	3350      	adds	r3, #80	@ 0x50
 80008e8:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
        for (int i = 0; i < len; ++i) LCD_DisplayChar(x + i*sw, y, buf[i]);
 80008ec:	2300      	movs	r3, #0
 80008ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80008f2:	e01b      	b.n	800092c <endScreen+0x168>
 80008f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	f8b7 2068 	ldrh.w	r2, [r7, #104]	@ 0x68
 80008fe:	fb12 f303 	smulbb	r3, r2, r3
 8000902:	b29a      	uxth	r2, r3
 8000904:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8000908:	4413      	add	r3, r2
 800090a:	b298      	uxth	r0, r3
 800090c:	f107 0210 	add.w	r2, r7, #16
 8000910:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000914:	4413      	add	r3, r2
 8000916:	781a      	ldrb	r2, [r3, #0]
 8000918:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800091c:	4619      	mov	r1, r3
 800091e:	f000 fea9 	bl	8001674 <LCD_DisplayChar>
 8000922:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000926:	3301      	adds	r3, #1
 8000928:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800092c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000930:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000932:	429a      	cmp	r2, r3
 8000934:	dbde      	blt.n	80008f4 <endScreen+0x130>
    }

  
    snprintf(buf, sizeof(buf), "Time:%lus", lastRoundTimeSec);
 8000936:	4b4f      	ldr	r3, [pc, #316]	@ (8000a74 <endScreen+0x2b0>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f107 0010 	add.w	r0, r7, #16
 800093e:	4a4e      	ldr	r2, [pc, #312]	@ (8000a78 <endScreen+0x2b4>)
 8000940:	2120      	movs	r1, #32
 8000942:	f006 fab1 	bl	8006ea8 <sniprintf>
    {
        int len = strlen(buf);
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fc50 	bl	80001f0 <strlen>
 8000950:	4603      	mov	r3, r0
 8000952:	65bb      	str	r3, [r7, #88]	@ 0x58
        uint16_t x = (LCD_PIXEL_WIDTH - len*sw)/2,
 8000954:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8000958:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800095a:	fb02 f303 	mul.w	r3, r2, r3
 800095e:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000962:	0fda      	lsrs	r2, r3, #31
 8000964:	4413      	add	r3, r2
 8000966:	105b      	asrs	r3, r3, #1
 8000968:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                 y = 60 + Font16x24.Height + 20 + sh + 10;
 800096c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a5c <endScreen+0x298>)
 800096e:	88da      	ldrh	r2, [r3, #6]
 8000970:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8000974:	4413      	add	r3, r2
 8000976:	b29b      	uxth	r3, r3
 8000978:	335a      	adds	r3, #90	@ 0x5a
 800097a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        for (int i = 0; i < len; ++i) LCD_DisplayChar(x + i*sw, y, buf[i]);
 800097e:	2300      	movs	r3, #0
 8000980:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000982:	e017      	b.n	80009b4 <endScreen+0x1f0>
 8000984:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000986:	b29b      	uxth	r3, r3
 8000988:	f8b7 2068 	ldrh.w	r2, [r7, #104]	@ 0x68
 800098c:	fb12 f303 	smulbb	r3, r2, r3
 8000990:	b29a      	uxth	r2, r3
 8000992:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000996:	4413      	add	r3, r2
 8000998:	b298      	uxth	r0, r3
 800099a:	f107 0210 	add.w	r2, r7, #16
 800099e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80009a0:	4413      	add	r3, r2
 80009a2:	781a      	ldrb	r2, [r3, #0]
 80009a4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80009a8:	4619      	mov	r1, r3
 80009aa:	f000 fe63 	bl	8001674 <LCD_DisplayChar>
 80009ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80009b0:	3301      	adds	r3, #1
 80009b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80009b4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80009b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80009b8:	429a      	cmp	r2, r3
 80009ba:	dbe3      	blt.n	8000984 <endScreen+0x1c0>
    }


    const char *btn1 = "RESTART", *btn2 = "MENU";
 80009bc:	4b2f      	ldr	r3, [pc, #188]	@ (8000a7c <endScreen+0x2b8>)
 80009be:	653b      	str	r3, [r7, #80]	@ 0x50
 80009c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000a80 <endScreen+0x2bc>)
 80009c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int len1 = strlen(btn1), len2 = strlen(btn2);
 80009c4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80009c6:	f7ff fc13 	bl	80001f0 <strlen>
 80009ca:	4603      	mov	r3, r0
 80009cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80009ce:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80009d0:	f7ff fc0e 	bl	80001f0 <strlen>
 80009d4:	4603      	mov	r3, r0
 80009d6:	647b      	str	r3, [r7, #68]	@ 0x44
    uint16_t yBtn = LCD_PIXEL_HEIGHT - sh - 20;
 80009d8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80009dc:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 80009e0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    uint16_t xBtn1 = (LCD_PIXEL_WIDTH/4) - (len1*sw)/2;
 80009e4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80009e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80009ea:	fb02 f303 	mul.w	r3, r2, r3
 80009ee:	0fda      	lsrs	r2, r3, #31
 80009f0:	4413      	add	r3, r2
 80009f2:	105b      	asrs	r3, r3, #1
 80009f4:	425b      	negs	r3, r3
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	333c      	adds	r3, #60	@ 0x3c
 80009fa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    uint16_t xBtn2 = (3*LCD_PIXEL_WIDTH/4) - (len2*sw)/2;
 80009fe:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8000a02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000a04:	fb02 f303 	mul.w	r3, r2, r3
 8000a08:	0fda      	lsrs	r2, r3, #31
 8000a0a:	4413      	add	r3, r2
 8000a0c:	105b      	asrs	r3, r3, #1
 8000a0e:	425b      	negs	r3, r3
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	33b4      	adds	r3, #180	@ 0xb4
 8000a14:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    for (int i = 0; i < len1; ++i) LCD_DisplayChar(xBtn1 + i*sw, yBtn, btn1[i]);
 8000a16:	2300      	movs	r3, #0
 8000a18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000a1a:	e016      	b.n	8000a4a <endScreen+0x286>
 8000a1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	f8b7 2068 	ldrh.w	r2, [r7, #104]	@ 0x68
 8000a24:	fb12 f303 	smulbb	r3, r2, r3
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000a2e:	4413      	add	r3, r2
 8000a30:	b298      	uxth	r0, r3
 8000a32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000a34:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000a36:	4413      	add	r3, r2
 8000a38:	781a      	ldrb	r2, [r3, #0]
 8000a3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000a3e:	4619      	mov	r1, r3
 8000a40:	f000 fe18 	bl	8001674 <LCD_DisplayChar>
 8000a44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000a46:	3301      	adds	r3, #1
 8000a48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000a4a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000a4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	dbe4      	blt.n	8000a1c <endScreen+0x258>
    for (int i = 0; i < len2; ++i) LCD_DisplayChar(xBtn2 + i*sw, yBtn, btn2[i]);
 8000a52:	2300      	movs	r3, #0
 8000a54:	677b      	str	r3, [r7, #116]	@ 0x74
 8000a56:	e02b      	b.n	8000ab0 <endScreen+0x2ec>
 8000a58:	200000e0 	.word	0x200000e0
 8000a5c:	20000004 	.word	0x20000004
 8000a60:	08007c18 	.word	0x08007c18
 8000a64:	200000ac 	.word	0x200000ac
 8000a68:	200000ae 	.word	0x200000ae
 8000a6c:	2000000c 	.word	0x2000000c
 8000a70:	08007c24 	.word	0x08007c24
 8000a74:	200000b0 	.word	0x200000b0
 8000a78:	08007c34 	.word	0x08007c34
 8000a7c:	08007c40 	.word	0x08007c40
 8000a80:	08007c48 	.word	0x08007c48
 8000a84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	f8b7 2068 	ldrh.w	r2, [r7, #104]	@ 0x68
 8000a8c:	fb12 f303 	smulbb	r3, r2, r3
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000a94:	4413      	add	r3, r2
 8000a96:	b298      	uxth	r0, r3
 8000a98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000a9c:	4413      	add	r3, r2
 8000a9e:	781a      	ldrb	r2, [r3, #0]
 8000aa0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f000 fde5 	bl	8001674 <LCD_DisplayChar>
 8000aaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000aac:	3301      	adds	r3, #1
 8000aae:	677b      	str	r3, [r7, #116]	@ 0x74
 8000ab0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000ab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	dbe5      	blt.n	8000a84 <endScreen+0x2c0>


    uint16_t x1a = xBtn1-2, x1b = xBtn1 + len1*sw+2,
 8000ab8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000abc:	3b02      	subs	r3, #2
 8000abe:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8000ac0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	f8b7 2068 	ldrh.w	r2, [r7, #104]	@ 0x68
 8000ac8:	fb12 f303 	smulbb	r3, r2, r3
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	877b      	strh	r3, [r7, #58]	@ 0x3a
             x2a = xBtn2-2, x2b = xBtn2 + len2*sw+2;
 8000ada:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000adc:	3b02      	subs	r3, #2
 8000ade:	873b      	strh	r3, [r7, #56]	@ 0x38
 8000ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	f8b7 2068 	ldrh.w	r2, [r7, #104]	@ 0x68
 8000ae8:	fb12 f303 	smulbb	r3, r2, r3
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000af0:	4413      	add	r3, r2
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	3302      	adds	r3, #2
 8000af6:	86fb      	strh	r3, [r7, #54]	@ 0x36
    uint16_t yA  = yBtn-2, yB = yBtn+sh+2;
 8000af8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000afc:	3b02      	subs	r3, #2
 8000afe:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8000b00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8000b04:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8000b08:	4413      	add	r3, r2
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	867b      	strh	r3, [r7, #50]	@ 0x32


    STMPE811_TouchData td;
    while (1) {
        if (returnTouchStateAndLocation(&td) == STMPE811_State_Pressed) {
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 fde0 	bl	80016da <returnTouchStateAndLocation>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d128      	bne.n	8000b72 <endScreen+0x3ae>
            DetermineTouchPosition(&td);
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 fde4 	bl	80016f2 <DetermineTouchPosition>
            if (td.x >= x1a && td.x <= x1b && td.y >= yA && td.y <= yB)
 8000b2a:	893b      	ldrh	r3, [r7, #8]
 8000b2c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d80d      	bhi.n	8000b4e <endScreen+0x38a>
 8000b32:	893b      	ldrh	r3, [r7, #8]
 8000b34:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d309      	bcc.n	8000b4e <endScreen+0x38a>
 8000b3a:	897b      	ldrh	r3, [r7, #10]
 8000b3c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d805      	bhi.n	8000b4e <endScreen+0x38a>
 8000b42:	897b      	ldrh	r3, [r7, #10]
 8000b44:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d301      	bcc.n	8000b4e <endScreen+0x38a>
                return 1;   
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e015      	b.n	8000b7a <endScreen+0x3b6>
            if (td.x >= x2a && td.x <= x2b && td.y >= yA && td.y <= yB)
 8000b4e:	893b      	ldrh	r3, [r7, #8]
 8000b50:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d80d      	bhi.n	8000b72 <endScreen+0x3ae>
 8000b56:	893b      	ldrh	r3, [r7, #8]
 8000b58:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d309      	bcc.n	8000b72 <endScreen+0x3ae>
 8000b5e:	897b      	ldrh	r3, [r7, #10]
 8000b60:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d805      	bhi.n	8000b72 <endScreen+0x3ae>
 8000b66:	897b      	ldrh	r3, [r7, #10]
 8000b68:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d301      	bcc.n	8000b72 <endScreen+0x3ae>
                return 0;   
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e003      	b.n	8000b7a <endScreen+0x3b6>
        }
        HAL_Delay(50);
 8000b72:	2032      	movs	r0, #50	@ 0x32
 8000b74:	f002 fb8a 	bl	800328c <HAL_Delay>
        if (returnTouchStateAndLocation(&td) == STMPE811_State_Pressed) {
 8000b78:	e7ca      	b.n	8000b10 <endScreen+0x34c>
    }
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3788      	adds	r7, #136	@ 0x88
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop

08000b84 <initBoard>:
//         }
//     }
// }


void initBoard(void) {
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
    for (int r = 0; r < ROWS; r++) {
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	e015      	b.n	8000bbc <initBoard+0x38>
        for (int c = 0; c < COLS; c++) {
 8000b90:	2300      	movs	r3, #0
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	e00c      	b.n	8000bb0 <initBoard+0x2c>
            board[r][c] = ' ';
 8000b96:	490e      	ldr	r1, [pc, #56]	@ (8000bd0 <initBoard+0x4c>)
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	1a9b      	subs	r3, r3, r2
 8000ba0:	18ca      	adds	r2, r1, r3
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	2220      	movs	r2, #32
 8000ba8:	701a      	strb	r2, [r3, #0]
        for (int c = 0; c < COLS; c++) {
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	3301      	adds	r3, #1
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	ddef      	ble.n	8000b96 <initBoard+0x12>
    for (int r = 0; r < ROWS; r++) {
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b05      	cmp	r3, #5
 8000bc0:	dde6      	ble.n	8000b90 <initBoard+0xc>
        }
    }
}
 8000bc2:	bf00      	nop
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	200000b4 	.word	0x200000b4

08000bd4 <GameScreen_Init>:


void GameScreen_Init(void) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0

    LCD_Clear(0, BOARD_BG_COLOR);
 8000bda:	211f      	movs	r1, #31
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f000 fc99 	bl	8001514 <LCD_Clear>
    for (int r = 0; r < ROWS; r++) {
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	e021      	b.n	8000c2c <GameScreen_Init+0x58>
        for (int c = 0; c < COLS; c++) {
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	e018      	b.n	8000c20 <GameScreen_Init+0x4c>
            uint16_t x = ORIGIN_X + c * CELL_SPACING_X;
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	015b      	lsls	r3, r3, #5
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	3314      	adds	r3, #20
 8000bf8:	80fb      	strh	r3, [r7, #6]
            uint16_t y = ORIGIN_Y + r * CELL_SPACING_Y;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	461a      	mov	r2, r3
 8000c00:	0092      	lsls	r2, r2, #2
 8000c02:	4413      	add	r3, r2
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	333c      	adds	r3, #60	@ 0x3c
 8000c0a:	80bb      	strh	r3, [r7, #4]
            LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, EMPTY_HOLE_COLOR);
 8000c0c:	88b9      	ldrh	r1, [r7, #4]
 8000c0e:	88f8      	ldrh	r0, [r7, #6]
 8000c10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c14:	220d      	movs	r2, #13
 8000c16:	f000 fc29 	bl	800146c <LCD_Draw_Circle_Fill>
        for (int c = 0; c < COLS; c++) {
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	dde3      	ble.n	8000bee <GameScreen_Init+0x1a>
    for (int r = 0; r < ROWS; r++) {
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2b05      	cmp	r3, #5
 8000c30:	ddda      	ble.n	8000be8 <GameScreen_Init+0x14>
        }
    }
}
 8000c32:	bf00      	nop
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <PollTouchColumn>:
        }
    }
}


static int PollTouchColumn(char currentPlayer) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
    while (1) {
        if (returnTouchStateAndLocation(&touchData) == STMPE811_State_Pressed) {
 8000c46:	4834      	ldr	r0, [pc, #208]	@ (8000d18 <PollTouchColumn+0xdc>)
 8000c48:	f000 fd47 	bl	80016da <returnTouchStateAndLocation>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d159      	bne.n	8000d06 <PollTouchColumn+0xca>
            //DetermineTouchPosition(&touchData);
            int tx = touchData.x;
 8000c52:	4b31      	ldr	r3, [pc, #196]	@ (8000d18 <PollTouchColumn+0xdc>)
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	617b      	str	r3, [r7, #20]


            if (tx >= ORIGIN_X - CELL_SPACING_X/2 &&
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d953      	bls.n	8000d06 <PollTouchColumn+0xca>
                tx <= ORIGIN_X + (COLS-1)*CELL_SPACING_X + CELL_SPACING_X/2) {
 8000c5e:	697b      	ldr	r3, [r7, #20]
            if (tx >= ORIGIN_X - CELL_SPACING_X/2 &&
 8000c60:	2be4      	cmp	r3, #228	@ 0xe4
 8000c62:	d850      	bhi.n	8000d06 <PollTouchColumn+0xca>

                int col = (tx - (ORIGIN_X - CELL_SPACING_X/2)) / CELL_SPACING_X;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	3b04      	subs	r3, #4
 8000c68:	095b      	lsrs	r3, r3, #5
 8000c6a:	613b      	str	r3, [r7, #16]
                if (col >= 0 && col < COLS) {
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	db49      	blt.n	8000d06 <PollTouchColumn+0xca>
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	2b06      	cmp	r3, #6
 8000c76:	dc46      	bgt.n	8000d06 <PollTouchColumn+0xca>

                    int rowIndex = -1;
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c7c:	61fb      	str	r3, [r7, #28]
                    for (int r = ROWS - 1; r >= 0; r--) {
 8000c7e:	2305      	movs	r3, #5
 8000c80:	61bb      	str	r3, [r7, #24]
 8000c82:	e01a      	b.n	8000cba <PollTouchColumn+0x7e>
                        if (board[r][col] == ' ') {
 8000c84:	4925      	ldr	r1, [pc, #148]	@ (8000d1c <PollTouchColumn+0xe0>)
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	1a9b      	subs	r3, r3, r2
 8000c8e:	18ca      	adds	r2, r1, r3
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	4413      	add	r3, r2
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b20      	cmp	r3, #32
 8000c98:	d10c      	bne.n	8000cb4 <PollTouchColumn+0x78>
                            rowIndex = r;
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	61fb      	str	r3, [r7, #28]
                            board[r][col] = currentPlayer;
 8000c9e:	491f      	ldr	r1, [pc, #124]	@ (8000d1c <PollTouchColumn+0xe0>)
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	1a9b      	subs	r3, r3, r2
 8000ca8:	18ca      	adds	r2, r1, r3
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	4413      	add	r3, r2
 8000cae:	79fa      	ldrb	r2, [r7, #7]
 8000cb0:	701a      	strb	r2, [r3, #0]
                            break;
 8000cb2:	e005      	b.n	8000cc0 <PollTouchColumn+0x84>
                    for (int r = ROWS - 1; r >= 0; r--) {
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	61bb      	str	r3, [r7, #24]
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	dae1      	bge.n	8000c84 <PollTouchColumn+0x48>
                        }
                    }
                    if (rowIndex != -1) {
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000cc6:	d01e      	beq.n	8000d06 <PollTouchColumn+0xca>

                        uint16_t color = (currentPlayer == 'X')
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	2b58      	cmp	r3, #88	@ 0x58
 8000ccc:	d102      	bne.n	8000cd4 <PollTouchColumn+0x98>
 8000cce:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000cd2:	e000      	b.n	8000cd6 <PollTouchColumn+0x9a>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	81fb      	strh	r3, [r7, #14]
                            ? LCD_COLOR_RED
                            : LCD_COLOR_BLACK;

                        uint16_t x = ORIGIN_X + col * CELL_SPACING_X;
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	015b      	lsls	r3, r3, #5
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	3314      	adds	r3, #20
 8000ce2:	81bb      	strh	r3, [r7, #12]
                        uint16_t y = ORIGIN_Y + rowIndex * CELL_SPACING_Y;
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	461a      	mov	r2, r3
 8000cea:	0092      	lsls	r2, r2, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	333c      	adds	r3, #60	@ 0x3c
 8000cf4:	817b      	strh	r3, [r7, #10]

                        LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, color);
 8000cf6:	89fb      	ldrh	r3, [r7, #14]
 8000cf8:	8979      	ldrh	r1, [r7, #10]
 8000cfa:	89b8      	ldrh	r0, [r7, #12]
 8000cfc:	220d      	movs	r2, #13
 8000cfe:	f000 fbb5 	bl	800146c <LCD_Draw_Circle_Fill>
                        return col;
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	e003      	b.n	8000d0e <PollTouchColumn+0xd2>
                    }
                }
            }
        }
        HAL_Delay(200);
 8000d06:	20c8      	movs	r0, #200	@ 0xc8
 8000d08:	f002 fac0 	bl	800328c <HAL_Delay>
        if (returnTouchStateAndLocation(&touchData) == STMPE811_State_Pressed) {
 8000d0c:	e79b      	b.n	8000c46 <PollTouchColumn+0xa>
    }
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3720      	adds	r7, #32
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200000e0 	.word	0x200000e0
 8000d1c:	200000b4 	.word	0x200000b4

08000d20 <checkDirection>:
        }
    }
    return -1;
}

int checkDirection(int startR, int startC, int dR, int dC, char piece) {
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	@ 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	603b      	str	r3, [r7, #0]
    for (int i = 1; i < 4; i++) {
 8000d2e:	2301      	movs	r3, #1
 8000d30:	61fb      	str	r3, [r7, #28]
 8000d32:	e02b      	b.n	8000d8c <checkDirection+0x6c>
        int rr = startR + dR * i;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69fa      	ldr	r2, [r7, #28]
 8000d38:	fb02 f303 	mul.w	r3, r2, r3
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        int cc = startC + dC * i;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	69fa      	ldr	r2, [r7, #28]
 8000d46:	fb02 f303 	mul.w	r3, r2, r3
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	617b      	str	r3, [r7, #20]
        if (rr < 0 || rr >= ROWS || cc < 0 || cc >= COLS || board[rr][cc] != piece)
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	db15      	blt.n	8000d82 <checkDirection+0x62>
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	2b05      	cmp	r3, #5
 8000d5a:	dc12      	bgt.n	8000d82 <checkDirection+0x62>
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	db0f      	blt.n	8000d82 <checkDirection+0x62>
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	2b06      	cmp	r3, #6
 8000d66:	dc0c      	bgt.n	8000d82 <checkDirection+0x62>
 8000d68:	490d      	ldr	r1, [pc, #52]	@ (8000da0 <checkDirection+0x80>)
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	1a9b      	subs	r3, r3, r2
 8000d72:	18ca      	adds	r2, r1, r3
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	4413      	add	r3, r2
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d001      	beq.n	8000d86 <checkDirection+0x66>
            return 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e006      	b.n	8000d94 <checkDirection+0x74>
    for (int i = 1; i < 4; i++) {
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	61fb      	str	r3, [r7, #28]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	ddd0      	ble.n	8000d34 <checkDirection+0x14>
    }
    return 1;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3724      	adds	r7, #36	@ 0x24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	200000b4 	.word	0x200000b4

08000da4 <checkWin>:

int checkWin(char piece) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
    for (int r = 0; r < ROWS; r++) {
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	e047      	b.n	8000e44 <checkWin+0xa0>
        for (int c = 0; c < COLS; c++) {
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	e03e      	b.n	8000e38 <checkWin+0x94>
            if (board[r][c] != piece) continue;
 8000dba:	4926      	ldr	r1, [pc, #152]	@ (8000e54 <checkWin+0xb0>)
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	1a9b      	subs	r3, r3, r2
 8000dc4:	18ca      	adds	r2, r1, r3
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	4413      	add	r3, r2
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	79fa      	ldrb	r2, [r7, #7]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d12e      	bne.n	8000e30 <checkWin+0x8c>
            if (checkDirection(r, c, 0, 1, piece)  ||
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	2200      	movs	r2, #0
 8000dda:	68b9      	ldr	r1, [r7, #8]
 8000ddc:	68f8      	ldr	r0, [r7, #12]
 8000dde:	f7ff ff9f 	bl	8000d20 <checkDirection>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d121      	bne.n	8000e2c <checkWin+0x88>
                checkDirection(r, c, 1, 0, piece)  ||
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2300      	movs	r3, #0
 8000dee:	2201      	movs	r2, #1
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	68f8      	ldr	r0, [r7, #12]
 8000df4:	f7ff ff94 	bl	8000d20 <checkDirection>
 8000df8:	4603      	mov	r3, r0
            if (checkDirection(r, c, 0, 1, piece)  ||
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d116      	bne.n	8000e2c <checkWin+0x88>
                checkDirection(r, c, 1, 1, piece)  ||
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2301      	movs	r3, #1
 8000e04:	2201      	movs	r2, #1
 8000e06:	68b9      	ldr	r1, [r7, #8]
 8000e08:	68f8      	ldr	r0, [r7, #12]
 8000e0a:	f7ff ff89 	bl	8000d20 <checkDirection>
 8000e0e:	4603      	mov	r3, r0
                checkDirection(r, c, 1, 0, piece)  ||
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10b      	bne.n	8000e2c <checkWin+0x88>
                checkDirection(r, c, -1, 1, piece)) {
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2301      	movs	r3, #1
 8000e1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e1e:	68b9      	ldr	r1, [r7, #8]
 8000e20:	68f8      	ldr	r0, [r7, #12]
 8000e22:	f7ff ff7d 	bl	8000d20 <checkDirection>
 8000e26:	4603      	mov	r3, r0
                checkDirection(r, c, 1, 1, piece)  ||
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d002      	beq.n	8000e32 <checkWin+0x8e>
                return 1;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e00d      	b.n	8000e4c <checkWin+0xa8>
            if (board[r][c] != piece) continue;
 8000e30:	bf00      	nop
        for (int c = 0; c < COLS; c++) {
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	3301      	adds	r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	ddbd      	ble.n	8000dba <checkWin+0x16>
    for (int r = 0; r < ROWS; r++) {
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	3301      	adds	r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2b05      	cmp	r3, #5
 8000e48:	ddb4      	ble.n	8000db4 <checkWin+0x10>
            }
        }
    }
    return 0;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200000b4 	.word	0x200000b4

08000e58 <isBoardFull>:

int isBoardFull(void) {
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
    for (int r = 0; r < ROWS; r++) {
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	e018      	b.n	8000e96 <isBoardFull+0x3e>
        for (int c = 0; c < COLS; c++) {
 8000e64:	2300      	movs	r3, #0
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	e00f      	b.n	8000e8a <isBoardFull+0x32>
            if (board[r][c] == ' ') return 0;
 8000e6a:	4910      	ldr	r1, [pc, #64]	@ (8000eac <isBoardFull+0x54>)
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	1a9b      	subs	r3, r3, r2
 8000e74:	18ca      	adds	r2, r1, r3
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	4413      	add	r3, r2
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b20      	cmp	r3, #32
 8000e7e:	d101      	bne.n	8000e84 <isBoardFull+0x2c>
 8000e80:	2300      	movs	r3, #0
 8000e82:	e00c      	b.n	8000e9e <isBoardFull+0x46>
        for (int c = 0; c < COLS; c++) {
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	2b06      	cmp	r3, #6
 8000e8e:	ddec      	ble.n	8000e6a <isBoardFull+0x12>
    for (int r = 0; r < ROWS; r++) {
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3301      	adds	r3, #1
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b05      	cmp	r3, #5
 8000e9a:	dde3      	ble.n	8000e64 <isBoardFull+0xc>
        }
    }
    return 1;
 8000e9c:	2301      	movs	r3, #1
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	200000b4 	.word	0x200000b4

08000eb0 <PlayOnePlayer>:

enum {
    HUMAN = 'X', BOT = 'O'
};

void PlayOnePlayer(void) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
    uint32_t startTick = HAL_GetTick();
 8000eb6:	f002 f9dd 	bl	8003274 <HAL_GetTick>
 8000eba:	60f8      	str	r0, [r7, #12]
    initBoard();
 8000ebc:	f7ff fe62 	bl	8000b84 <initBoard>
    GameScreen_Init();
 8000ec0:	f7ff fe88 	bl	8000bd4 <GameScreen_Init>

    LCD_SetTextColor(LCD_COLOR_WHITE);
 8000ec4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000ec8:	f000 fb46 	bl	8001558 <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 8000ecc:	485f      	ldr	r0, [pc, #380]	@ (800104c <PlayOnePlayer+0x19c>)
 8000ece:	f000 fb53 	bl	8001578 <LCD_SetFont>
    LCD_DisplayChar(20,20,'S');
 8000ed2:	2253      	movs	r2, #83	@ 0x53
 8000ed4:	2114      	movs	r1, #20
 8000ed6:	2014      	movs	r0, #20
 8000ed8:	f000 fbcc 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(35,20,'I');
 8000edc:	2249      	movs	r2, #73	@ 0x49
 8000ede:	2114      	movs	r1, #20
 8000ee0:	2023      	movs	r0, #35	@ 0x23
 8000ee2:	f000 fbc7 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(50,20,'N');
 8000ee6:	224e      	movs	r2, #78	@ 0x4e
 8000ee8:	2114      	movs	r1, #20
 8000eea:	2032      	movs	r0, #50	@ 0x32
 8000eec:	f000 fbc2 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(65,20,'G');
 8000ef0:	2247      	movs	r2, #71	@ 0x47
 8000ef2:	2114      	movs	r1, #20
 8000ef4:	2041      	movs	r0, #65	@ 0x41
 8000ef6:	f000 fbbd 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(80,20,'L');
 8000efa:	224c      	movs	r2, #76	@ 0x4c
 8000efc:	2114      	movs	r1, #20
 8000efe:	2050      	movs	r0, #80	@ 0x50
 8000f00:	f000 fbb8 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(95,20,'E');
 8000f04:	2245      	movs	r2, #69	@ 0x45
 8000f06:	2114      	movs	r1, #20
 8000f08:	205f      	movs	r0, #95	@ 0x5f
 8000f0a:	f000 fbb3 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(125,20,'P');
 8000f0e:	2250      	movs	r2, #80	@ 0x50
 8000f10:	2114      	movs	r1, #20
 8000f12:	207d      	movs	r0, #125	@ 0x7d
 8000f14:	f000 fbae 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(140,20,'L');
 8000f18:	224c      	movs	r2, #76	@ 0x4c
 8000f1a:	2114      	movs	r1, #20
 8000f1c:	208c      	movs	r0, #140	@ 0x8c
 8000f1e:	f000 fba9 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(155,20,'A');
 8000f22:	2241      	movs	r2, #65	@ 0x41
 8000f24:	2114      	movs	r1, #20
 8000f26:	209b      	movs	r0, #155	@ 0x9b
 8000f28:	f000 fba4 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(170,20,'Y');
 8000f2c:	2259      	movs	r2, #89	@ 0x59
 8000f2e:	2114      	movs	r1, #20
 8000f30:	20aa      	movs	r0, #170	@ 0xaa
 8000f32:	f000 fb9f 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(185,20,'E');
 8000f36:	2245      	movs	r2, #69	@ 0x45
 8000f38:	2114      	movs	r1, #20
 8000f3a:	20b9      	movs	r0, #185	@ 0xb9
 8000f3c:	f000 fb9a 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(200,20,'R');
 8000f40:	2252      	movs	r2, #82	@ 0x52
 8000f42:	2114      	movs	r1, #20
 8000f44:	20c8      	movs	r0, #200	@ 0xc8
 8000f46:	f000 fb95 	bl	8001674 <LCD_DisplayChar>

    char current = HUMAN;
 8000f4a:	2358      	movs	r3, #88	@ 0x58
 8000f4c:	75fb      	strb	r3, [r7, #23]
    while (1) {
        int col;
        if (current == HUMAN) {
 8000f4e:	7dfb      	ldrb	r3, [r7, #23]
 8000f50:	2b58      	cmp	r3, #88	@ 0x58
 8000f52:	d107      	bne.n	8000f64 <PlayOnePlayer+0xb4>
            col = PollTouchColumn(HUMAN);
 8000f54:	2058      	movs	r0, #88	@ 0x58
 8000f56:	f7ff fe71 	bl	8000c3c <PollTouchColumn>
 8000f5a:	60b8      	str	r0, [r7, #8]
            HAL_Delay(200);
 8000f5c:	20c8      	movs	r0, #200	@ 0xc8
 8000f5e:	f002 f995 	bl	800328c <HAL_Delay>
 8000f62:	e050      	b.n	8001006 <PlayOnePlayer+0x156>
        } else {

        	HAL_Delay(2000);
 8000f64:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f68:	f002 f990 	bl	800328c <HAL_Delay>
            
            uint32_t rnd;
            do {
                HAL_RNG_GenerateRandomNumber(&hrng, &rnd);
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4837      	ldr	r0, [pc, #220]	@ (8001050 <PlayOnePlayer+0x1a0>)
 8000f72:	f004 ff1b 	bl	8005dac <HAL_RNG_GenerateRandomNumber>
                col = rnd % COLS;
 8000f76:	6839      	ldr	r1, [r7, #0]
 8000f78:	4b36      	ldr	r3, [pc, #216]	@ (8001054 <PlayOnePlayer+0x1a4>)
 8000f7a:	fba3 2301 	umull	r2, r3, r3, r1
 8000f7e:	1aca      	subs	r2, r1, r3
 8000f80:	0852      	lsrs	r2, r2, #1
 8000f82:	4413      	add	r3, r2
 8000f84:	089a      	lsrs	r2, r3, #2
 8000f86:	4613      	mov	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	1a9b      	subs	r3, r3, r2
 8000f8c:	1aca      	subs	r2, r1, r3
 8000f8e:	60ba      	str	r2, [r7, #8]
            } while (board[0][col] != ' ');
 8000f90:	4a31      	ldr	r2, [pc, #196]	@ (8001058 <PlayOnePlayer+0x1a8>)
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	4413      	add	r3, r2
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b20      	cmp	r3, #32
 8000f9a:	d1e7      	bne.n	8000f6c <PlayOnePlayer+0xbc>
          
            for (int r = ROWS - 1; r >= 0; r--) {
 8000f9c:	2305      	movs	r3, #5
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	e02e      	b.n	8001000 <PlayOnePlayer+0x150>
                if (board[r][col] == ' ') {
 8000fa2:	492d      	ldr	r1, [pc, #180]	@ (8001058 <PlayOnePlayer+0x1a8>)
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	1a9b      	subs	r3, r3, r2
 8000fac:	18ca      	adds	r2, r1, r3
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b20      	cmp	r3, #32
 8000fb6:	d120      	bne.n	8000ffa <PlayOnePlayer+0x14a>
                    board[r][col] = BOT;
 8000fb8:	4927      	ldr	r1, [pc, #156]	@ (8001058 <PlayOnePlayer+0x1a8>)
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	1a9b      	subs	r3, r3, r2
 8000fc2:	18ca      	adds	r2, r1, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	224f      	movs	r2, #79	@ 0x4f
 8000fca:	701a      	strb	r2, [r3, #0]
                    uint16_t x = ORIGIN_X + col * CELL_SPACING_X;
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	015b      	lsls	r3, r3, #5
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	3314      	adds	r3, #20
 8000fd6:	80fb      	strh	r3, [r7, #6]
                    uint16_t y = ORIGIN_Y + r * CELL_SPACING_Y;
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	461a      	mov	r2, r3
 8000fde:	0092      	lsls	r2, r2, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	333c      	adds	r3, #60	@ 0x3c
 8000fe8:	80bb      	strh	r3, [r7, #4]
                    LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, PLAYER2_COLOR);
 8000fea:	88b9      	ldrh	r1, [r7, #4]
 8000fec:	88f8      	ldrh	r0, [r7, #6]
 8000fee:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000ff2:	220d      	movs	r2, #13
 8000ff4:	f000 fa3a 	bl	800146c <LCD_Draw_Circle_Fill>
                    break;
 8000ff8:	e005      	b.n	8001006 <PlayOnePlayer+0x156>
            for (int r = ROWS - 1; r >= 0; r--) {
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	2b00      	cmp	r3, #0
 8001004:	dacd      	bge.n	8000fa2 <PlayOnePlayer+0xf2>
                }
            }
        }
        if (checkWin(current) || isBoardFull()) break;
 8001006:	7dfb      	ldrb	r3, [r7, #23]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fecb 	bl	8000da4 <checkWin>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10c      	bne.n	800102e <PlayOnePlayer+0x17e>
 8001014:	f7ff ff20 	bl	8000e58 <isBoardFull>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d107      	bne.n	800102e <PlayOnePlayer+0x17e>
        current = (current == HUMAN) ? BOT : HUMAN;
 800101e:	7dfb      	ldrb	r3, [r7, #23]
 8001020:	2b58      	cmp	r3, #88	@ 0x58
 8001022:	d101      	bne.n	8001028 <PlayOnePlayer+0x178>
 8001024:	234f      	movs	r3, #79	@ 0x4f
 8001026:	e000      	b.n	800102a <PlayOnePlayer+0x17a>
 8001028:	2358      	movs	r3, #88	@ 0x58
 800102a:	75fb      	strb	r3, [r7, #23]
    while (1) {
 800102c:	e78f      	b.n	8000f4e <PlayOnePlayer+0x9e>
    }
    lastRoundTimeSec = (HAL_GetTick() - startTick) / 1000;
 800102e:	f002 f921 	bl	8003274 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	4a08      	ldr	r2, [pc, #32]	@ (800105c <PlayOnePlayer+0x1ac>)
 800103a:	fba2 2303 	umull	r2, r3, r2, r3
 800103e:	099b      	lsrs	r3, r3, #6
 8001040:	4a07      	ldr	r2, [pc, #28]	@ (8001060 <PlayOnePlayer+0x1b0>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000004 	.word	0x20000004
 8001050:	20025b1c 	.word	0x20025b1c
 8001054:	24924925 	.word	0x24924925
 8001058:	200000b4 	.word	0x200000b4
 800105c:	10624dd3 	.word	0x10624dd3
 8001060:	200000b0 	.word	0x200000b0

08001064 <PlayTwoPlayer>:



void PlayTwoPlayer(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
    uint32_t startTick = HAL_GetTick();
 800106a:	f002 f903 	bl	8003274 <HAL_GetTick>
 800106e:	6038      	str	r0, [r7, #0]
    initBoard();
 8001070:	f7ff fd88 	bl	8000b84 <initBoard>
    GameScreen_Init();
 8001074:	f7ff fdae 	bl	8000bd4 <GameScreen_Init>

    LCD_SetTextColor(LCD_COLOR_WHITE);
 8001078:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800107c:	f000 fa6c 	bl	8001558 <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 8001080:	4835      	ldr	r0, [pc, #212]	@ (8001158 <PlayTwoPlayer+0xf4>)
 8001082:	f000 fa79 	bl	8001578 <LCD_SetFont>
    LCD_DisplayChar(20,20,'2');
 8001086:	2232      	movs	r2, #50	@ 0x32
 8001088:	2114      	movs	r1, #20
 800108a:	2014      	movs	r0, #20
 800108c:	f000 faf2 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(35,20,'-');
 8001090:	222d      	movs	r2, #45	@ 0x2d
 8001092:	2114      	movs	r1, #20
 8001094:	2023      	movs	r0, #35	@ 0x23
 8001096:	f000 faed 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(50,20,'P');
 800109a:	2250      	movs	r2, #80	@ 0x50
 800109c:	2114      	movs	r1, #20
 800109e:	2032      	movs	r0, #50	@ 0x32
 80010a0:	f000 fae8 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(65,20,'L');
 80010a4:	224c      	movs	r2, #76	@ 0x4c
 80010a6:	2114      	movs	r1, #20
 80010a8:	2041      	movs	r0, #65	@ 0x41
 80010aa:	f000 fae3 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(80,20,'A');
 80010ae:	2241      	movs	r2, #65	@ 0x41
 80010b0:	2114      	movs	r1, #20
 80010b2:	2050      	movs	r0, #80	@ 0x50
 80010b4:	f000 fade 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(95,20,'Y');
 80010b8:	2259      	movs	r2, #89	@ 0x59
 80010ba:	2114      	movs	r1, #20
 80010bc:	205f      	movs	r0, #95	@ 0x5f
 80010be:	f000 fad9 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(110,20,'E');
 80010c2:	2245      	movs	r2, #69	@ 0x45
 80010c4:	2114      	movs	r1, #20
 80010c6:	206e      	movs	r0, #110	@ 0x6e
 80010c8:	f000 fad4 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(125,20,'R');
 80010cc:	2252      	movs	r2, #82	@ 0x52
 80010ce:	2114      	movs	r1, #20
 80010d0:	207d      	movs	r0, #125	@ 0x7d
 80010d2:	f000 facf 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(155,20,'M');
 80010d6:	224d      	movs	r2, #77	@ 0x4d
 80010d8:	2114      	movs	r1, #20
 80010da:	209b      	movs	r0, #155	@ 0x9b
 80010dc:	f000 faca 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(170,20,'O');
 80010e0:	224f      	movs	r2, #79	@ 0x4f
 80010e2:	2114      	movs	r1, #20
 80010e4:	20aa      	movs	r0, #170	@ 0xaa
 80010e6:	f000 fac5 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(185,20,'D');
 80010ea:	2244      	movs	r2, #68	@ 0x44
 80010ec:	2114      	movs	r1, #20
 80010ee:	20b9      	movs	r0, #185	@ 0xb9
 80010f0:	f000 fac0 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(200,20,'E');
 80010f4:	2245      	movs	r2, #69	@ 0x45
 80010f6:	2114      	movs	r1, #20
 80010f8:	20c8      	movs	r0, #200	@ 0xc8
 80010fa:	f000 fabb 	bl	8001674 <LCD_DisplayChar>

    char current = HUMAN;
 80010fe:	2358      	movs	r3, #88	@ 0x58
 8001100:	71fb      	strb	r3, [r7, #7]
    while (1) {
      
        PollTouchColumn(current);
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fd99 	bl	8000c3c <PollTouchColumn>
        HAL_Delay(200);
 800110a:	20c8      	movs	r0, #200	@ 0xc8
 800110c:	f002 f8be 	bl	800328c <HAL_Delay>
        if (checkWin(current) || isBoardFull()) break;
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fe46 	bl	8000da4 <checkWin>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10c      	bne.n	8001138 <PlayTwoPlayer+0xd4>
 800111e:	f7ff fe9b 	bl	8000e58 <isBoardFull>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d107      	bne.n	8001138 <PlayTwoPlayer+0xd4>
        current = (current == HUMAN) ? BOT : HUMAN;
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b58      	cmp	r3, #88	@ 0x58
 800112c:	d101      	bne.n	8001132 <PlayTwoPlayer+0xce>
 800112e:	234f      	movs	r3, #79	@ 0x4f
 8001130:	e000      	b.n	8001134 <PlayTwoPlayer+0xd0>
 8001132:	2358      	movs	r3, #88	@ 0x58
 8001134:	71fb      	strb	r3, [r7, #7]
        PollTouchColumn(current);
 8001136:	e7e4      	b.n	8001102 <PlayTwoPlayer+0x9e>
    }
    lastRoundTimeSec = (HAL_GetTick() - startTick) / 1000;
 8001138:	f002 f89c 	bl	8003274 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	4a06      	ldr	r2, [pc, #24]	@ (800115c <PlayTwoPlayer+0xf8>)
 8001144:	fba2 2303 	umull	r2, r3, r2, r3
 8001148:	099b      	lsrs	r3, r3, #6
 800114a:	4a05      	ldr	r2, [pc, #20]	@ (8001160 <PlayTwoPlayer+0xfc>)
 800114c:	6013      	str	r3, [r2, #0]

}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000004 	.word	0x20000004
 800115c:	10624dd3 	.word	0x10624dd3
 8001160:	200000b0 	.word	0x200000b0

08001164 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08c      	sub	sp, #48	@ 0x30
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
 800116e:	4b5a      	ldr	r3, [pc, #360]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001172:	4a59      	ldr	r2, [pc, #356]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 8001174:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001178:	6453      	str	r3, [r2, #68]	@ 0x44
 800117a:	4b57      	ldr	r3, [pc, #348]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001182:	61bb      	str	r3, [r7, #24]
 8001184:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	4b53      	ldr	r3, [pc, #332]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	4a52      	ldr	r2, [pc, #328]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	@ 0x30
 8001196:	4b50      	ldr	r3, [pc, #320]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	4b4c      	ldr	r3, [pc, #304]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a4b      	ldr	r2, [pc, #300]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b49      	ldr	r3, [pc, #292]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b45      	ldr	r3, [pc, #276]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a44      	ldr	r2, [pc, #272]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b42      	ldr	r3, [pc, #264]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	4b3e      	ldr	r3, [pc, #248]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	4a3d      	ldr	r2, [pc, #244]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 80011e4:	f043 0308 	orr.w	r3, r3, #8
 80011e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ea:	4b3b      	ldr	r3, [pc, #236]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	4b37      	ldr	r3, [pc, #220]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	4a36      	ldr	r2, [pc, #216]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 8001200:	f043 0320 	orr.w	r3, r3, #32
 8001204:	6313      	str	r3, [r2, #48]	@ 0x30
 8001206:	4b34      	ldr	r3, [pc, #208]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	f003 0320 	and.w	r3, r3, #32
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	4b30      	ldr	r3, [pc, #192]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a2f      	ldr	r2, [pc, #188]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 800121c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b2d      	ldr	r3, [pc, #180]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800122e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001232:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800123c:	2302      	movs	r3, #2
 800123e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001240:	230e      	movs	r3, #14
 8001242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	4824      	ldr	r0, [pc, #144]	@ (80012dc <LCD_GPIO_Init+0x178>)
 800124c:	f002 f928 	bl	80034a0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001250:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001254:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	4619      	mov	r1, r3
 800125c:	4820      	ldr	r0, [pc, #128]	@ (80012e0 <LCD_GPIO_Init+0x17c>)
 800125e:	f002 f91f 	bl	80034a0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001262:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001266:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	481d      	ldr	r0, [pc, #116]	@ (80012e4 <LCD_GPIO_Init+0x180>)
 8001270:	f002 f916 	bl	80034a0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001274:	2348      	movs	r3, #72	@ 0x48
 8001276:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	4619      	mov	r1, r3
 800127e:	481a      	ldr	r0, [pc, #104]	@ (80012e8 <LCD_GPIO_Init+0x184>)
 8001280:	f002 f90e 	bl	80034a0 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001284:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001288:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	4816      	ldr	r0, [pc, #88]	@ (80012ec <LCD_GPIO_Init+0x188>)
 8001292:	f002 f905 	bl	80034a0 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001296:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800129a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	4619      	mov	r1, r3
 80012a2:	4813      	ldr	r0, [pc, #76]	@ (80012f0 <LCD_GPIO_Init+0x18c>)
 80012a4:	f002 f8fc 	bl	80034a0 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80012a8:	2303      	movs	r3, #3
 80012aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80012ac:	2309      	movs	r3, #9
 80012ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	480a      	ldr	r0, [pc, #40]	@ (80012e0 <LCD_GPIO_Init+0x17c>)
 80012b8:	f002 f8f2 	bl	80034a0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80012bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	4809      	ldr	r0, [pc, #36]	@ (80012f0 <LCD_GPIO_Init+0x18c>)
 80012ca:	f002 f8e9 	bl	80034a0 <HAL_GPIO_Init>
}
 80012ce:	bf00      	nop
 80012d0:	3730      	adds	r7, #48	@ 0x30
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020400 	.word	0x40020400
 80012e4:	40020800 	.word	0x40020800
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	40021400 	.word	0x40021400
 80012f0:	40021800 	.word	0x40021800

080012f4 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b090      	sub	sp, #64	@ 0x40
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8001302:	23f0      	movs	r3, #240	@ 0xf0
 8001304:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800130a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800130e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001310:	2302      	movs	r3, #2
 8001312:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001314:	23ff      	movs	r3, #255	@ 0xff
 8001316:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800131c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001320:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001322:	2305      	movs	r3, #5
 8001324:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 800132c:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <LTCD_Layer_Init+0x78>)
 800132e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001330:	23f0      	movs	r3, #240	@ 0xf0
 8001332:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001334:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001338:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 800134c:	79fa      	ldrb	r2, [r7, #7]
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	4619      	mov	r1, r3
 8001354:	4806      	ldr	r0, [pc, #24]	@ (8001370 <LTCD_Layer_Init+0x7c>)
 8001356:	f003 fce5 	bl	8004d24 <HAL_LTDC_ConfigLayer>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001360:	f000 f9aa 	bl	80016b8 <LCD_Error_Handler>
	}
}
 8001364:	bf00      	nop
 8001366:	3740      	adds	r7, #64	@ 0x40
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200001c4 	.word	0x200001c4
 8001370:	200000e8 	.word	0x200000e8

08001374 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001378:	4b2a      	ldr	r3, [pc, #168]	@ (8001424 <LTCD__Init+0xb0>)
 800137a:	4a2b      	ldr	r2, [pc, #172]	@ (8001428 <LTCD__Init+0xb4>)
 800137c:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800137e:	4b29      	ldr	r3, [pc, #164]	@ (8001424 <LTCD__Init+0xb0>)
 8001380:	2209      	movs	r2, #9
 8001382:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001384:	4b27      	ldr	r3, [pc, #156]	@ (8001424 <LTCD__Init+0xb0>)
 8001386:	2201      	movs	r2, #1
 8001388:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800138a:	4b26      	ldr	r3, [pc, #152]	@ (8001424 <LTCD__Init+0xb0>)
 800138c:	221d      	movs	r2, #29
 800138e:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001390:	4b24      	ldr	r3, [pc, #144]	@ (8001424 <LTCD__Init+0xb0>)
 8001392:	2203      	movs	r2, #3
 8001394:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8001396:	4b23      	ldr	r3, [pc, #140]	@ (8001424 <LTCD__Init+0xb0>)
 8001398:	f240 120d 	movw	r2, #269	@ 0x10d
 800139c:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800139e:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <LTCD__Init+0xb0>)
 80013a0:	f240 1243 	movw	r2, #323	@ 0x143
 80013a4:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80013a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001424 <LTCD__Init+0xb0>)
 80013a8:	f240 1217 	movw	r2, #279	@ 0x117
 80013ac:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80013ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001424 <LTCD__Init+0xb0>)
 80013b0:	f240 1247 	movw	r2, #327	@ 0x147
 80013b4:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80013b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001424 <LTCD__Init+0xb0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80013be:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <LTCD__Init+0xb0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80013c6:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <LTCD__Init+0xb0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80013ce:	4b17      	ldr	r3, [pc, #92]	@ (800142c <LTCD__Init+0xb8>)
 80013d0:	2208      	movs	r2, #8
 80013d2:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80013d4:	4b15      	ldr	r3, [pc, #84]	@ (800142c <LTCD__Init+0xb8>)
 80013d6:	22c0      	movs	r2, #192	@ 0xc0
 80013d8:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80013da:	4b14      	ldr	r3, [pc, #80]	@ (800142c <LTCD__Init+0xb8>)
 80013dc:	2204      	movs	r2, #4
 80013de:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80013e0:	4b12      	ldr	r3, [pc, #72]	@ (800142c <LTCD__Init+0xb8>)
 80013e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013e6:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80013e8:	4810      	ldr	r0, [pc, #64]	@ (800142c <LTCD__Init+0xb8>)
 80013ea:	f004 faf5 	bl	80059d8 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80013ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <LTCD__Init+0xb0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80013f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <LTCD__Init+0xb0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80013fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <LTCD__Init+0xb0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001400:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <LTCD__Init+0xb0>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8001406:	f7ff fead 	bl	8001164 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800140a:	4806      	ldr	r0, [pc, #24]	@ (8001424 <LTCD__Init+0xb0>)
 800140c:	f003 fbba 	bl	8004b84 <HAL_LTDC_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8001416:	f000 f94f 	bl	80016b8 <LCD_Error_Handler>
	 }

	ili9341_Init();
 800141a:	f000 f975 	bl	8001708 <ili9341_Init>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200000e8 	.word	0x200000e8
 8001428:	40016800 	.word	0x40016800
 800142c:	20000190 	.word	0x20000190

08001430 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	80fb      	strh	r3, [r7, #6]
 800143a:	460b      	mov	r3, r1
 800143c:	80bb      	strh	r3, [r7, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8001442:	88ba      	ldrh	r2, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	1a9b      	subs	r3, r3, r2
 800144a:	011b      	lsls	r3, r3, #4
 800144c:	461a      	mov	r2, r3
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	4413      	add	r3, r2
 8001452:	4905      	ldr	r1, [pc, #20]	@ (8001468 <LCD_Draw_Pixel+0x38>)
 8001454:	887a      	ldrh	r2, [r7, #2]
 8001456:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	200001c4 	.word	0x200001c4

0800146c <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	4604      	mov	r4, r0
 8001474:	4608      	mov	r0, r1
 8001476:	4611      	mov	r1, r2
 8001478:	461a      	mov	r2, r3
 800147a:	4623      	mov	r3, r4
 800147c:	80fb      	strh	r3, [r7, #6]
 800147e:	4603      	mov	r3, r0
 8001480:	80bb      	strh	r3, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	807b      	strh	r3, [r7, #2]
 8001486:	4613      	mov	r3, r2
 8001488:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 800148a:	887b      	ldrh	r3, [r7, #2]
 800148c:	425b      	negs	r3, r3
 800148e:	b29b      	uxth	r3, r3
 8001490:	81fb      	strh	r3, [r7, #14]
 8001492:	e034      	b.n	80014fe <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8001494:	887b      	ldrh	r3, [r7, #2]
 8001496:	425b      	negs	r3, r3
 8001498:	b29b      	uxth	r3, r3
 800149a:	81bb      	strh	r3, [r7, #12]
 800149c:	e024      	b.n	80014e8 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 800149e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80014a6:	fb03 f202 	mul.w	r2, r3, r2
 80014aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014ae:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80014b2:	fb01 f303 	mul.w	r3, r1, r3
 80014b6:	441a      	add	r2, r3
 80014b8:	887b      	ldrh	r3, [r7, #2]
 80014ba:	8879      	ldrh	r1, [r7, #2]
 80014bc:	fb01 f303 	mul.w	r3, r1, r3
 80014c0:	429a      	cmp	r2, r3
 80014c2:	dc0b      	bgt.n	80014dc <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 80014c4:	89ba      	ldrh	r2, [r7, #12]
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	4413      	add	r3, r2
 80014ca:	b298      	uxth	r0, r3
 80014cc:	89fa      	ldrh	r2, [r7, #14]
 80014ce:	88bb      	ldrh	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	883a      	ldrh	r2, [r7, #0]
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff ffaa 	bl	8001430 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 80014dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	3301      	adds	r3, #1
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	81bb      	strh	r3, [r7, #12]
 80014e8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80014ec:	887b      	ldrh	r3, [r7, #2]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	ddd5      	ble.n	800149e <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 80014f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	3301      	adds	r3, #1
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	81fb      	strh	r3, [r7, #14]
 80014fe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001502:	887b      	ldrh	r3, [r7, #2]
 8001504:	429a      	cmp	r2, r3
 8001506:	ddc5      	ble.n	8001494 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	bd90      	pop	{r4, r7, pc}
	...

08001514 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	460a      	mov	r2, r1
 800151e:	71fb      	strb	r3, [r7, #7]
 8001520:	4613      	mov	r3, r2
 8001522:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10e      	bne.n	8001548 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	e007      	b.n	8001540 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8001530:	4908      	ldr	r1, [pc, #32]	@ (8001554 <LCD_Clear+0x40>)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	88ba      	ldrh	r2, [r7, #4]
 8001536:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3301      	adds	r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001546:	d3f3      	bcc.n	8001530 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	200001c4 	.word	0x200001c4

08001558 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8001562:	4a04      	ldr	r2, [pc, #16]	@ (8001574 <LCD_SetTextColor+0x1c>)
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	8013      	strh	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	20000000 	.word	0x20000000

08001578 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001580:	4a04      	ldr	r2, [pc, #16]	@ (8001594 <LCD_SetFont+0x1c>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6013      	str	r3, [r2, #0]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	200001c0 	.word	0x200001c0

08001598 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	603a      	str	r2, [r7, #0]
 80015a2:	80fb      	strh	r3, [r7, #6]
 80015a4:	460b      	mov	r3, r1
 80015a6:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	e04c      	b.n	8001650 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	e03f      	b.n	800163c <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	4619      	mov	r1, r3
 80015c8:	4b27      	ldr	r3, [pc, #156]	@ (8001668 <LCD_Draw_Char+0xd0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	889b      	ldrh	r3, [r3, #4]
 80015ce:	4a27      	ldr	r2, [pc, #156]	@ (800166c <LCD_Draw_Char+0xd4>)
 80015d0:	fba2 2303 	umull	r2, r3, r2, r3
 80015d4:	08db      	lsrs	r3, r3, #3
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	2280      	movs	r2, #128	@ 0x80
 80015dc:	409a      	lsls	r2, r3
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	fa42 f303 	asr.w	r3, r2, r3
 80015e4:	400b      	ands	r3, r1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d104      	bne.n	80015f4 <LCD_Draw_Char+0x5c>
 80015ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001668 <LCD_Draw_Char+0xd0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	889b      	ldrh	r3, [r3, #4]
 80015f0:	2b0c      	cmp	r3, #12
 80015f2:	d920      	bls.n	8001636 <LCD_Draw_Char+0x9e>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	fa42 f303 	asr.w	r3, r2, r3
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d104      	bne.n	8001618 <LCD_Draw_Char+0x80>
 800160e:	4b16      	ldr	r3, [pc, #88]	@ (8001668 <LCD_Draw_Char+0xd0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	889b      	ldrh	r3, [r3, #4]
 8001614:	2b0c      	cmp	r3, #12
 8001616:	d80e      	bhi.n	8001636 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	b29a      	uxth	r2, r3
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	4413      	add	r3, r2
 8001620:	b298      	uxth	r0, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	b29a      	uxth	r2, r3
 8001626:	88bb      	ldrh	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	b29b      	uxth	r3, r3
 800162c:	4a10      	ldr	r2, [pc, #64]	@ (8001670 <LCD_Draw_Char+0xd8>)
 800162e:	8812      	ldrh	r2, [r2, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff fefd 	bl	8001430 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	3301      	adds	r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <LCD_Draw_Char+0xd0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	889b      	ldrh	r3, [r3, #4]
 8001642:	461a      	mov	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4293      	cmp	r3, r2
 8001648:	d3b8      	bcc.n	80015bc <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	3301      	adds	r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <LCD_Draw_Char+0xd0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	88db      	ldrh	r3, [r3, #6]
 8001656:	461a      	mov	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4293      	cmp	r3, r2
 800165c:	d3ab      	bcc.n	80015b6 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 800165e:	bf00      	nop
 8001660:	bf00      	nop
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	200001c0 	.word	0x200001c0
 800166c:	aaaaaaab 	.word	0xaaaaaaab
 8001670:	20000000 	.word	0x20000000

08001674 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	80fb      	strh	r3, [r7, #6]
 800167e:	460b      	mov	r3, r1
 8001680:	80bb      	strh	r3, [r7, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	3b20      	subs	r3, #32
 800168a:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 800168c:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <LCD_DisplayChar+0x40>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	4907      	ldr	r1, [pc, #28]	@ (80016b4 <LCD_DisplayChar+0x40>)
 8001696:	6809      	ldr	r1, [r1, #0]
 8001698:	88c9      	ldrh	r1, [r1, #6]
 800169a:	fb01 f303 	mul.w	r3, r1, r3
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	441a      	add	r2, r3
 80016a2:	88b9      	ldrh	r1, [r7, #4]
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff76 	bl	8001598 <LCD_Draw_Char>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200001c0 	.word	0x200001c0

080016b8 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016bc:	b672      	cpsid	i
}
 80016be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <LCD_Error_Handler+0x8>

080016c4 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 80016c8:	f001 f93b 	bl	8002942 <STMPE811_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d001      	beq.n	80016d6 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 80016d2:	bf00      	nop
 80016d4:	e7fd      	b.n	80016d2 <InitializeLCDTouch+0xe>
  }
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}

080016da <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f001 f9e5 	bl	8002ab2 <STMPE811_ReadTouch>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <DetermineTouchPosition>:

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f001 faa5 	bl	8002c4a <STMPE811_DetermineTouchPosition>
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800170c:	f000 f9fe 	bl	8001b0c <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001710:	20ca      	movs	r0, #202	@ 0xca
 8001712:	f000 f943 	bl	800199c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001716:	20c3      	movs	r0, #195	@ 0xc3
 8001718:	f000 f94d 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 800171c:	2008      	movs	r0, #8
 800171e:	f000 f94a 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001722:	2050      	movs	r0, #80	@ 0x50
 8001724:	f000 f947 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001728:	20cf      	movs	r0, #207	@ 0xcf
 800172a:	f000 f937 	bl	800199c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800172e:	2000      	movs	r0, #0
 8001730:	f000 f941 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001734:	20c1      	movs	r0, #193	@ 0xc1
 8001736:	f000 f93e 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 800173a:	2030      	movs	r0, #48	@ 0x30
 800173c:	f000 f93b 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001740:	20ed      	movs	r0, #237	@ 0xed
 8001742:	f000 f92b 	bl	800199c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001746:	2064      	movs	r0, #100	@ 0x64
 8001748:	f000 f935 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 800174c:	2003      	movs	r0, #3
 800174e:	f000 f932 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001752:	2012      	movs	r0, #18
 8001754:	f000 f92f 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001758:	2081      	movs	r0, #129	@ 0x81
 800175a:	f000 f92c 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800175e:	20e8      	movs	r0, #232	@ 0xe8
 8001760:	f000 f91c 	bl	800199c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001764:	2085      	movs	r0, #133	@ 0x85
 8001766:	f000 f926 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800176a:	2000      	movs	r0, #0
 800176c:	f000 f923 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001770:	2078      	movs	r0, #120	@ 0x78
 8001772:	f000 f920 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001776:	20cb      	movs	r0, #203	@ 0xcb
 8001778:	f000 f910 	bl	800199c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 800177c:	2039      	movs	r0, #57	@ 0x39
 800177e:	f000 f91a 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001782:	202c      	movs	r0, #44	@ 0x2c
 8001784:	f000 f917 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001788:	2000      	movs	r0, #0
 800178a:	f000 f914 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800178e:	2034      	movs	r0, #52	@ 0x34
 8001790:	f000 f911 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001794:	2002      	movs	r0, #2
 8001796:	f000 f90e 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 800179a:	20f7      	movs	r0, #247	@ 0xf7
 800179c:	f000 f8fe 	bl	800199c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80017a0:	2020      	movs	r0, #32
 80017a2:	f000 f908 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 80017a6:	20ea      	movs	r0, #234	@ 0xea
 80017a8:	f000 f8f8 	bl	800199c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80017ac:	2000      	movs	r0, #0
 80017ae:	f000 f902 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80017b2:	2000      	movs	r0, #0
 80017b4:	f000 f8ff 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80017b8:	20b1      	movs	r0, #177	@ 0xb1
 80017ba:	f000 f8ef 	bl	800199c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80017be:	2000      	movs	r0, #0
 80017c0:	f000 f8f9 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80017c4:	201b      	movs	r0, #27
 80017c6:	f000 f8f6 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80017ca:	20b6      	movs	r0, #182	@ 0xb6
 80017cc:	f000 f8e6 	bl	800199c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80017d0:	200a      	movs	r0, #10
 80017d2:	f000 f8f0 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80017d6:	20a2      	movs	r0, #162	@ 0xa2
 80017d8:	f000 f8ed 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80017dc:	20c0      	movs	r0, #192	@ 0xc0
 80017de:	f000 f8dd 	bl	800199c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80017e2:	2010      	movs	r0, #16
 80017e4:	f000 f8e7 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80017e8:	20c1      	movs	r0, #193	@ 0xc1
 80017ea:	f000 f8d7 	bl	800199c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80017ee:	2010      	movs	r0, #16
 80017f0:	f000 f8e1 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80017f4:	20c5      	movs	r0, #197	@ 0xc5
 80017f6:	f000 f8d1 	bl	800199c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80017fa:	2045      	movs	r0, #69	@ 0x45
 80017fc:	f000 f8db 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001800:	2015      	movs	r0, #21
 8001802:	f000 f8d8 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001806:	20c7      	movs	r0, #199	@ 0xc7
 8001808:	f000 f8c8 	bl	800199c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 800180c:	2090      	movs	r0, #144	@ 0x90
 800180e:	f000 f8d2 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001812:	2036      	movs	r0, #54	@ 0x36
 8001814:	f000 f8c2 	bl	800199c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001818:	20c8      	movs	r0, #200	@ 0xc8
 800181a:	f000 f8cc 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800181e:	20f2      	movs	r0, #242	@ 0xf2
 8001820:	f000 f8bc 	bl	800199c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001824:	2000      	movs	r0, #0
 8001826:	f000 f8c6 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800182a:	20b0      	movs	r0, #176	@ 0xb0
 800182c:	f000 f8b6 	bl	800199c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001830:	20c2      	movs	r0, #194	@ 0xc2
 8001832:	f000 f8c0 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001836:	20b6      	movs	r0, #182	@ 0xb6
 8001838:	f000 f8b0 	bl	800199c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800183c:	200a      	movs	r0, #10
 800183e:	f000 f8ba 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001842:	20a7      	movs	r0, #167	@ 0xa7
 8001844:	f000 f8b7 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001848:	2027      	movs	r0, #39	@ 0x27
 800184a:	f000 f8b4 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800184e:	2004      	movs	r0, #4
 8001850:	f000 f8b1 	bl	80019b6 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001854:	202a      	movs	r0, #42	@ 0x2a
 8001856:	f000 f8a1 	bl	800199c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800185a:	2000      	movs	r0, #0
 800185c:	f000 f8ab 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001860:	2000      	movs	r0, #0
 8001862:	f000 f8a8 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001866:	2000      	movs	r0, #0
 8001868:	f000 f8a5 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800186c:	20ef      	movs	r0, #239	@ 0xef
 800186e:	f000 f8a2 	bl	80019b6 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001872:	202b      	movs	r0, #43	@ 0x2b
 8001874:	f000 f892 	bl	800199c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001878:	2000      	movs	r0, #0
 800187a:	f000 f89c 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800187e:	2000      	movs	r0, #0
 8001880:	f000 f899 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001884:	2001      	movs	r0, #1
 8001886:	f000 f896 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 800188a:	203f      	movs	r0, #63	@ 0x3f
 800188c:	f000 f893 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001890:	20f6      	movs	r0, #246	@ 0xf6
 8001892:	f000 f883 	bl	800199c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001896:	2001      	movs	r0, #1
 8001898:	f000 f88d 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800189c:	2000      	movs	r0, #0
 800189e:	f000 f88a 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80018a2:	2006      	movs	r0, #6
 80018a4:	f000 f887 	bl	80019b6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80018a8:	202c      	movs	r0, #44	@ 0x2c
 80018aa:	f000 f877 	bl	800199c <ili9341_Write_Reg>
  LCD_Delay(200);
 80018ae:	20c8      	movs	r0, #200	@ 0xc8
 80018b0:	f000 f9e8 	bl	8001c84 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80018b4:	2026      	movs	r0, #38	@ 0x26
 80018b6:	f000 f871 	bl	800199c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80018ba:	2001      	movs	r0, #1
 80018bc:	f000 f87b 	bl	80019b6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80018c0:	20e0      	movs	r0, #224	@ 0xe0
 80018c2:	f000 f86b 	bl	800199c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80018c6:	200f      	movs	r0, #15
 80018c8:	f000 f875 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80018cc:	2029      	movs	r0, #41	@ 0x29
 80018ce:	f000 f872 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80018d2:	2024      	movs	r0, #36	@ 0x24
 80018d4:	f000 f86f 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80018d8:	200c      	movs	r0, #12
 80018da:	f000 f86c 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80018de:	200e      	movs	r0, #14
 80018e0:	f000 f869 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80018e4:	2009      	movs	r0, #9
 80018e6:	f000 f866 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80018ea:	204e      	movs	r0, #78	@ 0x4e
 80018ec:	f000 f863 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80018f0:	2078      	movs	r0, #120	@ 0x78
 80018f2:	f000 f860 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80018f6:	203c      	movs	r0, #60	@ 0x3c
 80018f8:	f000 f85d 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80018fc:	2009      	movs	r0, #9
 80018fe:	f000 f85a 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001902:	2013      	movs	r0, #19
 8001904:	f000 f857 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001908:	2005      	movs	r0, #5
 800190a:	f000 f854 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800190e:	2017      	movs	r0, #23
 8001910:	f000 f851 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001914:	2011      	movs	r0, #17
 8001916:	f000 f84e 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800191a:	2000      	movs	r0, #0
 800191c:	f000 f84b 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001920:	20e1      	movs	r0, #225	@ 0xe1
 8001922:	f000 f83b 	bl	800199c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001926:	2000      	movs	r0, #0
 8001928:	f000 f845 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800192c:	2016      	movs	r0, #22
 800192e:	f000 f842 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001932:	201b      	movs	r0, #27
 8001934:	f000 f83f 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001938:	2004      	movs	r0, #4
 800193a:	f000 f83c 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800193e:	2011      	movs	r0, #17
 8001940:	f000 f839 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001944:	2007      	movs	r0, #7
 8001946:	f000 f836 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800194a:	2031      	movs	r0, #49	@ 0x31
 800194c:	f000 f833 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001950:	2033      	movs	r0, #51	@ 0x33
 8001952:	f000 f830 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001956:	2042      	movs	r0, #66	@ 0x42
 8001958:	f000 f82d 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800195c:	2005      	movs	r0, #5
 800195e:	f000 f82a 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001962:	200c      	movs	r0, #12
 8001964:	f000 f827 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001968:	200a      	movs	r0, #10
 800196a:	f000 f824 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800196e:	2028      	movs	r0, #40	@ 0x28
 8001970:	f000 f821 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001974:	202f      	movs	r0, #47	@ 0x2f
 8001976:	f000 f81e 	bl	80019b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800197a:	200f      	movs	r0, #15
 800197c:	f000 f81b 	bl	80019b6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001980:	2011      	movs	r0, #17
 8001982:	f000 f80b 	bl	800199c <ili9341_Write_Reg>
  LCD_Delay(200);
 8001986:	20c8      	movs	r0, #200	@ 0xc8
 8001988:	f000 f97c 	bl	8001c84 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800198c:	2029      	movs	r0, #41	@ 0x29
 800198e:	f000 f805 	bl	800199c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001992:	202c      	movs	r0, #44	@ 0x2c
 8001994:	f000 f802 	bl	800199c <ili9341_Write_Reg>
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 f949 	bl	8001c40 <LCD_IO_WriteReg>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f91a 	bl	8001bfc <LCD_IO_WriteData>
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80019d4:	4819      	ldr	r0, [pc, #100]	@ (8001a3c <SPI_Init+0x6c>)
 80019d6:	f004 fc34 	bl	8006242 <HAL_SPI_GetState>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d12b      	bne.n	8001a38 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80019e0:	4b16      	ldr	r3, [pc, #88]	@ (8001a3c <SPI_Init+0x6c>)
 80019e2:	4a17      	ldr	r2, [pc, #92]	@ (8001a40 <SPI_Init+0x70>)
 80019e4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019e6:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <SPI_Init+0x6c>)
 80019e8:	2218      	movs	r2, #24
 80019ea:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80019ec:	4b13      	ldr	r3, [pc, #76]	@ (8001a3c <SPI_Init+0x6c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80019f2:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <SPI_Init+0x6c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80019f8:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <SPI_Init+0x6c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80019fe:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <SPI_Init+0x6c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001a04:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <SPI_Init+0x6c>)
 8001a06:	2207      	movs	r2, #7
 8001a08:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <SPI_Init+0x6c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001a10:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <SPI_Init+0x6c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <SPI_Init+0x6c>)
 8001a18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a1c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	@ (8001a3c <SPI_Init+0x6c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001a24:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <SPI_Init+0x6c>)
 8001a26:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a2a:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001a2c:	4803      	ldr	r0, [pc, #12]	@ (8001a3c <SPI_Init+0x6c>)
 8001a2e:	f000 f833 	bl	8001a98 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001a32:	4802      	ldr	r0, [pc, #8]	@ (8001a3c <SPI_Init+0x6c>)
 8001a34:	f004 fa10 	bl	8005e58 <HAL_SPI_Init>
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200259c4 	.word	0x200259c4
 8001a40:	40015000 	.word	0x40015000

08001a44 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001a52:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <SPI_Write+0x34>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	1db9      	adds	r1, r7, #6
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4808      	ldr	r0, [pc, #32]	@ (8001a7c <SPI_Write+0x38>)
 8001a5c:	f004 faad 	bl	8005fba <HAL_SPI_Transmit>
 8001a60:	4603      	mov	r3, r0
 8001a62:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001a6a:	f000 f809 	bl	8001a80 <SPI_Error>
  }
}
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000014 	.word	0x20000014
 8001a7c:	200259c4 	.word	0x200259c4

08001a80 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001a84:	4803      	ldr	r0, [pc, #12]	@ (8001a94 <SPI_Error+0x14>)
 8001a86:	f004 fa70 	bl	8005f6a <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001a8a:	f7ff ffa1 	bl	80019d0 <SPI_Init>
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200259c4 	.word	0x200259c4

08001a98 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	@ 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	4b17      	ldr	r3, [pc, #92]	@ (8001b04 <SPI_MspInit+0x6c>)
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa8:	4a16      	ldr	r2, [pc, #88]	@ (8001b04 <SPI_MspInit+0x6c>)
 8001aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001aae:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab0:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <SPI_MspInit+0x6c>)
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	4b10      	ldr	r3, [pc, #64]	@ (8001b04 <SPI_MspInit+0x6c>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac4:	4a0f      	ldr	r2, [pc, #60]	@ (8001b04 <SPI_MspInit+0x6c>)
 8001ac6:	f043 0320 	orr.w	r3, r3, #32
 8001aca:	6313      	str	r3, [r2, #48]	@ 0x30
 8001acc:	4b0d      	ldr	r3, [pc, #52]	@ (8001b04 <SPI_MspInit+0x6c>)
 8001ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad0:	f003 0320 	and.w	r3, r3, #32
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001ad8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001aea:	2305      	movs	r3, #5
 8001aec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	4804      	ldr	r0, [pc, #16]	@ (8001b08 <SPI_MspInit+0x70>)
 8001af6:	f001 fcd3 	bl	80034a0 <HAL_GPIO_Init>
}
 8001afa:	bf00      	nop
 8001afc:	3728      	adds	r7, #40	@ 0x28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40021400 	.word	0x40021400

08001b0c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001b12:	4b36      	ldr	r3, [pc, #216]	@ (8001bec <LCD_IO_Init+0xe0>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d164      	bne.n	8001be4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001b1a:	4b34      	ldr	r3, [pc, #208]	@ (8001bec <LCD_IO_Init+0xe0>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	4b32      	ldr	r3, [pc, #200]	@ (8001bf0 <LCD_IO_Init+0xe4>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b28:	4a31      	ldr	r2, [pc, #196]	@ (8001bf0 <LCD_IO_Init+0xe4>)
 8001b2a:	f043 0308 	orr.w	r3, r3, #8
 8001b2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b30:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf0 <LCD_IO_Init+0xe4>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001b3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001b42:	2301      	movs	r3, #1
 8001b44:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	4619      	mov	r1, r3
 8001b54:	4827      	ldr	r0, [pc, #156]	@ (8001bf4 <LCD_IO_Init+0xe8>)
 8001b56:	f001 fca3 	bl	80034a0 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	4b24      	ldr	r3, [pc, #144]	@ (8001bf0 <LCD_IO_Init+0xe4>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	4a23      	ldr	r2, [pc, #140]	@ (8001bf0 <LCD_IO_Init+0xe4>)
 8001b64:	f043 0308 	orr.w	r3, r3, #8
 8001b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6a:	4b21      	ldr	r3, [pc, #132]	@ (8001bf0 <LCD_IO_Init+0xe4>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001b76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001b84:	2302      	movs	r3, #2
 8001b86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001b88:	f107 030c 	add.w	r3, r7, #12
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4819      	ldr	r0, [pc, #100]	@ (8001bf4 <LCD_IO_Init+0xe8>)
 8001b90:	f001 fc86 	bl	80034a0 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001b94:	2300      	movs	r3, #0
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	4b15      	ldr	r3, [pc, #84]	@ (8001bf0 <LCD_IO_Init+0xe4>)
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9c:	4a14      	ldr	r2, [pc, #80]	@ (8001bf0 <LCD_IO_Init+0xe4>)
 8001b9e:	f043 0304 	orr.w	r3, r3, #4
 8001ba2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba4:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <LCD_IO_Init+0xe4>)
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	603b      	str	r3, [r7, #0]
 8001bae:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001bb0:	2304      	movs	r3, #4
 8001bb2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001bc0:	f107 030c 	add.w	r3, r7, #12
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	480c      	ldr	r0, [pc, #48]	@ (8001bf8 <LCD_IO_Init+0xec>)
 8001bc8:	f001 fc6a 	bl	80034a0 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2104      	movs	r1, #4
 8001bd0:	4809      	ldr	r0, [pc, #36]	@ (8001bf8 <LCD_IO_Init+0xec>)
 8001bd2:	f001 ff1d 	bl	8003a10 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	2104      	movs	r1, #4
 8001bda:	4807      	ldr	r0, [pc, #28]	@ (8001bf8 <LCD_IO_Init+0xec>)
 8001bdc:	f001 ff18 	bl	8003a10 <HAL_GPIO_WritePin>

    SPI_Init();
 8001be0:	f7ff fef6 	bl	80019d0 <SPI_Init>
  }
}
 8001be4:	bf00      	nop
 8001be6:	3720      	adds	r7, #32
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20025a1c 	.word	0x20025a1c
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020c00 	.word	0x40020c00
 8001bf8:	40020800 	.word	0x40020800

08001bfc <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001c06:	2201      	movs	r2, #1
 8001c08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c0c:	480a      	ldr	r0, [pc, #40]	@ (8001c38 <LCD_IO_WriteData+0x3c>)
 8001c0e:	f001 feff 	bl	8003a10 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001c12:	2200      	movs	r2, #0
 8001c14:	2104      	movs	r1, #4
 8001c16:	4809      	ldr	r0, [pc, #36]	@ (8001c3c <LCD_IO_WriteData+0x40>)
 8001c18:	f001 fefa 	bl	8003a10 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ff10 	bl	8001a44 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001c24:	2201      	movs	r2, #1
 8001c26:	2104      	movs	r1, #4
 8001c28:	4804      	ldr	r0, [pc, #16]	@ (8001c3c <LCD_IO_WriteData+0x40>)
 8001c2a:	f001 fef1 	bl	8003a10 <HAL_GPIO_WritePin>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40020c00 	.word	0x40020c00
 8001c3c:	40020800 	.word	0x40020800

08001c40 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c50:	480a      	ldr	r0, [pc, #40]	@ (8001c7c <LCD_IO_WriteReg+0x3c>)
 8001c52:	f001 fedd 	bl	8003a10 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001c56:	2200      	movs	r2, #0
 8001c58:	2104      	movs	r1, #4
 8001c5a:	4809      	ldr	r0, [pc, #36]	@ (8001c80 <LCD_IO_WriteReg+0x40>)
 8001c5c:	f001 fed8 	bl	8003a10 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff feed 	bl	8001a44 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	2104      	movs	r1, #4
 8001c6e:	4804      	ldr	r0, [pc, #16]	@ (8001c80 <LCD_IO_WriteReg+0x40>)
 8001c70:	f001 fece 	bl	8003a10 <HAL_GPIO_WritePin>
}
 8001c74:	bf00      	nop
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40020c00 	.word	0x40020c00
 8001c80:	40020800 	.word	0x40020800

08001c84 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f001 fafd 	bl	800328c <HAL_Delay>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c9e:	f001 fa83 	bl	80031a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ca2:	f000 f817 	bl	8001cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ca6:	f000 fa07 	bl	80020b8 <MX_GPIO_Init>
  MX_LTDC_Init();
 8001caa:	f000 f8bd 	bl	8001e28 <MX_LTDC_Init>
  MX_RNG_Init();
 8001cae:	f000 f96d 	bl	8001f8c <MX_RNG_Init>
  MX_TIM2_Init();
 8001cb2:	f000 f9b5 	bl	8002020 <MX_TIM2_Init>
  MX_SPI5_Init();
 8001cb6:	f000 f97d 	bl	8001fb4 <MX_SPI5_Init>
  MX_I2C3_Init();
 8001cba:	f000 f875 	bl	8001da8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8001cbe:	f7fe fc85 	bl	80005cc <ApplicationInit>
  ApplicationFirstScreen();
 8001cc2:	f7fe fc9b 	bl	80005fc <ApplicationFirstScreen>

  //LCD_Visual_Demo();
  HAL_Delay(5000);
 8001cc6:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001cca:	f001 fadf 	bl	800328c <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  LCD_Touch_Polling_Demo();
 8001cce:	f7fe fca9 	bl	8000624 <LCD_Touch_Polling_Demo>
 8001cd2:	e7fc      	b.n	8001cce <main+0x34>

08001cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b094      	sub	sp, #80	@ 0x50
 8001cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cda:	f107 0320 	add.w	r3, r7, #32
 8001cde:	2230      	movs	r2, #48	@ 0x30
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f005 f9d8 	bl	8007098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	4b28      	ldr	r3, [pc, #160]	@ (8001da0 <SystemClock_Config+0xcc>)
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d00:	4a27      	ldr	r2, [pc, #156]	@ (8001da0 <SystemClock_Config+0xcc>)
 8001d02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d06:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d08:	4b25      	ldr	r3, [pc, #148]	@ (8001da0 <SystemClock_Config+0xcc>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d14:	2300      	movs	r3, #0
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	4b22      	ldr	r3, [pc, #136]	@ (8001da4 <SystemClock_Config+0xd0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a21      	ldr	r2, [pc, #132]	@ (8001da4 <SystemClock_Config+0xd0>)
 8001d1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	4b1f      	ldr	r3, [pc, #124]	@ (8001da4 <SystemClock_Config+0xd0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d30:	2301      	movs	r3, #1
 8001d32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d3e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d44:	2308      	movs	r3, #8
 8001d46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d48:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001d4c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d52:	2307      	movs	r3, #7
 8001d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d56:	f107 0320 	add.w	r3, r7, #32
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f003 f9b8 	bl	80050d0 <HAL_RCC_OscConfig>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d66:	f000 fb55 	bl	8002414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d6a:	230f      	movs	r3, #15
 8001d6c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d76:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d82:	f107 030c 	add.w	r3, r7, #12
 8001d86:	2105      	movs	r1, #5
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f003 fc19 	bl	80055c0 <HAL_RCC_ClockConfig>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d94:	f000 fb3e 	bl	8002414 <Error_Handler>
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3750      	adds	r7, #80	@ 0x50
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40007000 	.word	0x40007000

08001da8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001dac:	4b1b      	ldr	r3, [pc, #108]	@ (8001e1c <MX_I2C3_Init+0x74>)
 8001dae:	4a1c      	ldr	r2, [pc, #112]	@ (8001e20 <MX_I2C3_Init+0x78>)
 8001db0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001db2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e1c <MX_I2C3_Init+0x74>)
 8001db4:	4a1b      	ldr	r2, [pc, #108]	@ (8001e24 <MX_I2C3_Init+0x7c>)
 8001db6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001db8:	4b18      	ldr	r3, [pc, #96]	@ (8001e1c <MX_I2C3_Init+0x74>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001dbe:	4b17      	ldr	r3, [pc, #92]	@ (8001e1c <MX_I2C3_Init+0x74>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dc4:	4b15      	ldr	r3, [pc, #84]	@ (8001e1c <MX_I2C3_Init+0x74>)
 8001dc6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dca:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dcc:	4b13      	ldr	r3, [pc, #76]	@ (8001e1c <MX_I2C3_Init+0x74>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001dd2:	4b12      	ldr	r3, [pc, #72]	@ (8001e1c <MX_I2C3_Init+0x74>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dd8:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <MX_I2C3_Init+0x74>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dde:	4b0f      	ldr	r3, [pc, #60]	@ (8001e1c <MX_I2C3_Init+0x74>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001de4:	480d      	ldr	r0, [pc, #52]	@ (8001e1c <MX_I2C3_Init+0x74>)
 8001de6:	f001 fe2d 	bl	8003a44 <HAL_I2C_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001df0:	f000 fb10 	bl	8002414 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001df4:	2100      	movs	r1, #0
 8001df6:	4809      	ldr	r0, [pc, #36]	@ (8001e1c <MX_I2C3_Init+0x74>)
 8001df8:	f002 fe48 	bl	8004a8c <HAL_I2CEx_ConfigAnalogFilter>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001e02:	f000 fb07 	bl	8002414 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001e06:	2100      	movs	r1, #0
 8001e08:	4804      	ldr	r0, [pc, #16]	@ (8001e1c <MX_I2C3_Init+0x74>)
 8001e0a:	f002 fe7b 	bl	8004b04 <HAL_I2CEx_ConfigDigitalFilter>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001e14:	f000 fafe 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20025a20 	.word	0x20025a20
 8001e20:	40005c00 	.word	0x40005c00
 8001e24:	000186a0 	.word	0x000186a0

08001e28 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b09a      	sub	sp, #104	@ 0x68
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001e2e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e32:	2234      	movs	r2, #52	@ 0x34
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f005 f92e 	bl	8007098 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001e3c:	463b      	mov	r3, r7
 8001e3e:	2234      	movs	r2, #52	@ 0x34
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f005 f928 	bl	8007098 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001e48:	4b4e      	ldr	r3, [pc, #312]	@ (8001f84 <MX_LTDC_Init+0x15c>)
 8001e4a:	4a4f      	ldr	r2, [pc, #316]	@ (8001f88 <MX_LTDC_Init+0x160>)
 8001e4c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001e4e:	4b4d      	ldr	r3, [pc, #308]	@ (8001f84 <MX_LTDC_Init+0x15c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001e54:	4b4b      	ldr	r3, [pc, #300]	@ (8001f84 <MX_LTDC_Init+0x15c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8001f84 <MX_LTDC_Init+0x15c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001e60:	4b48      	ldr	r3, [pc, #288]	@ (8001f84 <MX_LTDC_Init+0x15c>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001e66:	4b47      	ldr	r3, [pc, #284]	@ (8001f84 <MX_LTDC_Init+0x15c>)
 8001e68:	2207      	movs	r2, #7
 8001e6a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001e6c:	4b45      	ldr	r3, [pc, #276]	@ (8001f84 <MX_LTDC_Init+0x15c>)
 8001e6e:	2203      	movs	r2, #3
 8001e70:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001e72:	4b44      	ldr	r3, [pc, #272]	@ (8001f84 <MX_LTDC_Init+0x15c>)
 8001e74:	220e      	movs	r2, #14
 8001e76:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001e78:	4b42      	ldr	r3, [pc, #264]	@ (8001f84 <MX_LTDC_Init+0x15c>)
 8001e7a:	2205      	movs	r2, #5
 8001e7c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001e7e:	4b41      	ldr	r3, [pc, #260]	@ (8001f84 <MX_LTDC_Init+0x15c>)
 8001e80:	f240 228e 	movw	r2, #654	@ 0x28e
 8001e84:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001e86:	4b3f      	ldr	r3, [pc, #252]	@ (8001f84 <MX_LTDC_Init+0x15c>)
 8001e88:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001e8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8001e8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f84 <MX_LTDC_Init+0x15c>)
 8001e90:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001e94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001e96:	4b3b      	ldr	r3, [pc, #236]	@ (8001f84 <MX_LTDC_Init+0x15c>)
 8001e98:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001e9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001e9e:	4b39      	ldr	r3, [pc, #228]	@ (8001f84 <MX_LTDC_Init+0x15c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001ea6:	4b37      	ldr	r3, [pc, #220]	@ (8001f84 <MX_LTDC_Init+0x15c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001eae:	4b35      	ldr	r3, [pc, #212]	@ (8001f84 <MX_LTDC_Init+0x15c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001eb6:	4833      	ldr	r0, [pc, #204]	@ (8001f84 <MX_LTDC_Init+0x15c>)
 8001eb8:	f002 fe64 	bl	8004b84 <HAL_LTDC_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001ec2:	f000 faa7 	bl	8002414 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001ee2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ee6:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001ee8:	2305      	movs	r3, #5
 8001eea:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001f0a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f0e:	2200      	movs	r2, #0
 8001f10:	4619      	mov	r1, r3
 8001f12:	481c      	ldr	r0, [pc, #112]	@ (8001f84 <MX_LTDC_Init+0x15c>)
 8001f14:	f002 ff06 	bl	8004d24 <HAL_LTDC_ConfigLayer>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001f1e:	f000 fa79 	bl	8002414 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001f3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f42:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001f44:	2305      	movs	r3, #5
 8001f46:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001f66:	463b      	mov	r3, r7
 8001f68:	2201      	movs	r2, #1
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4805      	ldr	r0, [pc, #20]	@ (8001f84 <MX_LTDC_Init+0x15c>)
 8001f6e:	f002 fed9 	bl	8004d24 <HAL_LTDC_ConfigLayer>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001f78:	f000 fa4c 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001f7c:	bf00      	nop
 8001f7e:	3768      	adds	r7, #104	@ 0x68
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20025a74 	.word	0x20025a74
 8001f88:	40016800 	.word	0x40016800

08001f8c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <MX_RNG_Init+0x20>)
 8001f92:	4a07      	ldr	r2, [pc, #28]	@ (8001fb0 <MX_RNG_Init+0x24>)
 8001f94:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001f96:	4805      	ldr	r0, [pc, #20]	@ (8001fac <MX_RNG_Init+0x20>)
 8001f98:	f003 fede 	bl	8005d58 <HAL_RNG_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001fa2:	f000 fa37 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20025b1c 	.word	0x20025b1c
 8001fb0:	50060800 	.word	0x50060800

08001fb4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001fb8:	4b17      	ldr	r3, [pc, #92]	@ (8002018 <MX_SPI5_Init+0x64>)
 8001fba:	4a18      	ldr	r2, [pc, #96]	@ (800201c <MX_SPI5_Init+0x68>)
 8001fbc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001fbe:	4b16      	ldr	r3, [pc, #88]	@ (8002018 <MX_SPI5_Init+0x64>)
 8001fc0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fc4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001fc6:	4b14      	ldr	r3, [pc, #80]	@ (8002018 <MX_SPI5_Init+0x64>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fcc:	4b12      	ldr	r3, [pc, #72]	@ (8002018 <MX_SPI5_Init+0x64>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fd2:	4b11      	ldr	r3, [pc, #68]	@ (8002018 <MX_SPI5_Init+0x64>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002018 <MX_SPI5_Init+0x64>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001fde:	4b0e      	ldr	r3, [pc, #56]	@ (8002018 <MX_SPI5_Init+0x64>)
 8001fe0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fe4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8002018 <MX_SPI5_Init+0x64>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fec:	4b0a      	ldr	r3, [pc, #40]	@ (8002018 <MX_SPI5_Init+0x64>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ff2:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <MX_SPI5_Init+0x64>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ff8:	4b07      	ldr	r3, [pc, #28]	@ (8002018 <MX_SPI5_Init+0x64>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001ffe:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <MX_SPI5_Init+0x64>)
 8002000:	220a      	movs	r2, #10
 8002002:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002004:	4804      	ldr	r0, [pc, #16]	@ (8002018 <MX_SPI5_Init+0x64>)
 8002006:	f003 ff27 	bl	8005e58 <HAL_SPI_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002010:	f000 fa00 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20025b2c 	.word	0x20025b2c
 800201c:	40015000 	.word	0x40015000

08002020 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002026:	f107 0308 	add.w	r3, r7, #8
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002034:	463b      	mov	r3, r7
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800203c:	4b1d      	ldr	r3, [pc, #116]	@ (80020b4 <MX_TIM2_Init+0x94>)
 800203e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002042:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002044:	4b1b      	ldr	r3, [pc, #108]	@ (80020b4 <MX_TIM2_Init+0x94>)
 8002046:	2200      	movs	r2, #0
 8002048:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204a:	4b1a      	ldr	r3, [pc, #104]	@ (80020b4 <MX_TIM2_Init+0x94>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002050:	4b18      	ldr	r3, [pc, #96]	@ (80020b4 <MX_TIM2_Init+0x94>)
 8002052:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002056:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002058:	4b16      	ldr	r3, [pc, #88]	@ (80020b4 <MX_TIM2_Init+0x94>)
 800205a:	2200      	movs	r2, #0
 800205c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205e:	4b15      	ldr	r3, [pc, #84]	@ (80020b4 <MX_TIM2_Init+0x94>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002064:	4813      	ldr	r0, [pc, #76]	@ (80020b4 <MX_TIM2_Init+0x94>)
 8002066:	f004 f9d7 	bl	8006418 <HAL_TIM_Base_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002070:	f000 f9d0 	bl	8002414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002074:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002078:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800207a:	f107 0308 	add.w	r3, r7, #8
 800207e:	4619      	mov	r1, r3
 8002080:	480c      	ldr	r0, [pc, #48]	@ (80020b4 <MX_TIM2_Init+0x94>)
 8002082:	f004 fa18 	bl	80064b6 <HAL_TIM_ConfigClockSource>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800208c:	f000 f9c2 	bl	8002414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002090:	2300      	movs	r3, #0
 8002092:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002098:	463b      	mov	r3, r7
 800209a:	4619      	mov	r1, r3
 800209c:	4805      	ldr	r0, [pc, #20]	@ (80020b4 <MX_TIM2_Init+0x94>)
 800209e:	f004 fc17 	bl	80068d0 <HAL_TIMEx_MasterConfigSynchronization>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80020a8:	f000 f9b4 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020ac:	bf00      	nop
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20025b84 	.word	0x20025b84

080020b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08e      	sub	sp, #56	@ 0x38
 80020bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	609a      	str	r2, [r3, #8]
 80020ca:	60da      	str	r2, [r3, #12]
 80020cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	623b      	str	r3, [r7, #32]
 80020d2:	4bb2      	ldr	r3, [pc, #712]	@ (800239c <MX_GPIO_Init+0x2e4>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	4ab1      	ldr	r2, [pc, #708]	@ (800239c <MX_GPIO_Init+0x2e4>)
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020de:	4baf      	ldr	r3, [pc, #700]	@ (800239c <MX_GPIO_Init+0x2e4>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	623b      	str	r3, [r7, #32]
 80020e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	4bab      	ldr	r3, [pc, #684]	@ (800239c <MX_GPIO_Init+0x2e4>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	4aaa      	ldr	r2, [pc, #680]	@ (800239c <MX_GPIO_Init+0x2e4>)
 80020f4:	f043 0320 	orr.w	r3, r3, #32
 80020f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020fa:	4ba8      	ldr	r3, [pc, #672]	@ (800239c <MX_GPIO_Init+0x2e4>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	f003 0320 	and.w	r3, r3, #32
 8002102:	61fb      	str	r3, [r7, #28]
 8002104:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
 800210a:	4ba4      	ldr	r3, [pc, #656]	@ (800239c <MX_GPIO_Init+0x2e4>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	4aa3      	ldr	r2, [pc, #652]	@ (800239c <MX_GPIO_Init+0x2e4>)
 8002110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002114:	6313      	str	r3, [r2, #48]	@ 0x30
 8002116:	4ba1      	ldr	r3, [pc, #644]	@ (800239c <MX_GPIO_Init+0x2e4>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800211e:	61bb      	str	r3, [r7, #24]
 8002120:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	4b9d      	ldr	r3, [pc, #628]	@ (800239c <MX_GPIO_Init+0x2e4>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212a:	4a9c      	ldr	r2, [pc, #624]	@ (800239c <MX_GPIO_Init+0x2e4>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6313      	str	r3, [r2, #48]	@ 0x30
 8002132:	4b9a      	ldr	r3, [pc, #616]	@ (800239c <MX_GPIO_Init+0x2e4>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	4b96      	ldr	r3, [pc, #600]	@ (800239c <MX_GPIO_Init+0x2e4>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	4a95      	ldr	r2, [pc, #596]	@ (800239c <MX_GPIO_Init+0x2e4>)
 8002148:	f043 0302 	orr.w	r3, r3, #2
 800214c:	6313      	str	r3, [r2, #48]	@ 0x30
 800214e:	4b93      	ldr	r3, [pc, #588]	@ (800239c <MX_GPIO_Init+0x2e4>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	4b8f      	ldr	r3, [pc, #572]	@ (800239c <MX_GPIO_Init+0x2e4>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	4a8e      	ldr	r2, [pc, #568]	@ (800239c <MX_GPIO_Init+0x2e4>)
 8002164:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002168:	6313      	str	r3, [r2, #48]	@ 0x30
 800216a:	4b8c      	ldr	r3, [pc, #560]	@ (800239c <MX_GPIO_Init+0x2e4>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	4b88      	ldr	r3, [pc, #544]	@ (800239c <MX_GPIO_Init+0x2e4>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	4a87      	ldr	r2, [pc, #540]	@ (800239c <MX_GPIO_Init+0x2e4>)
 8002180:	f043 0310 	orr.w	r3, r3, #16
 8002184:	6313      	str	r3, [r2, #48]	@ 0x30
 8002186:	4b85      	ldr	r3, [pc, #532]	@ (800239c <MX_GPIO_Init+0x2e4>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	4b81      	ldr	r3, [pc, #516]	@ (800239c <MX_GPIO_Init+0x2e4>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	4a80      	ldr	r2, [pc, #512]	@ (800239c <MX_GPIO_Init+0x2e4>)
 800219c:	f043 0308 	orr.w	r3, r3, #8
 80021a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a2:	4b7e      	ldr	r3, [pc, #504]	@ (800239c <MX_GPIO_Init+0x2e4>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2116      	movs	r1, #22
 80021b2:	487b      	ldr	r0, [pc, #492]	@ (80023a0 <MX_GPIO_Init+0x2e8>)
 80021b4:	f001 fc2c 	bl	8003a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80021b8:	2200      	movs	r2, #0
 80021ba:	2180      	movs	r1, #128	@ 0x80
 80021bc:	4879      	ldr	r0, [pc, #484]	@ (80023a4 <MX_GPIO_Init+0x2ec>)
 80021be:	f001 fc27 	bl	8003a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80021c2:	2200      	movs	r2, #0
 80021c4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80021c8:	4877      	ldr	r0, [pc, #476]	@ (80023a8 <MX_GPIO_Init+0x2f0>)
 80021ca:	f001 fc21 	bl	8003a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80021ce:	2200      	movs	r2, #0
 80021d0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80021d4:	4875      	ldr	r0, [pc, #468]	@ (80023ac <MX_GPIO_Init+0x2f4>)
 80021d6:	f001 fc1b 	bl	8003a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80021da:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80021de:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e8:	2303      	movs	r3, #3
 80021ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021ec:	230c      	movs	r3, #12
 80021ee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021f4:	4619      	mov	r1, r3
 80021f6:	486e      	ldr	r0, [pc, #440]	@ (80023b0 <MX_GPIO_Init+0x2f8>)
 80021f8:	f001 f952 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80021fc:	2301      	movs	r3, #1
 80021fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002208:	2303      	movs	r3, #3
 800220a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800220c:	230c      	movs	r3, #12
 800220e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002210:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002214:	4619      	mov	r1, r3
 8002216:	4862      	ldr	r0, [pc, #392]	@ (80023a0 <MX_GPIO_Init+0x2e8>)
 8002218:	f001 f942 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800221c:	2316      	movs	r3, #22
 800221e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002220:	2301      	movs	r3, #1
 8002222:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800222c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002230:	4619      	mov	r1, r3
 8002232:	485b      	ldr	r0, [pc, #364]	@ (80023a0 <MX_GPIO_Init+0x2e8>)
 8002234:	f001 f934 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002238:	f248 0307 	movw	r3, #32775	@ 0x8007
 800223c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800223e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002242:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002248:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800224c:	4619      	mov	r1, r3
 800224e:	4855      	ldr	r0, [pc, #340]	@ (80023a4 <MX_GPIO_Init+0x2ec>)
 8002250:	f001 f926 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002254:	2380      	movs	r3, #128	@ 0x80
 8002256:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002258:	2301      	movs	r3, #1
 800225a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002264:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002268:	4619      	mov	r1, r3
 800226a:	484e      	ldr	r0, [pc, #312]	@ (80023a4 <MX_GPIO_Init+0x2ec>)
 800226c:	f001 f918 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002270:	2320      	movs	r3, #32
 8002272:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002274:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002278:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800227e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002282:	4619      	mov	r1, r3
 8002284:	4846      	ldr	r0, [pc, #280]	@ (80023a0 <MX_GPIO_Init+0x2e8>)
 8002286:	f001 f90b 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800228a:	2304      	movs	r3, #4
 800228c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800228e:	2300      	movs	r3, #0
 8002290:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800229a:	4619      	mov	r1, r3
 800229c:	4845      	ldr	r0, [pc, #276]	@ (80023b4 <MX_GPIO_Init+0x2fc>)
 800229e:	f001 f8ff 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80022a2:	f248 1333 	movw	r3, #33075	@ 0x8133
 80022a6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a8:	2302      	movs	r3, #2
 80022aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b0:	2303      	movs	r3, #3
 80022b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022b4:	230c      	movs	r3, #12
 80022b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022bc:	4619      	mov	r1, r3
 80022be:	483b      	ldr	r0, [pc, #236]	@ (80023ac <MX_GPIO_Init+0x2f4>)
 80022c0:	f001 f8ee 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80022c4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80022c8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d2:	2303      	movs	r3, #3
 80022d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022d6:	230c      	movs	r3, #12
 80022d8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022de:	4619      	mov	r1, r3
 80022e0:	4835      	ldr	r0, [pc, #212]	@ (80023b8 <MX_GPIO_Init+0x300>)
 80022e2:	f001 f8dd 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80022e6:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80022f8:	230c      	movs	r3, #12
 80022fa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002300:	4619      	mov	r1, r3
 8002302:	482c      	ldr	r0, [pc, #176]	@ (80023b4 <MX_GPIO_Init+0x2fc>)
 8002304:	f001 f8cc 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002308:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800230c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800230e:	2300      	movs	r3, #0
 8002310:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002316:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800231a:	4619      	mov	r1, r3
 800231c:	4825      	ldr	r0, [pc, #148]	@ (80023b4 <MX_GPIO_Init+0x2fc>)
 800231e:	f001 f8bf 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002322:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002326:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2302      	movs	r3, #2
 800232a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002330:	2303      	movs	r3, #3
 8002332:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002334:	230c      	movs	r3, #12
 8002336:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002338:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800233c:	4619      	mov	r1, r3
 800233e:	481a      	ldr	r0, [pc, #104]	@ (80023a8 <MX_GPIO_Init+0x2f0>)
 8002340:	f001 f8ae 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002344:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002348:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800234a:	2300      	movs	r3, #0
 800234c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002352:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002356:	4619      	mov	r1, r3
 8002358:	4813      	ldr	r0, [pc, #76]	@ (80023a8 <MX_GPIO_Init+0x2f0>)
 800235a:	f001 f8a1 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800235e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002362:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002364:	2301      	movs	r3, #1
 8002366:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236c:	2300      	movs	r3, #0
 800236e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002370:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002374:	4619      	mov	r1, r3
 8002376:	480c      	ldr	r0, [pc, #48]	@ (80023a8 <MX_GPIO_Init+0x2f0>)
 8002378:	f001 f892 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800237c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002380:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002382:	2302      	movs	r3, #2
 8002384:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238a:	2303      	movs	r3, #3
 800238c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800238e:	2307      	movs	r3, #7
 8002390:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002396:	4619      	mov	r1, r3
 8002398:	e010      	b.n	80023bc <MX_GPIO_Init+0x304>
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800
 80023a0:	40020800 	.word	0x40020800
 80023a4:	40020000 	.word	0x40020000
 80023a8:	40020c00 	.word	0x40020c00
 80023ac:	40021800 	.word	0x40021800
 80023b0:	40021400 	.word	0x40021400
 80023b4:	40020400 	.word	0x40020400
 80023b8:	40021000 	.word	0x40021000
 80023bc:	4812      	ldr	r0, [pc, #72]	@ (8002408 <MX_GPIO_Init+0x350>)
 80023be:	f001 f86f 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80023c2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80023c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c8:	2301      	movs	r3, #1
 80023ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d0:	2300      	movs	r3, #0
 80023d2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023d8:	4619      	mov	r1, r3
 80023da:	480c      	ldr	r0, [pc, #48]	@ (800240c <MX_GPIO_Init+0x354>)
 80023dc:	f001 f860 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80023e0:	2360      	movs	r3, #96	@ 0x60
 80023e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ec:	2303      	movs	r3, #3
 80023ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023f0:	230c      	movs	r3, #12
 80023f2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023f8:	4619      	mov	r1, r3
 80023fa:	4805      	ldr	r0, [pc, #20]	@ (8002410 <MX_GPIO_Init+0x358>)
 80023fc:	f001 f850 	bl	80034a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002400:	bf00      	nop
 8002402:	3738      	adds	r7, #56	@ 0x38
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40020000 	.word	0x40020000
 800240c:	40021800 	.word	0x40021800
 8002410:	40020400 	.word	0x40020400

08002414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002418:	b672      	cpsid	i
}
 800241a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800241c:	bf00      	nop
 800241e:	e7fd      	b.n	800241c <Error_Handler+0x8>

08002420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	4b10      	ldr	r3, [pc, #64]	@ (800246c <HAL_MspInit+0x4c>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242e:	4a0f      	ldr	r2, [pc, #60]	@ (800246c <HAL_MspInit+0x4c>)
 8002430:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002434:	6453      	str	r3, [r2, #68]	@ 0x44
 8002436:	4b0d      	ldr	r3, [pc, #52]	@ (800246c <HAL_MspInit+0x4c>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	4b09      	ldr	r3, [pc, #36]	@ (800246c <HAL_MspInit+0x4c>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	4a08      	ldr	r2, [pc, #32]	@ (800246c <HAL_MspInit+0x4c>)
 800244c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002450:	6413      	str	r3, [r2, #64]	@ 0x40
 8002452:	4b06      	ldr	r3, [pc, #24]	@ (800246c <HAL_MspInit+0x4c>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245a:	603b      	str	r3, [r7, #0]
 800245c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800245e:	2007      	movs	r0, #7
 8002460:	f000 ffea 	bl	8003438 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40023800 	.word	0x40023800

08002470 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	@ 0x28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a29      	ldr	r2, [pc, #164]	@ (8002534 <HAL_I2C_MspInit+0xc4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d14b      	bne.n	800252a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	4b28      	ldr	r3, [pc, #160]	@ (8002538 <HAL_I2C_MspInit+0xc8>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249a:	4a27      	ldr	r2, [pc, #156]	@ (8002538 <HAL_I2C_MspInit+0xc8>)
 800249c:	f043 0304 	orr.w	r3, r3, #4
 80024a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024a2:	4b25      	ldr	r3, [pc, #148]	@ (8002538 <HAL_I2C_MspInit+0xc8>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	4b21      	ldr	r3, [pc, #132]	@ (8002538 <HAL_I2C_MspInit+0xc8>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b6:	4a20      	ldr	r2, [pc, #128]	@ (8002538 <HAL_I2C_MspInit+0xc8>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024be:	4b1e      	ldr	r3, [pc, #120]	@ (8002538 <HAL_I2C_MspInit+0xc8>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80024ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024d0:	2312      	movs	r3, #18
 80024d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d8:	2300      	movs	r3, #0
 80024da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024dc:	2304      	movs	r3, #4
 80024de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	4619      	mov	r1, r3
 80024e6:	4815      	ldr	r0, [pc, #84]	@ (800253c <HAL_I2C_MspInit+0xcc>)
 80024e8:	f000 ffda 	bl	80034a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80024ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024f2:	2312      	movs	r3, #18
 80024f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fa:	2300      	movs	r3, #0
 80024fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024fe:	2304      	movs	r3, #4
 8002500:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002502:	f107 0314 	add.w	r3, r7, #20
 8002506:	4619      	mov	r1, r3
 8002508:	480d      	ldr	r0, [pc, #52]	@ (8002540 <HAL_I2C_MspInit+0xd0>)
 800250a:	f000 ffc9 	bl	80034a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <HAL_I2C_MspInit+0xc8>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	4a08      	ldr	r2, [pc, #32]	@ (8002538 <HAL_I2C_MspInit+0xc8>)
 8002518:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800251c:	6413      	str	r3, [r2, #64]	@ 0x40
 800251e:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <HAL_I2C_MspInit+0xc8>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800252a:	bf00      	nop
 800252c:	3728      	adds	r7, #40	@ 0x28
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40005c00 	.word	0x40005c00
 8002538:	40023800 	.word	0x40023800
 800253c:	40020800 	.word	0x40020800
 8002540:	40020000 	.word	0x40020000

08002544 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b09a      	sub	sp, #104	@ 0x68
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800255c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002560:	2230      	movs	r2, #48	@ 0x30
 8002562:	2100      	movs	r1, #0
 8002564:	4618      	mov	r0, r3
 8002566:	f004 fd97 	bl	8007098 <memset>
  if(hltdc->Instance==LTDC)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a81      	ldr	r2, [pc, #516]	@ (8002774 <HAL_LTDC_MspInit+0x230>)
 8002570:	4293      	cmp	r3, r2
 8002572:	f040 80fb 	bne.w	800276c <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002576:	2308      	movs	r3, #8
 8002578:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 800257a:	23c8      	movs	r3, #200	@ 0xc8
 800257c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800257e:	2302      	movs	r3, #2
 8002580:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8002582:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002586:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002588:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800258c:	4618      	mov	r0, r3
 800258e:	f003 fa23 	bl	80059d8 <HAL_RCCEx_PeriphCLKConfig>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002598:	f7ff ff3c 	bl	8002414 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800259c:	2300      	movs	r3, #0
 800259e:	623b      	str	r3, [r7, #32]
 80025a0:	4b75      	ldr	r3, [pc, #468]	@ (8002778 <HAL_LTDC_MspInit+0x234>)
 80025a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a4:	4a74      	ldr	r2, [pc, #464]	@ (8002778 <HAL_LTDC_MspInit+0x234>)
 80025a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ac:	4b72      	ldr	r3, [pc, #456]	@ (8002778 <HAL_LTDC_MspInit+0x234>)
 80025ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025b4:	623b      	str	r3, [r7, #32]
 80025b6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
 80025bc:	4b6e      	ldr	r3, [pc, #440]	@ (8002778 <HAL_LTDC_MspInit+0x234>)
 80025be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c0:	4a6d      	ldr	r2, [pc, #436]	@ (8002778 <HAL_LTDC_MspInit+0x234>)
 80025c2:	f043 0320 	orr.w	r3, r3, #32
 80025c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c8:	4b6b      	ldr	r3, [pc, #428]	@ (8002778 <HAL_LTDC_MspInit+0x234>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025cc:	f003 0320 	and.w	r3, r3, #32
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d4:	2300      	movs	r3, #0
 80025d6:	61bb      	str	r3, [r7, #24]
 80025d8:	4b67      	ldr	r3, [pc, #412]	@ (8002778 <HAL_LTDC_MspInit+0x234>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025dc:	4a66      	ldr	r2, [pc, #408]	@ (8002778 <HAL_LTDC_MspInit+0x234>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80025e4:	4b64      	ldr	r3, [pc, #400]	@ (8002778 <HAL_LTDC_MspInit+0x234>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	61bb      	str	r3, [r7, #24]
 80025ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	4b60      	ldr	r3, [pc, #384]	@ (8002778 <HAL_LTDC_MspInit+0x234>)
 80025f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f8:	4a5f      	ldr	r2, [pc, #380]	@ (8002778 <HAL_LTDC_MspInit+0x234>)
 80025fa:	f043 0302 	orr.w	r3, r3, #2
 80025fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002600:	4b5d      	ldr	r3, [pc, #372]	@ (8002778 <HAL_LTDC_MspInit+0x234>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800260c:	2300      	movs	r3, #0
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	4b59      	ldr	r3, [pc, #356]	@ (8002778 <HAL_LTDC_MspInit+0x234>)
 8002612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002614:	4a58      	ldr	r2, [pc, #352]	@ (8002778 <HAL_LTDC_MspInit+0x234>)
 8002616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800261a:	6313      	str	r3, [r2, #48]	@ 0x30
 800261c:	4b56      	ldr	r3, [pc, #344]	@ (8002778 <HAL_LTDC_MspInit+0x234>)
 800261e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002628:	2300      	movs	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	4b52      	ldr	r3, [pc, #328]	@ (8002778 <HAL_LTDC_MspInit+0x234>)
 800262e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002630:	4a51      	ldr	r2, [pc, #324]	@ (8002778 <HAL_LTDC_MspInit+0x234>)
 8002632:	f043 0304 	orr.w	r3, r3, #4
 8002636:	6313      	str	r3, [r2, #48]	@ 0x30
 8002638:	4b4f      	ldr	r3, [pc, #316]	@ (8002778 <HAL_LTDC_MspInit+0x234>)
 800263a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002644:	2300      	movs	r3, #0
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	4b4b      	ldr	r3, [pc, #300]	@ (8002778 <HAL_LTDC_MspInit+0x234>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264c:	4a4a      	ldr	r2, [pc, #296]	@ (8002778 <HAL_LTDC_MspInit+0x234>)
 800264e:	f043 0308 	orr.w	r3, r3, #8
 8002652:	6313      	str	r3, [r2, #48]	@ 0x30
 8002654:	4b48      	ldr	r3, [pc, #288]	@ (8002778 <HAL_LTDC_MspInit+0x234>)
 8002656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002660:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002664:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2302      	movs	r3, #2
 8002668:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	2300      	movs	r3, #0
 8002670:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002672:	230e      	movs	r3, #14
 8002674:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002676:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800267a:	4619      	mov	r1, r3
 800267c:	483f      	ldr	r0, [pc, #252]	@ (800277c <HAL_LTDC_MspInit+0x238>)
 800267e:	f000 ff0f 	bl	80034a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002682:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002686:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	2302      	movs	r3, #2
 800268a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002690:	2300      	movs	r3, #0
 8002692:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002694:	230e      	movs	r3, #14
 8002696:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002698:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800269c:	4619      	mov	r1, r3
 800269e:	4838      	ldr	r0, [pc, #224]	@ (8002780 <HAL_LTDC_MspInit+0x23c>)
 80026a0:	f000 fefe 	bl	80034a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80026a4:	2303      	movs	r3, #3
 80026a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b0:	2300      	movs	r3, #0
 80026b2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80026b4:	2309      	movs	r3, #9
 80026b6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026bc:	4619      	mov	r1, r3
 80026be:	4831      	ldr	r0, [pc, #196]	@ (8002784 <HAL_LTDC_MspInit+0x240>)
 80026c0:	f000 feee 	bl	80034a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80026c4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80026c8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ca:	2302      	movs	r3, #2
 80026cc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	2300      	movs	r3, #0
 80026d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026d6:	230e      	movs	r3, #14
 80026d8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026de:	4619      	mov	r1, r3
 80026e0:	4828      	ldr	r0, [pc, #160]	@ (8002784 <HAL_LTDC_MspInit+0x240>)
 80026e2:	f000 fedd 	bl	80034a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80026e6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80026ea:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ec:	2302      	movs	r3, #2
 80026ee:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f4:	2300      	movs	r3, #0
 80026f6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026f8:	230e      	movs	r3, #14
 80026fa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002700:	4619      	mov	r1, r3
 8002702:	4821      	ldr	r0, [pc, #132]	@ (8002788 <HAL_LTDC_MspInit+0x244>)
 8002704:	f000 fecc 	bl	80034a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002708:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800270c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002716:	2300      	movs	r3, #0
 8002718:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800271a:	230e      	movs	r3, #14
 800271c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800271e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002722:	4619      	mov	r1, r3
 8002724:	4819      	ldr	r0, [pc, #100]	@ (800278c <HAL_LTDC_MspInit+0x248>)
 8002726:	f000 febb 	bl	80034a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800272a:	2348      	movs	r3, #72	@ 0x48
 800272c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272e:	2302      	movs	r3, #2
 8002730:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002736:	2300      	movs	r3, #0
 8002738:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800273a:	230e      	movs	r3, #14
 800273c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800273e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002742:	4619      	mov	r1, r3
 8002744:	4812      	ldr	r0, [pc, #72]	@ (8002790 <HAL_LTDC_MspInit+0x24c>)
 8002746:	f000 feab 	bl	80034a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800274a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800274e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002750:	2302      	movs	r3, #2
 8002752:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800275c:	2309      	movs	r3, #9
 800275e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002760:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002764:	4619      	mov	r1, r3
 8002766:	4808      	ldr	r0, [pc, #32]	@ (8002788 <HAL_LTDC_MspInit+0x244>)
 8002768:	f000 fe9a 	bl	80034a0 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800276c:	bf00      	nop
 800276e:	3768      	adds	r7, #104	@ 0x68
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40016800 	.word	0x40016800
 8002778:	40023800 	.word	0x40023800
 800277c:	40021400 	.word	0x40021400
 8002780:	40020000 	.word	0x40020000
 8002784:	40020400 	.word	0x40020400
 8002788:	40021800 	.word	0x40021800
 800278c:	40020800 	.word	0x40020800
 8002790:	40020c00 	.word	0x40020c00

08002794 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0b      	ldr	r2, [pc, #44]	@ (80027d0 <HAL_RNG_MspInit+0x3c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d10d      	bne.n	80027c2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	4b0a      	ldr	r3, [pc, #40]	@ (80027d4 <HAL_RNG_MspInit+0x40>)
 80027ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ae:	4a09      	ldr	r2, [pc, #36]	@ (80027d4 <HAL_RNG_MspInit+0x40>)
 80027b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027b4:	6353      	str	r3, [r2, #52]	@ 0x34
 80027b6:	4b07      	ldr	r3, [pc, #28]	@ (80027d4 <HAL_RNG_MspInit+0x40>)
 80027b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	50060800 	.word	0x50060800
 80027d4:	40023800 	.word	0x40023800

080027d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	@ 0x28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a19      	ldr	r2, [pc, #100]	@ (800285c <HAL_SPI_MspInit+0x84>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d12c      	bne.n	8002854 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	4b18      	ldr	r3, [pc, #96]	@ (8002860 <HAL_SPI_MspInit+0x88>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002802:	4a17      	ldr	r2, [pc, #92]	@ (8002860 <HAL_SPI_MspInit+0x88>)
 8002804:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002808:	6453      	str	r3, [r2, #68]	@ 0x44
 800280a:	4b15      	ldr	r3, [pc, #84]	@ (8002860 <HAL_SPI_MspInit+0x88>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	4b11      	ldr	r3, [pc, #68]	@ (8002860 <HAL_SPI_MspInit+0x88>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281e:	4a10      	ldr	r2, [pc, #64]	@ (8002860 <HAL_SPI_MspInit+0x88>)
 8002820:	f043 0320 	orr.w	r3, r3, #32
 8002824:	6313      	str	r3, [r2, #48]	@ 0x30
 8002826:	4b0e      	ldr	r3, [pc, #56]	@ (8002860 <HAL_SPI_MspInit+0x88>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282a:	f003 0320 	and.w	r3, r3, #32
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002832:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002838:	2302      	movs	r3, #2
 800283a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002840:	2300      	movs	r3, #0
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002844:	2305      	movs	r3, #5
 8002846:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	4805      	ldr	r0, [pc, #20]	@ (8002864 <HAL_SPI_MspInit+0x8c>)
 8002850:	f000 fe26 	bl	80034a0 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002854:	bf00      	nop
 8002856:	3728      	adds	r7, #40	@ 0x28
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40015000 	.word	0x40015000
 8002860:	40023800 	.word	0x40023800
 8002864:	40021400 	.word	0x40021400

08002868 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a08      	ldr	r2, [pc, #32]	@ (8002898 <HAL_SPI_MspDeInit+0x30>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d10a      	bne.n	8002890 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800287a:	4b08      	ldr	r3, [pc, #32]	@ (800289c <HAL_SPI_MspDeInit+0x34>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287e:	4a07      	ldr	r2, [pc, #28]	@ (800289c <HAL_SPI_MspDeInit+0x34>)
 8002880:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002884:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002886:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800288a:	4805      	ldr	r0, [pc, #20]	@ (80028a0 <HAL_SPI_MspDeInit+0x38>)
 800288c:	f000 ffb4 	bl	80037f8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002890:	bf00      	nop
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40015000 	.word	0x40015000
 800289c:	40023800 	.word	0x40023800
 80028a0:	40021400 	.word	0x40021400

080028a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028b4:	d10d      	bne.n	80028d2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	4b09      	ldr	r3, [pc, #36]	@ (80028e0 <HAL_TIM_Base_MspInit+0x3c>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	4a08      	ldr	r2, [pc, #32]	@ (80028e0 <HAL_TIM_Base_MspInit+0x3c>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028c6:	4b06      	ldr	r3, [pc, #24]	@ (80028e0 <HAL_TIM_Base_MspInit+0x3c>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80028d2:	bf00      	nop
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800

080028e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028e8:	bf00      	nop
 80028ea:	e7fd      	b.n	80028e8 <NMI_Handler+0x4>

080028ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f0:	bf00      	nop
 80028f2:	e7fd      	b.n	80028f0 <HardFault_Handler+0x4>

080028f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <MemManage_Handler+0x4>

080028fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002900:	bf00      	nop
 8002902:	e7fd      	b.n	8002900 <BusFault_Handler+0x4>

08002904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <UsageFault_Handler+0x4>

0800290c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800293a:	f000 fc87 	bl	800324c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}

08002942 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002948:	f000 fa44 	bl	8002dd4 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 800294c:	f000 fa04 	bl	8002d58 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002950:	2202      	movs	r2, #2
 8002952:	2103      	movs	r1, #3
 8002954:	2082      	movs	r0, #130	@ 0x82
 8002956:	f000 fa91 	bl	8002e7c <I2C3_Write>
    HAL_Delay(5);
 800295a:	2005      	movs	r0, #5
 800295c:	f000 fc96 	bl	800328c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002960:	2200      	movs	r2, #0
 8002962:	2103      	movs	r1, #3
 8002964:	2082      	movs	r0, #130	@ 0x82
 8002966:	f000 fa89 	bl	8002e7c <I2C3_Write>
    HAL_Delay(2);
 800296a:	2002      	movs	r0, #2
 800296c:	f000 fc8e 	bl	800328c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002970:	1cba      	adds	r2, r7, #2
 8002972:	2302      	movs	r3, #2
 8002974:	2100      	movs	r1, #0
 8002976:	2082      	movs	r0, #130	@ 0x82
 8002978:	f000 fad0 	bl	8002f1c <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 800297c:	887b      	ldrh	r3, [r7, #2]
 800297e:	021b      	lsls	r3, r3, #8
 8002980:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002982:	887b      	ldrh	r3, [r7, #2]
 8002984:	0a1b      	lsrs	r3, r3, #8
 8002986:	b29a      	uxth	r2, r3
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	4313      	orrs	r3, r2
 800298c:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	f640 0211 	movw	r2, #2065	@ 0x811
 8002994:	4293      	cmp	r3, r2
 8002996:	d001      	beq.n	800299c <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002998:	2303      	movs	r3, #3
 800299a:	e075      	b.n	8002a88 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800299c:	2202      	movs	r2, #2
 800299e:	2103      	movs	r1, #3
 80029a0:	2082      	movs	r0, #130	@ 0x82
 80029a2:	f000 fa6b 	bl	8002e7c <I2C3_Write>
    HAL_Delay(5);
 80029a6:	2005      	movs	r0, #5
 80029a8:	f000 fc70 	bl	800328c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80029ac:	2200      	movs	r2, #0
 80029ae:	2103      	movs	r1, #3
 80029b0:	2082      	movs	r0, #130	@ 0x82
 80029b2:	f000 fa63 	bl	8002e7c <I2C3_Write>
    HAL_Delay(2);
 80029b6:	2002      	movs	r0, #2
 80029b8:	f000 fc68 	bl	800328c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80029bc:	2004      	movs	r0, #4
 80029be:	f000 f867 	bl	8002a90 <STMPE811_Read>
 80029c2:	4603      	mov	r3, r0
 80029c4:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 80029c6:	797b      	ldrb	r3, [r7, #5]
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80029ce:	797b      	ldrb	r3, [r7, #5]
 80029d0:	461a      	mov	r2, r3
 80029d2:	2104      	movs	r1, #4
 80029d4:	2082      	movs	r0, #130	@ 0x82
 80029d6:	f000 fa51 	bl	8002e7c <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80029da:	2004      	movs	r0, #4
 80029dc:	f000 f858 	bl	8002a90 <STMPE811_Read>
 80029e0:	4603      	mov	r3, r0
 80029e2:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80029e4:	797b      	ldrb	r3, [r7, #5]
 80029e6:	f023 0302 	bic.w	r3, r3, #2
 80029ea:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80029ec:	797b      	ldrb	r3, [r7, #5]
 80029ee:	461a      	mov	r2, r3
 80029f0:	2104      	movs	r1, #4
 80029f2:	2082      	movs	r0, #130	@ 0x82
 80029f4:	f000 fa42 	bl	8002e7c <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80029f8:	2249      	movs	r2, #73	@ 0x49
 80029fa:	2120      	movs	r1, #32
 80029fc:	2082      	movs	r0, #130	@ 0x82
 80029fe:	f000 fa3d 	bl	8002e7c <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002a02:	2002      	movs	r0, #2
 8002a04:	f000 fc42 	bl	800328c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002a08:	2201      	movs	r2, #1
 8002a0a:	2121      	movs	r1, #33	@ 0x21
 8002a0c:	2082      	movs	r0, #130	@ 0x82
 8002a0e:	f000 fa35 	bl	8002e7c <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002a12:	2017      	movs	r0, #23
 8002a14:	f000 f83c 	bl	8002a90 <STMPE811_Read>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002a1c:	797b      	ldrb	r3, [r7, #5]
 8002a1e:	f043 031e 	orr.w	r3, r3, #30
 8002a22:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002a24:	797b      	ldrb	r3, [r7, #5]
 8002a26:	461a      	mov	r2, r3
 8002a28:	2117      	movs	r1, #23
 8002a2a:	2082      	movs	r0, #130	@ 0x82
 8002a2c:	f000 fa26 	bl	8002e7c <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002a30:	229a      	movs	r2, #154	@ 0x9a
 8002a32:	2141      	movs	r1, #65	@ 0x41
 8002a34:	2082      	movs	r0, #130	@ 0x82
 8002a36:	f000 fa21 	bl	8002e7c <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	214a      	movs	r1, #74	@ 0x4a
 8002a3e:	2082      	movs	r0, #130	@ 0x82
 8002a40:	f000 fa1c 	bl	8002e7c <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002a44:	2201      	movs	r2, #1
 8002a46:	214b      	movs	r1, #75	@ 0x4b
 8002a48:	2082      	movs	r0, #130	@ 0x82
 8002a4a:	f000 fa17 	bl	8002e7c <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	214b      	movs	r1, #75	@ 0x4b
 8002a52:	2082      	movs	r0, #130	@ 0x82
 8002a54:	f000 fa12 	bl	8002e7c <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002a58:	2201      	movs	r2, #1
 8002a5a:	2156      	movs	r1, #86	@ 0x56
 8002a5c:	2082      	movs	r0, #130	@ 0x82
 8002a5e:	f000 fa0d 	bl	8002e7c <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002a62:	2201      	movs	r2, #1
 8002a64:	2158      	movs	r1, #88	@ 0x58
 8002a66:	2082      	movs	r0, #130	@ 0x82
 8002a68:	f000 fa08 	bl	8002e7c <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	2140      	movs	r1, #64	@ 0x40
 8002a70:	2082      	movs	r0, #130	@ 0x82
 8002a72:	f000 fa03 	bl	8002e7c <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002a76:	22ff      	movs	r2, #255	@ 0xff
 8002a78:	210b      	movs	r1, #11
 8002a7a:	2082      	movs	r0, #130	@ 0x82
 8002a7c:	f000 f9fe 	bl	8002e7c <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002a80:	20c8      	movs	r0, #200	@ 0xc8
 8002a82:	f000 fc03 	bl	800328c <HAL_Delay>

    return STMPE811_State_Ok;
 8002a86:	2302      	movs	r3, #2

}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002a9a:	f107 020f 	add.w	r2, r7, #15
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	2082      	movs	r0, #130	@ 0x82
 8002aa4:	f000 fa14 	bl	8002ed0 <I2C3_Read>

    return readData;
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b084      	sub	sp, #16
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	791a      	ldrb	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002ac2:	2040      	movs	r0, #64	@ 0x40
 8002ac4:	f7ff ffe4 	bl	8002a90 <STMPE811_Read>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	db0e      	blt.n	8002af2 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002ada:	2201      	movs	r2, #1
 8002adc:	214b      	movs	r1, #75	@ 0x4b
 8002ade:	2082      	movs	r0, #130	@ 0x82
 8002ae0:	f000 f9cc 	bl	8002e7c <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	214b      	movs	r1, #75	@ 0x4b
 8002ae8:	2082      	movs	r0, #130	@ 0x82
 8002aea:	f000 f9c7 	bl	8002e7c <I2C3_Write>

        return STMPE811_State_Released;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e0a7      	b.n	8002c42 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	799b      	ldrb	r3, [r3, #6]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d117      	bne.n	8002b2a <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fa2e 	bl	8002f60 <TM_STMPE811_ReadX>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	885b      	ldrh	r3, [r3, #2]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fa83 	bl	8003020 <TM_STMPE811_ReadY>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002b20:	3301      	adds	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	805a      	strh	r2, [r3, #2]
 8002b28:	e048      	b.n	8002bbc <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	799b      	ldrb	r3, [r3, #6]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d112      	bne.n	8002b58 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fa12 	bl	8002f60 <TM_STMPE811_ReadX>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461a      	mov	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	885b      	ldrh	r3, [r3, #2]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 fa69 	bl	8003020 <TM_STMPE811_ReadY>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	461a      	mov	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	805a      	strh	r2, [r3, #2]
 8002b56:	e031      	b.n	8002bbc <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	799b      	ldrb	r3, [r3, #6]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d115      	bne.n	8002b8c <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	885b      	ldrh	r3, [r3, #2]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 f9fb 	bl	8002f60 <TM_STMPE811_ReadX>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fa52 	bl	8003020 <TM_STMPE811_ReadY>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002b82:	3301      	adds	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	801a      	strh	r2, [r3, #0]
 8002b8a:	e017      	b.n	8002bbc <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	799b      	ldrb	r3, [r3, #6]
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	d113      	bne.n	8002bbc <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 f9e1 	bl	8002f60 <TM_STMPE811_ReadX>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fa36 	bl	8003020 <TM_STMPE811_ReadY>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	214b      	movs	r1, #75	@ 0x4b
 8002bc0:	2082      	movs	r0, #130	@ 0x82
 8002bc2:	f000 f95b 	bl	8002e7c <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	214b      	movs	r1, #75	@ 0x4b
 8002bca:	2082      	movs	r0, #130	@ 0x82
 8002bcc:	f000 f956 	bl	8002e7c <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	799b      	ldrb	r3, [r3, #6]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <STMPE811_ReadTouch+0x12e>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	799b      	ldrb	r3, [r3, #6]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d115      	bne.n	8002c0c <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d027      	beq.n	8002c38 <STMPE811_ReadTouch+0x186>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	2bee      	cmp	r3, #238	@ 0xee
 8002bee:	d823      	bhi.n	8002c38 <STMPE811_ReadTouch+0x186>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	885b      	ldrh	r3, [r3, #2]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d01f      	beq.n	8002c38 <STMPE811_ReadTouch+0x186>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	885b      	ldrh	r3, [r3, #2]
 8002bfc:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002c00:	d81a      	bhi.n	8002c38 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e01a      	b.n	8002c42 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d012      	beq.n	8002c3a <STMPE811_ReadTouch+0x188>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002c1c:	d80d      	bhi.n	8002c3a <STMPE811_ReadTouch+0x188>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	885b      	ldrh	r3, [r3, #2]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <STMPE811_ReadTouch+0x188>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	885b      	ldrh	r3, [r3, #2]
 8002c2a:	2bee      	cmp	r3, #238	@ 0xee
 8002c2c:	d805      	bhi.n	8002c3a <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e004      	b.n	8002c42 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002c38:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002c40:	2301      	movs	r3, #1
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <STMPE811_DetermineTouchPosition>:

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	799b      	ldrb	r3, [r3, #6]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d117      	bne.n	8002c8a <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 f97e 	bl	8002f60 <TM_STMPE811_ReadX>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	885b      	ldrh	r3, [r3, #2]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 f9d3 	bl	8003020 <TM_STMPE811_ReadY>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002c80:	3301      	adds	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	805a      	strh	r2, [r3, #2]
 8002c88:	e048      	b.n	8002d1c <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	799b      	ldrb	r3, [r3, #6]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d112      	bne.n	8002cb8 <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 f962 	bl	8002f60 <TM_STMPE811_ReadX>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	885b      	ldrh	r3, [r3, #2]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 f9b9 	bl	8003020 <TM_STMPE811_ReadY>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	805a      	strh	r2, [r3, #2]
 8002cb6:	e031      	b.n	8002d1c <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	799b      	ldrb	r3, [r3, #6]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d115      	bne.n	8002cec <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	885b      	ldrh	r3, [r3, #2]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 f94b 	bl	8002f60 <TM_STMPE811_ReadX>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	461a      	mov	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f9a2 	bl	8003020 <TM_STMPE811_ReadY>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	801a      	strh	r2, [r3, #0]
 8002cea:	e017      	b.n	8002d1c <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	799b      	ldrb	r3, [r3, #6]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d113      	bne.n	8002d1c <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 f931 	bl	8002f60 <TM_STMPE811_ReadX>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 f986 	bl	8003020 <TM_STMPE811_ReadY>
 8002d14:	4603      	mov	r3, r0
 8002d16:	461a      	mov	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	214b      	movs	r1, #75	@ 0x4b
 8002d20:	2082      	movs	r0, #130	@ 0x82
 8002d22:	f000 f8ab 	bl	8002e7c <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002d26:	2200      	movs	r2, #0
 8002d28:	214b      	movs	r1, #75	@ 0x4b
 8002d2a:	2082      	movs	r0, #130	@ 0x82
 8002d2c:	f000 f8a6 	bl	8002e7c <I2C3_Write>
}
 8002d30:	bf00      	nop
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002d3c:	4b05      	ldr	r3, [pc, #20]	@ (8002d54 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	20025c20 	.word	0x20025c20

08002d58 <I2C3_Init>:

static void I2C3_Init()
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	603b      	str	r3, [r7, #0]
 8002d62:	4b18      	ldr	r3, [pc, #96]	@ (8002dc4 <I2C3_Init+0x6c>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d66:	4a17      	ldr	r2, [pc, #92]	@ (8002dc4 <I2C3_Init+0x6c>)
 8002d68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d6e:	4b15      	ldr	r3, [pc, #84]	@ (8002dc4 <I2C3_Init+0x6c>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002d7a:	4b13      	ldr	r3, [pc, #76]	@ (8002dc8 <I2C3_Init+0x70>)
 8002d7c:	4a13      	ldr	r2, [pc, #76]	@ (8002dcc <I2C3_Init+0x74>)
 8002d7e:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002d80:	4b11      	ldr	r3, [pc, #68]	@ (8002dc8 <I2C3_Init+0x70>)
 8002d82:	4a13      	ldr	r2, [pc, #76]	@ (8002dd0 <I2C3_Init+0x78>)
 8002d84:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d86:	4b10      	ldr	r3, [pc, #64]	@ (8002dc8 <I2C3_Init+0x70>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc8 <I2C3_Init+0x70>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d92:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc8 <I2C3_Init+0x70>)
 8002d94:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d98:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <I2C3_Init+0x70>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002da0:	4b09      	ldr	r3, [pc, #36]	@ (8002dc8 <I2C3_Init+0x70>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002da6:	4808      	ldr	r0, [pc, #32]	@ (8002dc8 <I2C3_Init+0x70>)
 8002da8:	f000 fe4c 	bl	8003a44 <HAL_I2C_Init>
 8002dac:	4603      	mov	r3, r0
 8002dae:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002db6:	bf00      	nop
 8002db8:	e7fd      	b.n	8002db6 <I2C3_Init+0x5e>
    }
    return;
 8002dba:	bf00      	nop
}
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	20025bcc 	.word	0x20025bcc
 8002dcc:	40005c00 	.word	0x40005c00
 8002dd0:	000186a0 	.word	0x000186a0

08002dd4 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dda:	f107 030c 	add.w	r3, r7, #12
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	609a      	str	r2, [r3, #8]
 8002de6:	60da      	str	r2, [r3, #12]
 8002de8:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	4b20      	ldr	r3, [pc, #128]	@ (8002e70 <I2C3_MspInit+0x9c>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df2:	4a1f      	ldr	r2, [pc, #124]	@ (8002e70 <I2C3_MspInit+0x9c>)
 8002df4:	f043 0304 	orr.w	r3, r3, #4
 8002df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8002e70 <I2C3_MspInit+0x9c>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	607b      	str	r3, [r7, #4]
 8002e0a:	4b19      	ldr	r3, [pc, #100]	@ (8002e70 <I2C3_MspInit+0x9c>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0e:	4a18      	ldr	r2, [pc, #96]	@ (8002e70 <I2C3_MspInit+0x9c>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e16:	4b16      	ldr	r3, [pc, #88]	@ (8002e70 <I2C3_MspInit+0x9c>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	607b      	str	r3, [r7, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002e22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e28:	2312      	movs	r3, #18
 8002e2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e34:	2304      	movs	r3, #4
 8002e36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002e38:	f107 030c 	add.w	r3, r7, #12
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	480d      	ldr	r0, [pc, #52]	@ (8002e74 <I2C3_MspInit+0xa0>)
 8002e40:	f000 fb2e 	bl	80034a0 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002e44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e4a:	2312      	movs	r3, #18
 8002e4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e56:	2304      	movs	r3, #4
 8002e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002e5a:	f107 030c 	add.w	r3, r7, #12
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4805      	ldr	r0, [pc, #20]	@ (8002e78 <I2C3_MspInit+0xa4>)
 8002e62:	f000 fb1d 	bl	80034a0 <HAL_GPIO_Init>
    
}
 8002e66:	bf00      	nop
 8002e68:	3720      	adds	r7, #32
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40020800 	.word	0x40020800
 8002e78:	40020000 	.word	0x40020000

08002e7c <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af04      	add	r7, sp, #16
 8002e82:	4603      	mov	r3, r0
 8002e84:	80fb      	strh	r3, [r7, #6]
 8002e86:	460b      	mov	r3, r1
 8002e88:	717b      	strb	r3, [r7, #5]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002e8e:	793b      	ldrb	r3, [r7, #4]
 8002e90:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002e92:	797b      	ldrb	r3, [r7, #5]
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	88f9      	ldrh	r1, [r7, #6]
 8002e98:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec4 <I2C3_Write+0x48>)
 8002e9a:	9302      	str	r3, [sp, #8]
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	f107 030f 	add.w	r3, r7, #15
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	4807      	ldr	r0, [pc, #28]	@ (8002ec8 <I2C3_Write+0x4c>)
 8002eaa:	f000 ff0f 	bl	8003ccc <HAL_I2C_Mem_Write>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <I2C3_Write+0x50>)
 8002eb4:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002eb6:	f7ff ff3f 	bl	8002d38 <verifyHAL_I2C_IS_OKAY>
}
 8002eba:	bf00      	nop
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	0003d090 	.word	0x0003d090
 8002ec8:	20025bcc 	.word	0x20025bcc
 8002ecc:	20025c20 	.word	0x20025c20

08002ed0 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af04      	add	r7, sp, #16
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	603a      	str	r2, [r7, #0]
 8002eda:	71fb      	strb	r3, [r7, #7]
 8002edc:	460b      	mov	r3, r1
 8002ede:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	b299      	uxth	r1, r3
 8002ee4:	79bb      	ldrb	r3, [r7, #6]
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	4b09      	ldr	r3, [pc, #36]	@ (8002f10 <I2C3_Read+0x40>)
 8002eea:	9302      	str	r3, [sp, #8]
 8002eec:	2301      	movs	r3, #1
 8002eee:	9301      	str	r3, [sp, #4]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	4807      	ldr	r0, [pc, #28]	@ (8002f14 <I2C3_Read+0x44>)
 8002ef8:	f000 ffe2 	bl	8003ec0 <HAL_I2C_Mem_Read>
 8002efc:	4603      	mov	r3, r0
 8002efe:	461a      	mov	r2, r3
 8002f00:	4b05      	ldr	r3, [pc, #20]	@ (8002f18 <I2C3_Read+0x48>)
 8002f02:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002f04:	f7ff ff18 	bl	8002d38 <verifyHAL_I2C_IS_OKAY>
}
 8002f08:	bf00      	nop
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	0003d090 	.word	0x0003d090
 8002f14:	20025bcc 	.word	0x20025bcc
 8002f18:	20025c20 	.word	0x20025c20

08002f1c <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af04      	add	r7, sp, #16
 8002f22:	603a      	str	r2, [r7, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	4603      	mov	r3, r0
 8002f28:	71fb      	strb	r3, [r7, #7]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	71bb      	strb	r3, [r7, #6]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	b299      	uxth	r1, r3
 8002f36:	79bb      	ldrb	r3, [r7, #6]
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	4b07      	ldr	r3, [pc, #28]	@ (8002f58 <I2C3_MulitByteRead+0x3c>)
 8002f3c:	9302      	str	r3, [sp, #8]
 8002f3e:	88bb      	ldrh	r3, [r7, #4]
 8002f40:	9301      	str	r3, [sp, #4]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	2301      	movs	r3, #1
 8002f48:	4804      	ldr	r0, [pc, #16]	@ (8002f5c <I2C3_MulitByteRead+0x40>)
 8002f4a:	f000 ffb9 	bl	8003ec0 <HAL_I2C_Mem_Read>
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	0003d090 	.word	0x0003d090
 8002f5c:	20025bcc 	.word	0x20025bcc

08002f60 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002f6a:	204d      	movs	r0, #77	@ 0x4d
 8002f6c:	f7ff fd90 	bl	8002a90 <STMPE811_Read>
 8002f70:	4603      	mov	r3, r0
 8002f72:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002f74:	204e      	movs	r0, #78	@ 0x4e
 8002f76:	f7ff fd8b 	bl	8002a90 <STMPE811_Read>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002f7e:	7a7b      	ldrb	r3, [r7, #9]
 8002f80:	b21b      	sxth	r3, r3
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	b21a      	sxth	r2, r3
 8002f86:	7a3b      	ldrb	r3, [r7, #8]
 8002f88:	b21b      	sxth	r3, r3
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002f8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f92:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002f96:	4293      	cmp	r3, r2
 8002f98:	dc06      	bgt.n	8002fa8 <TM_STMPE811_ReadX+0x48>
        val = 3900 - val;
 8002f9a:	89fb      	ldrh	r3, [r7, #14]
 8002f9c:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002fa0:	330c      	adds	r3, #12
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	81fb      	strh	r3, [r7, #14]
 8002fa6:	e005      	b.n	8002fb4 <TM_STMPE811_ReadX+0x54>
    } else {
        val = 3800 - val;
 8002fa8:	89fb      	ldrh	r3, [r7, #14]
 8002faa:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002fae:	3308      	adds	r3, #8
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002fb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fb8:	4a18      	ldr	r2, [pc, #96]	@ (800301c <TM_STMPE811_ReadX+0xbc>)
 8002fba:	fb82 1203 	smull	r1, r2, r2, r3
 8002fbe:	441a      	add	r2, r3
 8002fc0:	10d2      	asrs	r2, r2, #3
 8002fc2:	17db      	asrs	r3, r3, #31
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002fc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fcc:	2bef      	cmp	r3, #239	@ 0xef
 8002fce:	dd02      	ble.n	8002fd6 <TM_STMPE811_ReadX+0x76>
        val = 239;
 8002fd0:	23ef      	movs	r3, #239	@ 0xef
 8002fd2:	81fb      	strh	r3, [r7, #14]
 8002fd4:	e005      	b.n	8002fe2 <TM_STMPE811_ReadX+0x82>
    } else if (val < 0) {
 8002fd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	da01      	bge.n	8002fe2 <TM_STMPE811_ReadX+0x82>
        val = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002fe2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002fe6:	88fb      	ldrh	r3, [r7, #6]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	dd05      	ble.n	8002ff8 <TM_STMPE811_ReadX+0x98>
 8002fec:	89fa      	ldrh	r2, [r7, #14]
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	b21b      	sxth	r3, r3
 8002ff6:	e004      	b.n	8003002 <TM_STMPE811_ReadX+0xa2>
 8002ff8:	89fb      	ldrh	r3, [r7, #14]
 8002ffa:	88fa      	ldrh	r2, [r7, #6]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	b21b      	sxth	r3, r3
 8003002:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8003004:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003008:	2b04      	cmp	r3, #4
 800300a:	dd01      	ble.n	8003010 <TM_STMPE811_ReadX+0xb0>
        return val;
 800300c:	89fb      	ldrh	r3, [r7, #14]
 800300e:	e000      	b.n	8003012 <TM_STMPE811_ReadX+0xb2>
    }
    return x;
 8003010:	88fb      	ldrh	r3, [r7, #6]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	88888889 	.word	0x88888889

08003020 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 800302a:	204f      	movs	r0, #79	@ 0x4f
 800302c:	f7ff fd30 	bl	8002a90 <STMPE811_Read>
 8003030:	4603      	mov	r3, r0
 8003032:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003034:	2050      	movs	r0, #80	@ 0x50
 8003036:	f7ff fd2b 	bl	8002a90 <STMPE811_Read>
 800303a:	4603      	mov	r3, r0
 800303c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800303e:	7a7b      	ldrb	r3, [r7, #9]
 8003040:	b21b      	sxth	r3, r3
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	b21a      	sxth	r2, r3
 8003046:	7a3b      	ldrb	r3, [r7, #8]
 8003048:	b21b      	sxth	r3, r3
 800304a:	4313      	orrs	r3, r2
 800304c:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 800304e:	89fb      	ldrh	r3, [r7, #14]
 8003050:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003054:	b29b      	uxth	r3, r3
 8003056:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003058:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800305c:	4a18      	ldr	r2, [pc, #96]	@ (80030c0 <TM_STMPE811_ReadY+0xa0>)
 800305e:	fb82 1203 	smull	r1, r2, r2, r3
 8003062:	1052      	asrs	r2, r2, #1
 8003064:	17db      	asrs	r3, r3, #31
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 800306a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800306e:	2b00      	cmp	r3, #0
 8003070:	dc02      	bgt.n	8003078 <TM_STMPE811_ReadY+0x58>
        val = 0;
 8003072:	2300      	movs	r3, #0
 8003074:	81fb      	strh	r3, [r7, #14]
 8003076:	e007      	b.n	8003088 <TM_STMPE811_ReadY+0x68>
    } else if (val >= 320) {
 8003078:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800307c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003080:	db02      	blt.n	8003088 <TM_STMPE811_ReadY+0x68>
        val = 319;
 8003082:	f240 133f 	movw	r3, #319	@ 0x13f
 8003086:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003088:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800308c:	88fb      	ldrh	r3, [r7, #6]
 800308e:	429a      	cmp	r2, r3
 8003090:	dd05      	ble.n	800309e <TM_STMPE811_ReadY+0x7e>
 8003092:	89fa      	ldrh	r2, [r7, #14]
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	b29b      	uxth	r3, r3
 800309a:	b21b      	sxth	r3, r3
 800309c:	e004      	b.n	80030a8 <TM_STMPE811_ReadY+0x88>
 800309e:	89fb      	ldrh	r3, [r7, #14]
 80030a0:	88fa      	ldrh	r2, [r7, #6]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	b21b      	sxth	r3, r3
 80030a8:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 80030aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	dd01      	ble.n	80030b6 <TM_STMPE811_ReadY+0x96>
        return val;
 80030b2:	89fb      	ldrh	r3, [r7, #14]
 80030b4:	e000      	b.n	80030b8 <TM_STMPE811_ReadY+0x98>
    }
    return y;
 80030b6:	88fb      	ldrh	r3, [r7, #6]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	2e8ba2e9 	.word	0x2e8ba2e9

080030c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030cc:	4a14      	ldr	r2, [pc, #80]	@ (8003120 <_sbrk+0x5c>)
 80030ce:	4b15      	ldr	r3, [pc, #84]	@ (8003124 <_sbrk+0x60>)
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030d8:	4b13      	ldr	r3, [pc, #76]	@ (8003128 <_sbrk+0x64>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d102      	bne.n	80030e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030e0:	4b11      	ldr	r3, [pc, #68]	@ (8003128 <_sbrk+0x64>)
 80030e2:	4a12      	ldr	r2, [pc, #72]	@ (800312c <_sbrk+0x68>)
 80030e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030e6:	4b10      	ldr	r3, [pc, #64]	@ (8003128 <_sbrk+0x64>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4413      	add	r3, r2
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d207      	bcs.n	8003104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030f4:	f003 ffd8 	bl	80070a8 <__errno>
 80030f8:	4603      	mov	r3, r0
 80030fa:	220c      	movs	r2, #12
 80030fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003102:	e009      	b.n	8003118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003104:	4b08      	ldr	r3, [pc, #32]	@ (8003128 <_sbrk+0x64>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800310a:	4b07      	ldr	r3, [pc, #28]	@ (8003128 <_sbrk+0x64>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4413      	add	r3, r2
 8003112:	4a05      	ldr	r2, [pc, #20]	@ (8003128 <_sbrk+0x64>)
 8003114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003116:	68fb      	ldr	r3, [r7, #12]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20030000 	.word	0x20030000
 8003124:	00000400 	.word	0x00000400
 8003128:	20025c24 	.word	0x20025c24
 800312c:	20025e28 	.word	0x20025e28

08003130 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003134:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <SystemInit+0x20>)
 8003136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313a:	4a05      	ldr	r2, [pc, #20]	@ (8003150 <SystemInit+0x20>)
 800313c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003140:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003154:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800318c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003158:	f7ff ffea 	bl	8003130 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800315c:	480c      	ldr	r0, [pc, #48]	@ (8003190 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800315e:	490d      	ldr	r1, [pc, #52]	@ (8003194 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003160:	4a0d      	ldr	r2, [pc, #52]	@ (8003198 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003164:	e002      	b.n	800316c <LoopCopyDataInit>

08003166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800316a:	3304      	adds	r3, #4

0800316c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800316c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800316e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003170:	d3f9      	bcc.n	8003166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003172:	4a0a      	ldr	r2, [pc, #40]	@ (800319c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003174:	4c0a      	ldr	r4, [pc, #40]	@ (80031a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003178:	e001      	b.n	800317e <LoopFillZerobss>

0800317a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800317a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800317c:	3204      	adds	r2, #4

0800317e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800317e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003180:	d3fb      	bcc.n	800317a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003182:	f003 ff97 	bl	80070b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003186:	f7fe fd88 	bl	8001c9a <main>
  bx  lr    
 800318a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800318c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003194:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003198:	08009798 	.word	0x08009798
  ldr r2, =_sbss
 800319c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80031a0:	20025e24 	.word	0x20025e24

080031a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031a4:	e7fe      	b.n	80031a4 <ADC_IRQHandler>
	...

080031a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031ac:	4b0e      	ldr	r3, [pc, #56]	@ (80031e8 <HAL_Init+0x40>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a0d      	ldr	r2, [pc, #52]	@ (80031e8 <HAL_Init+0x40>)
 80031b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031b8:	4b0b      	ldr	r3, [pc, #44]	@ (80031e8 <HAL_Init+0x40>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a0a      	ldr	r2, [pc, #40]	@ (80031e8 <HAL_Init+0x40>)
 80031be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031c4:	4b08      	ldr	r3, [pc, #32]	@ (80031e8 <HAL_Init+0x40>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a07      	ldr	r2, [pc, #28]	@ (80031e8 <HAL_Init+0x40>)
 80031ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031d0:	2003      	movs	r0, #3
 80031d2:	f000 f931 	bl	8003438 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031d6:	2000      	movs	r0, #0
 80031d8:	f000 f808 	bl	80031ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031dc:	f7ff f920 	bl	8002420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40023c00 	.word	0x40023c00

080031ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031f4:	4b12      	ldr	r3, [pc, #72]	@ (8003240 <HAL_InitTick+0x54>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b12      	ldr	r3, [pc, #72]	@ (8003244 <HAL_InitTick+0x58>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	4619      	mov	r1, r3
 80031fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003202:	fbb3 f3f1 	udiv	r3, r3, r1
 8003206:	fbb2 f3f3 	udiv	r3, r2, r3
 800320a:	4618      	mov	r0, r3
 800320c:	f000 f93b 	bl	8003486 <HAL_SYSTICK_Config>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e00e      	b.n	8003238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b0f      	cmp	r3, #15
 800321e:	d80a      	bhi.n	8003236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003220:	2200      	movs	r2, #0
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003228:	f000 f911 	bl	800344e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800322c:	4a06      	ldr	r2, [pc, #24]	@ (8003248 <HAL_InitTick+0x5c>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	e000      	b.n	8003238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000018 	.word	0x20000018
 8003244:	20000020 	.word	0x20000020
 8003248:	2000001c 	.word	0x2000001c

0800324c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003250:	4b06      	ldr	r3, [pc, #24]	@ (800326c <HAL_IncTick+0x20>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	461a      	mov	r2, r3
 8003256:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <HAL_IncTick+0x24>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4413      	add	r3, r2
 800325c:	4a04      	ldr	r2, [pc, #16]	@ (8003270 <HAL_IncTick+0x24>)
 800325e:	6013      	str	r3, [r2, #0]
}
 8003260:	bf00      	nop
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000020 	.word	0x20000020
 8003270:	20025c28 	.word	0x20025c28

08003274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return uwTick;
 8003278:	4b03      	ldr	r3, [pc, #12]	@ (8003288 <HAL_GetTick+0x14>)
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20025c28 	.word	0x20025c28

0800328c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003294:	f7ff ffee 	bl	8003274 <HAL_GetTick>
 8003298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032a4:	d005      	beq.n	80032b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032a6:	4b0a      	ldr	r3, [pc, #40]	@ (80032d0 <HAL_Delay+0x44>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4413      	add	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032b2:	bf00      	nop
 80032b4:	f7ff ffde 	bl	8003274 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d8f7      	bhi.n	80032b4 <HAL_Delay+0x28>
  {
  }
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20000020 	.word	0x20000020

080032d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003318 <__NVIC_SetPriorityGrouping+0x44>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032f0:	4013      	ands	r3, r2
 80032f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003306:	4a04      	ldr	r2, [pc, #16]	@ (8003318 <__NVIC_SetPriorityGrouping+0x44>)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	60d3      	str	r3, [r2, #12]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003320:	4b04      	ldr	r3, [pc, #16]	@ (8003334 <__NVIC_GetPriorityGrouping+0x18>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	0a1b      	lsrs	r3, r3, #8
 8003326:	f003 0307 	and.w	r3, r3, #7
}
 800332a:	4618      	mov	r0, r3
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	e000ed00 	.word	0xe000ed00

08003338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	6039      	str	r1, [r7, #0]
 8003342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003348:	2b00      	cmp	r3, #0
 800334a:	db0a      	blt.n	8003362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	b2da      	uxtb	r2, r3
 8003350:	490c      	ldr	r1, [pc, #48]	@ (8003384 <__NVIC_SetPriority+0x4c>)
 8003352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003356:	0112      	lsls	r2, r2, #4
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	440b      	add	r3, r1
 800335c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003360:	e00a      	b.n	8003378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	b2da      	uxtb	r2, r3
 8003366:	4908      	ldr	r1, [pc, #32]	@ (8003388 <__NVIC_SetPriority+0x50>)
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	3b04      	subs	r3, #4
 8003370:	0112      	lsls	r2, r2, #4
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	440b      	add	r3, r1
 8003376:	761a      	strb	r2, [r3, #24]
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000e100 	.word	0xe000e100
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800338c:	b480      	push	{r7}
 800338e:	b089      	sub	sp, #36	@ 0x24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f1c3 0307 	rsb	r3, r3, #7
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	bf28      	it	cs
 80033aa:	2304      	movcs	r3, #4
 80033ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3304      	adds	r3, #4
 80033b2:	2b06      	cmp	r3, #6
 80033b4:	d902      	bls.n	80033bc <NVIC_EncodePriority+0x30>
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3b03      	subs	r3, #3
 80033ba:	e000      	b.n	80033be <NVIC_EncodePriority+0x32>
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43da      	mvns	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	401a      	ands	r2, r3
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	fa01 f303 	lsl.w	r3, r1, r3
 80033de:	43d9      	mvns	r1, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e4:	4313      	orrs	r3, r2
         );
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3724      	adds	r7, #36	@ 0x24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
	...

080033f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3b01      	subs	r3, #1
 8003400:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003404:	d301      	bcc.n	800340a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003406:	2301      	movs	r3, #1
 8003408:	e00f      	b.n	800342a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800340a:	4a0a      	ldr	r2, [pc, #40]	@ (8003434 <SysTick_Config+0x40>)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3b01      	subs	r3, #1
 8003410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003412:	210f      	movs	r1, #15
 8003414:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003418:	f7ff ff8e 	bl	8003338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800341c:	4b05      	ldr	r3, [pc, #20]	@ (8003434 <SysTick_Config+0x40>)
 800341e:	2200      	movs	r2, #0
 8003420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003422:	4b04      	ldr	r3, [pc, #16]	@ (8003434 <SysTick_Config+0x40>)
 8003424:	2207      	movs	r2, #7
 8003426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	e000e010 	.word	0xe000e010

08003438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff ff47 	bl	80032d4 <__NVIC_SetPriorityGrouping>
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800344e:	b580      	push	{r7, lr}
 8003450:	b086      	sub	sp, #24
 8003452:	af00      	add	r7, sp, #0
 8003454:	4603      	mov	r3, r0
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003460:	f7ff ff5c 	bl	800331c <__NVIC_GetPriorityGrouping>
 8003464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	6978      	ldr	r0, [r7, #20]
 800346c:	f7ff ff8e 	bl	800338c <NVIC_EncodePriority>
 8003470:	4602      	mov	r2, r0
 8003472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003476:	4611      	mov	r1, r2
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff ff5d 	bl	8003338 <__NVIC_SetPriority>
}
 800347e:	bf00      	nop
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff ffb0 	bl	80033f4 <SysTick_Config>
 8003494:	4603      	mov	r3, r0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b089      	sub	sp, #36	@ 0x24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034b6:	2300      	movs	r3, #0
 80034b8:	61fb      	str	r3, [r7, #28]
 80034ba:	e177      	b.n	80037ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034bc:	2201      	movs	r2, #1
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4013      	ands	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	f040 8166 	bne.w	80037a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d005      	beq.n	80034f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d130      	bne.n	8003554 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	2203      	movs	r2, #3
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4013      	ands	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4313      	orrs	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003528:	2201      	movs	r2, #1
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4013      	ands	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	091b      	lsrs	r3, r3, #4
 800353e:	f003 0201 	and.w	r2, r3, #1
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 0303 	and.w	r3, r3, #3
 800355c:	2b03      	cmp	r3, #3
 800355e:	d017      	beq.n	8003590 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	2203      	movs	r2, #3
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4313      	orrs	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d123      	bne.n	80035e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	08da      	lsrs	r2, r3, #3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3208      	adds	r2, #8
 80035a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	220f      	movs	r2, #15
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	43db      	mvns	r3, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4013      	ands	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	08da      	lsrs	r2, r3, #3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3208      	adds	r2, #8
 80035de:	69b9      	ldr	r1, [r7, #24]
 80035e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	2203      	movs	r2, #3
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 0203 	and.w	r2, r3, #3
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80c0 	beq.w	80037a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	4b66      	ldr	r3, [pc, #408]	@ (80037c4 <HAL_GPIO_Init+0x324>)
 800362c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362e:	4a65      	ldr	r2, [pc, #404]	@ (80037c4 <HAL_GPIO_Init+0x324>)
 8003630:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003634:	6453      	str	r3, [r2, #68]	@ 0x44
 8003636:	4b63      	ldr	r3, [pc, #396]	@ (80037c4 <HAL_GPIO_Init+0x324>)
 8003638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003642:	4a61      	ldr	r2, [pc, #388]	@ (80037c8 <HAL_GPIO_Init+0x328>)
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	089b      	lsrs	r3, r3, #2
 8003648:	3302      	adds	r3, #2
 800364a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800364e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	220f      	movs	r2, #15
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43db      	mvns	r3, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4013      	ands	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a58      	ldr	r2, [pc, #352]	@ (80037cc <HAL_GPIO_Init+0x32c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d037      	beq.n	80036de <HAL_GPIO_Init+0x23e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a57      	ldr	r2, [pc, #348]	@ (80037d0 <HAL_GPIO_Init+0x330>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d031      	beq.n	80036da <HAL_GPIO_Init+0x23a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a56      	ldr	r2, [pc, #344]	@ (80037d4 <HAL_GPIO_Init+0x334>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d02b      	beq.n	80036d6 <HAL_GPIO_Init+0x236>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a55      	ldr	r2, [pc, #340]	@ (80037d8 <HAL_GPIO_Init+0x338>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d025      	beq.n	80036d2 <HAL_GPIO_Init+0x232>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a54      	ldr	r2, [pc, #336]	@ (80037dc <HAL_GPIO_Init+0x33c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d01f      	beq.n	80036ce <HAL_GPIO_Init+0x22e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a53      	ldr	r2, [pc, #332]	@ (80037e0 <HAL_GPIO_Init+0x340>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d019      	beq.n	80036ca <HAL_GPIO_Init+0x22a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a52      	ldr	r2, [pc, #328]	@ (80037e4 <HAL_GPIO_Init+0x344>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d013      	beq.n	80036c6 <HAL_GPIO_Init+0x226>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a51      	ldr	r2, [pc, #324]	@ (80037e8 <HAL_GPIO_Init+0x348>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00d      	beq.n	80036c2 <HAL_GPIO_Init+0x222>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a50      	ldr	r2, [pc, #320]	@ (80037ec <HAL_GPIO_Init+0x34c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d007      	beq.n	80036be <HAL_GPIO_Init+0x21e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a4f      	ldr	r2, [pc, #316]	@ (80037f0 <HAL_GPIO_Init+0x350>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d101      	bne.n	80036ba <HAL_GPIO_Init+0x21a>
 80036b6:	2309      	movs	r3, #9
 80036b8:	e012      	b.n	80036e0 <HAL_GPIO_Init+0x240>
 80036ba:	230a      	movs	r3, #10
 80036bc:	e010      	b.n	80036e0 <HAL_GPIO_Init+0x240>
 80036be:	2308      	movs	r3, #8
 80036c0:	e00e      	b.n	80036e0 <HAL_GPIO_Init+0x240>
 80036c2:	2307      	movs	r3, #7
 80036c4:	e00c      	b.n	80036e0 <HAL_GPIO_Init+0x240>
 80036c6:	2306      	movs	r3, #6
 80036c8:	e00a      	b.n	80036e0 <HAL_GPIO_Init+0x240>
 80036ca:	2305      	movs	r3, #5
 80036cc:	e008      	b.n	80036e0 <HAL_GPIO_Init+0x240>
 80036ce:	2304      	movs	r3, #4
 80036d0:	e006      	b.n	80036e0 <HAL_GPIO_Init+0x240>
 80036d2:	2303      	movs	r3, #3
 80036d4:	e004      	b.n	80036e0 <HAL_GPIO_Init+0x240>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e002      	b.n	80036e0 <HAL_GPIO_Init+0x240>
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <HAL_GPIO_Init+0x240>
 80036de:	2300      	movs	r3, #0
 80036e0:	69fa      	ldr	r2, [r7, #28]
 80036e2:	f002 0203 	and.w	r2, r2, #3
 80036e6:	0092      	lsls	r2, r2, #2
 80036e8:	4093      	lsls	r3, r2
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036f0:	4935      	ldr	r1, [pc, #212]	@ (80037c8 <HAL_GPIO_Init+0x328>)
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	089b      	lsrs	r3, r3, #2
 80036f6:	3302      	adds	r3, #2
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036fe:	4b3d      	ldr	r3, [pc, #244]	@ (80037f4 <HAL_GPIO_Init+0x354>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	43db      	mvns	r3, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4013      	ands	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003722:	4a34      	ldr	r2, [pc, #208]	@ (80037f4 <HAL_GPIO_Init+0x354>)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003728:	4b32      	ldr	r3, [pc, #200]	@ (80037f4 <HAL_GPIO_Init+0x354>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	43db      	mvns	r3, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4013      	ands	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800374c:	4a29      	ldr	r2, [pc, #164]	@ (80037f4 <HAL_GPIO_Init+0x354>)
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003752:	4b28      	ldr	r3, [pc, #160]	@ (80037f4 <HAL_GPIO_Init+0x354>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	43db      	mvns	r3, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4013      	ands	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003776:	4a1f      	ldr	r2, [pc, #124]	@ (80037f4 <HAL_GPIO_Init+0x354>)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800377c:	4b1d      	ldr	r3, [pc, #116]	@ (80037f4 <HAL_GPIO_Init+0x354>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037a0:	4a14      	ldr	r2, [pc, #80]	@ (80037f4 <HAL_GPIO_Init+0x354>)
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	3301      	adds	r3, #1
 80037aa:	61fb      	str	r3, [r7, #28]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	2b0f      	cmp	r3, #15
 80037b0:	f67f ae84 	bls.w	80034bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop
 80037b8:	3724      	adds	r7, #36	@ 0x24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40023800 	.word	0x40023800
 80037c8:	40013800 	.word	0x40013800
 80037cc:	40020000 	.word	0x40020000
 80037d0:	40020400 	.word	0x40020400
 80037d4:	40020800 	.word	0x40020800
 80037d8:	40020c00 	.word	0x40020c00
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40021400 	.word	0x40021400
 80037e4:	40021800 	.word	0x40021800
 80037e8:	40021c00 	.word	0x40021c00
 80037ec:	40022000 	.word	0x40022000
 80037f0:	40022400 	.word	0x40022400
 80037f4:	40013c00 	.word	0x40013c00

080037f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800380a:	2300      	movs	r3, #0
 800380c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	e0d9      	b.n	80039c8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003814:	2201      	movs	r2, #1
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4013      	ands	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	429a      	cmp	r2, r3
 800382c:	f040 80c9 	bne.w	80039c2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003830:	4a6b      	ldr	r2, [pc, #428]	@ (80039e0 <HAL_GPIO_DeInit+0x1e8>)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	089b      	lsrs	r3, r3, #2
 8003836:	3302      	adds	r3, #2
 8003838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800383c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f003 0303 	and.w	r3, r3, #3
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	220f      	movs	r2, #15
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	4013      	ands	r3, r2
 8003850:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a63      	ldr	r2, [pc, #396]	@ (80039e4 <HAL_GPIO_DeInit+0x1ec>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d037      	beq.n	80038ca <HAL_GPIO_DeInit+0xd2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a62      	ldr	r2, [pc, #392]	@ (80039e8 <HAL_GPIO_DeInit+0x1f0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d031      	beq.n	80038c6 <HAL_GPIO_DeInit+0xce>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a61      	ldr	r2, [pc, #388]	@ (80039ec <HAL_GPIO_DeInit+0x1f4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d02b      	beq.n	80038c2 <HAL_GPIO_DeInit+0xca>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a60      	ldr	r2, [pc, #384]	@ (80039f0 <HAL_GPIO_DeInit+0x1f8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d025      	beq.n	80038be <HAL_GPIO_DeInit+0xc6>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a5f      	ldr	r2, [pc, #380]	@ (80039f4 <HAL_GPIO_DeInit+0x1fc>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d01f      	beq.n	80038ba <HAL_GPIO_DeInit+0xc2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a5e      	ldr	r2, [pc, #376]	@ (80039f8 <HAL_GPIO_DeInit+0x200>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d019      	beq.n	80038b6 <HAL_GPIO_DeInit+0xbe>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a5d      	ldr	r2, [pc, #372]	@ (80039fc <HAL_GPIO_DeInit+0x204>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d013      	beq.n	80038b2 <HAL_GPIO_DeInit+0xba>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a5c      	ldr	r2, [pc, #368]	@ (8003a00 <HAL_GPIO_DeInit+0x208>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00d      	beq.n	80038ae <HAL_GPIO_DeInit+0xb6>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a5b      	ldr	r2, [pc, #364]	@ (8003a04 <HAL_GPIO_DeInit+0x20c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d007      	beq.n	80038aa <HAL_GPIO_DeInit+0xb2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a5a      	ldr	r2, [pc, #360]	@ (8003a08 <HAL_GPIO_DeInit+0x210>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d101      	bne.n	80038a6 <HAL_GPIO_DeInit+0xae>
 80038a2:	2309      	movs	r3, #9
 80038a4:	e012      	b.n	80038cc <HAL_GPIO_DeInit+0xd4>
 80038a6:	230a      	movs	r3, #10
 80038a8:	e010      	b.n	80038cc <HAL_GPIO_DeInit+0xd4>
 80038aa:	2308      	movs	r3, #8
 80038ac:	e00e      	b.n	80038cc <HAL_GPIO_DeInit+0xd4>
 80038ae:	2307      	movs	r3, #7
 80038b0:	e00c      	b.n	80038cc <HAL_GPIO_DeInit+0xd4>
 80038b2:	2306      	movs	r3, #6
 80038b4:	e00a      	b.n	80038cc <HAL_GPIO_DeInit+0xd4>
 80038b6:	2305      	movs	r3, #5
 80038b8:	e008      	b.n	80038cc <HAL_GPIO_DeInit+0xd4>
 80038ba:	2304      	movs	r3, #4
 80038bc:	e006      	b.n	80038cc <HAL_GPIO_DeInit+0xd4>
 80038be:	2303      	movs	r3, #3
 80038c0:	e004      	b.n	80038cc <HAL_GPIO_DeInit+0xd4>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e002      	b.n	80038cc <HAL_GPIO_DeInit+0xd4>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <HAL_GPIO_DeInit+0xd4>
 80038ca:	2300      	movs	r3, #0
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	f002 0203 	and.w	r2, r2, #3
 80038d2:	0092      	lsls	r2, r2, #2
 80038d4:	4093      	lsls	r3, r2
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d132      	bne.n	8003942 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80038dc:	4b4b      	ldr	r3, [pc, #300]	@ (8003a0c <HAL_GPIO_DeInit+0x214>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	43db      	mvns	r3, r3
 80038e4:	4949      	ldr	r1, [pc, #292]	@ (8003a0c <HAL_GPIO_DeInit+0x214>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80038ea:	4b48      	ldr	r3, [pc, #288]	@ (8003a0c <HAL_GPIO_DeInit+0x214>)
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	43db      	mvns	r3, r3
 80038f2:	4946      	ldr	r1, [pc, #280]	@ (8003a0c <HAL_GPIO_DeInit+0x214>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80038f8:	4b44      	ldr	r3, [pc, #272]	@ (8003a0c <HAL_GPIO_DeInit+0x214>)
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	43db      	mvns	r3, r3
 8003900:	4942      	ldr	r1, [pc, #264]	@ (8003a0c <HAL_GPIO_DeInit+0x214>)
 8003902:	4013      	ands	r3, r2
 8003904:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003906:	4b41      	ldr	r3, [pc, #260]	@ (8003a0c <HAL_GPIO_DeInit+0x214>)
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	43db      	mvns	r3, r3
 800390e:	493f      	ldr	r1, [pc, #252]	@ (8003a0c <HAL_GPIO_DeInit+0x214>)
 8003910:	4013      	ands	r3, r2
 8003912:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	220f      	movs	r2, #15
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003924:	4a2e      	ldr	r2, [pc, #184]	@ (80039e0 <HAL_GPIO_DeInit+0x1e8>)
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	089b      	lsrs	r3, r3, #2
 800392a:	3302      	adds	r3, #2
 800392c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	43da      	mvns	r2, r3
 8003934:	482a      	ldr	r0, [pc, #168]	@ (80039e0 <HAL_GPIO_DeInit+0x1e8>)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	089b      	lsrs	r3, r3, #2
 800393a:	400a      	ands	r2, r1
 800393c:	3302      	adds	r3, #2
 800393e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	2103      	movs	r1, #3
 800394c:	fa01 f303 	lsl.w	r3, r1, r3
 8003950:	43db      	mvns	r3, r3
 8003952:	401a      	ands	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	08da      	lsrs	r2, r3, #3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3208      	adds	r2, #8
 8003960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	220f      	movs	r2, #15
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43db      	mvns	r3, r3
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	08d2      	lsrs	r2, r2, #3
 8003978:	4019      	ands	r1, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3208      	adds	r2, #8
 800397e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	2103      	movs	r1, #3
 800398c:	fa01 f303 	lsl.w	r3, r1, r3
 8003990:	43db      	mvns	r3, r3
 8003992:	401a      	ands	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	2101      	movs	r1, #1
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	fa01 f303 	lsl.w	r3, r1, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	401a      	ands	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	2103      	movs	r1, #3
 80039b6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ba:	43db      	mvns	r3, r3
 80039bc:	401a      	ands	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	3301      	adds	r3, #1
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2b0f      	cmp	r3, #15
 80039cc:	f67f af22 	bls.w	8003814 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40013800 	.word	0x40013800
 80039e4:	40020000 	.word	0x40020000
 80039e8:	40020400 	.word	0x40020400
 80039ec:	40020800 	.word	0x40020800
 80039f0:	40020c00 	.word	0x40020c00
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40021400 	.word	0x40021400
 80039fc:	40021800 	.word	0x40021800
 8003a00:	40021c00 	.word	0x40021c00
 8003a04:	40022000 	.word	0x40022000
 8003a08:	40022400 	.word	0x40022400
 8003a0c:	40013c00 	.word	0x40013c00

08003a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	807b      	strh	r3, [r7, #2]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a20:	787b      	ldrb	r3, [r7, #1]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a26:	887a      	ldrh	r2, [r7, #2]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a2c:	e003      	b.n	8003a36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a2e:	887b      	ldrh	r3, [r7, #2]
 8003a30:	041a      	lsls	r2, r3, #16
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	619a      	str	r2, [r3, #24]
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e12b      	b.n	8003cae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fe fd00 	bl	8002470 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2224      	movs	r2, #36	@ 0x24
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0201 	bic.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003aa6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003aa8:	f001 ff82 	bl	80059b0 <HAL_RCC_GetPCLK1Freq>
 8003aac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	4a81      	ldr	r2, [pc, #516]	@ (8003cb8 <HAL_I2C_Init+0x274>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d807      	bhi.n	8003ac8 <HAL_I2C_Init+0x84>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4a80      	ldr	r2, [pc, #512]	@ (8003cbc <HAL_I2C_Init+0x278>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	bf94      	ite	ls
 8003ac0:	2301      	movls	r3, #1
 8003ac2:	2300      	movhi	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	e006      	b.n	8003ad6 <HAL_I2C_Init+0x92>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4a7d      	ldr	r2, [pc, #500]	@ (8003cc0 <HAL_I2C_Init+0x27c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	bf94      	ite	ls
 8003ad0:	2301      	movls	r3, #1
 8003ad2:	2300      	movhi	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e0e7      	b.n	8003cae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4a78      	ldr	r2, [pc, #480]	@ (8003cc4 <HAL_I2C_Init+0x280>)
 8003ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae6:	0c9b      	lsrs	r3, r3, #18
 8003ae8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	4a6a      	ldr	r2, [pc, #424]	@ (8003cb8 <HAL_I2C_Init+0x274>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d802      	bhi.n	8003b18 <HAL_I2C_Init+0xd4>
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	3301      	adds	r3, #1
 8003b16:	e009      	b.n	8003b2c <HAL_I2C_Init+0xe8>
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b1e:	fb02 f303 	mul.w	r3, r2, r3
 8003b22:	4a69      	ldr	r2, [pc, #420]	@ (8003cc8 <HAL_I2C_Init+0x284>)
 8003b24:	fba2 2303 	umull	r2, r3, r2, r3
 8003b28:	099b      	lsrs	r3, r3, #6
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	430b      	orrs	r3, r1
 8003b32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	495c      	ldr	r1, [pc, #368]	@ (8003cb8 <HAL_I2C_Init+0x274>)
 8003b48:	428b      	cmp	r3, r1
 8003b4a:	d819      	bhi.n	8003b80 <HAL_I2C_Init+0x13c>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	1e59      	subs	r1, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b5a:	1c59      	adds	r1, r3, #1
 8003b5c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b60:	400b      	ands	r3, r1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <HAL_I2C_Init+0x138>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1e59      	subs	r1, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b74:	3301      	adds	r3, #1
 8003b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b7a:	e051      	b.n	8003c20 <HAL_I2C_Init+0x1dc>
 8003b7c:	2304      	movs	r3, #4
 8003b7e:	e04f      	b.n	8003c20 <HAL_I2C_Init+0x1dc>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d111      	bne.n	8003bac <HAL_I2C_Init+0x168>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	1e58      	subs	r0, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6859      	ldr	r1, [r3, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	440b      	add	r3, r1
 8003b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	bf0c      	ite	eq
 8003ba4:	2301      	moveq	r3, #1
 8003ba6:	2300      	movne	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	e012      	b.n	8003bd2 <HAL_I2C_Init+0x18e>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	1e58      	subs	r0, r3, #1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6859      	ldr	r1, [r3, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	0099      	lsls	r1, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_I2C_Init+0x196>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e022      	b.n	8003c20 <HAL_I2C_Init+0x1dc>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10e      	bne.n	8003c00 <HAL_I2C_Init+0x1bc>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	1e58      	subs	r0, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6859      	ldr	r1, [r3, #4]
 8003bea:	460b      	mov	r3, r1
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	440b      	add	r3, r1
 8003bf0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bfe:	e00f      	b.n	8003c20 <HAL_I2C_Init+0x1dc>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	1e58      	subs	r0, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6859      	ldr	r1, [r3, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	0099      	lsls	r1, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c16:	3301      	adds	r3, #1
 8003c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	6809      	ldr	r1, [r1, #0]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69da      	ldr	r2, [r3, #28]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6911      	ldr	r1, [r2, #16]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	68d2      	ldr	r2, [r2, #12]
 8003c5a:	4311      	orrs	r1, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6812      	ldr	r2, [r2, #0]
 8003c60:	430b      	orrs	r3, r1
 8003c62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	695a      	ldr	r2, [r3, #20]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	000186a0 	.word	0x000186a0
 8003cbc:	001e847f 	.word	0x001e847f
 8003cc0:	003d08ff 	.word	0x003d08ff
 8003cc4:	431bde83 	.word	0x431bde83
 8003cc8:	10624dd3 	.word	0x10624dd3

08003ccc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	4608      	mov	r0, r1
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4603      	mov	r3, r0
 8003cdc:	817b      	strh	r3, [r7, #10]
 8003cde:	460b      	mov	r3, r1
 8003ce0:	813b      	strh	r3, [r7, #8]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ce6:	f7ff fac5 	bl	8003274 <HAL_GetTick>
 8003cea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	f040 80d9 	bne.w	8003eac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	2319      	movs	r3, #25
 8003d00:	2201      	movs	r2, #1
 8003d02:	496d      	ldr	r1, [pc, #436]	@ (8003eb8 <HAL_I2C_Mem_Write+0x1ec>)
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 fc8b 	bl	8004620 <I2C_WaitOnFlagUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d10:	2302      	movs	r3, #2
 8003d12:	e0cc      	b.n	8003eae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_I2C_Mem_Write+0x56>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e0c5      	b.n	8003eae <HAL_I2C_Mem_Write+0x1e2>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d007      	beq.n	8003d48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2221      	movs	r2, #33	@ 0x21
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2240      	movs	r2, #64	@ 0x40
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a3a      	ldr	r2, [r7, #32]
 8003d72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4a4d      	ldr	r2, [pc, #308]	@ (8003ebc <HAL_I2C_Mem_Write+0x1f0>)
 8003d88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d8a:	88f8      	ldrh	r0, [r7, #6]
 8003d8c:	893a      	ldrh	r2, [r7, #8]
 8003d8e:	8979      	ldrh	r1, [r7, #10]
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	9301      	str	r3, [sp, #4]
 8003d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	4603      	mov	r3, r0
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 fac2 	bl	8004324 <I2C_RequestMemoryWrite>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d052      	beq.n	8003e4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e081      	b.n	8003eae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 fd50 	bl	8004854 <I2C_WaitOnTXEFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00d      	beq.n	8003dd6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d107      	bne.n	8003dd2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e06b      	b.n	8003eae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dda:	781a      	ldrb	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d11b      	bne.n	8003e4c <HAL_I2C_Mem_Write+0x180>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d017      	beq.n	8003e4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e20:	781a      	ldrb	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1aa      	bne.n	8003daa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 fd43 	bl	80048e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00d      	beq.n	8003e80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d107      	bne.n	8003e7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e016      	b.n	8003eae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	e000      	b.n	8003eae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003eac:	2302      	movs	r3, #2
  }
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	00100002 	.word	0x00100002
 8003ebc:	ffff0000 	.word	0xffff0000

08003ec0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08c      	sub	sp, #48	@ 0x30
 8003ec4:	af02      	add	r7, sp, #8
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	4608      	mov	r0, r1
 8003eca:	4611      	mov	r1, r2
 8003ecc:	461a      	mov	r2, r3
 8003ece:	4603      	mov	r3, r0
 8003ed0:	817b      	strh	r3, [r7, #10]
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	813b      	strh	r3, [r7, #8]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003eda:	f7ff f9cb 	bl	8003274 <HAL_GetTick>
 8003ede:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b20      	cmp	r3, #32
 8003eea:	f040 8214 	bne.w	8004316 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	2319      	movs	r3, #25
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	497b      	ldr	r1, [pc, #492]	@ (80040e4 <HAL_I2C_Mem_Read+0x224>)
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 fb91 	bl	8004620 <I2C_WaitOnFlagUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f04:	2302      	movs	r3, #2
 8003f06:	e207      	b.n	8004318 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <HAL_I2C_Mem_Read+0x56>
 8003f12:	2302      	movs	r3, #2
 8003f14:	e200      	b.n	8004318 <HAL_I2C_Mem_Read+0x458>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d007      	beq.n	8003f3c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0201 	orr.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2222      	movs	r2, #34	@ 0x22
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2240      	movs	r2, #64	@ 0x40
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4a5b      	ldr	r2, [pc, #364]	@ (80040e8 <HAL_I2C_Mem_Read+0x228>)
 8003f7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f7e:	88f8      	ldrh	r0, [r7, #6]
 8003f80:	893a      	ldrh	r2, [r7, #8]
 8003f82:	8979      	ldrh	r1, [r7, #10]
 8003f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f86:	9301      	str	r3, [sp, #4]
 8003f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 fa5e 	bl	8004450 <I2C_RequestMemoryRead>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e1bc      	b.n	8004318 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d113      	bne.n	8003fce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	623b      	str	r3, [r7, #32]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	623b      	str	r3, [r7, #32]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	623b      	str	r3, [r7, #32]
 8003fba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	e190      	b.n	80042f0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d11b      	bne.n	800400e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fe4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61fb      	str	r3, [r7, #28]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	61fb      	str	r3, [r7, #28]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	61fb      	str	r3, [r7, #28]
 8003ffa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	e170      	b.n	80042f0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004012:	2b02      	cmp	r3, #2
 8004014:	d11b      	bne.n	800404e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004024:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004034:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004036:	2300      	movs	r3, #0
 8004038:	61bb      	str	r3, [r7, #24]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	61bb      	str	r3, [r7, #24]
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	e150      	b.n	80042f0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404e:	2300      	movs	r3, #0
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004064:	e144      	b.n	80042f0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406a:	2b03      	cmp	r3, #3
 800406c:	f200 80f1 	bhi.w	8004252 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004074:	2b01      	cmp	r3, #1
 8004076:	d123      	bne.n	80040c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800407a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 fc79 	bl	8004974 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e145      	b.n	8004318 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a8:	3b01      	subs	r3, #1
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040be:	e117      	b.n	80042f0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d14e      	bne.n	8004166 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ce:	2200      	movs	r2, #0
 80040d0:	4906      	ldr	r1, [pc, #24]	@ (80040ec <HAL_I2C_Mem_Read+0x22c>)
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 faa4 	bl	8004620 <I2C_WaitOnFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d008      	beq.n	80040f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e11a      	b.n	8004318 <HAL_I2C_Mem_Read+0x458>
 80040e2:	bf00      	nop
 80040e4:	00100002 	.word	0x00100002
 80040e8:	ffff0000 	.word	0xffff0000
 80040ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691a      	ldr	r2, [r3, #16]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004128:	b29b      	uxth	r3, r3
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004164:	e0c4      	b.n	80042f0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416c:	2200      	movs	r2, #0
 800416e:	496c      	ldr	r1, [pc, #432]	@ (8004320 <HAL_I2C_Mem_Read+0x460>)
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 fa55 	bl	8004620 <I2C_WaitOnFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0cb      	b.n	8004318 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800418e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c8:	2200      	movs	r2, #0
 80041ca:	4955      	ldr	r1, [pc, #340]	@ (8004320 <HAL_I2C_Mem_Read+0x460>)
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 fa27 	bl	8004620 <I2C_WaitOnFlagUntilTimeout>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e09d      	b.n	8004318 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423a:	3b01      	subs	r3, #1
 800423c:	b29a      	uxth	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004250:	e04e      	b.n	80042f0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004254:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 fb8c 	bl	8004974 <I2C_WaitOnRXNEFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e058      	b.n	8004318 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f003 0304 	and.w	r3, r3, #4
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d124      	bne.n	80042f0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d107      	bne.n	80042be <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042bc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	691a      	ldr	r2, [r3, #16]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d0:	1c5a      	adds	r2, r3, #1
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f47f aeb6 	bne.w	8004066 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	e000      	b.n	8004318 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004316:	2302      	movs	r3, #2
  }
}
 8004318:	4618      	mov	r0, r3
 800431a:	3728      	adds	r7, #40	@ 0x28
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	00010004 	.word	0x00010004

08004324 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af02      	add	r7, sp, #8
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	4608      	mov	r0, r1
 800432e:	4611      	mov	r1, r2
 8004330:	461a      	mov	r2, r3
 8004332:	4603      	mov	r3, r0
 8004334:	817b      	strh	r3, [r7, #10]
 8004336:	460b      	mov	r3, r1
 8004338:	813b      	strh	r3, [r7, #8]
 800433a:	4613      	mov	r3, r2
 800433c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800434c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800434e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	2200      	movs	r2, #0
 8004356:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 f960 	bl	8004620 <I2C_WaitOnFlagUntilTimeout>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00d      	beq.n	8004382 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004370:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004374:	d103      	bne.n	800437e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800437c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e05f      	b.n	8004442 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004382:	897b      	ldrh	r3, [r7, #10]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	461a      	mov	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004390:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	6a3a      	ldr	r2, [r7, #32]
 8004396:	492d      	ldr	r1, [pc, #180]	@ (800444c <I2C_RequestMemoryWrite+0x128>)
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f9bb 	bl	8004714 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e04c      	b.n	8004442 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043c0:	6a39      	ldr	r1, [r7, #32]
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 fa46 	bl	8004854 <I2C_WaitOnTXEFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00d      	beq.n	80043ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d107      	bne.n	80043e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e02b      	b.n	8004442 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d105      	bne.n	80043fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043f0:	893b      	ldrh	r3, [r7, #8]
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	611a      	str	r2, [r3, #16]
 80043fa:	e021      	b.n	8004440 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043fc:	893b      	ldrh	r3, [r7, #8]
 80043fe:	0a1b      	lsrs	r3, r3, #8
 8004400:	b29b      	uxth	r3, r3
 8004402:	b2da      	uxtb	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800440a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800440c:	6a39      	ldr	r1, [r7, #32]
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 fa20 	bl	8004854 <I2C_WaitOnTXEFlagUntilTimeout>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00d      	beq.n	8004436 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	2b04      	cmp	r3, #4
 8004420:	d107      	bne.n	8004432 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004430:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e005      	b.n	8004442 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004436:	893b      	ldrh	r3, [r7, #8]
 8004438:	b2da      	uxtb	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	00010002 	.word	0x00010002

08004450 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af02      	add	r7, sp, #8
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	4608      	mov	r0, r1
 800445a:	4611      	mov	r1, r2
 800445c:	461a      	mov	r2, r3
 800445e:	4603      	mov	r3, r0
 8004460:	817b      	strh	r3, [r7, #10]
 8004462:	460b      	mov	r3, r1
 8004464:	813b      	strh	r3, [r7, #8]
 8004466:	4613      	mov	r3, r2
 8004468:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004478:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004488:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	2200      	movs	r2, #0
 8004492:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 f8c2 	bl	8004620 <I2C_WaitOnFlagUntilTimeout>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00d      	beq.n	80044be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044b0:	d103      	bne.n	80044ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e0aa      	b.n	8004614 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044be:	897b      	ldrh	r3, [r7, #10]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	461a      	mov	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d0:	6a3a      	ldr	r2, [r7, #32]
 80044d2:	4952      	ldr	r1, [pc, #328]	@ (800461c <I2C_RequestMemoryRead+0x1cc>)
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 f91d 	bl	8004714 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e097      	b.n	8004614 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044fc:	6a39      	ldr	r1, [r7, #32]
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f9a8 	bl	8004854 <I2C_WaitOnTXEFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00d      	beq.n	8004526 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	2b04      	cmp	r3, #4
 8004510:	d107      	bne.n	8004522 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004520:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e076      	b.n	8004614 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004526:	88fb      	ldrh	r3, [r7, #6]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d105      	bne.n	8004538 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800452c:	893b      	ldrh	r3, [r7, #8]
 800452e:	b2da      	uxtb	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	611a      	str	r2, [r3, #16]
 8004536:	e021      	b.n	800457c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004538:	893b      	ldrh	r3, [r7, #8]
 800453a:	0a1b      	lsrs	r3, r3, #8
 800453c:	b29b      	uxth	r3, r3
 800453e:	b2da      	uxtb	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004548:	6a39      	ldr	r1, [r7, #32]
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 f982 	bl	8004854 <I2C_WaitOnTXEFlagUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00d      	beq.n	8004572 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455a:	2b04      	cmp	r3, #4
 800455c:	d107      	bne.n	800456e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800456c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e050      	b.n	8004614 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004572:	893b      	ldrh	r3, [r7, #8]
 8004574:	b2da      	uxtb	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800457c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800457e:	6a39      	ldr	r1, [r7, #32]
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 f967 	bl	8004854 <I2C_WaitOnTXEFlagUntilTimeout>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00d      	beq.n	80045a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004590:	2b04      	cmp	r3, #4
 8004592:	d107      	bne.n	80045a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e035      	b.n	8004614 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	2200      	movs	r2, #0
 80045c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 f82b 	bl	8004620 <I2C_WaitOnFlagUntilTimeout>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00d      	beq.n	80045ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045de:	d103      	bne.n	80045e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e013      	b.n	8004614 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045ec:	897b      	ldrh	r3, [r7, #10]
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	f043 0301 	orr.w	r3, r3, #1
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fe:	6a3a      	ldr	r2, [r7, #32]
 8004600:	4906      	ldr	r1, [pc, #24]	@ (800461c <I2C_RequestMemoryRead+0x1cc>)
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 f886 	bl	8004714 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	00010002 	.word	0x00010002

08004620 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	603b      	str	r3, [r7, #0]
 800462c:	4613      	mov	r3, r2
 800462e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004630:	e048      	b.n	80046c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004638:	d044      	beq.n	80046c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800463a:	f7fe fe1b 	bl	8003274 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d302      	bcc.n	8004650 <I2C_WaitOnFlagUntilTimeout+0x30>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d139      	bne.n	80046c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	0c1b      	lsrs	r3, r3, #16
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b01      	cmp	r3, #1
 8004658:	d10d      	bne.n	8004676 <I2C_WaitOnFlagUntilTimeout+0x56>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	43da      	mvns	r2, r3
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	4013      	ands	r3, r2
 8004666:	b29b      	uxth	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	bf0c      	ite	eq
 800466c:	2301      	moveq	r3, #1
 800466e:	2300      	movne	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	461a      	mov	r2, r3
 8004674:	e00c      	b.n	8004690 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	43da      	mvns	r2, r3
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	4013      	ands	r3, r2
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	bf0c      	ite	eq
 8004688:	2301      	moveq	r3, #1
 800468a:	2300      	movne	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	461a      	mov	r2, r3
 8004690:	79fb      	ldrb	r3, [r7, #7]
 8004692:	429a      	cmp	r2, r3
 8004694:	d116      	bne.n	80046c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b0:	f043 0220 	orr.w	r2, r3, #32
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e023      	b.n	800470c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	0c1b      	lsrs	r3, r3, #16
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d10d      	bne.n	80046ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	43da      	mvns	r2, r3
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	4013      	ands	r3, r2
 80046da:	b29b      	uxth	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	bf0c      	ite	eq
 80046e0:	2301      	moveq	r3, #1
 80046e2:	2300      	movne	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	461a      	mov	r2, r3
 80046e8:	e00c      	b.n	8004704 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	43da      	mvns	r2, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	4013      	ands	r3, r2
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	bf0c      	ite	eq
 80046fc:	2301      	moveq	r3, #1
 80046fe:	2300      	movne	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	461a      	mov	r2, r3
 8004704:	79fb      	ldrb	r3, [r7, #7]
 8004706:	429a      	cmp	r2, r3
 8004708:	d093      	beq.n	8004632 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
 8004720:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004722:	e071      	b.n	8004808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800472e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004732:	d123      	bne.n	800477c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004742:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800474c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004768:	f043 0204 	orr.w	r2, r3, #4
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e067      	b.n	800484c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004782:	d041      	beq.n	8004808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004784:	f7fe fd76 	bl	8003274 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	429a      	cmp	r2, r3
 8004792:	d302      	bcc.n	800479a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d136      	bne.n	8004808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	0c1b      	lsrs	r3, r3, #16
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d10c      	bne.n	80047be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	43da      	mvns	r2, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4013      	ands	r3, r2
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	bf14      	ite	ne
 80047b6:	2301      	movne	r3, #1
 80047b8:	2300      	moveq	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	e00b      	b.n	80047d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	43da      	mvns	r2, r3
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	4013      	ands	r3, r2
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	bf14      	ite	ne
 80047d0:	2301      	movne	r3, #1
 80047d2:	2300      	moveq	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d016      	beq.n	8004808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f4:	f043 0220 	orr.w	r2, r3, #32
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e021      	b.n	800484c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	0c1b      	lsrs	r3, r3, #16
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b01      	cmp	r3, #1
 8004810:	d10c      	bne.n	800482c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	43da      	mvns	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	4013      	ands	r3, r2
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf14      	ite	ne
 8004824:	2301      	movne	r3, #1
 8004826:	2300      	moveq	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	e00b      	b.n	8004844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	43da      	mvns	r2, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4013      	ands	r3, r2
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	bf14      	ite	ne
 800483e:	2301      	movne	r3, #1
 8004840:	2300      	moveq	r3, #0
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	f47f af6d 	bne.w	8004724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004860:	e034      	b.n	80048cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 f8e3 	bl	8004a2e <I2C_IsAcknowledgeFailed>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e034      	b.n	80048dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004878:	d028      	beq.n	80048cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487a:	f7fe fcfb 	bl	8003274 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	429a      	cmp	r2, r3
 8004888:	d302      	bcc.n	8004890 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d11d      	bne.n	80048cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800489a:	2b80      	cmp	r3, #128	@ 0x80
 800489c:	d016      	beq.n	80048cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b8:	f043 0220 	orr.w	r2, r3, #32
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e007      	b.n	80048dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048d6:	2b80      	cmp	r3, #128	@ 0x80
 80048d8:	d1c3      	bne.n	8004862 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048f0:	e034      	b.n	800495c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 f89b 	bl	8004a2e <I2C_IsAcknowledgeFailed>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e034      	b.n	800496c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004908:	d028      	beq.n	800495c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800490a:	f7fe fcb3 	bl	8003274 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	429a      	cmp	r2, r3
 8004918:	d302      	bcc.n	8004920 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d11d      	bne.n	800495c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	2b04      	cmp	r3, #4
 800492c:	d016      	beq.n	800495c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004948:	f043 0220 	orr.w	r2, r3, #32
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e007      	b.n	800496c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b04      	cmp	r3, #4
 8004968:	d1c3      	bne.n	80048f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004980:	e049      	b.n	8004a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	f003 0310 	and.w	r3, r3, #16
 800498c:	2b10      	cmp	r3, #16
 800498e:	d119      	bne.n	80049c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0210 	mvn.w	r2, #16
 8004998:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e030      	b.n	8004a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c4:	f7fe fc56 	bl	8003274 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d302      	bcc.n	80049da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d11d      	bne.n	8004a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e4:	2b40      	cmp	r3, #64	@ 0x40
 80049e6:	d016      	beq.n	8004a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a02:	f043 0220 	orr.w	r2, r3, #32
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e007      	b.n	8004a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a20:	2b40      	cmp	r3, #64	@ 0x40
 8004a22:	d1ae      	bne.n	8004982 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a44:	d11b      	bne.n	8004a7e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a4e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6a:	f043 0204 	orr.w	r2, r3, #4
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b20      	cmp	r3, #32
 8004aa0:	d129      	bne.n	8004af6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2224      	movs	r2, #36	@ 0x24
 8004aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0201 	bic.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0210 	bic.w	r2, r2, #16
 8004ac8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0201 	orr.w	r2, r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	e000      	b.n	8004af8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004af6:	2302      	movs	r3, #2
  }
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	d12a      	bne.n	8004b74 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2224      	movs	r2, #36	@ 0x24
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0201 	bic.w	r2, r2, #1
 8004b34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004b3e:	89fb      	ldrh	r3, [r7, #14]
 8004b40:	f023 030f 	bic.w	r3, r3, #15
 8004b44:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	89fb      	ldrh	r3, [r7, #14]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	89fa      	ldrh	r2, [r7, #14]
 8004b56:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0201 	orr.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	e000      	b.n	8004b76 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004b74:	2302      	movs	r3, #2
  }
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
	...

08004b84 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e0bf      	b.n	8004d16 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7fd fcca 	bl	8002544 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699a      	ldr	r2, [r3, #24]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004bc6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6999      	ldr	r1, [r3, #24]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004bdc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6899      	ldr	r1, [r3, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8004d20 <HAL_LTDC_Init+0x19c>)
 8004bf8:	400b      	ands	r3, r1
 8004bfa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	041b      	lsls	r3, r3, #16
 8004c02:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6899      	ldr	r1, [r3, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	431a      	orrs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68d9      	ldr	r1, [r3, #12]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	4b3e      	ldr	r3, [pc, #248]	@ (8004d20 <HAL_LTDC_Init+0x19c>)
 8004c26:	400b      	ands	r3, r1
 8004c28:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	041b      	lsls	r3, r3, #16
 8004c30:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68d9      	ldr	r1, [r3, #12]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1a      	ldr	r2, [r3, #32]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6919      	ldr	r1, [r3, #16]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4b33      	ldr	r3, [pc, #204]	@ (8004d20 <HAL_LTDC_Init+0x19c>)
 8004c54:	400b      	ands	r3, r1
 8004c56:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5c:	041b      	lsls	r3, r3, #16
 8004c5e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6919      	ldr	r1, [r3, #16]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6959      	ldr	r1, [r3, #20]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	4b27      	ldr	r3, [pc, #156]	@ (8004d20 <HAL_LTDC_Init+0x19c>)
 8004c82:	400b      	ands	r3, r1
 8004c84:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8a:	041b      	lsls	r3, r3, #16
 8004c8c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6959      	ldr	r1, [r3, #20]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004cb4:	041b      	lsls	r3, r3, #16
 8004cb6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0206 	orr.w	r2, r2, #6
 8004cf2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699a      	ldr	r2, [r3, #24]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	f000f800 	.word	0xf000f800

08004d24 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004d24:	b5b0      	push	{r4, r5, r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <HAL_LTDC_ConfigLayer+0x1a>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e02c      	b.n	8004d98 <HAL_LTDC_ConfigLayer+0x74>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2202      	movs	r2, #2
 8004d4a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2134      	movs	r1, #52	@ 0x34
 8004d54:	fb01 f303 	mul.w	r3, r1, r3
 8004d58:	4413      	add	r3, r2
 8004d5a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	4614      	mov	r4, r2
 8004d62:	461d      	mov	r5, r3
 8004d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d70:	682b      	ldr	r3, [r5, #0]
 8004d72:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	68b9      	ldr	r1, [r7, #8]
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 f811 	bl	8004da0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2201      	movs	r2, #1
 8004d84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bdb0      	pop	{r4, r5, r7, pc}

08004da0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b089      	sub	sp, #36	@ 0x24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	0c1b      	lsrs	r3, r3, #16
 8004db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dbc:	4413      	add	r3, r2
 8004dbe:	041b      	lsls	r3, r3, #16
 8004dc0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	01db      	lsls	r3, r3, #7
 8004dcc:	4413      	add	r3, r2
 8004dce:	3384      	adds	r3, #132	@ 0x84
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	01d2      	lsls	r2, r2, #7
 8004ddc:	440a      	add	r2, r1
 8004dde:	3284      	adds	r2, #132	@ 0x84
 8004de0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004de4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	0c1b      	lsrs	r3, r3, #16
 8004df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004df6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004df8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4619      	mov	r1, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	01db      	lsls	r3, r3, #7
 8004e04:	440b      	add	r3, r1
 8004e06:	3384      	adds	r3, #132	@ 0x84
 8004e08:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e0e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e1e:	4413      	add	r3, r2
 8004e20:	041b      	lsls	r3, r3, #16
 8004e22:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	01db      	lsls	r3, r3, #7
 8004e2e:	4413      	add	r3, r2
 8004e30:	3384      	adds	r3, #132	@ 0x84
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	6812      	ldr	r2, [r2, #0]
 8004e38:	4611      	mov	r1, r2
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	01d2      	lsls	r2, r2, #7
 8004e3e:	440a      	add	r2, r1
 8004e40:	3284      	adds	r2, #132	@ 0x84
 8004e42:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004e46:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e56:	4413      	add	r3, r2
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	01db      	lsls	r3, r3, #7
 8004e64:	440b      	add	r3, r1
 8004e66:	3384      	adds	r3, #132	@ 0x84
 8004e68:	4619      	mov	r1, r3
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	461a      	mov	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	01db      	lsls	r3, r3, #7
 8004e7a:	4413      	add	r3, r2
 8004e7c:	3384      	adds	r3, #132	@ 0x84
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	4611      	mov	r1, r2
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	01d2      	lsls	r2, r2, #7
 8004e8a:	440a      	add	r2, r1
 8004e8c:	3284      	adds	r2, #132	@ 0x84
 8004e8e:	f023 0307 	bic.w	r3, r3, #7
 8004e92:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	01db      	lsls	r3, r3, #7
 8004e9e:	4413      	add	r3, r2
 8004ea0:	3384      	adds	r3, #132	@ 0x84
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004eba:	041b      	lsls	r3, r3, #16
 8004ebc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	061b      	lsls	r3, r3, #24
 8004ec4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	01db      	lsls	r3, r3, #7
 8004ed0:	4413      	add	r3, r2
 8004ed2:	3384      	adds	r3, #132	@ 0x84
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	01db      	lsls	r3, r3, #7
 8004ee0:	4413      	add	r3, r2
 8004ee2:	3384      	adds	r3, #132	@ 0x84
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4619      	mov	r1, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	01db      	lsls	r3, r3, #7
 8004f04:	440b      	add	r3, r1
 8004f06:	3384      	adds	r3, #132	@ 0x84
 8004f08:	4619      	mov	r1, r3
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	461a      	mov	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	01db      	lsls	r3, r3, #7
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3384      	adds	r3, #132	@ 0x84
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	6812      	ldr	r2, [r2, #0]
 8004f24:	4611      	mov	r1, r2
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	01d2      	lsls	r2, r2, #7
 8004f2a:	440a      	add	r2, r1
 8004f2c:	3284      	adds	r2, #132	@ 0x84
 8004f2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004f32:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	01db      	lsls	r3, r3, #7
 8004f3e:	4413      	add	r3, r2
 8004f40:	3384      	adds	r3, #132	@ 0x84
 8004f42:	461a      	mov	r2, r3
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	01db      	lsls	r3, r3, #7
 8004f54:	4413      	add	r3, r2
 8004f56:	3384      	adds	r3, #132	@ 0x84
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	6812      	ldr	r2, [r2, #0]
 8004f5e:	4611      	mov	r1, r2
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	01d2      	lsls	r2, r2, #7
 8004f64:	440a      	add	r2, r1
 8004f66:	3284      	adds	r2, #132	@ 0x84
 8004f68:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004f6c:	f023 0307 	bic.w	r3, r3, #7
 8004f70:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	69da      	ldr	r2, [r3, #28]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	68f9      	ldr	r1, [r7, #12]
 8004f7c:	6809      	ldr	r1, [r1, #0]
 8004f7e:	4608      	mov	r0, r1
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	01c9      	lsls	r1, r1, #7
 8004f84:	4401      	add	r1, r0
 8004f86:	3184      	adds	r1, #132	@ 0x84
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	01db      	lsls	r3, r3, #7
 8004f96:	4413      	add	r3, r2
 8004f98:	3384      	adds	r3, #132	@ 0x84
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	01db      	lsls	r3, r3, #7
 8004fa6:	4413      	add	r3, r2
 8004fa8:	3384      	adds	r3, #132	@ 0x84
 8004faa:	461a      	mov	r2, r3
 8004fac:	2300      	movs	r3, #0
 8004fae:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	01db      	lsls	r3, r3, #7
 8004fba:	4413      	add	r3, r2
 8004fbc:	3384      	adds	r3, #132	@ 0x84
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d102      	bne.n	8004fd4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004fce:	2304      	movs	r3, #4
 8004fd0:	61fb      	str	r3, [r7, #28]
 8004fd2:	e01b      	b.n	800500c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d102      	bne.n	8004fe2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	61fb      	str	r3, [r7, #28]
 8004fe0:	e014      	b.n	800500c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d00b      	beq.n	8005002 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d007      	beq.n	8005002 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d003      	beq.n	8005002 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004ffe:	2b07      	cmp	r3, #7
 8005000:	d102      	bne.n	8005008 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005002:	2302      	movs	r3, #2
 8005004:	61fb      	str	r3, [r7, #28]
 8005006:	e001      	b.n	800500c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005008:	2301      	movs	r3, #1
 800500a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	01db      	lsls	r3, r3, #7
 8005016:	4413      	add	r3, r2
 8005018:	3384      	adds	r3, #132	@ 0x84
 800501a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	6812      	ldr	r2, [r2, #0]
 8005020:	4611      	mov	r1, r2
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	01d2      	lsls	r2, r2, #7
 8005026:	440a      	add	r2, r1
 8005028:	3284      	adds	r2, #132	@ 0x84
 800502a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800502e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005034:	69fa      	ldr	r2, [r7, #28]
 8005036:	fb02 f303 	mul.w	r3, r2, r3
 800503a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	6859      	ldr	r1, [r3, #4]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	1acb      	subs	r3, r1, r3
 8005046:	69f9      	ldr	r1, [r7, #28]
 8005048:	fb01 f303 	mul.w	r3, r1, r3
 800504c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800504e:	68f9      	ldr	r1, [r7, #12]
 8005050:	6809      	ldr	r1, [r1, #0]
 8005052:	4608      	mov	r0, r1
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	01c9      	lsls	r1, r1, #7
 8005058:	4401      	add	r1, r0
 800505a:	3184      	adds	r1, #132	@ 0x84
 800505c:	4313      	orrs	r3, r2
 800505e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	01db      	lsls	r3, r3, #7
 800506a:	4413      	add	r3, r2
 800506c:	3384      	adds	r3, #132	@ 0x84
 800506e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	6812      	ldr	r2, [r2, #0]
 8005074:	4611      	mov	r1, r2
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	01d2      	lsls	r2, r2, #7
 800507a:	440a      	add	r2, r1
 800507c:	3284      	adds	r2, #132	@ 0x84
 800507e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005082:	f023 0307 	bic.w	r3, r3, #7
 8005086:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	01db      	lsls	r3, r3, #7
 8005092:	4413      	add	r3, r2
 8005094:	3384      	adds	r3, #132	@ 0x84
 8005096:	461a      	mov	r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	01db      	lsls	r3, r3, #7
 80050a8:	4413      	add	r3, r2
 80050aa:	3384      	adds	r3, #132	@ 0x84
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	4611      	mov	r1, r2
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	01d2      	lsls	r2, r2, #7
 80050b8:	440a      	add	r2, r1
 80050ba:	3284      	adds	r2, #132	@ 0x84
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	6013      	str	r3, [r2, #0]
}
 80050c2:	bf00      	nop
 80050c4:	3724      	adds	r7, #36	@ 0x24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
	...

080050d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e267      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d075      	beq.n	80051da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80050ee:	4b88      	ldr	r3, [pc, #544]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 030c 	and.w	r3, r3, #12
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d00c      	beq.n	8005114 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050fa:	4b85      	ldr	r3, [pc, #532]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005102:	2b08      	cmp	r3, #8
 8005104:	d112      	bne.n	800512c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005106:	4b82      	ldr	r3, [pc, #520]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800510e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005112:	d10b      	bne.n	800512c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005114:	4b7e      	ldr	r3, [pc, #504]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d05b      	beq.n	80051d8 <HAL_RCC_OscConfig+0x108>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d157      	bne.n	80051d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e242      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005134:	d106      	bne.n	8005144 <HAL_RCC_OscConfig+0x74>
 8005136:	4b76      	ldr	r3, [pc, #472]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a75      	ldr	r2, [pc, #468]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 800513c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	e01d      	b.n	8005180 <HAL_RCC_OscConfig+0xb0>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800514c:	d10c      	bne.n	8005168 <HAL_RCC_OscConfig+0x98>
 800514e:	4b70      	ldr	r3, [pc, #448]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a6f      	ldr	r2, [pc, #444]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 8005154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	4b6d      	ldr	r3, [pc, #436]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a6c      	ldr	r2, [pc, #432]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 8005160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	e00b      	b.n	8005180 <HAL_RCC_OscConfig+0xb0>
 8005168:	4b69      	ldr	r3, [pc, #420]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a68      	ldr	r2, [pc, #416]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 800516e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	4b66      	ldr	r3, [pc, #408]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a65      	ldr	r2, [pc, #404]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 800517a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800517e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d013      	beq.n	80051b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005188:	f7fe f874 	bl	8003274 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005190:	f7fe f870 	bl	8003274 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b64      	cmp	r3, #100	@ 0x64
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e207      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051a2:	4b5b      	ldr	r3, [pc, #364]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0f0      	beq.n	8005190 <HAL_RCC_OscConfig+0xc0>
 80051ae:	e014      	b.n	80051da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b0:	f7fe f860 	bl	8003274 <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051b8:	f7fe f85c 	bl	8003274 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b64      	cmp	r3, #100	@ 0x64
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e1f3      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051ca:	4b51      	ldr	r3, [pc, #324]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1f0      	bne.n	80051b8 <HAL_RCC_OscConfig+0xe8>
 80051d6:	e000      	b.n	80051da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d063      	beq.n	80052ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80051e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 030c 	and.w	r3, r3, #12
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00b      	beq.n	800520a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051f2:	4b47      	ldr	r3, [pc, #284]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80051fa:	2b08      	cmp	r3, #8
 80051fc:	d11c      	bne.n	8005238 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051fe:	4b44      	ldr	r3, [pc, #272]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d116      	bne.n	8005238 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800520a:	4b41      	ldr	r3, [pc, #260]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d005      	beq.n	8005222 <HAL_RCC_OscConfig+0x152>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d001      	beq.n	8005222 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e1c7      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005222:	4b3b      	ldr	r3, [pc, #236]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	4937      	ldr	r1, [pc, #220]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 8005232:	4313      	orrs	r3, r2
 8005234:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005236:	e03a      	b.n	80052ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d020      	beq.n	8005282 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005240:	4b34      	ldr	r3, [pc, #208]	@ (8005314 <HAL_RCC_OscConfig+0x244>)
 8005242:	2201      	movs	r2, #1
 8005244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005246:	f7fe f815 	bl	8003274 <HAL_GetTick>
 800524a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800524c:	e008      	b.n	8005260 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800524e:	f7fe f811 	bl	8003274 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d901      	bls.n	8005260 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e1a8      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005260:	4b2b      	ldr	r3, [pc, #172]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0f0      	beq.n	800524e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800526c:	4b28      	ldr	r3, [pc, #160]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	4925      	ldr	r1, [pc, #148]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 800527c:	4313      	orrs	r3, r2
 800527e:	600b      	str	r3, [r1, #0]
 8005280:	e015      	b.n	80052ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005282:	4b24      	ldr	r3, [pc, #144]	@ (8005314 <HAL_RCC_OscConfig+0x244>)
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005288:	f7fd fff4 	bl	8003274 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005290:	f7fd fff0 	bl	8003274 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e187      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f0      	bne.n	8005290 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0308 	and.w	r3, r3, #8
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d036      	beq.n	8005328 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d016      	beq.n	80052f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052c2:	4b15      	ldr	r3, [pc, #84]	@ (8005318 <HAL_RCC_OscConfig+0x248>)
 80052c4:	2201      	movs	r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c8:	f7fd ffd4 	bl	8003274 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052d0:	f7fd ffd0 	bl	8003274 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e167      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005310 <HAL_RCC_OscConfig+0x240>)
 80052e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0f0      	beq.n	80052d0 <HAL_RCC_OscConfig+0x200>
 80052ee:	e01b      	b.n	8005328 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052f0:	4b09      	ldr	r3, [pc, #36]	@ (8005318 <HAL_RCC_OscConfig+0x248>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052f6:	f7fd ffbd 	bl	8003274 <HAL_GetTick>
 80052fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052fc:	e00e      	b.n	800531c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052fe:	f7fd ffb9 	bl	8003274 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d907      	bls.n	800531c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e150      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
 8005310:	40023800 	.word	0x40023800
 8005314:	42470000 	.word	0x42470000
 8005318:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800531c:	4b88      	ldr	r3, [pc, #544]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 800531e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1ea      	bne.n	80052fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 8097 	beq.w	8005464 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005336:	2300      	movs	r3, #0
 8005338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800533a:	4b81      	ldr	r3, [pc, #516]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10f      	bne.n	8005366 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005346:	2300      	movs	r3, #0
 8005348:	60bb      	str	r3, [r7, #8]
 800534a:	4b7d      	ldr	r3, [pc, #500]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 800534c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534e:	4a7c      	ldr	r2, [pc, #496]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 8005350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005354:	6413      	str	r3, [r2, #64]	@ 0x40
 8005356:	4b7a      	ldr	r3, [pc, #488]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800535e:	60bb      	str	r3, [r7, #8]
 8005360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005362:	2301      	movs	r3, #1
 8005364:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005366:	4b77      	ldr	r3, [pc, #476]	@ (8005544 <HAL_RCC_OscConfig+0x474>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800536e:	2b00      	cmp	r3, #0
 8005370:	d118      	bne.n	80053a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005372:	4b74      	ldr	r3, [pc, #464]	@ (8005544 <HAL_RCC_OscConfig+0x474>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a73      	ldr	r2, [pc, #460]	@ (8005544 <HAL_RCC_OscConfig+0x474>)
 8005378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800537c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800537e:	f7fd ff79 	bl	8003274 <HAL_GetTick>
 8005382:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005384:	e008      	b.n	8005398 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005386:	f7fd ff75 	bl	8003274 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e10c      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005398:	4b6a      	ldr	r3, [pc, #424]	@ (8005544 <HAL_RCC_OscConfig+0x474>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0f0      	beq.n	8005386 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d106      	bne.n	80053ba <HAL_RCC_OscConfig+0x2ea>
 80053ac:	4b64      	ldr	r3, [pc, #400]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80053ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b0:	4a63      	ldr	r2, [pc, #396]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80053b2:	f043 0301 	orr.w	r3, r3, #1
 80053b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80053b8:	e01c      	b.n	80053f4 <HAL_RCC_OscConfig+0x324>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	2b05      	cmp	r3, #5
 80053c0:	d10c      	bne.n	80053dc <HAL_RCC_OscConfig+0x30c>
 80053c2:	4b5f      	ldr	r3, [pc, #380]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80053c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c6:	4a5e      	ldr	r2, [pc, #376]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80053c8:	f043 0304 	orr.w	r3, r3, #4
 80053cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ce:	4b5c      	ldr	r3, [pc, #368]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80053d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d2:	4a5b      	ldr	r2, [pc, #364]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80053d4:	f043 0301 	orr.w	r3, r3, #1
 80053d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80053da:	e00b      	b.n	80053f4 <HAL_RCC_OscConfig+0x324>
 80053dc:	4b58      	ldr	r3, [pc, #352]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80053de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e0:	4a57      	ldr	r2, [pc, #348]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80053e2:	f023 0301 	bic.w	r3, r3, #1
 80053e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80053e8:	4b55      	ldr	r3, [pc, #340]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80053ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ec:	4a54      	ldr	r2, [pc, #336]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80053ee:	f023 0304 	bic.w	r3, r3, #4
 80053f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d015      	beq.n	8005428 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fc:	f7fd ff3a 	bl	8003274 <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005402:	e00a      	b.n	800541a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005404:	f7fd ff36 	bl	8003274 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005412:	4293      	cmp	r3, r2
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e0cb      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800541a:	4b49      	ldr	r3, [pc, #292]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 800541c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0ee      	beq.n	8005404 <HAL_RCC_OscConfig+0x334>
 8005426:	e014      	b.n	8005452 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005428:	f7fd ff24 	bl	8003274 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800542e:	e00a      	b.n	8005446 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005430:	f7fd ff20 	bl	8003274 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800543e:	4293      	cmp	r3, r2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e0b5      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005446:	4b3e      	ldr	r3, [pc, #248]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 8005448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1ee      	bne.n	8005430 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005452:	7dfb      	ldrb	r3, [r7, #23]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d105      	bne.n	8005464 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005458:	4b39      	ldr	r3, [pc, #228]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 800545a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545c:	4a38      	ldr	r2, [pc, #224]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 800545e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005462:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 80a1 	beq.w	80055b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800546e:	4b34      	ldr	r3, [pc, #208]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 030c 	and.w	r3, r3, #12
 8005476:	2b08      	cmp	r3, #8
 8005478:	d05c      	beq.n	8005534 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	2b02      	cmp	r3, #2
 8005480:	d141      	bne.n	8005506 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005482:	4b31      	ldr	r3, [pc, #196]	@ (8005548 <HAL_RCC_OscConfig+0x478>)
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005488:	f7fd fef4 	bl	8003274 <HAL_GetTick>
 800548c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005490:	f7fd fef0 	bl	8003274 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e087      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054a2:	4b27      	ldr	r3, [pc, #156]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1f0      	bne.n	8005490 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69da      	ldr	r2, [r3, #28]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054bc:	019b      	lsls	r3, r3, #6
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c4:	085b      	lsrs	r3, r3, #1
 80054c6:	3b01      	subs	r3, #1
 80054c8:	041b      	lsls	r3, r3, #16
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d0:	061b      	lsls	r3, r3, #24
 80054d2:	491b      	ldr	r1, [pc, #108]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005548 <HAL_RCC_OscConfig+0x478>)
 80054da:	2201      	movs	r2, #1
 80054dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054de:	f7fd fec9 	bl	8003274 <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e6:	f7fd fec5 	bl	8003274 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e05c      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f8:	4b11      	ldr	r3, [pc, #68]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCC_OscConfig+0x416>
 8005504:	e054      	b.n	80055b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005506:	4b10      	ldr	r3, [pc, #64]	@ (8005548 <HAL_RCC_OscConfig+0x478>)
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800550c:	f7fd feb2 	bl	8003274 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005514:	f7fd feae 	bl	8003274 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e045      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005526:	4b06      	ldr	r3, [pc, #24]	@ (8005540 <HAL_RCC_OscConfig+0x470>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0x444>
 8005532:	e03d      	b.n	80055b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d107      	bne.n	800554c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e038      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
 8005540:	40023800 	.word	0x40023800
 8005544:	40007000 	.word	0x40007000
 8005548:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800554c:	4b1b      	ldr	r3, [pc, #108]	@ (80055bc <HAL_RCC_OscConfig+0x4ec>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d028      	beq.n	80055ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005564:	429a      	cmp	r2, r3
 8005566:	d121      	bne.n	80055ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005572:	429a      	cmp	r2, r3
 8005574:	d11a      	bne.n	80055ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800557c:	4013      	ands	r3, r2
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005582:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005584:	4293      	cmp	r3, r2
 8005586:	d111      	bne.n	80055ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005592:	085b      	lsrs	r3, r3, #1
 8005594:	3b01      	subs	r3, #1
 8005596:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005598:	429a      	cmp	r2, r3
 800559a:	d107      	bne.n	80055ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d001      	beq.n	80055b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e000      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	40023800 	.word	0x40023800

080055c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e0cc      	b.n	800576e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055d4:	4b68      	ldr	r3, [pc, #416]	@ (8005778 <HAL_RCC_ClockConfig+0x1b8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 030f 	and.w	r3, r3, #15
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d90c      	bls.n	80055fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055e2:	4b65      	ldr	r3, [pc, #404]	@ (8005778 <HAL_RCC_ClockConfig+0x1b8>)
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ea:	4b63      	ldr	r3, [pc, #396]	@ (8005778 <HAL_RCC_ClockConfig+0x1b8>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d001      	beq.n	80055fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e0b8      	b.n	800576e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d020      	beq.n	800564a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b00      	cmp	r3, #0
 8005612:	d005      	beq.n	8005620 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005614:	4b59      	ldr	r3, [pc, #356]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	4a58      	ldr	r2, [pc, #352]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 800561a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800561e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0308 	and.w	r3, r3, #8
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800562c:	4b53      	ldr	r3, [pc, #332]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	4a52      	ldr	r2, [pc, #328]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005632:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005636:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005638:	4b50      	ldr	r3, [pc, #320]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	494d      	ldr	r1, [pc, #308]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005646:	4313      	orrs	r3, r2
 8005648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d044      	beq.n	80056e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d107      	bne.n	800566e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800565e:	4b47      	ldr	r3, [pc, #284]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d119      	bne.n	800569e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e07f      	b.n	800576e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b02      	cmp	r3, #2
 8005674:	d003      	beq.n	800567e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800567a:	2b03      	cmp	r3, #3
 800567c:	d107      	bne.n	800568e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800567e:	4b3f      	ldr	r3, [pc, #252]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d109      	bne.n	800569e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e06f      	b.n	800576e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800568e:	4b3b      	ldr	r3, [pc, #236]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e067      	b.n	800576e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800569e:	4b37      	ldr	r3, [pc, #220]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f023 0203 	bic.w	r2, r3, #3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	4934      	ldr	r1, [pc, #208]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056b0:	f7fd fde0 	bl	8003274 <HAL_GetTick>
 80056b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b6:	e00a      	b.n	80056ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056b8:	f7fd fddc 	bl	8003274 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e04f      	b.n	800576e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ce:	4b2b      	ldr	r3, [pc, #172]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 020c 	and.w	r2, r3, #12
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	429a      	cmp	r2, r3
 80056de:	d1eb      	bne.n	80056b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056e0:	4b25      	ldr	r3, [pc, #148]	@ (8005778 <HAL_RCC_ClockConfig+0x1b8>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 030f 	and.w	r3, r3, #15
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d20c      	bcs.n	8005708 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ee:	4b22      	ldr	r3, [pc, #136]	@ (8005778 <HAL_RCC_ClockConfig+0x1b8>)
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f6:	4b20      	ldr	r3, [pc, #128]	@ (8005778 <HAL_RCC_ClockConfig+0x1b8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	429a      	cmp	r2, r3
 8005702:	d001      	beq.n	8005708 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e032      	b.n	800576e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	d008      	beq.n	8005726 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005714:	4b19      	ldr	r3, [pc, #100]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	4916      	ldr	r1, [pc, #88]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005722:	4313      	orrs	r3, r2
 8005724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005732:	4b12      	ldr	r3, [pc, #72]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	490e      	ldr	r1, [pc, #56]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005742:	4313      	orrs	r3, r2
 8005744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005746:	f000 f821 	bl	800578c <HAL_RCC_GetSysClockFreq>
 800574a:	4602      	mov	r2, r0
 800574c:	4b0b      	ldr	r3, [pc, #44]	@ (800577c <HAL_RCC_ClockConfig+0x1bc>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	091b      	lsrs	r3, r3, #4
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	490a      	ldr	r1, [pc, #40]	@ (8005780 <HAL_RCC_ClockConfig+0x1c0>)
 8005758:	5ccb      	ldrb	r3, [r1, r3]
 800575a:	fa22 f303 	lsr.w	r3, r2, r3
 800575e:	4a09      	ldr	r2, [pc, #36]	@ (8005784 <HAL_RCC_ClockConfig+0x1c4>)
 8005760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005762:	4b09      	ldr	r3, [pc, #36]	@ (8005788 <HAL_RCC_ClockConfig+0x1c8>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f7fd fd40 	bl	80031ec <HAL_InitTick>

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	40023c00 	.word	0x40023c00
 800577c:	40023800 	.word	0x40023800
 8005780:	08009720 	.word	0x08009720
 8005784:	20000018 	.word	0x20000018
 8005788:	2000001c 	.word	0x2000001c

0800578c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800578c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005790:	b094      	sub	sp, #80	@ 0x50
 8005792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057a4:	4b79      	ldr	r3, [pc, #484]	@ (800598c <HAL_RCC_GetSysClockFreq+0x200>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 030c 	and.w	r3, r3, #12
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d00d      	beq.n	80057cc <HAL_RCC_GetSysClockFreq+0x40>
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	f200 80e1 	bhi.w	8005978 <HAL_RCC_GetSysClockFreq+0x1ec>
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <HAL_RCC_GetSysClockFreq+0x34>
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d003      	beq.n	80057c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80057be:	e0db      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057c0:	4b73      	ldr	r3, [pc, #460]	@ (8005990 <HAL_RCC_GetSysClockFreq+0x204>)
 80057c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057c4:	e0db      	b.n	800597e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057c6:	4b73      	ldr	r3, [pc, #460]	@ (8005994 <HAL_RCC_GetSysClockFreq+0x208>)
 80057c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057ca:	e0d8      	b.n	800597e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057cc:	4b6f      	ldr	r3, [pc, #444]	@ (800598c <HAL_RCC_GetSysClockFreq+0x200>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057d6:	4b6d      	ldr	r3, [pc, #436]	@ (800598c <HAL_RCC_GetSysClockFreq+0x200>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d063      	beq.n	80058aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057e2:	4b6a      	ldr	r3, [pc, #424]	@ (800598c <HAL_RCC_GetSysClockFreq+0x200>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	099b      	lsrs	r3, r3, #6
 80057e8:	2200      	movs	r2, #0
 80057ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80057ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80057f6:	2300      	movs	r3, #0
 80057f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80057fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80057fe:	4622      	mov	r2, r4
 8005800:	462b      	mov	r3, r5
 8005802:	f04f 0000 	mov.w	r0, #0
 8005806:	f04f 0100 	mov.w	r1, #0
 800580a:	0159      	lsls	r1, r3, #5
 800580c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005810:	0150      	lsls	r0, r2, #5
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4621      	mov	r1, r4
 8005818:	1a51      	subs	r1, r2, r1
 800581a:	6139      	str	r1, [r7, #16]
 800581c:	4629      	mov	r1, r5
 800581e:	eb63 0301 	sbc.w	r3, r3, r1
 8005822:	617b      	str	r3, [r7, #20]
 8005824:	f04f 0200 	mov.w	r2, #0
 8005828:	f04f 0300 	mov.w	r3, #0
 800582c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005830:	4659      	mov	r1, fp
 8005832:	018b      	lsls	r3, r1, #6
 8005834:	4651      	mov	r1, sl
 8005836:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800583a:	4651      	mov	r1, sl
 800583c:	018a      	lsls	r2, r1, #6
 800583e:	4651      	mov	r1, sl
 8005840:	ebb2 0801 	subs.w	r8, r2, r1
 8005844:	4659      	mov	r1, fp
 8005846:	eb63 0901 	sbc.w	r9, r3, r1
 800584a:	f04f 0200 	mov.w	r2, #0
 800584e:	f04f 0300 	mov.w	r3, #0
 8005852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800585a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800585e:	4690      	mov	r8, r2
 8005860:	4699      	mov	r9, r3
 8005862:	4623      	mov	r3, r4
 8005864:	eb18 0303 	adds.w	r3, r8, r3
 8005868:	60bb      	str	r3, [r7, #8]
 800586a:	462b      	mov	r3, r5
 800586c:	eb49 0303 	adc.w	r3, r9, r3
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	f04f 0200 	mov.w	r2, #0
 8005876:	f04f 0300 	mov.w	r3, #0
 800587a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800587e:	4629      	mov	r1, r5
 8005880:	024b      	lsls	r3, r1, #9
 8005882:	4621      	mov	r1, r4
 8005884:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005888:	4621      	mov	r1, r4
 800588a:	024a      	lsls	r2, r1, #9
 800588c:	4610      	mov	r0, r2
 800588e:	4619      	mov	r1, r3
 8005890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005892:	2200      	movs	r2, #0
 8005894:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005896:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005898:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800589c:	f7fa fd00 	bl	80002a0 <__aeabi_uldivmod>
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	4613      	mov	r3, r2
 80058a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058a8:	e058      	b.n	800595c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058aa:	4b38      	ldr	r3, [pc, #224]	@ (800598c <HAL_RCC_GetSysClockFreq+0x200>)
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	099b      	lsrs	r3, r3, #6
 80058b0:	2200      	movs	r2, #0
 80058b2:	4618      	mov	r0, r3
 80058b4:	4611      	mov	r1, r2
 80058b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058ba:	623b      	str	r3, [r7, #32]
 80058bc:	2300      	movs	r3, #0
 80058be:	627b      	str	r3, [r7, #36]	@ 0x24
 80058c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80058c4:	4642      	mov	r2, r8
 80058c6:	464b      	mov	r3, r9
 80058c8:	f04f 0000 	mov.w	r0, #0
 80058cc:	f04f 0100 	mov.w	r1, #0
 80058d0:	0159      	lsls	r1, r3, #5
 80058d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058d6:	0150      	lsls	r0, r2, #5
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4641      	mov	r1, r8
 80058de:	ebb2 0a01 	subs.w	sl, r2, r1
 80058e2:	4649      	mov	r1, r9
 80058e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80058e8:	f04f 0200 	mov.w	r2, #0
 80058ec:	f04f 0300 	mov.w	r3, #0
 80058f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80058f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80058f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058fc:	ebb2 040a 	subs.w	r4, r2, sl
 8005900:	eb63 050b 	sbc.w	r5, r3, fp
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	00eb      	lsls	r3, r5, #3
 800590e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005912:	00e2      	lsls	r2, r4, #3
 8005914:	4614      	mov	r4, r2
 8005916:	461d      	mov	r5, r3
 8005918:	4643      	mov	r3, r8
 800591a:	18e3      	adds	r3, r4, r3
 800591c:	603b      	str	r3, [r7, #0]
 800591e:	464b      	mov	r3, r9
 8005920:	eb45 0303 	adc.w	r3, r5, r3
 8005924:	607b      	str	r3, [r7, #4]
 8005926:	f04f 0200 	mov.w	r2, #0
 800592a:	f04f 0300 	mov.w	r3, #0
 800592e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005932:	4629      	mov	r1, r5
 8005934:	028b      	lsls	r3, r1, #10
 8005936:	4621      	mov	r1, r4
 8005938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800593c:	4621      	mov	r1, r4
 800593e:	028a      	lsls	r2, r1, #10
 8005940:	4610      	mov	r0, r2
 8005942:	4619      	mov	r1, r3
 8005944:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005946:	2200      	movs	r2, #0
 8005948:	61bb      	str	r3, [r7, #24]
 800594a:	61fa      	str	r2, [r7, #28]
 800594c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005950:	f7fa fca6 	bl	80002a0 <__aeabi_uldivmod>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	4613      	mov	r3, r2
 800595a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800595c:	4b0b      	ldr	r3, [pc, #44]	@ (800598c <HAL_RCC_GetSysClockFreq+0x200>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	0c1b      	lsrs	r3, r3, #16
 8005962:	f003 0303 	and.w	r3, r3, #3
 8005966:	3301      	adds	r3, #1
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800596c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800596e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005970:	fbb2 f3f3 	udiv	r3, r2, r3
 8005974:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005976:	e002      	b.n	800597e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005978:	4b05      	ldr	r3, [pc, #20]	@ (8005990 <HAL_RCC_GetSysClockFreq+0x204>)
 800597a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800597c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800597e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005980:	4618      	mov	r0, r3
 8005982:	3750      	adds	r7, #80	@ 0x50
 8005984:	46bd      	mov	sp, r7
 8005986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800598a:	bf00      	nop
 800598c:	40023800 	.word	0x40023800
 8005990:	00f42400 	.word	0x00f42400
 8005994:	007a1200 	.word	0x007a1200

08005998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800599c:	4b03      	ldr	r3, [pc, #12]	@ (80059ac <HAL_RCC_GetHCLKFreq+0x14>)
 800599e:	681b      	ldr	r3, [r3, #0]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	20000018 	.word	0x20000018

080059b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059b4:	f7ff fff0 	bl	8005998 <HAL_RCC_GetHCLKFreq>
 80059b8:	4602      	mov	r2, r0
 80059ba:	4b05      	ldr	r3, [pc, #20]	@ (80059d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	0a9b      	lsrs	r3, r3, #10
 80059c0:	f003 0307 	and.w	r3, r3, #7
 80059c4:	4903      	ldr	r1, [pc, #12]	@ (80059d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059c6:	5ccb      	ldrb	r3, [r1, r3]
 80059c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	40023800 	.word	0x40023800
 80059d4:	08009730 	.word	0x08009730

080059d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10b      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d105      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d075      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a0c:	4b91      	ldr	r3, [pc, #580]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a12:	f7fd fc2f 	bl	8003274 <HAL_GetTick>
 8005a16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a18:	e008      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a1a:	f7fd fc2b 	bl	8003274 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d901      	bls.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e189      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a2c:	4b8a      	ldr	r3, [pc, #552]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1f0      	bne.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d009      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	019a      	lsls	r2, r3, #6
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	071b      	lsls	r3, r3, #28
 8005a50:	4981      	ldr	r1, [pc, #516]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01f      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a64:	4b7c      	ldr	r3, [pc, #496]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a6a:	0f1b      	lsrs	r3, r3, #28
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	019a      	lsls	r2, r3, #6
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	061b      	lsls	r3, r3, #24
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	071b      	lsls	r3, r3, #28
 8005a84:	4974      	ldr	r1, [pc, #464]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005a8c:	4b72      	ldr	r3, [pc, #456]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a92:	f023 021f 	bic.w	r2, r3, #31
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	496e      	ldr	r1, [pc, #440]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00d      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	019a      	lsls	r2, r3, #6
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	061b      	lsls	r3, r3, #24
 8005abc:	431a      	orrs	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	071b      	lsls	r3, r3, #28
 8005ac4:	4964      	ldr	r1, [pc, #400]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005acc:	4b61      	ldr	r3, [pc, #388]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005ace:	2201      	movs	r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ad2:	f7fd fbcf 	bl	8003274 <HAL_GetTick>
 8005ad6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ad8:	e008      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ada:	f7fd fbcb 	bl	8003274 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d901      	bls.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e129      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005aec:	4b5a      	ldr	r3, [pc, #360]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d0f0      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d105      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d079      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005b10:	4b52      	ldr	r3, [pc, #328]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b16:	f7fd fbad 	bl	8003274 <HAL_GetTick>
 8005b1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b1c:	e008      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b1e:	f7fd fba9 	bl	8003274 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e107      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b30:	4b49      	ldr	r3, [pc, #292]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b3c:	d0ef      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d020      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b4a:	4b43      	ldr	r3, [pc, #268]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b50:	0f1b      	lsrs	r3, r3, #28
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	019a      	lsls	r2, r3, #6
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	061b      	lsls	r3, r3, #24
 8005b64:	431a      	orrs	r2, r3
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	071b      	lsls	r3, r3, #28
 8005b6a:	493b      	ldr	r1, [pc, #236]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b72:	4b39      	ldr	r3, [pc, #228]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b78:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	021b      	lsls	r3, r3, #8
 8005b84:	4934      	ldr	r1, [pc, #208]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0308 	and.w	r3, r3, #8
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01e      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b98:	4b2f      	ldr	r3, [pc, #188]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9e:	0e1b      	lsrs	r3, r3, #24
 8005ba0:	f003 030f 	and.w	r3, r3, #15
 8005ba4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	019a      	lsls	r2, r3, #6
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	061b      	lsls	r3, r3, #24
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	071b      	lsls	r3, r3, #28
 8005bb8:	4927      	ldr	r1, [pc, #156]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005bc0:	4b25      	ldr	r3, [pc, #148]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bc6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bce:	4922      	ldr	r1, [pc, #136]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005bd6:	4b21      	ldr	r3, [pc, #132]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005bd8:	2201      	movs	r2, #1
 8005bda:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bdc:	f7fd fb4a 	bl	8003274 <HAL_GetTick>
 8005be0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005be4:	f7fd fb46 	bl	8003274 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e0a4      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bf6:	4b18      	ldr	r3, [pc, #96]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c02:	d1ef      	bne.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0320 	and.w	r3, r3, #32
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 808b 	beq.w	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	4b10      	ldr	r3, [pc, #64]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c1a:	4a0f      	ldr	r2, [pc, #60]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c22:	4b0d      	ldr	r3, [pc, #52]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a0b      	ldr	r2, [pc, #44]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c38:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c3a:	f7fd fb1b 	bl	8003274 <HAL_GetTick>
 8005c3e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005c40:	e010      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c42:	f7fd fb17 	bl	8003274 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d909      	bls.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e075      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005c54:	42470068 	.word	0x42470068
 8005c58:	40023800 	.word	0x40023800
 8005c5c:	42470070 	.word	0x42470070
 8005c60:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005c64:	4b38      	ldr	r3, [pc, #224]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d0e8      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c70:	4b36      	ldr	r3, [pc, #216]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c78:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d02f      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d028      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c96:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c98:	4b2d      	ldr	r3, [pc, #180]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005ca4:	4a29      	ldr	r2, [pc, #164]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005caa:	4b28      	ldr	r3, [pc, #160]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d114      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005cb6:	f7fd fadd 	bl	8003274 <HAL_GetTick>
 8005cba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cbc:	e00a      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cbe:	f7fd fad9 	bl	8003274 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e035      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0ee      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ce8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cec:	d10d      	bne.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005cee:	4b17      	ldr	r3, [pc, #92]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005cfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d02:	4912      	ldr	r1, [pc, #72]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	608b      	str	r3, [r1, #8]
 8005d08:	e005      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005d0a:	4b10      	ldr	r3, [pc, #64]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d10:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005d14:	6093      	str	r3, [r2, #8]
 8005d16:	4b0d      	ldr	r3, [pc, #52]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d18:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d22:	490a      	ldr	r1, [pc, #40]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0310 	and.w	r3, r3, #16
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d004      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005d3a:	4b06      	ldr	r3, [pc, #24]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005d3c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3718      	adds	r7, #24
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	40007000 	.word	0x40007000
 8005d4c:	40023800 	.word	0x40023800
 8005d50:	42470e40 	.word	0x42470e40
 8005d54:	424711e0 	.word	0x424711e0

08005d58 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e01c      	b.n	8005da4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	795b      	ldrb	r3, [r3, #5]
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d105      	bne.n	8005d80 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fc fd0a 	bl	8002794 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f042 0204 	orr.w	r2, r2, #4
 8005d94:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	791b      	ldrb	r3, [r3, #4]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d101      	bne.n	8005dc6 <HAL_RNG_GenerateRandomNumber+0x1a>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e044      	b.n	8005e50 <HAL_RNG_GenerateRandomNumber+0xa4>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	795b      	ldrb	r3, [r3, #5]
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d133      	bne.n	8005e3e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ddc:	f7fd fa4a 	bl	8003274 <HAL_GetTick>
 8005de0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005de2:	e018      	b.n	8005e16 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005de4:	f7fd fa46 	bl	8003274 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d911      	bls.n	8005e16 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d00a      	beq.n	8005e16 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e01c      	b.n	8005e50 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d1df      	bne.n	8005de4 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689a      	ldr	r2, [r3, #8]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	715a      	strb	r2, [r3, #5]
 8005e3c:	e004      	b.n	8005e48 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2204      	movs	r2, #4
 8005e42:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	711a      	strb	r2, [r3, #4]

  return status;
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e07b      	b.n	8005f62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d108      	bne.n	8005e84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e7a:	d009      	beq.n	8005e90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	61da      	str	r2, [r3, #28]
 8005e82:	e005      	b.n	8005e90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d106      	bne.n	8005eb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7fc fc94 	bl	80027d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ec6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	431a      	orrs	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f00:	431a      	orrs	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f14:	ea42 0103 	orr.w	r1, r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f1c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	430a      	orrs	r2, r1
 8005f26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	0c1b      	lsrs	r3, r3, #16
 8005f2e:	f003 0104 	and.w	r1, r3, #4
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f36:	f003 0210 	and.w	r2, r3, #16
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	69da      	ldr	r2, [r3, #28]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b082      	sub	sp, #8
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e01a      	b.n	8005fb2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f92:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7fc fc67 	bl	8002868 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b088      	sub	sp, #32
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	60f8      	str	r0, [r7, #12]
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	603b      	str	r3, [r7, #0]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fca:	f7fd f953 	bl	8003274 <HAL_GetTick>
 8005fce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005fd0:	88fb      	ldrh	r3, [r7, #6]
 8005fd2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d001      	beq.n	8005fe4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e12a      	b.n	800623a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <HAL_SPI_Transmit+0x36>
 8005fea:	88fb      	ldrh	r3, [r7, #6]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e122      	b.n	800623a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d101      	bne.n	8006002 <HAL_SPI_Transmit+0x48>
 8005ffe:	2302      	movs	r3, #2
 8006000:	e11b      	b.n	800623a <HAL_SPI_Transmit+0x280>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2203      	movs	r2, #3
 800600e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	88fa      	ldrh	r2, [r7, #6]
 8006022:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	88fa      	ldrh	r2, [r7, #6]
 8006028:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006050:	d10f      	bne.n	8006072 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006060:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006070:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800607c:	2b40      	cmp	r3, #64	@ 0x40
 800607e:	d007      	beq.n	8006090 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800608e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006098:	d152      	bne.n	8006140 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d002      	beq.n	80060a8 <HAL_SPI_Transmit+0xee>
 80060a2:	8b7b      	ldrh	r3, [r7, #26]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d145      	bne.n	8006134 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ac:	881a      	ldrh	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b8:	1c9a      	adds	r2, r3, #2
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	3b01      	subs	r3, #1
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060cc:	e032      	b.n	8006134 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d112      	bne.n	8006102 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060e0:	881a      	ldrh	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ec:	1c9a      	adds	r2, r3, #2
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	3b01      	subs	r3, #1
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006100:	e018      	b.n	8006134 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006102:	f7fd f8b7 	bl	8003274 <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	429a      	cmp	r2, r3
 8006110:	d803      	bhi.n	800611a <HAL_SPI_Transmit+0x160>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006118:	d102      	bne.n	8006120 <HAL_SPI_Transmit+0x166>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d109      	bne.n	8006134 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e082      	b.n	800623a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1c7      	bne.n	80060ce <HAL_SPI_Transmit+0x114>
 800613e:	e053      	b.n	80061e8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <HAL_SPI_Transmit+0x194>
 8006148:	8b7b      	ldrh	r3, [r7, #26]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d147      	bne.n	80061de <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	330c      	adds	r3, #12
 8006158:	7812      	ldrb	r2, [r2, #0]
 800615a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006160:	1c5a      	adds	r2, r3, #1
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800616a:	b29b      	uxth	r3, r3
 800616c:	3b01      	subs	r3, #1
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006174:	e033      	b.n	80061de <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b02      	cmp	r3, #2
 8006182:	d113      	bne.n	80061ac <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	330c      	adds	r3, #12
 800618e:	7812      	ldrb	r2, [r2, #0]
 8006190:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80061aa:	e018      	b.n	80061de <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061ac:	f7fd f862 	bl	8003274 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d803      	bhi.n	80061c4 <HAL_SPI_Transmit+0x20a>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061c2:	d102      	bne.n	80061ca <HAL_SPI_Transmit+0x210>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d109      	bne.n	80061de <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e02d      	b.n	800623a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1c6      	bne.n	8006176 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061e8:	69fa      	ldr	r2, [r7, #28]
 80061ea:	6839      	ldr	r1, [r7, #0]
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 f8bf 	bl	8006370 <SPI_EndRxTxTransaction>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2220      	movs	r2, #32
 80061fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10a      	bne.n	800621c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006206:	2300      	movs	r3, #0
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	617b      	str	r3, [r7, #20]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	617b      	str	r3, [r7, #20]
 800621a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e000      	b.n	800623a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006238:	2300      	movs	r3, #0
  }
}
 800623a:	4618      	mov	r0, r3
 800623c:	3720      	adds	r7, #32
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006250:	b2db      	uxtb	r3, r3
}
 8006252:	4618      	mov	r0, r3
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
	...

08006260 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	603b      	str	r3, [r7, #0]
 800626c:	4613      	mov	r3, r2
 800626e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006270:	f7fd f800 	bl	8003274 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006278:	1a9b      	subs	r3, r3, r2
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	4413      	add	r3, r2
 800627e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006280:	f7fc fff8 	bl	8003274 <HAL_GetTick>
 8006284:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006286:	4b39      	ldr	r3, [pc, #228]	@ (800636c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	015b      	lsls	r3, r3, #5
 800628c:	0d1b      	lsrs	r3, r3, #20
 800628e:	69fa      	ldr	r2, [r7, #28]
 8006290:	fb02 f303 	mul.w	r3, r2, r3
 8006294:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006296:	e054      	b.n	8006342 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800629e:	d050      	beq.n	8006342 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062a0:	f7fc ffe8 	bl	8003274 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	69fa      	ldr	r2, [r7, #28]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d902      	bls.n	80062b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d13d      	bne.n	8006332 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80062c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062ce:	d111      	bne.n	80062f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062d8:	d004      	beq.n	80062e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062e2:	d107      	bne.n	80062f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062fc:	d10f      	bne.n	800631e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800631c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e017      	b.n	8006362 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006338:	2300      	movs	r3, #0
 800633a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	3b01      	subs	r3, #1
 8006340:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689a      	ldr	r2, [r3, #8]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	4013      	ands	r3, r2
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	429a      	cmp	r2, r3
 8006350:	bf0c      	ite	eq
 8006352:	2301      	moveq	r3, #1
 8006354:	2300      	movne	r3, #0
 8006356:	b2db      	uxtb	r3, r3
 8006358:	461a      	mov	r2, r3
 800635a:	79fb      	ldrb	r3, [r7, #7]
 800635c:	429a      	cmp	r2, r3
 800635e:	d19b      	bne.n	8006298 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3720      	adds	r7, #32
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	20000018 	.word	0x20000018

08006370 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b088      	sub	sp, #32
 8006374:	af02      	add	r7, sp, #8
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2201      	movs	r2, #1
 8006384:	2102      	movs	r1, #2
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f7ff ff6a 	bl	8006260 <SPI_WaitFlagStateUntilTimeout>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d007      	beq.n	80063a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006396:	f043 0220 	orr.w	r2, r3, #32
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e032      	b.n	8006408 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006410 <SPI_EndRxTxTransaction+0xa0>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a1b      	ldr	r2, [pc, #108]	@ (8006414 <SPI_EndRxTxTransaction+0xa4>)
 80063a8:	fba2 2303 	umull	r2, r3, r2, r3
 80063ac:	0d5b      	lsrs	r3, r3, #21
 80063ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80063b2:	fb02 f303 	mul.w	r3, r2, r3
 80063b6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063c0:	d112      	bne.n	80063e8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2200      	movs	r2, #0
 80063ca:	2180      	movs	r1, #128	@ 0x80
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f7ff ff47 	bl	8006260 <SPI_WaitFlagStateUntilTimeout>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d016      	beq.n	8006406 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063dc:	f043 0220 	orr.w	r2, r3, #32
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e00f      	b.n	8006408 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	3b01      	subs	r3, #1
 80063f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063fe:	2b80      	cmp	r3, #128	@ 0x80
 8006400:	d0f2      	beq.n	80063e8 <SPI_EndRxTxTransaction+0x78>
 8006402:	e000      	b.n	8006406 <SPI_EndRxTxTransaction+0x96>
        break;
 8006404:	bf00      	nop
  }

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3718      	adds	r7, #24
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	20000018 	.word	0x20000018
 8006414:	165e9f81 	.word	0x165e9f81

08006418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e041      	b.n	80064ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d106      	bne.n	8006444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7fc fa30 	bl	80028a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3304      	adds	r3, #4
 8006454:	4619      	mov	r1, r3
 8006456:	4610      	mov	r0, r2
 8006458:	f000 f8f4 	bl	8006644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b084      	sub	sp, #16
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064c0:	2300      	movs	r3, #0
 80064c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d101      	bne.n	80064d2 <HAL_TIM_ConfigClockSource+0x1c>
 80064ce:	2302      	movs	r3, #2
 80064d0:	e0b4      	b.n	800663c <HAL_TIM_ConfigClockSource+0x186>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2202      	movs	r2, #2
 80064de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80064f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064f8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800650a:	d03e      	beq.n	800658a <HAL_TIM_ConfigClockSource+0xd4>
 800650c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006510:	f200 8087 	bhi.w	8006622 <HAL_TIM_ConfigClockSource+0x16c>
 8006514:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006518:	f000 8086 	beq.w	8006628 <HAL_TIM_ConfigClockSource+0x172>
 800651c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006520:	d87f      	bhi.n	8006622 <HAL_TIM_ConfigClockSource+0x16c>
 8006522:	2b70      	cmp	r3, #112	@ 0x70
 8006524:	d01a      	beq.n	800655c <HAL_TIM_ConfigClockSource+0xa6>
 8006526:	2b70      	cmp	r3, #112	@ 0x70
 8006528:	d87b      	bhi.n	8006622 <HAL_TIM_ConfigClockSource+0x16c>
 800652a:	2b60      	cmp	r3, #96	@ 0x60
 800652c:	d050      	beq.n	80065d0 <HAL_TIM_ConfigClockSource+0x11a>
 800652e:	2b60      	cmp	r3, #96	@ 0x60
 8006530:	d877      	bhi.n	8006622 <HAL_TIM_ConfigClockSource+0x16c>
 8006532:	2b50      	cmp	r3, #80	@ 0x50
 8006534:	d03c      	beq.n	80065b0 <HAL_TIM_ConfigClockSource+0xfa>
 8006536:	2b50      	cmp	r3, #80	@ 0x50
 8006538:	d873      	bhi.n	8006622 <HAL_TIM_ConfigClockSource+0x16c>
 800653a:	2b40      	cmp	r3, #64	@ 0x40
 800653c:	d058      	beq.n	80065f0 <HAL_TIM_ConfigClockSource+0x13a>
 800653e:	2b40      	cmp	r3, #64	@ 0x40
 8006540:	d86f      	bhi.n	8006622 <HAL_TIM_ConfigClockSource+0x16c>
 8006542:	2b30      	cmp	r3, #48	@ 0x30
 8006544:	d064      	beq.n	8006610 <HAL_TIM_ConfigClockSource+0x15a>
 8006546:	2b30      	cmp	r3, #48	@ 0x30
 8006548:	d86b      	bhi.n	8006622 <HAL_TIM_ConfigClockSource+0x16c>
 800654a:	2b20      	cmp	r3, #32
 800654c:	d060      	beq.n	8006610 <HAL_TIM_ConfigClockSource+0x15a>
 800654e:	2b20      	cmp	r3, #32
 8006550:	d867      	bhi.n	8006622 <HAL_TIM_ConfigClockSource+0x16c>
 8006552:	2b00      	cmp	r3, #0
 8006554:	d05c      	beq.n	8006610 <HAL_TIM_ConfigClockSource+0x15a>
 8006556:	2b10      	cmp	r3, #16
 8006558:	d05a      	beq.n	8006610 <HAL_TIM_ConfigClockSource+0x15a>
 800655a:	e062      	b.n	8006622 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800656c:	f000 f990 	bl	8006890 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800657e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	609a      	str	r2, [r3, #8]
      break;
 8006588:	e04f      	b.n	800662a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800659a:	f000 f979 	bl	8006890 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065ac:	609a      	str	r2, [r3, #8]
      break;
 80065ae:	e03c      	b.n	800662a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065bc:	461a      	mov	r2, r3
 80065be:	f000 f8ed 	bl	800679c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2150      	movs	r1, #80	@ 0x50
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 f946 	bl	800685a <TIM_ITRx_SetConfig>
      break;
 80065ce:	e02c      	b.n	800662a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065dc:	461a      	mov	r2, r3
 80065de:	f000 f90c 	bl	80067fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2160      	movs	r1, #96	@ 0x60
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 f936 	bl	800685a <TIM_ITRx_SetConfig>
      break;
 80065ee:	e01c      	b.n	800662a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065fc:	461a      	mov	r2, r3
 80065fe:	f000 f8cd 	bl	800679c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2140      	movs	r1, #64	@ 0x40
 8006608:	4618      	mov	r0, r3
 800660a:	f000 f926 	bl	800685a <TIM_ITRx_SetConfig>
      break;
 800660e:	e00c      	b.n	800662a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4619      	mov	r1, r3
 800661a:	4610      	mov	r0, r2
 800661c:	f000 f91d 	bl	800685a <TIM_ITRx_SetConfig>
      break;
 8006620:	e003      	b.n	800662a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	73fb      	strb	r3, [r7, #15]
      break;
 8006626:	e000      	b.n	800662a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006628:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800663a:	7bfb      	ldrb	r3, [r7, #15]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a46      	ldr	r2, [pc, #280]	@ (8006770 <TIM_Base_SetConfig+0x12c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d013      	beq.n	8006684 <TIM_Base_SetConfig+0x40>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006662:	d00f      	beq.n	8006684 <TIM_Base_SetConfig+0x40>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a43      	ldr	r2, [pc, #268]	@ (8006774 <TIM_Base_SetConfig+0x130>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d00b      	beq.n	8006684 <TIM_Base_SetConfig+0x40>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a42      	ldr	r2, [pc, #264]	@ (8006778 <TIM_Base_SetConfig+0x134>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d007      	beq.n	8006684 <TIM_Base_SetConfig+0x40>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a41      	ldr	r2, [pc, #260]	@ (800677c <TIM_Base_SetConfig+0x138>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d003      	beq.n	8006684 <TIM_Base_SetConfig+0x40>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a40      	ldr	r2, [pc, #256]	@ (8006780 <TIM_Base_SetConfig+0x13c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d108      	bne.n	8006696 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800668a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a35      	ldr	r2, [pc, #212]	@ (8006770 <TIM_Base_SetConfig+0x12c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d02b      	beq.n	80066f6 <TIM_Base_SetConfig+0xb2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066a4:	d027      	beq.n	80066f6 <TIM_Base_SetConfig+0xb2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a32      	ldr	r2, [pc, #200]	@ (8006774 <TIM_Base_SetConfig+0x130>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d023      	beq.n	80066f6 <TIM_Base_SetConfig+0xb2>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a31      	ldr	r2, [pc, #196]	@ (8006778 <TIM_Base_SetConfig+0x134>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d01f      	beq.n	80066f6 <TIM_Base_SetConfig+0xb2>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a30      	ldr	r2, [pc, #192]	@ (800677c <TIM_Base_SetConfig+0x138>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d01b      	beq.n	80066f6 <TIM_Base_SetConfig+0xb2>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a2f      	ldr	r2, [pc, #188]	@ (8006780 <TIM_Base_SetConfig+0x13c>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d017      	beq.n	80066f6 <TIM_Base_SetConfig+0xb2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a2e      	ldr	r2, [pc, #184]	@ (8006784 <TIM_Base_SetConfig+0x140>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d013      	beq.n	80066f6 <TIM_Base_SetConfig+0xb2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006788 <TIM_Base_SetConfig+0x144>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d00f      	beq.n	80066f6 <TIM_Base_SetConfig+0xb2>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a2c      	ldr	r2, [pc, #176]	@ (800678c <TIM_Base_SetConfig+0x148>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d00b      	beq.n	80066f6 <TIM_Base_SetConfig+0xb2>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a2b      	ldr	r2, [pc, #172]	@ (8006790 <TIM_Base_SetConfig+0x14c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d007      	beq.n	80066f6 <TIM_Base_SetConfig+0xb2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a2a      	ldr	r2, [pc, #168]	@ (8006794 <TIM_Base_SetConfig+0x150>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d003      	beq.n	80066f6 <TIM_Base_SetConfig+0xb2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a29      	ldr	r2, [pc, #164]	@ (8006798 <TIM_Base_SetConfig+0x154>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d108      	bne.n	8006708 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	4313      	orrs	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a10      	ldr	r2, [pc, #64]	@ (8006770 <TIM_Base_SetConfig+0x12c>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d003      	beq.n	800673c <TIM_Base_SetConfig+0xf8>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a12      	ldr	r2, [pc, #72]	@ (8006780 <TIM_Base_SetConfig+0x13c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d103      	bne.n	8006744 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	691a      	ldr	r2, [r3, #16]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b01      	cmp	r3, #1
 8006754:	d105      	bne.n	8006762 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	f023 0201 	bic.w	r2, r3, #1
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	611a      	str	r2, [r3, #16]
  }
}
 8006762:	bf00      	nop
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	40010000 	.word	0x40010000
 8006774:	40000400 	.word	0x40000400
 8006778:	40000800 	.word	0x40000800
 800677c:	40000c00 	.word	0x40000c00
 8006780:	40010400 	.word	0x40010400
 8006784:	40014000 	.word	0x40014000
 8006788:	40014400 	.word	0x40014400
 800678c:	40014800 	.word	0x40014800
 8006790:	40001800 	.word	0x40001800
 8006794:	40001c00 	.word	0x40001c00
 8006798:	40002000 	.word	0x40002000

0800679c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	f023 0201 	bic.w	r2, r3, #1
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	011b      	lsls	r3, r3, #4
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f023 030a 	bic.w	r3, r3, #10
 80067d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	4313      	orrs	r3, r2
 80067e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	621a      	str	r2, [r3, #32]
}
 80067ee:	bf00      	nop
 80067f0:	371c      	adds	r7, #28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b087      	sub	sp, #28
 80067fe:	af00      	add	r7, sp, #0
 8006800:	60f8      	str	r0, [r7, #12]
 8006802:	60b9      	str	r1, [r7, #8]
 8006804:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	f023 0210 	bic.w	r2, r3, #16
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006824:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	031b      	lsls	r3, r3, #12
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	4313      	orrs	r3, r2
 800682e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006836:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	011b      	lsls	r3, r3, #4
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	4313      	orrs	r3, r2
 8006840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	621a      	str	r2, [r3, #32]
}
 800684e:	bf00      	nop
 8006850:	371c      	adds	r7, #28
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800685a:	b480      	push	{r7}
 800685c:	b085      	sub	sp, #20
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006870:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	4313      	orrs	r3, r2
 8006878:	f043 0307 	orr.w	r3, r3, #7
 800687c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	609a      	str	r2, [r3, #8]
}
 8006884:	bf00      	nop
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006890:	b480      	push	{r7}
 8006892:	b087      	sub	sp, #28
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	021a      	lsls	r2, r3, #8
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	431a      	orrs	r2, r3
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	609a      	str	r2, [r3, #8]
}
 80068c4:	bf00      	nop
 80068c6:	371c      	adds	r7, #28
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d101      	bne.n	80068e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068e4:	2302      	movs	r3, #2
 80068e6:	e05a      	b.n	800699e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800690e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a21      	ldr	r2, [pc, #132]	@ (80069ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d022      	beq.n	8006972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006934:	d01d      	beq.n	8006972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a1d      	ldr	r2, [pc, #116]	@ (80069b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d018      	beq.n	8006972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a1b      	ldr	r2, [pc, #108]	@ (80069b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d013      	beq.n	8006972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a1a      	ldr	r2, [pc, #104]	@ (80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d00e      	beq.n	8006972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a18      	ldr	r2, [pc, #96]	@ (80069bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d009      	beq.n	8006972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a17      	ldr	r2, [pc, #92]	@ (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d004      	beq.n	8006972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a15      	ldr	r2, [pc, #84]	@ (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d10c      	bne.n	800698c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006978:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	4313      	orrs	r3, r2
 8006982:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	40010000 	.word	0x40010000
 80069b0:	40000400 	.word	0x40000400
 80069b4:	40000800 	.word	0x40000800
 80069b8:	40000c00 	.word	0x40000c00
 80069bc:	40010400 	.word	0x40010400
 80069c0:	40014000 	.word	0x40014000
 80069c4:	40001800 	.word	0x40001800

080069c8 <findslot>:
 80069c8:	4b0a      	ldr	r3, [pc, #40]	@ (80069f4 <findslot+0x2c>)
 80069ca:	b510      	push	{r4, lr}
 80069cc:	4604      	mov	r4, r0
 80069ce:	6818      	ldr	r0, [r3, #0]
 80069d0:	b118      	cbz	r0, 80069da <findslot+0x12>
 80069d2:	6a03      	ldr	r3, [r0, #32]
 80069d4:	b90b      	cbnz	r3, 80069da <findslot+0x12>
 80069d6:	f000 fb29 	bl	800702c <__sinit>
 80069da:	2c13      	cmp	r4, #19
 80069dc:	d807      	bhi.n	80069ee <findslot+0x26>
 80069de:	4806      	ldr	r0, [pc, #24]	@ (80069f8 <findslot+0x30>)
 80069e0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80069e4:	3201      	adds	r2, #1
 80069e6:	d002      	beq.n	80069ee <findslot+0x26>
 80069e8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80069ec:	bd10      	pop	{r4, pc}
 80069ee:	2000      	movs	r0, #0
 80069f0:	e7fc      	b.n	80069ec <findslot+0x24>
 80069f2:	bf00      	nop
 80069f4:	20000038 	.word	0x20000038
 80069f8:	20025c38 	.word	0x20025c38

080069fc <error>:
 80069fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fe:	4604      	mov	r4, r0
 8006a00:	f000 fb52 	bl	80070a8 <__errno>
 8006a04:	2613      	movs	r6, #19
 8006a06:	4605      	mov	r5, r0
 8006a08:	2700      	movs	r7, #0
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	4639      	mov	r1, r7
 8006a0e:	beab      	bkpt	0x00ab
 8006a10:	4606      	mov	r6, r0
 8006a12:	602e      	str	r6, [r5, #0]
 8006a14:	4620      	mov	r0, r4
 8006a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a18 <checkerror>:
 8006a18:	1c43      	adds	r3, r0, #1
 8006a1a:	d101      	bne.n	8006a20 <checkerror+0x8>
 8006a1c:	f7ff bfee 	b.w	80069fc <error>
 8006a20:	4770      	bx	lr

08006a22 <_swiread>:
 8006a22:	b530      	push	{r4, r5, lr}
 8006a24:	b085      	sub	sp, #20
 8006a26:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006a2a:	9203      	str	r2, [sp, #12]
 8006a2c:	2406      	movs	r4, #6
 8006a2e:	ad01      	add	r5, sp, #4
 8006a30:	4620      	mov	r0, r4
 8006a32:	4629      	mov	r1, r5
 8006a34:	beab      	bkpt	0x00ab
 8006a36:	4604      	mov	r4, r0
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f7ff ffed 	bl	8006a18 <checkerror>
 8006a3e:	b005      	add	sp, #20
 8006a40:	bd30      	pop	{r4, r5, pc}

08006a42 <_read>:
 8006a42:	b570      	push	{r4, r5, r6, lr}
 8006a44:	460e      	mov	r6, r1
 8006a46:	4614      	mov	r4, r2
 8006a48:	f7ff ffbe 	bl	80069c8 <findslot>
 8006a4c:	4605      	mov	r5, r0
 8006a4e:	b930      	cbnz	r0, 8006a5e <_read+0x1c>
 8006a50:	f000 fb2a 	bl	80070a8 <__errno>
 8006a54:	2309      	movs	r3, #9
 8006a56:	6003      	str	r3, [r0, #0]
 8006a58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a5c:	bd70      	pop	{r4, r5, r6, pc}
 8006a5e:	6800      	ldr	r0, [r0, #0]
 8006a60:	4622      	mov	r2, r4
 8006a62:	4631      	mov	r1, r6
 8006a64:	f7ff ffdd 	bl	8006a22 <_swiread>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	d0f5      	beq.n	8006a58 <_read+0x16>
 8006a6c:	686b      	ldr	r3, [r5, #4]
 8006a6e:	1a20      	subs	r0, r4, r0
 8006a70:	4403      	add	r3, r0
 8006a72:	606b      	str	r3, [r5, #4]
 8006a74:	e7f2      	b.n	8006a5c <_read+0x1a>

08006a76 <_swilseek>:
 8006a76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a78:	460c      	mov	r4, r1
 8006a7a:	4616      	mov	r6, r2
 8006a7c:	f7ff ffa4 	bl	80069c8 <findslot>
 8006a80:	4605      	mov	r5, r0
 8006a82:	b940      	cbnz	r0, 8006a96 <_swilseek+0x20>
 8006a84:	f000 fb10 	bl	80070a8 <__errno>
 8006a88:	2309      	movs	r3, #9
 8006a8a:	6003      	str	r3, [r0, #0]
 8006a8c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006a90:	4620      	mov	r0, r4
 8006a92:	b003      	add	sp, #12
 8006a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a96:	2e02      	cmp	r6, #2
 8006a98:	d903      	bls.n	8006aa2 <_swilseek+0x2c>
 8006a9a:	f000 fb05 	bl	80070a8 <__errno>
 8006a9e:	2316      	movs	r3, #22
 8006aa0:	e7f3      	b.n	8006a8a <_swilseek+0x14>
 8006aa2:	2e01      	cmp	r6, #1
 8006aa4:	d112      	bne.n	8006acc <_swilseek+0x56>
 8006aa6:	6843      	ldr	r3, [r0, #4]
 8006aa8:	18e4      	adds	r4, r4, r3
 8006aaa:	d4f6      	bmi.n	8006a9a <_swilseek+0x24>
 8006aac:	682b      	ldr	r3, [r5, #0]
 8006aae:	260a      	movs	r6, #10
 8006ab0:	e9cd 3400 	strd	r3, r4, [sp]
 8006ab4:	466f      	mov	r7, sp
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	4639      	mov	r1, r7
 8006aba:	beab      	bkpt	0x00ab
 8006abc:	4606      	mov	r6, r0
 8006abe:	4630      	mov	r0, r6
 8006ac0:	f7ff ffaa 	bl	8006a18 <checkerror>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	dbe1      	blt.n	8006a8c <_swilseek+0x16>
 8006ac8:	606c      	str	r4, [r5, #4]
 8006aca:	e7e1      	b.n	8006a90 <_swilseek+0x1a>
 8006acc:	2e02      	cmp	r6, #2
 8006ace:	6803      	ldr	r3, [r0, #0]
 8006ad0:	d1ec      	bne.n	8006aac <_swilseek+0x36>
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	260c      	movs	r6, #12
 8006ad6:	466f      	mov	r7, sp
 8006ad8:	4630      	mov	r0, r6
 8006ada:	4639      	mov	r1, r7
 8006adc:	beab      	bkpt	0x00ab
 8006ade:	4606      	mov	r6, r0
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	f7ff ff99 	bl	8006a18 <checkerror>
 8006ae6:	1c43      	adds	r3, r0, #1
 8006ae8:	d0d0      	beq.n	8006a8c <_swilseek+0x16>
 8006aea:	4404      	add	r4, r0
 8006aec:	e7de      	b.n	8006aac <_swilseek+0x36>

08006aee <_lseek>:
 8006aee:	f7ff bfc2 	b.w	8006a76 <_swilseek>

08006af2 <_swiwrite>:
 8006af2:	b530      	push	{r4, r5, lr}
 8006af4:	b085      	sub	sp, #20
 8006af6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006afa:	9203      	str	r2, [sp, #12]
 8006afc:	2405      	movs	r4, #5
 8006afe:	ad01      	add	r5, sp, #4
 8006b00:	4620      	mov	r0, r4
 8006b02:	4629      	mov	r1, r5
 8006b04:	beab      	bkpt	0x00ab
 8006b06:	4604      	mov	r4, r0
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f7ff ff85 	bl	8006a18 <checkerror>
 8006b0e:	b005      	add	sp, #20
 8006b10:	bd30      	pop	{r4, r5, pc}

08006b12 <_write>:
 8006b12:	b570      	push	{r4, r5, r6, lr}
 8006b14:	460e      	mov	r6, r1
 8006b16:	4615      	mov	r5, r2
 8006b18:	f7ff ff56 	bl	80069c8 <findslot>
 8006b1c:	4604      	mov	r4, r0
 8006b1e:	b930      	cbnz	r0, 8006b2e <_write+0x1c>
 8006b20:	f000 fac2 	bl	80070a8 <__errno>
 8006b24:	2309      	movs	r3, #9
 8006b26:	6003      	str	r3, [r0, #0]
 8006b28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b2c:	bd70      	pop	{r4, r5, r6, pc}
 8006b2e:	6800      	ldr	r0, [r0, #0]
 8006b30:	462a      	mov	r2, r5
 8006b32:	4631      	mov	r1, r6
 8006b34:	f7ff ffdd 	bl	8006af2 <_swiwrite>
 8006b38:	1e03      	subs	r3, r0, #0
 8006b3a:	dbf5      	blt.n	8006b28 <_write+0x16>
 8006b3c:	6862      	ldr	r2, [r4, #4]
 8006b3e:	1ae8      	subs	r0, r5, r3
 8006b40:	4402      	add	r2, r0
 8006b42:	42ab      	cmp	r3, r5
 8006b44:	6062      	str	r2, [r4, #4]
 8006b46:	d1f1      	bne.n	8006b2c <_write+0x1a>
 8006b48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	f7ff bf55 	b.w	80069fc <error>

08006b52 <_swiclose>:
 8006b52:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b54:	2402      	movs	r4, #2
 8006b56:	9001      	str	r0, [sp, #4]
 8006b58:	ad01      	add	r5, sp, #4
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	beab      	bkpt	0x00ab
 8006b60:	4604      	mov	r4, r0
 8006b62:	4620      	mov	r0, r4
 8006b64:	f7ff ff58 	bl	8006a18 <checkerror>
 8006b68:	b003      	add	sp, #12
 8006b6a:	bd30      	pop	{r4, r5, pc}

08006b6c <_close>:
 8006b6c:	b538      	push	{r3, r4, r5, lr}
 8006b6e:	4605      	mov	r5, r0
 8006b70:	f7ff ff2a 	bl	80069c8 <findslot>
 8006b74:	4604      	mov	r4, r0
 8006b76:	b930      	cbnz	r0, 8006b86 <_close+0x1a>
 8006b78:	f000 fa96 	bl	80070a8 <__errno>
 8006b7c:	2309      	movs	r3, #9
 8006b7e:	6003      	str	r3, [r0, #0]
 8006b80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b84:	bd38      	pop	{r3, r4, r5, pc}
 8006b86:	3d01      	subs	r5, #1
 8006b88:	2d01      	cmp	r5, #1
 8006b8a:	d809      	bhi.n	8006ba0 <_close+0x34>
 8006b8c:	4b09      	ldr	r3, [pc, #36]	@ (8006bb4 <_close+0x48>)
 8006b8e:	689a      	ldr	r2, [r3, #8]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d104      	bne.n	8006ba0 <_close+0x34>
 8006b96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b9a:	6003      	str	r3, [r0, #0]
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	e7f1      	b.n	8006b84 <_close+0x18>
 8006ba0:	6820      	ldr	r0, [r4, #0]
 8006ba2:	f7ff ffd6 	bl	8006b52 <_swiclose>
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	d1ec      	bne.n	8006b84 <_close+0x18>
 8006baa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006bae:	6023      	str	r3, [r4, #0]
 8006bb0:	e7e8      	b.n	8006b84 <_close+0x18>
 8006bb2:	bf00      	nop
 8006bb4:	20025c38 	.word	0x20025c38

08006bb8 <_swistat>:
 8006bb8:	b570      	push	{r4, r5, r6, lr}
 8006bba:	460c      	mov	r4, r1
 8006bbc:	f7ff ff04 	bl	80069c8 <findslot>
 8006bc0:	4605      	mov	r5, r0
 8006bc2:	b930      	cbnz	r0, 8006bd2 <_swistat+0x1a>
 8006bc4:	f000 fa70 	bl	80070a8 <__errno>
 8006bc8:	2309      	movs	r3, #9
 8006bca:	6003      	str	r3, [r0, #0]
 8006bcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bd0:	bd70      	pop	{r4, r5, r6, pc}
 8006bd2:	6863      	ldr	r3, [r4, #4]
 8006bd4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006bd8:	6063      	str	r3, [r4, #4]
 8006bda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006bde:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006be0:	260c      	movs	r6, #12
 8006be2:	4630      	mov	r0, r6
 8006be4:	4629      	mov	r1, r5
 8006be6:	beab      	bkpt	0x00ab
 8006be8:	4605      	mov	r5, r0
 8006bea:	4628      	mov	r0, r5
 8006bec:	f7ff ff14 	bl	8006a18 <checkerror>
 8006bf0:	1c43      	adds	r3, r0, #1
 8006bf2:	d0eb      	beq.n	8006bcc <_swistat+0x14>
 8006bf4:	6120      	str	r0, [r4, #16]
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	e7ea      	b.n	8006bd0 <_swistat+0x18>

08006bfa <_stat>:
 8006bfa:	b538      	push	{r3, r4, r5, lr}
 8006bfc:	460d      	mov	r5, r1
 8006bfe:	4604      	mov	r4, r0
 8006c00:	2258      	movs	r2, #88	@ 0x58
 8006c02:	2100      	movs	r1, #0
 8006c04:	4628      	mov	r0, r5
 8006c06:	f000 fa47 	bl	8007098 <memset>
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	f000 f811 	bl	8006c34 <_swiopen>
 8006c12:	1c43      	adds	r3, r0, #1
 8006c14:	4604      	mov	r4, r0
 8006c16:	d00b      	beq.n	8006c30 <_stat+0x36>
 8006c18:	686b      	ldr	r3, [r5, #4]
 8006c1a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006c1e:	606b      	str	r3, [r5, #4]
 8006c20:	4629      	mov	r1, r5
 8006c22:	f7ff ffc9 	bl	8006bb8 <_swistat>
 8006c26:	4605      	mov	r5, r0
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f7ff ff9f 	bl	8006b6c <_close>
 8006c2e:	462c      	mov	r4, r5
 8006c30:	4620      	mov	r0, r4
 8006c32:	bd38      	pop	{r3, r4, r5, pc}

08006c34 <_swiopen>:
 8006c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c38:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8006ce4 <_swiopen+0xb0>
 8006c3c:	b096      	sub	sp, #88	@ 0x58
 8006c3e:	4607      	mov	r7, r0
 8006c40:	460e      	mov	r6, r1
 8006c42:	2400      	movs	r4, #0
 8006c44:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8006c4e:	d032      	beq.n	8006cb6 <_swiopen+0x82>
 8006c50:	3401      	adds	r4, #1
 8006c52:	2c14      	cmp	r4, #20
 8006c54:	d1f6      	bne.n	8006c44 <_swiopen+0x10>
 8006c56:	f000 fa27 	bl	80070a8 <__errno>
 8006c5a:	2318      	movs	r3, #24
 8006c5c:	e03a      	b.n	8006cd4 <_swiopen+0xa0>
 8006c5e:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8006c62:	f240 6301 	movw	r3, #1537	@ 0x601
 8006c66:	07b2      	lsls	r2, r6, #30
 8006c68:	bf48      	it	mi
 8006c6a:	f045 0502 	orrmi.w	r5, r5, #2
 8006c6e:	421e      	tst	r6, r3
 8006c70:	bf18      	it	ne
 8006c72:	f045 0504 	orrne.w	r5, r5, #4
 8006c76:	0733      	lsls	r3, r6, #28
 8006c78:	bf48      	it	mi
 8006c7a:	f025 0504 	bicmi.w	r5, r5, #4
 8006c7e:	4638      	mov	r0, r7
 8006c80:	bf48      	it	mi
 8006c82:	f045 0508 	orrmi.w	r5, r5, #8
 8006c86:	9700      	str	r7, [sp, #0]
 8006c88:	f7f9 fab2 	bl	80001f0 <strlen>
 8006c8c:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8006c90:	2501      	movs	r5, #1
 8006c92:	4628      	mov	r0, r5
 8006c94:	4651      	mov	r1, sl
 8006c96:	beab      	bkpt	0x00ab
 8006c98:	4605      	mov	r5, r0
 8006c9a:	2d00      	cmp	r5, #0
 8006c9c:	db06      	blt.n	8006cac <_swiopen+0x78>
 8006c9e:	44c8      	add	r8, r9
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 8006ca6:	f8c8 3004 	str.w	r3, [r8, #4]
 8006caa:	e016      	b.n	8006cda <_swiopen+0xa6>
 8006cac:	4628      	mov	r0, r5
 8006cae:	f7ff fea5 	bl	80069fc <error>
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	e011      	b.n	8006cda <_swiopen+0xa6>
 8006cb6:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8006cba:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006cbe:	46ea      	mov	sl, sp
 8006cc0:	d1cd      	bne.n	8006c5e <_swiopen+0x2a>
 8006cc2:	4651      	mov	r1, sl
 8006cc4:	4638      	mov	r0, r7
 8006cc6:	f7ff ff98 	bl	8006bfa <_stat>
 8006cca:	3001      	adds	r0, #1
 8006ccc:	d0c7      	beq.n	8006c5e <_swiopen+0x2a>
 8006cce:	f000 f9eb 	bl	80070a8 <__errno>
 8006cd2:	2311      	movs	r3, #17
 8006cd4:	6003      	str	r3, [r0, #0]
 8006cd6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006cda:	4620      	mov	r0, r4
 8006cdc:	b016      	add	sp, #88	@ 0x58
 8006cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20025c38 	.word	0x20025c38

08006ce8 <_get_semihosting_exts>:
 8006ce8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006cec:	4606      	mov	r6, r0
 8006cee:	460f      	mov	r7, r1
 8006cf0:	4829      	ldr	r0, [pc, #164]	@ (8006d98 <_get_semihosting_exts+0xb0>)
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	4615      	mov	r5, r2
 8006cf6:	f7ff ff9d 	bl	8006c34 <_swiopen>
 8006cfa:	462a      	mov	r2, r5
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	2100      	movs	r1, #0
 8006d00:	4630      	mov	r0, r6
 8006d02:	f000 f9c9 	bl	8007098 <memset>
 8006d06:	1c63      	adds	r3, r4, #1
 8006d08:	d014      	beq.n	8006d34 <_get_semihosting_exts+0x4c>
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f7ff fe5c 	bl	80069c8 <findslot>
 8006d10:	f04f 080c 	mov.w	r8, #12
 8006d14:	4681      	mov	r9, r0
 8006d16:	4640      	mov	r0, r8
 8006d18:	4649      	mov	r1, r9
 8006d1a:	beab      	bkpt	0x00ab
 8006d1c:	4680      	mov	r8, r0
 8006d1e:	4640      	mov	r0, r8
 8006d20:	f7ff fe7a 	bl	8006a18 <checkerror>
 8006d24:	2803      	cmp	r0, #3
 8006d26:	dd02      	ble.n	8006d2e <_get_semihosting_exts+0x46>
 8006d28:	1ec3      	subs	r3, r0, #3
 8006d2a:	42ab      	cmp	r3, r5
 8006d2c:	dc07      	bgt.n	8006d3e <_get_semihosting_exts+0x56>
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f7ff ff1c 	bl	8006b6c <_close>
 8006d34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d38:	b003      	add	sp, #12
 8006d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d3e:	2204      	movs	r2, #4
 8006d40:	eb0d 0102 	add.w	r1, sp, r2
 8006d44:	4620      	mov	r0, r4
 8006d46:	f7ff fe7c 	bl	8006a42 <_read>
 8006d4a:	2803      	cmp	r0, #3
 8006d4c:	ddef      	ble.n	8006d2e <_get_semihosting_exts+0x46>
 8006d4e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006d52:	2b53      	cmp	r3, #83	@ 0x53
 8006d54:	d1eb      	bne.n	8006d2e <_get_semihosting_exts+0x46>
 8006d56:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006d5a:	2b48      	cmp	r3, #72	@ 0x48
 8006d5c:	d1e7      	bne.n	8006d2e <_get_semihosting_exts+0x46>
 8006d5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006d62:	2b46      	cmp	r3, #70	@ 0x46
 8006d64:	d1e3      	bne.n	8006d2e <_get_semihosting_exts+0x46>
 8006d66:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006d6a:	2b42      	cmp	r3, #66	@ 0x42
 8006d6c:	d1df      	bne.n	8006d2e <_get_semihosting_exts+0x46>
 8006d6e:	2201      	movs	r2, #1
 8006d70:	4639      	mov	r1, r7
 8006d72:	4620      	mov	r0, r4
 8006d74:	f7ff fe7f 	bl	8006a76 <_swilseek>
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	dbd8      	blt.n	8006d2e <_get_semihosting_exts+0x46>
 8006d7c:	462a      	mov	r2, r5
 8006d7e:	4631      	mov	r1, r6
 8006d80:	4620      	mov	r0, r4
 8006d82:	f7ff fe5e 	bl	8006a42 <_read>
 8006d86:	4605      	mov	r5, r0
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f7ff feef 	bl	8006b6c <_close>
 8006d8e:	4628      	mov	r0, r5
 8006d90:	f7ff fe42 	bl	8006a18 <checkerror>
 8006d94:	e7d0      	b.n	8006d38 <_get_semihosting_exts+0x50>
 8006d96:	bf00      	nop
 8006d98:	08009738 	.word	0x08009738

08006d9c <initialise_semihosting_exts>:
 8006d9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d9e:	4d0a      	ldr	r5, [pc, #40]	@ (8006dc8 <initialise_semihosting_exts+0x2c>)
 8006da0:	4c0a      	ldr	r4, [pc, #40]	@ (8006dcc <initialise_semihosting_exts+0x30>)
 8006da2:	2100      	movs	r1, #0
 8006da4:	2201      	movs	r2, #1
 8006da6:	a801      	add	r0, sp, #4
 8006da8:	6029      	str	r1, [r5, #0]
 8006daa:	6022      	str	r2, [r4, #0]
 8006dac:	f7ff ff9c 	bl	8006ce8 <_get_semihosting_exts>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	dd07      	ble.n	8006dc4 <initialise_semihosting_exts+0x28>
 8006db4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006db8:	f003 0201 	and.w	r2, r3, #1
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	602a      	str	r2, [r5, #0]
 8006dc2:	6023      	str	r3, [r4, #0]
 8006dc4:	b003      	add	sp, #12
 8006dc6:	bd30      	pop	{r4, r5, pc}
 8006dc8:	20000028 	.word	0x20000028
 8006dcc:	20000024 	.word	0x20000024

08006dd0 <_has_ext_stdout_stderr>:
 8006dd0:	b510      	push	{r4, lr}
 8006dd2:	4c04      	ldr	r4, [pc, #16]	@ (8006de4 <_has_ext_stdout_stderr+0x14>)
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	da01      	bge.n	8006dde <_has_ext_stdout_stderr+0xe>
 8006dda:	f7ff ffdf 	bl	8006d9c <initialise_semihosting_exts>
 8006dde:	6820      	ldr	r0, [r4, #0]
 8006de0:	bd10      	pop	{r4, pc}
 8006de2:	bf00      	nop
 8006de4:	20000024 	.word	0x20000024

08006de8 <initialise_monitor_handles>:
 8006de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dec:	b085      	sub	sp, #20
 8006dee:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8006ea0 <initialise_monitor_handles+0xb8>
 8006df2:	f8cd 9004 	str.w	r9, [sp, #4]
 8006df6:	2303      	movs	r3, #3
 8006df8:	2400      	movs	r4, #0
 8006dfa:	9303      	str	r3, [sp, #12]
 8006dfc:	af01      	add	r7, sp, #4
 8006dfe:	9402      	str	r4, [sp, #8]
 8006e00:	2501      	movs	r5, #1
 8006e02:	4628      	mov	r0, r5
 8006e04:	4639      	mov	r1, r7
 8006e06:	beab      	bkpt	0x00ab
 8006e08:	4605      	mov	r5, r0
 8006e0a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8006ea4 <initialise_monitor_handles+0xbc>
 8006e0e:	4623      	mov	r3, r4
 8006e10:	4c20      	ldr	r4, [pc, #128]	@ (8006e94 <initialise_monitor_handles+0xac>)
 8006e12:	f8c8 5000 	str.w	r5, [r8]
 8006e16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e1a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	2b14      	cmp	r3, #20
 8006e22:	d1fa      	bne.n	8006e1a <initialise_monitor_handles+0x32>
 8006e24:	f7ff ffd4 	bl	8006dd0 <_has_ext_stdout_stderr>
 8006e28:	4d1b      	ldr	r5, [pc, #108]	@ (8006e98 <initialise_monitor_handles+0xb0>)
 8006e2a:	b1d0      	cbz	r0, 8006e62 <initialise_monitor_handles+0x7a>
 8006e2c:	f04f 0a03 	mov.w	sl, #3
 8006e30:	2304      	movs	r3, #4
 8006e32:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e36:	2601      	movs	r6, #1
 8006e38:	f8cd a00c 	str.w	sl, [sp, #12]
 8006e3c:	9302      	str	r3, [sp, #8]
 8006e3e:	4630      	mov	r0, r6
 8006e40:	4639      	mov	r1, r7
 8006e42:	beab      	bkpt	0x00ab
 8006e44:	4683      	mov	fp, r0
 8006e46:	4b15      	ldr	r3, [pc, #84]	@ (8006e9c <initialise_monitor_handles+0xb4>)
 8006e48:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e4c:	f8c3 b000 	str.w	fp, [r3]
 8006e50:	2308      	movs	r3, #8
 8006e52:	f8cd a00c 	str.w	sl, [sp, #12]
 8006e56:	9302      	str	r3, [sp, #8]
 8006e58:	4630      	mov	r0, r6
 8006e5a:	4639      	mov	r1, r7
 8006e5c:	beab      	bkpt	0x00ab
 8006e5e:	4606      	mov	r6, r0
 8006e60:	602e      	str	r6, [r5, #0]
 8006e62:	682b      	ldr	r3, [r5, #0]
 8006e64:	3301      	adds	r3, #1
 8006e66:	bf02      	ittt	eq
 8006e68:	4b0c      	ldreq	r3, [pc, #48]	@ (8006e9c <initialise_monitor_handles+0xb4>)
 8006e6a:	681b      	ldreq	r3, [r3, #0]
 8006e6c:	602b      	streq	r3, [r5, #0]
 8006e6e:	2600      	movs	r6, #0
 8006e70:	f8d8 3000 	ldr.w	r3, [r8]
 8006e74:	6023      	str	r3, [r4, #0]
 8006e76:	6066      	str	r6, [r4, #4]
 8006e78:	f7ff ffaa 	bl	8006dd0 <_has_ext_stdout_stderr>
 8006e7c:	b130      	cbz	r0, 8006e8c <initialise_monitor_handles+0xa4>
 8006e7e:	4b07      	ldr	r3, [pc, #28]	@ (8006e9c <initialise_monitor_handles+0xb4>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8006e86:	682b      	ldr	r3, [r5, #0]
 8006e88:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8006e8c:	b005      	add	sp, #20
 8006e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e92:	bf00      	nop
 8006e94:	20025c38 	.word	0x20025c38
 8006e98:	20025c2c 	.word	0x20025c2c
 8006e9c:	20025c30 	.word	0x20025c30
 8006ea0:	0800974e 	.word	0x0800974e
 8006ea4:	20025c34 	.word	0x20025c34

08006ea8 <sniprintf>:
 8006ea8:	b40c      	push	{r2, r3}
 8006eaa:	b530      	push	{r4, r5, lr}
 8006eac:	4b18      	ldr	r3, [pc, #96]	@ (8006f10 <sniprintf+0x68>)
 8006eae:	1e0c      	subs	r4, r1, #0
 8006eb0:	681d      	ldr	r5, [r3, #0]
 8006eb2:	b09d      	sub	sp, #116	@ 0x74
 8006eb4:	da08      	bge.n	8006ec8 <sniprintf+0x20>
 8006eb6:	238b      	movs	r3, #139	@ 0x8b
 8006eb8:	602b      	str	r3, [r5, #0]
 8006eba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ebe:	b01d      	add	sp, #116	@ 0x74
 8006ec0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ec4:	b002      	add	sp, #8
 8006ec6:	4770      	bx	lr
 8006ec8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006ecc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006ed0:	f04f 0300 	mov.w	r3, #0
 8006ed4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006ed6:	bf14      	ite	ne
 8006ed8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006edc:	4623      	moveq	r3, r4
 8006ede:	9304      	str	r3, [sp, #16]
 8006ee0:	9307      	str	r3, [sp, #28]
 8006ee2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006ee6:	9002      	str	r0, [sp, #8]
 8006ee8:	9006      	str	r0, [sp, #24]
 8006eea:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006eee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006ef0:	ab21      	add	r3, sp, #132	@ 0x84
 8006ef2:	a902      	add	r1, sp, #8
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	9301      	str	r3, [sp, #4]
 8006ef8:	f000 f95e 	bl	80071b8 <_svfiprintf_r>
 8006efc:	1c43      	adds	r3, r0, #1
 8006efe:	bfbc      	itt	lt
 8006f00:	238b      	movlt	r3, #139	@ 0x8b
 8006f02:	602b      	strlt	r3, [r5, #0]
 8006f04:	2c00      	cmp	r4, #0
 8006f06:	d0da      	beq.n	8006ebe <sniprintf+0x16>
 8006f08:	9b02      	ldr	r3, [sp, #8]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	e7d6      	b.n	8006ebe <sniprintf+0x16>
 8006f10:	20000038 	.word	0x20000038

08006f14 <std>:
 8006f14:	2300      	movs	r3, #0
 8006f16:	b510      	push	{r4, lr}
 8006f18:	4604      	mov	r4, r0
 8006f1a:	e9c0 3300 	strd	r3, r3, [r0]
 8006f1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f22:	6083      	str	r3, [r0, #8]
 8006f24:	8181      	strh	r1, [r0, #12]
 8006f26:	6643      	str	r3, [r0, #100]	@ 0x64
 8006f28:	81c2      	strh	r2, [r0, #14]
 8006f2a:	6183      	str	r3, [r0, #24]
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	2208      	movs	r2, #8
 8006f30:	305c      	adds	r0, #92	@ 0x5c
 8006f32:	f000 f8b1 	bl	8007098 <memset>
 8006f36:	4b0d      	ldr	r3, [pc, #52]	@ (8006f6c <std+0x58>)
 8006f38:	6263      	str	r3, [r4, #36]	@ 0x24
 8006f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f70 <std+0x5c>)
 8006f3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f74 <std+0x60>)
 8006f40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006f42:	4b0d      	ldr	r3, [pc, #52]	@ (8006f78 <std+0x64>)
 8006f44:	6323      	str	r3, [r4, #48]	@ 0x30
 8006f46:	4b0d      	ldr	r3, [pc, #52]	@ (8006f7c <std+0x68>)
 8006f48:	6224      	str	r4, [r4, #32]
 8006f4a:	429c      	cmp	r4, r3
 8006f4c:	d006      	beq.n	8006f5c <std+0x48>
 8006f4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006f52:	4294      	cmp	r4, r2
 8006f54:	d002      	beq.n	8006f5c <std+0x48>
 8006f56:	33d0      	adds	r3, #208	@ 0xd0
 8006f58:	429c      	cmp	r4, r3
 8006f5a:	d105      	bne.n	8006f68 <std+0x54>
 8006f5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f64:	f000 b8ca 	b.w	80070fc <__retarget_lock_init_recursive>
 8006f68:	bd10      	pop	{r4, pc}
 8006f6a:	bf00      	nop
 8006f6c:	0800797d 	.word	0x0800797d
 8006f70:	0800799f 	.word	0x0800799f
 8006f74:	080079d7 	.word	0x080079d7
 8006f78:	080079fb 	.word	0x080079fb
 8006f7c:	20025cd8 	.word	0x20025cd8

08006f80 <stdio_exit_handler>:
 8006f80:	4a02      	ldr	r2, [pc, #8]	@ (8006f8c <stdio_exit_handler+0xc>)
 8006f82:	4903      	ldr	r1, [pc, #12]	@ (8006f90 <stdio_exit_handler+0x10>)
 8006f84:	4803      	ldr	r0, [pc, #12]	@ (8006f94 <stdio_exit_handler+0x14>)
 8006f86:	f000 b869 	b.w	800705c <_fwalk_sglue>
 8006f8a:	bf00      	nop
 8006f8c:	2000002c 	.word	0x2000002c
 8006f90:	08007915 	.word	0x08007915
 8006f94:	2000003c 	.word	0x2000003c

08006f98 <cleanup_stdio>:
 8006f98:	6841      	ldr	r1, [r0, #4]
 8006f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006fcc <cleanup_stdio+0x34>)
 8006f9c:	4299      	cmp	r1, r3
 8006f9e:	b510      	push	{r4, lr}
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	d001      	beq.n	8006fa8 <cleanup_stdio+0x10>
 8006fa4:	f000 fcb6 	bl	8007914 <_fflush_r>
 8006fa8:	68a1      	ldr	r1, [r4, #8]
 8006faa:	4b09      	ldr	r3, [pc, #36]	@ (8006fd0 <cleanup_stdio+0x38>)
 8006fac:	4299      	cmp	r1, r3
 8006fae:	d002      	beq.n	8006fb6 <cleanup_stdio+0x1e>
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f000 fcaf 	bl	8007914 <_fflush_r>
 8006fb6:	68e1      	ldr	r1, [r4, #12]
 8006fb8:	4b06      	ldr	r3, [pc, #24]	@ (8006fd4 <cleanup_stdio+0x3c>)
 8006fba:	4299      	cmp	r1, r3
 8006fbc:	d004      	beq.n	8006fc8 <cleanup_stdio+0x30>
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fc4:	f000 bca6 	b.w	8007914 <_fflush_r>
 8006fc8:	bd10      	pop	{r4, pc}
 8006fca:	bf00      	nop
 8006fcc:	20025cd8 	.word	0x20025cd8
 8006fd0:	20025d40 	.word	0x20025d40
 8006fd4:	20025da8 	.word	0x20025da8

08006fd8 <global_stdio_init.part.0>:
 8006fd8:	b510      	push	{r4, lr}
 8006fda:	4b0b      	ldr	r3, [pc, #44]	@ (8007008 <global_stdio_init.part.0+0x30>)
 8006fdc:	4c0b      	ldr	r4, [pc, #44]	@ (800700c <global_stdio_init.part.0+0x34>)
 8006fde:	4a0c      	ldr	r2, [pc, #48]	@ (8007010 <global_stdio_init.part.0+0x38>)
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	2104      	movs	r1, #4
 8006fe8:	f7ff ff94 	bl	8006f14 <std>
 8006fec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	2109      	movs	r1, #9
 8006ff4:	f7ff ff8e 	bl	8006f14 <std>
 8006ff8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007002:	2112      	movs	r1, #18
 8007004:	f7ff bf86 	b.w	8006f14 <std>
 8007008:	20025e10 	.word	0x20025e10
 800700c:	20025cd8 	.word	0x20025cd8
 8007010:	08006f81 	.word	0x08006f81

08007014 <__sfp_lock_acquire>:
 8007014:	4801      	ldr	r0, [pc, #4]	@ (800701c <__sfp_lock_acquire+0x8>)
 8007016:	f000 b872 	b.w	80070fe <__retarget_lock_acquire_recursive>
 800701a:	bf00      	nop
 800701c:	20025e15 	.word	0x20025e15

08007020 <__sfp_lock_release>:
 8007020:	4801      	ldr	r0, [pc, #4]	@ (8007028 <__sfp_lock_release+0x8>)
 8007022:	f000 b86d 	b.w	8007100 <__retarget_lock_release_recursive>
 8007026:	bf00      	nop
 8007028:	20025e15 	.word	0x20025e15

0800702c <__sinit>:
 800702c:	b510      	push	{r4, lr}
 800702e:	4604      	mov	r4, r0
 8007030:	f7ff fff0 	bl	8007014 <__sfp_lock_acquire>
 8007034:	6a23      	ldr	r3, [r4, #32]
 8007036:	b11b      	cbz	r3, 8007040 <__sinit+0x14>
 8007038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800703c:	f7ff bff0 	b.w	8007020 <__sfp_lock_release>
 8007040:	4b04      	ldr	r3, [pc, #16]	@ (8007054 <__sinit+0x28>)
 8007042:	6223      	str	r3, [r4, #32]
 8007044:	4b04      	ldr	r3, [pc, #16]	@ (8007058 <__sinit+0x2c>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1f5      	bne.n	8007038 <__sinit+0xc>
 800704c:	f7ff ffc4 	bl	8006fd8 <global_stdio_init.part.0>
 8007050:	e7f2      	b.n	8007038 <__sinit+0xc>
 8007052:	bf00      	nop
 8007054:	08006f99 	.word	0x08006f99
 8007058:	20025e10 	.word	0x20025e10

0800705c <_fwalk_sglue>:
 800705c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007060:	4607      	mov	r7, r0
 8007062:	4688      	mov	r8, r1
 8007064:	4614      	mov	r4, r2
 8007066:	2600      	movs	r6, #0
 8007068:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800706c:	f1b9 0901 	subs.w	r9, r9, #1
 8007070:	d505      	bpl.n	800707e <_fwalk_sglue+0x22>
 8007072:	6824      	ldr	r4, [r4, #0]
 8007074:	2c00      	cmp	r4, #0
 8007076:	d1f7      	bne.n	8007068 <_fwalk_sglue+0xc>
 8007078:	4630      	mov	r0, r6
 800707a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800707e:	89ab      	ldrh	r3, [r5, #12]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d907      	bls.n	8007094 <_fwalk_sglue+0x38>
 8007084:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007088:	3301      	adds	r3, #1
 800708a:	d003      	beq.n	8007094 <_fwalk_sglue+0x38>
 800708c:	4629      	mov	r1, r5
 800708e:	4638      	mov	r0, r7
 8007090:	47c0      	blx	r8
 8007092:	4306      	orrs	r6, r0
 8007094:	3568      	adds	r5, #104	@ 0x68
 8007096:	e7e9      	b.n	800706c <_fwalk_sglue+0x10>

08007098 <memset>:
 8007098:	4402      	add	r2, r0
 800709a:	4603      	mov	r3, r0
 800709c:	4293      	cmp	r3, r2
 800709e:	d100      	bne.n	80070a2 <memset+0xa>
 80070a0:	4770      	bx	lr
 80070a2:	f803 1b01 	strb.w	r1, [r3], #1
 80070a6:	e7f9      	b.n	800709c <memset+0x4>

080070a8 <__errno>:
 80070a8:	4b01      	ldr	r3, [pc, #4]	@ (80070b0 <__errno+0x8>)
 80070aa:	6818      	ldr	r0, [r3, #0]
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	20000038 	.word	0x20000038

080070b4 <__libc_init_array>:
 80070b4:	b570      	push	{r4, r5, r6, lr}
 80070b6:	4d0d      	ldr	r5, [pc, #52]	@ (80070ec <__libc_init_array+0x38>)
 80070b8:	4c0d      	ldr	r4, [pc, #52]	@ (80070f0 <__libc_init_array+0x3c>)
 80070ba:	1b64      	subs	r4, r4, r5
 80070bc:	10a4      	asrs	r4, r4, #2
 80070be:	2600      	movs	r6, #0
 80070c0:	42a6      	cmp	r6, r4
 80070c2:	d109      	bne.n	80070d8 <__libc_init_array+0x24>
 80070c4:	4d0b      	ldr	r5, [pc, #44]	@ (80070f4 <__libc_init_array+0x40>)
 80070c6:	4c0c      	ldr	r4, [pc, #48]	@ (80070f8 <__libc_init_array+0x44>)
 80070c8:	f000 fd9a 	bl	8007c00 <_init>
 80070cc:	1b64      	subs	r4, r4, r5
 80070ce:	10a4      	asrs	r4, r4, #2
 80070d0:	2600      	movs	r6, #0
 80070d2:	42a6      	cmp	r6, r4
 80070d4:	d105      	bne.n	80070e2 <__libc_init_array+0x2e>
 80070d6:	bd70      	pop	{r4, r5, r6, pc}
 80070d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80070dc:	4798      	blx	r3
 80070de:	3601      	adds	r6, #1
 80070e0:	e7ee      	b.n	80070c0 <__libc_init_array+0xc>
 80070e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80070e6:	4798      	blx	r3
 80070e8:	3601      	adds	r6, #1
 80070ea:	e7f2      	b.n	80070d2 <__libc_init_array+0x1e>
 80070ec:	08009790 	.word	0x08009790
 80070f0:	08009790 	.word	0x08009790
 80070f4:	08009790 	.word	0x08009790
 80070f8:	08009794 	.word	0x08009794

080070fc <__retarget_lock_init_recursive>:
 80070fc:	4770      	bx	lr

080070fe <__retarget_lock_acquire_recursive>:
 80070fe:	4770      	bx	lr

08007100 <__retarget_lock_release_recursive>:
 8007100:	4770      	bx	lr

08007102 <__ssputs_r>:
 8007102:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007106:	688e      	ldr	r6, [r1, #8]
 8007108:	461f      	mov	r7, r3
 800710a:	42be      	cmp	r6, r7
 800710c:	680b      	ldr	r3, [r1, #0]
 800710e:	4682      	mov	sl, r0
 8007110:	460c      	mov	r4, r1
 8007112:	4690      	mov	r8, r2
 8007114:	d82d      	bhi.n	8007172 <__ssputs_r+0x70>
 8007116:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800711a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800711e:	d026      	beq.n	800716e <__ssputs_r+0x6c>
 8007120:	6965      	ldr	r5, [r4, #20]
 8007122:	6909      	ldr	r1, [r1, #16]
 8007124:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007128:	eba3 0901 	sub.w	r9, r3, r1
 800712c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007130:	1c7b      	adds	r3, r7, #1
 8007132:	444b      	add	r3, r9
 8007134:	106d      	asrs	r5, r5, #1
 8007136:	429d      	cmp	r5, r3
 8007138:	bf38      	it	cc
 800713a:	461d      	movcc	r5, r3
 800713c:	0553      	lsls	r3, r2, #21
 800713e:	d527      	bpl.n	8007190 <__ssputs_r+0x8e>
 8007140:	4629      	mov	r1, r5
 8007142:	f000 f957 	bl	80073f4 <_malloc_r>
 8007146:	4606      	mov	r6, r0
 8007148:	b360      	cbz	r0, 80071a4 <__ssputs_r+0xa2>
 800714a:	6921      	ldr	r1, [r4, #16]
 800714c:	464a      	mov	r2, r9
 800714e:	f000 fcf7 	bl	8007b40 <memcpy>
 8007152:	89a3      	ldrh	r3, [r4, #12]
 8007154:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800715c:	81a3      	strh	r3, [r4, #12]
 800715e:	6126      	str	r6, [r4, #16]
 8007160:	6165      	str	r5, [r4, #20]
 8007162:	444e      	add	r6, r9
 8007164:	eba5 0509 	sub.w	r5, r5, r9
 8007168:	6026      	str	r6, [r4, #0]
 800716a:	60a5      	str	r5, [r4, #8]
 800716c:	463e      	mov	r6, r7
 800716e:	42be      	cmp	r6, r7
 8007170:	d900      	bls.n	8007174 <__ssputs_r+0x72>
 8007172:	463e      	mov	r6, r7
 8007174:	6820      	ldr	r0, [r4, #0]
 8007176:	4632      	mov	r2, r6
 8007178:	4641      	mov	r1, r8
 800717a:	f000 fc70 	bl	8007a5e <memmove>
 800717e:	68a3      	ldr	r3, [r4, #8]
 8007180:	1b9b      	subs	r3, r3, r6
 8007182:	60a3      	str	r3, [r4, #8]
 8007184:	6823      	ldr	r3, [r4, #0]
 8007186:	4433      	add	r3, r6
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	2000      	movs	r0, #0
 800718c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007190:	462a      	mov	r2, r5
 8007192:	f000 fc36 	bl	8007a02 <_realloc_r>
 8007196:	4606      	mov	r6, r0
 8007198:	2800      	cmp	r0, #0
 800719a:	d1e0      	bne.n	800715e <__ssputs_r+0x5c>
 800719c:	6921      	ldr	r1, [r4, #16]
 800719e:	4650      	mov	r0, sl
 80071a0:	f000 fcdc 	bl	8007b5c <_free_r>
 80071a4:	230c      	movs	r3, #12
 80071a6:	f8ca 3000 	str.w	r3, [sl]
 80071aa:	89a3      	ldrh	r3, [r4, #12]
 80071ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071b0:	81a3      	strh	r3, [r4, #12]
 80071b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071b6:	e7e9      	b.n	800718c <__ssputs_r+0x8a>

080071b8 <_svfiprintf_r>:
 80071b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071bc:	4698      	mov	r8, r3
 80071be:	898b      	ldrh	r3, [r1, #12]
 80071c0:	061b      	lsls	r3, r3, #24
 80071c2:	b09d      	sub	sp, #116	@ 0x74
 80071c4:	4607      	mov	r7, r0
 80071c6:	460d      	mov	r5, r1
 80071c8:	4614      	mov	r4, r2
 80071ca:	d510      	bpl.n	80071ee <_svfiprintf_r+0x36>
 80071cc:	690b      	ldr	r3, [r1, #16]
 80071ce:	b973      	cbnz	r3, 80071ee <_svfiprintf_r+0x36>
 80071d0:	2140      	movs	r1, #64	@ 0x40
 80071d2:	f000 f90f 	bl	80073f4 <_malloc_r>
 80071d6:	6028      	str	r0, [r5, #0]
 80071d8:	6128      	str	r0, [r5, #16]
 80071da:	b930      	cbnz	r0, 80071ea <_svfiprintf_r+0x32>
 80071dc:	230c      	movs	r3, #12
 80071de:	603b      	str	r3, [r7, #0]
 80071e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071e4:	b01d      	add	sp, #116	@ 0x74
 80071e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ea:	2340      	movs	r3, #64	@ 0x40
 80071ec:	616b      	str	r3, [r5, #20]
 80071ee:	2300      	movs	r3, #0
 80071f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80071f2:	2320      	movs	r3, #32
 80071f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80071fc:	2330      	movs	r3, #48	@ 0x30
 80071fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800739c <_svfiprintf_r+0x1e4>
 8007202:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007206:	f04f 0901 	mov.w	r9, #1
 800720a:	4623      	mov	r3, r4
 800720c:	469a      	mov	sl, r3
 800720e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007212:	b10a      	cbz	r2, 8007218 <_svfiprintf_r+0x60>
 8007214:	2a25      	cmp	r2, #37	@ 0x25
 8007216:	d1f9      	bne.n	800720c <_svfiprintf_r+0x54>
 8007218:	ebba 0b04 	subs.w	fp, sl, r4
 800721c:	d00b      	beq.n	8007236 <_svfiprintf_r+0x7e>
 800721e:	465b      	mov	r3, fp
 8007220:	4622      	mov	r2, r4
 8007222:	4629      	mov	r1, r5
 8007224:	4638      	mov	r0, r7
 8007226:	f7ff ff6c 	bl	8007102 <__ssputs_r>
 800722a:	3001      	adds	r0, #1
 800722c:	f000 80a7 	beq.w	800737e <_svfiprintf_r+0x1c6>
 8007230:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007232:	445a      	add	r2, fp
 8007234:	9209      	str	r2, [sp, #36]	@ 0x24
 8007236:	f89a 3000 	ldrb.w	r3, [sl]
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 809f 	beq.w	800737e <_svfiprintf_r+0x1c6>
 8007240:	2300      	movs	r3, #0
 8007242:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007246:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800724a:	f10a 0a01 	add.w	sl, sl, #1
 800724e:	9304      	str	r3, [sp, #16]
 8007250:	9307      	str	r3, [sp, #28]
 8007252:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007256:	931a      	str	r3, [sp, #104]	@ 0x68
 8007258:	4654      	mov	r4, sl
 800725a:	2205      	movs	r2, #5
 800725c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007260:	484e      	ldr	r0, [pc, #312]	@ (800739c <_svfiprintf_r+0x1e4>)
 8007262:	f7f8 ffcd 	bl	8000200 <memchr>
 8007266:	9a04      	ldr	r2, [sp, #16]
 8007268:	b9d8      	cbnz	r0, 80072a2 <_svfiprintf_r+0xea>
 800726a:	06d0      	lsls	r0, r2, #27
 800726c:	bf44      	itt	mi
 800726e:	2320      	movmi	r3, #32
 8007270:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007274:	0711      	lsls	r1, r2, #28
 8007276:	bf44      	itt	mi
 8007278:	232b      	movmi	r3, #43	@ 0x2b
 800727a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800727e:	f89a 3000 	ldrb.w	r3, [sl]
 8007282:	2b2a      	cmp	r3, #42	@ 0x2a
 8007284:	d015      	beq.n	80072b2 <_svfiprintf_r+0xfa>
 8007286:	9a07      	ldr	r2, [sp, #28]
 8007288:	4654      	mov	r4, sl
 800728a:	2000      	movs	r0, #0
 800728c:	f04f 0c0a 	mov.w	ip, #10
 8007290:	4621      	mov	r1, r4
 8007292:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007296:	3b30      	subs	r3, #48	@ 0x30
 8007298:	2b09      	cmp	r3, #9
 800729a:	d94b      	bls.n	8007334 <_svfiprintf_r+0x17c>
 800729c:	b1b0      	cbz	r0, 80072cc <_svfiprintf_r+0x114>
 800729e:	9207      	str	r2, [sp, #28]
 80072a0:	e014      	b.n	80072cc <_svfiprintf_r+0x114>
 80072a2:	eba0 0308 	sub.w	r3, r0, r8
 80072a6:	fa09 f303 	lsl.w	r3, r9, r3
 80072aa:	4313      	orrs	r3, r2
 80072ac:	9304      	str	r3, [sp, #16]
 80072ae:	46a2      	mov	sl, r4
 80072b0:	e7d2      	b.n	8007258 <_svfiprintf_r+0xa0>
 80072b2:	9b03      	ldr	r3, [sp, #12]
 80072b4:	1d19      	adds	r1, r3, #4
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	9103      	str	r1, [sp, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	bfbb      	ittet	lt
 80072be:	425b      	neglt	r3, r3
 80072c0:	f042 0202 	orrlt.w	r2, r2, #2
 80072c4:	9307      	strge	r3, [sp, #28]
 80072c6:	9307      	strlt	r3, [sp, #28]
 80072c8:	bfb8      	it	lt
 80072ca:	9204      	strlt	r2, [sp, #16]
 80072cc:	7823      	ldrb	r3, [r4, #0]
 80072ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80072d0:	d10a      	bne.n	80072e8 <_svfiprintf_r+0x130>
 80072d2:	7863      	ldrb	r3, [r4, #1]
 80072d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80072d6:	d132      	bne.n	800733e <_svfiprintf_r+0x186>
 80072d8:	9b03      	ldr	r3, [sp, #12]
 80072da:	1d1a      	adds	r2, r3, #4
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	9203      	str	r2, [sp, #12]
 80072e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072e4:	3402      	adds	r4, #2
 80072e6:	9305      	str	r3, [sp, #20]
 80072e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80073ac <_svfiprintf_r+0x1f4>
 80072ec:	7821      	ldrb	r1, [r4, #0]
 80072ee:	2203      	movs	r2, #3
 80072f0:	4650      	mov	r0, sl
 80072f2:	f7f8 ff85 	bl	8000200 <memchr>
 80072f6:	b138      	cbz	r0, 8007308 <_svfiprintf_r+0x150>
 80072f8:	9b04      	ldr	r3, [sp, #16]
 80072fa:	eba0 000a 	sub.w	r0, r0, sl
 80072fe:	2240      	movs	r2, #64	@ 0x40
 8007300:	4082      	lsls	r2, r0
 8007302:	4313      	orrs	r3, r2
 8007304:	3401      	adds	r4, #1
 8007306:	9304      	str	r3, [sp, #16]
 8007308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800730c:	4824      	ldr	r0, [pc, #144]	@ (80073a0 <_svfiprintf_r+0x1e8>)
 800730e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007312:	2206      	movs	r2, #6
 8007314:	f7f8 ff74 	bl	8000200 <memchr>
 8007318:	2800      	cmp	r0, #0
 800731a:	d036      	beq.n	800738a <_svfiprintf_r+0x1d2>
 800731c:	4b21      	ldr	r3, [pc, #132]	@ (80073a4 <_svfiprintf_r+0x1ec>)
 800731e:	bb1b      	cbnz	r3, 8007368 <_svfiprintf_r+0x1b0>
 8007320:	9b03      	ldr	r3, [sp, #12]
 8007322:	3307      	adds	r3, #7
 8007324:	f023 0307 	bic.w	r3, r3, #7
 8007328:	3308      	adds	r3, #8
 800732a:	9303      	str	r3, [sp, #12]
 800732c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800732e:	4433      	add	r3, r6
 8007330:	9309      	str	r3, [sp, #36]	@ 0x24
 8007332:	e76a      	b.n	800720a <_svfiprintf_r+0x52>
 8007334:	fb0c 3202 	mla	r2, ip, r2, r3
 8007338:	460c      	mov	r4, r1
 800733a:	2001      	movs	r0, #1
 800733c:	e7a8      	b.n	8007290 <_svfiprintf_r+0xd8>
 800733e:	2300      	movs	r3, #0
 8007340:	3401      	adds	r4, #1
 8007342:	9305      	str	r3, [sp, #20]
 8007344:	4619      	mov	r1, r3
 8007346:	f04f 0c0a 	mov.w	ip, #10
 800734a:	4620      	mov	r0, r4
 800734c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007350:	3a30      	subs	r2, #48	@ 0x30
 8007352:	2a09      	cmp	r2, #9
 8007354:	d903      	bls.n	800735e <_svfiprintf_r+0x1a6>
 8007356:	2b00      	cmp	r3, #0
 8007358:	d0c6      	beq.n	80072e8 <_svfiprintf_r+0x130>
 800735a:	9105      	str	r1, [sp, #20]
 800735c:	e7c4      	b.n	80072e8 <_svfiprintf_r+0x130>
 800735e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007362:	4604      	mov	r4, r0
 8007364:	2301      	movs	r3, #1
 8007366:	e7f0      	b.n	800734a <_svfiprintf_r+0x192>
 8007368:	ab03      	add	r3, sp, #12
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	462a      	mov	r2, r5
 800736e:	4b0e      	ldr	r3, [pc, #56]	@ (80073a8 <_svfiprintf_r+0x1f0>)
 8007370:	a904      	add	r1, sp, #16
 8007372:	4638      	mov	r0, r7
 8007374:	f3af 8000 	nop.w
 8007378:	1c42      	adds	r2, r0, #1
 800737a:	4606      	mov	r6, r0
 800737c:	d1d6      	bne.n	800732c <_svfiprintf_r+0x174>
 800737e:	89ab      	ldrh	r3, [r5, #12]
 8007380:	065b      	lsls	r3, r3, #25
 8007382:	f53f af2d 	bmi.w	80071e0 <_svfiprintf_r+0x28>
 8007386:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007388:	e72c      	b.n	80071e4 <_svfiprintf_r+0x2c>
 800738a:	ab03      	add	r3, sp, #12
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	462a      	mov	r2, r5
 8007390:	4b05      	ldr	r3, [pc, #20]	@ (80073a8 <_svfiprintf_r+0x1f0>)
 8007392:	a904      	add	r1, sp, #16
 8007394:	4638      	mov	r0, r7
 8007396:	f000 f91b 	bl	80075d0 <_printf_i>
 800739a:	e7ed      	b.n	8007378 <_svfiprintf_r+0x1c0>
 800739c:	08009752 	.word	0x08009752
 80073a0:	0800975c 	.word	0x0800975c
 80073a4:	00000000 	.word	0x00000000
 80073a8:	08007103 	.word	0x08007103
 80073ac:	08009758 	.word	0x08009758

080073b0 <sbrk_aligned>:
 80073b0:	b570      	push	{r4, r5, r6, lr}
 80073b2:	4e0f      	ldr	r6, [pc, #60]	@ (80073f0 <sbrk_aligned+0x40>)
 80073b4:	460c      	mov	r4, r1
 80073b6:	6831      	ldr	r1, [r6, #0]
 80073b8:	4605      	mov	r5, r0
 80073ba:	b911      	cbnz	r1, 80073c2 <sbrk_aligned+0x12>
 80073bc:	f000 fb8e 	bl	8007adc <_sbrk_r>
 80073c0:	6030      	str	r0, [r6, #0]
 80073c2:	4621      	mov	r1, r4
 80073c4:	4628      	mov	r0, r5
 80073c6:	f000 fb89 	bl	8007adc <_sbrk_r>
 80073ca:	1c43      	adds	r3, r0, #1
 80073cc:	d103      	bne.n	80073d6 <sbrk_aligned+0x26>
 80073ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80073d2:	4620      	mov	r0, r4
 80073d4:	bd70      	pop	{r4, r5, r6, pc}
 80073d6:	1cc4      	adds	r4, r0, #3
 80073d8:	f024 0403 	bic.w	r4, r4, #3
 80073dc:	42a0      	cmp	r0, r4
 80073de:	d0f8      	beq.n	80073d2 <sbrk_aligned+0x22>
 80073e0:	1a21      	subs	r1, r4, r0
 80073e2:	4628      	mov	r0, r5
 80073e4:	f000 fb7a 	bl	8007adc <_sbrk_r>
 80073e8:	3001      	adds	r0, #1
 80073ea:	d1f2      	bne.n	80073d2 <sbrk_aligned+0x22>
 80073ec:	e7ef      	b.n	80073ce <sbrk_aligned+0x1e>
 80073ee:	bf00      	nop
 80073f0:	20025e18 	.word	0x20025e18

080073f4 <_malloc_r>:
 80073f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073f8:	1ccd      	adds	r5, r1, #3
 80073fa:	f025 0503 	bic.w	r5, r5, #3
 80073fe:	3508      	adds	r5, #8
 8007400:	2d0c      	cmp	r5, #12
 8007402:	bf38      	it	cc
 8007404:	250c      	movcc	r5, #12
 8007406:	2d00      	cmp	r5, #0
 8007408:	4606      	mov	r6, r0
 800740a:	db01      	blt.n	8007410 <_malloc_r+0x1c>
 800740c:	42a9      	cmp	r1, r5
 800740e:	d904      	bls.n	800741a <_malloc_r+0x26>
 8007410:	230c      	movs	r3, #12
 8007412:	6033      	str	r3, [r6, #0]
 8007414:	2000      	movs	r0, #0
 8007416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800741a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074f0 <_malloc_r+0xfc>
 800741e:	f000 faa1 	bl	8007964 <__malloc_lock>
 8007422:	f8d8 3000 	ldr.w	r3, [r8]
 8007426:	461c      	mov	r4, r3
 8007428:	bb44      	cbnz	r4, 800747c <_malloc_r+0x88>
 800742a:	4629      	mov	r1, r5
 800742c:	4630      	mov	r0, r6
 800742e:	f7ff ffbf 	bl	80073b0 <sbrk_aligned>
 8007432:	1c43      	adds	r3, r0, #1
 8007434:	4604      	mov	r4, r0
 8007436:	d158      	bne.n	80074ea <_malloc_r+0xf6>
 8007438:	f8d8 4000 	ldr.w	r4, [r8]
 800743c:	4627      	mov	r7, r4
 800743e:	2f00      	cmp	r7, #0
 8007440:	d143      	bne.n	80074ca <_malloc_r+0xd6>
 8007442:	2c00      	cmp	r4, #0
 8007444:	d04b      	beq.n	80074de <_malloc_r+0xea>
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	4639      	mov	r1, r7
 800744a:	4630      	mov	r0, r6
 800744c:	eb04 0903 	add.w	r9, r4, r3
 8007450:	f000 fb44 	bl	8007adc <_sbrk_r>
 8007454:	4581      	cmp	r9, r0
 8007456:	d142      	bne.n	80074de <_malloc_r+0xea>
 8007458:	6821      	ldr	r1, [r4, #0]
 800745a:	1a6d      	subs	r5, r5, r1
 800745c:	4629      	mov	r1, r5
 800745e:	4630      	mov	r0, r6
 8007460:	f7ff ffa6 	bl	80073b0 <sbrk_aligned>
 8007464:	3001      	adds	r0, #1
 8007466:	d03a      	beq.n	80074de <_malloc_r+0xea>
 8007468:	6823      	ldr	r3, [r4, #0]
 800746a:	442b      	add	r3, r5
 800746c:	6023      	str	r3, [r4, #0]
 800746e:	f8d8 3000 	ldr.w	r3, [r8]
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	bb62      	cbnz	r2, 80074d0 <_malloc_r+0xdc>
 8007476:	f8c8 7000 	str.w	r7, [r8]
 800747a:	e00f      	b.n	800749c <_malloc_r+0xa8>
 800747c:	6822      	ldr	r2, [r4, #0]
 800747e:	1b52      	subs	r2, r2, r5
 8007480:	d420      	bmi.n	80074c4 <_malloc_r+0xd0>
 8007482:	2a0b      	cmp	r2, #11
 8007484:	d917      	bls.n	80074b6 <_malloc_r+0xc2>
 8007486:	1961      	adds	r1, r4, r5
 8007488:	42a3      	cmp	r3, r4
 800748a:	6025      	str	r5, [r4, #0]
 800748c:	bf18      	it	ne
 800748e:	6059      	strne	r1, [r3, #4]
 8007490:	6863      	ldr	r3, [r4, #4]
 8007492:	bf08      	it	eq
 8007494:	f8c8 1000 	streq.w	r1, [r8]
 8007498:	5162      	str	r2, [r4, r5]
 800749a:	604b      	str	r3, [r1, #4]
 800749c:	4630      	mov	r0, r6
 800749e:	f000 fa67 	bl	8007970 <__malloc_unlock>
 80074a2:	f104 000b 	add.w	r0, r4, #11
 80074a6:	1d23      	adds	r3, r4, #4
 80074a8:	f020 0007 	bic.w	r0, r0, #7
 80074ac:	1ac2      	subs	r2, r0, r3
 80074ae:	bf1c      	itt	ne
 80074b0:	1a1b      	subne	r3, r3, r0
 80074b2:	50a3      	strne	r3, [r4, r2]
 80074b4:	e7af      	b.n	8007416 <_malloc_r+0x22>
 80074b6:	6862      	ldr	r2, [r4, #4]
 80074b8:	42a3      	cmp	r3, r4
 80074ba:	bf0c      	ite	eq
 80074bc:	f8c8 2000 	streq.w	r2, [r8]
 80074c0:	605a      	strne	r2, [r3, #4]
 80074c2:	e7eb      	b.n	800749c <_malloc_r+0xa8>
 80074c4:	4623      	mov	r3, r4
 80074c6:	6864      	ldr	r4, [r4, #4]
 80074c8:	e7ae      	b.n	8007428 <_malloc_r+0x34>
 80074ca:	463c      	mov	r4, r7
 80074cc:	687f      	ldr	r7, [r7, #4]
 80074ce:	e7b6      	b.n	800743e <_malloc_r+0x4a>
 80074d0:	461a      	mov	r2, r3
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	42a3      	cmp	r3, r4
 80074d6:	d1fb      	bne.n	80074d0 <_malloc_r+0xdc>
 80074d8:	2300      	movs	r3, #0
 80074da:	6053      	str	r3, [r2, #4]
 80074dc:	e7de      	b.n	800749c <_malloc_r+0xa8>
 80074de:	230c      	movs	r3, #12
 80074e0:	6033      	str	r3, [r6, #0]
 80074e2:	4630      	mov	r0, r6
 80074e4:	f000 fa44 	bl	8007970 <__malloc_unlock>
 80074e8:	e794      	b.n	8007414 <_malloc_r+0x20>
 80074ea:	6005      	str	r5, [r0, #0]
 80074ec:	e7d6      	b.n	800749c <_malloc_r+0xa8>
 80074ee:	bf00      	nop
 80074f0:	20025e1c 	.word	0x20025e1c

080074f4 <_printf_common>:
 80074f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f8:	4616      	mov	r6, r2
 80074fa:	4698      	mov	r8, r3
 80074fc:	688a      	ldr	r2, [r1, #8]
 80074fe:	690b      	ldr	r3, [r1, #16]
 8007500:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007504:	4293      	cmp	r3, r2
 8007506:	bfb8      	it	lt
 8007508:	4613      	movlt	r3, r2
 800750a:	6033      	str	r3, [r6, #0]
 800750c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007510:	4607      	mov	r7, r0
 8007512:	460c      	mov	r4, r1
 8007514:	b10a      	cbz	r2, 800751a <_printf_common+0x26>
 8007516:	3301      	adds	r3, #1
 8007518:	6033      	str	r3, [r6, #0]
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	0699      	lsls	r1, r3, #26
 800751e:	bf42      	ittt	mi
 8007520:	6833      	ldrmi	r3, [r6, #0]
 8007522:	3302      	addmi	r3, #2
 8007524:	6033      	strmi	r3, [r6, #0]
 8007526:	6825      	ldr	r5, [r4, #0]
 8007528:	f015 0506 	ands.w	r5, r5, #6
 800752c:	d106      	bne.n	800753c <_printf_common+0x48>
 800752e:	f104 0a19 	add.w	sl, r4, #25
 8007532:	68e3      	ldr	r3, [r4, #12]
 8007534:	6832      	ldr	r2, [r6, #0]
 8007536:	1a9b      	subs	r3, r3, r2
 8007538:	42ab      	cmp	r3, r5
 800753a:	dc26      	bgt.n	800758a <_printf_common+0x96>
 800753c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007540:	6822      	ldr	r2, [r4, #0]
 8007542:	3b00      	subs	r3, #0
 8007544:	bf18      	it	ne
 8007546:	2301      	movne	r3, #1
 8007548:	0692      	lsls	r2, r2, #26
 800754a:	d42b      	bmi.n	80075a4 <_printf_common+0xb0>
 800754c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007550:	4641      	mov	r1, r8
 8007552:	4638      	mov	r0, r7
 8007554:	47c8      	blx	r9
 8007556:	3001      	adds	r0, #1
 8007558:	d01e      	beq.n	8007598 <_printf_common+0xa4>
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	6922      	ldr	r2, [r4, #16]
 800755e:	f003 0306 	and.w	r3, r3, #6
 8007562:	2b04      	cmp	r3, #4
 8007564:	bf02      	ittt	eq
 8007566:	68e5      	ldreq	r5, [r4, #12]
 8007568:	6833      	ldreq	r3, [r6, #0]
 800756a:	1aed      	subeq	r5, r5, r3
 800756c:	68a3      	ldr	r3, [r4, #8]
 800756e:	bf0c      	ite	eq
 8007570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007574:	2500      	movne	r5, #0
 8007576:	4293      	cmp	r3, r2
 8007578:	bfc4      	itt	gt
 800757a:	1a9b      	subgt	r3, r3, r2
 800757c:	18ed      	addgt	r5, r5, r3
 800757e:	2600      	movs	r6, #0
 8007580:	341a      	adds	r4, #26
 8007582:	42b5      	cmp	r5, r6
 8007584:	d11a      	bne.n	80075bc <_printf_common+0xc8>
 8007586:	2000      	movs	r0, #0
 8007588:	e008      	b.n	800759c <_printf_common+0xa8>
 800758a:	2301      	movs	r3, #1
 800758c:	4652      	mov	r2, sl
 800758e:	4641      	mov	r1, r8
 8007590:	4638      	mov	r0, r7
 8007592:	47c8      	blx	r9
 8007594:	3001      	adds	r0, #1
 8007596:	d103      	bne.n	80075a0 <_printf_common+0xac>
 8007598:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800759c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a0:	3501      	adds	r5, #1
 80075a2:	e7c6      	b.n	8007532 <_printf_common+0x3e>
 80075a4:	18e1      	adds	r1, r4, r3
 80075a6:	1c5a      	adds	r2, r3, #1
 80075a8:	2030      	movs	r0, #48	@ 0x30
 80075aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075ae:	4422      	add	r2, r4
 80075b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075b8:	3302      	adds	r3, #2
 80075ba:	e7c7      	b.n	800754c <_printf_common+0x58>
 80075bc:	2301      	movs	r3, #1
 80075be:	4622      	mov	r2, r4
 80075c0:	4641      	mov	r1, r8
 80075c2:	4638      	mov	r0, r7
 80075c4:	47c8      	blx	r9
 80075c6:	3001      	adds	r0, #1
 80075c8:	d0e6      	beq.n	8007598 <_printf_common+0xa4>
 80075ca:	3601      	adds	r6, #1
 80075cc:	e7d9      	b.n	8007582 <_printf_common+0x8e>
	...

080075d0 <_printf_i>:
 80075d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075d4:	7e0f      	ldrb	r7, [r1, #24]
 80075d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075d8:	2f78      	cmp	r7, #120	@ 0x78
 80075da:	4691      	mov	r9, r2
 80075dc:	4680      	mov	r8, r0
 80075de:	460c      	mov	r4, r1
 80075e0:	469a      	mov	sl, r3
 80075e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075e6:	d807      	bhi.n	80075f8 <_printf_i+0x28>
 80075e8:	2f62      	cmp	r7, #98	@ 0x62
 80075ea:	d80a      	bhi.n	8007602 <_printf_i+0x32>
 80075ec:	2f00      	cmp	r7, #0
 80075ee:	f000 80d1 	beq.w	8007794 <_printf_i+0x1c4>
 80075f2:	2f58      	cmp	r7, #88	@ 0x58
 80075f4:	f000 80b8 	beq.w	8007768 <_printf_i+0x198>
 80075f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007600:	e03a      	b.n	8007678 <_printf_i+0xa8>
 8007602:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007606:	2b15      	cmp	r3, #21
 8007608:	d8f6      	bhi.n	80075f8 <_printf_i+0x28>
 800760a:	a101      	add	r1, pc, #4	@ (adr r1, 8007610 <_printf_i+0x40>)
 800760c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007610:	08007669 	.word	0x08007669
 8007614:	0800767d 	.word	0x0800767d
 8007618:	080075f9 	.word	0x080075f9
 800761c:	080075f9 	.word	0x080075f9
 8007620:	080075f9 	.word	0x080075f9
 8007624:	080075f9 	.word	0x080075f9
 8007628:	0800767d 	.word	0x0800767d
 800762c:	080075f9 	.word	0x080075f9
 8007630:	080075f9 	.word	0x080075f9
 8007634:	080075f9 	.word	0x080075f9
 8007638:	080075f9 	.word	0x080075f9
 800763c:	0800777b 	.word	0x0800777b
 8007640:	080076a7 	.word	0x080076a7
 8007644:	08007735 	.word	0x08007735
 8007648:	080075f9 	.word	0x080075f9
 800764c:	080075f9 	.word	0x080075f9
 8007650:	0800779d 	.word	0x0800779d
 8007654:	080075f9 	.word	0x080075f9
 8007658:	080076a7 	.word	0x080076a7
 800765c:	080075f9 	.word	0x080075f9
 8007660:	080075f9 	.word	0x080075f9
 8007664:	0800773d 	.word	0x0800773d
 8007668:	6833      	ldr	r3, [r6, #0]
 800766a:	1d1a      	adds	r2, r3, #4
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6032      	str	r2, [r6, #0]
 8007670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007674:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007678:	2301      	movs	r3, #1
 800767a:	e09c      	b.n	80077b6 <_printf_i+0x1e6>
 800767c:	6833      	ldr	r3, [r6, #0]
 800767e:	6820      	ldr	r0, [r4, #0]
 8007680:	1d19      	adds	r1, r3, #4
 8007682:	6031      	str	r1, [r6, #0]
 8007684:	0606      	lsls	r6, r0, #24
 8007686:	d501      	bpl.n	800768c <_printf_i+0xbc>
 8007688:	681d      	ldr	r5, [r3, #0]
 800768a:	e003      	b.n	8007694 <_printf_i+0xc4>
 800768c:	0645      	lsls	r5, r0, #25
 800768e:	d5fb      	bpl.n	8007688 <_printf_i+0xb8>
 8007690:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007694:	2d00      	cmp	r5, #0
 8007696:	da03      	bge.n	80076a0 <_printf_i+0xd0>
 8007698:	232d      	movs	r3, #45	@ 0x2d
 800769a:	426d      	negs	r5, r5
 800769c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076a0:	4858      	ldr	r0, [pc, #352]	@ (8007804 <_printf_i+0x234>)
 80076a2:	230a      	movs	r3, #10
 80076a4:	e011      	b.n	80076ca <_printf_i+0xfa>
 80076a6:	6821      	ldr	r1, [r4, #0]
 80076a8:	6833      	ldr	r3, [r6, #0]
 80076aa:	0608      	lsls	r0, r1, #24
 80076ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80076b0:	d402      	bmi.n	80076b8 <_printf_i+0xe8>
 80076b2:	0649      	lsls	r1, r1, #25
 80076b4:	bf48      	it	mi
 80076b6:	b2ad      	uxthmi	r5, r5
 80076b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80076ba:	4852      	ldr	r0, [pc, #328]	@ (8007804 <_printf_i+0x234>)
 80076bc:	6033      	str	r3, [r6, #0]
 80076be:	bf14      	ite	ne
 80076c0:	230a      	movne	r3, #10
 80076c2:	2308      	moveq	r3, #8
 80076c4:	2100      	movs	r1, #0
 80076c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076ca:	6866      	ldr	r6, [r4, #4]
 80076cc:	60a6      	str	r6, [r4, #8]
 80076ce:	2e00      	cmp	r6, #0
 80076d0:	db05      	blt.n	80076de <_printf_i+0x10e>
 80076d2:	6821      	ldr	r1, [r4, #0]
 80076d4:	432e      	orrs	r6, r5
 80076d6:	f021 0104 	bic.w	r1, r1, #4
 80076da:	6021      	str	r1, [r4, #0]
 80076dc:	d04b      	beq.n	8007776 <_printf_i+0x1a6>
 80076de:	4616      	mov	r6, r2
 80076e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80076e4:	fb03 5711 	mls	r7, r3, r1, r5
 80076e8:	5dc7      	ldrb	r7, [r0, r7]
 80076ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076ee:	462f      	mov	r7, r5
 80076f0:	42bb      	cmp	r3, r7
 80076f2:	460d      	mov	r5, r1
 80076f4:	d9f4      	bls.n	80076e0 <_printf_i+0x110>
 80076f6:	2b08      	cmp	r3, #8
 80076f8:	d10b      	bne.n	8007712 <_printf_i+0x142>
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	07df      	lsls	r7, r3, #31
 80076fe:	d508      	bpl.n	8007712 <_printf_i+0x142>
 8007700:	6923      	ldr	r3, [r4, #16]
 8007702:	6861      	ldr	r1, [r4, #4]
 8007704:	4299      	cmp	r1, r3
 8007706:	bfde      	ittt	le
 8007708:	2330      	movle	r3, #48	@ 0x30
 800770a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800770e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007712:	1b92      	subs	r2, r2, r6
 8007714:	6122      	str	r2, [r4, #16]
 8007716:	f8cd a000 	str.w	sl, [sp]
 800771a:	464b      	mov	r3, r9
 800771c:	aa03      	add	r2, sp, #12
 800771e:	4621      	mov	r1, r4
 8007720:	4640      	mov	r0, r8
 8007722:	f7ff fee7 	bl	80074f4 <_printf_common>
 8007726:	3001      	adds	r0, #1
 8007728:	d14a      	bne.n	80077c0 <_printf_i+0x1f0>
 800772a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800772e:	b004      	add	sp, #16
 8007730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	f043 0320 	orr.w	r3, r3, #32
 800773a:	6023      	str	r3, [r4, #0]
 800773c:	4832      	ldr	r0, [pc, #200]	@ (8007808 <_printf_i+0x238>)
 800773e:	2778      	movs	r7, #120	@ 0x78
 8007740:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	6831      	ldr	r1, [r6, #0]
 8007748:	061f      	lsls	r7, r3, #24
 800774a:	f851 5b04 	ldr.w	r5, [r1], #4
 800774e:	d402      	bmi.n	8007756 <_printf_i+0x186>
 8007750:	065f      	lsls	r7, r3, #25
 8007752:	bf48      	it	mi
 8007754:	b2ad      	uxthmi	r5, r5
 8007756:	6031      	str	r1, [r6, #0]
 8007758:	07d9      	lsls	r1, r3, #31
 800775a:	bf44      	itt	mi
 800775c:	f043 0320 	orrmi.w	r3, r3, #32
 8007760:	6023      	strmi	r3, [r4, #0]
 8007762:	b11d      	cbz	r5, 800776c <_printf_i+0x19c>
 8007764:	2310      	movs	r3, #16
 8007766:	e7ad      	b.n	80076c4 <_printf_i+0xf4>
 8007768:	4826      	ldr	r0, [pc, #152]	@ (8007804 <_printf_i+0x234>)
 800776a:	e7e9      	b.n	8007740 <_printf_i+0x170>
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	f023 0320 	bic.w	r3, r3, #32
 8007772:	6023      	str	r3, [r4, #0]
 8007774:	e7f6      	b.n	8007764 <_printf_i+0x194>
 8007776:	4616      	mov	r6, r2
 8007778:	e7bd      	b.n	80076f6 <_printf_i+0x126>
 800777a:	6833      	ldr	r3, [r6, #0]
 800777c:	6825      	ldr	r5, [r4, #0]
 800777e:	6961      	ldr	r1, [r4, #20]
 8007780:	1d18      	adds	r0, r3, #4
 8007782:	6030      	str	r0, [r6, #0]
 8007784:	062e      	lsls	r6, r5, #24
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	d501      	bpl.n	800778e <_printf_i+0x1be>
 800778a:	6019      	str	r1, [r3, #0]
 800778c:	e002      	b.n	8007794 <_printf_i+0x1c4>
 800778e:	0668      	lsls	r0, r5, #25
 8007790:	d5fb      	bpl.n	800778a <_printf_i+0x1ba>
 8007792:	8019      	strh	r1, [r3, #0]
 8007794:	2300      	movs	r3, #0
 8007796:	6123      	str	r3, [r4, #16]
 8007798:	4616      	mov	r6, r2
 800779a:	e7bc      	b.n	8007716 <_printf_i+0x146>
 800779c:	6833      	ldr	r3, [r6, #0]
 800779e:	1d1a      	adds	r2, r3, #4
 80077a0:	6032      	str	r2, [r6, #0]
 80077a2:	681e      	ldr	r6, [r3, #0]
 80077a4:	6862      	ldr	r2, [r4, #4]
 80077a6:	2100      	movs	r1, #0
 80077a8:	4630      	mov	r0, r6
 80077aa:	f7f8 fd29 	bl	8000200 <memchr>
 80077ae:	b108      	cbz	r0, 80077b4 <_printf_i+0x1e4>
 80077b0:	1b80      	subs	r0, r0, r6
 80077b2:	6060      	str	r0, [r4, #4]
 80077b4:	6863      	ldr	r3, [r4, #4]
 80077b6:	6123      	str	r3, [r4, #16]
 80077b8:	2300      	movs	r3, #0
 80077ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077be:	e7aa      	b.n	8007716 <_printf_i+0x146>
 80077c0:	6923      	ldr	r3, [r4, #16]
 80077c2:	4632      	mov	r2, r6
 80077c4:	4649      	mov	r1, r9
 80077c6:	4640      	mov	r0, r8
 80077c8:	47d0      	blx	sl
 80077ca:	3001      	adds	r0, #1
 80077cc:	d0ad      	beq.n	800772a <_printf_i+0x15a>
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	079b      	lsls	r3, r3, #30
 80077d2:	d413      	bmi.n	80077fc <_printf_i+0x22c>
 80077d4:	68e0      	ldr	r0, [r4, #12]
 80077d6:	9b03      	ldr	r3, [sp, #12]
 80077d8:	4298      	cmp	r0, r3
 80077da:	bfb8      	it	lt
 80077dc:	4618      	movlt	r0, r3
 80077de:	e7a6      	b.n	800772e <_printf_i+0x15e>
 80077e0:	2301      	movs	r3, #1
 80077e2:	4632      	mov	r2, r6
 80077e4:	4649      	mov	r1, r9
 80077e6:	4640      	mov	r0, r8
 80077e8:	47d0      	blx	sl
 80077ea:	3001      	adds	r0, #1
 80077ec:	d09d      	beq.n	800772a <_printf_i+0x15a>
 80077ee:	3501      	adds	r5, #1
 80077f0:	68e3      	ldr	r3, [r4, #12]
 80077f2:	9903      	ldr	r1, [sp, #12]
 80077f4:	1a5b      	subs	r3, r3, r1
 80077f6:	42ab      	cmp	r3, r5
 80077f8:	dcf2      	bgt.n	80077e0 <_printf_i+0x210>
 80077fa:	e7eb      	b.n	80077d4 <_printf_i+0x204>
 80077fc:	2500      	movs	r5, #0
 80077fe:	f104 0619 	add.w	r6, r4, #25
 8007802:	e7f5      	b.n	80077f0 <_printf_i+0x220>
 8007804:	08009763 	.word	0x08009763
 8007808:	08009774 	.word	0x08009774

0800780c <__sflush_r>:
 800780c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007814:	0716      	lsls	r6, r2, #28
 8007816:	4605      	mov	r5, r0
 8007818:	460c      	mov	r4, r1
 800781a:	d454      	bmi.n	80078c6 <__sflush_r+0xba>
 800781c:	684b      	ldr	r3, [r1, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	dc02      	bgt.n	8007828 <__sflush_r+0x1c>
 8007822:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007824:	2b00      	cmp	r3, #0
 8007826:	dd48      	ble.n	80078ba <__sflush_r+0xae>
 8007828:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800782a:	2e00      	cmp	r6, #0
 800782c:	d045      	beq.n	80078ba <__sflush_r+0xae>
 800782e:	2300      	movs	r3, #0
 8007830:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007834:	682f      	ldr	r7, [r5, #0]
 8007836:	6a21      	ldr	r1, [r4, #32]
 8007838:	602b      	str	r3, [r5, #0]
 800783a:	d030      	beq.n	800789e <__sflush_r+0x92>
 800783c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800783e:	89a3      	ldrh	r3, [r4, #12]
 8007840:	0759      	lsls	r1, r3, #29
 8007842:	d505      	bpl.n	8007850 <__sflush_r+0x44>
 8007844:	6863      	ldr	r3, [r4, #4]
 8007846:	1ad2      	subs	r2, r2, r3
 8007848:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800784a:	b10b      	cbz	r3, 8007850 <__sflush_r+0x44>
 800784c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800784e:	1ad2      	subs	r2, r2, r3
 8007850:	2300      	movs	r3, #0
 8007852:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007854:	6a21      	ldr	r1, [r4, #32]
 8007856:	4628      	mov	r0, r5
 8007858:	47b0      	blx	r6
 800785a:	1c43      	adds	r3, r0, #1
 800785c:	89a3      	ldrh	r3, [r4, #12]
 800785e:	d106      	bne.n	800786e <__sflush_r+0x62>
 8007860:	6829      	ldr	r1, [r5, #0]
 8007862:	291d      	cmp	r1, #29
 8007864:	d82b      	bhi.n	80078be <__sflush_r+0xb2>
 8007866:	4a2a      	ldr	r2, [pc, #168]	@ (8007910 <__sflush_r+0x104>)
 8007868:	40ca      	lsrs	r2, r1
 800786a:	07d6      	lsls	r6, r2, #31
 800786c:	d527      	bpl.n	80078be <__sflush_r+0xb2>
 800786e:	2200      	movs	r2, #0
 8007870:	6062      	str	r2, [r4, #4]
 8007872:	04d9      	lsls	r1, r3, #19
 8007874:	6922      	ldr	r2, [r4, #16]
 8007876:	6022      	str	r2, [r4, #0]
 8007878:	d504      	bpl.n	8007884 <__sflush_r+0x78>
 800787a:	1c42      	adds	r2, r0, #1
 800787c:	d101      	bne.n	8007882 <__sflush_r+0x76>
 800787e:	682b      	ldr	r3, [r5, #0]
 8007880:	b903      	cbnz	r3, 8007884 <__sflush_r+0x78>
 8007882:	6560      	str	r0, [r4, #84]	@ 0x54
 8007884:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007886:	602f      	str	r7, [r5, #0]
 8007888:	b1b9      	cbz	r1, 80078ba <__sflush_r+0xae>
 800788a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800788e:	4299      	cmp	r1, r3
 8007890:	d002      	beq.n	8007898 <__sflush_r+0x8c>
 8007892:	4628      	mov	r0, r5
 8007894:	f000 f962 	bl	8007b5c <_free_r>
 8007898:	2300      	movs	r3, #0
 800789a:	6363      	str	r3, [r4, #52]	@ 0x34
 800789c:	e00d      	b.n	80078ba <__sflush_r+0xae>
 800789e:	2301      	movs	r3, #1
 80078a0:	4628      	mov	r0, r5
 80078a2:	47b0      	blx	r6
 80078a4:	4602      	mov	r2, r0
 80078a6:	1c50      	adds	r0, r2, #1
 80078a8:	d1c9      	bne.n	800783e <__sflush_r+0x32>
 80078aa:	682b      	ldr	r3, [r5, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d0c6      	beq.n	800783e <__sflush_r+0x32>
 80078b0:	2b1d      	cmp	r3, #29
 80078b2:	d001      	beq.n	80078b8 <__sflush_r+0xac>
 80078b4:	2b16      	cmp	r3, #22
 80078b6:	d11e      	bne.n	80078f6 <__sflush_r+0xea>
 80078b8:	602f      	str	r7, [r5, #0]
 80078ba:	2000      	movs	r0, #0
 80078bc:	e022      	b.n	8007904 <__sflush_r+0xf8>
 80078be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078c2:	b21b      	sxth	r3, r3
 80078c4:	e01b      	b.n	80078fe <__sflush_r+0xf2>
 80078c6:	690f      	ldr	r7, [r1, #16]
 80078c8:	2f00      	cmp	r7, #0
 80078ca:	d0f6      	beq.n	80078ba <__sflush_r+0xae>
 80078cc:	0793      	lsls	r3, r2, #30
 80078ce:	680e      	ldr	r6, [r1, #0]
 80078d0:	bf08      	it	eq
 80078d2:	694b      	ldreq	r3, [r1, #20]
 80078d4:	600f      	str	r7, [r1, #0]
 80078d6:	bf18      	it	ne
 80078d8:	2300      	movne	r3, #0
 80078da:	eba6 0807 	sub.w	r8, r6, r7
 80078de:	608b      	str	r3, [r1, #8]
 80078e0:	f1b8 0f00 	cmp.w	r8, #0
 80078e4:	dde9      	ble.n	80078ba <__sflush_r+0xae>
 80078e6:	6a21      	ldr	r1, [r4, #32]
 80078e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80078ea:	4643      	mov	r3, r8
 80078ec:	463a      	mov	r2, r7
 80078ee:	4628      	mov	r0, r5
 80078f0:	47b0      	blx	r6
 80078f2:	2800      	cmp	r0, #0
 80078f4:	dc08      	bgt.n	8007908 <__sflush_r+0xfc>
 80078f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078fe:	81a3      	strh	r3, [r4, #12]
 8007900:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007908:	4407      	add	r7, r0
 800790a:	eba8 0800 	sub.w	r8, r8, r0
 800790e:	e7e7      	b.n	80078e0 <__sflush_r+0xd4>
 8007910:	20400001 	.word	0x20400001

08007914 <_fflush_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	690b      	ldr	r3, [r1, #16]
 8007918:	4605      	mov	r5, r0
 800791a:	460c      	mov	r4, r1
 800791c:	b913      	cbnz	r3, 8007924 <_fflush_r+0x10>
 800791e:	2500      	movs	r5, #0
 8007920:	4628      	mov	r0, r5
 8007922:	bd38      	pop	{r3, r4, r5, pc}
 8007924:	b118      	cbz	r0, 800792e <_fflush_r+0x1a>
 8007926:	6a03      	ldr	r3, [r0, #32]
 8007928:	b90b      	cbnz	r3, 800792e <_fflush_r+0x1a>
 800792a:	f7ff fb7f 	bl	800702c <__sinit>
 800792e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d0f3      	beq.n	800791e <_fflush_r+0xa>
 8007936:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007938:	07d0      	lsls	r0, r2, #31
 800793a:	d404      	bmi.n	8007946 <_fflush_r+0x32>
 800793c:	0599      	lsls	r1, r3, #22
 800793e:	d402      	bmi.n	8007946 <_fflush_r+0x32>
 8007940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007942:	f7ff fbdc 	bl	80070fe <__retarget_lock_acquire_recursive>
 8007946:	4628      	mov	r0, r5
 8007948:	4621      	mov	r1, r4
 800794a:	f7ff ff5f 	bl	800780c <__sflush_r>
 800794e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007950:	07da      	lsls	r2, r3, #31
 8007952:	4605      	mov	r5, r0
 8007954:	d4e4      	bmi.n	8007920 <_fflush_r+0xc>
 8007956:	89a3      	ldrh	r3, [r4, #12]
 8007958:	059b      	lsls	r3, r3, #22
 800795a:	d4e1      	bmi.n	8007920 <_fflush_r+0xc>
 800795c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800795e:	f7ff fbcf 	bl	8007100 <__retarget_lock_release_recursive>
 8007962:	e7dd      	b.n	8007920 <_fflush_r+0xc>

08007964 <__malloc_lock>:
 8007964:	4801      	ldr	r0, [pc, #4]	@ (800796c <__malloc_lock+0x8>)
 8007966:	f7ff bbca 	b.w	80070fe <__retarget_lock_acquire_recursive>
 800796a:	bf00      	nop
 800796c:	20025e14 	.word	0x20025e14

08007970 <__malloc_unlock>:
 8007970:	4801      	ldr	r0, [pc, #4]	@ (8007978 <__malloc_unlock+0x8>)
 8007972:	f7ff bbc5 	b.w	8007100 <__retarget_lock_release_recursive>
 8007976:	bf00      	nop
 8007978:	20025e14 	.word	0x20025e14

0800797c <__sread>:
 800797c:	b510      	push	{r4, lr}
 800797e:	460c      	mov	r4, r1
 8007980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007984:	f000 f898 	bl	8007ab8 <_read_r>
 8007988:	2800      	cmp	r0, #0
 800798a:	bfab      	itete	ge
 800798c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800798e:	89a3      	ldrhlt	r3, [r4, #12]
 8007990:	181b      	addge	r3, r3, r0
 8007992:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007996:	bfac      	ite	ge
 8007998:	6563      	strge	r3, [r4, #84]	@ 0x54
 800799a:	81a3      	strhlt	r3, [r4, #12]
 800799c:	bd10      	pop	{r4, pc}

0800799e <__swrite>:
 800799e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a2:	461f      	mov	r7, r3
 80079a4:	898b      	ldrh	r3, [r1, #12]
 80079a6:	05db      	lsls	r3, r3, #23
 80079a8:	4605      	mov	r5, r0
 80079aa:	460c      	mov	r4, r1
 80079ac:	4616      	mov	r6, r2
 80079ae:	d505      	bpl.n	80079bc <__swrite+0x1e>
 80079b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b4:	2302      	movs	r3, #2
 80079b6:	2200      	movs	r2, #0
 80079b8:	f000 f86c 	bl	8007a94 <_lseek_r>
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079c6:	81a3      	strh	r3, [r4, #12]
 80079c8:	4632      	mov	r2, r6
 80079ca:	463b      	mov	r3, r7
 80079cc:	4628      	mov	r0, r5
 80079ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079d2:	f000 b893 	b.w	8007afc <_write_r>

080079d6 <__sseek>:
 80079d6:	b510      	push	{r4, lr}
 80079d8:	460c      	mov	r4, r1
 80079da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079de:	f000 f859 	bl	8007a94 <_lseek_r>
 80079e2:	1c43      	adds	r3, r0, #1
 80079e4:	89a3      	ldrh	r3, [r4, #12]
 80079e6:	bf15      	itete	ne
 80079e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80079ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80079ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079f2:	81a3      	strheq	r3, [r4, #12]
 80079f4:	bf18      	it	ne
 80079f6:	81a3      	strhne	r3, [r4, #12]
 80079f8:	bd10      	pop	{r4, pc}

080079fa <__sclose>:
 80079fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079fe:	f000 b88f 	b.w	8007b20 <_close_r>

08007a02 <_realloc_r>:
 8007a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a06:	4607      	mov	r7, r0
 8007a08:	4614      	mov	r4, r2
 8007a0a:	460d      	mov	r5, r1
 8007a0c:	b921      	cbnz	r1, 8007a18 <_realloc_r+0x16>
 8007a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a12:	4611      	mov	r1, r2
 8007a14:	f7ff bcee 	b.w	80073f4 <_malloc_r>
 8007a18:	b92a      	cbnz	r2, 8007a26 <_realloc_r+0x24>
 8007a1a:	f000 f89f 	bl	8007b5c <_free_r>
 8007a1e:	4625      	mov	r5, r4
 8007a20:	4628      	mov	r0, r5
 8007a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a26:	f000 f8e3 	bl	8007bf0 <_malloc_usable_size_r>
 8007a2a:	4284      	cmp	r4, r0
 8007a2c:	4606      	mov	r6, r0
 8007a2e:	d802      	bhi.n	8007a36 <_realloc_r+0x34>
 8007a30:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007a34:	d8f4      	bhi.n	8007a20 <_realloc_r+0x1e>
 8007a36:	4621      	mov	r1, r4
 8007a38:	4638      	mov	r0, r7
 8007a3a:	f7ff fcdb 	bl	80073f4 <_malloc_r>
 8007a3e:	4680      	mov	r8, r0
 8007a40:	b908      	cbnz	r0, 8007a46 <_realloc_r+0x44>
 8007a42:	4645      	mov	r5, r8
 8007a44:	e7ec      	b.n	8007a20 <_realloc_r+0x1e>
 8007a46:	42b4      	cmp	r4, r6
 8007a48:	4622      	mov	r2, r4
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	bf28      	it	cs
 8007a4e:	4632      	movcs	r2, r6
 8007a50:	f000 f876 	bl	8007b40 <memcpy>
 8007a54:	4629      	mov	r1, r5
 8007a56:	4638      	mov	r0, r7
 8007a58:	f000 f880 	bl	8007b5c <_free_r>
 8007a5c:	e7f1      	b.n	8007a42 <_realloc_r+0x40>

08007a5e <memmove>:
 8007a5e:	4288      	cmp	r0, r1
 8007a60:	b510      	push	{r4, lr}
 8007a62:	eb01 0402 	add.w	r4, r1, r2
 8007a66:	d902      	bls.n	8007a6e <memmove+0x10>
 8007a68:	4284      	cmp	r4, r0
 8007a6a:	4623      	mov	r3, r4
 8007a6c:	d807      	bhi.n	8007a7e <memmove+0x20>
 8007a6e:	1e43      	subs	r3, r0, #1
 8007a70:	42a1      	cmp	r1, r4
 8007a72:	d008      	beq.n	8007a86 <memmove+0x28>
 8007a74:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a78:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a7c:	e7f8      	b.n	8007a70 <memmove+0x12>
 8007a7e:	4402      	add	r2, r0
 8007a80:	4601      	mov	r1, r0
 8007a82:	428a      	cmp	r2, r1
 8007a84:	d100      	bne.n	8007a88 <memmove+0x2a>
 8007a86:	bd10      	pop	{r4, pc}
 8007a88:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a8c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a90:	e7f7      	b.n	8007a82 <memmove+0x24>
	...

08007a94 <_lseek_r>:
 8007a94:	b538      	push	{r3, r4, r5, lr}
 8007a96:	4d07      	ldr	r5, [pc, #28]	@ (8007ab4 <_lseek_r+0x20>)
 8007a98:	4604      	mov	r4, r0
 8007a9a:	4608      	mov	r0, r1
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	602a      	str	r2, [r5, #0]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	f7ff f823 	bl	8006aee <_lseek>
 8007aa8:	1c43      	adds	r3, r0, #1
 8007aaa:	d102      	bne.n	8007ab2 <_lseek_r+0x1e>
 8007aac:	682b      	ldr	r3, [r5, #0]
 8007aae:	b103      	cbz	r3, 8007ab2 <_lseek_r+0x1e>
 8007ab0:	6023      	str	r3, [r4, #0]
 8007ab2:	bd38      	pop	{r3, r4, r5, pc}
 8007ab4:	20025e20 	.word	0x20025e20

08007ab8 <_read_r>:
 8007ab8:	b538      	push	{r3, r4, r5, lr}
 8007aba:	4d07      	ldr	r5, [pc, #28]	@ (8007ad8 <_read_r+0x20>)
 8007abc:	4604      	mov	r4, r0
 8007abe:	4608      	mov	r0, r1
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	602a      	str	r2, [r5, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	f7fe ffbb 	bl	8006a42 <_read>
 8007acc:	1c43      	adds	r3, r0, #1
 8007ace:	d102      	bne.n	8007ad6 <_read_r+0x1e>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	b103      	cbz	r3, 8007ad6 <_read_r+0x1e>
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	bd38      	pop	{r3, r4, r5, pc}
 8007ad8:	20025e20 	.word	0x20025e20

08007adc <_sbrk_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	4d06      	ldr	r5, [pc, #24]	@ (8007af8 <_sbrk_r+0x1c>)
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	602b      	str	r3, [r5, #0]
 8007ae8:	f7fb faec 	bl	80030c4 <_sbrk>
 8007aec:	1c43      	adds	r3, r0, #1
 8007aee:	d102      	bne.n	8007af6 <_sbrk_r+0x1a>
 8007af0:	682b      	ldr	r3, [r5, #0]
 8007af2:	b103      	cbz	r3, 8007af6 <_sbrk_r+0x1a>
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	20025e20 	.word	0x20025e20

08007afc <_write_r>:
 8007afc:	b538      	push	{r3, r4, r5, lr}
 8007afe:	4d07      	ldr	r5, [pc, #28]	@ (8007b1c <_write_r+0x20>)
 8007b00:	4604      	mov	r4, r0
 8007b02:	4608      	mov	r0, r1
 8007b04:	4611      	mov	r1, r2
 8007b06:	2200      	movs	r2, #0
 8007b08:	602a      	str	r2, [r5, #0]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	f7ff f801 	bl	8006b12 <_write>
 8007b10:	1c43      	adds	r3, r0, #1
 8007b12:	d102      	bne.n	8007b1a <_write_r+0x1e>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	b103      	cbz	r3, 8007b1a <_write_r+0x1e>
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	bd38      	pop	{r3, r4, r5, pc}
 8007b1c:	20025e20 	.word	0x20025e20

08007b20 <_close_r>:
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	4d06      	ldr	r5, [pc, #24]	@ (8007b3c <_close_r+0x1c>)
 8007b24:	2300      	movs	r3, #0
 8007b26:	4604      	mov	r4, r0
 8007b28:	4608      	mov	r0, r1
 8007b2a:	602b      	str	r3, [r5, #0]
 8007b2c:	f7ff f81e 	bl	8006b6c <_close>
 8007b30:	1c43      	adds	r3, r0, #1
 8007b32:	d102      	bne.n	8007b3a <_close_r+0x1a>
 8007b34:	682b      	ldr	r3, [r5, #0]
 8007b36:	b103      	cbz	r3, 8007b3a <_close_r+0x1a>
 8007b38:	6023      	str	r3, [r4, #0]
 8007b3a:	bd38      	pop	{r3, r4, r5, pc}
 8007b3c:	20025e20 	.word	0x20025e20

08007b40 <memcpy>:
 8007b40:	440a      	add	r2, r1
 8007b42:	4291      	cmp	r1, r2
 8007b44:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007b48:	d100      	bne.n	8007b4c <memcpy+0xc>
 8007b4a:	4770      	bx	lr
 8007b4c:	b510      	push	{r4, lr}
 8007b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b56:	4291      	cmp	r1, r2
 8007b58:	d1f9      	bne.n	8007b4e <memcpy+0xe>
 8007b5a:	bd10      	pop	{r4, pc}

08007b5c <_free_r>:
 8007b5c:	b538      	push	{r3, r4, r5, lr}
 8007b5e:	4605      	mov	r5, r0
 8007b60:	2900      	cmp	r1, #0
 8007b62:	d041      	beq.n	8007be8 <_free_r+0x8c>
 8007b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b68:	1f0c      	subs	r4, r1, #4
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	bfb8      	it	lt
 8007b6e:	18e4      	addlt	r4, r4, r3
 8007b70:	f7ff fef8 	bl	8007964 <__malloc_lock>
 8007b74:	4a1d      	ldr	r2, [pc, #116]	@ (8007bec <_free_r+0x90>)
 8007b76:	6813      	ldr	r3, [r2, #0]
 8007b78:	b933      	cbnz	r3, 8007b88 <_free_r+0x2c>
 8007b7a:	6063      	str	r3, [r4, #4]
 8007b7c:	6014      	str	r4, [r2, #0]
 8007b7e:	4628      	mov	r0, r5
 8007b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b84:	f7ff bef4 	b.w	8007970 <__malloc_unlock>
 8007b88:	42a3      	cmp	r3, r4
 8007b8a:	d908      	bls.n	8007b9e <_free_r+0x42>
 8007b8c:	6820      	ldr	r0, [r4, #0]
 8007b8e:	1821      	adds	r1, r4, r0
 8007b90:	428b      	cmp	r3, r1
 8007b92:	bf01      	itttt	eq
 8007b94:	6819      	ldreq	r1, [r3, #0]
 8007b96:	685b      	ldreq	r3, [r3, #4]
 8007b98:	1809      	addeq	r1, r1, r0
 8007b9a:	6021      	streq	r1, [r4, #0]
 8007b9c:	e7ed      	b.n	8007b7a <_free_r+0x1e>
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	b10b      	cbz	r3, 8007ba8 <_free_r+0x4c>
 8007ba4:	42a3      	cmp	r3, r4
 8007ba6:	d9fa      	bls.n	8007b9e <_free_r+0x42>
 8007ba8:	6811      	ldr	r1, [r2, #0]
 8007baa:	1850      	adds	r0, r2, r1
 8007bac:	42a0      	cmp	r0, r4
 8007bae:	d10b      	bne.n	8007bc8 <_free_r+0x6c>
 8007bb0:	6820      	ldr	r0, [r4, #0]
 8007bb2:	4401      	add	r1, r0
 8007bb4:	1850      	adds	r0, r2, r1
 8007bb6:	4283      	cmp	r3, r0
 8007bb8:	6011      	str	r1, [r2, #0]
 8007bba:	d1e0      	bne.n	8007b7e <_free_r+0x22>
 8007bbc:	6818      	ldr	r0, [r3, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	6053      	str	r3, [r2, #4]
 8007bc2:	4408      	add	r0, r1
 8007bc4:	6010      	str	r0, [r2, #0]
 8007bc6:	e7da      	b.n	8007b7e <_free_r+0x22>
 8007bc8:	d902      	bls.n	8007bd0 <_free_r+0x74>
 8007bca:	230c      	movs	r3, #12
 8007bcc:	602b      	str	r3, [r5, #0]
 8007bce:	e7d6      	b.n	8007b7e <_free_r+0x22>
 8007bd0:	6820      	ldr	r0, [r4, #0]
 8007bd2:	1821      	adds	r1, r4, r0
 8007bd4:	428b      	cmp	r3, r1
 8007bd6:	bf04      	itt	eq
 8007bd8:	6819      	ldreq	r1, [r3, #0]
 8007bda:	685b      	ldreq	r3, [r3, #4]
 8007bdc:	6063      	str	r3, [r4, #4]
 8007bde:	bf04      	itt	eq
 8007be0:	1809      	addeq	r1, r1, r0
 8007be2:	6021      	streq	r1, [r4, #0]
 8007be4:	6054      	str	r4, [r2, #4]
 8007be6:	e7ca      	b.n	8007b7e <_free_r+0x22>
 8007be8:	bd38      	pop	{r3, r4, r5, pc}
 8007bea:	bf00      	nop
 8007bec:	20025e1c 	.word	0x20025e1c

08007bf0 <_malloc_usable_size_r>:
 8007bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bf4:	1f18      	subs	r0, r3, #4
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	bfbc      	itt	lt
 8007bfa:	580b      	ldrlt	r3, [r1, r0]
 8007bfc:	18c0      	addlt	r0, r0, r3
 8007bfe:	4770      	bx	lr

08007c00 <_init>:
 8007c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c02:	bf00      	nop
 8007c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c06:	bc08      	pop	{r3}
 8007c08:	469e      	mov	lr, r3
 8007c0a:	4770      	bx	lr

08007c0c <_fini>:
 8007c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0e:	bf00      	nop
 8007c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c12:	bc08      	pop	{r3}
 8007c14:	469e      	mov	lr, r3
 8007c16:	4770      	bx	lr
