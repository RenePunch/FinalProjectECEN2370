
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b84  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001204  08006d30  08006d30  00007d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f34  08007f34  00009080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007f34  08007f34  00008f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f3c  08007f3c  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f3c  08007f3c  00008f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f40  08007f40  00008f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08007f44  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009080  2**0
                  CONTENTS
 10 .bss          00025d8c  20000080  20000080  00009080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025e0c  20025e0c  00009080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d54  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002eb2  00000000  00000000  0001be04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001320  00000000  00000000  0001ecb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ecd  00000000  00000000  0001ffd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263d5  00000000  00000000  00020ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016dc2  00000000  00000000  0004727a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0bfb  00000000  00000000  0005e03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013ec37  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005894  00000000  00000000  0013ec7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a3  00000000  00000000  00144510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000080 	.word	0x20000080
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006d18 	.word	0x08006d18

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000084 	.word	0x20000084
 80001e8:	08006d18 	.word	0x08006d18

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b988 	b.w	8000524 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	468e      	mov	lr, r1
 8000234:	4604      	mov	r4, r0
 8000236:	4688      	mov	r8, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d962      	bls.n	8000308 <__udivmoddi4+0xdc>
 8000242:	fab2 f682 	clz	r6, r2
 8000246:	b14e      	cbz	r6, 800025c <__udivmoddi4+0x30>
 8000248:	f1c6 0320 	rsb	r3, r6, #32
 800024c:	fa01 f806 	lsl.w	r8, r1, r6
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	40b7      	lsls	r7, r6
 8000256:	ea43 0808 	orr.w	r8, r3, r8
 800025a:	40b4      	lsls	r4, r6
 800025c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000260:	fa1f fc87 	uxth.w	ip, r7
 8000264:	fbb8 f1fe 	udiv	r1, r8, lr
 8000268:	0c23      	lsrs	r3, r4, #16
 800026a:	fb0e 8811 	mls	r8, lr, r1, r8
 800026e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000272:	fb01 f20c 	mul.w	r2, r1, ip
 8000276:	429a      	cmp	r2, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x62>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000280:	f080 80ea 	bcs.w	8000458 <__udivmoddi4+0x22c>
 8000284:	429a      	cmp	r2, r3
 8000286:	f240 80e7 	bls.w	8000458 <__udivmoddi4+0x22c>
 800028a:	3902      	subs	r1, #2
 800028c:	443b      	add	r3, r7
 800028e:	1a9a      	subs	r2, r3, r2
 8000290:	b2a3      	uxth	r3, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800029e:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a2:	459c      	cmp	ip, r3
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0x8e>
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002ac:	f080 80d6 	bcs.w	800045c <__udivmoddi4+0x230>
 80002b0:	459c      	cmp	ip, r3
 80002b2:	f240 80d3 	bls.w	800045c <__udivmoddi4+0x230>
 80002b6:	443b      	add	r3, r7
 80002b8:	3802      	subs	r0, #2
 80002ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002be:	eba3 030c 	sub.w	r3, r3, ip
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40f3      	lsrs	r3, r6
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xb6>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb0>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa2>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x14c>
 80002ea:	4573      	cmp	r3, lr
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xc8>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 8105 	bhi.w	80004fe <__udivmoddi4+0x2d2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4690      	mov	r8, r2
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e5      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000302:	e9c5 4800 	strd	r4, r8, [r5]
 8000306:	e7e2      	b.n	80002ce <__udivmoddi4+0xa2>
 8000308:	2a00      	cmp	r2, #0
 800030a:	f000 8090 	beq.w	800042e <__udivmoddi4+0x202>
 800030e:	fab2 f682 	clz	r6, r2
 8000312:	2e00      	cmp	r6, #0
 8000314:	f040 80a4 	bne.w	8000460 <__udivmoddi4+0x234>
 8000318:	1a8a      	subs	r2, r1, r2
 800031a:	0c03      	lsrs	r3, r0, #16
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	b280      	uxth	r0, r0
 8000322:	b2bc      	uxth	r4, r7
 8000324:	2101      	movs	r1, #1
 8000326:	fbb2 fcfe 	udiv	ip, r2, lr
 800032a:	fb0e 221c 	mls	r2, lr, ip, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb04 f20c 	mul.w	r2, r4, ip
 8000336:	429a      	cmp	r2, r3
 8000338:	d907      	bls.n	800034a <__udivmoddi4+0x11e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x11c>
 8000342:	429a      	cmp	r2, r3
 8000344:	f200 80e0 	bhi.w	8000508 <__udivmoddi4+0x2dc>
 8000348:	46c4      	mov	ip, r8
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000350:	fb0e 3312 	mls	r3, lr, r2, r3
 8000354:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000358:	fb02 f404 	mul.w	r4, r2, r4
 800035c:	429c      	cmp	r4, r3
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x144>
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x142>
 8000368:	429c      	cmp	r4, r3
 800036a:	f200 80ca 	bhi.w	8000502 <__udivmoddi4+0x2d6>
 800036e:	4602      	mov	r2, r0
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x98>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa0e f401 	lsl.w	r4, lr, r1
 8000388:	fa20 f306 	lsr.w	r3, r0, r6
 800038c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000390:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	fa1f fc87 	uxth.w	ip, r7
 800039e:	fbbe f0f9 	udiv	r0, lr, r9
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80003a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1a0>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003be:	f080 809c 	bcs.w	80004fa <__udivmoddi4+0x2ce>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8099 	bls.w	80004fa <__udivmoddi4+0x2ce>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	fa1f fe83 	uxth.w	lr, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e4:	45a4      	cmp	ip, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1ce>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ee:	f080 8082 	bcs.w	80004f6 <__udivmoddi4+0x2ca>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d97f      	bls.n	80004f6 <__udivmoddi4+0x2ca>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	fba0 ec02 	umull	lr, ip, r0, r2
 8000406:	4564      	cmp	r4, ip
 8000408:	4673      	mov	r3, lr
 800040a:	46e1      	mov	r9, ip
 800040c:	d362      	bcc.n	80004d4 <__udivmoddi4+0x2a8>
 800040e:	d05f      	beq.n	80004d0 <__udivmoddi4+0x2a4>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x1fe>
 8000412:	ebb8 0203 	subs.w	r2, r8, r3
 8000416:	eb64 0409 	sbc.w	r4, r4, r9
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431e      	orrs	r6, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c5 6400 	strd	r6, r4, [r5]
 800042a:	2100      	movs	r1, #0
 800042c:	e74f      	b.n	80002ce <__udivmoddi4+0xa2>
 800042e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000432:	0c01      	lsrs	r1, r0, #16
 8000434:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000438:	b280      	uxth	r0, r0
 800043a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800043e:	463b      	mov	r3, r7
 8000440:	4638      	mov	r0, r7
 8000442:	463c      	mov	r4, r7
 8000444:	46b8      	mov	r8, r7
 8000446:	46be      	mov	lr, r7
 8000448:	2620      	movs	r6, #32
 800044a:	fbb1 f1f7 	udiv	r1, r1, r7
 800044e:	eba2 0208 	sub.w	r2, r2, r8
 8000452:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000456:	e766      	b.n	8000326 <__udivmoddi4+0xfa>
 8000458:	4601      	mov	r1, r0
 800045a:	e718      	b.n	800028e <__udivmoddi4+0x62>
 800045c:	4610      	mov	r0, r2
 800045e:	e72c      	b.n	80002ba <__udivmoddi4+0x8e>
 8000460:	f1c6 0220 	rsb	r2, r6, #32
 8000464:	fa2e f302 	lsr.w	r3, lr, r2
 8000468:	40b7      	lsls	r7, r6
 800046a:	40b1      	lsls	r1, r6
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	430a      	orrs	r2, r1
 8000476:	fbb3 f8fe 	udiv	r8, r3, lr
 800047a:	b2bc      	uxth	r4, r7
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	0c11      	lsrs	r1, r2, #16
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb08 f904 	mul.w	r9, r8, r4
 800048a:	40b0      	lsls	r0, r6
 800048c:	4589      	cmp	r9, r1
 800048e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000492:	b280      	uxth	r0, r0
 8000494:	d93e      	bls.n	8000514 <__udivmoddi4+0x2e8>
 8000496:	1879      	adds	r1, r7, r1
 8000498:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x276>
 800049e:	4589      	cmp	r9, r1
 80004a0:	d81f      	bhi.n	80004e2 <__udivmoddi4+0x2b6>
 80004a2:	eba1 0109 	sub.w	r1, r1, r9
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fb09 f804 	mul.w	r8, r9, r4
 80004ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b2:	b292      	uxth	r2, r2
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d229      	bcs.n	8000510 <__udivmoddi4+0x2e4>
 80004bc:	18ba      	adds	r2, r7, r2
 80004be:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004c2:	d2c4      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d2c2      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c8:	f1a9 0102 	sub.w	r1, r9, #2
 80004cc:	443a      	add	r2, r7
 80004ce:	e7be      	b.n	800044e <__udivmoddi4+0x222>
 80004d0:	45f0      	cmp	r8, lr
 80004d2:	d29d      	bcs.n	8000410 <__udivmoddi4+0x1e4>
 80004d4:	ebbe 0302 	subs.w	r3, lr, r2
 80004d8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004dc:	3801      	subs	r0, #1
 80004de:	46e1      	mov	r9, ip
 80004e0:	e796      	b.n	8000410 <__udivmoddi4+0x1e4>
 80004e2:	eba7 0909 	sub.w	r9, r7, r9
 80004e6:	4449      	add	r1, r9
 80004e8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004ec:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f0:	fb09 f804 	mul.w	r8, r9, r4
 80004f4:	e7db      	b.n	80004ae <__udivmoddi4+0x282>
 80004f6:	4673      	mov	r3, lr
 80004f8:	e77f      	b.n	80003fa <__udivmoddi4+0x1ce>
 80004fa:	4650      	mov	r0, sl
 80004fc:	e766      	b.n	80003cc <__udivmoddi4+0x1a0>
 80004fe:	4608      	mov	r0, r1
 8000500:	e6fd      	b.n	80002fe <__udivmoddi4+0xd2>
 8000502:	443b      	add	r3, r7
 8000504:	3a02      	subs	r2, #2
 8000506:	e733      	b.n	8000370 <__udivmoddi4+0x144>
 8000508:	f1ac 0c02 	sub.w	ip, ip, #2
 800050c:	443b      	add	r3, r7
 800050e:	e71c      	b.n	800034a <__udivmoddi4+0x11e>
 8000510:	4649      	mov	r1, r9
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x222>
 8000514:	eba1 0109 	sub.w	r1, r1, r9
 8000518:	46c4      	mov	ip, r8
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	e7c4      	b.n	80004ae <__udivmoddi4+0x282>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 800052c:	f006 f910 	bl	8006750 <initialise_monitor_handles>
    LTCD__Init();
 8000530:	f000 fc8a 	bl	8000e48 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000534:	2000      	movs	r0, #0
 8000536:	f000 fc47 	bl	8000dc8 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 800053a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800053e:	2000      	movs	r0, #0
 8000540:	f000 fd52 	bl	8000fe8 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 8000544:	f000 fe28 	bl	8001198 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 8000548:	4b02      	ldr	r3, [pc, #8]	@ (8000554 <ApplicationInit+0x2c>)
 800054a:	2201      	movs	r2, #1
 800054c:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	2000009c 	.word	0x2000009c

08000558 <ApplicationFirstScreen>:
void ApplicationFirstScreen(){
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	firstScreen();
 800055c:	f000 f822 	bl	80005a4 <firstScreen>
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}

08000564 <LCD_Touch_Polling_Demo>:
// 	visualDemo();
// }

#if COMPILE_TOUCH_FUNCTIONS == 1
void LCD_Touch_Polling_Demo(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	while (1) {
		/* If touch pressed */
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000568:	480d      	ldr	r0, [pc, #52]	@ (80005a0 <LCD_Touch_Polling_Demo+0x3c>)
 800056a:	f000 fe20 	bl	80011ae <returnTouchStateAndLocation>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d1f9      	bne.n	8000568 <LCD_Touch_Polling_Demo+0x4>
			/* Touch valid */
			if(StaticTouchData.x <= 120){
 8000574:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <LCD_Touch_Polling_Demo+0x3c>)
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	2b78      	cmp	r3, #120	@ 0x78
 800057a:	d804      	bhi.n	8000586 <LCD_Touch_Polling_Demo+0x22>

				PlayOnePlayer();
 800057c:	f000 fa30 	bl	80009e0 <PlayOnePlayer>
				firstScreen();
 8000580:	f000 f810 	bl	80005a4 <firstScreen>
 8000584:	e007      	b.n	8000596 <LCD_Touch_Polling_Demo+0x32>


			}
			else if(StaticTouchData.x >= 120){
 8000586:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <LCD_Touch_Polling_Demo+0x3c>)
 8000588:	881b      	ldrh	r3, [r3, #0]
 800058a:	2b77      	cmp	r3, #119	@ 0x77
 800058c:	d903      	bls.n	8000596 <LCD_Touch_Polling_Demo+0x32>
				PlayTwoPlayer();
 800058e:	f000 fae9 	bl	8000b64 <PlayTwoPlayer>
				firstScreen();
 8000592:	f000 f807 	bl	80005a4 <firstScreen>
			}
			HAL_Delay(1000);
 8000596:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800059a:	f002 fb2b 	bl	8002bf4 <HAL_Delay>
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 800059e:	e7e3      	b.n	8000568 <LCD_Touch_Polling_Demo+0x4>
 80005a0:	2000009c 	.word	0x2000009c

080005a4 <firstScreen>:





void firstScreen(void) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	touchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a8:	4b40      	ldr	r3, [pc, #256]	@ (80006ac <firstScreen+0x108>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	719a      	strb	r2, [r3, #6]
    LCD_Clear(0,LCD_COLOR_BLUE);
 80005ae:	211f      	movs	r1, #31
 80005b0:	2000      	movs	r0, #0
 80005b2:	f000 fd19 	bl	8000fe8 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f000 fd38 	bl	800102c <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80005bc:	483c      	ldr	r0, [pc, #240]	@ (80006b0 <firstScreen+0x10c>)
 80005be:	f000 fd45 	bl	800104c <LCD_SetFont>
	LCD_DisplayChar(60,140,'C');
 80005c2:	2243      	movs	r2, #67	@ 0x43
 80005c4:	218c      	movs	r1, #140	@ 0x8c
 80005c6:	203c      	movs	r0, #60	@ 0x3c
 80005c8:	f000 fdbe 	bl	8001148 <LCD_DisplayChar>
	LCD_DisplayChar(75,140,'o');
 80005cc:	226f      	movs	r2, #111	@ 0x6f
 80005ce:	218c      	movs	r1, #140	@ 0x8c
 80005d0:	204b      	movs	r0, #75	@ 0x4b
 80005d2:	f000 fdb9 	bl	8001148 <LCD_DisplayChar>
	LCD_DisplayChar(90,140,'n');
 80005d6:	226e      	movs	r2, #110	@ 0x6e
 80005d8:	218c      	movs	r1, #140	@ 0x8c
 80005da:	205a      	movs	r0, #90	@ 0x5a
 80005dc:	f000 fdb4 	bl	8001148 <LCD_DisplayChar>
	LCD_DisplayChar(105,140,'n');
 80005e0:	226e      	movs	r2, #110	@ 0x6e
 80005e2:	218c      	movs	r1, #140	@ 0x8c
 80005e4:	2069      	movs	r0, #105	@ 0x69
 80005e6:	f000 fdaf 	bl	8001148 <LCD_DisplayChar>
	LCD_DisplayChar(120,140,'e');
 80005ea:	2265      	movs	r2, #101	@ 0x65
 80005ec:	218c      	movs	r1, #140	@ 0x8c
 80005ee:	2078      	movs	r0, #120	@ 0x78
 80005f0:	f000 fdaa 	bl	8001148 <LCD_DisplayChar>
	LCD_DisplayChar(135,140,'c');
 80005f4:	2263      	movs	r2, #99	@ 0x63
 80005f6:	218c      	movs	r1, #140	@ 0x8c
 80005f8:	2087      	movs	r0, #135	@ 0x87
 80005fa:	f000 fda5 	bl	8001148 <LCD_DisplayChar>
	LCD_DisplayChar(150,140,'t');
 80005fe:	2274      	movs	r2, #116	@ 0x74
 8000600:	218c      	movs	r1, #140	@ 0x8c
 8000602:	2096      	movs	r0, #150	@ 0x96
 8000604:	f000 fda0 	bl	8001148 <LCD_DisplayChar>
	LCD_DisplayChar(180,140,'4');
 8000608:	2234      	movs	r2, #52	@ 0x34
 800060a:	218c      	movs	r1, #140	@ 0x8c
 800060c:	20b4      	movs	r0, #180	@ 0xb4
 800060e:	f000 fd9b 	bl	8001148 <LCD_DisplayChar>

    LCD_DisplayChar(10,190,'1');
 8000612:	2231      	movs	r2, #49	@ 0x31
 8000614:	21be      	movs	r1, #190	@ 0xbe
 8000616:	200a      	movs	r0, #10
 8000618:	f000 fd96 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(20,190,'P');
 800061c:	2250      	movs	r2, #80	@ 0x50
 800061e:	21be      	movs	r1, #190	@ 0xbe
 8000620:	2014      	movs	r0, #20
 8000622:	f000 fd91 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(30,190,'L');
 8000626:	224c      	movs	r2, #76	@ 0x4c
 8000628:	21be      	movs	r1, #190	@ 0xbe
 800062a:	201e      	movs	r0, #30
 800062c:	f000 fd8c 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(40,190,'A');
 8000630:	2241      	movs	r2, #65	@ 0x41
 8000632:	21be      	movs	r1, #190	@ 0xbe
 8000634:	2028      	movs	r0, #40	@ 0x28
 8000636:	f000 fd87 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(55,190,'Y');
 800063a:	2259      	movs	r2, #89	@ 0x59
 800063c:	21be      	movs	r1, #190	@ 0xbe
 800063e:	2037      	movs	r0, #55	@ 0x37
 8000640:	f000 fd82 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(70,190,'E');
 8000644:	2245      	movs	r2, #69	@ 0x45
 8000646:	21be      	movs	r1, #190	@ 0xbe
 8000648:	2046      	movs	r0, #70	@ 0x46
 800064a:	f000 fd7d 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(85,190,'R');
 800064e:	2252      	movs	r2, #82	@ 0x52
 8000650:	21be      	movs	r1, #190	@ 0xbe
 8000652:	2055      	movs	r0, #85	@ 0x55
 8000654:	f000 fd78 	bl	8001148 <LCD_DisplayChar>
    

    LCD_DisplayChar(115,190,'2');
 8000658:	2232      	movs	r2, #50	@ 0x32
 800065a:	21be      	movs	r1, #190	@ 0xbe
 800065c:	2073      	movs	r0, #115	@ 0x73
 800065e:	f000 fd73 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(135,190,'P');
 8000662:	2250      	movs	r2, #80	@ 0x50
 8000664:	21be      	movs	r1, #190	@ 0xbe
 8000666:	2087      	movs	r0, #135	@ 0x87
 8000668:	f000 fd6e 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(145,190,'L');
 800066c:	224c      	movs	r2, #76	@ 0x4c
 800066e:	21be      	movs	r1, #190	@ 0xbe
 8000670:	2091      	movs	r0, #145	@ 0x91
 8000672:	f000 fd69 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(155,190,'A');
 8000676:	2241      	movs	r2, #65	@ 0x41
 8000678:	21be      	movs	r1, #190	@ 0xbe
 800067a:	209b      	movs	r0, #155	@ 0x9b
 800067c:	f000 fd64 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(170,190,'Y');
 8000680:	2259      	movs	r2, #89	@ 0x59
 8000682:	21be      	movs	r1, #190	@ 0xbe
 8000684:	20aa      	movs	r0, #170	@ 0xaa
 8000686:	f000 fd5f 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(185,190,'E');
 800068a:	2245      	movs	r2, #69	@ 0x45
 800068c:	21be      	movs	r1, #190	@ 0xbe
 800068e:	20b9      	movs	r0, #185	@ 0xb9
 8000690:	f000 fd5a 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(200,190,'R');
 8000694:	2252      	movs	r2, #82	@ 0x52
 8000696:	21be      	movs	r1, #190	@ 0xbe
 8000698:	20c8      	movs	r0, #200	@ 0xc8
 800069a:	f000 fd55 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(215,190,'S');
 800069e:	2253      	movs	r2, #83	@ 0x53
 80006a0:	21be      	movs	r1, #190	@ 0xbe
 80006a2:	20d7      	movs	r0, #215	@ 0xd7
 80006a4:	f000 fd50 	bl	8001148 <LCD_DisplayChar>
    
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200000d0 	.word	0x200000d0
 80006b0:	20000004 	.word	0x20000004

080006b4 <initBoard>:


void initBoard(void) {
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
    for (int r = 0; r < ROWS; r++) {
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	e015      	b.n	80006ec <initBoard+0x38>
        for (int c = 0; c < COLS; c++) {
 80006c0:	2300      	movs	r3, #0
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	e00c      	b.n	80006e0 <initBoard+0x2c>
            board[r][c] = ' ';
 80006c6:	490e      	ldr	r1, [pc, #56]	@ (8000700 <initBoard+0x4c>)
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	4613      	mov	r3, r2
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	1a9b      	subs	r3, r3, r2
 80006d0:	18ca      	adds	r2, r1, r3
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	4413      	add	r3, r2
 80006d6:	2220      	movs	r2, #32
 80006d8:	701a      	strb	r2, [r3, #0]
        for (int c = 0; c < COLS; c++) {
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	3301      	adds	r3, #1
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	2b06      	cmp	r3, #6
 80006e4:	ddef      	ble.n	80006c6 <initBoard+0x12>
    for (int r = 0; r < ROWS; r++) {
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3301      	adds	r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b05      	cmp	r3, #5
 80006f0:	dde6      	ble.n	80006c0 <initBoard+0xc>
        }
    }
}
 80006f2:	bf00      	nop
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	200000a4 	.word	0x200000a4

08000704 <GameScreen_Init>:


void GameScreen_Init(void) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0

    LCD_Clear(0, BOARD_BG_COLOR);
 800070a:	211f      	movs	r1, #31
 800070c:	2000      	movs	r0, #0
 800070e:	f000 fc6b 	bl	8000fe8 <LCD_Clear>
    for (int r = 0; r < ROWS; r++) {
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	e021      	b.n	800075c <GameScreen_Init+0x58>
        for (int c = 0; c < COLS; c++) {
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	e018      	b.n	8000750 <GameScreen_Init+0x4c>
            uint16_t x = ORIGIN_X + c * CELL_SPACING_X;
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	b29b      	uxth	r3, r3
 8000722:	015b      	lsls	r3, r3, #5
 8000724:	b29b      	uxth	r3, r3
 8000726:	3314      	adds	r3, #20
 8000728:	80fb      	strh	r3, [r7, #6]
            uint16_t y = ORIGIN_Y + r * CELL_SPACING_Y;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	b29b      	uxth	r3, r3
 800072e:	461a      	mov	r2, r3
 8000730:	0092      	lsls	r2, r2, #2
 8000732:	4413      	add	r3, r2
 8000734:	00db      	lsls	r3, r3, #3
 8000736:	b29b      	uxth	r3, r3
 8000738:	333c      	adds	r3, #60	@ 0x3c
 800073a:	80bb      	strh	r3, [r7, #4]
            LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, EMPTY_HOLE_COLOR);
 800073c:	88b9      	ldrh	r1, [r7, #4]
 800073e:	88f8      	ldrh	r0, [r7, #6]
 8000740:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000744:	220d      	movs	r2, #13
 8000746:	f000 fbfb 	bl	8000f40 <LCD_Draw_Circle_Fill>
        for (int c = 0; c < COLS; c++) {
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	3301      	adds	r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	2b06      	cmp	r3, #6
 8000754:	dde3      	ble.n	800071e <GameScreen_Init+0x1a>
    for (int r = 0; r < ROWS; r++) {
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	3301      	adds	r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	2b05      	cmp	r3, #5
 8000760:	ddda      	ble.n	8000718 <GameScreen_Init+0x14>
        }
    }
}
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <PollTouchColumn>:
        }
    }
}


static int PollTouchColumn(char currentPlayer) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
    while (1) {
        if (returnTouchStateAndLocation(&touchData) == STMPE811_State_Pressed) {
 8000776:	4834      	ldr	r0, [pc, #208]	@ (8000848 <PollTouchColumn+0xdc>)
 8000778:	f000 fd19 	bl	80011ae <returnTouchStateAndLocation>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d159      	bne.n	8000836 <PollTouchColumn+0xca>
            //DetermineTouchPosition(&touchData);
            int tx = touchData.x;
 8000782:	4b31      	ldr	r3, [pc, #196]	@ (8000848 <PollTouchColumn+0xdc>)
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	617b      	str	r3, [r7, #20]


            if (tx >= ORIGIN_X - CELL_SPACING_X/2 &&
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	2b03      	cmp	r3, #3
 800078c:	d953      	bls.n	8000836 <PollTouchColumn+0xca>
                tx <= ORIGIN_X + (COLS-1)*CELL_SPACING_X + CELL_SPACING_X/2) {
 800078e:	697b      	ldr	r3, [r7, #20]
            if (tx >= ORIGIN_X - CELL_SPACING_X/2 &&
 8000790:	2be4      	cmp	r3, #228	@ 0xe4
 8000792:	d850      	bhi.n	8000836 <PollTouchColumn+0xca>

                int col = (tx - (ORIGIN_X - CELL_SPACING_X/2)) / CELL_SPACING_X;
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	3b04      	subs	r3, #4
 8000798:	095b      	lsrs	r3, r3, #5
 800079a:	613b      	str	r3, [r7, #16]
                if (col >= 0 && col < COLS) {
 800079c:	693b      	ldr	r3, [r7, #16]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	db49      	blt.n	8000836 <PollTouchColumn+0xca>
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	2b06      	cmp	r3, #6
 80007a6:	dc46      	bgt.n	8000836 <PollTouchColumn+0xca>

                    int rowIndex = -1;
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007ac:	61fb      	str	r3, [r7, #28]
                    for (int r = ROWS - 1; r >= 0; r--) {
 80007ae:	2305      	movs	r3, #5
 80007b0:	61bb      	str	r3, [r7, #24]
 80007b2:	e01a      	b.n	80007ea <PollTouchColumn+0x7e>
                        if (board[r][col] == ' ') {
 80007b4:	4925      	ldr	r1, [pc, #148]	@ (800084c <PollTouchColumn+0xe0>)
 80007b6:	69ba      	ldr	r2, [r7, #24]
 80007b8:	4613      	mov	r3, r2
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	1a9b      	subs	r3, r3, r2
 80007be:	18ca      	adds	r2, r1, r3
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	4413      	add	r3, r2
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b20      	cmp	r3, #32
 80007c8:	d10c      	bne.n	80007e4 <PollTouchColumn+0x78>
                            rowIndex = r;
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	61fb      	str	r3, [r7, #28]
                            board[r][col] = currentPlayer;
 80007ce:	491f      	ldr	r1, [pc, #124]	@ (800084c <PollTouchColumn+0xe0>)
 80007d0:	69ba      	ldr	r2, [r7, #24]
 80007d2:	4613      	mov	r3, r2
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	1a9b      	subs	r3, r3, r2
 80007d8:	18ca      	adds	r2, r1, r3
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	4413      	add	r3, r2
 80007de:	79fa      	ldrb	r2, [r7, #7]
 80007e0:	701a      	strb	r2, [r3, #0]
                            break;
 80007e2:	e005      	b.n	80007f0 <PollTouchColumn+0x84>
                    for (int r = ROWS - 1; r >= 0; r--) {
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	61bb      	str	r3, [r7, #24]
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	dae1      	bge.n	80007b4 <PollTouchColumn+0x48>
                        }
                    }
                    if (rowIndex != -1) {
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80007f6:	d01e      	beq.n	8000836 <PollTouchColumn+0xca>

                        uint16_t color = (currentPlayer == 'X')
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	2b58      	cmp	r3, #88	@ 0x58
 80007fc:	d102      	bne.n	8000804 <PollTouchColumn+0x98>
 80007fe:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000802:	e000      	b.n	8000806 <PollTouchColumn+0x9a>
 8000804:	2300      	movs	r3, #0
 8000806:	81fb      	strh	r3, [r7, #14]
                            ? LCD_COLOR_RED
                            : LCD_COLOR_BLACK;

                        uint16_t x = ORIGIN_X + col * CELL_SPACING_X;
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	b29b      	uxth	r3, r3
 800080c:	015b      	lsls	r3, r3, #5
 800080e:	b29b      	uxth	r3, r3
 8000810:	3314      	adds	r3, #20
 8000812:	81bb      	strh	r3, [r7, #12]
                        uint16_t y = ORIGIN_Y + rowIndex * CELL_SPACING_Y;
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	b29b      	uxth	r3, r3
 8000818:	461a      	mov	r2, r3
 800081a:	0092      	lsls	r2, r2, #2
 800081c:	4413      	add	r3, r2
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	b29b      	uxth	r3, r3
 8000822:	333c      	adds	r3, #60	@ 0x3c
 8000824:	817b      	strh	r3, [r7, #10]

                        LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, color);
 8000826:	89fb      	ldrh	r3, [r7, #14]
 8000828:	8979      	ldrh	r1, [r7, #10]
 800082a:	89b8      	ldrh	r0, [r7, #12]
 800082c:	220d      	movs	r2, #13
 800082e:	f000 fb87 	bl	8000f40 <LCD_Draw_Circle_Fill>
                        return col;
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	e003      	b.n	800083e <PollTouchColumn+0xd2>
                    }
                }
            }
        }
        HAL_Delay(50);
 8000836:	2032      	movs	r0, #50	@ 0x32
 8000838:	f002 f9dc 	bl	8002bf4 <HAL_Delay>
        if (returnTouchStateAndLocation(&touchData) == STMPE811_State_Pressed) {
 800083c:	e79b      	b.n	8000776 <PollTouchColumn+0xa>
    }
}
 800083e:	4618      	mov	r0, r3
 8000840:	3720      	adds	r7, #32
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000d0 	.word	0x200000d0
 800084c:	200000a4 	.word	0x200000a4

08000850 <checkDirection>:
        }
    }
    return -1;
}

int checkDirection(int startR, int startC, int dR, int dC, char piece) {
 8000850:	b480      	push	{r7}
 8000852:	b089      	sub	sp, #36	@ 0x24
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
 800085c:	603b      	str	r3, [r7, #0]
    for (int i = 1; i < 4; i++) {
 800085e:	2301      	movs	r3, #1
 8000860:	61fb      	str	r3, [r7, #28]
 8000862:	e02b      	b.n	80008bc <checkDirection+0x6c>
        int rr = startR + dR * i;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	69fa      	ldr	r2, [r7, #28]
 8000868:	fb02 f303 	mul.w	r3, r2, r3
 800086c:	68fa      	ldr	r2, [r7, #12]
 800086e:	4413      	add	r3, r2
 8000870:	61bb      	str	r3, [r7, #24]
        int cc = startC + dC * i;
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	69fa      	ldr	r2, [r7, #28]
 8000876:	fb02 f303 	mul.w	r3, r2, r3
 800087a:	68ba      	ldr	r2, [r7, #8]
 800087c:	4413      	add	r3, r2
 800087e:	617b      	str	r3, [r7, #20]
        if (rr < 0 || rr >= ROWS || cc < 0 || cc >= COLS || board[rr][cc] != piece)
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	2b00      	cmp	r3, #0
 8000884:	db15      	blt.n	80008b2 <checkDirection+0x62>
 8000886:	69bb      	ldr	r3, [r7, #24]
 8000888:	2b05      	cmp	r3, #5
 800088a:	dc12      	bgt.n	80008b2 <checkDirection+0x62>
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	2b00      	cmp	r3, #0
 8000890:	db0f      	blt.n	80008b2 <checkDirection+0x62>
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	2b06      	cmp	r3, #6
 8000896:	dc0c      	bgt.n	80008b2 <checkDirection+0x62>
 8000898:	490d      	ldr	r1, [pc, #52]	@ (80008d0 <checkDirection+0x80>)
 800089a:	69ba      	ldr	r2, [r7, #24]
 800089c:	4613      	mov	r3, r2
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	1a9b      	subs	r3, r3, r2
 80008a2:	18ca      	adds	r2, r1, r3
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	4413      	add	r3, r2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d001      	beq.n	80008b6 <checkDirection+0x66>
            return 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	e006      	b.n	80008c4 <checkDirection+0x74>
    for (int i = 1; i < 4; i++) {
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	3301      	adds	r3, #1
 80008ba:	61fb      	str	r3, [r7, #28]
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	2b03      	cmp	r3, #3
 80008c0:	ddd0      	ble.n	8000864 <checkDirection+0x14>
    }
    return 1;
 80008c2:	2301      	movs	r3, #1
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3724      	adds	r7, #36	@ 0x24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	200000a4 	.word	0x200000a4

080008d4 <checkWin>:

int checkWin(char piece) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af02      	add	r7, sp, #8
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
    for (int r = 0; r < ROWS; r++) {
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	e047      	b.n	8000974 <checkWin+0xa0>
        for (int c = 0; c < COLS; c++) {
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	e03e      	b.n	8000968 <checkWin+0x94>
            if (board[r][c] != piece) continue;
 80008ea:	4926      	ldr	r1, [pc, #152]	@ (8000984 <checkWin+0xb0>)
 80008ec:	68fa      	ldr	r2, [r7, #12]
 80008ee:	4613      	mov	r3, r2
 80008f0:	00db      	lsls	r3, r3, #3
 80008f2:	1a9b      	subs	r3, r3, r2
 80008f4:	18ca      	adds	r2, r1, r3
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	4413      	add	r3, r2
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	79fa      	ldrb	r2, [r7, #7]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d12e      	bne.n	8000960 <checkWin+0x8c>
            if (checkDirection(r, c, 0, 1, piece)  ||
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	2301      	movs	r3, #1
 8000908:	2200      	movs	r2, #0
 800090a:	68b9      	ldr	r1, [r7, #8]
 800090c:	68f8      	ldr	r0, [r7, #12]
 800090e:	f7ff ff9f 	bl	8000850 <checkDirection>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d121      	bne.n	800095c <checkWin+0x88>
                checkDirection(r, c, 1, 0, piece)  ||
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2300      	movs	r3, #0
 800091e:	2201      	movs	r2, #1
 8000920:	68b9      	ldr	r1, [r7, #8]
 8000922:	68f8      	ldr	r0, [r7, #12]
 8000924:	f7ff ff94 	bl	8000850 <checkDirection>
 8000928:	4603      	mov	r3, r0
            if (checkDirection(r, c, 0, 1, piece)  ||
 800092a:	2b00      	cmp	r3, #0
 800092c:	d116      	bne.n	800095c <checkWin+0x88>
                checkDirection(r, c, 1, 1, piece)  ||
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	2301      	movs	r3, #1
 8000934:	2201      	movs	r2, #1
 8000936:	68b9      	ldr	r1, [r7, #8]
 8000938:	68f8      	ldr	r0, [r7, #12]
 800093a:	f7ff ff89 	bl	8000850 <checkDirection>
 800093e:	4603      	mov	r3, r0
                checkDirection(r, c, 1, 0, piece)  ||
 8000940:	2b00      	cmp	r3, #0
 8000942:	d10b      	bne.n	800095c <checkWin+0x88>
                checkDirection(r, c, -1, 1, piece)) {
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	2301      	movs	r3, #1
 800094a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800094e:	68b9      	ldr	r1, [r7, #8]
 8000950:	68f8      	ldr	r0, [r7, #12]
 8000952:	f7ff ff7d 	bl	8000850 <checkDirection>
 8000956:	4603      	mov	r3, r0
                checkDirection(r, c, 1, 1, piece)  ||
 8000958:	2b00      	cmp	r3, #0
 800095a:	d002      	beq.n	8000962 <checkWin+0x8e>
                return 1;
 800095c:	2301      	movs	r3, #1
 800095e:	e00d      	b.n	800097c <checkWin+0xa8>
            if (board[r][c] != piece) continue;
 8000960:	bf00      	nop
        for (int c = 0; c < COLS; c++) {
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	3301      	adds	r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	2b06      	cmp	r3, #6
 800096c:	ddbd      	ble.n	80008ea <checkWin+0x16>
    for (int r = 0; r < ROWS; r++) {
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	3301      	adds	r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2b05      	cmp	r3, #5
 8000978:	ddb4      	ble.n	80008e4 <checkWin+0x10>
            }
        }
    }
    return 0;
 800097a:	2300      	movs	r3, #0
}
 800097c:	4618      	mov	r0, r3
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200000a4 	.word	0x200000a4

08000988 <isBoardFull>:

int isBoardFull(void) {
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
    for (int r = 0; r < ROWS; r++) {
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	e018      	b.n	80009c6 <isBoardFull+0x3e>
        for (int c = 0; c < COLS; c++) {
 8000994:	2300      	movs	r3, #0
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	e00f      	b.n	80009ba <isBoardFull+0x32>
            if (board[r][c] == ' ') return 0;
 800099a:	4910      	ldr	r1, [pc, #64]	@ (80009dc <isBoardFull+0x54>)
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	4613      	mov	r3, r2
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	1a9b      	subs	r3, r3, r2
 80009a4:	18ca      	adds	r2, r1, r3
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	4413      	add	r3, r2
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b20      	cmp	r3, #32
 80009ae:	d101      	bne.n	80009b4 <isBoardFull+0x2c>
 80009b0:	2300      	movs	r3, #0
 80009b2:	e00c      	b.n	80009ce <isBoardFull+0x46>
        for (int c = 0; c < COLS; c++) {
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	3301      	adds	r3, #1
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	2b06      	cmp	r3, #6
 80009be:	ddec      	ble.n	800099a <isBoardFull+0x12>
    for (int r = 0; r < ROWS; r++) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3301      	adds	r3, #1
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b05      	cmp	r3, #5
 80009ca:	dde3      	ble.n	8000994 <isBoardFull+0xc>
        }
    }
    return 1;
 80009cc:	2301      	movs	r3, #1
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	200000a4 	.word	0x200000a4

080009e0 <PlayOnePlayer>:

enum {
    HUMAN = 'X', BOT = 'O'
};

void PlayOnePlayer(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
    initBoard();
 80009e6:	f7ff fe65 	bl	80006b4 <initBoard>
    GameScreen_Init();
 80009ea:	f7ff fe8b 	bl	8000704 <GameScreen_Init>
    // display mode text unchanged above board
    LCD_SetTextColor(LCD_COLOR_WHITE);
 80009ee:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80009f2:	f000 fb1b 	bl	800102c <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 80009f6:	4857      	ldr	r0, [pc, #348]	@ (8000b54 <PlayOnePlayer+0x174>)
 80009f8:	f000 fb28 	bl	800104c <LCD_SetFont>
    LCD_DisplayChar(20,20,'S');
 80009fc:	2253      	movs	r2, #83	@ 0x53
 80009fe:	2114      	movs	r1, #20
 8000a00:	2014      	movs	r0, #20
 8000a02:	f000 fba1 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(35,20,'I');
 8000a06:	2249      	movs	r2, #73	@ 0x49
 8000a08:	2114      	movs	r1, #20
 8000a0a:	2023      	movs	r0, #35	@ 0x23
 8000a0c:	f000 fb9c 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(50,20,'N');
 8000a10:	224e      	movs	r2, #78	@ 0x4e
 8000a12:	2114      	movs	r1, #20
 8000a14:	2032      	movs	r0, #50	@ 0x32
 8000a16:	f000 fb97 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(65,20,'G');
 8000a1a:	2247      	movs	r2, #71	@ 0x47
 8000a1c:	2114      	movs	r1, #20
 8000a1e:	2041      	movs	r0, #65	@ 0x41
 8000a20:	f000 fb92 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(80,20,'L');
 8000a24:	224c      	movs	r2, #76	@ 0x4c
 8000a26:	2114      	movs	r1, #20
 8000a28:	2050      	movs	r0, #80	@ 0x50
 8000a2a:	f000 fb8d 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(95,20,'E');
 8000a2e:	2245      	movs	r2, #69	@ 0x45
 8000a30:	2114      	movs	r1, #20
 8000a32:	205f      	movs	r0, #95	@ 0x5f
 8000a34:	f000 fb88 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(125,20,'P');
 8000a38:	2250      	movs	r2, #80	@ 0x50
 8000a3a:	2114      	movs	r1, #20
 8000a3c:	207d      	movs	r0, #125	@ 0x7d
 8000a3e:	f000 fb83 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(140,20,'L');
 8000a42:	224c      	movs	r2, #76	@ 0x4c
 8000a44:	2114      	movs	r1, #20
 8000a46:	208c      	movs	r0, #140	@ 0x8c
 8000a48:	f000 fb7e 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(155,20,'A');
 8000a4c:	2241      	movs	r2, #65	@ 0x41
 8000a4e:	2114      	movs	r1, #20
 8000a50:	209b      	movs	r0, #155	@ 0x9b
 8000a52:	f000 fb79 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(170,20,'Y');
 8000a56:	2259      	movs	r2, #89	@ 0x59
 8000a58:	2114      	movs	r1, #20
 8000a5a:	20aa      	movs	r0, #170	@ 0xaa
 8000a5c:	f000 fb74 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(185,20,'E');
 8000a60:	2245      	movs	r2, #69	@ 0x45
 8000a62:	2114      	movs	r1, #20
 8000a64:	20b9      	movs	r0, #185	@ 0xb9
 8000a66:	f000 fb6f 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(200,20,'R');
 8000a6a:	2252      	movs	r2, #82	@ 0x52
 8000a6c:	2114      	movs	r1, #20
 8000a6e:	20c8      	movs	r0, #200	@ 0xc8
 8000a70:	f000 fb6a 	bl	8001148 <LCD_DisplayChar>

    char current = HUMAN;
 8000a74:	2358      	movs	r3, #88	@ 0x58
 8000a76:	75fb      	strb	r3, [r7, #23]
    while (1) {
        int col;
        if (current == HUMAN) {
 8000a78:	7dfb      	ldrb	r3, [r7, #23]
 8000a7a:	2b58      	cmp	r3, #88	@ 0x58
 8000a7c:	d104      	bne.n	8000a88 <PlayOnePlayer+0xa8>
            col = PollTouchColumn(HUMAN);
 8000a7e:	2058      	movs	r0, #88	@ 0x58
 8000a80:	f7ff fe74 	bl	800076c <PollTouchColumn>
 8000a84:	60f8      	str	r0, [r7, #12]
 8000a86:	e04c      	b.n	8000b22 <PlayOnePlayer+0x142>
        } else {
            
            uint32_t rnd;
            do {
                HAL_RNG_GenerateRandomNumber(&hrng, &rnd);
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4832      	ldr	r0, [pc, #200]	@ (8000b58 <PlayOnePlayer+0x178>)
 8000a8e:	f004 fe41 	bl	8005714 <HAL_RNG_GenerateRandomNumber>
                col = rnd % COLS;
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	4b31      	ldr	r3, [pc, #196]	@ (8000b5c <PlayOnePlayer+0x17c>)
 8000a96:	fba3 2301 	umull	r2, r3, r3, r1
 8000a9a:	1aca      	subs	r2, r1, r3
 8000a9c:	0852      	lsrs	r2, r2, #1
 8000a9e:	4413      	add	r3, r2
 8000aa0:	089a      	lsrs	r2, r3, #2
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	1a9b      	subs	r3, r3, r2
 8000aa8:	1aca      	subs	r2, r1, r3
 8000aaa:	60fa      	str	r2, [r7, #12]
            } while (board[0][col] != ' ');
 8000aac:	4a2c      	ldr	r2, [pc, #176]	@ (8000b60 <PlayOnePlayer+0x180>)
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b20      	cmp	r3, #32
 8000ab6:	d1e7      	bne.n	8000a88 <PlayOnePlayer+0xa8>
          
            for (int r = ROWS - 1; r >= 0; r--) {
 8000ab8:	2305      	movs	r3, #5
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	e02e      	b.n	8000b1c <PlayOnePlayer+0x13c>
                if (board[r][col] == ' ') {
 8000abe:	4928      	ldr	r1, [pc, #160]	@ (8000b60 <PlayOnePlayer+0x180>)
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	1a9b      	subs	r3, r3, r2
 8000ac8:	18ca      	adds	r2, r1, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	4413      	add	r3, r2
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b20      	cmp	r3, #32
 8000ad2:	d120      	bne.n	8000b16 <PlayOnePlayer+0x136>
                    board[r][col] = BOT;
 8000ad4:	4922      	ldr	r1, [pc, #136]	@ (8000b60 <PlayOnePlayer+0x180>)
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	00db      	lsls	r3, r3, #3
 8000adc:	1a9b      	subs	r3, r3, r2
 8000ade:	18ca      	adds	r2, r1, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	224f      	movs	r2, #79	@ 0x4f
 8000ae6:	701a      	strb	r2, [r3, #0]
                    uint16_t x = ORIGIN_X + col * CELL_SPACING_X;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	015b      	lsls	r3, r3, #5
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	3314      	adds	r3, #20
 8000af2:	817b      	strh	r3, [r7, #10]
                    uint16_t y = ORIGIN_Y + r * CELL_SPACING_Y;
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	461a      	mov	r2, r3
 8000afa:	0092      	lsls	r2, r2, #2
 8000afc:	4413      	add	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	333c      	adds	r3, #60	@ 0x3c
 8000b04:	813b      	strh	r3, [r7, #8]
                    LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, PLAYER2_COLOR);
 8000b06:	8939      	ldrh	r1, [r7, #8]
 8000b08:	8978      	ldrh	r0, [r7, #10]
 8000b0a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000b0e:	220d      	movs	r2, #13
 8000b10:	f000 fa16 	bl	8000f40 <LCD_Draw_Circle_Fill>
                    break;
 8000b14:	e005      	b.n	8000b22 <PlayOnePlayer+0x142>
            for (int r = ROWS - 1; r >= 0; r--) {
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	dacd      	bge.n	8000abe <PlayOnePlayer+0xde>
                }
            }
        }
        if (checkWin(current) || isBoardFull()) break;
 8000b22:	7dfb      	ldrb	r3, [r7, #23]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fed5 	bl	80008d4 <checkWin>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d10c      	bne.n	8000b4a <PlayOnePlayer+0x16a>
 8000b30:	f7ff ff2a 	bl	8000988 <isBoardFull>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d107      	bne.n	8000b4a <PlayOnePlayer+0x16a>
        current = (current == HUMAN) ? BOT : HUMAN;
 8000b3a:	7dfb      	ldrb	r3, [r7, #23]
 8000b3c:	2b58      	cmp	r3, #88	@ 0x58
 8000b3e:	d101      	bne.n	8000b44 <PlayOnePlayer+0x164>
 8000b40:	234f      	movs	r3, #79	@ 0x4f
 8000b42:	e000      	b.n	8000b46 <PlayOnePlayer+0x166>
 8000b44:	2358      	movs	r3, #88	@ 0x58
 8000b46:	75fb      	strb	r3, [r7, #23]
    while (1) {
 8000b48:	e796      	b.n	8000a78 <PlayOnePlayer+0x98>
    }
}
 8000b4a:	bf00      	nop
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000004 	.word	0x20000004
 8000b58:	20025b0c 	.word	0x20025b0c
 8000b5c:	24924925 	.word	0x24924925
 8000b60:	200000a4 	.word	0x200000a4

08000b64 <PlayTwoPlayer>:



void PlayTwoPlayer(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
    initBoard();
 8000b6a:	f7ff fda3 	bl	80006b4 <initBoard>
    GameScreen_Init();
 8000b6e:	f7ff fdc9 	bl	8000704 <GameScreen_Init>

    LCD_SetTextColor(LCD_COLOR_WHITE);
 8000b72:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000b76:	f000 fa59 	bl	800102c <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 8000b7a:	482e      	ldr	r0, [pc, #184]	@ (8000c34 <PlayTwoPlayer+0xd0>)
 8000b7c:	f000 fa66 	bl	800104c <LCD_SetFont>
    LCD_DisplayChar(20,20,'2');
 8000b80:	2232      	movs	r2, #50	@ 0x32
 8000b82:	2114      	movs	r1, #20
 8000b84:	2014      	movs	r0, #20
 8000b86:	f000 fadf 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(35,20,'-');
 8000b8a:	222d      	movs	r2, #45	@ 0x2d
 8000b8c:	2114      	movs	r1, #20
 8000b8e:	2023      	movs	r0, #35	@ 0x23
 8000b90:	f000 fada 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(50,20,'P');
 8000b94:	2250      	movs	r2, #80	@ 0x50
 8000b96:	2114      	movs	r1, #20
 8000b98:	2032      	movs	r0, #50	@ 0x32
 8000b9a:	f000 fad5 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(65,20,'L');
 8000b9e:	224c      	movs	r2, #76	@ 0x4c
 8000ba0:	2114      	movs	r1, #20
 8000ba2:	2041      	movs	r0, #65	@ 0x41
 8000ba4:	f000 fad0 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(80,20,'A');
 8000ba8:	2241      	movs	r2, #65	@ 0x41
 8000baa:	2114      	movs	r1, #20
 8000bac:	2050      	movs	r0, #80	@ 0x50
 8000bae:	f000 facb 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(95,20,'Y');
 8000bb2:	2259      	movs	r2, #89	@ 0x59
 8000bb4:	2114      	movs	r1, #20
 8000bb6:	205f      	movs	r0, #95	@ 0x5f
 8000bb8:	f000 fac6 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(110,20,'E');
 8000bbc:	2245      	movs	r2, #69	@ 0x45
 8000bbe:	2114      	movs	r1, #20
 8000bc0:	206e      	movs	r0, #110	@ 0x6e
 8000bc2:	f000 fac1 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(125,20,'R');
 8000bc6:	2252      	movs	r2, #82	@ 0x52
 8000bc8:	2114      	movs	r1, #20
 8000bca:	207d      	movs	r0, #125	@ 0x7d
 8000bcc:	f000 fabc 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(155,20,'M');
 8000bd0:	224d      	movs	r2, #77	@ 0x4d
 8000bd2:	2114      	movs	r1, #20
 8000bd4:	209b      	movs	r0, #155	@ 0x9b
 8000bd6:	f000 fab7 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(170,20,'O');
 8000bda:	224f      	movs	r2, #79	@ 0x4f
 8000bdc:	2114      	movs	r1, #20
 8000bde:	20aa      	movs	r0, #170	@ 0xaa
 8000be0:	f000 fab2 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(185,20,'D');
 8000be4:	2244      	movs	r2, #68	@ 0x44
 8000be6:	2114      	movs	r1, #20
 8000be8:	20b9      	movs	r0, #185	@ 0xb9
 8000bea:	f000 faad 	bl	8001148 <LCD_DisplayChar>
    LCD_DisplayChar(200,20,'E');
 8000bee:	2245      	movs	r2, #69	@ 0x45
 8000bf0:	2114      	movs	r1, #20
 8000bf2:	20c8      	movs	r0, #200	@ 0xc8
 8000bf4:	f000 faa8 	bl	8001148 <LCD_DisplayChar>

    char current = HUMAN;
 8000bf8:	2358      	movs	r3, #88	@ 0x58
 8000bfa:	71fb      	strb	r3, [r7, #7]
    while (1) {
      
        PollTouchColumn(current);
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fdb4 	bl	800076c <PollTouchColumn>
        if (checkWin(current) || isBoardFull()) break;
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fe64 	bl	80008d4 <checkWin>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d10c      	bne.n	8000c2c <PlayTwoPlayer+0xc8>
 8000c12:	f7ff feb9 	bl	8000988 <isBoardFull>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d107      	bne.n	8000c2c <PlayTwoPlayer+0xc8>
        current = (current == HUMAN) ? BOT : HUMAN;
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b58      	cmp	r3, #88	@ 0x58
 8000c20:	d101      	bne.n	8000c26 <PlayTwoPlayer+0xc2>
 8000c22:	234f      	movs	r3, #79	@ 0x4f
 8000c24:	e000      	b.n	8000c28 <PlayTwoPlayer+0xc4>
 8000c26:	2358      	movs	r3, #88	@ 0x58
 8000c28:	71fb      	strb	r3, [r7, #7]
        PollTouchColumn(current);
 8000c2a:	e7e7      	b.n	8000bfc <PlayTwoPlayer+0x98>
    }

}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000004 	.word	0x20000004

08000c38 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	@ 0x30
 8000c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61bb      	str	r3, [r7, #24]
 8000c42:	4b5a      	ldr	r3, [pc, #360]	@ (8000dac <LCD_GPIO_Init+0x174>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c46:	4a59      	ldr	r2, [pc, #356]	@ (8000dac <LCD_GPIO_Init+0x174>)
 8000c48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c4e:	4b57      	ldr	r3, [pc, #348]	@ (8000dac <LCD_GPIO_Init+0x174>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c52:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c56:	61bb      	str	r3, [r7, #24]
 8000c58:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	4b53      	ldr	r3, [pc, #332]	@ (8000dac <LCD_GPIO_Init+0x174>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a52      	ldr	r2, [pc, #328]	@ (8000dac <LCD_GPIO_Init+0x174>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b50      	ldr	r3, [pc, #320]	@ (8000dac <LCD_GPIO_Init+0x174>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	4b4c      	ldr	r3, [pc, #304]	@ (8000dac <LCD_GPIO_Init+0x174>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	4a4b      	ldr	r2, [pc, #300]	@ (8000dac <LCD_GPIO_Init+0x174>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c86:	4b49      	ldr	r3, [pc, #292]	@ (8000dac <LCD_GPIO_Init+0x174>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b45      	ldr	r3, [pc, #276]	@ (8000dac <LCD_GPIO_Init+0x174>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	4a44      	ldr	r2, [pc, #272]	@ (8000dac <LCD_GPIO_Init+0x174>)
 8000c9c:	f043 0304 	orr.w	r3, r3, #4
 8000ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca2:	4b42      	ldr	r3, [pc, #264]	@ (8000dac <LCD_GPIO_Init+0x174>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	4b3e      	ldr	r3, [pc, #248]	@ (8000dac <LCD_GPIO_Init+0x174>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	4a3d      	ldr	r2, [pc, #244]	@ (8000dac <LCD_GPIO_Init+0x174>)
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8000dac <LCD_GPIO_Init+0x174>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	4b37      	ldr	r3, [pc, #220]	@ (8000dac <LCD_GPIO_Init+0x174>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	4a36      	ldr	r2, [pc, #216]	@ (8000dac <LCD_GPIO_Init+0x174>)
 8000cd4:	f043 0320 	orr.w	r3, r3, #32
 8000cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cda:	4b34      	ldr	r3, [pc, #208]	@ (8000dac <LCD_GPIO_Init+0x174>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	f003 0320 	and.w	r3, r3, #32
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	4b30      	ldr	r3, [pc, #192]	@ (8000dac <LCD_GPIO_Init+0x174>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	4a2f      	ldr	r2, [pc, #188]	@ (8000dac <LCD_GPIO_Init+0x174>)
 8000cf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf6:	4b2d      	ldr	r3, [pc, #180]	@ (8000dac <LCD_GPIO_Init+0x174>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000d02:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000d06:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000d10:	2302      	movs	r3, #2
 8000d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000d14:	230e      	movs	r3, #14
 8000d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4824      	ldr	r0, [pc, #144]	@ (8000db0 <LCD_GPIO_Init+0x178>)
 8000d20:	f002 f872 	bl	8002e08 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000d24:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000d28:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4820      	ldr	r0, [pc, #128]	@ (8000db4 <LCD_GPIO_Init+0x17c>)
 8000d32:	f002 f869 	bl	8002e08 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000d36:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000d3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	481d      	ldr	r0, [pc, #116]	@ (8000db8 <LCD_GPIO_Init+0x180>)
 8000d44:	f002 f860 	bl	8002e08 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000d48:	2348      	movs	r3, #72	@ 0x48
 8000d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4619      	mov	r1, r3
 8000d52:	481a      	ldr	r0, [pc, #104]	@ (8000dbc <LCD_GPIO_Init+0x184>)
 8000d54:	f002 f858 	bl	8002e08 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000d58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	4816      	ldr	r0, [pc, #88]	@ (8000dc0 <LCD_GPIO_Init+0x188>)
 8000d66:	f002 f84f 	bl	8002e08 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000d6a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000d6e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	4813      	ldr	r0, [pc, #76]	@ (8000dc4 <LCD_GPIO_Init+0x18c>)
 8000d78:	f002 f846 	bl	8002e08 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000d80:	2309      	movs	r3, #9
 8000d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480a      	ldr	r0, [pc, #40]	@ (8000db4 <LCD_GPIO_Init+0x17c>)
 8000d8c:	f002 f83c 	bl	8002e08 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000d90:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4809      	ldr	r0, [pc, #36]	@ (8000dc4 <LCD_GPIO_Init+0x18c>)
 8000d9e:	f002 f833 	bl	8002e08 <HAL_GPIO_Init>
}
 8000da2:	bf00      	nop
 8000da4:	3730      	adds	r7, #48	@ 0x30
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020000 	.word	0x40020000
 8000db4:	40020400 	.word	0x40020400
 8000db8:	40020800 	.word	0x40020800
 8000dbc:	40020c00 	.word	0x40020c00
 8000dc0:	40021400 	.word	0x40021400
 8000dc4:	40021800 	.word	0x40021800

08000dc8 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b090      	sub	sp, #64	@ 0x40
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000dd6:	23f0      	movs	r3, #240	@ 0xf0
 8000dd8:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000dde:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000de2:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000de4:	2302      	movs	r3, #2
 8000de6:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000de8:	23ff      	movs	r3, #255	@ 0xff
 8000dea:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000df0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000df4:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000df6:	2305      	movs	r3, #5
 8000df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d101      	bne.n	8000e04 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	@ (8000e40 <LTCD_Layer_Init+0x78>)
 8000e02:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000e04:	23f0      	movs	r3, #240	@ 0xf0
 8000e06:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000e08:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000e20:	79fa      	ldrb	r2, [r7, #7]
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	4619      	mov	r1, r3
 8000e28:	4806      	ldr	r0, [pc, #24]	@ (8000e44 <LTCD_Layer_Init+0x7c>)
 8000e2a:	f003 fc2f 	bl	800468c <HAL_LTDC_ConfigLayer>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000e34:	f000 f9aa 	bl	800118c <LCD_Error_Handler>
	}
}
 8000e38:	bf00      	nop
 8000e3a:	3740      	adds	r7, #64	@ 0x40
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200001b4 	.word	0x200001b4
 8000e44:	200000d8 	.word	0x200000d8

08000e48 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef8 <LTCD__Init+0xb0>)
 8000e4e:	4a2b      	ldr	r2, [pc, #172]	@ (8000efc <LTCD__Init+0xb4>)
 8000e50:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000e52:	4b29      	ldr	r3, [pc, #164]	@ (8000ef8 <LTCD__Init+0xb0>)
 8000e54:	2209      	movs	r2, #9
 8000e56:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000e58:	4b27      	ldr	r3, [pc, #156]	@ (8000ef8 <LTCD__Init+0xb0>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000e5e:	4b26      	ldr	r3, [pc, #152]	@ (8000ef8 <LTCD__Init+0xb0>)
 8000e60:	221d      	movs	r2, #29
 8000e62:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000e64:	4b24      	ldr	r3, [pc, #144]	@ (8000ef8 <LTCD__Init+0xb0>)
 8000e66:	2203      	movs	r2, #3
 8000e68:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000e6a:	4b23      	ldr	r3, [pc, #140]	@ (8000ef8 <LTCD__Init+0xb0>)
 8000e6c:	f240 120d 	movw	r2, #269	@ 0x10d
 8000e70:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000e72:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <LTCD__Init+0xb0>)
 8000e74:	f240 1243 	movw	r2, #323	@ 0x143
 8000e78:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef8 <LTCD__Init+0xb0>)
 8000e7c:	f240 1217 	movw	r2, #279	@ 0x117
 8000e80:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000e82:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef8 <LTCD__Init+0xb0>)
 8000e84:	f240 1247 	movw	r2, #327	@ 0x147
 8000e88:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <LTCD__Init+0xb0>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000e92:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <LTCD__Init+0xb0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000e9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <LTCD__Init+0xb0>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <LTCD__Init+0xb8>)
 8000ea4:	2208      	movs	r2, #8
 8000ea6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <LTCD__Init+0xb8>)
 8000eaa:	22c0      	movs	r2, #192	@ 0xc0
 8000eac:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000eae:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <LTCD__Init+0xb8>)
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <LTCD__Init+0xb8>)
 8000eb6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000eba:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000ebc:	4810      	ldr	r0, [pc, #64]	@ (8000f00 <LTCD__Init+0xb8>)
 8000ebe:	f004 fa3f 	bl	8005340 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef8 <LTCD__Init+0xb0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <LTCD__Init+0xb0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ece:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <LTCD__Init+0xb0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <LTCD__Init+0xb0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000eda:	f7ff fead 	bl	8000c38 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ede:	4806      	ldr	r0, [pc, #24]	@ (8000ef8 <LTCD__Init+0xb0>)
 8000ee0:	f003 fb04 	bl	80044ec <HAL_LTDC_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000eea:	f000 f94f 	bl	800118c <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000eee:	f000 f96a 	bl	80011c6 <ili9341_Init>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200000d8 	.word	0x200000d8
 8000efc:	40016800 	.word	0x40016800
 8000f00:	20000180 	.word	0x20000180

08000f04 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80fb      	strh	r3, [r7, #6]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	80bb      	strh	r3, [r7, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000f16:	88ba      	ldrh	r2, [r7, #4]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	011b      	lsls	r3, r3, #4
 8000f1c:	1a9b      	subs	r3, r3, r2
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	461a      	mov	r2, r3
 8000f22:	88fb      	ldrh	r3, [r7, #6]
 8000f24:	4413      	add	r3, r2
 8000f26:	4905      	ldr	r1, [pc, #20]	@ (8000f3c <LCD_Draw_Pixel+0x38>)
 8000f28:	887a      	ldrh	r2, [r7, #2]
 8000f2a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	200001b4 	.word	0x200001b4

08000f40 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4604      	mov	r4, r0
 8000f48:	4608      	mov	r0, r1
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4623      	mov	r3, r4
 8000f50:	80fb      	strh	r3, [r7, #6]
 8000f52:	4603      	mov	r3, r0
 8000f54:	80bb      	strh	r3, [r7, #4]
 8000f56:	460b      	mov	r3, r1
 8000f58:	807b      	strh	r3, [r7, #2]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000f5e:	887b      	ldrh	r3, [r7, #2]
 8000f60:	425b      	negs	r3, r3
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	81fb      	strh	r3, [r7, #14]
 8000f66:	e034      	b.n	8000fd2 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000f68:	887b      	ldrh	r3, [r7, #2]
 8000f6a:	425b      	negs	r3, r3
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	81bb      	strh	r3, [r7, #12]
 8000f70:	e024      	b.n	8000fbc <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000f72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f76:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000f7a:	fb03 f202 	mul.w	r2, r3, r2
 8000f7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f82:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000f86:	fb01 f303 	mul.w	r3, r1, r3
 8000f8a:	441a      	add	r2, r3
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	8879      	ldrh	r1, [r7, #2]
 8000f90:	fb01 f303 	mul.w	r3, r1, r3
 8000f94:	429a      	cmp	r2, r3
 8000f96:	dc0b      	bgt.n	8000fb0 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000f98:	89ba      	ldrh	r2, [r7, #12]
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	b298      	uxth	r0, r3
 8000fa0:	89fa      	ldrh	r2, [r7, #14]
 8000fa2:	88bb      	ldrh	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	883a      	ldrh	r2, [r7, #0]
 8000faa:	4619      	mov	r1, r3
 8000fac:	f7ff ffaa 	bl	8000f04 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000fb0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	81bb      	strh	r3, [r7, #12]
 8000fbc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000fc0:	887b      	ldrh	r3, [r7, #2]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	ddd5      	ble.n	8000f72 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000fc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	81fb      	strh	r3, [r7, #14]
 8000fd2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	ddc5      	ble.n	8000f68 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd90      	pop	{r4, r7, pc}
	...

08000fe8 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	460a      	mov	r2, r1
 8000ff2:	71fb      	strb	r3, [r7, #7]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10e      	bne.n	800101c <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	e007      	b.n	8001014 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8001004:	4908      	ldr	r1, [pc, #32]	@ (8001028 <LCD_Clear+0x40>)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	88ba      	ldrh	r2, [r7, #4]
 800100a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3301      	adds	r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 800101a:	d3f3      	bcc.n	8001004 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	200001b4 	.word	0x200001b4

0800102c <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8001036:	4a04      	ldr	r2, [pc, #16]	@ (8001048 <LCD_SetTextColor+0x1c>)
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	8013      	strh	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	20000000 	.word	0x20000000

0800104c <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001054:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <LCD_SetFont+0x1c>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	200001b0 	.word	0x200001b0

0800106c <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	603a      	str	r2, [r7, #0]
 8001076:	80fb      	strh	r3, [r7, #6]
 8001078:	460b      	mov	r3, r1
 800107a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	e04c      	b.n	8001124 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	e03f      	b.n	8001110 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	4413      	add	r3, r2
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	4619      	mov	r1, r3
 800109c:	4b27      	ldr	r3, [pc, #156]	@ (800113c <LCD_Draw_Char+0xd0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	889b      	ldrh	r3, [r3, #4]
 80010a2:	4a27      	ldr	r2, [pc, #156]	@ (8001140 <LCD_Draw_Char+0xd4>)
 80010a4:	fba2 2303 	umull	r2, r3, r2, r3
 80010a8:	08db      	lsrs	r3, r3, #3
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	2280      	movs	r2, #128	@ 0x80
 80010b0:	409a      	lsls	r2, r3
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	fa42 f303 	asr.w	r3, r2, r3
 80010b8:	400b      	ands	r3, r1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d104      	bne.n	80010c8 <LCD_Draw_Char+0x5c>
 80010be:	4b1f      	ldr	r3, [pc, #124]	@ (800113c <LCD_Draw_Char+0xd0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	889b      	ldrh	r3, [r3, #4]
 80010c4:	2b0c      	cmp	r3, #12
 80010c6:	d920      	bls.n	800110a <LCD_Draw_Char+0x9e>
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	fa42 f303 	asr.w	r3, r2, r3
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d104      	bne.n	80010ec <LCD_Draw_Char+0x80>
 80010e2:	4b16      	ldr	r3, [pc, #88]	@ (800113c <LCD_Draw_Char+0xd0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	889b      	ldrh	r3, [r3, #4]
 80010e8:	2b0c      	cmp	r3, #12
 80010ea:	d80e      	bhi.n	800110a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	4413      	add	r3, r2
 80010f4:	b298      	uxth	r0, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	88bb      	ldrh	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	b29b      	uxth	r3, r3
 8001100:	4a10      	ldr	r2, [pc, #64]	@ (8001144 <LCD_Draw_Char+0xd8>)
 8001102:	8812      	ldrh	r2, [r2, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	f7ff fefd 	bl	8000f04 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	3301      	adds	r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <LCD_Draw_Char+0xd0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	889b      	ldrh	r3, [r3, #4]
 8001116:	461a      	mov	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	4293      	cmp	r3, r2
 800111c:	d3b8      	bcc.n	8001090 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	4b05      	ldr	r3, [pc, #20]	@ (800113c <LCD_Draw_Char+0xd0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	88db      	ldrh	r3, [r3, #6]
 800112a:	461a      	mov	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4293      	cmp	r3, r2
 8001130:	d3ab      	bcc.n	800108a <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8001132:	bf00      	nop
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200001b0 	.word	0x200001b0
 8001140:	aaaaaaab 	.word	0xaaaaaaab
 8001144:	20000000 	.word	0x20000000

08001148 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	80fb      	strh	r3, [r7, #6]
 8001152:	460b      	mov	r3, r1
 8001154:	80bb      	strh	r3, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 800115a:	78fb      	ldrb	r3, [r7, #3]
 800115c:	3b20      	subs	r3, #32
 800115e:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001160:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <LCD_DisplayChar+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	4907      	ldr	r1, [pc, #28]	@ (8001188 <LCD_DisplayChar+0x40>)
 800116a:	6809      	ldr	r1, [r1, #0]
 800116c:	88c9      	ldrh	r1, [r1, #6]
 800116e:	fb01 f303 	mul.w	r3, r1, r3
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	441a      	add	r2, r3
 8001176:	88b9      	ldrh	r1, [r7, #4]
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff76 	bl	800106c <LCD_Draw_Char>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200001b0 	.word	0x200001b0

0800118c <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001190:	b672      	cpsid	i
}
 8001192:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <LCD_Error_Handler+0x8>

08001198 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 800119c:	f001 f931 	bl	8002402 <STMPE811_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d001      	beq.n	80011aa <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 80011a6:	bf00      	nop
 80011a8:	e7fd      	b.n	80011a6 <InitializeLCDTouch+0xe>
  }
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}

080011ae <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f001 f9db 	bl	8002572 <STMPE811_ReadTouch>
 80011bc:	4603      	mov	r3, r0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80011ca:	f000 f9ff 	bl	80015cc <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80011ce:	20ca      	movs	r0, #202	@ 0xca
 80011d0:	f000 f943 	bl	800145a <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80011d4:	20c3      	movs	r0, #195	@ 0xc3
 80011d6:	f000 f94d 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80011da:	2008      	movs	r0, #8
 80011dc:	f000 f94a 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80011e0:	2050      	movs	r0, #80	@ 0x50
 80011e2:	f000 f947 	bl	8001474 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80011e6:	20cf      	movs	r0, #207	@ 0xcf
 80011e8:	f000 f937 	bl	800145a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80011ec:	2000      	movs	r0, #0
 80011ee:	f000 f941 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80011f2:	20c1      	movs	r0, #193	@ 0xc1
 80011f4:	f000 f93e 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80011f8:	2030      	movs	r0, #48	@ 0x30
 80011fa:	f000 f93b 	bl	8001474 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80011fe:	20ed      	movs	r0, #237	@ 0xed
 8001200:	f000 f92b 	bl	800145a <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001204:	2064      	movs	r0, #100	@ 0x64
 8001206:	f000 f935 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 800120a:	2003      	movs	r0, #3
 800120c:	f000 f932 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001210:	2012      	movs	r0, #18
 8001212:	f000 f92f 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001216:	2081      	movs	r0, #129	@ 0x81
 8001218:	f000 f92c 	bl	8001474 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800121c:	20e8      	movs	r0, #232	@ 0xe8
 800121e:	f000 f91c 	bl	800145a <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001222:	2085      	movs	r0, #133	@ 0x85
 8001224:	f000 f926 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001228:	2000      	movs	r0, #0
 800122a:	f000 f923 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800122e:	2078      	movs	r0, #120	@ 0x78
 8001230:	f000 f920 	bl	8001474 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001234:	20cb      	movs	r0, #203	@ 0xcb
 8001236:	f000 f910 	bl	800145a <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 800123a:	2039      	movs	r0, #57	@ 0x39
 800123c:	f000 f91a 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001240:	202c      	movs	r0, #44	@ 0x2c
 8001242:	f000 f917 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001246:	2000      	movs	r0, #0
 8001248:	f000 f914 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800124c:	2034      	movs	r0, #52	@ 0x34
 800124e:	f000 f911 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001252:	2002      	movs	r0, #2
 8001254:	f000 f90e 	bl	8001474 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001258:	20f7      	movs	r0, #247	@ 0xf7
 800125a:	f000 f8fe 	bl	800145a <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 800125e:	2020      	movs	r0, #32
 8001260:	f000 f908 	bl	8001474 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001264:	20ea      	movs	r0, #234	@ 0xea
 8001266:	f000 f8f8 	bl	800145a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800126a:	2000      	movs	r0, #0
 800126c:	f000 f902 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001270:	2000      	movs	r0, #0
 8001272:	f000 f8ff 	bl	8001474 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001276:	20b1      	movs	r0, #177	@ 0xb1
 8001278:	f000 f8ef 	bl	800145a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800127c:	2000      	movs	r0, #0
 800127e:	f000 f8f9 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001282:	201b      	movs	r0, #27
 8001284:	f000 f8f6 	bl	8001474 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001288:	20b6      	movs	r0, #182	@ 0xb6
 800128a:	f000 f8e6 	bl	800145a <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800128e:	200a      	movs	r0, #10
 8001290:	f000 f8f0 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001294:	20a2      	movs	r0, #162	@ 0xa2
 8001296:	f000 f8ed 	bl	8001474 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 800129a:	20c0      	movs	r0, #192	@ 0xc0
 800129c:	f000 f8dd 	bl	800145a <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80012a0:	2010      	movs	r0, #16
 80012a2:	f000 f8e7 	bl	8001474 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80012a6:	20c1      	movs	r0, #193	@ 0xc1
 80012a8:	f000 f8d7 	bl	800145a <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80012ac:	2010      	movs	r0, #16
 80012ae:	f000 f8e1 	bl	8001474 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80012b2:	20c5      	movs	r0, #197	@ 0xc5
 80012b4:	f000 f8d1 	bl	800145a <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80012b8:	2045      	movs	r0, #69	@ 0x45
 80012ba:	f000 f8db 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80012be:	2015      	movs	r0, #21
 80012c0:	f000 f8d8 	bl	8001474 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80012c4:	20c7      	movs	r0, #199	@ 0xc7
 80012c6:	f000 f8c8 	bl	800145a <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80012ca:	2090      	movs	r0, #144	@ 0x90
 80012cc:	f000 f8d2 	bl	8001474 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80012d0:	2036      	movs	r0, #54	@ 0x36
 80012d2:	f000 f8c2 	bl	800145a <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80012d6:	20c8      	movs	r0, #200	@ 0xc8
 80012d8:	f000 f8cc 	bl	8001474 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80012dc:	20f2      	movs	r0, #242	@ 0xf2
 80012de:	f000 f8bc 	bl	800145a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80012e2:	2000      	movs	r0, #0
 80012e4:	f000 f8c6 	bl	8001474 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80012e8:	20b0      	movs	r0, #176	@ 0xb0
 80012ea:	f000 f8b6 	bl	800145a <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80012ee:	20c2      	movs	r0, #194	@ 0xc2
 80012f0:	f000 f8c0 	bl	8001474 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80012f4:	20b6      	movs	r0, #182	@ 0xb6
 80012f6:	f000 f8b0 	bl	800145a <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80012fa:	200a      	movs	r0, #10
 80012fc:	f000 f8ba 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001300:	20a7      	movs	r0, #167	@ 0xa7
 8001302:	f000 f8b7 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001306:	2027      	movs	r0, #39	@ 0x27
 8001308:	f000 f8b4 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800130c:	2004      	movs	r0, #4
 800130e:	f000 f8b1 	bl	8001474 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001312:	202a      	movs	r0, #42	@ 0x2a
 8001314:	f000 f8a1 	bl	800145a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001318:	2000      	movs	r0, #0
 800131a:	f000 f8ab 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800131e:	2000      	movs	r0, #0
 8001320:	f000 f8a8 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001324:	2000      	movs	r0, #0
 8001326:	f000 f8a5 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800132a:	20ef      	movs	r0, #239	@ 0xef
 800132c:	f000 f8a2 	bl	8001474 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001330:	202b      	movs	r0, #43	@ 0x2b
 8001332:	f000 f892 	bl	800145a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001336:	2000      	movs	r0, #0
 8001338:	f000 f89c 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800133c:	2000      	movs	r0, #0
 800133e:	f000 f899 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001342:	2001      	movs	r0, #1
 8001344:	f000 f896 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001348:	203f      	movs	r0, #63	@ 0x3f
 800134a:	f000 f893 	bl	8001474 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 800134e:	20f6      	movs	r0, #246	@ 0xf6
 8001350:	f000 f883 	bl	800145a <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001354:	2001      	movs	r0, #1
 8001356:	f000 f88d 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800135a:	2000      	movs	r0, #0
 800135c:	f000 f88a 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001360:	2006      	movs	r0, #6
 8001362:	f000 f887 	bl	8001474 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001366:	202c      	movs	r0, #44	@ 0x2c
 8001368:	f000 f877 	bl	800145a <ili9341_Write_Reg>
  LCD_Delay(200);
 800136c:	20c8      	movs	r0, #200	@ 0xc8
 800136e:	f000 f9e9 	bl	8001744 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001372:	2026      	movs	r0, #38	@ 0x26
 8001374:	f000 f871 	bl	800145a <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001378:	2001      	movs	r0, #1
 800137a:	f000 f87b 	bl	8001474 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 800137e:	20e0      	movs	r0, #224	@ 0xe0
 8001380:	f000 f86b 	bl	800145a <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001384:	200f      	movs	r0, #15
 8001386:	f000 f875 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 800138a:	2029      	movs	r0, #41	@ 0x29
 800138c:	f000 f872 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001390:	2024      	movs	r0, #36	@ 0x24
 8001392:	f000 f86f 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001396:	200c      	movs	r0, #12
 8001398:	f000 f86c 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800139c:	200e      	movs	r0, #14
 800139e:	f000 f869 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80013a2:	2009      	movs	r0, #9
 80013a4:	f000 f866 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80013a8:	204e      	movs	r0, #78	@ 0x4e
 80013aa:	f000 f863 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80013ae:	2078      	movs	r0, #120	@ 0x78
 80013b0:	f000 f860 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80013b4:	203c      	movs	r0, #60	@ 0x3c
 80013b6:	f000 f85d 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80013ba:	2009      	movs	r0, #9
 80013bc:	f000 f85a 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80013c0:	2013      	movs	r0, #19
 80013c2:	f000 f857 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80013c6:	2005      	movs	r0, #5
 80013c8:	f000 f854 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80013cc:	2017      	movs	r0, #23
 80013ce:	f000 f851 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80013d2:	2011      	movs	r0, #17
 80013d4:	f000 f84e 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80013d8:	2000      	movs	r0, #0
 80013da:	f000 f84b 	bl	8001474 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80013de:	20e1      	movs	r0, #225	@ 0xe1
 80013e0:	f000 f83b 	bl	800145a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80013e4:	2000      	movs	r0, #0
 80013e6:	f000 f845 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80013ea:	2016      	movs	r0, #22
 80013ec:	f000 f842 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80013f0:	201b      	movs	r0, #27
 80013f2:	f000 f83f 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80013f6:	2004      	movs	r0, #4
 80013f8:	f000 f83c 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80013fc:	2011      	movs	r0, #17
 80013fe:	f000 f839 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001402:	2007      	movs	r0, #7
 8001404:	f000 f836 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001408:	2031      	movs	r0, #49	@ 0x31
 800140a:	f000 f833 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 800140e:	2033      	movs	r0, #51	@ 0x33
 8001410:	f000 f830 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001414:	2042      	movs	r0, #66	@ 0x42
 8001416:	f000 f82d 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800141a:	2005      	movs	r0, #5
 800141c:	f000 f82a 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001420:	200c      	movs	r0, #12
 8001422:	f000 f827 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001426:	200a      	movs	r0, #10
 8001428:	f000 f824 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800142c:	2028      	movs	r0, #40	@ 0x28
 800142e:	f000 f821 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001432:	202f      	movs	r0, #47	@ 0x2f
 8001434:	f000 f81e 	bl	8001474 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001438:	200f      	movs	r0, #15
 800143a:	f000 f81b 	bl	8001474 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 800143e:	2011      	movs	r0, #17
 8001440:	f000 f80b 	bl	800145a <ili9341_Write_Reg>
  LCD_Delay(200);
 8001444:	20c8      	movs	r0, #200	@ 0xc8
 8001446:	f000 f97d 	bl	8001744 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800144a:	2029      	movs	r0, #41	@ 0x29
 800144c:	f000 f805 	bl	800145a <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001450:	202c      	movs	r0, #44	@ 0x2c
 8001452:	f000 f802 	bl	800145a <ili9341_Write_Reg>
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}

0800145a <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f94a 	bl	8001700 <LCD_IO_WriteReg>
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	4618      	mov	r0, r3
 8001482:	f000 f91b 	bl	80016bc <LCD_IO_WriteData>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001494:	4819      	ldr	r0, [pc, #100]	@ (80014fc <SPI_Init+0x6c>)
 8001496:	f004 fb88 	bl	8005baa <HAL_SPI_GetState>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d12b      	bne.n	80014f8 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80014a0:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <SPI_Init+0x6c>)
 80014a2:	4a17      	ldr	r2, [pc, #92]	@ (8001500 <SPI_Init+0x70>)
 80014a4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <SPI_Init+0x6c>)
 80014a8:	2218      	movs	r2, #24
 80014aa:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80014ac:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <SPI_Init+0x6c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <SPI_Init+0x6c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80014b8:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <SPI_Init+0x6c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80014be:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <SPI_Init+0x6c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80014c4:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <SPI_Init+0x6c>)
 80014c6:	2207      	movs	r2, #7
 80014c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80014ca:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <SPI_Init+0x6c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80014d0:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <SPI_Init+0x6c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <SPI_Init+0x6c>)
 80014d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014dc:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80014de:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <SPI_Init+0x6c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80014e4:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <SPI_Init+0x6c>)
 80014e6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014ea:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80014ec:	4803      	ldr	r0, [pc, #12]	@ (80014fc <SPI_Init+0x6c>)
 80014ee:	f000 f833 	bl	8001558 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80014f2:	4802      	ldr	r0, [pc, #8]	@ (80014fc <SPI_Init+0x6c>)
 80014f4:	f004 f964 	bl	80057c0 <HAL_SPI_Init>
  }
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200259b4 	.word	0x200259b4
 8001500:	40015000 	.word	0x40015000

08001504 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001512:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <SPI_Write+0x34>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	1db9      	adds	r1, r7, #6
 8001518:	2201      	movs	r2, #1
 800151a:	4808      	ldr	r0, [pc, #32]	@ (800153c <SPI_Write+0x38>)
 800151c:	f004 fa01 	bl	8005922 <HAL_SPI_Transmit>
 8001520:	4603      	mov	r3, r0
 8001522:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800152a:	f000 f809 	bl	8001540 <SPI_Error>
  }
}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	2000000c 	.word	0x2000000c
 800153c:	200259b4 	.word	0x200259b4

08001540 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001544:	4803      	ldr	r0, [pc, #12]	@ (8001554 <SPI_Error+0x14>)
 8001546:	f004 f9c4 	bl	80058d2 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800154a:	f7ff ffa1 	bl	8001490 <SPI_Init>
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200259b4 	.word	0x200259b4

08001558 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	@ 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	4b17      	ldr	r3, [pc, #92]	@ (80015c4 <SPI_MspInit+0x6c>)
 8001566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001568:	4a16      	ldr	r2, [pc, #88]	@ (80015c4 <SPI_MspInit+0x6c>)
 800156a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800156e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001570:	4b14      	ldr	r3, [pc, #80]	@ (80015c4 <SPI_MspInit+0x6c>)
 8001572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001574:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	4b10      	ldr	r3, [pc, #64]	@ (80015c4 <SPI_MspInit+0x6c>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001584:	4a0f      	ldr	r2, [pc, #60]	@ (80015c4 <SPI_MspInit+0x6c>)
 8001586:	f043 0320 	orr.w	r3, r3, #32
 800158a:	6313      	str	r3, [r2, #48]	@ 0x30
 800158c:	4b0d      	ldr	r3, [pc, #52]	@ (80015c4 <SPI_MspInit+0x6c>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001590:	f003 0320 	and.w	r3, r3, #32
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001598:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80015a2:	2302      	movs	r3, #2
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80015a6:	2301      	movs	r3, #1
 80015a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80015aa:	2305      	movs	r3, #5
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	4804      	ldr	r0, [pc, #16]	@ (80015c8 <SPI_MspInit+0x70>)
 80015b6:	f001 fc27 	bl	8002e08 <HAL_GPIO_Init>
}
 80015ba:	bf00      	nop
 80015bc:	3728      	adds	r7, #40	@ 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40021400 	.word	0x40021400

080015cc <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80015d2:	4b36      	ldr	r3, [pc, #216]	@ (80016ac <LCD_IO_Init+0xe0>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d164      	bne.n	80016a4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80015da:	4b34      	ldr	r3, [pc, #208]	@ (80016ac <LCD_IO_Init+0xe0>)
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	4b32      	ldr	r3, [pc, #200]	@ (80016b0 <LCD_IO_Init+0xe4>)
 80015e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e8:	4a31      	ldr	r2, [pc, #196]	@ (80016b0 <LCD_IO_Init+0xe4>)
 80015ea:	f043 0308 	orr.w	r3, r3, #8
 80015ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f0:	4b2f      	ldr	r3, [pc, #188]	@ (80016b0 <LCD_IO_Init+0xe4>)
 80015f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80015fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001600:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001602:	2301      	movs	r3, #1
 8001604:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800160a:	2302      	movs	r3, #2
 800160c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	4619      	mov	r1, r3
 8001614:	4827      	ldr	r0, [pc, #156]	@ (80016b4 <LCD_IO_Init+0xe8>)
 8001616:	f001 fbf7 	bl	8002e08 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b24      	ldr	r3, [pc, #144]	@ (80016b0 <LCD_IO_Init+0xe4>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	4a23      	ldr	r2, [pc, #140]	@ (80016b0 <LCD_IO_Init+0xe4>)
 8001624:	f043 0308 	orr.w	r3, r3, #8
 8001628:	6313      	str	r3, [r2, #48]	@ 0x30
 800162a:	4b21      	ldr	r3, [pc, #132]	@ (80016b0 <LCD_IO_Init+0xe4>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001636:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800163a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001644:	2302      	movs	r3, #2
 8001646:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	4619      	mov	r1, r3
 800164e:	4819      	ldr	r0, [pc, #100]	@ (80016b4 <LCD_IO_Init+0xe8>)
 8001650:	f001 fbda 	bl	8002e08 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001654:	2300      	movs	r3, #0
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	4b15      	ldr	r3, [pc, #84]	@ (80016b0 <LCD_IO_Init+0xe4>)
 800165a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165c:	4a14      	ldr	r2, [pc, #80]	@ (80016b0 <LCD_IO_Init+0xe4>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	6313      	str	r3, [r2, #48]	@ 0x30
 8001664:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <LCD_IO_Init+0xe4>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001670:	2304      	movs	r3, #4
 8001672:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001674:	2301      	movs	r3, #1
 8001676:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800167c:	2302      	movs	r3, #2
 800167e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	4619      	mov	r1, r3
 8001686:	480c      	ldr	r0, [pc, #48]	@ (80016b8 <LCD_IO_Init+0xec>)
 8001688:	f001 fbbe 	bl	8002e08 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 800168c:	2200      	movs	r2, #0
 800168e:	2104      	movs	r1, #4
 8001690:	4809      	ldr	r0, [pc, #36]	@ (80016b8 <LCD_IO_Init+0xec>)
 8001692:	f001 fe71 	bl	8003378 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001696:	2201      	movs	r2, #1
 8001698:	2104      	movs	r1, #4
 800169a:	4807      	ldr	r0, [pc, #28]	@ (80016b8 <LCD_IO_Init+0xec>)
 800169c:	f001 fe6c 	bl	8003378 <HAL_GPIO_WritePin>

    SPI_Init();
 80016a0:	f7ff fef6 	bl	8001490 <SPI_Init>
  }
}
 80016a4:	bf00      	nop
 80016a6:	3720      	adds	r7, #32
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20025a0c 	.word	0x20025a0c
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40020c00 	.word	0x40020c00
 80016b8:	40020800 	.word	0x40020800

080016bc <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80016c6:	2201      	movs	r2, #1
 80016c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016cc:	480a      	ldr	r0, [pc, #40]	@ (80016f8 <LCD_IO_WriteData+0x3c>)
 80016ce:	f001 fe53 	bl	8003378 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80016d2:	2200      	movs	r2, #0
 80016d4:	2104      	movs	r1, #4
 80016d6:	4809      	ldr	r0, [pc, #36]	@ (80016fc <LCD_IO_WriteData+0x40>)
 80016d8:	f001 fe4e 	bl	8003378 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff ff10 	bl	8001504 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80016e4:	2201      	movs	r2, #1
 80016e6:	2104      	movs	r1, #4
 80016e8:	4804      	ldr	r0, [pc, #16]	@ (80016fc <LCD_IO_WriteData+0x40>)
 80016ea:	f001 fe45 	bl	8003378 <HAL_GPIO_WritePin>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40020c00 	.word	0x40020c00
 80016fc:	40020800 	.word	0x40020800

08001700 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800170a:	2200      	movs	r2, #0
 800170c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001710:	480a      	ldr	r0, [pc, #40]	@ (800173c <LCD_IO_WriteReg+0x3c>)
 8001712:	f001 fe31 	bl	8003378 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001716:	2200      	movs	r2, #0
 8001718:	2104      	movs	r1, #4
 800171a:	4809      	ldr	r0, [pc, #36]	@ (8001740 <LCD_IO_WriteReg+0x40>)
 800171c:	f001 fe2c 	bl	8003378 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	b29b      	uxth	r3, r3
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff feed 	bl	8001504 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800172a:	2201      	movs	r2, #1
 800172c:	2104      	movs	r1, #4
 800172e:	4804      	ldr	r0, [pc, #16]	@ (8001740 <LCD_IO_WriteReg+0x40>)
 8001730:	f001 fe22 	bl	8003378 <HAL_GPIO_WritePin>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40020c00 	.word	0x40020c00
 8001740:	40020800 	.word	0x40020800

08001744 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f001 fa51 	bl	8002bf4 <HAL_Delay>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800175e:	f001 f9d7 	bl	8002b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001762:	f000 f817 	bl	8001794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001766:	f000 fa07 	bl	8001b78 <MX_GPIO_Init>
  MX_LTDC_Init();
 800176a:	f000 f8bd 	bl	80018e8 <MX_LTDC_Init>
  MX_RNG_Init();
 800176e:	f000 f96d 	bl	8001a4c <MX_RNG_Init>
  MX_TIM2_Init();
 8001772:	f000 f9b5 	bl	8001ae0 <MX_TIM2_Init>
  MX_SPI5_Init();
 8001776:	f000 f97d 	bl	8001a74 <MX_SPI5_Init>
  MX_I2C3_Init();
 800177a:	f000 f875 	bl	8001868 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 800177e:	f7fe fed3 	bl	8000528 <ApplicationInit>
  ApplicationFirstScreen();
 8001782:	f7fe fee9 	bl	8000558 <ApplicationFirstScreen>

  //LCD_Visual_Demo();
  HAL_Delay(5000);
 8001786:	f241 3088 	movw	r0, #5000	@ 0x1388
 800178a:	f001 fa33 	bl	8002bf4 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  LCD_Touch_Polling_Demo();
 800178e:	f7fe fee9 	bl	8000564 <LCD_Touch_Polling_Demo>
 8001792:	e7fc      	b.n	800178e <main+0x34>

08001794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b094      	sub	sp, #80	@ 0x50
 8001798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800179a:	f107 0320 	add.w	r3, r7, #32
 800179e:	2230      	movs	r2, #48	@ 0x30
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f005 f8f6 	bl	8006994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	4b28      	ldr	r3, [pc, #160]	@ (8001860 <SystemClock_Config+0xcc>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c0:	4a27      	ldr	r2, [pc, #156]	@ (8001860 <SystemClock_Config+0xcc>)
 80017c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c8:	4b25      	ldr	r3, [pc, #148]	@ (8001860 <SystemClock_Config+0xcc>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d4:	2300      	movs	r3, #0
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	4b22      	ldr	r3, [pc, #136]	@ (8001864 <SystemClock_Config+0xd0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a21      	ldr	r2, [pc, #132]	@ (8001864 <SystemClock_Config+0xd0>)
 80017de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001864 <SystemClock_Config+0xd0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017f0:	2301      	movs	r3, #1
 80017f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017fa:	2302      	movs	r3, #2
 80017fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001802:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001804:	2308      	movs	r3, #8
 8001806:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001808:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800180c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800180e:	2302      	movs	r3, #2
 8001810:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001812:	2307      	movs	r3, #7
 8001814:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001816:	f107 0320 	add.w	r3, r7, #32
 800181a:	4618      	mov	r0, r3
 800181c:	f003 f90c 	bl	8004a38 <HAL_RCC_OscConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001826:	f000 fb55 	bl	8001ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800182a:	230f      	movs	r3, #15
 800182c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800182e:	2302      	movs	r3, #2
 8001830:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001836:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800183a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800183c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001840:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	2105      	movs	r1, #5
 8001848:	4618      	mov	r0, r3
 800184a:	f003 fb6d 	bl	8004f28 <HAL_RCC_ClockConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001854:	f000 fb3e 	bl	8001ed4 <Error_Handler>
  }
}
 8001858:	bf00      	nop
 800185a:	3750      	adds	r7, #80	@ 0x50
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40023800 	.word	0x40023800
 8001864:	40007000 	.word	0x40007000

08001868 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800186c:	4b1b      	ldr	r3, [pc, #108]	@ (80018dc <MX_I2C3_Init+0x74>)
 800186e:	4a1c      	ldr	r2, [pc, #112]	@ (80018e0 <MX_I2C3_Init+0x78>)
 8001870:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001872:	4b1a      	ldr	r3, [pc, #104]	@ (80018dc <MX_I2C3_Init+0x74>)
 8001874:	4a1b      	ldr	r2, [pc, #108]	@ (80018e4 <MX_I2C3_Init+0x7c>)
 8001876:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001878:	4b18      	ldr	r3, [pc, #96]	@ (80018dc <MX_I2C3_Init+0x74>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800187e:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <MX_I2C3_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001884:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <MX_I2C3_Init+0x74>)
 8001886:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800188a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800188c:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <MX_I2C3_Init+0x74>)
 800188e:	2200      	movs	r2, #0
 8001890:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001892:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <MX_I2C3_Init+0x74>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001898:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <MX_I2C3_Init+0x74>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800189e:	4b0f      	ldr	r3, [pc, #60]	@ (80018dc <MX_I2C3_Init+0x74>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018a4:	480d      	ldr	r0, [pc, #52]	@ (80018dc <MX_I2C3_Init+0x74>)
 80018a6:	f001 fd81 	bl	80033ac <HAL_I2C_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80018b0:	f000 fb10 	bl	8001ed4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018b4:	2100      	movs	r1, #0
 80018b6:	4809      	ldr	r0, [pc, #36]	@ (80018dc <MX_I2C3_Init+0x74>)
 80018b8:	f002 fd9c 	bl	80043f4 <HAL_I2CEx_ConfigAnalogFilter>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80018c2:	f000 fb07 	bl	8001ed4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80018c6:	2100      	movs	r1, #0
 80018c8:	4804      	ldr	r0, [pc, #16]	@ (80018dc <MX_I2C3_Init+0x74>)
 80018ca:	f002 fdcf 	bl	800446c <HAL_I2CEx_ConfigDigitalFilter>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80018d4:	f000 fafe 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20025a10 	.word	0x20025a10
 80018e0:	40005c00 	.word	0x40005c00
 80018e4:	000186a0 	.word	0x000186a0

080018e8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b09a      	sub	sp, #104	@ 0x68
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80018ee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018f2:	2234      	movs	r2, #52	@ 0x34
 80018f4:	2100      	movs	r1, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f005 f84c 	bl	8006994 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80018fc:	463b      	mov	r3, r7
 80018fe:	2234      	movs	r2, #52	@ 0x34
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f005 f846 	bl	8006994 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001908:	4b4e      	ldr	r3, [pc, #312]	@ (8001a44 <MX_LTDC_Init+0x15c>)
 800190a:	4a4f      	ldr	r2, [pc, #316]	@ (8001a48 <MX_LTDC_Init+0x160>)
 800190c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800190e:	4b4d      	ldr	r3, [pc, #308]	@ (8001a44 <MX_LTDC_Init+0x15c>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001914:	4b4b      	ldr	r3, [pc, #300]	@ (8001a44 <MX_LTDC_Init+0x15c>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800191a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a44 <MX_LTDC_Init+0x15c>)
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001920:	4b48      	ldr	r3, [pc, #288]	@ (8001a44 <MX_LTDC_Init+0x15c>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001926:	4b47      	ldr	r3, [pc, #284]	@ (8001a44 <MX_LTDC_Init+0x15c>)
 8001928:	2207      	movs	r2, #7
 800192a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800192c:	4b45      	ldr	r3, [pc, #276]	@ (8001a44 <MX_LTDC_Init+0x15c>)
 800192e:	2203      	movs	r2, #3
 8001930:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001932:	4b44      	ldr	r3, [pc, #272]	@ (8001a44 <MX_LTDC_Init+0x15c>)
 8001934:	220e      	movs	r2, #14
 8001936:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001938:	4b42      	ldr	r3, [pc, #264]	@ (8001a44 <MX_LTDC_Init+0x15c>)
 800193a:	2205      	movs	r2, #5
 800193c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800193e:	4b41      	ldr	r3, [pc, #260]	@ (8001a44 <MX_LTDC_Init+0x15c>)
 8001940:	f240 228e 	movw	r2, #654	@ 0x28e
 8001944:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001946:	4b3f      	ldr	r3, [pc, #252]	@ (8001a44 <MX_LTDC_Init+0x15c>)
 8001948:	f240 12e5 	movw	r2, #485	@ 0x1e5
 800194c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 800194e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a44 <MX_LTDC_Init+0x15c>)
 8001950:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001954:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001956:	4b3b      	ldr	r3, [pc, #236]	@ (8001a44 <MX_LTDC_Init+0x15c>)
 8001958:	f240 12e7 	movw	r2, #487	@ 0x1e7
 800195c:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800195e:	4b39      	ldr	r3, [pc, #228]	@ (8001a44 <MX_LTDC_Init+0x15c>)
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001966:	4b37      	ldr	r3, [pc, #220]	@ (8001a44 <MX_LTDC_Init+0x15c>)
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800196e:	4b35      	ldr	r3, [pc, #212]	@ (8001a44 <MX_LTDC_Init+0x15c>)
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001976:	4833      	ldr	r0, [pc, #204]	@ (8001a44 <MX_LTDC_Init+0x15c>)
 8001978:	f002 fdb8 	bl	80044ec <HAL_LTDC_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001982:	f000 faa7 	bl	8001ed4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001996:	2300      	movs	r3, #0
 8001998:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80019a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019a6:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80019a8:	2305      	movs	r3, #5
 80019aa:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80019ca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80019ce:	2200      	movs	r2, #0
 80019d0:	4619      	mov	r1, r3
 80019d2:	481c      	ldr	r0, [pc, #112]	@ (8001a44 <MX_LTDC_Init+0x15c>)
 80019d4:	f002 fe5a 	bl	800468c <HAL_LTDC_ConfigLayer>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80019de:	f000 fa79 	bl	8001ed4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80019fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a02:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001a04:	2305      	movs	r3, #5
 8001a06:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001a26:	463b      	mov	r3, r7
 8001a28:	2201      	movs	r2, #1
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4805      	ldr	r0, [pc, #20]	@ (8001a44 <MX_LTDC_Init+0x15c>)
 8001a2e:	f002 fe2d 	bl	800468c <HAL_LTDC_ConfigLayer>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001a38:	f000 fa4c 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001a3c:	bf00      	nop
 8001a3e:	3768      	adds	r7, #104	@ 0x68
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20025a64 	.word	0x20025a64
 8001a48:	40016800 	.word	0x40016800

08001a4c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001a50:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <MX_RNG_Init+0x20>)
 8001a52:	4a07      	ldr	r2, [pc, #28]	@ (8001a70 <MX_RNG_Init+0x24>)
 8001a54:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001a56:	4805      	ldr	r0, [pc, #20]	@ (8001a6c <MX_RNG_Init+0x20>)
 8001a58:	f003 fe32 	bl	80056c0 <HAL_RNG_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001a62:	f000 fa37 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20025b0c 	.word	0x20025b0c
 8001a70:	50060800 	.word	0x50060800

08001a74 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001a78:	4b17      	ldr	r3, [pc, #92]	@ (8001ad8 <MX_SPI5_Init+0x64>)
 8001a7a:	4a18      	ldr	r2, [pc, #96]	@ (8001adc <MX_SPI5_Init+0x68>)
 8001a7c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001a7e:	4b16      	ldr	r3, [pc, #88]	@ (8001ad8 <MX_SPI5_Init+0x64>)
 8001a80:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a84:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001a86:	4b14      	ldr	r3, [pc, #80]	@ (8001ad8 <MX_SPI5_Init+0x64>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a8c:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <MX_SPI5_Init+0x64>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a92:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <MX_SPI5_Init+0x64>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad8 <MX_SPI5_Init+0x64>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad8 <MX_SPI5_Init+0x64>)
 8001aa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aa4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad8 <MX_SPI5_Init+0x64>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aac:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad8 <MX_SPI5_Init+0x64>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ab2:	4b09      	ldr	r3, [pc, #36]	@ (8001ad8 <MX_SPI5_Init+0x64>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ab8:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <MX_SPI5_Init+0x64>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001abe:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <MX_SPI5_Init+0x64>)
 8001ac0:	220a      	movs	r2, #10
 8001ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001ac4:	4804      	ldr	r0, [pc, #16]	@ (8001ad8 <MX_SPI5_Init+0x64>)
 8001ac6:	f003 fe7b 	bl	80057c0 <HAL_SPI_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001ad0:	f000 fa00 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20025b1c 	.word	0x20025b1c
 8001adc:	40015000 	.word	0x40015000

08001ae0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ae6:	f107 0308 	add.w	r3, r7, #8
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af4:	463b      	mov	r3, r7
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001afc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001afe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b04:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b10:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b18:	4b16      	ldr	r3, [pc, #88]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1e:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b24:	4813      	ldr	r0, [pc, #76]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b26:	f004 f92b 	bl	8005d80 <HAL_TIM_Base_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b30:	f000 f9d0 	bl	8001ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b3a:	f107 0308 	add.w	r3, r7, #8
 8001b3e:	4619      	mov	r1, r3
 8001b40:	480c      	ldr	r0, [pc, #48]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b42:	f004 f96c 	bl	8005e1e <HAL_TIM_ConfigClockSource>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b4c:	f000 f9c2 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b50:	2300      	movs	r3, #0
 8001b52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b58:	463b      	mov	r3, r7
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4805      	ldr	r0, [pc, #20]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b5e:	f004 fb6b 	bl	8006238 <HAL_TIMEx_MasterConfigSynchronization>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b68:	f000 f9b4 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20025b74 	.word	0x20025b74

08001b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08e      	sub	sp, #56	@ 0x38
 8001b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
 8001b8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	623b      	str	r3, [r7, #32]
 8001b92:	4bb2      	ldr	r3, [pc, #712]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	4ab1      	ldr	r2, [pc, #708]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001b98:	f043 0304 	orr.w	r3, r3, #4
 8001b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9e:	4baf      	ldr	r3, [pc, #700]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	623b      	str	r3, [r7, #32]
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
 8001bae:	4bab      	ldr	r3, [pc, #684]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb2:	4aaa      	ldr	r2, [pc, #680]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001bb4:	f043 0320 	orr.w	r3, r3, #32
 8001bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bba:	4ba8      	ldr	r3, [pc, #672]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbe:	f003 0320 	and.w	r3, r3, #32
 8001bc2:	61fb      	str	r3, [r7, #28]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	4ba4      	ldr	r3, [pc, #656]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	4aa3      	ldr	r2, [pc, #652]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001bd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd6:	4ba1      	ldr	r3, [pc, #644]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bde:	61bb      	str	r3, [r7, #24]
 8001be0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	4b9d      	ldr	r3, [pc, #628]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	4a9c      	ldr	r2, [pc, #624]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf2:	4b9a      	ldr	r3, [pc, #616]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	4b96      	ldr	r3, [pc, #600]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	4a95      	ldr	r2, [pc, #596]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0e:	4b93      	ldr	r3, [pc, #588]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	4b8f      	ldr	r3, [pc, #572]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	4a8e      	ldr	r2, [pc, #568]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001c24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2a:	4b8c      	ldr	r3, [pc, #560]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	4b88      	ldr	r3, [pc, #544]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	4a87      	ldr	r2, [pc, #540]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001c40:	f043 0310 	orr.w	r3, r3, #16
 8001c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c46:	4b85      	ldr	r3, [pc, #532]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	f003 0310 	and.w	r3, r3, #16
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	4b81      	ldr	r3, [pc, #516]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	4a80      	ldr	r2, [pc, #512]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001c5c:	f043 0308 	orr.w	r3, r3, #8
 8001c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c62:	4b7e      	ldr	r3, [pc, #504]	@ (8001e5c <MX_GPIO_Init+0x2e4>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2116      	movs	r1, #22
 8001c72:	487b      	ldr	r0, [pc, #492]	@ (8001e60 <MX_GPIO_Init+0x2e8>)
 8001c74:	f001 fb80 	bl	8003378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2180      	movs	r1, #128	@ 0x80
 8001c7c:	4879      	ldr	r0, [pc, #484]	@ (8001e64 <MX_GPIO_Init+0x2ec>)
 8001c7e:	f001 fb7b 	bl	8003378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001c82:	2200      	movs	r2, #0
 8001c84:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001c88:	4877      	ldr	r0, [pc, #476]	@ (8001e68 <MX_GPIO_Init+0x2f0>)
 8001c8a:	f001 fb75 	bl	8003378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001c94:	4875      	ldr	r0, [pc, #468]	@ (8001e6c <MX_GPIO_Init+0x2f4>)
 8001c96:	f001 fb6f 	bl	8003378 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001c9a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001c9e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cac:	230c      	movs	r3, #12
 8001cae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	486e      	ldr	r0, [pc, #440]	@ (8001e70 <MX_GPIO_Init+0x2f8>)
 8001cb8:	f001 f8a6 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ccc:	230c      	movs	r3, #12
 8001cce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4862      	ldr	r0, [pc, #392]	@ (8001e60 <MX_GPIO_Init+0x2e8>)
 8001cd8:	f001 f896 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001cdc:	2316      	movs	r3, #22
 8001cde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	485b      	ldr	r0, [pc, #364]	@ (8001e60 <MX_GPIO_Init+0x2e8>)
 8001cf4:	f001 f888 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001cf8:	f248 0307 	movw	r3, #32775	@ 0x8007
 8001cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001cfe:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001d02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4855      	ldr	r0, [pc, #340]	@ (8001e64 <MX_GPIO_Init+0x2ec>)
 8001d10:	f001 f87a 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001d14:	2380      	movs	r3, #128	@ 0x80
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001d24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d28:	4619      	mov	r1, r3
 8001d2a:	484e      	ldr	r0, [pc, #312]	@ (8001e64 <MX_GPIO_Init+0x2ec>)
 8001d2c:	f001 f86c 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001d30:	2320      	movs	r3, #32
 8001d32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d34:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001d3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d42:	4619      	mov	r1, r3
 8001d44:	4846      	ldr	r0, [pc, #280]	@ (8001e60 <MX_GPIO_Init+0x2e8>)
 8001d46:	f001 f85f 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001d56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4845      	ldr	r0, [pc, #276]	@ (8001e74 <MX_GPIO_Init+0x2fc>)
 8001d5e:	f001 f853 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001d62:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001d66:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d70:	2303      	movs	r3, #3
 8001d72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d74:	230c      	movs	r3, #12
 8001d76:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	483b      	ldr	r0, [pc, #236]	@ (8001e6c <MX_GPIO_Init+0x2f4>)
 8001d80:	f001 f842 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001d84:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d92:	2303      	movs	r3, #3
 8001d94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d96:	230c      	movs	r3, #12
 8001d98:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4835      	ldr	r0, [pc, #212]	@ (8001e78 <MX_GPIO_Init+0x300>)
 8001da2:	f001 f831 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001da6:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001daa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001db8:	230c      	movs	r3, #12
 8001dba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	482c      	ldr	r0, [pc, #176]	@ (8001e74 <MX_GPIO_Init+0x2fc>)
 8001dc4:	f001 f820 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001dc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001dd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4825      	ldr	r0, [pc, #148]	@ (8001e74 <MX_GPIO_Init+0x2fc>)
 8001dde:	f001 f813 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001de2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001df4:	230c      	movs	r3, #12
 8001df6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	481a      	ldr	r0, [pc, #104]	@ (8001e68 <MX_GPIO_Init+0x2f0>)
 8001e00:	f001 f802 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001e04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001e12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e16:	4619      	mov	r1, r3
 8001e18:	4813      	ldr	r0, [pc, #76]	@ (8001e68 <MX_GPIO_Init+0x2f0>)
 8001e1a:	f000 fff5 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001e1e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001e22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e24:	2301      	movs	r3, #1
 8001e26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e34:	4619      	mov	r1, r3
 8001e36:	480c      	ldr	r0, [pc, #48]	@ (8001e68 <MX_GPIO_Init+0x2f0>)
 8001e38:	f000 ffe6 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001e3c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e4e:	2307      	movs	r3, #7
 8001e50:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e56:	4619      	mov	r1, r3
 8001e58:	e010      	b.n	8001e7c <MX_GPIO_Init+0x304>
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40020800 	.word	0x40020800
 8001e64:	40020000 	.word	0x40020000
 8001e68:	40020c00 	.word	0x40020c00
 8001e6c:	40021800 	.word	0x40021800
 8001e70:	40021400 	.word	0x40021400
 8001e74:	40020400 	.word	0x40020400
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	4812      	ldr	r0, [pc, #72]	@ (8001ec8 <MX_GPIO_Init+0x350>)
 8001e7e:	f000 ffc3 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001e82:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001e86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e98:	4619      	mov	r1, r3
 8001e9a:	480c      	ldr	r0, [pc, #48]	@ (8001ecc <MX_GPIO_Init+0x354>)
 8001e9c:	f000 ffb4 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001ea0:	2360      	movs	r3, #96	@ 0x60
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001eb0:	230c      	movs	r3, #12
 8001eb2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4805      	ldr	r0, [pc, #20]	@ (8001ed0 <MX_GPIO_Init+0x358>)
 8001ebc:	f000 ffa4 	bl	8002e08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ec0:	bf00      	nop
 8001ec2:	3738      	adds	r7, #56	@ 0x38
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40020000 	.word	0x40020000
 8001ecc:	40021800 	.word	0x40021800
 8001ed0:	40020400 	.word	0x40020400

08001ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed8:	b672      	cpsid	i
}
 8001eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <Error_Handler+0x8>

08001ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	4b10      	ldr	r3, [pc, #64]	@ (8001f2c <HAL_MspInit+0x4c>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eee:	4a0f      	ldr	r2, [pc, #60]	@ (8001f2c <HAL_MspInit+0x4c>)
 8001ef0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ef4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f2c <HAL_MspInit+0x4c>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001efe:	607b      	str	r3, [r7, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	603b      	str	r3, [r7, #0]
 8001f06:	4b09      	ldr	r3, [pc, #36]	@ (8001f2c <HAL_MspInit+0x4c>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	4a08      	ldr	r2, [pc, #32]	@ (8001f2c <HAL_MspInit+0x4c>)
 8001f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f12:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <HAL_MspInit+0x4c>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f1e:	2007      	movs	r0, #7
 8001f20:	f000 ff3e 	bl	8002da0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40023800 	.word	0x40023800

08001f30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08a      	sub	sp, #40	@ 0x28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a29      	ldr	r2, [pc, #164]	@ (8001ff4 <HAL_I2C_MspInit+0xc4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d14b      	bne.n	8001fea <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	4b28      	ldr	r3, [pc, #160]	@ (8001ff8 <HAL_I2C_MspInit+0xc8>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	4a27      	ldr	r2, [pc, #156]	@ (8001ff8 <HAL_I2C_MspInit+0xc8>)
 8001f5c:	f043 0304 	orr.w	r3, r3, #4
 8001f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f62:	4b25      	ldr	r3, [pc, #148]	@ (8001ff8 <HAL_I2C_MspInit+0xc8>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	4b21      	ldr	r3, [pc, #132]	@ (8001ff8 <HAL_I2C_MspInit+0xc8>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	4a20      	ldr	r2, [pc, #128]	@ (8001ff8 <HAL_I2C_MspInit+0xc8>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff8 <HAL_I2C_MspInit+0xc8>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001f8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f90:	2312      	movs	r3, #18
 8001f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4815      	ldr	r0, [pc, #84]	@ (8001ffc <HAL_I2C_MspInit+0xcc>)
 8001fa8:	f000 ff2e 	bl	8002e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001fac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb2:	2312      	movs	r3, #18
 8001fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001fc2:	f107 0314 	add.w	r3, r7, #20
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	480d      	ldr	r0, [pc, #52]	@ (8002000 <HAL_I2C_MspInit+0xd0>)
 8001fca:	f000 ff1d 	bl	8002e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <HAL_I2C_MspInit+0xc8>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	4a08      	ldr	r2, [pc, #32]	@ (8001ff8 <HAL_I2C_MspInit+0xc8>)
 8001fd8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fde:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <HAL_I2C_MspInit+0xc8>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001fea:	bf00      	nop
 8001fec:	3728      	adds	r7, #40	@ 0x28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40005c00 	.word	0x40005c00
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020800 	.word	0x40020800
 8002000:	40020000 	.word	0x40020000

08002004 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b09a      	sub	sp, #104	@ 0x68
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800201c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002020:	2230      	movs	r2, #48	@ 0x30
 8002022:	2100      	movs	r1, #0
 8002024:	4618      	mov	r0, r3
 8002026:	f004 fcb5 	bl	8006994 <memset>
  if(hltdc->Instance==LTDC)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a81      	ldr	r2, [pc, #516]	@ (8002234 <HAL_LTDC_MspInit+0x230>)
 8002030:	4293      	cmp	r3, r2
 8002032:	f040 80fb 	bne.w	800222c <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002036:	2308      	movs	r3, #8
 8002038:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 800203a:	23c8      	movs	r3, #200	@ 0xc8
 800203c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800203e:	2302      	movs	r3, #2
 8002040:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8002042:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002046:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002048:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800204c:	4618      	mov	r0, r3
 800204e:	f003 f977 	bl	8005340 <HAL_RCCEx_PeriphCLKConfig>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002058:	f7ff ff3c 	bl	8001ed4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800205c:	2300      	movs	r3, #0
 800205e:	623b      	str	r3, [r7, #32]
 8002060:	4b75      	ldr	r3, [pc, #468]	@ (8002238 <HAL_LTDC_MspInit+0x234>)
 8002062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002064:	4a74      	ldr	r2, [pc, #464]	@ (8002238 <HAL_LTDC_MspInit+0x234>)
 8002066:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800206a:	6453      	str	r3, [r2, #68]	@ 0x44
 800206c:	4b72      	ldr	r3, [pc, #456]	@ (8002238 <HAL_LTDC_MspInit+0x234>)
 800206e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002070:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002074:	623b      	str	r3, [r7, #32]
 8002076:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
 800207c:	4b6e      	ldr	r3, [pc, #440]	@ (8002238 <HAL_LTDC_MspInit+0x234>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002080:	4a6d      	ldr	r2, [pc, #436]	@ (8002238 <HAL_LTDC_MspInit+0x234>)
 8002082:	f043 0320 	orr.w	r3, r3, #32
 8002086:	6313      	str	r3, [r2, #48]	@ 0x30
 8002088:	4b6b      	ldr	r3, [pc, #428]	@ (8002238 <HAL_LTDC_MspInit+0x234>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208c:	f003 0320 	and.w	r3, r3, #32
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002094:	2300      	movs	r3, #0
 8002096:	61bb      	str	r3, [r7, #24]
 8002098:	4b67      	ldr	r3, [pc, #412]	@ (8002238 <HAL_LTDC_MspInit+0x234>)
 800209a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209c:	4a66      	ldr	r2, [pc, #408]	@ (8002238 <HAL_LTDC_MspInit+0x234>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a4:	4b64      	ldr	r3, [pc, #400]	@ (8002238 <HAL_LTDC_MspInit+0x234>)
 80020a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	61bb      	str	r3, [r7, #24]
 80020ae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	4b60      	ldr	r3, [pc, #384]	@ (8002238 <HAL_LTDC_MspInit+0x234>)
 80020b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b8:	4a5f      	ldr	r2, [pc, #380]	@ (8002238 <HAL_LTDC_MspInit+0x234>)
 80020ba:	f043 0302 	orr.w	r3, r3, #2
 80020be:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c0:	4b5d      	ldr	r3, [pc, #372]	@ (8002238 <HAL_LTDC_MspInit+0x234>)
 80020c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	4b59      	ldr	r3, [pc, #356]	@ (8002238 <HAL_LTDC_MspInit+0x234>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d4:	4a58      	ldr	r2, [pc, #352]	@ (8002238 <HAL_LTDC_MspInit+0x234>)
 80020d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020da:	6313      	str	r3, [r2, #48]	@ 0x30
 80020dc:	4b56      	ldr	r3, [pc, #344]	@ (8002238 <HAL_LTDC_MspInit+0x234>)
 80020de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	4b52      	ldr	r3, [pc, #328]	@ (8002238 <HAL_LTDC_MspInit+0x234>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f0:	4a51      	ldr	r2, [pc, #324]	@ (8002238 <HAL_LTDC_MspInit+0x234>)
 80020f2:	f043 0304 	orr.w	r3, r3, #4
 80020f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f8:	4b4f      	ldr	r3, [pc, #316]	@ (8002238 <HAL_LTDC_MspInit+0x234>)
 80020fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002104:	2300      	movs	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	4b4b      	ldr	r3, [pc, #300]	@ (8002238 <HAL_LTDC_MspInit+0x234>)
 800210a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210c:	4a4a      	ldr	r2, [pc, #296]	@ (8002238 <HAL_LTDC_MspInit+0x234>)
 800210e:	f043 0308 	orr.w	r3, r3, #8
 8002112:	6313      	str	r3, [r2, #48]	@ 0x30
 8002114:	4b48      	ldr	r3, [pc, #288]	@ (8002238 <HAL_LTDC_MspInit+0x234>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002120:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002124:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002132:	230e      	movs	r3, #14
 8002134:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002136:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800213a:	4619      	mov	r1, r3
 800213c:	483f      	ldr	r0, [pc, #252]	@ (800223c <HAL_LTDC_MspInit+0x238>)
 800213e:	f000 fe63 	bl	8002e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002142:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002146:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002150:	2300      	movs	r3, #0
 8002152:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002154:	230e      	movs	r3, #14
 8002156:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002158:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800215c:	4619      	mov	r1, r3
 800215e:	4838      	ldr	r0, [pc, #224]	@ (8002240 <HAL_LTDC_MspInit+0x23c>)
 8002160:	f000 fe52 	bl	8002e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002164:	2303      	movs	r3, #3
 8002166:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002170:	2300      	movs	r3, #0
 8002172:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002174:	2309      	movs	r3, #9
 8002176:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002178:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800217c:	4619      	mov	r1, r3
 800217e:	4831      	ldr	r0, [pc, #196]	@ (8002244 <HAL_LTDC_MspInit+0x240>)
 8002180:	f000 fe42 	bl	8002e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002184:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002188:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	2300      	movs	r3, #0
 8002194:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002196:	230e      	movs	r3, #14
 8002198:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800219e:	4619      	mov	r1, r3
 80021a0:	4828      	ldr	r0, [pc, #160]	@ (8002244 <HAL_LTDC_MspInit+0x240>)
 80021a2:	f000 fe31 	bl	8002e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80021a6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80021aa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021b8:	230e      	movs	r3, #14
 80021ba:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021c0:	4619      	mov	r1, r3
 80021c2:	4821      	ldr	r0, [pc, #132]	@ (8002248 <HAL_LTDC_MspInit+0x244>)
 80021c4:	f000 fe20 	bl	8002e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80021c8:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80021cc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d6:	2300      	movs	r3, #0
 80021d8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021da:	230e      	movs	r3, #14
 80021dc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021de:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021e2:	4619      	mov	r1, r3
 80021e4:	4819      	ldr	r0, [pc, #100]	@ (800224c <HAL_LTDC_MspInit+0x248>)
 80021e6:	f000 fe0f 	bl	8002e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80021ea:	2348      	movs	r3, #72	@ 0x48
 80021ec:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	2300      	movs	r3, #0
 80021f8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021fa:	230e      	movs	r3, #14
 80021fc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002202:	4619      	mov	r1, r3
 8002204:	4812      	ldr	r0, [pc, #72]	@ (8002250 <HAL_LTDC_MspInit+0x24c>)
 8002206:	f000 fdff 	bl	8002e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800220a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800220e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800221c:	2309      	movs	r3, #9
 800221e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002220:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002224:	4619      	mov	r1, r3
 8002226:	4808      	ldr	r0, [pc, #32]	@ (8002248 <HAL_LTDC_MspInit+0x244>)
 8002228:	f000 fdee 	bl	8002e08 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800222c:	bf00      	nop
 800222e:	3768      	adds	r7, #104	@ 0x68
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40016800 	.word	0x40016800
 8002238:	40023800 	.word	0x40023800
 800223c:	40021400 	.word	0x40021400
 8002240:	40020000 	.word	0x40020000
 8002244:	40020400 	.word	0x40020400
 8002248:	40021800 	.word	0x40021800
 800224c:	40020800 	.word	0x40020800
 8002250:	40020c00 	.word	0x40020c00

08002254 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a0b      	ldr	r2, [pc, #44]	@ (8002290 <HAL_RNG_MspInit+0x3c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d10d      	bne.n	8002282 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	4b0a      	ldr	r3, [pc, #40]	@ (8002294 <HAL_RNG_MspInit+0x40>)
 800226c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800226e:	4a09      	ldr	r2, [pc, #36]	@ (8002294 <HAL_RNG_MspInit+0x40>)
 8002270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002274:	6353      	str	r3, [r2, #52]	@ 0x34
 8002276:	4b07      	ldr	r3, [pc, #28]	@ (8002294 <HAL_RNG_MspInit+0x40>)
 8002278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800227a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002282:	bf00      	nop
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	50060800 	.word	0x50060800
 8002294:	40023800 	.word	0x40023800

08002298 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	@ 0x28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a19      	ldr	r2, [pc, #100]	@ (800231c <HAL_SPI_MspInit+0x84>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d12c      	bne.n	8002314 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	4b18      	ldr	r3, [pc, #96]	@ (8002320 <HAL_SPI_MspInit+0x88>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	4a17      	ldr	r2, [pc, #92]	@ (8002320 <HAL_SPI_MspInit+0x88>)
 80022c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ca:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <HAL_SPI_MspInit+0x88>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <HAL_SPI_MspInit+0x88>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	4a10      	ldr	r2, [pc, #64]	@ (8002320 <HAL_SPI_MspInit+0x88>)
 80022e0:	f043 0320 	orr.w	r3, r3, #32
 80022e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002320 <HAL_SPI_MspInit+0x88>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	f003 0320 	and.w	r3, r3, #32
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80022f2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80022f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002300:	2300      	movs	r3, #0
 8002302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002304:	2305      	movs	r3, #5
 8002306:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	4619      	mov	r1, r3
 800230e:	4805      	ldr	r0, [pc, #20]	@ (8002324 <HAL_SPI_MspInit+0x8c>)
 8002310:	f000 fd7a 	bl	8002e08 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002314:	bf00      	nop
 8002316:	3728      	adds	r7, #40	@ 0x28
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40015000 	.word	0x40015000
 8002320:	40023800 	.word	0x40023800
 8002324:	40021400 	.word	0x40021400

08002328 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a08      	ldr	r2, [pc, #32]	@ (8002358 <HAL_SPI_MspDeInit+0x30>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d10a      	bne.n	8002350 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800233a:	4b08      	ldr	r3, [pc, #32]	@ (800235c <HAL_SPI_MspDeInit+0x34>)
 800233c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233e:	4a07      	ldr	r2, [pc, #28]	@ (800235c <HAL_SPI_MspDeInit+0x34>)
 8002340:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002344:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002346:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800234a:	4805      	ldr	r0, [pc, #20]	@ (8002360 <HAL_SPI_MspDeInit+0x38>)
 800234c:	f000 ff08 	bl	8003160 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40015000 	.word	0x40015000
 800235c:	40023800 	.word	0x40023800
 8002360:	40021400 	.word	0x40021400

08002364 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002374:	d10d      	bne.n	8002392 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	4b09      	ldr	r3, [pc, #36]	@ (80023a0 <HAL_TIM_Base_MspInit+0x3c>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237e:	4a08      	ldr	r2, [pc, #32]	@ (80023a0 <HAL_TIM_Base_MspInit+0x3c>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6413      	str	r3, [r2, #64]	@ 0x40
 8002386:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <HAL_TIM_Base_MspInit+0x3c>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002392:	bf00      	nop
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40023800 	.word	0x40023800

080023a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023a8:	bf00      	nop
 80023aa:	e7fd      	b.n	80023a8 <NMI_Handler+0x4>

080023ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023b0:	bf00      	nop
 80023b2:	e7fd      	b.n	80023b0 <HardFault_Handler+0x4>

080023b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b8:	bf00      	nop
 80023ba:	e7fd      	b.n	80023b8 <MemManage_Handler+0x4>

080023bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023c0:	bf00      	nop
 80023c2:	e7fd      	b.n	80023c0 <BusFault_Handler+0x4>

080023c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c8:	bf00      	nop
 80023ca:	e7fd      	b.n	80023c8 <UsageFault_Handler+0x4>

080023cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023fa:	f000 fbdb 	bl	8002bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}

08002402 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002408:	f000 f9ce 	bl	80027a8 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 800240c:	f000 f98e 	bl	800272c <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002410:	2202      	movs	r2, #2
 8002412:	2103      	movs	r1, #3
 8002414:	2082      	movs	r0, #130	@ 0x82
 8002416:	f000 fa1b 	bl	8002850 <I2C3_Write>
    HAL_Delay(5);
 800241a:	2005      	movs	r0, #5
 800241c:	f000 fbea 	bl	8002bf4 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002420:	2200      	movs	r2, #0
 8002422:	2103      	movs	r1, #3
 8002424:	2082      	movs	r0, #130	@ 0x82
 8002426:	f000 fa13 	bl	8002850 <I2C3_Write>
    HAL_Delay(2);
 800242a:	2002      	movs	r0, #2
 800242c:	f000 fbe2 	bl	8002bf4 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002430:	1cba      	adds	r2, r7, #2
 8002432:	2302      	movs	r3, #2
 8002434:	2100      	movs	r1, #0
 8002436:	2082      	movs	r0, #130	@ 0x82
 8002438:	f000 fa5a 	bl	80028f0 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 800243c:	887b      	ldrh	r3, [r7, #2]
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002442:	887b      	ldrh	r3, [r7, #2]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	b29a      	uxth	r2, r3
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	4313      	orrs	r3, r2
 800244c:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	f640 0211 	movw	r2, #2065	@ 0x811
 8002454:	4293      	cmp	r3, r2
 8002456:	d001      	beq.n	800245c <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002458:	2303      	movs	r3, #3
 800245a:	e075      	b.n	8002548 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800245c:	2202      	movs	r2, #2
 800245e:	2103      	movs	r1, #3
 8002460:	2082      	movs	r0, #130	@ 0x82
 8002462:	f000 f9f5 	bl	8002850 <I2C3_Write>
    HAL_Delay(5);
 8002466:	2005      	movs	r0, #5
 8002468:	f000 fbc4 	bl	8002bf4 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800246c:	2200      	movs	r2, #0
 800246e:	2103      	movs	r1, #3
 8002470:	2082      	movs	r0, #130	@ 0x82
 8002472:	f000 f9ed 	bl	8002850 <I2C3_Write>
    HAL_Delay(2);
 8002476:	2002      	movs	r0, #2
 8002478:	f000 fbbc 	bl	8002bf4 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800247c:	2004      	movs	r0, #4
 800247e:	f000 f867 	bl	8002550 <STMPE811_Read>
 8002482:	4603      	mov	r3, r0
 8002484:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002486:	797b      	ldrb	r3, [r7, #5]
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800248e:	797b      	ldrb	r3, [r7, #5]
 8002490:	461a      	mov	r2, r3
 8002492:	2104      	movs	r1, #4
 8002494:	2082      	movs	r0, #130	@ 0x82
 8002496:	f000 f9db 	bl	8002850 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800249a:	2004      	movs	r0, #4
 800249c:	f000 f858 	bl	8002550 <STMPE811_Read>
 80024a0:	4603      	mov	r3, r0
 80024a2:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80024a4:	797b      	ldrb	r3, [r7, #5]
 80024a6:	f023 0302 	bic.w	r3, r3, #2
 80024aa:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80024ac:	797b      	ldrb	r3, [r7, #5]
 80024ae:	461a      	mov	r2, r3
 80024b0:	2104      	movs	r1, #4
 80024b2:	2082      	movs	r0, #130	@ 0x82
 80024b4:	f000 f9cc 	bl	8002850 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80024b8:	2249      	movs	r2, #73	@ 0x49
 80024ba:	2120      	movs	r1, #32
 80024bc:	2082      	movs	r0, #130	@ 0x82
 80024be:	f000 f9c7 	bl	8002850 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80024c2:	2002      	movs	r0, #2
 80024c4:	f000 fb96 	bl	8002bf4 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80024c8:	2201      	movs	r2, #1
 80024ca:	2121      	movs	r1, #33	@ 0x21
 80024cc:	2082      	movs	r0, #130	@ 0x82
 80024ce:	f000 f9bf 	bl	8002850 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80024d2:	2017      	movs	r0, #23
 80024d4:	f000 f83c 	bl	8002550 <STMPE811_Read>
 80024d8:	4603      	mov	r3, r0
 80024da:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80024dc:	797b      	ldrb	r3, [r7, #5]
 80024de:	f043 031e 	orr.w	r3, r3, #30
 80024e2:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80024e4:	797b      	ldrb	r3, [r7, #5]
 80024e6:	461a      	mov	r2, r3
 80024e8:	2117      	movs	r1, #23
 80024ea:	2082      	movs	r0, #130	@ 0x82
 80024ec:	f000 f9b0 	bl	8002850 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80024f0:	229a      	movs	r2, #154	@ 0x9a
 80024f2:	2141      	movs	r1, #65	@ 0x41
 80024f4:	2082      	movs	r0, #130	@ 0x82
 80024f6:	f000 f9ab 	bl	8002850 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80024fa:	2201      	movs	r2, #1
 80024fc:	214a      	movs	r1, #74	@ 0x4a
 80024fe:	2082      	movs	r0, #130	@ 0x82
 8002500:	f000 f9a6 	bl	8002850 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002504:	2201      	movs	r2, #1
 8002506:	214b      	movs	r1, #75	@ 0x4b
 8002508:	2082      	movs	r0, #130	@ 0x82
 800250a:	f000 f9a1 	bl	8002850 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800250e:	2200      	movs	r2, #0
 8002510:	214b      	movs	r1, #75	@ 0x4b
 8002512:	2082      	movs	r0, #130	@ 0x82
 8002514:	f000 f99c 	bl	8002850 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002518:	2201      	movs	r2, #1
 800251a:	2156      	movs	r1, #86	@ 0x56
 800251c:	2082      	movs	r0, #130	@ 0x82
 800251e:	f000 f997 	bl	8002850 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002522:	2201      	movs	r2, #1
 8002524:	2158      	movs	r1, #88	@ 0x58
 8002526:	2082      	movs	r0, #130	@ 0x82
 8002528:	f000 f992 	bl	8002850 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 800252c:	2203      	movs	r2, #3
 800252e:	2140      	movs	r1, #64	@ 0x40
 8002530:	2082      	movs	r0, #130	@ 0x82
 8002532:	f000 f98d 	bl	8002850 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002536:	22ff      	movs	r2, #255	@ 0xff
 8002538:	210b      	movs	r1, #11
 800253a:	2082      	movs	r0, #130	@ 0x82
 800253c:	f000 f988 	bl	8002850 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002540:	20c8      	movs	r0, #200	@ 0xc8
 8002542:	f000 fb57 	bl	8002bf4 <HAL_Delay>

    return STMPE811_State_Ok;
 8002546:	2302      	movs	r3, #2

}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 800255a:	f107 020f 	add.w	r2, r7, #15
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	4619      	mov	r1, r3
 8002562:	2082      	movs	r0, #130	@ 0x82
 8002564:	f000 f99e 	bl	80028a4 <I2C3_Read>

    return readData;
 8002568:	7bfb      	ldrb	r3, [r7, #15]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	791a      	ldrb	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002582:	2040      	movs	r0, #64	@ 0x40
 8002584:	f7ff ffe4 	bl	8002550 <STMPE811_Read>
 8002588:	4603      	mov	r3, r0
 800258a:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 800258c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002590:	2b00      	cmp	r3, #0
 8002592:	db0e      	blt.n	80025b2 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800259a:	2201      	movs	r2, #1
 800259c:	214b      	movs	r1, #75	@ 0x4b
 800259e:	2082      	movs	r0, #130	@ 0x82
 80025a0:	f000 f956 	bl	8002850 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80025a4:	2200      	movs	r2, #0
 80025a6:	214b      	movs	r1, #75	@ 0x4b
 80025a8:	2082      	movs	r0, #130	@ 0x82
 80025aa:	f000 f951 	bl	8002850 <I2C3_Write>

        return STMPE811_State_Released;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e0a7      	b.n	8002702 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	799b      	ldrb	r3, [r3, #6]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d117      	bne.n	80025ea <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f9b8 	bl	8002934 <TM_STMPE811_ReadX>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	885b      	ldrh	r3, [r3, #2]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 fa0d 	bl	80029f4 <TM_STMPE811_ReadY>
 80025da:	4603      	mov	r3, r0
 80025dc:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80025e0:	3301      	adds	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	805a      	strh	r2, [r3, #2]
 80025e8:	e048      	b.n	800267c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	799b      	ldrb	r3, [r3, #6]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d112      	bne.n	8002618 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 f99c 	bl	8002934 <TM_STMPE811_ReadX>
 80025fc:	4603      	mov	r3, r0
 80025fe:	461a      	mov	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	885b      	ldrh	r3, [r3, #2]
 8002608:	4618      	mov	r0, r3
 800260a:	f000 f9f3 	bl	80029f4 <TM_STMPE811_ReadY>
 800260e:	4603      	mov	r3, r0
 8002610:	461a      	mov	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	805a      	strh	r2, [r3, #2]
 8002616:	e031      	b.n	800267c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	799b      	ldrb	r3, [r3, #6]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d115      	bne.n	800264c <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	885b      	ldrh	r3, [r3, #2]
 8002624:	4618      	mov	r0, r3
 8002626:	f000 f985 	bl	8002934 <TM_STMPE811_ReadX>
 800262a:	4603      	mov	r3, r0
 800262c:	461a      	mov	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f9dc 	bl	80029f4 <TM_STMPE811_ReadY>
 800263c:	4603      	mov	r3, r0
 800263e:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002642:	3301      	adds	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	801a      	strh	r2, [r3, #0]
 800264a:	e017      	b.n	800267c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	799b      	ldrb	r3, [r3, #6]
 8002650:	2b03      	cmp	r3, #3
 8002652:	d113      	bne.n	800267c <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f000 f96b 	bl	8002934 <TM_STMPE811_ReadX>
 800265e:	4603      	mov	r3, r0
 8002660:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002664:	b29a      	uxth	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f9c0 	bl	80029f4 <TM_STMPE811_ReadY>
 8002674:	4603      	mov	r3, r0
 8002676:	461a      	mov	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800267c:	2201      	movs	r2, #1
 800267e:	214b      	movs	r1, #75	@ 0x4b
 8002680:	2082      	movs	r0, #130	@ 0x82
 8002682:	f000 f8e5 	bl	8002850 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002686:	2200      	movs	r2, #0
 8002688:	214b      	movs	r1, #75	@ 0x4b
 800268a:	2082      	movs	r0, #130	@ 0x82
 800268c:	f000 f8e0 	bl	8002850 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	799b      	ldrb	r3, [r3, #6]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <STMPE811_ReadTouch+0x12e>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	799b      	ldrb	r3, [r3, #6]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d115      	bne.n	80026cc <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d027      	beq.n	80026f8 <STMPE811_ReadTouch+0x186>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	2bee      	cmp	r3, #238	@ 0xee
 80026ae:	d823      	bhi.n	80026f8 <STMPE811_ReadTouch+0x186>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	885b      	ldrh	r3, [r3, #2]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d01f      	beq.n	80026f8 <STMPE811_ReadTouch+0x186>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	885b      	ldrh	r3, [r3, #2]
 80026bc:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80026c0:	d81a      	bhi.n	80026f8 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e01a      	b.n	8002702 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d012      	beq.n	80026fa <STMPE811_ReadTouch+0x188>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80026dc:	d80d      	bhi.n	80026fa <STMPE811_ReadTouch+0x188>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	885b      	ldrh	r3, [r3, #2]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d009      	beq.n	80026fa <STMPE811_ReadTouch+0x188>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	885b      	ldrh	r3, [r3, #2]
 80026ea:	2bee      	cmp	r3, #238	@ 0xee
 80026ec:	d805      	bhi.n	80026fa <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80026f4:	2300      	movs	r3, #0
 80026f6:	e004      	b.n	8002702 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80026f8:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002700:	2301      	movs	r3, #1
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002710:	4b05      	ldr	r3, [pc, #20]	@ (8002728 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002718:	bf00      	nop
 800271a:	e7fd      	b.n	8002718 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20025c10 	.word	0x20025c10

0800272c <I2C3_Init>:

static void I2C3_Init()
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	603b      	str	r3, [r7, #0]
 8002736:	4b18      	ldr	r3, [pc, #96]	@ (8002798 <I2C3_Init+0x6c>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273a:	4a17      	ldr	r2, [pc, #92]	@ (8002798 <I2C3_Init+0x6c>)
 800273c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002740:	6413      	str	r3, [r2, #64]	@ 0x40
 8002742:	4b15      	ldr	r3, [pc, #84]	@ (8002798 <I2C3_Init+0x6c>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800274e:	4b13      	ldr	r3, [pc, #76]	@ (800279c <I2C3_Init+0x70>)
 8002750:	4a13      	ldr	r2, [pc, #76]	@ (80027a0 <I2C3_Init+0x74>)
 8002752:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002754:	4b11      	ldr	r3, [pc, #68]	@ (800279c <I2C3_Init+0x70>)
 8002756:	4a13      	ldr	r2, [pc, #76]	@ (80027a4 <I2C3_Init+0x78>)
 8002758:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800275a:	4b10      	ldr	r3, [pc, #64]	@ (800279c <I2C3_Init+0x70>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002760:	4b0e      	ldr	r3, [pc, #56]	@ (800279c <I2C3_Init+0x70>)
 8002762:	2200      	movs	r2, #0
 8002764:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002766:	4b0d      	ldr	r3, [pc, #52]	@ (800279c <I2C3_Init+0x70>)
 8002768:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800276c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800276e:	4b0b      	ldr	r3, [pc, #44]	@ (800279c <I2C3_Init+0x70>)
 8002770:	2200      	movs	r2, #0
 8002772:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002774:	4b09      	ldr	r3, [pc, #36]	@ (800279c <I2C3_Init+0x70>)
 8002776:	2200      	movs	r2, #0
 8002778:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800277a:	4808      	ldr	r0, [pc, #32]	@ (800279c <I2C3_Init+0x70>)
 800277c:	f000 fe16 	bl	80033ac <HAL_I2C_Init>
 8002780:	4603      	mov	r3, r0
 8002782:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800278a:	bf00      	nop
 800278c:	e7fd      	b.n	800278a <I2C3_Init+0x5e>
    }
    return;
 800278e:	bf00      	nop
}
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40023800 	.word	0x40023800
 800279c:	20025bbc 	.word	0x20025bbc
 80027a0:	40005c00 	.word	0x40005c00
 80027a4:	000186a0 	.word	0x000186a0

080027a8 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ae:	f107 030c 	add.w	r3, r7, #12
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	605a      	str	r2, [r3, #4]
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	60da      	str	r2, [r3, #12]
 80027bc:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	4b20      	ldr	r3, [pc, #128]	@ (8002844 <I2C3_MspInit+0x9c>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002844 <I2C3_MspInit+0x9c>)
 80027c8:	f043 0304 	orr.w	r3, r3, #4
 80027cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002844 <I2C3_MspInit+0x9c>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	4b19      	ldr	r3, [pc, #100]	@ (8002844 <I2C3_MspInit+0x9c>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	4a18      	ldr	r2, [pc, #96]	@ (8002844 <I2C3_MspInit+0x9c>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ea:	4b16      	ldr	r3, [pc, #88]	@ (8002844 <I2C3_MspInit+0x9c>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80027f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027fc:	2312      	movs	r3, #18
 80027fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002804:	2300      	movs	r3, #0
 8002806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002808:	2304      	movs	r3, #4
 800280a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800280c:	f107 030c 	add.w	r3, r7, #12
 8002810:	4619      	mov	r1, r3
 8002812:	480d      	ldr	r0, [pc, #52]	@ (8002848 <I2C3_MspInit+0xa0>)
 8002814:	f000 faf8 	bl	8002e08 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002818:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800281c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800281e:	2312      	movs	r3, #18
 8002820:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002826:	2300      	movs	r3, #0
 8002828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800282a:	2304      	movs	r3, #4
 800282c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800282e:	f107 030c 	add.w	r3, r7, #12
 8002832:	4619      	mov	r1, r3
 8002834:	4805      	ldr	r0, [pc, #20]	@ (800284c <I2C3_MspInit+0xa4>)
 8002836:	f000 fae7 	bl	8002e08 <HAL_GPIO_Init>
    
}
 800283a:	bf00      	nop
 800283c:	3720      	adds	r7, #32
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	40020800 	.word	0x40020800
 800284c:	40020000 	.word	0x40020000

08002850 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af04      	add	r7, sp, #16
 8002856:	4603      	mov	r3, r0
 8002858:	80fb      	strh	r3, [r7, #6]
 800285a:	460b      	mov	r3, r1
 800285c:	717b      	strb	r3, [r7, #5]
 800285e:	4613      	mov	r3, r2
 8002860:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002862:	793b      	ldrb	r3, [r7, #4]
 8002864:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002866:	797b      	ldrb	r3, [r7, #5]
 8002868:	b29a      	uxth	r2, r3
 800286a:	88f9      	ldrh	r1, [r7, #6]
 800286c:	4b0a      	ldr	r3, [pc, #40]	@ (8002898 <I2C3_Write+0x48>)
 800286e:	9302      	str	r3, [sp, #8]
 8002870:	2301      	movs	r3, #1
 8002872:	9301      	str	r3, [sp, #4]
 8002874:	f107 030f 	add.w	r3, r7, #15
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	2301      	movs	r3, #1
 800287c:	4807      	ldr	r0, [pc, #28]	@ (800289c <I2C3_Write+0x4c>)
 800287e:	f000 fed9 	bl	8003634 <HAL_I2C_Mem_Write>
 8002882:	4603      	mov	r3, r0
 8002884:	461a      	mov	r2, r3
 8002886:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <I2C3_Write+0x50>)
 8002888:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800288a:	f7ff ff3f 	bl	800270c <verifyHAL_I2C_IS_OKAY>
}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	0003d090 	.word	0x0003d090
 800289c:	20025bbc 	.word	0x20025bbc
 80028a0:	20025c10 	.word	0x20025c10

080028a4 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af04      	add	r7, sp, #16
 80028aa:	4603      	mov	r3, r0
 80028ac:	603a      	str	r2, [r7, #0]
 80028ae:	71fb      	strb	r3, [r7, #7]
 80028b0:	460b      	mov	r3, r1
 80028b2:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	b299      	uxth	r1, r3
 80028b8:	79bb      	ldrb	r3, [r7, #6]
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	4b09      	ldr	r3, [pc, #36]	@ (80028e4 <I2C3_Read+0x40>)
 80028be:	9302      	str	r3, [sp, #8]
 80028c0:	2301      	movs	r3, #1
 80028c2:	9301      	str	r3, [sp, #4]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	2301      	movs	r3, #1
 80028ca:	4807      	ldr	r0, [pc, #28]	@ (80028e8 <I2C3_Read+0x44>)
 80028cc:	f000 ffac 	bl	8003828 <HAL_I2C_Mem_Read>
 80028d0:	4603      	mov	r3, r0
 80028d2:	461a      	mov	r2, r3
 80028d4:	4b05      	ldr	r3, [pc, #20]	@ (80028ec <I2C3_Read+0x48>)
 80028d6:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80028d8:	f7ff ff18 	bl	800270c <verifyHAL_I2C_IS_OKAY>
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	0003d090 	.word	0x0003d090
 80028e8:	20025bbc 	.word	0x20025bbc
 80028ec:	20025c10 	.word	0x20025c10

080028f0 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af04      	add	r7, sp, #16
 80028f6:	603a      	str	r2, [r7, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
 80028fe:	460b      	mov	r3, r1
 8002900:	71bb      	strb	r3, [r7, #6]
 8002902:	4613      	mov	r3, r2
 8002904:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	b299      	uxth	r1, r3
 800290a:	79bb      	ldrb	r3, [r7, #6]
 800290c:	b29a      	uxth	r2, r3
 800290e:	4b07      	ldr	r3, [pc, #28]	@ (800292c <I2C3_MulitByteRead+0x3c>)
 8002910:	9302      	str	r3, [sp, #8]
 8002912:	88bb      	ldrh	r3, [r7, #4]
 8002914:	9301      	str	r3, [sp, #4]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	2301      	movs	r3, #1
 800291c:	4804      	ldr	r0, [pc, #16]	@ (8002930 <I2C3_MulitByteRead+0x40>)
 800291e:	f000 ff83 	bl	8003828 <HAL_I2C_Mem_Read>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	0003d090 	.word	0x0003d090
 8002930:	20025bbc 	.word	0x20025bbc

08002934 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800293e:	204d      	movs	r0, #77	@ 0x4d
 8002940:	f7ff fe06 	bl	8002550 <STMPE811_Read>
 8002944:	4603      	mov	r3, r0
 8002946:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002948:	204e      	movs	r0, #78	@ 0x4e
 800294a:	f7ff fe01 	bl	8002550 <STMPE811_Read>
 800294e:	4603      	mov	r3, r0
 8002950:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002952:	7a7b      	ldrb	r3, [r7, #9]
 8002954:	b21b      	sxth	r3, r3
 8002956:	021b      	lsls	r3, r3, #8
 8002958:	b21a      	sxth	r2, r3
 800295a:	7a3b      	ldrb	r3, [r7, #8]
 800295c:	b21b      	sxth	r3, r3
 800295e:	4313      	orrs	r3, r2
 8002960:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002962:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002966:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800296a:	4293      	cmp	r3, r2
 800296c:	dc06      	bgt.n	800297c <TM_STMPE811_ReadX+0x48>
        val = 3900 - val;
 800296e:	89fb      	ldrh	r3, [r7, #14]
 8002970:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002974:	330c      	adds	r3, #12
 8002976:	b29b      	uxth	r3, r3
 8002978:	81fb      	strh	r3, [r7, #14]
 800297a:	e005      	b.n	8002988 <TM_STMPE811_ReadX+0x54>
    } else {
        val = 3800 - val;
 800297c:	89fb      	ldrh	r3, [r7, #14]
 800297e:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002982:	3308      	adds	r3, #8
 8002984:	b29b      	uxth	r3, r3
 8002986:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002988:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800298c:	4a18      	ldr	r2, [pc, #96]	@ (80029f0 <TM_STMPE811_ReadX+0xbc>)
 800298e:	fb82 1203 	smull	r1, r2, r2, r3
 8002992:	441a      	add	r2, r3
 8002994:	10d2      	asrs	r2, r2, #3
 8002996:	17db      	asrs	r3, r3, #31
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 800299c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029a0:	2bef      	cmp	r3, #239	@ 0xef
 80029a2:	dd02      	ble.n	80029aa <TM_STMPE811_ReadX+0x76>
        val = 239;
 80029a4:	23ef      	movs	r3, #239	@ 0xef
 80029a6:	81fb      	strh	r3, [r7, #14]
 80029a8:	e005      	b.n	80029b6 <TM_STMPE811_ReadX+0x82>
    } else if (val < 0) {
 80029aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	da01      	bge.n	80029b6 <TM_STMPE811_ReadX+0x82>
        val = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80029b6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	429a      	cmp	r2, r3
 80029be:	dd05      	ble.n	80029cc <TM_STMPE811_ReadX+0x98>
 80029c0:	89fa      	ldrh	r2, [r7, #14]
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	b21b      	sxth	r3, r3
 80029ca:	e004      	b.n	80029d6 <TM_STMPE811_ReadX+0xa2>
 80029cc:	89fb      	ldrh	r3, [r7, #14]
 80029ce:	88fa      	ldrh	r2, [r7, #6]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	b21b      	sxth	r3, r3
 80029d6:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80029d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80029dc:	2b04      	cmp	r3, #4
 80029de:	dd01      	ble.n	80029e4 <TM_STMPE811_ReadX+0xb0>
        return val;
 80029e0:	89fb      	ldrh	r3, [r7, #14]
 80029e2:	e000      	b.n	80029e6 <TM_STMPE811_ReadX+0xb2>
    }
    return x;
 80029e4:	88fb      	ldrh	r3, [r7, #6]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	88888889 	.word	0x88888889

080029f4 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80029fe:	204f      	movs	r0, #79	@ 0x4f
 8002a00:	f7ff fda6 	bl	8002550 <STMPE811_Read>
 8002a04:	4603      	mov	r3, r0
 8002a06:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002a08:	2050      	movs	r0, #80	@ 0x50
 8002a0a:	f7ff fda1 	bl	8002550 <STMPE811_Read>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002a12:	7a7b      	ldrb	r3, [r7, #9]
 8002a14:	b21b      	sxth	r3, r3
 8002a16:	021b      	lsls	r3, r3, #8
 8002a18:	b21a      	sxth	r2, r3
 8002a1a:	7a3b      	ldrb	r3, [r7, #8]
 8002a1c:	b21b      	sxth	r3, r3
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002a22:	89fb      	ldrh	r3, [r7, #14]
 8002a24:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002a2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a30:	4a18      	ldr	r2, [pc, #96]	@ (8002a94 <TM_STMPE811_ReadY+0xa0>)
 8002a32:	fb82 1203 	smull	r1, r2, r2, r3
 8002a36:	1052      	asrs	r2, r2, #1
 8002a38:	17db      	asrs	r3, r3, #31
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002a3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	dc02      	bgt.n	8002a4c <TM_STMPE811_ReadY+0x58>
        val = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	81fb      	strh	r3, [r7, #14]
 8002a4a:	e007      	b.n	8002a5c <TM_STMPE811_ReadY+0x68>
    } else if (val >= 320) {
 8002a4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a50:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002a54:	db02      	blt.n	8002a5c <TM_STMPE811_ReadY+0x68>
        val = 319;
 8002a56:	f240 133f 	movw	r3, #319	@ 0x13f
 8002a5a:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002a5c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	dd05      	ble.n	8002a72 <TM_STMPE811_ReadY+0x7e>
 8002a66:	89fa      	ldrh	r2, [r7, #14]
 8002a68:	88fb      	ldrh	r3, [r7, #6]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	b21b      	sxth	r3, r3
 8002a70:	e004      	b.n	8002a7c <TM_STMPE811_ReadY+0x88>
 8002a72:	89fb      	ldrh	r3, [r7, #14]
 8002a74:	88fa      	ldrh	r2, [r7, #6]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	b21b      	sxth	r3, r3
 8002a7c:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002a7e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	dd01      	ble.n	8002a8a <TM_STMPE811_ReadY+0x96>
        return val;
 8002a86:	89fb      	ldrh	r3, [r7, #14]
 8002a88:	e000      	b.n	8002a8c <TM_STMPE811_ReadY+0x98>
    }
    return y;
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	2e8ba2e9 	.word	0x2e8ba2e9

08002a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a9c:	4b06      	ldr	r3, [pc, #24]	@ (8002ab8 <SystemInit+0x20>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa2:	4a05      	ldr	r2, [pc, #20]	@ (8002ab8 <SystemInit+0x20>)
 8002aa4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002aa8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aac:	bf00      	nop
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002abc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002af4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ac0:	f7ff ffea 	bl	8002a98 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ac4:	480c      	ldr	r0, [pc, #48]	@ (8002af8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ac6:	490d      	ldr	r1, [pc, #52]	@ (8002afc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002acc:	e002      	b.n	8002ad4 <LoopCopyDataInit>

08002ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ad2:	3304      	adds	r3, #4

08002ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ad8:	d3f9      	bcc.n	8002ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ada:	4a0a      	ldr	r2, [pc, #40]	@ (8002b04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002adc:	4c0a      	ldr	r4, [pc, #40]	@ (8002b08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ae0:	e001      	b.n	8002ae6 <LoopFillZerobss>

08002ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ae4:	3204      	adds	r2, #4

08002ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ae8:	d3fb      	bcc.n	8002ae2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002aea:	f003 ff61 	bl	80069b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aee:	f7fe fe34 	bl	800175a <main>
  bx  lr    
 8002af2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002af4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002afc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002b00:	08007f44 	.word	0x08007f44
  ldr r2, =_sbss
 8002b04:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002b08:	20025e0c 	.word	0x20025e0c

08002b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b0c:	e7fe      	b.n	8002b0c <ADC_IRQHandler>
	...

08002b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b14:	4b0e      	ldr	r3, [pc, #56]	@ (8002b50 <HAL_Init+0x40>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a0d      	ldr	r2, [pc, #52]	@ (8002b50 <HAL_Init+0x40>)
 8002b1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b20:	4b0b      	ldr	r3, [pc, #44]	@ (8002b50 <HAL_Init+0x40>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0a      	ldr	r2, [pc, #40]	@ (8002b50 <HAL_Init+0x40>)
 8002b26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b2c:	4b08      	ldr	r3, [pc, #32]	@ (8002b50 <HAL_Init+0x40>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a07      	ldr	r2, [pc, #28]	@ (8002b50 <HAL_Init+0x40>)
 8002b32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b38:	2003      	movs	r0, #3
 8002b3a:	f000 f931 	bl	8002da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f000 f808 	bl	8002b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b44:	f7ff f9cc 	bl	8001ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40023c00 	.word	0x40023c00

08002b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ba8 <HAL_InitTick+0x54>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4b12      	ldr	r3, [pc, #72]	@ (8002bac <HAL_InitTick+0x58>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	4619      	mov	r1, r3
 8002b66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 f93b 	bl	8002dee <HAL_SYSTICK_Config>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e00e      	b.n	8002ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b0f      	cmp	r3, #15
 8002b86:	d80a      	bhi.n	8002b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b88:	2200      	movs	r2, #0
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b90:	f000 f911 	bl	8002db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b94:	4a06      	ldr	r2, [pc, #24]	@ (8002bb0 <HAL_InitTick+0x5c>)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e000      	b.n	8002ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000010 	.word	0x20000010
 8002bac:	20000018 	.word	0x20000018
 8002bb0:	20000014 	.word	0x20000014

08002bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bb8:	4b06      	ldr	r3, [pc, #24]	@ (8002bd4 <HAL_IncTick+0x20>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <HAL_IncTick+0x24>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	4a04      	ldr	r2, [pc, #16]	@ (8002bd8 <HAL_IncTick+0x24>)
 8002bc6:	6013      	str	r3, [r2, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	20000018 	.word	0x20000018
 8002bd8:	20025c14 	.word	0x20025c14

08002bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return uwTick;
 8002be0:	4b03      	ldr	r3, [pc, #12]	@ (8002bf0 <HAL_GetTick+0x14>)
 8002be2:	681b      	ldr	r3, [r3, #0]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20025c14 	.word	0x20025c14

08002bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bfc:	f7ff ffee 	bl	8002bdc <HAL_GetTick>
 8002c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c0c:	d005      	beq.n	8002c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <HAL_Delay+0x44>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c1a:	bf00      	nop
 8002c1c:	f7ff ffde 	bl	8002bdc <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d8f7      	bhi.n	8002c1c <HAL_Delay+0x28>
  {
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000018 	.word	0x20000018

08002c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c80 <__NVIC_SetPriorityGrouping+0x44>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c58:	4013      	ands	r3, r2
 8002c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c6e:	4a04      	ldr	r2, [pc, #16]	@ (8002c80 <__NVIC_SetPriorityGrouping+0x44>)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	60d3      	str	r3, [r2, #12]
}
 8002c74:	bf00      	nop
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c88:	4b04      	ldr	r3, [pc, #16]	@ (8002c9c <__NVIC_GetPriorityGrouping+0x18>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	0a1b      	lsrs	r3, r3, #8
 8002c8e:	f003 0307 	and.w	r3, r3, #7
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	6039      	str	r1, [r7, #0]
 8002caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	db0a      	blt.n	8002cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	490c      	ldr	r1, [pc, #48]	@ (8002cec <__NVIC_SetPriority+0x4c>)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	0112      	lsls	r2, r2, #4
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc8:	e00a      	b.n	8002ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	4908      	ldr	r1, [pc, #32]	@ (8002cf0 <__NVIC_SetPriority+0x50>)
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	3b04      	subs	r3, #4
 8002cd8:	0112      	lsls	r2, r2, #4
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	440b      	add	r3, r1
 8002cde:	761a      	strb	r2, [r3, #24]
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000e100 	.word	0xe000e100
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b089      	sub	sp, #36	@ 0x24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f1c3 0307 	rsb	r3, r3, #7
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	bf28      	it	cs
 8002d12:	2304      	movcs	r3, #4
 8002d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	2b06      	cmp	r3, #6
 8002d1c:	d902      	bls.n	8002d24 <NVIC_EncodePriority+0x30>
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3b03      	subs	r3, #3
 8002d22:	e000      	b.n	8002d26 <NVIC_EncodePriority+0x32>
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43da      	mvns	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	401a      	ands	r2, r3
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d3c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	fa01 f303 	lsl.w	r3, r1, r3
 8002d46:	43d9      	mvns	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	4313      	orrs	r3, r2
         );
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3724      	adds	r7, #36	@ 0x24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d6c:	d301      	bcc.n	8002d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e00f      	b.n	8002d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d72:	4a0a      	ldr	r2, [pc, #40]	@ (8002d9c <SysTick_Config+0x40>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d7a:	210f      	movs	r1, #15
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d80:	f7ff ff8e 	bl	8002ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d84:	4b05      	ldr	r3, [pc, #20]	@ (8002d9c <SysTick_Config+0x40>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d8a:	4b04      	ldr	r3, [pc, #16]	@ (8002d9c <SysTick_Config+0x40>)
 8002d8c:	2207      	movs	r2, #7
 8002d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	e000e010 	.word	0xe000e010

08002da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff ff47 	bl	8002c3c <__NVIC_SetPriorityGrouping>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b086      	sub	sp, #24
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc8:	f7ff ff5c 	bl	8002c84 <__NVIC_GetPriorityGrouping>
 8002dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	6978      	ldr	r0, [r7, #20]
 8002dd4:	f7ff ff8e 	bl	8002cf4 <NVIC_EncodePriority>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dde:	4611      	mov	r1, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ff5d 	bl	8002ca0 <__NVIC_SetPriority>
}
 8002de6:	bf00      	nop
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff ffb0 	bl	8002d5c <SysTick_Config>
 8002dfc:	4603      	mov	r3, r0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b089      	sub	sp, #36	@ 0x24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
 8002e22:	e177      	b.n	8003114 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e24:	2201      	movs	r2, #1
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4013      	ands	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	f040 8166 	bne.w	800310e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d005      	beq.n	8002e5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d130      	bne.n	8002ebc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	2203      	movs	r2, #3
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e90:	2201      	movs	r2, #1
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	091b      	lsrs	r3, r3, #4
 8002ea6:	f003 0201 	and.w	r2, r3, #1
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 0303 	and.w	r3, r3, #3
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d017      	beq.n	8002ef8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d123      	bne.n	8002f4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	08da      	lsrs	r2, r3, #3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3208      	adds	r2, #8
 8002f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	220f      	movs	r2, #15
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	08da      	lsrs	r2, r3, #3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3208      	adds	r2, #8
 8002f46:	69b9      	ldr	r1, [r7, #24]
 8002f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	2203      	movs	r2, #3
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4013      	ands	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 0203 	and.w	r2, r3, #3
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 80c0 	beq.w	800310e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	4b66      	ldr	r3, [pc, #408]	@ (800312c <HAL_GPIO_Init+0x324>)
 8002f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f96:	4a65      	ldr	r2, [pc, #404]	@ (800312c <HAL_GPIO_Init+0x324>)
 8002f98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f9e:	4b63      	ldr	r3, [pc, #396]	@ (800312c <HAL_GPIO_Init+0x324>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002faa:	4a61      	ldr	r2, [pc, #388]	@ (8003130 <HAL_GPIO_Init+0x328>)
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	089b      	lsrs	r3, r3, #2
 8002fb0:	3302      	adds	r3, #2
 8002fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	220f      	movs	r2, #15
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a58      	ldr	r2, [pc, #352]	@ (8003134 <HAL_GPIO_Init+0x32c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d037      	beq.n	8003046 <HAL_GPIO_Init+0x23e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a57      	ldr	r2, [pc, #348]	@ (8003138 <HAL_GPIO_Init+0x330>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d031      	beq.n	8003042 <HAL_GPIO_Init+0x23a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a56      	ldr	r2, [pc, #344]	@ (800313c <HAL_GPIO_Init+0x334>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d02b      	beq.n	800303e <HAL_GPIO_Init+0x236>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a55      	ldr	r2, [pc, #340]	@ (8003140 <HAL_GPIO_Init+0x338>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d025      	beq.n	800303a <HAL_GPIO_Init+0x232>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a54      	ldr	r2, [pc, #336]	@ (8003144 <HAL_GPIO_Init+0x33c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d01f      	beq.n	8003036 <HAL_GPIO_Init+0x22e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a53      	ldr	r2, [pc, #332]	@ (8003148 <HAL_GPIO_Init+0x340>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d019      	beq.n	8003032 <HAL_GPIO_Init+0x22a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a52      	ldr	r2, [pc, #328]	@ (800314c <HAL_GPIO_Init+0x344>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <HAL_GPIO_Init+0x226>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a51      	ldr	r2, [pc, #324]	@ (8003150 <HAL_GPIO_Init+0x348>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00d      	beq.n	800302a <HAL_GPIO_Init+0x222>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a50      	ldr	r2, [pc, #320]	@ (8003154 <HAL_GPIO_Init+0x34c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d007      	beq.n	8003026 <HAL_GPIO_Init+0x21e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a4f      	ldr	r2, [pc, #316]	@ (8003158 <HAL_GPIO_Init+0x350>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d101      	bne.n	8003022 <HAL_GPIO_Init+0x21a>
 800301e:	2309      	movs	r3, #9
 8003020:	e012      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003022:	230a      	movs	r3, #10
 8003024:	e010      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003026:	2308      	movs	r3, #8
 8003028:	e00e      	b.n	8003048 <HAL_GPIO_Init+0x240>
 800302a:	2307      	movs	r3, #7
 800302c:	e00c      	b.n	8003048 <HAL_GPIO_Init+0x240>
 800302e:	2306      	movs	r3, #6
 8003030:	e00a      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003032:	2305      	movs	r3, #5
 8003034:	e008      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003036:	2304      	movs	r3, #4
 8003038:	e006      	b.n	8003048 <HAL_GPIO_Init+0x240>
 800303a:	2303      	movs	r3, #3
 800303c:	e004      	b.n	8003048 <HAL_GPIO_Init+0x240>
 800303e:	2302      	movs	r3, #2
 8003040:	e002      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003046:	2300      	movs	r3, #0
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	f002 0203 	and.w	r2, r2, #3
 800304e:	0092      	lsls	r2, r2, #2
 8003050:	4093      	lsls	r3, r2
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003058:	4935      	ldr	r1, [pc, #212]	@ (8003130 <HAL_GPIO_Init+0x328>)
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	089b      	lsrs	r3, r3, #2
 800305e:	3302      	adds	r3, #2
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003066:	4b3d      	ldr	r3, [pc, #244]	@ (800315c <HAL_GPIO_Init+0x354>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800308a:	4a34      	ldr	r2, [pc, #208]	@ (800315c <HAL_GPIO_Init+0x354>)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003090:	4b32      	ldr	r3, [pc, #200]	@ (800315c <HAL_GPIO_Init+0x354>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030b4:	4a29      	ldr	r2, [pc, #164]	@ (800315c <HAL_GPIO_Init+0x354>)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030ba:	4b28      	ldr	r3, [pc, #160]	@ (800315c <HAL_GPIO_Init+0x354>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4013      	ands	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030de:	4a1f      	ldr	r2, [pc, #124]	@ (800315c <HAL_GPIO_Init+0x354>)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030e4:	4b1d      	ldr	r3, [pc, #116]	@ (800315c <HAL_GPIO_Init+0x354>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	43db      	mvns	r3, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4013      	ands	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003108:	4a14      	ldr	r2, [pc, #80]	@ (800315c <HAL_GPIO_Init+0x354>)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3301      	adds	r3, #1
 8003112:	61fb      	str	r3, [r7, #28]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	2b0f      	cmp	r3, #15
 8003118:	f67f ae84 	bls.w	8002e24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	3724      	adds	r7, #36	@ 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800
 8003130:	40013800 	.word	0x40013800
 8003134:	40020000 	.word	0x40020000
 8003138:	40020400 	.word	0x40020400
 800313c:	40020800 	.word	0x40020800
 8003140:	40020c00 	.word	0x40020c00
 8003144:	40021000 	.word	0x40021000
 8003148:	40021400 	.word	0x40021400
 800314c:	40021800 	.word	0x40021800
 8003150:	40021c00 	.word	0x40021c00
 8003154:	40022000 	.word	0x40022000
 8003158:	40022400 	.word	0x40022400
 800315c:	40013c00 	.word	0x40013c00

08003160 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003172:	2300      	movs	r3, #0
 8003174:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	e0d9      	b.n	8003330 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800317c:	2201      	movs	r2, #1
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4013      	ands	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	429a      	cmp	r2, r3
 8003194:	f040 80c9 	bne.w	800332a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003198:	4a6b      	ldr	r2, [pc, #428]	@ (8003348 <HAL_GPIO_DeInit+0x1e8>)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	089b      	lsrs	r3, r3, #2
 800319e:	3302      	adds	r3, #2
 80031a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	220f      	movs	r2, #15
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	4013      	ands	r3, r2
 80031b8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a63      	ldr	r2, [pc, #396]	@ (800334c <HAL_GPIO_DeInit+0x1ec>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d037      	beq.n	8003232 <HAL_GPIO_DeInit+0xd2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a62      	ldr	r2, [pc, #392]	@ (8003350 <HAL_GPIO_DeInit+0x1f0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d031      	beq.n	800322e <HAL_GPIO_DeInit+0xce>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a61      	ldr	r2, [pc, #388]	@ (8003354 <HAL_GPIO_DeInit+0x1f4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d02b      	beq.n	800322a <HAL_GPIO_DeInit+0xca>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a60      	ldr	r2, [pc, #384]	@ (8003358 <HAL_GPIO_DeInit+0x1f8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d025      	beq.n	8003226 <HAL_GPIO_DeInit+0xc6>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a5f      	ldr	r2, [pc, #380]	@ (800335c <HAL_GPIO_DeInit+0x1fc>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d01f      	beq.n	8003222 <HAL_GPIO_DeInit+0xc2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a5e      	ldr	r2, [pc, #376]	@ (8003360 <HAL_GPIO_DeInit+0x200>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d019      	beq.n	800321e <HAL_GPIO_DeInit+0xbe>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a5d      	ldr	r2, [pc, #372]	@ (8003364 <HAL_GPIO_DeInit+0x204>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_GPIO_DeInit+0xba>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a5c      	ldr	r2, [pc, #368]	@ (8003368 <HAL_GPIO_DeInit+0x208>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00d      	beq.n	8003216 <HAL_GPIO_DeInit+0xb6>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a5b      	ldr	r2, [pc, #364]	@ (800336c <HAL_GPIO_DeInit+0x20c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d007      	beq.n	8003212 <HAL_GPIO_DeInit+0xb2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a5a      	ldr	r2, [pc, #360]	@ (8003370 <HAL_GPIO_DeInit+0x210>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d101      	bne.n	800320e <HAL_GPIO_DeInit+0xae>
 800320a:	2309      	movs	r3, #9
 800320c:	e012      	b.n	8003234 <HAL_GPIO_DeInit+0xd4>
 800320e:	230a      	movs	r3, #10
 8003210:	e010      	b.n	8003234 <HAL_GPIO_DeInit+0xd4>
 8003212:	2308      	movs	r3, #8
 8003214:	e00e      	b.n	8003234 <HAL_GPIO_DeInit+0xd4>
 8003216:	2307      	movs	r3, #7
 8003218:	e00c      	b.n	8003234 <HAL_GPIO_DeInit+0xd4>
 800321a:	2306      	movs	r3, #6
 800321c:	e00a      	b.n	8003234 <HAL_GPIO_DeInit+0xd4>
 800321e:	2305      	movs	r3, #5
 8003220:	e008      	b.n	8003234 <HAL_GPIO_DeInit+0xd4>
 8003222:	2304      	movs	r3, #4
 8003224:	e006      	b.n	8003234 <HAL_GPIO_DeInit+0xd4>
 8003226:	2303      	movs	r3, #3
 8003228:	e004      	b.n	8003234 <HAL_GPIO_DeInit+0xd4>
 800322a:	2302      	movs	r3, #2
 800322c:	e002      	b.n	8003234 <HAL_GPIO_DeInit+0xd4>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_GPIO_DeInit+0xd4>
 8003232:	2300      	movs	r3, #0
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	f002 0203 	and.w	r2, r2, #3
 800323a:	0092      	lsls	r2, r2, #2
 800323c:	4093      	lsls	r3, r2
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	429a      	cmp	r2, r3
 8003242:	d132      	bne.n	80032aa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003244:	4b4b      	ldr	r3, [pc, #300]	@ (8003374 <HAL_GPIO_DeInit+0x214>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	43db      	mvns	r3, r3
 800324c:	4949      	ldr	r1, [pc, #292]	@ (8003374 <HAL_GPIO_DeInit+0x214>)
 800324e:	4013      	ands	r3, r2
 8003250:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003252:	4b48      	ldr	r3, [pc, #288]	@ (8003374 <HAL_GPIO_DeInit+0x214>)
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	43db      	mvns	r3, r3
 800325a:	4946      	ldr	r1, [pc, #280]	@ (8003374 <HAL_GPIO_DeInit+0x214>)
 800325c:	4013      	ands	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003260:	4b44      	ldr	r3, [pc, #272]	@ (8003374 <HAL_GPIO_DeInit+0x214>)
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	43db      	mvns	r3, r3
 8003268:	4942      	ldr	r1, [pc, #264]	@ (8003374 <HAL_GPIO_DeInit+0x214>)
 800326a:	4013      	ands	r3, r2
 800326c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800326e:	4b41      	ldr	r3, [pc, #260]	@ (8003374 <HAL_GPIO_DeInit+0x214>)
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	43db      	mvns	r3, r3
 8003276:	493f      	ldr	r1, [pc, #252]	@ (8003374 <HAL_GPIO_DeInit+0x214>)
 8003278:	4013      	ands	r3, r2
 800327a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	220f      	movs	r2, #15
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800328c:	4a2e      	ldr	r2, [pc, #184]	@ (8003348 <HAL_GPIO_DeInit+0x1e8>)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	089b      	lsrs	r3, r3, #2
 8003292:	3302      	adds	r3, #2
 8003294:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	43da      	mvns	r2, r3
 800329c:	482a      	ldr	r0, [pc, #168]	@ (8003348 <HAL_GPIO_DeInit+0x1e8>)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	089b      	lsrs	r3, r3, #2
 80032a2:	400a      	ands	r2, r1
 80032a4:	3302      	adds	r3, #2
 80032a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	2103      	movs	r1, #3
 80032b4:	fa01 f303 	lsl.w	r3, r1, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	401a      	ands	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	08da      	lsrs	r2, r3, #3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3208      	adds	r2, #8
 80032c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	220f      	movs	r2, #15
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	08d2      	lsrs	r2, r2, #3
 80032e0:	4019      	ands	r1, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3208      	adds	r2, #8
 80032e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	2103      	movs	r1, #3
 80032f4:	fa01 f303 	lsl.w	r3, r1, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	401a      	ands	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	2101      	movs	r1, #1
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	fa01 f303 	lsl.w	r3, r1, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	401a      	ands	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	2103      	movs	r1, #3
 800331e:	fa01 f303 	lsl.w	r3, r1, r3
 8003322:	43db      	mvns	r3, r3
 8003324:	401a      	ands	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	3301      	adds	r3, #1
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2b0f      	cmp	r3, #15
 8003334:	f67f af22 	bls.w	800317c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003338:	bf00      	nop
 800333a:	bf00      	nop
 800333c:	371c      	adds	r7, #28
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40013800 	.word	0x40013800
 800334c:	40020000 	.word	0x40020000
 8003350:	40020400 	.word	0x40020400
 8003354:	40020800 	.word	0x40020800
 8003358:	40020c00 	.word	0x40020c00
 800335c:	40021000 	.word	0x40021000
 8003360:	40021400 	.word	0x40021400
 8003364:	40021800 	.word	0x40021800
 8003368:	40021c00 	.word	0x40021c00
 800336c:	40022000 	.word	0x40022000
 8003370:	40022400 	.word	0x40022400
 8003374:	40013c00 	.word	0x40013c00

08003378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	807b      	strh	r3, [r7, #2]
 8003384:	4613      	mov	r3, r2
 8003386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003388:	787b      	ldrb	r3, [r7, #1]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800338e:	887a      	ldrh	r2, [r7, #2]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003394:	e003      	b.n	800339e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003396:	887b      	ldrh	r3, [r7, #2]
 8003398:	041a      	lsls	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	619a      	str	r2, [r3, #24]
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e12b      	b.n	8003616 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fe fdac 	bl	8001f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2224      	movs	r2, #36	@ 0x24
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0201 	bic.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800340e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003410:	f001 ff82 	bl	8005318 <HAL_RCC_GetPCLK1Freq>
 8003414:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	4a81      	ldr	r2, [pc, #516]	@ (8003620 <HAL_I2C_Init+0x274>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d807      	bhi.n	8003430 <HAL_I2C_Init+0x84>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4a80      	ldr	r2, [pc, #512]	@ (8003624 <HAL_I2C_Init+0x278>)
 8003424:	4293      	cmp	r3, r2
 8003426:	bf94      	ite	ls
 8003428:	2301      	movls	r3, #1
 800342a:	2300      	movhi	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	e006      	b.n	800343e <HAL_I2C_Init+0x92>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4a7d      	ldr	r2, [pc, #500]	@ (8003628 <HAL_I2C_Init+0x27c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	bf94      	ite	ls
 8003438:	2301      	movls	r3, #1
 800343a:	2300      	movhi	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e0e7      	b.n	8003616 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4a78      	ldr	r2, [pc, #480]	@ (800362c <HAL_I2C_Init+0x280>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	0c9b      	lsrs	r3, r3, #18
 8003450:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	430a      	orrs	r2, r1
 8003464:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4a6a      	ldr	r2, [pc, #424]	@ (8003620 <HAL_I2C_Init+0x274>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d802      	bhi.n	8003480 <HAL_I2C_Init+0xd4>
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	3301      	adds	r3, #1
 800347e:	e009      	b.n	8003494 <HAL_I2C_Init+0xe8>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003486:	fb02 f303 	mul.w	r3, r2, r3
 800348a:	4a69      	ldr	r2, [pc, #420]	@ (8003630 <HAL_I2C_Init+0x284>)
 800348c:	fba2 2303 	umull	r2, r3, r2, r3
 8003490:	099b      	lsrs	r3, r3, #6
 8003492:	3301      	adds	r3, #1
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6812      	ldr	r2, [r2, #0]
 8003498:	430b      	orrs	r3, r1
 800349a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80034a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	495c      	ldr	r1, [pc, #368]	@ (8003620 <HAL_I2C_Init+0x274>)
 80034b0:	428b      	cmp	r3, r1
 80034b2:	d819      	bhi.n	80034e8 <HAL_I2C_Init+0x13c>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1e59      	subs	r1, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	fbb1 f3f3 	udiv	r3, r1, r3
 80034c2:	1c59      	adds	r1, r3, #1
 80034c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80034c8:	400b      	ands	r3, r1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <HAL_I2C_Init+0x138>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1e59      	subs	r1, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80034dc:	3301      	adds	r3, #1
 80034de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e2:	e051      	b.n	8003588 <HAL_I2C_Init+0x1dc>
 80034e4:	2304      	movs	r3, #4
 80034e6:	e04f      	b.n	8003588 <HAL_I2C_Init+0x1dc>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d111      	bne.n	8003514 <HAL_I2C_Init+0x168>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1e58      	subs	r0, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6859      	ldr	r1, [r3, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	440b      	add	r3, r1
 80034fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003502:	3301      	adds	r3, #1
 8003504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003508:	2b00      	cmp	r3, #0
 800350a:	bf0c      	ite	eq
 800350c:	2301      	moveq	r3, #1
 800350e:	2300      	movne	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	e012      	b.n	800353a <HAL_I2C_Init+0x18e>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	1e58      	subs	r0, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6859      	ldr	r1, [r3, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	0099      	lsls	r1, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	fbb0 f3f3 	udiv	r3, r0, r3
 800352a:	3301      	adds	r3, #1
 800352c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf0c      	ite	eq
 8003534:	2301      	moveq	r3, #1
 8003536:	2300      	movne	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_I2C_Init+0x196>
 800353e:	2301      	movs	r3, #1
 8003540:	e022      	b.n	8003588 <HAL_I2C_Init+0x1dc>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10e      	bne.n	8003568 <HAL_I2C_Init+0x1bc>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1e58      	subs	r0, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6859      	ldr	r1, [r3, #4]
 8003552:	460b      	mov	r3, r1
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	440b      	add	r3, r1
 8003558:	fbb0 f3f3 	udiv	r3, r0, r3
 800355c:	3301      	adds	r3, #1
 800355e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003562:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003566:	e00f      	b.n	8003588 <HAL_I2C_Init+0x1dc>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	1e58      	subs	r0, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6859      	ldr	r1, [r3, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	0099      	lsls	r1, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	fbb0 f3f3 	udiv	r3, r0, r3
 800357e:	3301      	adds	r3, #1
 8003580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003584:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	6809      	ldr	r1, [r1, #0]
 800358c:	4313      	orrs	r3, r2
 800358e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69da      	ldr	r2, [r3, #28]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80035b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6911      	ldr	r1, [r2, #16]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68d2      	ldr	r2, [r2, #12]
 80035c2:	4311      	orrs	r1, r2
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6812      	ldr	r2, [r2, #0]
 80035c8:	430b      	orrs	r3, r1
 80035ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2220      	movs	r2, #32
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	000186a0 	.word	0x000186a0
 8003624:	001e847f 	.word	0x001e847f
 8003628:	003d08ff 	.word	0x003d08ff
 800362c:	431bde83 	.word	0x431bde83
 8003630:	10624dd3 	.word	0x10624dd3

08003634 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af02      	add	r7, sp, #8
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	4608      	mov	r0, r1
 800363e:	4611      	mov	r1, r2
 8003640:	461a      	mov	r2, r3
 8003642:	4603      	mov	r3, r0
 8003644:	817b      	strh	r3, [r7, #10]
 8003646:	460b      	mov	r3, r1
 8003648:	813b      	strh	r3, [r7, #8]
 800364a:	4613      	mov	r3, r2
 800364c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800364e:	f7ff fac5 	bl	8002bdc <HAL_GetTick>
 8003652:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b20      	cmp	r3, #32
 800365e:	f040 80d9 	bne.w	8003814 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	2319      	movs	r3, #25
 8003668:	2201      	movs	r2, #1
 800366a:	496d      	ldr	r1, [pc, #436]	@ (8003820 <HAL_I2C_Mem_Write+0x1ec>)
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 fc8b 	bl	8003f88 <I2C_WaitOnFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003678:	2302      	movs	r3, #2
 800367a:	e0cc      	b.n	8003816 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_I2C_Mem_Write+0x56>
 8003686:	2302      	movs	r3, #2
 8003688:	e0c5      	b.n	8003816 <HAL_I2C_Mem_Write+0x1e2>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b01      	cmp	r3, #1
 800369e:	d007      	beq.n	80036b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0201 	orr.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2221      	movs	r2, #33	@ 0x21
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2240      	movs	r2, #64	@ 0x40
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a3a      	ldr	r2, [r7, #32]
 80036da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80036e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4a4d      	ldr	r2, [pc, #308]	@ (8003824 <HAL_I2C_Mem_Write+0x1f0>)
 80036f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036f2:	88f8      	ldrh	r0, [r7, #6]
 80036f4:	893a      	ldrh	r2, [r7, #8]
 80036f6:	8979      	ldrh	r1, [r7, #10]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	4603      	mov	r3, r0
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 fac2 	bl	8003c8c <I2C_RequestMemoryWrite>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d052      	beq.n	80037b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e081      	b.n	8003816 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 fd50 	bl	80041bc <I2C_WaitOnTXEFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00d      	beq.n	800373e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	2b04      	cmp	r3, #4
 8003728:	d107      	bne.n	800373a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003738:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e06b      	b.n	8003816 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	781a      	ldrb	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b04      	cmp	r3, #4
 800377a:	d11b      	bne.n	80037b4 <HAL_I2C_Mem_Write+0x180>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003780:	2b00      	cmp	r3, #0
 8003782:	d017      	beq.n	80037b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003788:	781a      	ldrb	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1aa      	bne.n	8003712 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 fd43 	bl	800424c <I2C_WaitOnBTFFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00d      	beq.n	80037e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d107      	bne.n	80037e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e016      	b.n	8003816 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	e000      	b.n	8003816 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003814:	2302      	movs	r3, #2
  }
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	00100002 	.word	0x00100002
 8003824:	ffff0000 	.word	0xffff0000

08003828 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08c      	sub	sp, #48	@ 0x30
 800382c:	af02      	add	r7, sp, #8
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	4608      	mov	r0, r1
 8003832:	4611      	mov	r1, r2
 8003834:	461a      	mov	r2, r3
 8003836:	4603      	mov	r3, r0
 8003838:	817b      	strh	r3, [r7, #10]
 800383a:	460b      	mov	r3, r1
 800383c:	813b      	strh	r3, [r7, #8]
 800383e:	4613      	mov	r3, r2
 8003840:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003842:	f7ff f9cb 	bl	8002bdc <HAL_GetTick>
 8003846:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b20      	cmp	r3, #32
 8003852:	f040 8214 	bne.w	8003c7e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	2319      	movs	r3, #25
 800385c:	2201      	movs	r2, #1
 800385e:	497b      	ldr	r1, [pc, #492]	@ (8003a4c <HAL_I2C_Mem_Read+0x224>)
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 fb91 	bl	8003f88 <I2C_WaitOnFlagUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800386c:	2302      	movs	r3, #2
 800386e:	e207      	b.n	8003c80 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_I2C_Mem_Read+0x56>
 800387a:	2302      	movs	r3, #2
 800387c:	e200      	b.n	8003c80 <HAL_I2C_Mem_Read+0x458>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b01      	cmp	r3, #1
 8003892:	d007      	beq.n	80038a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2222      	movs	r2, #34	@ 0x22
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2240      	movs	r2, #64	@ 0x40
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80038d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003a50 <HAL_I2C_Mem_Read+0x228>)
 80038e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038e6:	88f8      	ldrh	r0, [r7, #6]
 80038e8:	893a      	ldrh	r2, [r7, #8]
 80038ea:	8979      	ldrh	r1, [r7, #10]
 80038ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ee:	9301      	str	r3, [sp, #4]
 80038f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	4603      	mov	r3, r0
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 fa5e 	bl	8003db8 <I2C_RequestMemoryRead>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e1bc      	b.n	8003c80 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800390a:	2b00      	cmp	r3, #0
 800390c:	d113      	bne.n	8003936 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800390e:	2300      	movs	r3, #0
 8003910:	623b      	str	r3, [r7, #32]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	623b      	str	r3, [r7, #32]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	623b      	str	r3, [r7, #32]
 8003922:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	e190      	b.n	8003c58 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800393a:	2b01      	cmp	r3, #1
 800393c:	d11b      	bne.n	8003976 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800394c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394e:	2300      	movs	r3, #0
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	61fb      	str	r3, [r7, #28]
 8003962:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	e170      	b.n	8003c58 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800397a:	2b02      	cmp	r3, #2
 800397c:	d11b      	bne.n	80039b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800398c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800399c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800399e:	2300      	movs	r3, #0
 80039a0:	61bb      	str	r3, [r7, #24]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	61bb      	str	r3, [r7, #24]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	e150      	b.n	8003c58 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80039cc:	e144      	b.n	8003c58 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	f200 80f1 	bhi.w	8003bba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d123      	bne.n	8003a28 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 fc79 	bl	80042dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e145      	b.n	8003c80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691a      	ldr	r2, [r3, #16]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a26:	e117      	b.n	8003c58 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d14e      	bne.n	8003ace <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a36:	2200      	movs	r2, #0
 8003a38:	4906      	ldr	r1, [pc, #24]	@ (8003a54 <HAL_I2C_Mem_Read+0x22c>)
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 faa4 	bl	8003f88 <I2C_WaitOnFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d008      	beq.n	8003a58 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e11a      	b.n	8003c80 <HAL_I2C_Mem_Read+0x458>
 8003a4a:	bf00      	nop
 8003a4c:	00100002 	.word	0x00100002
 8003a50:	ffff0000 	.word	0xffff0000
 8003a54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003acc:	e0c4      	b.n	8003c58 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	496c      	ldr	r1, [pc, #432]	@ (8003c88 <HAL_I2C_Mem_Read+0x460>)
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fa55 	bl	8003f88 <I2C_WaitOnFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0cb      	b.n	8003c80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003af6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b30:	2200      	movs	r2, #0
 8003b32:	4955      	ldr	r1, [pc, #340]	@ (8003c88 <HAL_I2C_Mem_Read+0x460>)
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 fa27 	bl	8003f88 <I2C_WaitOnFlagUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e09d      	b.n	8003c80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003bb8:	e04e      	b.n	8003c58 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bbc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 fb8c 	bl	80042dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e058      	b.n	8003c80 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d124      	bne.n	8003c58 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d107      	bne.n	8003c26 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c24:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f47f aeb6 	bne.w	80039ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	e000      	b.n	8003c80 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003c7e:	2302      	movs	r3, #2
  }
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3728      	adds	r7, #40	@ 0x28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	00010004 	.word	0x00010004

08003c8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	4608      	mov	r0, r1
 8003c96:	4611      	mov	r1, r2
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	817b      	strh	r3, [r7, #10]
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	813b      	strh	r3, [r7, #8]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f960 	bl	8003f88 <I2C_WaitOnFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00d      	beq.n	8003cea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cdc:	d103      	bne.n	8003ce6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ce4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e05f      	b.n	8003daa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cea:	897b      	ldrh	r3, [r7, #10]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003cf8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	6a3a      	ldr	r2, [r7, #32]
 8003cfe:	492d      	ldr	r1, [pc, #180]	@ (8003db4 <I2C_RequestMemoryWrite+0x128>)
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f9bb 	bl	800407c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e04c      	b.n	8003daa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d28:	6a39      	ldr	r1, [r7, #32]
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 fa46 	bl	80041bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00d      	beq.n	8003d52 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d107      	bne.n	8003d4e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e02b      	b.n	8003daa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d105      	bne.n	8003d64 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d58:	893b      	ldrh	r3, [r7, #8]
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	611a      	str	r2, [r3, #16]
 8003d62:	e021      	b.n	8003da8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d64:	893b      	ldrh	r3, [r7, #8]
 8003d66:	0a1b      	lsrs	r3, r3, #8
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d74:	6a39      	ldr	r1, [r7, #32]
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 fa20 	bl	80041bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00d      	beq.n	8003d9e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d107      	bne.n	8003d9a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e005      	b.n	8003daa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d9e:	893b      	ldrh	r3, [r7, #8]
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	00010002 	.word	0x00010002

08003db8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af02      	add	r7, sp, #8
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	4608      	mov	r0, r1
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	817b      	strh	r3, [r7, #10]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	813b      	strh	r3, [r7, #8]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003de0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003df0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f8c2 	bl	8003f88 <I2C_WaitOnFlagUntilTimeout>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00d      	beq.n	8003e26 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e18:	d103      	bne.n	8003e22 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e20:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e0aa      	b.n	8003f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e26:	897b      	ldrh	r3, [r7, #10]
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	6a3a      	ldr	r2, [r7, #32]
 8003e3a:	4952      	ldr	r1, [pc, #328]	@ (8003f84 <I2C_RequestMemoryRead+0x1cc>)
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f91d 	bl	800407c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e097      	b.n	8003f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	617b      	str	r3, [r7, #20]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e64:	6a39      	ldr	r1, [r7, #32]
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f9a8 	bl	80041bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00d      	beq.n	8003e8e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d107      	bne.n	8003e8a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e076      	b.n	8003f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e8e:	88fb      	ldrh	r3, [r7, #6]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d105      	bne.n	8003ea0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e94:	893b      	ldrh	r3, [r7, #8]
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	611a      	str	r2, [r3, #16]
 8003e9e:	e021      	b.n	8003ee4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ea0:	893b      	ldrh	r3, [r7, #8]
 8003ea2:	0a1b      	lsrs	r3, r3, #8
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb0:	6a39      	ldr	r1, [r7, #32]
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 f982 	bl	80041bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00d      	beq.n	8003eda <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d107      	bne.n	8003ed6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ed4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e050      	b.n	8003f7c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eda:	893b      	ldrh	r3, [r7, #8]
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee6:	6a39      	ldr	r1, [r7, #32]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f967 	bl	80041bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00d      	beq.n	8003f10 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d107      	bne.n	8003f0c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f0a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e035      	b.n	8003f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f1e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 f82b 	bl	8003f88 <I2C_WaitOnFlagUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00d      	beq.n	8003f54 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f46:	d103      	bne.n	8003f50 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e013      	b.n	8003f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f54:	897b      	ldrh	r3, [r7, #10]
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f66:	6a3a      	ldr	r2, [r7, #32]
 8003f68:	4906      	ldr	r1, [pc, #24]	@ (8003f84 <I2C_RequestMemoryRead+0x1cc>)
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 f886 	bl	800407c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	00010002 	.word	0x00010002

08003f88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	4613      	mov	r3, r2
 8003f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f98:	e048      	b.n	800402c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fa0:	d044      	beq.n	800402c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa2:	f7fe fe1b 	bl	8002bdc <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d302      	bcc.n	8003fb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d139      	bne.n	800402c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	0c1b      	lsrs	r3, r3, #16
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d10d      	bne.n	8003fde <I2C_WaitOnFlagUntilTimeout+0x56>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	43da      	mvns	r2, r3
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bf0c      	ite	eq
 8003fd4:	2301      	moveq	r3, #1
 8003fd6:	2300      	movne	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	461a      	mov	r2, r3
 8003fdc:	e00c      	b.n	8003ff8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	43da      	mvns	r2, r3
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	bf0c      	ite	eq
 8003ff0:	2301      	moveq	r3, #1
 8003ff2:	2300      	movne	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d116      	bne.n	800402c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004018:	f043 0220 	orr.w	r2, r3, #32
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e023      	b.n	8004074 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	0c1b      	lsrs	r3, r3, #16
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b01      	cmp	r3, #1
 8004034:	d10d      	bne.n	8004052 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	43da      	mvns	r2, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	4013      	ands	r3, r2
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	bf0c      	ite	eq
 8004048:	2301      	moveq	r3, #1
 800404a:	2300      	movne	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	e00c      	b.n	800406c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	43da      	mvns	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	4013      	ands	r3, r2
 800405e:	b29b      	uxth	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	bf0c      	ite	eq
 8004064:	2301      	moveq	r3, #1
 8004066:	2300      	movne	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	461a      	mov	r2, r3
 800406c:	79fb      	ldrb	r3, [r7, #7]
 800406e:	429a      	cmp	r2, r3
 8004070:	d093      	beq.n	8003f9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
 8004088:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800408a:	e071      	b.n	8004170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800409a:	d123      	bne.n	80040e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d0:	f043 0204 	orr.w	r2, r3, #4
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e067      	b.n	80041b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040ea:	d041      	beq.n	8004170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ec:	f7fe fd76 	bl	8002bdc <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d302      	bcc.n	8004102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d136      	bne.n	8004170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	0c1b      	lsrs	r3, r3, #16
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b01      	cmp	r3, #1
 800410a:	d10c      	bne.n	8004126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	43da      	mvns	r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4013      	ands	r3, r2
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	bf14      	ite	ne
 800411e:	2301      	movne	r3, #1
 8004120:	2300      	moveq	r3, #0
 8004122:	b2db      	uxtb	r3, r3
 8004124:	e00b      	b.n	800413e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	43da      	mvns	r2, r3
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	4013      	ands	r3, r2
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	bf14      	ite	ne
 8004138:	2301      	movne	r3, #1
 800413a:	2300      	moveq	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d016      	beq.n	8004170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415c:	f043 0220 	orr.w	r2, r3, #32
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e021      	b.n	80041b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	0c1b      	lsrs	r3, r3, #16
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b01      	cmp	r3, #1
 8004178:	d10c      	bne.n	8004194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	43da      	mvns	r2, r3
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	4013      	ands	r3, r2
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	bf14      	ite	ne
 800418c:	2301      	movne	r3, #1
 800418e:	2300      	moveq	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	e00b      	b.n	80041ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	43da      	mvns	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4013      	ands	r3, r2
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	bf14      	ite	ne
 80041a6:	2301      	movne	r3, #1
 80041a8:	2300      	moveq	r3, #0
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f47f af6d 	bne.w	800408c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041c8:	e034      	b.n	8004234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f8e3 	bl	8004396 <I2C_IsAcknowledgeFailed>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e034      	b.n	8004244 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041e0:	d028      	beq.n	8004234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e2:	f7fe fcfb 	bl	8002bdc <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d302      	bcc.n	80041f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d11d      	bne.n	8004234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004202:	2b80      	cmp	r3, #128	@ 0x80
 8004204:	d016      	beq.n	8004234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004220:	f043 0220 	orr.w	r2, r3, #32
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e007      	b.n	8004244 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800423e:	2b80      	cmp	r3, #128	@ 0x80
 8004240:	d1c3      	bne.n	80041ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004258:	e034      	b.n	80042c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f89b 	bl	8004396 <I2C_IsAcknowledgeFailed>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e034      	b.n	80042d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004270:	d028      	beq.n	80042c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004272:	f7fe fcb3 	bl	8002bdc <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	429a      	cmp	r2, r3
 8004280:	d302      	bcc.n	8004288 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d11d      	bne.n	80042c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	f003 0304 	and.w	r3, r3, #4
 8004292:	2b04      	cmp	r3, #4
 8004294:	d016      	beq.n	80042c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	f043 0220 	orr.w	r2, r3, #32
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e007      	b.n	80042d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d1c3      	bne.n	800425a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042e8:	e049      	b.n	800437e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d119      	bne.n	800432c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0210 	mvn.w	r2, #16
 8004300:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2220      	movs	r2, #32
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e030      	b.n	800438e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800432c:	f7fe fc56 	bl	8002bdc <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	429a      	cmp	r2, r3
 800433a:	d302      	bcc.n	8004342 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d11d      	bne.n	800437e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800434c:	2b40      	cmp	r3, #64	@ 0x40
 800434e:	d016      	beq.n	800437e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2220      	movs	r2, #32
 800435a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436a:	f043 0220 	orr.w	r2, r3, #32
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e007      	b.n	800438e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004388:	2b40      	cmp	r3, #64	@ 0x40
 800438a:	d1ae      	bne.n	80042ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ac:	d11b      	bne.n	80043e6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043b6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d2:	f043 0204 	orr.w	r2, r3, #4
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b20      	cmp	r3, #32
 8004408:	d129      	bne.n	800445e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2224      	movs	r2, #36	@ 0x24
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0201 	bic.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0210 	bic.w	r2, r2, #16
 8004430:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f042 0201 	orr.w	r2, r2, #1
 8004450:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	e000      	b.n	8004460 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800445e:	2302      	movs	r3, #2
  }
}
 8004460:	4618      	mov	r0, r3
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004476:	2300      	movs	r3, #0
 8004478:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b20      	cmp	r3, #32
 8004484:	d12a      	bne.n	80044dc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2224      	movs	r2, #36	@ 0x24
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0201 	bic.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80044a6:	89fb      	ldrh	r3, [r7, #14]
 80044a8:	f023 030f 	bic.w	r3, r3, #15
 80044ac:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	89fb      	ldrh	r3, [r7, #14]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	89fa      	ldrh	r2, [r7, #14]
 80044be:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80044d8:	2300      	movs	r3, #0
 80044da:	e000      	b.n	80044de <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80044dc:	2302      	movs	r3, #2
  }
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
	...

080044ec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e0bf      	b.n	800467e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fd fd76 	bl	8002004 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699a      	ldr	r2, [r3, #24]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800452e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6999      	ldr	r1, [r3, #24]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004544:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6899      	ldr	r1, [r3, #8]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	4b4a      	ldr	r3, [pc, #296]	@ (8004688 <HAL_LTDC_Init+0x19c>)
 8004560:	400b      	ands	r3, r1
 8004562:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	041b      	lsls	r3, r3, #16
 800456a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6899      	ldr	r1, [r3, #8]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699a      	ldr	r2, [r3, #24]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68d9      	ldr	r1, [r3, #12]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	4b3e      	ldr	r3, [pc, #248]	@ (8004688 <HAL_LTDC_Init+0x19c>)
 800458e:	400b      	ands	r3, r1
 8004590:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	041b      	lsls	r3, r3, #16
 8004598:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68d9      	ldr	r1, [r3, #12]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a1a      	ldr	r2, [r3, #32]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6919      	ldr	r1, [r3, #16]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	4b33      	ldr	r3, [pc, #204]	@ (8004688 <HAL_LTDC_Init+0x19c>)
 80045bc:	400b      	ands	r3, r1
 80045be:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c4:	041b      	lsls	r3, r3, #16
 80045c6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6919      	ldr	r1, [r3, #16]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6959      	ldr	r1, [r3, #20]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	4b27      	ldr	r3, [pc, #156]	@ (8004688 <HAL_LTDC_Init+0x19c>)
 80045ea:	400b      	ands	r3, r1
 80045ec:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f2:	041b      	lsls	r3, r3, #16
 80045f4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6959      	ldr	r1, [r3, #20]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004612:	021b      	lsls	r3, r3, #8
 8004614:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800461c:	041b      	lsls	r3, r3, #16
 800461e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800462e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0206 	orr.w	r2, r2, #6
 800465a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699a      	ldr	r2, [r3, #24]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0201 	orr.w	r2, r2, #1
 800466a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	f000f800 	.word	0xf000f800

0800468c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800468c:	b5b0      	push	{r4, r5, r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_LTDC_ConfigLayer+0x1a>
 80046a2:	2302      	movs	r3, #2
 80046a4:	e02c      	b.n	8004700 <HAL_LTDC_ConfigLayer+0x74>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2202      	movs	r2, #2
 80046b2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2134      	movs	r1, #52	@ 0x34
 80046bc:	fb01 f303 	mul.w	r3, r1, r3
 80046c0:	4413      	add	r3, r2
 80046c2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	4614      	mov	r4, r2
 80046ca:	461d      	mov	r5, r3
 80046cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046d8:	682b      	ldr	r3, [r5, #0]
 80046da:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 f811 	bl	8004708 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2201      	movs	r2, #1
 80046ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bdb0      	pop	{r4, r5, r7, pc}

08004708 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004708:	b480      	push	{r7}
 800470a:	b089      	sub	sp, #36	@ 0x24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	0c1b      	lsrs	r3, r3, #16
 8004720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004724:	4413      	add	r3, r2
 8004726:	041b      	lsls	r3, r3, #16
 8004728:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	01db      	lsls	r3, r3, #7
 8004734:	4413      	add	r3, r2
 8004736:	3384      	adds	r3, #132	@ 0x84
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	4611      	mov	r1, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	01d2      	lsls	r2, r2, #7
 8004744:	440a      	add	r2, r1
 8004746:	3284      	adds	r2, #132	@ 0x84
 8004748:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800474c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	0c1b      	lsrs	r3, r3, #16
 800475a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800475e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004760:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4619      	mov	r1, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	01db      	lsls	r3, r3, #7
 800476c:	440b      	add	r3, r1
 800476e:	3384      	adds	r3, #132	@ 0x84
 8004770:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004776:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004786:	4413      	add	r3, r2
 8004788:	041b      	lsls	r3, r3, #16
 800478a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	461a      	mov	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	01db      	lsls	r3, r3, #7
 8004796:	4413      	add	r3, r2
 8004798:	3384      	adds	r3, #132	@ 0x84
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	4611      	mov	r1, r2
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	01d2      	lsls	r2, r2, #7
 80047a6:	440a      	add	r2, r1
 80047a8:	3284      	adds	r2, #132	@ 0x84
 80047aa:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80047ae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047be:	4413      	add	r3, r2
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4619      	mov	r1, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	01db      	lsls	r3, r3, #7
 80047cc:	440b      	add	r3, r1
 80047ce:	3384      	adds	r3, #132	@ 0x84
 80047d0:	4619      	mov	r1, r3
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	461a      	mov	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	01db      	lsls	r3, r3, #7
 80047e2:	4413      	add	r3, r2
 80047e4:	3384      	adds	r3, #132	@ 0x84
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	6812      	ldr	r2, [r2, #0]
 80047ec:	4611      	mov	r1, r2
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	01d2      	lsls	r2, r2, #7
 80047f2:	440a      	add	r2, r1
 80047f4:	3284      	adds	r2, #132	@ 0x84
 80047f6:	f023 0307 	bic.w	r3, r3, #7
 80047fa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	461a      	mov	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	01db      	lsls	r3, r3, #7
 8004806:	4413      	add	r3, r2
 8004808:	3384      	adds	r3, #132	@ 0x84
 800480a:	461a      	mov	r2, r3
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004818:	021b      	lsls	r3, r3, #8
 800481a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004822:	041b      	lsls	r3, r3, #16
 8004824:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	061b      	lsls	r3, r3, #24
 800482c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	01db      	lsls	r3, r3, #7
 8004838:	4413      	add	r3, r2
 800483a:	3384      	adds	r3, #132	@ 0x84
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	01db      	lsls	r3, r3, #7
 8004848:	4413      	add	r3, r2
 800484a:	3384      	adds	r3, #132	@ 0x84
 800484c:	461a      	mov	r2, r3
 800484e:	2300      	movs	r3, #0
 8004850:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004858:	461a      	mov	r2, r3
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	431a      	orrs	r2, r3
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	431a      	orrs	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4619      	mov	r1, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	01db      	lsls	r3, r3, #7
 800486c:	440b      	add	r3, r1
 800486e:	3384      	adds	r3, #132	@ 0x84
 8004870:	4619      	mov	r1, r3
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	461a      	mov	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	01db      	lsls	r3, r3, #7
 8004882:	4413      	add	r3, r2
 8004884:	3384      	adds	r3, #132	@ 0x84
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	6812      	ldr	r2, [r2, #0]
 800488c:	4611      	mov	r1, r2
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	01d2      	lsls	r2, r2, #7
 8004892:	440a      	add	r2, r1
 8004894:	3284      	adds	r2, #132	@ 0x84
 8004896:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800489a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	461a      	mov	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	01db      	lsls	r3, r3, #7
 80048a6:	4413      	add	r3, r2
 80048a8:	3384      	adds	r3, #132	@ 0x84
 80048aa:	461a      	mov	r2, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	01db      	lsls	r3, r3, #7
 80048bc:	4413      	add	r3, r2
 80048be:	3384      	adds	r3, #132	@ 0x84
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	6812      	ldr	r2, [r2, #0]
 80048c6:	4611      	mov	r1, r2
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	01d2      	lsls	r2, r2, #7
 80048cc:	440a      	add	r2, r1
 80048ce:	3284      	adds	r2, #132	@ 0x84
 80048d0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80048d4:	f023 0307 	bic.w	r3, r3, #7
 80048d8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	69da      	ldr	r2, [r3, #28]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	68f9      	ldr	r1, [r7, #12]
 80048e4:	6809      	ldr	r1, [r1, #0]
 80048e6:	4608      	mov	r0, r1
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	01c9      	lsls	r1, r1, #7
 80048ec:	4401      	add	r1, r0
 80048ee:	3184      	adds	r1, #132	@ 0x84
 80048f0:	4313      	orrs	r3, r2
 80048f2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	461a      	mov	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	01db      	lsls	r3, r3, #7
 80048fe:	4413      	add	r3, r2
 8004900:	3384      	adds	r3, #132	@ 0x84
 8004902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	01db      	lsls	r3, r3, #7
 800490e:	4413      	add	r3, r2
 8004910:	3384      	adds	r3, #132	@ 0x84
 8004912:	461a      	mov	r2, r3
 8004914:	2300      	movs	r3, #0
 8004916:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	461a      	mov	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	01db      	lsls	r3, r3, #7
 8004922:	4413      	add	r3, r2
 8004924:	3384      	adds	r3, #132	@ 0x84
 8004926:	461a      	mov	r2, r3
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d102      	bne.n	800493c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004936:	2304      	movs	r3, #4
 8004938:	61fb      	str	r3, [r7, #28]
 800493a:	e01b      	b.n	8004974 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d102      	bne.n	800494a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004944:	2303      	movs	r3, #3
 8004946:	61fb      	str	r3, [r7, #28]
 8004948:	e014      	b.n	8004974 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	2b04      	cmp	r3, #4
 8004950:	d00b      	beq.n	800496a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004956:	2b02      	cmp	r3, #2
 8004958:	d007      	beq.n	800496a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800495e:	2b03      	cmp	r3, #3
 8004960:	d003      	beq.n	800496a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004966:	2b07      	cmp	r3, #7
 8004968:	d102      	bne.n	8004970 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800496a:	2302      	movs	r3, #2
 800496c:	61fb      	str	r3, [r7, #28]
 800496e:	e001      	b.n	8004974 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004970:	2301      	movs	r3, #1
 8004972:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	461a      	mov	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	01db      	lsls	r3, r3, #7
 800497e:	4413      	add	r3, r2
 8004980:	3384      	adds	r3, #132	@ 0x84
 8004982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	6812      	ldr	r2, [r2, #0]
 8004988:	4611      	mov	r1, r2
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	01d2      	lsls	r2, r2, #7
 800498e:	440a      	add	r2, r1
 8004990:	3284      	adds	r2, #132	@ 0x84
 8004992:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004996:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499c:	69fa      	ldr	r2, [r7, #28]
 800499e:	fb02 f303 	mul.w	r3, r2, r3
 80049a2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	6859      	ldr	r1, [r3, #4]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	1acb      	subs	r3, r1, r3
 80049ae:	69f9      	ldr	r1, [r7, #28]
 80049b0:	fb01 f303 	mul.w	r3, r1, r3
 80049b4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80049b6:	68f9      	ldr	r1, [r7, #12]
 80049b8:	6809      	ldr	r1, [r1, #0]
 80049ba:	4608      	mov	r0, r1
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	01c9      	lsls	r1, r1, #7
 80049c0:	4401      	add	r1, r0
 80049c2:	3184      	adds	r1, #132	@ 0x84
 80049c4:	4313      	orrs	r3, r2
 80049c6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	461a      	mov	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	01db      	lsls	r3, r3, #7
 80049d2:	4413      	add	r3, r2
 80049d4:	3384      	adds	r3, #132	@ 0x84
 80049d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	6812      	ldr	r2, [r2, #0]
 80049dc:	4611      	mov	r1, r2
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	01d2      	lsls	r2, r2, #7
 80049e2:	440a      	add	r2, r1
 80049e4:	3284      	adds	r2, #132	@ 0x84
 80049e6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80049ea:	f023 0307 	bic.w	r3, r3, #7
 80049ee:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	461a      	mov	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	01db      	lsls	r3, r3, #7
 80049fa:	4413      	add	r3, r2
 80049fc:	3384      	adds	r3, #132	@ 0x84
 80049fe:	461a      	mov	r2, r3
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a04:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	01db      	lsls	r3, r3, #7
 8004a10:	4413      	add	r3, r2
 8004a12:	3384      	adds	r3, #132	@ 0x84
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	6812      	ldr	r2, [r2, #0]
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	01d2      	lsls	r2, r2, #7
 8004a20:	440a      	add	r2, r1
 8004a22:	3284      	adds	r2, #132	@ 0x84
 8004a24:	f043 0301 	orr.w	r3, r3, #1
 8004a28:	6013      	str	r3, [r2, #0]
}
 8004a2a:	bf00      	nop
 8004a2c:	3724      	adds	r7, #36	@ 0x24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
	...

08004a38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e267      	b.n	8004f1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d075      	beq.n	8004b42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a56:	4b88      	ldr	r3, [pc, #544]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d00c      	beq.n	8004a7c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a62:	4b85      	ldr	r3, [pc, #532]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d112      	bne.n	8004a94 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a6e:	4b82      	ldr	r3, [pc, #520]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a7a:	d10b      	bne.n	8004a94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a7c:	4b7e      	ldr	r3, [pc, #504]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d05b      	beq.n	8004b40 <HAL_RCC_OscConfig+0x108>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d157      	bne.n	8004b40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e242      	b.n	8004f1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a9c:	d106      	bne.n	8004aac <HAL_RCC_OscConfig+0x74>
 8004a9e:	4b76      	ldr	r3, [pc, #472]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a75      	ldr	r2, [pc, #468]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	e01d      	b.n	8004ae8 <HAL_RCC_OscConfig+0xb0>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ab4:	d10c      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x98>
 8004ab6:	4b70      	ldr	r3, [pc, #448]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a6f      	ldr	r2, [pc, #444]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	4b6d      	ldr	r3, [pc, #436]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a6c      	ldr	r2, [pc, #432]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	e00b      	b.n	8004ae8 <HAL_RCC_OscConfig+0xb0>
 8004ad0:	4b69      	ldr	r3, [pc, #420]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a68      	ldr	r2, [pc, #416]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	4b66      	ldr	r3, [pc, #408]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a65      	ldr	r2, [pc, #404]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d013      	beq.n	8004b18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af0:	f7fe f874 	bl	8002bdc <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af8:	f7fe f870 	bl	8002bdc <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b64      	cmp	r3, #100	@ 0x64
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e207      	b.n	8004f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0a:	4b5b      	ldr	r3, [pc, #364]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0f0      	beq.n	8004af8 <HAL_RCC_OscConfig+0xc0>
 8004b16:	e014      	b.n	8004b42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b18:	f7fe f860 	bl	8002bdc <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b20:	f7fe f85c 	bl	8002bdc <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b64      	cmp	r3, #100	@ 0x64
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e1f3      	b.n	8004f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b32:	4b51      	ldr	r3, [pc, #324]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f0      	bne.n	8004b20 <HAL_RCC_OscConfig+0xe8>
 8004b3e:	e000      	b.n	8004b42 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d063      	beq.n	8004c16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00b      	beq.n	8004b72 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b5a:	4b47      	ldr	r3, [pc, #284]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d11c      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b66:	4b44      	ldr	r3, [pc, #272]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d116      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b72:	4b41      	ldr	r3, [pc, #260]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d005      	beq.n	8004b8a <HAL_RCC_OscConfig+0x152>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d001      	beq.n	8004b8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e1c7      	b.n	8004f1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	4937      	ldr	r1, [pc, #220]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b9e:	e03a      	b.n	8004c16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d020      	beq.n	8004bea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ba8:	4b34      	ldr	r3, [pc, #208]	@ (8004c7c <HAL_RCC_OscConfig+0x244>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bae:	f7fe f815 	bl	8002bdc <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb6:	f7fe f811 	bl	8002bdc <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e1a8      	b.n	8004f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0f0      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd4:	4b28      	ldr	r3, [pc, #160]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	00db      	lsls	r3, r3, #3
 8004be2:	4925      	ldr	r1, [pc, #148]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	600b      	str	r3, [r1, #0]
 8004be8:	e015      	b.n	8004c16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bea:	4b24      	ldr	r3, [pc, #144]	@ (8004c7c <HAL_RCC_OscConfig+0x244>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fd fff4 	bl	8002bdc <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf8:	f7fd fff0 	bl	8002bdc <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e187      	b.n	8004f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f0      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d036      	beq.n	8004c90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d016      	beq.n	8004c58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c2a:	4b15      	ldr	r3, [pc, #84]	@ (8004c80 <HAL_RCC_OscConfig+0x248>)
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c30:	f7fd ffd4 	bl	8002bdc <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c38:	f7fd ffd0 	bl	8002bdc <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e167      	b.n	8004f1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c78 <HAL_RCC_OscConfig+0x240>)
 8004c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f0      	beq.n	8004c38 <HAL_RCC_OscConfig+0x200>
 8004c56:	e01b      	b.n	8004c90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c58:	4b09      	ldr	r3, [pc, #36]	@ (8004c80 <HAL_RCC_OscConfig+0x248>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c5e:	f7fd ffbd 	bl	8002bdc <HAL_GetTick>
 8004c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c64:	e00e      	b.n	8004c84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c66:	f7fd ffb9 	bl	8002bdc <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d907      	bls.n	8004c84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e150      	b.n	8004f1a <HAL_RCC_OscConfig+0x4e2>
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	42470000 	.word	0x42470000
 8004c80:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c84:	4b88      	ldr	r3, [pc, #544]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1ea      	bne.n	8004c66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 8097 	beq.w	8004dcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ca2:	4b81      	ldr	r3, [pc, #516]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10f      	bne.n	8004cce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60bb      	str	r3, [r7, #8]
 8004cb2:	4b7d      	ldr	r3, [pc, #500]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb6:	4a7c      	ldr	r2, [pc, #496]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cbe:	4b7a      	ldr	r3, [pc, #488]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cc6:	60bb      	str	r3, [r7, #8]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cce:	4b77      	ldr	r3, [pc, #476]	@ (8004eac <HAL_RCC_OscConfig+0x474>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d118      	bne.n	8004d0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cda:	4b74      	ldr	r3, [pc, #464]	@ (8004eac <HAL_RCC_OscConfig+0x474>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a73      	ldr	r2, [pc, #460]	@ (8004eac <HAL_RCC_OscConfig+0x474>)
 8004ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ce6:	f7fd ff79 	bl	8002bdc <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cee:	f7fd ff75 	bl	8002bdc <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e10c      	b.n	8004f1a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d00:	4b6a      	ldr	r3, [pc, #424]	@ (8004eac <HAL_RCC_OscConfig+0x474>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0f0      	beq.n	8004cee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d106      	bne.n	8004d22 <HAL_RCC_OscConfig+0x2ea>
 8004d14:	4b64      	ldr	r3, [pc, #400]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d18:	4a63      	ldr	r2, [pc, #396]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004d1a:	f043 0301 	orr.w	r3, r3, #1
 8004d1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d20:	e01c      	b.n	8004d5c <HAL_RCC_OscConfig+0x324>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	2b05      	cmp	r3, #5
 8004d28:	d10c      	bne.n	8004d44 <HAL_RCC_OscConfig+0x30c>
 8004d2a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d2e:	4a5e      	ldr	r2, [pc, #376]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004d30:	f043 0304 	orr.w	r3, r3, #4
 8004d34:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d36:	4b5c      	ldr	r3, [pc, #368]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3a:	4a5b      	ldr	r2, [pc, #364]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004d3c:	f043 0301 	orr.w	r3, r3, #1
 8004d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d42:	e00b      	b.n	8004d5c <HAL_RCC_OscConfig+0x324>
 8004d44:	4b58      	ldr	r3, [pc, #352]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d48:	4a57      	ldr	r2, [pc, #348]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004d4a:	f023 0301 	bic.w	r3, r3, #1
 8004d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d50:	4b55      	ldr	r3, [pc, #340]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d54:	4a54      	ldr	r2, [pc, #336]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004d56:	f023 0304 	bic.w	r3, r3, #4
 8004d5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d015      	beq.n	8004d90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d64:	f7fd ff3a 	bl	8002bdc <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d6a:	e00a      	b.n	8004d82 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d6c:	f7fd ff36 	bl	8002bdc <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e0cb      	b.n	8004f1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d82:	4b49      	ldr	r3, [pc, #292]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0ee      	beq.n	8004d6c <HAL_RCC_OscConfig+0x334>
 8004d8e:	e014      	b.n	8004dba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d90:	f7fd ff24 	bl	8002bdc <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d96:	e00a      	b.n	8004dae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d98:	f7fd ff20 	bl	8002bdc <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e0b5      	b.n	8004f1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dae:	4b3e      	ldr	r3, [pc, #248]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1ee      	bne.n	8004d98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dba:	7dfb      	ldrb	r3, [r7, #23]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d105      	bne.n	8004dcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc0:	4b39      	ldr	r3, [pc, #228]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc4:	4a38      	ldr	r2, [pc, #224]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004dc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 80a1 	beq.w	8004f18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dd6:	4b34      	ldr	r3, [pc, #208]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 030c 	and.w	r3, r3, #12
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d05c      	beq.n	8004e9c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d141      	bne.n	8004e6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dea:	4b31      	ldr	r3, [pc, #196]	@ (8004eb0 <HAL_RCC_OscConfig+0x478>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df0:	f7fd fef4 	bl	8002bdc <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df8:	f7fd fef0 	bl	8002bdc <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e087      	b.n	8004f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e0a:	4b27      	ldr	r3, [pc, #156]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f0      	bne.n	8004df8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69da      	ldr	r2, [r3, #28]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e24:	019b      	lsls	r3, r3, #6
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2c:	085b      	lsrs	r3, r3, #1
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	041b      	lsls	r3, r3, #16
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e38:	061b      	lsls	r3, r3, #24
 8004e3a:	491b      	ldr	r1, [pc, #108]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e40:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb0 <HAL_RCC_OscConfig+0x478>)
 8004e42:	2201      	movs	r2, #1
 8004e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e46:	f7fd fec9 	bl	8002bdc <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e4c:	e008      	b.n	8004e60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e4e:	f7fd fec5 	bl	8002bdc <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e05c      	b.n	8004f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e60:	4b11      	ldr	r3, [pc, #68]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0f0      	beq.n	8004e4e <HAL_RCC_OscConfig+0x416>
 8004e6c:	e054      	b.n	8004f18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e6e:	4b10      	ldr	r3, [pc, #64]	@ (8004eb0 <HAL_RCC_OscConfig+0x478>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e74:	f7fd feb2 	bl	8002bdc <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7c:	f7fd feae 	bl	8002bdc <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e045      	b.n	8004f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e8e:	4b06      	ldr	r3, [pc, #24]	@ (8004ea8 <HAL_RCC_OscConfig+0x470>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f0      	bne.n	8004e7c <HAL_RCC_OscConfig+0x444>
 8004e9a:	e03d      	b.n	8004f18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d107      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e038      	b.n	8004f1a <HAL_RCC_OscConfig+0x4e2>
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	40007000 	.word	0x40007000
 8004eb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f24 <HAL_RCC_OscConfig+0x4ec>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d028      	beq.n	8004f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d121      	bne.n	8004f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d11a      	bne.n	8004f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004eea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d111      	bne.n	8004f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efa:	085b      	lsrs	r3, r3, #1
 8004efc:	3b01      	subs	r3, #1
 8004efe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d107      	bne.n	8004f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d001      	beq.n	8004f18 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40023800 	.word	0x40023800

08004f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e0cc      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f3c:	4b68      	ldr	r3, [pc, #416]	@ (80050e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 030f 	and.w	r3, r3, #15
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d90c      	bls.n	8004f64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f4a:	4b65      	ldr	r3, [pc, #404]	@ (80050e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f52:	4b63      	ldr	r3, [pc, #396]	@ (80050e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d001      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e0b8      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d020      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d005      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f7c:	4b59      	ldr	r3, [pc, #356]	@ (80050e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	4a58      	ldr	r2, [pc, #352]	@ (80050e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0308 	and.w	r3, r3, #8
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f94:	4b53      	ldr	r3, [pc, #332]	@ (80050e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	4a52      	ldr	r2, [pc, #328]	@ (80050e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa0:	4b50      	ldr	r3, [pc, #320]	@ (80050e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	494d      	ldr	r1, [pc, #308]	@ (80050e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d044      	beq.n	8005048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d107      	bne.n	8004fd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fc6:	4b47      	ldr	r3, [pc, #284]	@ (80050e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d119      	bne.n	8005006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e07f      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d003      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fe2:	2b03      	cmp	r3, #3
 8004fe4:	d107      	bne.n	8004ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fe6:	4b3f      	ldr	r3, [pc, #252]	@ (80050e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d109      	bne.n	8005006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e06f      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80050e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e067      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005006:	4b37      	ldr	r3, [pc, #220]	@ (80050e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f023 0203 	bic.w	r2, r3, #3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	4934      	ldr	r1, [pc, #208]	@ (80050e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005014:	4313      	orrs	r3, r2
 8005016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005018:	f7fd fde0 	bl	8002bdc <HAL_GetTick>
 800501c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800501e:	e00a      	b.n	8005036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005020:	f7fd fddc 	bl	8002bdc <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800502e:	4293      	cmp	r3, r2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e04f      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005036:	4b2b      	ldr	r3, [pc, #172]	@ (80050e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 020c 	and.w	r2, r3, #12
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	429a      	cmp	r2, r3
 8005046:	d1eb      	bne.n	8005020 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005048:	4b25      	ldr	r3, [pc, #148]	@ (80050e0 <HAL_RCC_ClockConfig+0x1b8>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 030f 	and.w	r3, r3, #15
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d20c      	bcs.n	8005070 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005056:	4b22      	ldr	r3, [pc, #136]	@ (80050e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800505e:	4b20      	ldr	r3, [pc, #128]	@ (80050e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d001      	beq.n	8005070 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e032      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b00      	cmp	r3, #0
 800507a:	d008      	beq.n	800508e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800507c:	4b19      	ldr	r3, [pc, #100]	@ (80050e4 <HAL_RCC_ClockConfig+0x1bc>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	4916      	ldr	r1, [pc, #88]	@ (80050e4 <HAL_RCC_ClockConfig+0x1bc>)
 800508a:	4313      	orrs	r3, r2
 800508c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d009      	beq.n	80050ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800509a:	4b12      	ldr	r3, [pc, #72]	@ (80050e4 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	490e      	ldr	r1, [pc, #56]	@ (80050e4 <HAL_RCC_ClockConfig+0x1bc>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050ae:	f000 f821 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 80050b2:	4602      	mov	r2, r0
 80050b4:	4b0b      	ldr	r3, [pc, #44]	@ (80050e4 <HAL_RCC_ClockConfig+0x1bc>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	091b      	lsrs	r3, r3, #4
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	490a      	ldr	r1, [pc, #40]	@ (80050e8 <HAL_RCC_ClockConfig+0x1c0>)
 80050c0:	5ccb      	ldrb	r3, [r1, r3]
 80050c2:	fa22 f303 	lsr.w	r3, r2, r3
 80050c6:	4a09      	ldr	r2, [pc, #36]	@ (80050ec <HAL_RCC_ClockConfig+0x1c4>)
 80050c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80050ca:	4b09      	ldr	r3, [pc, #36]	@ (80050f0 <HAL_RCC_ClockConfig+0x1c8>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fd fd40 	bl	8002b54 <HAL_InitTick>

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	40023c00 	.word	0x40023c00
 80050e4:	40023800 	.word	0x40023800
 80050e8:	08007f00 	.word	0x08007f00
 80050ec:	20000010 	.word	0x20000010
 80050f0:	20000014 	.word	0x20000014

080050f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050f8:	b094      	sub	sp, #80	@ 0x50
 80050fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800510c:	4b79      	ldr	r3, [pc, #484]	@ (80052f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 030c 	and.w	r3, r3, #12
 8005114:	2b08      	cmp	r3, #8
 8005116:	d00d      	beq.n	8005134 <HAL_RCC_GetSysClockFreq+0x40>
 8005118:	2b08      	cmp	r3, #8
 800511a:	f200 80e1 	bhi.w	80052e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <HAL_RCC_GetSysClockFreq+0x34>
 8005122:	2b04      	cmp	r3, #4
 8005124:	d003      	beq.n	800512e <HAL_RCC_GetSysClockFreq+0x3a>
 8005126:	e0db      	b.n	80052e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005128:	4b73      	ldr	r3, [pc, #460]	@ (80052f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800512a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800512c:	e0db      	b.n	80052e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800512e:	4b73      	ldr	r3, [pc, #460]	@ (80052fc <HAL_RCC_GetSysClockFreq+0x208>)
 8005130:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005132:	e0d8      	b.n	80052e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005134:	4b6f      	ldr	r3, [pc, #444]	@ (80052f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800513c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800513e:	4b6d      	ldr	r3, [pc, #436]	@ (80052f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d063      	beq.n	8005212 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800514a:	4b6a      	ldr	r3, [pc, #424]	@ (80052f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	099b      	lsrs	r3, r3, #6
 8005150:	2200      	movs	r2, #0
 8005152:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005154:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515c:	633b      	str	r3, [r7, #48]	@ 0x30
 800515e:	2300      	movs	r3, #0
 8005160:	637b      	str	r3, [r7, #52]	@ 0x34
 8005162:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005166:	4622      	mov	r2, r4
 8005168:	462b      	mov	r3, r5
 800516a:	f04f 0000 	mov.w	r0, #0
 800516e:	f04f 0100 	mov.w	r1, #0
 8005172:	0159      	lsls	r1, r3, #5
 8005174:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005178:	0150      	lsls	r0, r2, #5
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	4621      	mov	r1, r4
 8005180:	1a51      	subs	r1, r2, r1
 8005182:	6139      	str	r1, [r7, #16]
 8005184:	4629      	mov	r1, r5
 8005186:	eb63 0301 	sbc.w	r3, r3, r1
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005198:	4659      	mov	r1, fp
 800519a:	018b      	lsls	r3, r1, #6
 800519c:	4651      	mov	r1, sl
 800519e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051a2:	4651      	mov	r1, sl
 80051a4:	018a      	lsls	r2, r1, #6
 80051a6:	4651      	mov	r1, sl
 80051a8:	ebb2 0801 	subs.w	r8, r2, r1
 80051ac:	4659      	mov	r1, fp
 80051ae:	eb63 0901 	sbc.w	r9, r3, r1
 80051b2:	f04f 0200 	mov.w	r2, #0
 80051b6:	f04f 0300 	mov.w	r3, #0
 80051ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051c6:	4690      	mov	r8, r2
 80051c8:	4699      	mov	r9, r3
 80051ca:	4623      	mov	r3, r4
 80051cc:	eb18 0303 	adds.w	r3, r8, r3
 80051d0:	60bb      	str	r3, [r7, #8]
 80051d2:	462b      	mov	r3, r5
 80051d4:	eb49 0303 	adc.w	r3, r9, r3
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	f04f 0300 	mov.w	r3, #0
 80051e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051e6:	4629      	mov	r1, r5
 80051e8:	024b      	lsls	r3, r1, #9
 80051ea:	4621      	mov	r1, r4
 80051ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051f0:	4621      	mov	r1, r4
 80051f2:	024a      	lsls	r2, r1, #9
 80051f4:	4610      	mov	r0, r2
 80051f6:	4619      	mov	r1, r3
 80051f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051fa:	2200      	movs	r2, #0
 80051fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005200:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005204:	f7fa fffa 	bl	80001fc <__aeabi_uldivmod>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4613      	mov	r3, r2
 800520e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005210:	e058      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005212:	4b38      	ldr	r3, [pc, #224]	@ (80052f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	099b      	lsrs	r3, r3, #6
 8005218:	2200      	movs	r2, #0
 800521a:	4618      	mov	r0, r3
 800521c:	4611      	mov	r1, r2
 800521e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005222:	623b      	str	r3, [r7, #32]
 8005224:	2300      	movs	r3, #0
 8005226:	627b      	str	r3, [r7, #36]	@ 0x24
 8005228:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800522c:	4642      	mov	r2, r8
 800522e:	464b      	mov	r3, r9
 8005230:	f04f 0000 	mov.w	r0, #0
 8005234:	f04f 0100 	mov.w	r1, #0
 8005238:	0159      	lsls	r1, r3, #5
 800523a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800523e:	0150      	lsls	r0, r2, #5
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	4641      	mov	r1, r8
 8005246:	ebb2 0a01 	subs.w	sl, r2, r1
 800524a:	4649      	mov	r1, r9
 800524c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800525c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005260:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005264:	ebb2 040a 	subs.w	r4, r2, sl
 8005268:	eb63 050b 	sbc.w	r5, r3, fp
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	f04f 0300 	mov.w	r3, #0
 8005274:	00eb      	lsls	r3, r5, #3
 8005276:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800527a:	00e2      	lsls	r2, r4, #3
 800527c:	4614      	mov	r4, r2
 800527e:	461d      	mov	r5, r3
 8005280:	4643      	mov	r3, r8
 8005282:	18e3      	adds	r3, r4, r3
 8005284:	603b      	str	r3, [r7, #0]
 8005286:	464b      	mov	r3, r9
 8005288:	eb45 0303 	adc.w	r3, r5, r3
 800528c:	607b      	str	r3, [r7, #4]
 800528e:	f04f 0200 	mov.w	r2, #0
 8005292:	f04f 0300 	mov.w	r3, #0
 8005296:	e9d7 4500 	ldrd	r4, r5, [r7]
 800529a:	4629      	mov	r1, r5
 800529c:	028b      	lsls	r3, r1, #10
 800529e:	4621      	mov	r1, r4
 80052a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052a4:	4621      	mov	r1, r4
 80052a6:	028a      	lsls	r2, r1, #10
 80052a8:	4610      	mov	r0, r2
 80052aa:	4619      	mov	r1, r3
 80052ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052ae:	2200      	movs	r2, #0
 80052b0:	61bb      	str	r3, [r7, #24]
 80052b2:	61fa      	str	r2, [r7, #28]
 80052b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052b8:	f7fa ffa0 	bl	80001fc <__aeabi_uldivmod>
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	4613      	mov	r3, r2
 80052c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80052c4:	4b0b      	ldr	r3, [pc, #44]	@ (80052f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	0c1b      	lsrs	r3, r3, #16
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	3301      	adds	r3, #1
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80052d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052de:	e002      	b.n	80052e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052e0:	4b05      	ldr	r3, [pc, #20]	@ (80052f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80052e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3750      	adds	r7, #80	@ 0x50
 80052ec:	46bd      	mov	sp, r7
 80052ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052f2:	bf00      	nop
 80052f4:	40023800 	.word	0x40023800
 80052f8:	00f42400 	.word	0x00f42400
 80052fc:	007a1200 	.word	0x007a1200

08005300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005304:	4b03      	ldr	r3, [pc, #12]	@ (8005314 <HAL_RCC_GetHCLKFreq+0x14>)
 8005306:	681b      	ldr	r3, [r3, #0]
}
 8005308:	4618      	mov	r0, r3
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	20000010 	.word	0x20000010

08005318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800531c:	f7ff fff0 	bl	8005300 <HAL_RCC_GetHCLKFreq>
 8005320:	4602      	mov	r2, r0
 8005322:	4b05      	ldr	r3, [pc, #20]	@ (8005338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	0a9b      	lsrs	r3, r3, #10
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	4903      	ldr	r1, [pc, #12]	@ (800533c <HAL_RCC_GetPCLK1Freq+0x24>)
 800532e:	5ccb      	ldrb	r3, [r1, r3]
 8005330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005334:	4618      	mov	r0, r3
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40023800 	.word	0x40023800
 800533c:	08007f10 	.word	0x08007f10

08005340 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10b      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005364:	2b00      	cmp	r3, #0
 8005366:	d105      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005370:	2b00      	cmp	r3, #0
 8005372:	d075      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005374:	4b91      	ldr	r3, [pc, #580]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800537a:	f7fd fc2f 	bl	8002bdc <HAL_GetTick>
 800537e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005380:	e008      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005382:	f7fd fc2b 	bl	8002bdc <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e189      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005394:	4b8a      	ldr	r3, [pc, #552]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1f0      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d009      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	019a      	lsls	r2, r3, #6
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	071b      	lsls	r3, r3, #28
 80053b8:	4981      	ldr	r1, [pc, #516]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01f      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053cc:	4b7c      	ldr	r3, [pc, #496]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053d2:	0f1b      	lsrs	r3, r3, #28
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	019a      	lsls	r2, r3, #6
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	061b      	lsls	r3, r3, #24
 80053e6:	431a      	orrs	r2, r3
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	071b      	lsls	r3, r3, #28
 80053ec:	4974      	ldr	r1, [pc, #464]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80053f4:	4b72      	ldr	r3, [pc, #456]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053fa:	f023 021f 	bic.w	r2, r3, #31
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	3b01      	subs	r3, #1
 8005404:	496e      	ldr	r1, [pc, #440]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00d      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	019a      	lsls	r2, r3, #6
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	061b      	lsls	r3, r3, #24
 8005424:	431a      	orrs	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	071b      	lsls	r3, r3, #28
 800542c:	4964      	ldr	r1, [pc, #400]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005434:	4b61      	ldr	r3, [pc, #388]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005436:	2201      	movs	r2, #1
 8005438:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800543a:	f7fd fbcf 	bl	8002bdc <HAL_GetTick>
 800543e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005440:	e008      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005442:	f7fd fbcb 	bl	8002bdc <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d901      	bls.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e129      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005454:	4b5a      	ldr	r3, [pc, #360]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0f0      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d105      	bne.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005474:	2b00      	cmp	r3, #0
 8005476:	d079      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005478:	4b52      	ldr	r3, [pc, #328]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800547a:	2200      	movs	r2, #0
 800547c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800547e:	f7fd fbad 	bl	8002bdc <HAL_GetTick>
 8005482:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005484:	e008      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005486:	f7fd fba9 	bl	8002bdc <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d901      	bls.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e107      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005498:	4b49      	ldr	r3, [pc, #292]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054a4:	d0ef      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0304 	and.w	r3, r3, #4
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d020      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054b2:	4b43      	ldr	r3, [pc, #268]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b8:	0f1b      	lsrs	r3, r3, #28
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	019a      	lsls	r2, r3, #6
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	061b      	lsls	r3, r3, #24
 80054cc:	431a      	orrs	r2, r3
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	071b      	lsls	r3, r3, #28
 80054d2:	493b      	ldr	r1, [pc, #236]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054da:	4b39      	ldr	r3, [pc, #228]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054e0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	3b01      	subs	r3, #1
 80054ea:	021b      	lsls	r3, r3, #8
 80054ec:	4934      	ldr	r1, [pc, #208]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0308 	and.w	r3, r3, #8
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01e      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005500:	4b2f      	ldr	r3, [pc, #188]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005506:	0e1b      	lsrs	r3, r3, #24
 8005508:	f003 030f 	and.w	r3, r3, #15
 800550c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	019a      	lsls	r2, r3, #6
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	061b      	lsls	r3, r3, #24
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	071b      	lsls	r3, r3, #28
 8005520:	4927      	ldr	r1, [pc, #156]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005528:	4b25      	ldr	r3, [pc, #148]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800552a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800552e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005536:	4922      	ldr	r1, [pc, #136]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800553e:	4b21      	ldr	r3, [pc, #132]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005540:	2201      	movs	r2, #1
 8005542:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005544:	f7fd fb4a 	bl	8002bdc <HAL_GetTick>
 8005548:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800554a:	e008      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800554c:	f7fd fb46 	bl	8002bdc <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e0a4      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800555e:	4b18      	ldr	r3, [pc, #96]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005566:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800556a:	d1ef      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0320 	and.w	r3, r3, #32
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 808b 	beq.w	8005690 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	4b10      	ldr	r3, [pc, #64]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005582:	4a0f      	ldr	r2, [pc, #60]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005588:	6413      	str	r3, [r2, #64]	@ 0x40
 800558a:	4b0d      	ldr	r3, [pc, #52]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800558c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005596:	4b0c      	ldr	r3, [pc, #48]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a0b      	ldr	r2, [pc, #44]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800559c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055a2:	f7fd fb1b 	bl	8002bdc <HAL_GetTick>
 80055a6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80055a8:	e010      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055aa:	f7fd fb17 	bl	8002bdc <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d909      	bls.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e075      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80055bc:	42470068 	.word	0x42470068
 80055c0:	40023800 	.word	0x40023800
 80055c4:	42470070 	.word	0x42470070
 80055c8:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80055cc:	4b38      	ldr	r3, [pc, #224]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0e8      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055d8:	4b36      	ldr	r3, [pc, #216]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055e0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d02f      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d028      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055f6:	4b2f      	ldr	r3, [pc, #188]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005600:	4b2d      	ldr	r3, [pc, #180]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005602:	2201      	movs	r2, #1
 8005604:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005606:	4b2c      	ldr	r3, [pc, #176]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800560c:	4a29      	ldr	r2, [pc, #164]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005612:	4b28      	ldr	r3, [pc, #160]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b01      	cmp	r3, #1
 800561c:	d114      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800561e:	f7fd fadd 	bl	8002bdc <HAL_GetTick>
 8005622:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005624:	e00a      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005626:	f7fd fad9 	bl	8002bdc <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005634:	4293      	cmp	r3, r2
 8005636:	d901      	bls.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e035      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800563c:	4b1d      	ldr	r3, [pc, #116]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800563e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0ee      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800564c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005650:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005654:	d10d      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005656:	4b17      	ldr	r3, [pc, #92]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005662:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005666:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800566a:	4912      	ldr	r1, [pc, #72]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800566c:	4313      	orrs	r3, r2
 800566e:	608b      	str	r3, [r1, #8]
 8005670:	e005      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005672:	4b10      	ldr	r3, [pc, #64]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	4a0f      	ldr	r2, [pc, #60]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005678:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800567c:	6093      	str	r3, [r2, #8]
 800567e:	4b0d      	ldr	r3, [pc, #52]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005680:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800568a:	490a      	ldr	r1, [pc, #40]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800568c:	4313      	orrs	r3, r2
 800568e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	2b00      	cmp	r3, #0
 800569a:	d004      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80056a2:	4b06      	ldr	r3, [pc, #24]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80056a4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	40007000 	.word	0x40007000
 80056b4:	40023800 	.word	0x40023800
 80056b8:	42470e40 	.word	0x42470e40
 80056bc:	424711e0 	.word	0x424711e0

080056c0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e01c      	b.n	800570c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	795b      	ldrb	r3, [r3, #5]
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d105      	bne.n	80056e8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fc fdb6 	bl	8002254 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f042 0204 	orr.w	r2, r2, #4
 80056fc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	791b      	ldrb	r3, [r3, #4]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d101      	bne.n	800572e <HAL_RNG_GenerateRandomNumber+0x1a>
 800572a:	2302      	movs	r3, #2
 800572c:	e044      	b.n	80057b8 <HAL_RNG_GenerateRandomNumber+0xa4>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	795b      	ldrb	r3, [r3, #5]
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b01      	cmp	r3, #1
 800573c:	d133      	bne.n	80057a6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2202      	movs	r2, #2
 8005742:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005744:	f7fd fa4a 	bl	8002bdc <HAL_GetTick>
 8005748:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800574a:	e018      	b.n	800577e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800574c:	f7fd fa46 	bl	8002bdc <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b02      	cmp	r3, #2
 8005758:	d911      	bls.n	800577e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b01      	cmp	r3, #1
 8005766:	d00a      	beq.n	800577e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2202      	movs	r2, #2
 8005772:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e01c      	b.n	80057b8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b01      	cmp	r3, #1
 800578a:	d1df      	bne.n	800574c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	715a      	strb	r2, [r3, #5]
 80057a4:	e004      	b.n	80057b0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2204      	movs	r2, #4
 80057aa:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	711a      	strb	r2, [r3, #4]

  return status;
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e07b      	b.n	80058ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d108      	bne.n	80057ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057e2:	d009      	beq.n	80057f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	61da      	str	r2, [r3, #28]
 80057ea:	e005      	b.n	80057f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d106      	bne.n	8005818 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fc fd40 	bl	8002298 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800582e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	431a      	orrs	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005868:	431a      	orrs	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800587c:	ea42 0103 	orr.w	r1, r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005884:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	0c1b      	lsrs	r3, r3, #16
 8005896:	f003 0104 	and.w	r1, r3, #4
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589e:	f003 0210 	and.w	r2, r3, #16
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b082      	sub	sp, #8
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e01a      	b.n	800591a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058fa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7fc fd13 	bl	8002328 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b088      	sub	sp, #32
 8005926:	af00      	add	r7, sp, #0
 8005928:	60f8      	str	r0, [r7, #12]
 800592a:	60b9      	str	r1, [r7, #8]
 800592c:	603b      	str	r3, [r7, #0]
 800592e:	4613      	mov	r3, r2
 8005930:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005932:	f7fd f953 	bl	8002bdc <HAL_GetTick>
 8005936:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005938:	88fb      	ldrh	r3, [r7, #6]
 800593a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b01      	cmp	r3, #1
 8005946:	d001      	beq.n	800594c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005948:	2302      	movs	r3, #2
 800594a:	e12a      	b.n	8005ba2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <HAL_SPI_Transmit+0x36>
 8005952:	88fb      	ldrh	r3, [r7, #6]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e122      	b.n	8005ba2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <HAL_SPI_Transmit+0x48>
 8005966:	2302      	movs	r3, #2
 8005968:	e11b      	b.n	8005ba2 <HAL_SPI_Transmit+0x280>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2203      	movs	r2, #3
 8005976:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	88fa      	ldrh	r2, [r7, #6]
 800598a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	88fa      	ldrh	r2, [r7, #6]
 8005990:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059b8:	d10f      	bne.n	80059da <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e4:	2b40      	cmp	r3, #64	@ 0x40
 80059e6:	d007      	beq.n	80059f8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a00:	d152      	bne.n	8005aa8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <HAL_SPI_Transmit+0xee>
 8005a0a:	8b7b      	ldrh	r3, [r7, #26]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d145      	bne.n	8005a9c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a14:	881a      	ldrh	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a20:	1c9a      	adds	r2, r3, #2
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a34:	e032      	b.n	8005a9c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d112      	bne.n	8005a6a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a48:	881a      	ldrh	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a54:	1c9a      	adds	r2, r3, #2
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005a68:	e018      	b.n	8005a9c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a6a:	f7fd f8b7 	bl	8002bdc <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d803      	bhi.n	8005a82 <HAL_SPI_Transmit+0x160>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a80:	d102      	bne.n	8005a88 <HAL_SPI_Transmit+0x166>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d109      	bne.n	8005a9c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e082      	b.n	8005ba2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1c7      	bne.n	8005a36 <HAL_SPI_Transmit+0x114>
 8005aa6:	e053      	b.n	8005b50 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <HAL_SPI_Transmit+0x194>
 8005ab0:	8b7b      	ldrh	r3, [r7, #26]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d147      	bne.n	8005b46 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	330c      	adds	r3, #12
 8005ac0:	7812      	ldrb	r2, [r2, #0]
 8005ac2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005adc:	e033      	b.n	8005b46 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d113      	bne.n	8005b14 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	330c      	adds	r3, #12
 8005af6:	7812      	ldrb	r2, [r2, #0]
 8005af8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005b12:	e018      	b.n	8005b46 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b14:	f7fd f862 	bl	8002bdc <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d803      	bhi.n	8005b2c <HAL_SPI_Transmit+0x20a>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b2a:	d102      	bne.n	8005b32 <HAL_SPI_Transmit+0x210>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d109      	bne.n	8005b46 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e02d      	b.n	8005ba2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1c6      	bne.n	8005ade <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b50:	69fa      	ldr	r2, [r7, #28]
 8005b52:	6839      	ldr	r1, [r7, #0]
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 f8bf 	bl	8005cd8 <SPI_EndRxTxTransaction>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2220      	movs	r2, #32
 8005b64:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10a      	bne.n	8005b84 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b6e:	2300      	movs	r3, #0
 8005b70:	617b      	str	r3, [r7, #20]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	617b      	str	r3, [r7, #20]
 8005b82:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e000      	b.n	8005ba2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
  }
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3720      	adds	r7, #32
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bb8:	b2db      	uxtb	r3, r3
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
	...

08005bc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	603b      	str	r3, [r7, #0]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bd8:	f7fd f800 	bl	8002bdc <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be0:	1a9b      	subs	r3, r3, r2
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	4413      	add	r3, r2
 8005be6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005be8:	f7fc fff8 	bl	8002bdc <HAL_GetTick>
 8005bec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bee:	4b39      	ldr	r3, [pc, #228]	@ (8005cd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	015b      	lsls	r3, r3, #5
 8005bf4:	0d1b      	lsrs	r3, r3, #20
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	fb02 f303 	mul.w	r3, r2, r3
 8005bfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bfe:	e054      	b.n	8005caa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c06:	d050      	beq.n	8005caa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c08:	f7fc ffe8 	bl	8002bdc <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	69fa      	ldr	r2, [r7, #28]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d902      	bls.n	8005c1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d13d      	bne.n	8005c9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c36:	d111      	bne.n	8005c5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c40:	d004      	beq.n	8005c4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c4a:	d107      	bne.n	8005c5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c64:	d10f      	bne.n	8005c86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e017      	b.n	8005cca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	bf0c      	ite	eq
 8005cba:	2301      	moveq	r3, #1
 8005cbc:	2300      	movne	r3, #0
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d19b      	bne.n	8005c00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3720      	adds	r7, #32
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20000010 	.word	0x20000010

08005cd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b088      	sub	sp, #32
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2201      	movs	r2, #1
 8005cec:	2102      	movs	r1, #2
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f7ff ff6a 	bl	8005bc8 <SPI_WaitFlagStateUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d007      	beq.n	8005d0a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cfe:	f043 0220 	orr.w	r2, r3, #32
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e032      	b.n	8005d70 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8005d78 <SPI_EndRxTxTransaction+0xa0>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8005d7c <SPI_EndRxTxTransaction+0xa4>)
 8005d10:	fba2 2303 	umull	r2, r3, r2, r3
 8005d14:	0d5b      	lsrs	r3, r3, #21
 8005d16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005d1a:	fb02 f303 	mul.w	r3, r2, r3
 8005d1e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d28:	d112      	bne.n	8005d50 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2200      	movs	r2, #0
 8005d32:	2180      	movs	r1, #128	@ 0x80
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f7ff ff47 	bl	8005bc8 <SPI_WaitFlagStateUntilTimeout>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d016      	beq.n	8005d6e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d44:	f043 0220 	orr.w	r2, r3, #32
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e00f      	b.n	8005d70 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d66:	2b80      	cmp	r3, #128	@ 0x80
 8005d68:	d0f2      	beq.n	8005d50 <SPI_EndRxTxTransaction+0x78>
 8005d6a:	e000      	b.n	8005d6e <SPI_EndRxTxTransaction+0x96>
        break;
 8005d6c:	bf00      	nop
  }

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	20000010 	.word	0x20000010
 8005d7c:	165e9f81 	.word	0x165e9f81

08005d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e041      	b.n	8005e16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d106      	bne.n	8005dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7fc fadc 	bl	8002364 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3304      	adds	r3, #4
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	f000 f8f4 	bl	8005fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b084      	sub	sp, #16
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d101      	bne.n	8005e3a <HAL_TIM_ConfigClockSource+0x1c>
 8005e36:	2302      	movs	r3, #2
 8005e38:	e0b4      	b.n	8005fa4 <HAL_TIM_ConfigClockSource+0x186>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2202      	movs	r2, #2
 8005e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e58:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e60:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e72:	d03e      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0xd4>
 8005e74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e78:	f200 8087 	bhi.w	8005f8a <HAL_TIM_ConfigClockSource+0x16c>
 8005e7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e80:	f000 8086 	beq.w	8005f90 <HAL_TIM_ConfigClockSource+0x172>
 8005e84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e88:	d87f      	bhi.n	8005f8a <HAL_TIM_ConfigClockSource+0x16c>
 8005e8a:	2b70      	cmp	r3, #112	@ 0x70
 8005e8c:	d01a      	beq.n	8005ec4 <HAL_TIM_ConfigClockSource+0xa6>
 8005e8e:	2b70      	cmp	r3, #112	@ 0x70
 8005e90:	d87b      	bhi.n	8005f8a <HAL_TIM_ConfigClockSource+0x16c>
 8005e92:	2b60      	cmp	r3, #96	@ 0x60
 8005e94:	d050      	beq.n	8005f38 <HAL_TIM_ConfigClockSource+0x11a>
 8005e96:	2b60      	cmp	r3, #96	@ 0x60
 8005e98:	d877      	bhi.n	8005f8a <HAL_TIM_ConfigClockSource+0x16c>
 8005e9a:	2b50      	cmp	r3, #80	@ 0x50
 8005e9c:	d03c      	beq.n	8005f18 <HAL_TIM_ConfigClockSource+0xfa>
 8005e9e:	2b50      	cmp	r3, #80	@ 0x50
 8005ea0:	d873      	bhi.n	8005f8a <HAL_TIM_ConfigClockSource+0x16c>
 8005ea2:	2b40      	cmp	r3, #64	@ 0x40
 8005ea4:	d058      	beq.n	8005f58 <HAL_TIM_ConfigClockSource+0x13a>
 8005ea6:	2b40      	cmp	r3, #64	@ 0x40
 8005ea8:	d86f      	bhi.n	8005f8a <HAL_TIM_ConfigClockSource+0x16c>
 8005eaa:	2b30      	cmp	r3, #48	@ 0x30
 8005eac:	d064      	beq.n	8005f78 <HAL_TIM_ConfigClockSource+0x15a>
 8005eae:	2b30      	cmp	r3, #48	@ 0x30
 8005eb0:	d86b      	bhi.n	8005f8a <HAL_TIM_ConfigClockSource+0x16c>
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	d060      	beq.n	8005f78 <HAL_TIM_ConfigClockSource+0x15a>
 8005eb6:	2b20      	cmp	r3, #32
 8005eb8:	d867      	bhi.n	8005f8a <HAL_TIM_ConfigClockSource+0x16c>
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d05c      	beq.n	8005f78 <HAL_TIM_ConfigClockSource+0x15a>
 8005ebe:	2b10      	cmp	r3, #16
 8005ec0:	d05a      	beq.n	8005f78 <HAL_TIM_ConfigClockSource+0x15a>
 8005ec2:	e062      	b.n	8005f8a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ed4:	f000 f990 	bl	80061f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ee6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	609a      	str	r2, [r3, #8]
      break;
 8005ef0:	e04f      	b.n	8005f92 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f02:	f000 f979 	bl	80061f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f14:	609a      	str	r2, [r3, #8]
      break;
 8005f16:	e03c      	b.n	8005f92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f24:	461a      	mov	r2, r3
 8005f26:	f000 f8ed 	bl	8006104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2150      	movs	r1, #80	@ 0x50
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 f946 	bl	80061c2 <TIM_ITRx_SetConfig>
      break;
 8005f36:	e02c      	b.n	8005f92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f44:	461a      	mov	r2, r3
 8005f46:	f000 f90c 	bl	8006162 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2160      	movs	r1, #96	@ 0x60
 8005f50:	4618      	mov	r0, r3
 8005f52:	f000 f936 	bl	80061c2 <TIM_ITRx_SetConfig>
      break;
 8005f56:	e01c      	b.n	8005f92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f64:	461a      	mov	r2, r3
 8005f66:	f000 f8cd 	bl	8006104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2140      	movs	r1, #64	@ 0x40
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 f926 	bl	80061c2 <TIM_ITRx_SetConfig>
      break;
 8005f76:	e00c      	b.n	8005f92 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4619      	mov	r1, r3
 8005f82:	4610      	mov	r0, r2
 8005f84:	f000 f91d 	bl	80061c2 <TIM_ITRx_SetConfig>
      break;
 8005f88:	e003      	b.n	8005f92 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f8e:	e000      	b.n	8005f92 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a46      	ldr	r2, [pc, #280]	@ (80060d8 <TIM_Base_SetConfig+0x12c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d013      	beq.n	8005fec <TIM_Base_SetConfig+0x40>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fca:	d00f      	beq.n	8005fec <TIM_Base_SetConfig+0x40>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a43      	ldr	r2, [pc, #268]	@ (80060dc <TIM_Base_SetConfig+0x130>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d00b      	beq.n	8005fec <TIM_Base_SetConfig+0x40>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a42      	ldr	r2, [pc, #264]	@ (80060e0 <TIM_Base_SetConfig+0x134>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d007      	beq.n	8005fec <TIM_Base_SetConfig+0x40>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a41      	ldr	r2, [pc, #260]	@ (80060e4 <TIM_Base_SetConfig+0x138>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d003      	beq.n	8005fec <TIM_Base_SetConfig+0x40>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a40      	ldr	r2, [pc, #256]	@ (80060e8 <TIM_Base_SetConfig+0x13c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d108      	bne.n	8005ffe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a35      	ldr	r2, [pc, #212]	@ (80060d8 <TIM_Base_SetConfig+0x12c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d02b      	beq.n	800605e <TIM_Base_SetConfig+0xb2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800600c:	d027      	beq.n	800605e <TIM_Base_SetConfig+0xb2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a32      	ldr	r2, [pc, #200]	@ (80060dc <TIM_Base_SetConfig+0x130>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d023      	beq.n	800605e <TIM_Base_SetConfig+0xb2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a31      	ldr	r2, [pc, #196]	@ (80060e0 <TIM_Base_SetConfig+0x134>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d01f      	beq.n	800605e <TIM_Base_SetConfig+0xb2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a30      	ldr	r2, [pc, #192]	@ (80060e4 <TIM_Base_SetConfig+0x138>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d01b      	beq.n	800605e <TIM_Base_SetConfig+0xb2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a2f      	ldr	r2, [pc, #188]	@ (80060e8 <TIM_Base_SetConfig+0x13c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d017      	beq.n	800605e <TIM_Base_SetConfig+0xb2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a2e      	ldr	r2, [pc, #184]	@ (80060ec <TIM_Base_SetConfig+0x140>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d013      	beq.n	800605e <TIM_Base_SetConfig+0xb2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a2d      	ldr	r2, [pc, #180]	@ (80060f0 <TIM_Base_SetConfig+0x144>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00f      	beq.n	800605e <TIM_Base_SetConfig+0xb2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a2c      	ldr	r2, [pc, #176]	@ (80060f4 <TIM_Base_SetConfig+0x148>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00b      	beq.n	800605e <TIM_Base_SetConfig+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a2b      	ldr	r2, [pc, #172]	@ (80060f8 <TIM_Base_SetConfig+0x14c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d007      	beq.n	800605e <TIM_Base_SetConfig+0xb2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a2a      	ldr	r2, [pc, #168]	@ (80060fc <TIM_Base_SetConfig+0x150>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d003      	beq.n	800605e <TIM_Base_SetConfig+0xb2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a29      	ldr	r2, [pc, #164]	@ (8006100 <TIM_Base_SetConfig+0x154>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d108      	bne.n	8006070 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	4313      	orrs	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a10      	ldr	r2, [pc, #64]	@ (80060d8 <TIM_Base_SetConfig+0x12c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d003      	beq.n	80060a4 <TIM_Base_SetConfig+0xf8>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a12      	ldr	r2, [pc, #72]	@ (80060e8 <TIM_Base_SetConfig+0x13c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d103      	bne.n	80060ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d105      	bne.n	80060ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f023 0201 	bic.w	r2, r3, #1
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	611a      	str	r2, [r3, #16]
  }
}
 80060ca:	bf00      	nop
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40010000 	.word	0x40010000
 80060dc:	40000400 	.word	0x40000400
 80060e0:	40000800 	.word	0x40000800
 80060e4:	40000c00 	.word	0x40000c00
 80060e8:	40010400 	.word	0x40010400
 80060ec:	40014000 	.word	0x40014000
 80060f0:	40014400 	.word	0x40014400
 80060f4:	40014800 	.word	0x40014800
 80060f8:	40001800 	.word	0x40001800
 80060fc:	40001c00 	.word	0x40001c00
 8006100:	40002000 	.word	0x40002000

08006104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	f023 0201 	bic.w	r2, r3, #1
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800612e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	011b      	lsls	r3, r3, #4
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	4313      	orrs	r3, r2
 8006138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f023 030a 	bic.w	r3, r3, #10
 8006140:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	621a      	str	r2, [r3, #32]
}
 8006156:	bf00      	nop
 8006158:	371c      	adds	r7, #28
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006162:	b480      	push	{r7}
 8006164:	b087      	sub	sp, #28
 8006166:	af00      	add	r7, sp, #0
 8006168:	60f8      	str	r0, [r7, #12]
 800616a:	60b9      	str	r1, [r7, #8]
 800616c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	f023 0210 	bic.w	r2, r3, #16
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800618c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	031b      	lsls	r3, r3, #12
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	4313      	orrs	r3, r2
 8006196:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800619e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	011b      	lsls	r3, r3, #4
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	621a      	str	r2, [r3, #32]
}
 80061b6:	bf00      	nop
 80061b8:	371c      	adds	r7, #28
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b085      	sub	sp, #20
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4313      	orrs	r3, r2
 80061e0:	f043 0307 	orr.w	r3, r3, #7
 80061e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	609a      	str	r2, [r3, #8]
}
 80061ec:	bf00      	nop
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
 8006204:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006212:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	021a      	lsls	r2, r3, #8
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	431a      	orrs	r2, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	4313      	orrs	r3, r2
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	4313      	orrs	r3, r2
 8006224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	609a      	str	r2, [r3, #8]
}
 800622c:	bf00      	nop
 800622e:	371c      	adds	r7, #28
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800624c:	2302      	movs	r3, #2
 800624e:	e05a      	b.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006276:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a21      	ldr	r2, [pc, #132]	@ (8006314 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d022      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800629c:	d01d      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a1d      	ldr	r2, [pc, #116]	@ (8006318 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d018      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a1b      	ldr	r2, [pc, #108]	@ (800631c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d013      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a1a      	ldr	r2, [pc, #104]	@ (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d00e      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a18      	ldr	r2, [pc, #96]	@ (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d009      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a17      	ldr	r2, [pc, #92]	@ (8006328 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d004      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a15      	ldr	r2, [pc, #84]	@ (800632c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d10c      	bne.n	80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	40010000 	.word	0x40010000
 8006318:	40000400 	.word	0x40000400
 800631c:	40000800 	.word	0x40000800
 8006320:	40000c00 	.word	0x40000c00
 8006324:	40010400 	.word	0x40010400
 8006328:	40014000 	.word	0x40014000
 800632c:	40001800 	.word	0x40001800

08006330 <findslot>:
 8006330:	4b0a      	ldr	r3, [pc, #40]	@ (800635c <findslot+0x2c>)
 8006332:	b510      	push	{r4, lr}
 8006334:	4604      	mov	r4, r0
 8006336:	6818      	ldr	r0, [r3, #0]
 8006338:	b118      	cbz	r0, 8006342 <findslot+0x12>
 800633a:	6a03      	ldr	r3, [r0, #32]
 800633c:	b90b      	cbnz	r3, 8006342 <findslot+0x12>
 800633e:	f000 faf3 	bl	8006928 <__sinit>
 8006342:	2c13      	cmp	r4, #19
 8006344:	d807      	bhi.n	8006356 <findslot+0x26>
 8006346:	4806      	ldr	r0, [pc, #24]	@ (8006360 <findslot+0x30>)
 8006348:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800634c:	3201      	adds	r2, #1
 800634e:	d002      	beq.n	8006356 <findslot+0x26>
 8006350:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8006354:	bd10      	pop	{r4, pc}
 8006356:	2000      	movs	r0, #0
 8006358:	e7fc      	b.n	8006354 <findslot+0x24>
 800635a:	bf00      	nop
 800635c:	20000030 	.word	0x20000030
 8006360:	20025c24 	.word	0x20025c24

08006364 <error>:
 8006364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006366:	4604      	mov	r4, r0
 8006368:	f000 fb1c 	bl	80069a4 <__errno>
 800636c:	2613      	movs	r6, #19
 800636e:	4605      	mov	r5, r0
 8006370:	2700      	movs	r7, #0
 8006372:	4630      	mov	r0, r6
 8006374:	4639      	mov	r1, r7
 8006376:	beab      	bkpt	0x00ab
 8006378:	4606      	mov	r6, r0
 800637a:	602e      	str	r6, [r5, #0]
 800637c:	4620      	mov	r0, r4
 800637e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006380 <checkerror>:
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d101      	bne.n	8006388 <checkerror+0x8>
 8006384:	f7ff bfee 	b.w	8006364 <error>
 8006388:	4770      	bx	lr

0800638a <_swiread>:
 800638a:	b530      	push	{r4, r5, lr}
 800638c:	b085      	sub	sp, #20
 800638e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006392:	9203      	str	r2, [sp, #12]
 8006394:	2406      	movs	r4, #6
 8006396:	ad01      	add	r5, sp, #4
 8006398:	4620      	mov	r0, r4
 800639a:	4629      	mov	r1, r5
 800639c:	beab      	bkpt	0x00ab
 800639e:	4604      	mov	r4, r0
 80063a0:	4620      	mov	r0, r4
 80063a2:	f7ff ffed 	bl	8006380 <checkerror>
 80063a6:	b005      	add	sp, #20
 80063a8:	bd30      	pop	{r4, r5, pc}

080063aa <_read>:
 80063aa:	b570      	push	{r4, r5, r6, lr}
 80063ac:	460e      	mov	r6, r1
 80063ae:	4614      	mov	r4, r2
 80063b0:	f7ff ffbe 	bl	8006330 <findslot>
 80063b4:	4605      	mov	r5, r0
 80063b6:	b930      	cbnz	r0, 80063c6 <_read+0x1c>
 80063b8:	f000 faf4 	bl	80069a4 <__errno>
 80063bc:	2309      	movs	r3, #9
 80063be:	6003      	str	r3, [r0, #0]
 80063c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80063c4:	bd70      	pop	{r4, r5, r6, pc}
 80063c6:	6800      	ldr	r0, [r0, #0]
 80063c8:	4622      	mov	r2, r4
 80063ca:	4631      	mov	r1, r6
 80063cc:	f7ff ffdd 	bl	800638a <_swiread>
 80063d0:	1c43      	adds	r3, r0, #1
 80063d2:	d0f5      	beq.n	80063c0 <_read+0x16>
 80063d4:	686b      	ldr	r3, [r5, #4]
 80063d6:	1a20      	subs	r0, r4, r0
 80063d8:	4403      	add	r3, r0
 80063da:	606b      	str	r3, [r5, #4]
 80063dc:	e7f2      	b.n	80063c4 <_read+0x1a>

080063de <_swilseek>:
 80063de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063e0:	460c      	mov	r4, r1
 80063e2:	4616      	mov	r6, r2
 80063e4:	f7ff ffa4 	bl	8006330 <findslot>
 80063e8:	4605      	mov	r5, r0
 80063ea:	b940      	cbnz	r0, 80063fe <_swilseek+0x20>
 80063ec:	f000 fada 	bl	80069a4 <__errno>
 80063f0:	2309      	movs	r3, #9
 80063f2:	6003      	str	r3, [r0, #0]
 80063f4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80063f8:	4620      	mov	r0, r4
 80063fa:	b003      	add	sp, #12
 80063fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063fe:	2e02      	cmp	r6, #2
 8006400:	d903      	bls.n	800640a <_swilseek+0x2c>
 8006402:	f000 facf 	bl	80069a4 <__errno>
 8006406:	2316      	movs	r3, #22
 8006408:	e7f3      	b.n	80063f2 <_swilseek+0x14>
 800640a:	2e01      	cmp	r6, #1
 800640c:	d112      	bne.n	8006434 <_swilseek+0x56>
 800640e:	6843      	ldr	r3, [r0, #4]
 8006410:	18e4      	adds	r4, r4, r3
 8006412:	d4f6      	bmi.n	8006402 <_swilseek+0x24>
 8006414:	682b      	ldr	r3, [r5, #0]
 8006416:	260a      	movs	r6, #10
 8006418:	e9cd 3400 	strd	r3, r4, [sp]
 800641c:	466f      	mov	r7, sp
 800641e:	4630      	mov	r0, r6
 8006420:	4639      	mov	r1, r7
 8006422:	beab      	bkpt	0x00ab
 8006424:	4606      	mov	r6, r0
 8006426:	4630      	mov	r0, r6
 8006428:	f7ff ffaa 	bl	8006380 <checkerror>
 800642c:	2800      	cmp	r0, #0
 800642e:	dbe1      	blt.n	80063f4 <_swilseek+0x16>
 8006430:	606c      	str	r4, [r5, #4]
 8006432:	e7e1      	b.n	80063f8 <_swilseek+0x1a>
 8006434:	2e02      	cmp	r6, #2
 8006436:	6803      	ldr	r3, [r0, #0]
 8006438:	d1ec      	bne.n	8006414 <_swilseek+0x36>
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	260c      	movs	r6, #12
 800643e:	466f      	mov	r7, sp
 8006440:	4630      	mov	r0, r6
 8006442:	4639      	mov	r1, r7
 8006444:	beab      	bkpt	0x00ab
 8006446:	4606      	mov	r6, r0
 8006448:	4630      	mov	r0, r6
 800644a:	f7ff ff99 	bl	8006380 <checkerror>
 800644e:	1c43      	adds	r3, r0, #1
 8006450:	d0d0      	beq.n	80063f4 <_swilseek+0x16>
 8006452:	4404      	add	r4, r0
 8006454:	e7de      	b.n	8006414 <_swilseek+0x36>

08006456 <_lseek>:
 8006456:	f7ff bfc2 	b.w	80063de <_swilseek>

0800645a <_swiwrite>:
 800645a:	b530      	push	{r4, r5, lr}
 800645c:	b085      	sub	sp, #20
 800645e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006462:	9203      	str	r2, [sp, #12]
 8006464:	2405      	movs	r4, #5
 8006466:	ad01      	add	r5, sp, #4
 8006468:	4620      	mov	r0, r4
 800646a:	4629      	mov	r1, r5
 800646c:	beab      	bkpt	0x00ab
 800646e:	4604      	mov	r4, r0
 8006470:	4620      	mov	r0, r4
 8006472:	f7ff ff85 	bl	8006380 <checkerror>
 8006476:	b005      	add	sp, #20
 8006478:	bd30      	pop	{r4, r5, pc}

0800647a <_write>:
 800647a:	b570      	push	{r4, r5, r6, lr}
 800647c:	460e      	mov	r6, r1
 800647e:	4615      	mov	r5, r2
 8006480:	f7ff ff56 	bl	8006330 <findslot>
 8006484:	4604      	mov	r4, r0
 8006486:	b930      	cbnz	r0, 8006496 <_write+0x1c>
 8006488:	f000 fa8c 	bl	80069a4 <__errno>
 800648c:	2309      	movs	r3, #9
 800648e:	6003      	str	r3, [r0, #0]
 8006490:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006494:	bd70      	pop	{r4, r5, r6, pc}
 8006496:	6800      	ldr	r0, [r0, #0]
 8006498:	462a      	mov	r2, r5
 800649a:	4631      	mov	r1, r6
 800649c:	f7ff ffdd 	bl	800645a <_swiwrite>
 80064a0:	1e03      	subs	r3, r0, #0
 80064a2:	dbf5      	blt.n	8006490 <_write+0x16>
 80064a4:	6862      	ldr	r2, [r4, #4]
 80064a6:	1ae8      	subs	r0, r5, r3
 80064a8:	4402      	add	r2, r0
 80064aa:	42ab      	cmp	r3, r5
 80064ac:	6062      	str	r2, [r4, #4]
 80064ae:	d1f1      	bne.n	8006494 <_write+0x1a>
 80064b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80064b4:	2000      	movs	r0, #0
 80064b6:	f7ff bf55 	b.w	8006364 <error>

080064ba <_swiclose>:
 80064ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064bc:	2402      	movs	r4, #2
 80064be:	9001      	str	r0, [sp, #4]
 80064c0:	ad01      	add	r5, sp, #4
 80064c2:	4620      	mov	r0, r4
 80064c4:	4629      	mov	r1, r5
 80064c6:	beab      	bkpt	0x00ab
 80064c8:	4604      	mov	r4, r0
 80064ca:	4620      	mov	r0, r4
 80064cc:	f7ff ff58 	bl	8006380 <checkerror>
 80064d0:	b003      	add	sp, #12
 80064d2:	bd30      	pop	{r4, r5, pc}

080064d4 <_close>:
 80064d4:	b538      	push	{r3, r4, r5, lr}
 80064d6:	4605      	mov	r5, r0
 80064d8:	f7ff ff2a 	bl	8006330 <findslot>
 80064dc:	4604      	mov	r4, r0
 80064de:	b930      	cbnz	r0, 80064ee <_close+0x1a>
 80064e0:	f000 fa60 	bl	80069a4 <__errno>
 80064e4:	2309      	movs	r3, #9
 80064e6:	6003      	str	r3, [r0, #0]
 80064e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064ec:	bd38      	pop	{r3, r4, r5, pc}
 80064ee:	3d01      	subs	r5, #1
 80064f0:	2d01      	cmp	r5, #1
 80064f2:	d809      	bhi.n	8006508 <_close+0x34>
 80064f4:	4b09      	ldr	r3, [pc, #36]	@ (800651c <_close+0x48>)
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d104      	bne.n	8006508 <_close+0x34>
 80064fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006502:	6003      	str	r3, [r0, #0]
 8006504:	2000      	movs	r0, #0
 8006506:	e7f1      	b.n	80064ec <_close+0x18>
 8006508:	6820      	ldr	r0, [r4, #0]
 800650a:	f7ff ffd6 	bl	80064ba <_swiclose>
 800650e:	2800      	cmp	r0, #0
 8006510:	d1ec      	bne.n	80064ec <_close+0x18>
 8006512:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006516:	6023      	str	r3, [r4, #0]
 8006518:	e7e8      	b.n	80064ec <_close+0x18>
 800651a:	bf00      	nop
 800651c:	20025c24 	.word	0x20025c24

08006520 <_swistat>:
 8006520:	b570      	push	{r4, r5, r6, lr}
 8006522:	460c      	mov	r4, r1
 8006524:	f7ff ff04 	bl	8006330 <findslot>
 8006528:	4605      	mov	r5, r0
 800652a:	b930      	cbnz	r0, 800653a <_swistat+0x1a>
 800652c:	f000 fa3a 	bl	80069a4 <__errno>
 8006530:	2309      	movs	r3, #9
 8006532:	6003      	str	r3, [r0, #0]
 8006534:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006538:	bd70      	pop	{r4, r5, r6, pc}
 800653a:	6863      	ldr	r3, [r4, #4]
 800653c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006540:	6063      	str	r3, [r4, #4]
 8006542:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006546:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006548:	260c      	movs	r6, #12
 800654a:	4630      	mov	r0, r6
 800654c:	4629      	mov	r1, r5
 800654e:	beab      	bkpt	0x00ab
 8006550:	4605      	mov	r5, r0
 8006552:	4628      	mov	r0, r5
 8006554:	f7ff ff14 	bl	8006380 <checkerror>
 8006558:	1c43      	adds	r3, r0, #1
 800655a:	d0eb      	beq.n	8006534 <_swistat+0x14>
 800655c:	6120      	str	r0, [r4, #16]
 800655e:	2000      	movs	r0, #0
 8006560:	e7ea      	b.n	8006538 <_swistat+0x18>

08006562 <_stat>:
 8006562:	b538      	push	{r3, r4, r5, lr}
 8006564:	460d      	mov	r5, r1
 8006566:	4604      	mov	r4, r0
 8006568:	2258      	movs	r2, #88	@ 0x58
 800656a:	2100      	movs	r1, #0
 800656c:	4628      	mov	r0, r5
 800656e:	f000 fa11 	bl	8006994 <memset>
 8006572:	4620      	mov	r0, r4
 8006574:	2100      	movs	r1, #0
 8006576:	f000 f811 	bl	800659c <_swiopen>
 800657a:	1c43      	adds	r3, r0, #1
 800657c:	4604      	mov	r4, r0
 800657e:	d00b      	beq.n	8006598 <_stat+0x36>
 8006580:	686b      	ldr	r3, [r5, #4]
 8006582:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006586:	606b      	str	r3, [r5, #4]
 8006588:	4629      	mov	r1, r5
 800658a:	f7ff ffc9 	bl	8006520 <_swistat>
 800658e:	4605      	mov	r5, r0
 8006590:	4620      	mov	r0, r4
 8006592:	f7ff ff9f 	bl	80064d4 <_close>
 8006596:	462c      	mov	r4, r5
 8006598:	4620      	mov	r0, r4
 800659a:	bd38      	pop	{r3, r4, r5, pc}

0800659c <_swiopen>:
 800659c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065a0:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 800664c <_swiopen+0xb0>
 80065a4:	b096      	sub	sp, #88	@ 0x58
 80065a6:	4607      	mov	r7, r0
 80065a8:	460e      	mov	r6, r1
 80065aa:	2400      	movs	r4, #0
 80065ac:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 80065b0:	3301      	adds	r3, #1
 80065b2:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80065b6:	d032      	beq.n	800661e <_swiopen+0x82>
 80065b8:	3401      	adds	r4, #1
 80065ba:	2c14      	cmp	r4, #20
 80065bc:	d1f6      	bne.n	80065ac <_swiopen+0x10>
 80065be:	f000 f9f1 	bl	80069a4 <__errno>
 80065c2:	2318      	movs	r3, #24
 80065c4:	e03a      	b.n	800663c <_swiopen+0xa0>
 80065c6:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80065ca:	f240 6301 	movw	r3, #1537	@ 0x601
 80065ce:	07b2      	lsls	r2, r6, #30
 80065d0:	bf48      	it	mi
 80065d2:	f045 0502 	orrmi.w	r5, r5, #2
 80065d6:	421e      	tst	r6, r3
 80065d8:	bf18      	it	ne
 80065da:	f045 0504 	orrne.w	r5, r5, #4
 80065de:	0733      	lsls	r3, r6, #28
 80065e0:	bf48      	it	mi
 80065e2:	f025 0504 	bicmi.w	r5, r5, #4
 80065e6:	4638      	mov	r0, r7
 80065e8:	bf48      	it	mi
 80065ea:	f045 0508 	orrmi.w	r5, r5, #8
 80065ee:	9700      	str	r7, [sp, #0]
 80065f0:	f7f9 fdfc 	bl	80001ec <strlen>
 80065f4:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80065f8:	2501      	movs	r5, #1
 80065fa:	4628      	mov	r0, r5
 80065fc:	4651      	mov	r1, sl
 80065fe:	beab      	bkpt	0x00ab
 8006600:	4605      	mov	r5, r0
 8006602:	2d00      	cmp	r5, #0
 8006604:	db06      	blt.n	8006614 <_swiopen+0x78>
 8006606:	44c8      	add	r8, r9
 8006608:	2300      	movs	r3, #0
 800660a:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 800660e:	f8c8 3004 	str.w	r3, [r8, #4]
 8006612:	e016      	b.n	8006642 <_swiopen+0xa6>
 8006614:	4628      	mov	r0, r5
 8006616:	f7ff fea5 	bl	8006364 <error>
 800661a:	4604      	mov	r4, r0
 800661c:	e011      	b.n	8006642 <_swiopen+0xa6>
 800661e:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8006622:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006626:	46ea      	mov	sl, sp
 8006628:	d1cd      	bne.n	80065c6 <_swiopen+0x2a>
 800662a:	4651      	mov	r1, sl
 800662c:	4638      	mov	r0, r7
 800662e:	f7ff ff98 	bl	8006562 <_stat>
 8006632:	3001      	adds	r0, #1
 8006634:	d0c7      	beq.n	80065c6 <_swiopen+0x2a>
 8006636:	f000 f9b5 	bl	80069a4 <__errno>
 800663a:	2311      	movs	r3, #17
 800663c:	6003      	str	r3, [r0, #0]
 800663e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006642:	4620      	mov	r0, r4
 8006644:	b016      	add	sp, #88	@ 0x58
 8006646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800664a:	bf00      	nop
 800664c:	20025c24 	.word	0x20025c24

08006650 <_get_semihosting_exts>:
 8006650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006654:	4606      	mov	r6, r0
 8006656:	460f      	mov	r7, r1
 8006658:	4829      	ldr	r0, [pc, #164]	@ (8006700 <_get_semihosting_exts+0xb0>)
 800665a:	2100      	movs	r1, #0
 800665c:	4615      	mov	r5, r2
 800665e:	f7ff ff9d 	bl	800659c <_swiopen>
 8006662:	462a      	mov	r2, r5
 8006664:	4604      	mov	r4, r0
 8006666:	2100      	movs	r1, #0
 8006668:	4630      	mov	r0, r6
 800666a:	f000 f993 	bl	8006994 <memset>
 800666e:	1c63      	adds	r3, r4, #1
 8006670:	d014      	beq.n	800669c <_get_semihosting_exts+0x4c>
 8006672:	4620      	mov	r0, r4
 8006674:	f7ff fe5c 	bl	8006330 <findslot>
 8006678:	f04f 080c 	mov.w	r8, #12
 800667c:	4681      	mov	r9, r0
 800667e:	4640      	mov	r0, r8
 8006680:	4649      	mov	r1, r9
 8006682:	beab      	bkpt	0x00ab
 8006684:	4680      	mov	r8, r0
 8006686:	4640      	mov	r0, r8
 8006688:	f7ff fe7a 	bl	8006380 <checkerror>
 800668c:	2803      	cmp	r0, #3
 800668e:	dd02      	ble.n	8006696 <_get_semihosting_exts+0x46>
 8006690:	1ec3      	subs	r3, r0, #3
 8006692:	42ab      	cmp	r3, r5
 8006694:	dc07      	bgt.n	80066a6 <_get_semihosting_exts+0x56>
 8006696:	4620      	mov	r0, r4
 8006698:	f7ff ff1c 	bl	80064d4 <_close>
 800669c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066a0:	b003      	add	sp, #12
 80066a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066a6:	2204      	movs	r2, #4
 80066a8:	eb0d 0102 	add.w	r1, sp, r2
 80066ac:	4620      	mov	r0, r4
 80066ae:	f7ff fe7c 	bl	80063aa <_read>
 80066b2:	2803      	cmp	r0, #3
 80066b4:	ddef      	ble.n	8006696 <_get_semihosting_exts+0x46>
 80066b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80066ba:	2b53      	cmp	r3, #83	@ 0x53
 80066bc:	d1eb      	bne.n	8006696 <_get_semihosting_exts+0x46>
 80066be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80066c2:	2b48      	cmp	r3, #72	@ 0x48
 80066c4:	d1e7      	bne.n	8006696 <_get_semihosting_exts+0x46>
 80066c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80066ca:	2b46      	cmp	r3, #70	@ 0x46
 80066cc:	d1e3      	bne.n	8006696 <_get_semihosting_exts+0x46>
 80066ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80066d2:	2b42      	cmp	r3, #66	@ 0x42
 80066d4:	d1df      	bne.n	8006696 <_get_semihosting_exts+0x46>
 80066d6:	2201      	movs	r2, #1
 80066d8:	4639      	mov	r1, r7
 80066da:	4620      	mov	r0, r4
 80066dc:	f7ff fe7f 	bl	80063de <_swilseek>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	dbd8      	blt.n	8006696 <_get_semihosting_exts+0x46>
 80066e4:	462a      	mov	r2, r5
 80066e6:	4631      	mov	r1, r6
 80066e8:	4620      	mov	r0, r4
 80066ea:	f7ff fe5e 	bl	80063aa <_read>
 80066ee:	4605      	mov	r5, r0
 80066f0:	4620      	mov	r0, r4
 80066f2:	f7ff feef 	bl	80064d4 <_close>
 80066f6:	4628      	mov	r0, r5
 80066f8:	f7ff fe42 	bl	8006380 <checkerror>
 80066fc:	e7d0      	b.n	80066a0 <_get_semihosting_exts+0x50>
 80066fe:	bf00      	nop
 8006700:	08007f18 	.word	0x08007f18

08006704 <initialise_semihosting_exts>:
 8006704:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006706:	4d0a      	ldr	r5, [pc, #40]	@ (8006730 <initialise_semihosting_exts+0x2c>)
 8006708:	4c0a      	ldr	r4, [pc, #40]	@ (8006734 <initialise_semihosting_exts+0x30>)
 800670a:	2100      	movs	r1, #0
 800670c:	2201      	movs	r2, #1
 800670e:	a801      	add	r0, sp, #4
 8006710:	6029      	str	r1, [r5, #0]
 8006712:	6022      	str	r2, [r4, #0]
 8006714:	f7ff ff9c 	bl	8006650 <_get_semihosting_exts>
 8006718:	2800      	cmp	r0, #0
 800671a:	dd07      	ble.n	800672c <initialise_semihosting_exts+0x28>
 800671c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006720:	f003 0201 	and.w	r2, r3, #1
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	602a      	str	r2, [r5, #0]
 800672a:	6023      	str	r3, [r4, #0]
 800672c:	b003      	add	sp, #12
 800672e:	bd30      	pop	{r4, r5, pc}
 8006730:	20000020 	.word	0x20000020
 8006734:	2000001c 	.word	0x2000001c

08006738 <_has_ext_stdout_stderr>:
 8006738:	b510      	push	{r4, lr}
 800673a:	4c04      	ldr	r4, [pc, #16]	@ (800674c <_has_ext_stdout_stderr+0x14>)
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	da01      	bge.n	8006746 <_has_ext_stdout_stderr+0xe>
 8006742:	f7ff ffdf 	bl	8006704 <initialise_semihosting_exts>
 8006746:	6820      	ldr	r0, [r4, #0]
 8006748:	bd10      	pop	{r4, pc}
 800674a:	bf00      	nop
 800674c:	2000001c 	.word	0x2000001c

08006750 <initialise_monitor_handles>:
 8006750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006754:	b085      	sub	sp, #20
 8006756:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8006808 <initialise_monitor_handles+0xb8>
 800675a:	f8cd 9004 	str.w	r9, [sp, #4]
 800675e:	2303      	movs	r3, #3
 8006760:	2400      	movs	r4, #0
 8006762:	9303      	str	r3, [sp, #12]
 8006764:	af01      	add	r7, sp, #4
 8006766:	9402      	str	r4, [sp, #8]
 8006768:	2501      	movs	r5, #1
 800676a:	4628      	mov	r0, r5
 800676c:	4639      	mov	r1, r7
 800676e:	beab      	bkpt	0x00ab
 8006770:	4605      	mov	r5, r0
 8006772:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800680c <initialise_monitor_handles+0xbc>
 8006776:	4623      	mov	r3, r4
 8006778:	4c20      	ldr	r4, [pc, #128]	@ (80067fc <initialise_monitor_handles+0xac>)
 800677a:	f8c8 5000 	str.w	r5, [r8]
 800677e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006782:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8006786:	3301      	adds	r3, #1
 8006788:	2b14      	cmp	r3, #20
 800678a:	d1fa      	bne.n	8006782 <initialise_monitor_handles+0x32>
 800678c:	f7ff ffd4 	bl	8006738 <_has_ext_stdout_stderr>
 8006790:	4d1b      	ldr	r5, [pc, #108]	@ (8006800 <initialise_monitor_handles+0xb0>)
 8006792:	b1d0      	cbz	r0, 80067ca <initialise_monitor_handles+0x7a>
 8006794:	f04f 0a03 	mov.w	sl, #3
 8006798:	2304      	movs	r3, #4
 800679a:	f8cd 9004 	str.w	r9, [sp, #4]
 800679e:	2601      	movs	r6, #1
 80067a0:	f8cd a00c 	str.w	sl, [sp, #12]
 80067a4:	9302      	str	r3, [sp, #8]
 80067a6:	4630      	mov	r0, r6
 80067a8:	4639      	mov	r1, r7
 80067aa:	beab      	bkpt	0x00ab
 80067ac:	4683      	mov	fp, r0
 80067ae:	4b15      	ldr	r3, [pc, #84]	@ (8006804 <initialise_monitor_handles+0xb4>)
 80067b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80067b4:	f8c3 b000 	str.w	fp, [r3]
 80067b8:	2308      	movs	r3, #8
 80067ba:	f8cd a00c 	str.w	sl, [sp, #12]
 80067be:	9302      	str	r3, [sp, #8]
 80067c0:	4630      	mov	r0, r6
 80067c2:	4639      	mov	r1, r7
 80067c4:	beab      	bkpt	0x00ab
 80067c6:	4606      	mov	r6, r0
 80067c8:	602e      	str	r6, [r5, #0]
 80067ca:	682b      	ldr	r3, [r5, #0]
 80067cc:	3301      	adds	r3, #1
 80067ce:	bf02      	ittt	eq
 80067d0:	4b0c      	ldreq	r3, [pc, #48]	@ (8006804 <initialise_monitor_handles+0xb4>)
 80067d2:	681b      	ldreq	r3, [r3, #0]
 80067d4:	602b      	streq	r3, [r5, #0]
 80067d6:	2600      	movs	r6, #0
 80067d8:	f8d8 3000 	ldr.w	r3, [r8]
 80067dc:	6023      	str	r3, [r4, #0]
 80067de:	6066      	str	r6, [r4, #4]
 80067e0:	f7ff ffaa 	bl	8006738 <_has_ext_stdout_stderr>
 80067e4:	b130      	cbz	r0, 80067f4 <initialise_monitor_handles+0xa4>
 80067e6:	4b07      	ldr	r3, [pc, #28]	@ (8006804 <initialise_monitor_handles+0xb4>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80067ee:	682b      	ldr	r3, [r5, #0]
 80067f0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80067f4:	b005      	add	sp, #20
 80067f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067fa:	bf00      	nop
 80067fc:	20025c24 	.word	0x20025c24
 8006800:	20025c18 	.word	0x20025c18
 8006804:	20025c1c 	.word	0x20025c1c
 8006808:	08007f2e 	.word	0x08007f2e
 800680c:	20025c20 	.word	0x20025c20

08006810 <std>:
 8006810:	2300      	movs	r3, #0
 8006812:	b510      	push	{r4, lr}
 8006814:	4604      	mov	r4, r0
 8006816:	e9c0 3300 	strd	r3, r3, [r0]
 800681a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800681e:	6083      	str	r3, [r0, #8]
 8006820:	8181      	strh	r1, [r0, #12]
 8006822:	6643      	str	r3, [r0, #100]	@ 0x64
 8006824:	81c2      	strh	r2, [r0, #14]
 8006826:	6183      	str	r3, [r0, #24]
 8006828:	4619      	mov	r1, r3
 800682a:	2208      	movs	r2, #8
 800682c:	305c      	adds	r0, #92	@ 0x5c
 800682e:	f000 f8b1 	bl	8006994 <memset>
 8006832:	4b0d      	ldr	r3, [pc, #52]	@ (8006868 <std+0x58>)
 8006834:	6263      	str	r3, [r4, #36]	@ 0x24
 8006836:	4b0d      	ldr	r3, [pc, #52]	@ (800686c <std+0x5c>)
 8006838:	62a3      	str	r3, [r4, #40]	@ 0x28
 800683a:	4b0d      	ldr	r3, [pc, #52]	@ (8006870 <std+0x60>)
 800683c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800683e:	4b0d      	ldr	r3, [pc, #52]	@ (8006874 <std+0x64>)
 8006840:	6323      	str	r3, [r4, #48]	@ 0x30
 8006842:	4b0d      	ldr	r3, [pc, #52]	@ (8006878 <std+0x68>)
 8006844:	6224      	str	r4, [r4, #32]
 8006846:	429c      	cmp	r4, r3
 8006848:	d006      	beq.n	8006858 <std+0x48>
 800684a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800684e:	4294      	cmp	r4, r2
 8006850:	d002      	beq.n	8006858 <std+0x48>
 8006852:	33d0      	adds	r3, #208	@ 0xd0
 8006854:	429c      	cmp	r4, r3
 8006856:	d105      	bne.n	8006864 <std+0x54>
 8006858:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800685c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006860:	f000 b8ca 	b.w	80069f8 <__retarget_lock_init_recursive>
 8006864:	bd10      	pop	{r4, pc}
 8006866:	bf00      	nop
 8006868:	08006b71 	.word	0x08006b71
 800686c:	08006b93 	.word	0x08006b93
 8006870:	08006bcb 	.word	0x08006bcb
 8006874:	08006bef 	.word	0x08006bef
 8006878:	20025cc4 	.word	0x20025cc4

0800687c <stdio_exit_handler>:
 800687c:	4a02      	ldr	r2, [pc, #8]	@ (8006888 <stdio_exit_handler+0xc>)
 800687e:	4903      	ldr	r1, [pc, #12]	@ (800688c <stdio_exit_handler+0x10>)
 8006880:	4803      	ldr	r0, [pc, #12]	@ (8006890 <stdio_exit_handler+0x14>)
 8006882:	f000 b869 	b.w	8006958 <_fwalk_sglue>
 8006886:	bf00      	nop
 8006888:	20000024 	.word	0x20000024
 800688c:	08006b09 	.word	0x08006b09
 8006890:	20000034 	.word	0x20000034

08006894 <cleanup_stdio>:
 8006894:	6841      	ldr	r1, [r0, #4]
 8006896:	4b0c      	ldr	r3, [pc, #48]	@ (80068c8 <cleanup_stdio+0x34>)
 8006898:	4299      	cmp	r1, r3
 800689a:	b510      	push	{r4, lr}
 800689c:	4604      	mov	r4, r0
 800689e:	d001      	beq.n	80068a4 <cleanup_stdio+0x10>
 80068a0:	f000 f932 	bl	8006b08 <_fflush_r>
 80068a4:	68a1      	ldr	r1, [r4, #8]
 80068a6:	4b09      	ldr	r3, [pc, #36]	@ (80068cc <cleanup_stdio+0x38>)
 80068a8:	4299      	cmp	r1, r3
 80068aa:	d002      	beq.n	80068b2 <cleanup_stdio+0x1e>
 80068ac:	4620      	mov	r0, r4
 80068ae:	f000 f92b 	bl	8006b08 <_fflush_r>
 80068b2:	68e1      	ldr	r1, [r4, #12]
 80068b4:	4b06      	ldr	r3, [pc, #24]	@ (80068d0 <cleanup_stdio+0x3c>)
 80068b6:	4299      	cmp	r1, r3
 80068b8:	d004      	beq.n	80068c4 <cleanup_stdio+0x30>
 80068ba:	4620      	mov	r0, r4
 80068bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068c0:	f000 b922 	b.w	8006b08 <_fflush_r>
 80068c4:	bd10      	pop	{r4, pc}
 80068c6:	bf00      	nop
 80068c8:	20025cc4 	.word	0x20025cc4
 80068cc:	20025d2c 	.word	0x20025d2c
 80068d0:	20025d94 	.word	0x20025d94

080068d4 <global_stdio_init.part.0>:
 80068d4:	b510      	push	{r4, lr}
 80068d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006904 <global_stdio_init.part.0+0x30>)
 80068d8:	4c0b      	ldr	r4, [pc, #44]	@ (8006908 <global_stdio_init.part.0+0x34>)
 80068da:	4a0c      	ldr	r2, [pc, #48]	@ (800690c <global_stdio_init.part.0+0x38>)
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	4620      	mov	r0, r4
 80068e0:	2200      	movs	r2, #0
 80068e2:	2104      	movs	r1, #4
 80068e4:	f7ff ff94 	bl	8006810 <std>
 80068e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068ec:	2201      	movs	r2, #1
 80068ee:	2109      	movs	r1, #9
 80068f0:	f7ff ff8e 	bl	8006810 <std>
 80068f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80068f8:	2202      	movs	r2, #2
 80068fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068fe:	2112      	movs	r1, #18
 8006900:	f7ff bf86 	b.w	8006810 <std>
 8006904:	20025dfc 	.word	0x20025dfc
 8006908:	20025cc4 	.word	0x20025cc4
 800690c:	0800687d 	.word	0x0800687d

08006910 <__sfp_lock_acquire>:
 8006910:	4801      	ldr	r0, [pc, #4]	@ (8006918 <__sfp_lock_acquire+0x8>)
 8006912:	f000 b872 	b.w	80069fa <__retarget_lock_acquire_recursive>
 8006916:	bf00      	nop
 8006918:	20025e01 	.word	0x20025e01

0800691c <__sfp_lock_release>:
 800691c:	4801      	ldr	r0, [pc, #4]	@ (8006924 <__sfp_lock_release+0x8>)
 800691e:	f000 b86d 	b.w	80069fc <__retarget_lock_release_recursive>
 8006922:	bf00      	nop
 8006924:	20025e01 	.word	0x20025e01

08006928 <__sinit>:
 8006928:	b510      	push	{r4, lr}
 800692a:	4604      	mov	r4, r0
 800692c:	f7ff fff0 	bl	8006910 <__sfp_lock_acquire>
 8006930:	6a23      	ldr	r3, [r4, #32]
 8006932:	b11b      	cbz	r3, 800693c <__sinit+0x14>
 8006934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006938:	f7ff bff0 	b.w	800691c <__sfp_lock_release>
 800693c:	4b04      	ldr	r3, [pc, #16]	@ (8006950 <__sinit+0x28>)
 800693e:	6223      	str	r3, [r4, #32]
 8006940:	4b04      	ldr	r3, [pc, #16]	@ (8006954 <__sinit+0x2c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1f5      	bne.n	8006934 <__sinit+0xc>
 8006948:	f7ff ffc4 	bl	80068d4 <global_stdio_init.part.0>
 800694c:	e7f2      	b.n	8006934 <__sinit+0xc>
 800694e:	bf00      	nop
 8006950:	08006895 	.word	0x08006895
 8006954:	20025dfc 	.word	0x20025dfc

08006958 <_fwalk_sglue>:
 8006958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800695c:	4607      	mov	r7, r0
 800695e:	4688      	mov	r8, r1
 8006960:	4614      	mov	r4, r2
 8006962:	2600      	movs	r6, #0
 8006964:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006968:	f1b9 0901 	subs.w	r9, r9, #1
 800696c:	d505      	bpl.n	800697a <_fwalk_sglue+0x22>
 800696e:	6824      	ldr	r4, [r4, #0]
 8006970:	2c00      	cmp	r4, #0
 8006972:	d1f7      	bne.n	8006964 <_fwalk_sglue+0xc>
 8006974:	4630      	mov	r0, r6
 8006976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800697a:	89ab      	ldrh	r3, [r5, #12]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d907      	bls.n	8006990 <_fwalk_sglue+0x38>
 8006980:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006984:	3301      	adds	r3, #1
 8006986:	d003      	beq.n	8006990 <_fwalk_sglue+0x38>
 8006988:	4629      	mov	r1, r5
 800698a:	4638      	mov	r0, r7
 800698c:	47c0      	blx	r8
 800698e:	4306      	orrs	r6, r0
 8006990:	3568      	adds	r5, #104	@ 0x68
 8006992:	e7e9      	b.n	8006968 <_fwalk_sglue+0x10>

08006994 <memset>:
 8006994:	4402      	add	r2, r0
 8006996:	4603      	mov	r3, r0
 8006998:	4293      	cmp	r3, r2
 800699a:	d100      	bne.n	800699e <memset+0xa>
 800699c:	4770      	bx	lr
 800699e:	f803 1b01 	strb.w	r1, [r3], #1
 80069a2:	e7f9      	b.n	8006998 <memset+0x4>

080069a4 <__errno>:
 80069a4:	4b01      	ldr	r3, [pc, #4]	@ (80069ac <__errno+0x8>)
 80069a6:	6818      	ldr	r0, [r3, #0]
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	20000030 	.word	0x20000030

080069b0 <__libc_init_array>:
 80069b0:	b570      	push	{r4, r5, r6, lr}
 80069b2:	4d0d      	ldr	r5, [pc, #52]	@ (80069e8 <__libc_init_array+0x38>)
 80069b4:	4c0d      	ldr	r4, [pc, #52]	@ (80069ec <__libc_init_array+0x3c>)
 80069b6:	1b64      	subs	r4, r4, r5
 80069b8:	10a4      	asrs	r4, r4, #2
 80069ba:	2600      	movs	r6, #0
 80069bc:	42a6      	cmp	r6, r4
 80069be:	d109      	bne.n	80069d4 <__libc_init_array+0x24>
 80069c0:	4d0b      	ldr	r5, [pc, #44]	@ (80069f0 <__libc_init_array+0x40>)
 80069c2:	4c0c      	ldr	r4, [pc, #48]	@ (80069f4 <__libc_init_array+0x44>)
 80069c4:	f000 f9a8 	bl	8006d18 <_init>
 80069c8:	1b64      	subs	r4, r4, r5
 80069ca:	10a4      	asrs	r4, r4, #2
 80069cc:	2600      	movs	r6, #0
 80069ce:	42a6      	cmp	r6, r4
 80069d0:	d105      	bne.n	80069de <__libc_init_array+0x2e>
 80069d2:	bd70      	pop	{r4, r5, r6, pc}
 80069d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d8:	4798      	blx	r3
 80069da:	3601      	adds	r6, #1
 80069dc:	e7ee      	b.n	80069bc <__libc_init_array+0xc>
 80069de:	f855 3b04 	ldr.w	r3, [r5], #4
 80069e2:	4798      	blx	r3
 80069e4:	3601      	adds	r6, #1
 80069e6:	e7f2      	b.n	80069ce <__libc_init_array+0x1e>
 80069e8:	08007f3c 	.word	0x08007f3c
 80069ec:	08007f3c 	.word	0x08007f3c
 80069f0:	08007f3c 	.word	0x08007f3c
 80069f4:	08007f40 	.word	0x08007f40

080069f8 <__retarget_lock_init_recursive>:
 80069f8:	4770      	bx	lr

080069fa <__retarget_lock_acquire_recursive>:
 80069fa:	4770      	bx	lr

080069fc <__retarget_lock_release_recursive>:
 80069fc:	4770      	bx	lr
	...

08006a00 <__sflush_r>:
 8006a00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a08:	0716      	lsls	r6, r2, #28
 8006a0a:	4605      	mov	r5, r0
 8006a0c:	460c      	mov	r4, r1
 8006a0e:	d454      	bmi.n	8006aba <__sflush_r+0xba>
 8006a10:	684b      	ldr	r3, [r1, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	dc02      	bgt.n	8006a1c <__sflush_r+0x1c>
 8006a16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	dd48      	ble.n	8006aae <__sflush_r+0xae>
 8006a1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a1e:	2e00      	cmp	r6, #0
 8006a20:	d045      	beq.n	8006aae <__sflush_r+0xae>
 8006a22:	2300      	movs	r3, #0
 8006a24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a28:	682f      	ldr	r7, [r5, #0]
 8006a2a:	6a21      	ldr	r1, [r4, #32]
 8006a2c:	602b      	str	r3, [r5, #0]
 8006a2e:	d030      	beq.n	8006a92 <__sflush_r+0x92>
 8006a30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	0759      	lsls	r1, r3, #29
 8006a36:	d505      	bpl.n	8006a44 <__sflush_r+0x44>
 8006a38:	6863      	ldr	r3, [r4, #4]
 8006a3a:	1ad2      	subs	r2, r2, r3
 8006a3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a3e:	b10b      	cbz	r3, 8006a44 <__sflush_r+0x44>
 8006a40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a42:	1ad2      	subs	r2, r2, r3
 8006a44:	2300      	movs	r3, #0
 8006a46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a48:	6a21      	ldr	r1, [r4, #32]
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	47b0      	blx	r6
 8006a4e:	1c43      	adds	r3, r0, #1
 8006a50:	89a3      	ldrh	r3, [r4, #12]
 8006a52:	d106      	bne.n	8006a62 <__sflush_r+0x62>
 8006a54:	6829      	ldr	r1, [r5, #0]
 8006a56:	291d      	cmp	r1, #29
 8006a58:	d82b      	bhi.n	8006ab2 <__sflush_r+0xb2>
 8006a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8006b04 <__sflush_r+0x104>)
 8006a5c:	40ca      	lsrs	r2, r1
 8006a5e:	07d6      	lsls	r6, r2, #31
 8006a60:	d527      	bpl.n	8006ab2 <__sflush_r+0xb2>
 8006a62:	2200      	movs	r2, #0
 8006a64:	6062      	str	r2, [r4, #4]
 8006a66:	04d9      	lsls	r1, r3, #19
 8006a68:	6922      	ldr	r2, [r4, #16]
 8006a6a:	6022      	str	r2, [r4, #0]
 8006a6c:	d504      	bpl.n	8006a78 <__sflush_r+0x78>
 8006a6e:	1c42      	adds	r2, r0, #1
 8006a70:	d101      	bne.n	8006a76 <__sflush_r+0x76>
 8006a72:	682b      	ldr	r3, [r5, #0]
 8006a74:	b903      	cbnz	r3, 8006a78 <__sflush_r+0x78>
 8006a76:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a7a:	602f      	str	r7, [r5, #0]
 8006a7c:	b1b9      	cbz	r1, 8006aae <__sflush_r+0xae>
 8006a7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a82:	4299      	cmp	r1, r3
 8006a84:	d002      	beq.n	8006a8c <__sflush_r+0x8c>
 8006a86:	4628      	mov	r0, r5
 8006a88:	f000 f8fc 	bl	8006c84 <_free_r>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a90:	e00d      	b.n	8006aae <__sflush_r+0xae>
 8006a92:	2301      	movs	r3, #1
 8006a94:	4628      	mov	r0, r5
 8006a96:	47b0      	blx	r6
 8006a98:	4602      	mov	r2, r0
 8006a9a:	1c50      	adds	r0, r2, #1
 8006a9c:	d1c9      	bne.n	8006a32 <__sflush_r+0x32>
 8006a9e:	682b      	ldr	r3, [r5, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d0c6      	beq.n	8006a32 <__sflush_r+0x32>
 8006aa4:	2b1d      	cmp	r3, #29
 8006aa6:	d001      	beq.n	8006aac <__sflush_r+0xac>
 8006aa8:	2b16      	cmp	r3, #22
 8006aaa:	d11e      	bne.n	8006aea <__sflush_r+0xea>
 8006aac:	602f      	str	r7, [r5, #0]
 8006aae:	2000      	movs	r0, #0
 8006ab0:	e022      	b.n	8006af8 <__sflush_r+0xf8>
 8006ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ab6:	b21b      	sxth	r3, r3
 8006ab8:	e01b      	b.n	8006af2 <__sflush_r+0xf2>
 8006aba:	690f      	ldr	r7, [r1, #16]
 8006abc:	2f00      	cmp	r7, #0
 8006abe:	d0f6      	beq.n	8006aae <__sflush_r+0xae>
 8006ac0:	0793      	lsls	r3, r2, #30
 8006ac2:	680e      	ldr	r6, [r1, #0]
 8006ac4:	bf08      	it	eq
 8006ac6:	694b      	ldreq	r3, [r1, #20]
 8006ac8:	600f      	str	r7, [r1, #0]
 8006aca:	bf18      	it	ne
 8006acc:	2300      	movne	r3, #0
 8006ace:	eba6 0807 	sub.w	r8, r6, r7
 8006ad2:	608b      	str	r3, [r1, #8]
 8006ad4:	f1b8 0f00 	cmp.w	r8, #0
 8006ad8:	dde9      	ble.n	8006aae <__sflush_r+0xae>
 8006ada:	6a21      	ldr	r1, [r4, #32]
 8006adc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006ade:	4643      	mov	r3, r8
 8006ae0:	463a      	mov	r2, r7
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	47b0      	blx	r6
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	dc08      	bgt.n	8006afc <__sflush_r+0xfc>
 8006aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006af2:	81a3      	strh	r3, [r4, #12]
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006afc:	4407      	add	r7, r0
 8006afe:	eba8 0800 	sub.w	r8, r8, r0
 8006b02:	e7e7      	b.n	8006ad4 <__sflush_r+0xd4>
 8006b04:	20400001 	.word	0x20400001

08006b08 <_fflush_r>:
 8006b08:	b538      	push	{r3, r4, r5, lr}
 8006b0a:	690b      	ldr	r3, [r1, #16]
 8006b0c:	4605      	mov	r5, r0
 8006b0e:	460c      	mov	r4, r1
 8006b10:	b913      	cbnz	r3, 8006b18 <_fflush_r+0x10>
 8006b12:	2500      	movs	r5, #0
 8006b14:	4628      	mov	r0, r5
 8006b16:	bd38      	pop	{r3, r4, r5, pc}
 8006b18:	b118      	cbz	r0, 8006b22 <_fflush_r+0x1a>
 8006b1a:	6a03      	ldr	r3, [r0, #32]
 8006b1c:	b90b      	cbnz	r3, 8006b22 <_fflush_r+0x1a>
 8006b1e:	f7ff ff03 	bl	8006928 <__sinit>
 8006b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0f3      	beq.n	8006b12 <_fflush_r+0xa>
 8006b2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b2c:	07d0      	lsls	r0, r2, #31
 8006b2e:	d404      	bmi.n	8006b3a <_fflush_r+0x32>
 8006b30:	0599      	lsls	r1, r3, #22
 8006b32:	d402      	bmi.n	8006b3a <_fflush_r+0x32>
 8006b34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b36:	f7ff ff60 	bl	80069fa <__retarget_lock_acquire_recursive>
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	4621      	mov	r1, r4
 8006b3e:	f7ff ff5f 	bl	8006a00 <__sflush_r>
 8006b42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b44:	07da      	lsls	r2, r3, #31
 8006b46:	4605      	mov	r5, r0
 8006b48:	d4e4      	bmi.n	8006b14 <_fflush_r+0xc>
 8006b4a:	89a3      	ldrh	r3, [r4, #12]
 8006b4c:	059b      	lsls	r3, r3, #22
 8006b4e:	d4e1      	bmi.n	8006b14 <_fflush_r+0xc>
 8006b50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b52:	f7ff ff53 	bl	80069fc <__retarget_lock_release_recursive>
 8006b56:	e7dd      	b.n	8006b14 <_fflush_r+0xc>

08006b58 <__malloc_lock>:
 8006b58:	4801      	ldr	r0, [pc, #4]	@ (8006b60 <__malloc_lock+0x8>)
 8006b5a:	f7ff bf4e 	b.w	80069fa <__retarget_lock_acquire_recursive>
 8006b5e:	bf00      	nop
 8006b60:	20025e00 	.word	0x20025e00

08006b64 <__malloc_unlock>:
 8006b64:	4801      	ldr	r0, [pc, #4]	@ (8006b6c <__malloc_unlock+0x8>)
 8006b66:	f7ff bf49 	b.w	80069fc <__retarget_lock_release_recursive>
 8006b6a:	bf00      	nop
 8006b6c:	20025e00 	.word	0x20025e00

08006b70 <__sread>:
 8006b70:	b510      	push	{r4, lr}
 8006b72:	460c      	mov	r4, r1
 8006b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b78:	f000 f850 	bl	8006c1c <_read_r>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	bfab      	itete	ge
 8006b80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b82:	89a3      	ldrhlt	r3, [r4, #12]
 8006b84:	181b      	addge	r3, r3, r0
 8006b86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b8a:	bfac      	ite	ge
 8006b8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b8e:	81a3      	strhlt	r3, [r4, #12]
 8006b90:	bd10      	pop	{r4, pc}

08006b92 <__swrite>:
 8006b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b96:	461f      	mov	r7, r3
 8006b98:	898b      	ldrh	r3, [r1, #12]
 8006b9a:	05db      	lsls	r3, r3, #23
 8006b9c:	4605      	mov	r5, r0
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	4616      	mov	r6, r2
 8006ba2:	d505      	bpl.n	8006bb0 <__swrite+0x1e>
 8006ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ba8:	2302      	movs	r3, #2
 8006baa:	2200      	movs	r2, #0
 8006bac:	f000 f824 	bl	8006bf8 <_lseek_r>
 8006bb0:	89a3      	ldrh	r3, [r4, #12]
 8006bb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006bba:	81a3      	strh	r3, [r4, #12]
 8006bbc:	4632      	mov	r2, r6
 8006bbe:	463b      	mov	r3, r7
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc6:	f000 b83b 	b.w	8006c40 <_write_r>

08006bca <__sseek>:
 8006bca:	b510      	push	{r4, lr}
 8006bcc:	460c      	mov	r4, r1
 8006bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bd2:	f000 f811 	bl	8006bf8 <_lseek_r>
 8006bd6:	1c43      	adds	r3, r0, #1
 8006bd8:	89a3      	ldrh	r3, [r4, #12]
 8006bda:	bf15      	itete	ne
 8006bdc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006bde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006be2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006be6:	81a3      	strheq	r3, [r4, #12]
 8006be8:	bf18      	it	ne
 8006bea:	81a3      	strhne	r3, [r4, #12]
 8006bec:	bd10      	pop	{r4, pc}

08006bee <__sclose>:
 8006bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bf2:	f000 b837 	b.w	8006c64 <_close_r>
	...

08006bf8 <_lseek_r>:
 8006bf8:	b538      	push	{r3, r4, r5, lr}
 8006bfa:	4d07      	ldr	r5, [pc, #28]	@ (8006c18 <_lseek_r+0x20>)
 8006bfc:	4604      	mov	r4, r0
 8006bfe:	4608      	mov	r0, r1
 8006c00:	4611      	mov	r1, r2
 8006c02:	2200      	movs	r2, #0
 8006c04:	602a      	str	r2, [r5, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	f7ff fc25 	bl	8006456 <_lseek>
 8006c0c:	1c43      	adds	r3, r0, #1
 8006c0e:	d102      	bne.n	8006c16 <_lseek_r+0x1e>
 8006c10:	682b      	ldr	r3, [r5, #0]
 8006c12:	b103      	cbz	r3, 8006c16 <_lseek_r+0x1e>
 8006c14:	6023      	str	r3, [r4, #0]
 8006c16:	bd38      	pop	{r3, r4, r5, pc}
 8006c18:	20025e08 	.word	0x20025e08

08006c1c <_read_r>:
 8006c1c:	b538      	push	{r3, r4, r5, lr}
 8006c1e:	4d07      	ldr	r5, [pc, #28]	@ (8006c3c <_read_r+0x20>)
 8006c20:	4604      	mov	r4, r0
 8006c22:	4608      	mov	r0, r1
 8006c24:	4611      	mov	r1, r2
 8006c26:	2200      	movs	r2, #0
 8006c28:	602a      	str	r2, [r5, #0]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	f7ff fbbd 	bl	80063aa <_read>
 8006c30:	1c43      	adds	r3, r0, #1
 8006c32:	d102      	bne.n	8006c3a <_read_r+0x1e>
 8006c34:	682b      	ldr	r3, [r5, #0]
 8006c36:	b103      	cbz	r3, 8006c3a <_read_r+0x1e>
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	bd38      	pop	{r3, r4, r5, pc}
 8006c3c:	20025e08 	.word	0x20025e08

08006c40 <_write_r>:
 8006c40:	b538      	push	{r3, r4, r5, lr}
 8006c42:	4d07      	ldr	r5, [pc, #28]	@ (8006c60 <_write_r+0x20>)
 8006c44:	4604      	mov	r4, r0
 8006c46:	4608      	mov	r0, r1
 8006c48:	4611      	mov	r1, r2
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	602a      	str	r2, [r5, #0]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f7ff fc13 	bl	800647a <_write>
 8006c54:	1c43      	adds	r3, r0, #1
 8006c56:	d102      	bne.n	8006c5e <_write_r+0x1e>
 8006c58:	682b      	ldr	r3, [r5, #0]
 8006c5a:	b103      	cbz	r3, 8006c5e <_write_r+0x1e>
 8006c5c:	6023      	str	r3, [r4, #0]
 8006c5e:	bd38      	pop	{r3, r4, r5, pc}
 8006c60:	20025e08 	.word	0x20025e08

08006c64 <_close_r>:
 8006c64:	b538      	push	{r3, r4, r5, lr}
 8006c66:	4d06      	ldr	r5, [pc, #24]	@ (8006c80 <_close_r+0x1c>)
 8006c68:	2300      	movs	r3, #0
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	4608      	mov	r0, r1
 8006c6e:	602b      	str	r3, [r5, #0]
 8006c70:	f7ff fc30 	bl	80064d4 <_close>
 8006c74:	1c43      	adds	r3, r0, #1
 8006c76:	d102      	bne.n	8006c7e <_close_r+0x1a>
 8006c78:	682b      	ldr	r3, [r5, #0]
 8006c7a:	b103      	cbz	r3, 8006c7e <_close_r+0x1a>
 8006c7c:	6023      	str	r3, [r4, #0]
 8006c7e:	bd38      	pop	{r3, r4, r5, pc}
 8006c80:	20025e08 	.word	0x20025e08

08006c84 <_free_r>:
 8006c84:	b538      	push	{r3, r4, r5, lr}
 8006c86:	4605      	mov	r5, r0
 8006c88:	2900      	cmp	r1, #0
 8006c8a:	d041      	beq.n	8006d10 <_free_r+0x8c>
 8006c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c90:	1f0c      	subs	r4, r1, #4
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	bfb8      	it	lt
 8006c96:	18e4      	addlt	r4, r4, r3
 8006c98:	f7ff ff5e 	bl	8006b58 <__malloc_lock>
 8006c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8006d14 <_free_r+0x90>)
 8006c9e:	6813      	ldr	r3, [r2, #0]
 8006ca0:	b933      	cbnz	r3, 8006cb0 <_free_r+0x2c>
 8006ca2:	6063      	str	r3, [r4, #4]
 8006ca4:	6014      	str	r4, [r2, #0]
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cac:	f7ff bf5a 	b.w	8006b64 <__malloc_unlock>
 8006cb0:	42a3      	cmp	r3, r4
 8006cb2:	d908      	bls.n	8006cc6 <_free_r+0x42>
 8006cb4:	6820      	ldr	r0, [r4, #0]
 8006cb6:	1821      	adds	r1, r4, r0
 8006cb8:	428b      	cmp	r3, r1
 8006cba:	bf01      	itttt	eq
 8006cbc:	6819      	ldreq	r1, [r3, #0]
 8006cbe:	685b      	ldreq	r3, [r3, #4]
 8006cc0:	1809      	addeq	r1, r1, r0
 8006cc2:	6021      	streq	r1, [r4, #0]
 8006cc4:	e7ed      	b.n	8006ca2 <_free_r+0x1e>
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	b10b      	cbz	r3, 8006cd0 <_free_r+0x4c>
 8006ccc:	42a3      	cmp	r3, r4
 8006cce:	d9fa      	bls.n	8006cc6 <_free_r+0x42>
 8006cd0:	6811      	ldr	r1, [r2, #0]
 8006cd2:	1850      	adds	r0, r2, r1
 8006cd4:	42a0      	cmp	r0, r4
 8006cd6:	d10b      	bne.n	8006cf0 <_free_r+0x6c>
 8006cd8:	6820      	ldr	r0, [r4, #0]
 8006cda:	4401      	add	r1, r0
 8006cdc:	1850      	adds	r0, r2, r1
 8006cde:	4283      	cmp	r3, r0
 8006ce0:	6011      	str	r1, [r2, #0]
 8006ce2:	d1e0      	bne.n	8006ca6 <_free_r+0x22>
 8006ce4:	6818      	ldr	r0, [r3, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	6053      	str	r3, [r2, #4]
 8006cea:	4408      	add	r0, r1
 8006cec:	6010      	str	r0, [r2, #0]
 8006cee:	e7da      	b.n	8006ca6 <_free_r+0x22>
 8006cf0:	d902      	bls.n	8006cf8 <_free_r+0x74>
 8006cf2:	230c      	movs	r3, #12
 8006cf4:	602b      	str	r3, [r5, #0]
 8006cf6:	e7d6      	b.n	8006ca6 <_free_r+0x22>
 8006cf8:	6820      	ldr	r0, [r4, #0]
 8006cfa:	1821      	adds	r1, r4, r0
 8006cfc:	428b      	cmp	r3, r1
 8006cfe:	bf04      	itt	eq
 8006d00:	6819      	ldreq	r1, [r3, #0]
 8006d02:	685b      	ldreq	r3, [r3, #4]
 8006d04:	6063      	str	r3, [r4, #4]
 8006d06:	bf04      	itt	eq
 8006d08:	1809      	addeq	r1, r1, r0
 8006d0a:	6021      	streq	r1, [r4, #0]
 8006d0c:	6054      	str	r4, [r2, #4]
 8006d0e:	e7ca      	b.n	8006ca6 <_free_r+0x22>
 8006d10:	bd38      	pop	{r3, r4, r5, pc}
 8006d12:	bf00      	nop
 8006d14:	20025e04 	.word	0x20025e04

08006d18 <_init>:
 8006d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1a:	bf00      	nop
 8006d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d1e:	bc08      	pop	{r3}
 8006d20:	469e      	mov	lr, r3
 8006d22:	4770      	bx	lr

08006d24 <_fini>:
 8006d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d26:	bf00      	nop
 8006d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d2a:	bc08      	pop	{r3}
 8006d2c:	469e      	mov	lr, r3
 8006d2e:	4770      	bx	lr
