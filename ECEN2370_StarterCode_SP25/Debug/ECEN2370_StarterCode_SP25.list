
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d14  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001240  08006ec4  08006ec4  00007ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008104  08008104  0000a078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008104  08008104  00009104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800810c  0800810c  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800810c  0800810c  0000910c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008110  08008110  00009110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08008114  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a078  2**0
                  CONTENTS
 10 .bss          00025cb4  20000078  20000078  0000a078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025d2c  20025d2c  0000a078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d3a  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ec3  00000000  00000000  0001cde2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001380  00000000  00000000  0001fca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f0a  00000000  00000000  00021028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026b18  00000000  00000000  00021f32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016e2f  00000000  00000000  00048a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2a53  00000000  00000000  0005f879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001422cc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000594c  00000000  00000000  00142310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a3  00000000  00000000  00147c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006eac 	.word	0x08006eac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08006eac 	.word	0x08006eac

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80005c0:	f002 f84a 	bl	8002658 <initialise_monitor_handles>
    LTCD__Init();
 80005c4:	f000 f94c 	bl	8000860 <LTCD__Init>
    LTCD_Layer_Init(0);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f000 f909 	bl	80007e0 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80005ce:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005d2:	2000      	movs	r0, #0
 80005d4:	f000 fa3a 	bl	8000a4c <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005d8:	f000 fbbc 	bl	8000d54 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005dc:	4b02      	ldr	r3, [pc, #8]	@ (80005e8 <ApplicationInit+0x2c>)
 80005de:	2201      	movs	r2, #1
 80005e0:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000094 	.word	0x20000094

080005ec <LCD_Visual_Demo>:

void LCD_Visual_Demo(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	visualDemo();
 80005f0:	f000 fafe 	bl	8000bf0 <visualDemo>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <LCD_Touch_Polling_Demo>:

#if COMPILE_TOUCH_FUNCTIONS == 1
void LCD_Touch_Polling_Demo(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_GREEN);
 80005fc:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8000600:	2000      	movs	r0, #0
 8000602:	f000 fa23 	bl	8000a4c <LCD_Clear>
	while (1) {
		/* If touch pressed */
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000606:	480f      	ldr	r0, [pc, #60]	@ (8000644 <LCD_Touch_Polling_Demo+0x4c>)
 8000608:	f000 fbaf 	bl	8000d6a <returnTouchStateAndLocation>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d10e      	bne.n	8000630 <LCD_Touch_Polling_Demo+0x38>
			/* Touch valid */
			printf("\nX: %03d\nY: %03d\n", StaticTouchData.x, StaticTouchData.y);
 8000612:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <LCD_Touch_Polling_Demo+0x4c>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	4619      	mov	r1, r3
 8000618:	4b0a      	ldr	r3, [pc, #40]	@ (8000644 <LCD_Touch_Polling_Demo+0x4c>)
 800061a:	885b      	ldrh	r3, [r3, #2]
 800061c:	461a      	mov	r2, r3
 800061e:	480a      	ldr	r0, [pc, #40]	@ (8000648 <LCD_Touch_Polling_Demo+0x50>)
 8000620:	f005 fd7c 	bl	800611c <iprintf>
			LCD_Clear(0, LCD_COLOR_RED);
 8000624:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8000628:	2000      	movs	r0, #0
 800062a:	f000 fa0f 	bl	8000a4c <LCD_Clear>
 800062e:	e7ea      	b.n	8000606 <LCD_Touch_Polling_Demo+0xe>
		} else {
			/* Touch not pressed */
			printf("Not Pressed\n\n");
 8000630:	4806      	ldr	r0, [pc, #24]	@ (800064c <LCD_Touch_Polling_Demo+0x54>)
 8000632:	f005 fddb 	bl	80061ec <puts>
			LCD_Clear(0, LCD_COLOR_GREEN);
 8000636:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800063a:	2000      	movs	r0, #0
 800063c:	f000 fa06 	bl	8000a4c <LCD_Clear>
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000640:	e7e1      	b.n	8000606 <LCD_Touch_Polling_Demo+0xe>
 8000642:	bf00      	nop
 8000644:	20000094 	.word	0x20000094
 8000648:	08006ec4 	.word	0x08006ec4
 800064c:	08006ed8 	.word	0x08006ed8

08000650 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08c      	sub	sp, #48	@ 0x30
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
 800065a:	4b5a      	ldr	r3, [pc, #360]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 800065c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800065e:	4a59      	ldr	r2, [pc, #356]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000660:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000664:	6453      	str	r3, [r2, #68]	@ 0x44
 8000666:	4b57      	ldr	r3, [pc, #348]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800066a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800066e:	61bb      	str	r3, [r7, #24]
 8000670:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
 8000676:	4b53      	ldr	r3, [pc, #332]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	4a52      	ldr	r2, [pc, #328]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6313      	str	r3, [r2, #48]	@ 0x30
 8000682:	4b50      	ldr	r3, [pc, #320]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	4b4c      	ldr	r3, [pc, #304]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a4b      	ldr	r2, [pc, #300]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000698:	f043 0302 	orr.w	r3, r3, #2
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
 800069e:	4b49      	ldr	r3, [pc, #292]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	f003 0302 	and.w	r3, r3, #2
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	4b45      	ldr	r3, [pc, #276]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a44      	ldr	r2, [pc, #272]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b42      	ldr	r3, [pc, #264]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	4b3e      	ldr	r3, [pc, #248]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a3d      	ldr	r2, [pc, #244]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006d0:	f043 0308 	orr.w	r3, r3, #8
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b3b      	ldr	r3, [pc, #236]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b37      	ldr	r3, [pc, #220]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a36      	ldr	r2, [pc, #216]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006ec:	f043 0320 	orr.w	r3, r3, #32
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b34      	ldr	r3, [pc, #208]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0320 	and.w	r3, r3, #32
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b30      	ldr	r3, [pc, #192]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a2f      	ldr	r2, [pc, #188]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b2d      	ldr	r3, [pc, #180]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800071a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800071e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000728:	2302      	movs	r3, #2
 800072a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800072c:	230e      	movs	r3, #14
 800072e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4619      	mov	r1, r3
 8000736:	4824      	ldr	r0, [pc, #144]	@ (80007c8 <LCD_GPIO_Init+0x178>)
 8000738:	f002 f9f0 	bl	8002b1c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800073c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000740:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	4820      	ldr	r0, [pc, #128]	@ (80007cc <LCD_GPIO_Init+0x17c>)
 800074a:	f002 f9e7 	bl	8002b1c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800074e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000752:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4619      	mov	r1, r3
 800075a:	481d      	ldr	r0, [pc, #116]	@ (80007d0 <LCD_GPIO_Init+0x180>)
 800075c:	f002 f9de 	bl	8002b1c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000760:	2348      	movs	r3, #72	@ 0x48
 8000762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4619      	mov	r1, r3
 800076a:	481a      	ldr	r0, [pc, #104]	@ (80007d4 <LCD_GPIO_Init+0x184>)
 800076c:	f002 f9d6 	bl	8002b1c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000770:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	4619      	mov	r1, r3
 800077c:	4816      	ldr	r0, [pc, #88]	@ (80007d8 <LCD_GPIO_Init+0x188>)
 800077e:	f002 f9cd 	bl	8002b1c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000782:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000786:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	4813      	ldr	r0, [pc, #76]	@ (80007dc <LCD_GPIO_Init+0x18c>)
 8000790:	f002 f9c4 	bl	8002b1c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000794:	2303      	movs	r3, #3
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000798:	2309      	movs	r3, #9
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	480a      	ldr	r0, [pc, #40]	@ (80007cc <LCD_GPIO_Init+0x17c>)
 80007a4:	f002 f9ba 	bl	8002b1c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80007a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4619      	mov	r1, r3
 80007b4:	4809      	ldr	r0, [pc, #36]	@ (80007dc <LCD_GPIO_Init+0x18c>)
 80007b6:	f002 f9b1 	bl	8002b1c <HAL_GPIO_Init>
}
 80007ba:	bf00      	nop
 80007bc:	3730      	adds	r7, #48	@ 0x30
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020000 	.word	0x40020000
 80007cc:	40020400 	.word	0x40020400
 80007d0:	40020800 	.word	0x40020800
 80007d4:	40020c00 	.word	0x40020c00
 80007d8:	40021400 	.word	0x40021400
 80007dc:	40021800 	.word	0x40021800

080007e0 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b090      	sub	sp, #64	@ 0x40
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80007ee:	23f0      	movs	r3, #240	@ 0xf0
 80007f0:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80007f6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80007fa:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80007fc:	2302      	movs	r3, #2
 80007fe:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000800:	23ff      	movs	r3, #255	@ 0xff
 8000802:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000808:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800080c:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800080e:	2305      	movs	r3, #5
 8000810:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d101      	bne.n	800081c <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <LTCD_Layer_Init+0x78>)
 800081a:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 800081c:	23f0      	movs	r3, #240	@ 0xf0
 800081e:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000820:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000824:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000838:	79fa      	ldrb	r2, [r7, #7]
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	4619      	mov	r1, r3
 8000840:	4806      	ldr	r0, [pc, #24]	@ (800085c <LTCD_Layer_Init+0x7c>)
 8000842:	f003 fdad 	bl	80043a0 <HAL_LTDC_ConfigLayer>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 800084c:	f000 fa7c 	bl	8000d48 <LCD_Error_Handler>
	}
}
 8000850:	bf00      	nop
 8000852:	3740      	adds	r7, #64	@ 0x40
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000178 	.word	0x20000178
 800085c:	2000009c 	.word	0x2000009c

08000860 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000864:	4b2a      	ldr	r3, [pc, #168]	@ (8000910 <LTCD__Init+0xb0>)
 8000866:	4a2b      	ldr	r2, [pc, #172]	@ (8000914 <LTCD__Init+0xb4>)
 8000868:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800086a:	4b29      	ldr	r3, [pc, #164]	@ (8000910 <LTCD__Init+0xb0>)
 800086c:	2209      	movs	r2, #9
 800086e:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000870:	4b27      	ldr	r3, [pc, #156]	@ (8000910 <LTCD__Init+0xb0>)
 8000872:	2201      	movs	r2, #1
 8000874:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000876:	4b26      	ldr	r3, [pc, #152]	@ (8000910 <LTCD__Init+0xb0>)
 8000878:	221d      	movs	r2, #29
 800087a:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 800087c:	4b24      	ldr	r3, [pc, #144]	@ (8000910 <LTCD__Init+0xb0>)
 800087e:	2203      	movs	r2, #3
 8000880:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000882:	4b23      	ldr	r3, [pc, #140]	@ (8000910 <LTCD__Init+0xb0>)
 8000884:	f240 120d 	movw	r2, #269	@ 0x10d
 8000888:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800088a:	4b21      	ldr	r3, [pc, #132]	@ (8000910 <LTCD__Init+0xb0>)
 800088c:	f240 1243 	movw	r2, #323	@ 0x143
 8000890:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000892:	4b1f      	ldr	r3, [pc, #124]	@ (8000910 <LTCD__Init+0xb0>)
 8000894:	f240 1217 	movw	r2, #279	@ 0x117
 8000898:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800089a:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <LTCD__Init+0xb0>)
 800089c:	f240 1247 	movw	r2, #327	@ 0x147
 80008a0:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80008a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000910 <LTCD__Init+0xb0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80008aa:	4b19      	ldr	r3, [pc, #100]	@ (8000910 <LTCD__Init+0xb0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80008b2:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <LTCD__Init+0xb0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80008ba:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <LTCD__Init+0xb8>)
 80008bc:	2208      	movs	r2, #8
 80008be:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80008c0:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <LTCD__Init+0xb8>)
 80008c2:	22c0      	movs	r2, #192	@ 0xc0
 80008c4:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80008c6:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <LTCD__Init+0xb8>)
 80008c8:	2204      	movs	r2, #4
 80008ca:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80008cc:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <LTCD__Init+0xb8>)
 80008ce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80008d2:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80008d4:	4810      	ldr	r0, [pc, #64]	@ (8000918 <LTCD__Init+0xb8>)
 80008d6:	f004 fbbd 	bl	8005054 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80008da:	4b0d      	ldr	r3, [pc, #52]	@ (8000910 <LTCD__Init+0xb0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <LTCD__Init+0xb0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000910 <LTCD__Init+0xb0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008ec:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <LTCD__Init+0xb0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80008f2:	f7ff fead 	bl	8000650 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008f6:	4806      	ldr	r0, [pc, #24]	@ (8000910 <LTCD__Init+0xb0>)
 80008f8:	f003 fc82 	bl	8004200 <HAL_LTDC_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000902:	f000 fa21 	bl	8000d48 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000906:	f000 fa3c 	bl	8000d82 <ili9341_Init>
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000009c 	.word	0x2000009c
 8000914:	40016800 	.word	0x40016800
 8000918:	20000144 	.word	0x20000144

0800091c <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
 8000926:	460b      	mov	r3, r1
 8000928:	80bb      	strh	r3, [r7, #4]
 800092a:	4613      	mov	r3, r2
 800092c:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 800092e:	88ba      	ldrh	r2, [r7, #4]
 8000930:	4613      	mov	r3, r2
 8000932:	011b      	lsls	r3, r3, #4
 8000934:	1a9b      	subs	r3, r3, r2
 8000936:	011b      	lsls	r3, r3, #4
 8000938:	461a      	mov	r2, r3
 800093a:	88fb      	ldrh	r3, [r7, #6]
 800093c:	4413      	add	r3, r2
 800093e:	4905      	ldr	r1, [pc, #20]	@ (8000954 <LCD_Draw_Pixel+0x38>)
 8000940:	887a      	ldrh	r2, [r7, #2]
 8000942:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000178 	.word	0x20000178

08000958 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	4604      	mov	r4, r0
 8000960:	4608      	mov	r0, r1
 8000962:	4611      	mov	r1, r2
 8000964:	461a      	mov	r2, r3
 8000966:	4623      	mov	r3, r4
 8000968:	80fb      	strh	r3, [r7, #6]
 800096a:	4603      	mov	r3, r0
 800096c:	80bb      	strh	r3, [r7, #4]
 800096e:	460b      	mov	r3, r1
 8000970:	807b      	strh	r3, [r7, #2]
 8000972:	4613      	mov	r3, r2
 8000974:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000976:	887b      	ldrh	r3, [r7, #2]
 8000978:	425b      	negs	r3, r3
 800097a:	b29b      	uxth	r3, r3
 800097c:	81fb      	strh	r3, [r7, #14]
 800097e:	e034      	b.n	80009ea <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000980:	887b      	ldrh	r3, [r7, #2]
 8000982:	425b      	negs	r3, r3
 8000984:	b29b      	uxth	r3, r3
 8000986:	81bb      	strh	r3, [r7, #12]
 8000988:	e024      	b.n	80009d4 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 800098a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800098e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000992:	fb03 f202 	mul.w	r2, r3, r2
 8000996:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800099a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800099e:	fb01 f303 	mul.w	r3, r1, r3
 80009a2:	441a      	add	r2, r3
 80009a4:	887b      	ldrh	r3, [r7, #2]
 80009a6:	8879      	ldrh	r1, [r7, #2]
 80009a8:	fb01 f303 	mul.w	r3, r1, r3
 80009ac:	429a      	cmp	r2, r3
 80009ae:	dc0b      	bgt.n	80009c8 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 80009b0:	89ba      	ldrh	r2, [r7, #12]
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	4413      	add	r3, r2
 80009b6:	b298      	uxth	r0, r3
 80009b8:	89fa      	ldrh	r2, [r7, #14]
 80009ba:	88bb      	ldrh	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	b29b      	uxth	r3, r3
 80009c0:	883a      	ldrh	r2, [r7, #0]
 80009c2:	4619      	mov	r1, r3
 80009c4:	f7ff ffaa 	bl	800091c <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 80009c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	3301      	adds	r3, #1
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	81bb      	strh	r3, [r7, #12]
 80009d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009d8:	887b      	ldrh	r3, [r7, #2]
 80009da:	429a      	cmp	r2, r3
 80009dc:	ddd5      	ble.n	800098a <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 80009de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	3301      	adds	r3, #1
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	81fb      	strh	r3, [r7, #14]
 80009ea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80009ee:	887b      	ldrh	r3, [r7, #2]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	ddc5      	ble.n	8000980 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop
 80009f8:	3714      	adds	r7, #20
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd90      	pop	{r4, r7, pc}

080009fe <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80009fe:	b590      	push	{r4, r7, lr}
 8000a00:	b085      	sub	sp, #20
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4604      	mov	r4, r0
 8000a06:	4608      	mov	r0, r1
 8000a08:	4611      	mov	r1, r2
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	4623      	mov	r3, r4
 8000a0e:	80fb      	strh	r3, [r7, #6]
 8000a10:	4603      	mov	r3, r0
 8000a12:	80bb      	strh	r3, [r7, #4]
 8000a14:	460b      	mov	r3, r1
 8000a16:	807b      	strh	r3, [r7, #2]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	81fb      	strh	r3, [r7, #14]
 8000a20:	e00b      	b.n	8000a3a <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000a22:	89fa      	ldrh	r2, [r7, #14]
 8000a24:	88bb      	ldrh	r3, [r7, #4]
 8000a26:	4413      	add	r3, r2
 8000a28:	b299      	uxth	r1, r3
 8000a2a:	883a      	ldrh	r2, [r7, #0]
 8000a2c:	88fb      	ldrh	r3, [r7, #6]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff ff74 	bl	800091c <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000a34:	89fb      	ldrh	r3, [r7, #14]
 8000a36:	3301      	adds	r3, #1
 8000a38:	81fb      	strh	r3, [r7, #14]
 8000a3a:	89fa      	ldrh	r2, [r7, #14]
 8000a3c:	887b      	ldrh	r3, [r7, #2]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d3ef      	bcc.n	8000a22 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000a42:	bf00      	nop
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd90      	pop	{r4, r7, pc}

08000a4c <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	460a      	mov	r2, r1
 8000a56:	71fb      	strb	r3, [r7, #7]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d10e      	bne.n	8000a80 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	e007      	b.n	8000a78 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000a68:	4908      	ldr	r1, [pc, #32]	@ (8000a8c <LCD_Clear+0x40>)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	88ba      	ldrh	r2, [r7, #4]
 8000a6e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	3301      	adds	r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000a7e:	d3f3      	bcc.n	8000a68 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000a80:	bf00      	nop
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	20000178 	.word	0x20000178

08000a90 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000a9a:	4a04      	ldr	r2, [pc, #16]	@ (8000aac <LCD_SetTextColor+0x1c>)
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	8013      	strh	r3, [r2, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	20000000 	.word	0x20000000

08000ab0 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000ab8:	4a04      	ldr	r2, [pc, #16]	@ (8000acc <LCD_SetFont+0x1c>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000174 	.word	0x20000174

08000ad0 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	603a      	str	r2, [r7, #0]
 8000ada:	80fb      	strh	r3, [r7, #6]
 8000adc:	460b      	mov	r3, r1
 8000ade:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	e04c      	b.n	8000b88 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	e03f      	b.n	8000b74 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	683a      	ldr	r2, [r7, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	4619      	mov	r1, r3
 8000b00:	4b27      	ldr	r3, [pc, #156]	@ (8000ba0 <LCD_Draw_Char+0xd0>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	889b      	ldrh	r3, [r3, #4]
 8000b06:	4a27      	ldr	r2, [pc, #156]	@ (8000ba4 <LCD_Draw_Char+0xd4>)
 8000b08:	fba2 2303 	umull	r2, r3, r2, r3
 8000b0c:	08db      	lsrs	r3, r3, #3
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	00db      	lsls	r3, r3, #3
 8000b12:	2280      	movs	r2, #128	@ 0x80
 8000b14:	409a      	lsls	r2, r3
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	fa42 f303 	asr.w	r3, r2, r3
 8000b1c:	400b      	ands	r3, r1
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d104      	bne.n	8000b2c <LCD_Draw_Char+0x5c>
 8000b22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba0 <LCD_Draw_Char+0xd0>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	889b      	ldrh	r3, [r3, #4]
 8000b28:	2b0c      	cmp	r3, #12
 8000b2a:	d920      	bls.n	8000b6e <LCD_Draw_Char+0x9e>
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	683a      	ldr	r2, [r7, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	fa42 f303 	asr.w	r3, r2, r3
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d104      	bne.n	8000b50 <LCD_Draw_Char+0x80>
 8000b46:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <LCD_Draw_Char+0xd0>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	889b      	ldrh	r3, [r3, #4]
 8000b4c:	2b0c      	cmp	r3, #12
 8000b4e:	d80e      	bhi.n	8000b6e <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	88fb      	ldrh	r3, [r7, #6]
 8000b56:	4413      	add	r3, r2
 8000b58:	b298      	uxth	r0, r3
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	88bb      	ldrh	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	4a10      	ldr	r2, [pc, #64]	@ (8000ba8 <LCD_Draw_Char+0xd8>)
 8000b66:	8812      	ldrh	r2, [r2, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f7ff fed7 	bl	800091c <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	3301      	adds	r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba0 <LCD_Draw_Char+0xd0>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	889b      	ldrh	r3, [r3, #4]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d3b8      	bcc.n	8000af4 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	3301      	adds	r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	4b05      	ldr	r3, [pc, #20]	@ (8000ba0 <LCD_Draw_Char+0xd0>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	88db      	ldrh	r3, [r3, #6]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d3ab      	bcc.n	8000aee <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000b96:	bf00      	nop
 8000b98:	bf00      	nop
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000174 	.word	0x20000174
 8000ba4:	aaaaaaab 	.word	0xaaaaaaab
 8000ba8:	20000000 	.word	0x20000000

08000bac <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	80fb      	strh	r3, [r7, #6]
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	80bb      	strh	r3, [r7, #4]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000bbe:	78fb      	ldrb	r3, [r7, #3]
 8000bc0:	3b20      	subs	r3, #32
 8000bc2:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000bc4:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <LCD_DisplayChar+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	78fb      	ldrb	r3, [r7, #3]
 8000bcc:	4907      	ldr	r1, [pc, #28]	@ (8000bec <LCD_DisplayChar+0x40>)
 8000bce:	6809      	ldr	r1, [r1, #0]
 8000bd0:	88c9      	ldrh	r1, [r1, #6]
 8000bd2:	fb01 f303 	mul.w	r3, r1, r3
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	441a      	add	r2, r3
 8000bda:	88b9      	ldrh	r1, [r7, #4]
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff76 	bl	8000ad0 <LCD_Draw_Char>
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000174 	.word	0x20000174

08000bf0 <visualDemo>:

void visualDemo(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
	uint16_t x;
	uint16_t y;
	// This for loop just illustrates how with using logic and for loops, you can create interesting things
	// this may or not be useful ;)
	for(y=0; y<LCD_PIXEL_HEIGHT; y++){
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	80bb      	strh	r3, [r7, #4]
 8000bfa:	e022      	b.n	8000c42 <visualDemo+0x52>
		for(x=0; x < LCD_PIXEL_WIDTH; x++){
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	80fb      	strh	r3, [r7, #6]
 8000c00:	e019      	b.n	8000c36 <visualDemo+0x46>
			if (x & 32)
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	f003 0320 	and.w	r3, r3, #32
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d009      	beq.n	8000c20 <visualDemo+0x30>
				frameBuffer[x*y] = LCD_COLOR_WHITE;
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
 8000c0e:	88ba      	ldrh	r2, [r7, #4]
 8000c10:	fb02 f303 	mul.w	r3, r2, r3
 8000c14:	4a4a      	ldr	r2, [pc, #296]	@ (8000d40 <visualDemo+0x150>)
 8000c16:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000c1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c1e:	e007      	b.n	8000c30 <visualDemo+0x40>
			else
				frameBuffer[x*y] = LCD_COLOR_BLACK;
 8000c20:	88fb      	ldrh	r3, [r7, #6]
 8000c22:	88ba      	ldrh	r2, [r7, #4]
 8000c24:	fb02 f303 	mul.w	r3, r2, r3
 8000c28:	4a45      	ldr	r2, [pc, #276]	@ (8000d40 <visualDemo+0x150>)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(x=0; x < LCD_PIXEL_WIDTH; x++){
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	3301      	adds	r3, #1
 8000c34:	80fb      	strh	r3, [r7, #6]
 8000c36:	88fb      	ldrh	r3, [r7, #6]
 8000c38:	2bef      	cmp	r3, #239	@ 0xef
 8000c3a:	d9e2      	bls.n	8000c02 <visualDemo+0x12>
	for(y=0; y<LCD_PIXEL_HEIGHT; y++){
 8000c3c:	88bb      	ldrh	r3, [r7, #4]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	80bb      	strh	r3, [r7, #4]
 8000c42:	88bb      	ldrh	r3, [r7, #4]
 8000c44:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000c48:	d3d8      	bcc.n	8000bfc <visualDemo+0xc>
		}
	}

	HAL_Delay(1500);
 8000c4a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000c4e:	f001 fe5b 	bl	8002908 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_GREEN);
 8000c52:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff fef8 	bl	8000a4c <LCD_Clear>
	HAL_Delay(1500);
 8000c5c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000c60:	f001 fe52 	bl	8002908 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_RED);
 8000c64:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f7ff feef 	bl	8000a4c <LCD_Clear>
	HAL_Delay(1500);
 8000c6e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000c72:	f001 fe49 	bl	8002908 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_WHITE);
 8000c76:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f7ff fee6 	bl	8000a4c <LCD_Clear>
	LCD_Draw_Vertical_Line(10,10,250,LCD_COLOR_MAGENTA);
 8000c80:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000c84:	22fa      	movs	r2, #250	@ 0xfa
 8000c86:	210a      	movs	r1, #10
 8000c88:	200a      	movs	r0, #10
 8000c8a:	f7ff feb8 	bl	80009fe <LCD_Draw_Vertical_Line>
	HAL_Delay(1500);
 8000c8e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000c92:	f001 fe39 	bl	8002908 <HAL_Delay>
	LCD_Draw_Vertical_Line(230,10,250,LCD_COLOR_MAGENTA);
 8000c96:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000c9a:	22fa      	movs	r2, #250	@ 0xfa
 8000c9c:	210a      	movs	r1, #10
 8000c9e:	20e6      	movs	r0, #230	@ 0xe6
 8000ca0:	f7ff fead 	bl	80009fe <LCD_Draw_Vertical_Line>
	HAL_Delay(1500);
 8000ca4:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000ca8:	f001 fe2e 	bl	8002908 <HAL_Delay>

	LCD_Draw_Circle_Fill(125,150,20,LCD_COLOR_BLACK);
 8000cac:	2300      	movs	r3, #0
 8000cae:	2214      	movs	r2, #20
 8000cb0:	2196      	movs	r1, #150	@ 0x96
 8000cb2:	207d      	movs	r0, #125	@ 0x7d
 8000cb4:	f7ff fe50 	bl	8000958 <LCD_Draw_Circle_Fill>
	HAL_Delay(2000);
 8000cb8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000cbc:	f001 fe24 	bl	8002908 <HAL_Delay>

	LCD_Clear(0,LCD_COLOR_BLUE);
 8000cc0:	211f      	movs	r1, #31
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f7ff fec2 	bl	8000a4c <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f7ff fee1 	bl	8000a90 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000cce:	481d      	ldr	r0, [pc, #116]	@ (8000d44 <visualDemo+0x154>)
 8000cd0:	f7ff feee 	bl	8000ab0 <LCD_SetFont>

	LCD_DisplayChar(100,140,'H');
 8000cd4:	2248      	movs	r2, #72	@ 0x48
 8000cd6:	218c      	movs	r1, #140	@ 0x8c
 8000cd8:	2064      	movs	r0, #100	@ 0x64
 8000cda:	f7ff ff67 	bl	8000bac <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'e');
 8000cde:	2265      	movs	r2, #101	@ 0x65
 8000ce0:	218c      	movs	r1, #140	@ 0x8c
 8000ce2:	2073      	movs	r0, #115	@ 0x73
 8000ce4:	f7ff ff62 	bl	8000bac <LCD_DisplayChar>
	LCD_DisplayChar(125,140,'l');
 8000ce8:	226c      	movs	r2, #108	@ 0x6c
 8000cea:	218c      	movs	r1, #140	@ 0x8c
 8000cec:	207d      	movs	r0, #125	@ 0x7d
 8000cee:	f7ff ff5d 	bl	8000bac <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'l');
 8000cf2:	226c      	movs	r2, #108	@ 0x6c
 8000cf4:	218c      	movs	r1, #140	@ 0x8c
 8000cf6:	2082      	movs	r0, #130	@ 0x82
 8000cf8:	f7ff ff58 	bl	8000bac <LCD_DisplayChar>
	LCD_DisplayChar(140,140,'o');
 8000cfc:	226f      	movs	r2, #111	@ 0x6f
 8000cfe:	218c      	movs	r1, #140	@ 0x8c
 8000d00:	208c      	movs	r0, #140	@ 0x8c
 8000d02:	f7ff ff53 	bl	8000bac <LCD_DisplayChar>

	LCD_DisplayChar(100,160,'W');
 8000d06:	2257      	movs	r2, #87	@ 0x57
 8000d08:	21a0      	movs	r1, #160	@ 0xa0
 8000d0a:	2064      	movs	r0, #100	@ 0x64
 8000d0c:	f7ff ff4e 	bl	8000bac <LCD_DisplayChar>
	LCD_DisplayChar(115,160,'o');
 8000d10:	226f      	movs	r2, #111	@ 0x6f
 8000d12:	21a0      	movs	r1, #160	@ 0xa0
 8000d14:	2073      	movs	r0, #115	@ 0x73
 8000d16:	f7ff ff49 	bl	8000bac <LCD_DisplayChar>
	LCD_DisplayChar(125,160,'r');
 8000d1a:	2272      	movs	r2, #114	@ 0x72
 8000d1c:	21a0      	movs	r1, #160	@ 0xa0
 8000d1e:	207d      	movs	r0, #125	@ 0x7d
 8000d20:	f7ff ff44 	bl	8000bac <LCD_DisplayChar>
	LCD_DisplayChar(130,160,'l');
 8000d24:	226c      	movs	r2, #108	@ 0x6c
 8000d26:	21a0      	movs	r1, #160	@ 0xa0
 8000d28:	2082      	movs	r0, #130	@ 0x82
 8000d2a:	f7ff ff3f 	bl	8000bac <LCD_DisplayChar>
	LCD_DisplayChar(140,160,'d');
 8000d2e:	2264      	movs	r2, #100	@ 0x64
 8000d30:	21a0      	movs	r1, #160	@ 0xa0
 8000d32:	208c      	movs	r0, #140	@ 0x8c
 8000d34:	f7ff ff3a 	bl	8000bac <LCD_DisplayChar>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000178 	.word	0x20000178
 8000d44:	20000004 	.word	0x20000004

08000d48 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <LCD_Error_Handler+0x8>

08000d54 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000d58:	f001 f933 	bl	8001fc2 <STMPE811_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d001      	beq.n	8000d66 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000d62:	bf00      	nop
 8000d64:	e7fd      	b.n	8000d62 <InitializeLCDTouch+0xe>
  }
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f001 f9dd 	bl	8002132 <STMPE811_ReadTouch>
 8000d78:	4603      	mov	r3, r0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000d86:	f000 f9ff 	bl	8001188 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000d8a:	20ca      	movs	r0, #202	@ 0xca
 8000d8c:	f000 f943 	bl	8001016 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000d90:	20c3      	movs	r0, #195	@ 0xc3
 8000d92:	f000 f94d 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000d96:	2008      	movs	r0, #8
 8000d98:	f000 f94a 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000d9c:	2050      	movs	r0, #80	@ 0x50
 8000d9e:	f000 f947 	bl	8001030 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000da2:	20cf      	movs	r0, #207	@ 0xcf
 8000da4:	f000 f937 	bl	8001016 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000da8:	2000      	movs	r0, #0
 8000daa:	f000 f941 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000dae:	20c1      	movs	r0, #193	@ 0xc1
 8000db0:	f000 f93e 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000db4:	2030      	movs	r0, #48	@ 0x30
 8000db6:	f000 f93b 	bl	8001030 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000dba:	20ed      	movs	r0, #237	@ 0xed
 8000dbc:	f000 f92b 	bl	8001016 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000dc0:	2064      	movs	r0, #100	@ 0x64
 8000dc2:	f000 f935 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000dc6:	2003      	movs	r0, #3
 8000dc8:	f000 f932 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000dcc:	2012      	movs	r0, #18
 8000dce:	f000 f92f 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000dd2:	2081      	movs	r0, #129	@ 0x81
 8000dd4:	f000 f92c 	bl	8001030 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000dd8:	20e8      	movs	r0, #232	@ 0xe8
 8000dda:	f000 f91c 	bl	8001016 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000dde:	2085      	movs	r0, #133	@ 0x85
 8000de0:	f000 f926 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000de4:	2000      	movs	r0, #0
 8000de6:	f000 f923 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000dea:	2078      	movs	r0, #120	@ 0x78
 8000dec:	f000 f920 	bl	8001030 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000df0:	20cb      	movs	r0, #203	@ 0xcb
 8000df2:	f000 f910 	bl	8001016 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000df6:	2039      	movs	r0, #57	@ 0x39
 8000df8:	f000 f91a 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000dfc:	202c      	movs	r0, #44	@ 0x2c
 8000dfe:	f000 f917 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f000 f914 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000e08:	2034      	movs	r0, #52	@ 0x34
 8000e0a:	f000 f911 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f000 f90e 	bl	8001030 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000e14:	20f7      	movs	r0, #247	@ 0xf7
 8000e16:	f000 f8fe 	bl	8001016 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000e1a:	2020      	movs	r0, #32
 8000e1c:	f000 f908 	bl	8001030 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000e20:	20ea      	movs	r0, #234	@ 0xea
 8000e22:	f000 f8f8 	bl	8001016 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000e26:	2000      	movs	r0, #0
 8000e28:	f000 f902 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f000 f8ff 	bl	8001030 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000e32:	20b1      	movs	r0, #177	@ 0xb1
 8000e34:	f000 f8ef 	bl	8001016 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f000 f8f9 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000e3e:	201b      	movs	r0, #27
 8000e40:	f000 f8f6 	bl	8001030 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000e44:	20b6      	movs	r0, #182	@ 0xb6
 8000e46:	f000 f8e6 	bl	8001016 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000e4a:	200a      	movs	r0, #10
 8000e4c:	f000 f8f0 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8000e50:	20a2      	movs	r0, #162	@ 0xa2
 8000e52:	f000 f8ed 	bl	8001030 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8000e56:	20c0      	movs	r0, #192	@ 0xc0
 8000e58:	f000 f8dd 	bl	8001016 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000e5c:	2010      	movs	r0, #16
 8000e5e:	f000 f8e7 	bl	8001030 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8000e62:	20c1      	movs	r0, #193	@ 0xc1
 8000e64:	f000 f8d7 	bl	8001016 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000e68:	2010      	movs	r0, #16
 8000e6a:	f000 f8e1 	bl	8001030 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8000e6e:	20c5      	movs	r0, #197	@ 0xc5
 8000e70:	f000 f8d1 	bl	8001016 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8000e74:	2045      	movs	r0, #69	@ 0x45
 8000e76:	f000 f8db 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8000e7a:	2015      	movs	r0, #21
 8000e7c:	f000 f8d8 	bl	8001030 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8000e80:	20c7      	movs	r0, #199	@ 0xc7
 8000e82:	f000 f8c8 	bl	8001016 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8000e86:	2090      	movs	r0, #144	@ 0x90
 8000e88:	f000 f8d2 	bl	8001030 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8000e8c:	2036      	movs	r0, #54	@ 0x36
 8000e8e:	f000 f8c2 	bl	8001016 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8000e92:	20c8      	movs	r0, #200	@ 0xc8
 8000e94:	f000 f8cc 	bl	8001030 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8000e98:	20f2      	movs	r0, #242	@ 0xf2
 8000e9a:	f000 f8bc 	bl	8001016 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f000 f8c6 	bl	8001030 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8000ea4:	20b0      	movs	r0, #176	@ 0xb0
 8000ea6:	f000 f8b6 	bl	8001016 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8000eaa:	20c2      	movs	r0, #194	@ 0xc2
 8000eac:	f000 f8c0 	bl	8001030 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000eb0:	20b6      	movs	r0, #182	@ 0xb6
 8000eb2:	f000 f8b0 	bl	8001016 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000eb6:	200a      	movs	r0, #10
 8000eb8:	f000 f8ba 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8000ebc:	20a7      	movs	r0, #167	@ 0xa7
 8000ebe:	f000 f8b7 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8000ec2:	2027      	movs	r0, #39	@ 0x27
 8000ec4:	f000 f8b4 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000ec8:	2004      	movs	r0, #4
 8000eca:	f000 f8b1 	bl	8001030 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8000ece:	202a      	movs	r0, #42	@ 0x2a
 8000ed0:	f000 f8a1 	bl	8001016 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f000 f8ab 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 f8a8 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f000 f8a5 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8000ee6:	20ef      	movs	r0, #239	@ 0xef
 8000ee8:	f000 f8a2 	bl	8001030 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8000eec:	202b      	movs	r0, #43	@ 0x2b
 8000eee:	f000 f892 	bl	8001016 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f89c 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f000 f899 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8000efe:	2001      	movs	r0, #1
 8000f00:	f000 f896 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8000f04:	203f      	movs	r0, #63	@ 0x3f
 8000f06:	f000 f893 	bl	8001030 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8000f0a:	20f6      	movs	r0, #246	@ 0xf6
 8000f0c:	f000 f883 	bl	8001016 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000f10:	2001      	movs	r0, #1
 8000f12:	f000 f88d 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000f16:	2000      	movs	r0, #0
 8000f18:	f000 f88a 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8000f1c:	2006      	movs	r0, #6
 8000f1e:	f000 f887 	bl	8001030 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8000f22:	202c      	movs	r0, #44	@ 0x2c
 8000f24:	f000 f877 	bl	8001016 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000f28:	20c8      	movs	r0, #200	@ 0xc8
 8000f2a:	f000 f9e9 	bl	8001300 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8000f2e:	2026      	movs	r0, #38	@ 0x26
 8000f30:	f000 f871 	bl	8001016 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000f34:	2001      	movs	r0, #1
 8000f36:	f000 f87b 	bl	8001030 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8000f3a:	20e0      	movs	r0, #224	@ 0xe0
 8000f3c:	f000 f86b 	bl	8001016 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8000f40:	200f      	movs	r0, #15
 8000f42:	f000 f875 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8000f46:	2029      	movs	r0, #41	@ 0x29
 8000f48:	f000 f872 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8000f4c:	2024      	movs	r0, #36	@ 0x24
 8000f4e:	f000 f86f 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000f52:	200c      	movs	r0, #12
 8000f54:	f000 f86c 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8000f58:	200e      	movs	r0, #14
 8000f5a:	f000 f869 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000f5e:	2009      	movs	r0, #9
 8000f60:	f000 f866 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8000f64:	204e      	movs	r0, #78	@ 0x4e
 8000f66:	f000 f863 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000f6a:	2078      	movs	r0, #120	@ 0x78
 8000f6c:	f000 f860 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8000f70:	203c      	movs	r0, #60	@ 0x3c
 8000f72:	f000 f85d 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000f76:	2009      	movs	r0, #9
 8000f78:	f000 f85a 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8000f7c:	2013      	movs	r0, #19
 8000f7e:	f000 f857 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000f82:	2005      	movs	r0, #5
 8000f84:	f000 f854 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8000f88:	2017      	movs	r0, #23
 8000f8a:	f000 f851 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000f8e:	2011      	movs	r0, #17
 8000f90:	f000 f84e 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000f94:	2000      	movs	r0, #0
 8000f96:	f000 f84b 	bl	8001030 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8000f9a:	20e1      	movs	r0, #225	@ 0xe1
 8000f9c:	f000 f83b 	bl	8001016 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f000 f845 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8000fa6:	2016      	movs	r0, #22
 8000fa8:	f000 f842 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000fac:	201b      	movs	r0, #27
 8000fae:	f000 f83f 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000fb2:	2004      	movs	r0, #4
 8000fb4:	f000 f83c 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000fb8:	2011      	movs	r0, #17
 8000fba:	f000 f839 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8000fbe:	2007      	movs	r0, #7
 8000fc0:	f000 f836 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8000fc4:	2031      	movs	r0, #49	@ 0x31
 8000fc6:	f000 f833 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8000fca:	2033      	movs	r0, #51	@ 0x33
 8000fcc:	f000 f830 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8000fd0:	2042      	movs	r0, #66	@ 0x42
 8000fd2:	f000 f82d 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000fd6:	2005      	movs	r0, #5
 8000fd8:	f000 f82a 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000fdc:	200c      	movs	r0, #12
 8000fde:	f000 f827 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8000fe2:	200a      	movs	r0, #10
 8000fe4:	f000 f824 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8000fe8:	2028      	movs	r0, #40	@ 0x28
 8000fea:	f000 f821 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8000fee:	202f      	movs	r0, #47	@ 0x2f
 8000ff0:	f000 f81e 	bl	8001030 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8000ff4:	200f      	movs	r0, #15
 8000ff6:	f000 f81b 	bl	8001030 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8000ffa:	2011      	movs	r0, #17
 8000ffc:	f000 f80b 	bl	8001016 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001000:	20c8      	movs	r0, #200	@ 0xc8
 8001002:	f000 f97d 	bl	8001300 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001006:	2029      	movs	r0, #41	@ 0x29
 8001008:	f000 f805 	bl	8001016 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800100c:	202c      	movs	r0, #44	@ 0x2c
 800100e:	f000 f802 	bl	8001016 <ili9341_Write_Reg>
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}

08001016 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f94a 	bl	80012bc <LCD_IO_WriteReg>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	4618      	mov	r0, r3
 800103e:	f000 f91b 	bl	8001278 <LCD_IO_WriteData>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001050:	4819      	ldr	r0, [pc, #100]	@ (80010b8 <SPI_Init+0x6c>)
 8001052:	f004 fbde 	bl	8005812 <HAL_SPI_GetState>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d12b      	bne.n	80010b4 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 800105c:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <SPI_Init+0x6c>)
 800105e:	4a17      	ldr	r2, [pc, #92]	@ (80010bc <SPI_Init+0x70>)
 8001060:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <SPI_Init+0x6c>)
 8001064:	2218      	movs	r2, #24
 8001066:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001068:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <SPI_Init+0x6c>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800106e:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <SPI_Init+0x6c>)
 8001070:	2200      	movs	r2, #0
 8001072:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001074:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <SPI_Init+0x6c>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800107a:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <SPI_Init+0x6c>)
 800107c:	2200      	movs	r2, #0
 800107e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001080:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <SPI_Init+0x6c>)
 8001082:	2207      	movs	r2, #7
 8001084:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001086:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <SPI_Init+0x6c>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800108c:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <SPI_Init+0x6c>)
 800108e:	2200      	movs	r2, #0
 8001090:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001092:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <SPI_Init+0x6c>)
 8001094:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001098:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800109a:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <SPI_Init+0x6c>)
 800109c:	2200      	movs	r2, #0
 800109e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80010a0:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <SPI_Init+0x6c>)
 80010a2:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010a6:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80010a8:	4803      	ldr	r0, [pc, #12]	@ (80010b8 <SPI_Init+0x6c>)
 80010aa:	f000 f833 	bl	8001114 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80010ae:	4802      	ldr	r0, [pc, #8]	@ (80010b8 <SPI_Init+0x6c>)
 80010b0:	f004 f9ba 	bl	8005428 <HAL_SPI_Init>
  }
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20025978 	.word	0x20025978
 80010bc:	40015000 	.word	0x40015000

080010c0 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <SPI_Write+0x34>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	1db9      	adds	r1, r7, #6
 80010d4:	2201      	movs	r2, #1
 80010d6:	4808      	ldr	r0, [pc, #32]	@ (80010f8 <SPI_Write+0x38>)
 80010d8:	f004 fa57 	bl	800558a <HAL_SPI_Transmit>
 80010dc:	4603      	mov	r3, r0
 80010de:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80010e6:	f000 f809 	bl	80010fc <SPI_Error>
  }
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000000c 	.word	0x2000000c
 80010f8:	20025978 	.word	0x20025978

080010fc <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001100:	4803      	ldr	r0, [pc, #12]	@ (8001110 <SPI_Error+0x14>)
 8001102:	f004 fa1a 	bl	800553a <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001106:	f7ff ffa1 	bl	800104c <SPI_Init>
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20025978 	.word	0x20025978

08001114 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	@ 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 800111c:	2300      	movs	r3, #0
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <SPI_MspInit+0x6c>)
 8001122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001124:	4a16      	ldr	r2, [pc, #88]	@ (8001180 <SPI_MspInit+0x6c>)
 8001126:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800112a:	6453      	str	r3, [r2, #68]	@ 0x44
 800112c:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <SPI_MspInit+0x6c>)
 800112e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001130:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <SPI_MspInit+0x6c>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001140:	4a0f      	ldr	r2, [pc, #60]	@ (8001180 <SPI_MspInit+0x6c>)
 8001142:	f043 0320 	orr.w	r3, r3, #32
 8001146:	6313      	str	r3, [r2, #48]	@ 0x30
 8001148:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <SPI_MspInit+0x6c>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114c:	f003 0320 	and.w	r3, r3, #32
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001154:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001158:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800115e:	2302      	movs	r3, #2
 8001160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001162:	2301      	movs	r3, #1
 8001164:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001166:	2305      	movs	r3, #5
 8001168:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4804      	ldr	r0, [pc, #16]	@ (8001184 <SPI_MspInit+0x70>)
 8001172:	f001 fcd3 	bl	8002b1c <HAL_GPIO_Init>
}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	@ 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40021400 	.word	0x40021400

08001188 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800118e:	4b36      	ldr	r3, [pc, #216]	@ (8001268 <LCD_IO_Init+0xe0>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d164      	bne.n	8001260 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001196:	4b34      	ldr	r3, [pc, #208]	@ (8001268 <LCD_IO_Init+0xe0>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	4b32      	ldr	r3, [pc, #200]	@ (800126c <LCD_IO_Init+0xe4>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a4:	4a31      	ldr	r2, [pc, #196]	@ (800126c <LCD_IO_Init+0xe4>)
 80011a6:	f043 0308 	orr.w	r3, r3, #8
 80011aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ac:	4b2f      	ldr	r3, [pc, #188]	@ (800126c <LCD_IO_Init+0xe4>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80011b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80011be:	2301      	movs	r3, #1
 80011c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80011c6:	2302      	movs	r3, #2
 80011c8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	4619      	mov	r1, r3
 80011d0:	4827      	ldr	r0, [pc, #156]	@ (8001270 <LCD_IO_Init+0xe8>)
 80011d2:	f001 fca3 	bl	8002b1c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b24      	ldr	r3, [pc, #144]	@ (800126c <LCD_IO_Init+0xe4>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a23      	ldr	r2, [pc, #140]	@ (800126c <LCD_IO_Init+0xe4>)
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b21      	ldr	r3, [pc, #132]	@ (800126c <LCD_IO_Init+0xe4>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80011f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001200:	2302      	movs	r3, #2
 8001202:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	4619      	mov	r1, r3
 800120a:	4819      	ldr	r0, [pc, #100]	@ (8001270 <LCD_IO_Init+0xe8>)
 800120c:	f001 fc86 	bl	8002b1c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	4b15      	ldr	r3, [pc, #84]	@ (800126c <LCD_IO_Init+0xe4>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001218:	4a14      	ldr	r2, [pc, #80]	@ (800126c <LCD_IO_Init+0xe4>)
 800121a:	f043 0304 	orr.w	r3, r3, #4
 800121e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <LCD_IO_Init+0xe4>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800122c:	2304      	movs	r3, #4
 800122e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001238:	2302      	movs	r3, #2
 800123a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	4619      	mov	r1, r3
 8001242:	480c      	ldr	r0, [pc, #48]	@ (8001274 <LCD_IO_Init+0xec>)
 8001244:	f001 fc6a 	bl	8002b1c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001248:	2200      	movs	r2, #0
 800124a:	2104      	movs	r1, #4
 800124c:	4809      	ldr	r0, [pc, #36]	@ (8001274 <LCD_IO_Init+0xec>)
 800124e:	f001 ff1d 	bl	800308c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001252:	2201      	movs	r2, #1
 8001254:	2104      	movs	r1, #4
 8001256:	4807      	ldr	r0, [pc, #28]	@ (8001274 <LCD_IO_Init+0xec>)
 8001258:	f001 ff18 	bl	800308c <HAL_GPIO_WritePin>

    SPI_Init();
 800125c:	f7ff fef6 	bl	800104c <SPI_Init>
  }
}
 8001260:	bf00      	nop
 8001262:	3720      	adds	r7, #32
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	200259d0 	.word	0x200259d0
 800126c:	40023800 	.word	0x40023800
 8001270:	40020c00 	.word	0x40020c00
 8001274:	40020800 	.word	0x40020800

08001278 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001282:	2201      	movs	r2, #1
 8001284:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001288:	480a      	ldr	r0, [pc, #40]	@ (80012b4 <LCD_IO_WriteData+0x3c>)
 800128a:	f001 feff 	bl	800308c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800128e:	2200      	movs	r2, #0
 8001290:	2104      	movs	r1, #4
 8001292:	4809      	ldr	r0, [pc, #36]	@ (80012b8 <LCD_IO_WriteData+0x40>)
 8001294:	f001 fefa 	bl	800308c <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ff10 	bl	80010c0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80012a0:	2201      	movs	r2, #1
 80012a2:	2104      	movs	r1, #4
 80012a4:	4804      	ldr	r0, [pc, #16]	@ (80012b8 <LCD_IO_WriteData+0x40>)
 80012a6:	f001 fef1 	bl	800308c <HAL_GPIO_WritePin>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40020c00 	.word	0x40020c00
 80012b8:	40020800 	.word	0x40020800

080012bc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012cc:	480a      	ldr	r0, [pc, #40]	@ (80012f8 <LCD_IO_WriteReg+0x3c>)
 80012ce:	f001 fedd 	bl	800308c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80012d2:	2200      	movs	r2, #0
 80012d4:	2104      	movs	r1, #4
 80012d6:	4809      	ldr	r0, [pc, #36]	@ (80012fc <LCD_IO_WriteReg+0x40>)
 80012d8:	f001 fed8 	bl	800308c <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff feed 	bl	80010c0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80012e6:	2201      	movs	r2, #1
 80012e8:	2104      	movs	r1, #4
 80012ea:	4804      	ldr	r0, [pc, #16]	@ (80012fc <LCD_IO_WriteReg+0x40>)
 80012ec:	f001 fece 	bl	800308c <HAL_GPIO_WritePin>
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40020c00 	.word	0x40020c00
 80012fc:	40020800 	.word	0x40020800

08001300 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f001 fafd 	bl	8002908 <HAL_Delay>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131a:	f001 fa83 	bl	8002824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131e:	f000 f819 	bl	8001354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001322:	f000 fa09 	bl	8001738 <MX_GPIO_Init>
  MX_LTDC_Init();
 8001326:	f000 f8bf 	bl	80014a8 <MX_LTDC_Init>
  MX_RNG_Init();
 800132a:	f000 f96f 	bl	800160c <MX_RNG_Init>
  MX_TIM2_Init();
 800132e:	f000 f9b7 	bl	80016a0 <MX_TIM2_Init>
  MX_SPI5_Init();
 8001332:	f000 f97f 	bl	8001634 <MX_SPI5_Init>
  MX_I2C3_Init();
 8001336:	f000 f877 	bl	8001428 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 800133a:	f7ff f93f 	bl	80005bc <ApplicationInit>
  LCD_Visual_Demo();
 800133e:	f7ff f955 	bl	80005ec <LCD_Visual_Demo>
  HAL_Delay(5000);
 8001342:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001346:	f001 fadf 	bl	8002908 <HAL_Delay>
  /* USER CODE END 2 */
#if COMPILE_TOUCH_FUNCTIONS == 1 // This block will need to be deleted
  LCD_Touch_Polling_Demo(); // This function Will not return
 800134a:	f7ff f955 	bl	80005f8 <LCD_Touch_Polling_Demo>
#endif
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800134e:	bf00      	nop
 8001350:	e7fd      	b.n	800134e <main+0x38>
	...

08001354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b094      	sub	sp, #80	@ 0x50
 8001358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135a:	f107 0320 	add.w	r3, r7, #32
 800135e:	2230      	movs	r2, #48	@ 0x30
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f004 ff4a 	bl	80061fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	4b28      	ldr	r3, [pc, #160]	@ (8001420 <SystemClock_Config+0xcc>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001380:	4a27      	ldr	r2, [pc, #156]	@ (8001420 <SystemClock_Config+0xcc>)
 8001382:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001386:	6413      	str	r3, [r2, #64]	@ 0x40
 8001388:	4b25      	ldr	r3, [pc, #148]	@ (8001420 <SystemClock_Config+0xcc>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	4b22      	ldr	r3, [pc, #136]	@ (8001424 <SystemClock_Config+0xd0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a21      	ldr	r2, [pc, #132]	@ (8001424 <SystemClock_Config+0xd0>)
 800139e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001424 <SystemClock_Config+0xd0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b0:	2301      	movs	r3, #1
 80013b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ba:	2302      	movs	r3, #2
 80013bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013c4:	2308      	movs	r3, #8
 80013c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013c8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ce:	2302      	movs	r3, #2
 80013d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013d2:	2307      	movs	r3, #7
 80013d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d6:	f107 0320 	add.w	r3, r7, #32
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 f9b6 	bl	800474c <HAL_RCC_OscConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013e6:	f000 fb55 	bl	8001a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ea:	230f      	movs	r3, #15
 80013ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ee:	2302      	movs	r3, #2
 80013f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001400:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	2105      	movs	r1, #5
 8001408:	4618      	mov	r0, r3
 800140a:	f003 fc17 	bl	8004c3c <HAL_RCC_ClockConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001414:	f000 fb3e 	bl	8001a94 <Error_Handler>
  }
}
 8001418:	bf00      	nop
 800141a:	3750      	adds	r7, #80	@ 0x50
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	40007000 	.word	0x40007000

08001428 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800142c:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <MX_I2C3_Init+0x74>)
 800142e:	4a1c      	ldr	r2, [pc, #112]	@ (80014a0 <MX_I2C3_Init+0x78>)
 8001430:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001432:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <MX_I2C3_Init+0x74>)
 8001434:	4a1b      	ldr	r2, [pc, #108]	@ (80014a4 <MX_I2C3_Init+0x7c>)
 8001436:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001438:	4b18      	ldr	r3, [pc, #96]	@ (800149c <MX_I2C3_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800143e:	4b17      	ldr	r3, [pc, #92]	@ (800149c <MX_I2C3_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001444:	4b15      	ldr	r3, [pc, #84]	@ (800149c <MX_I2C3_Init+0x74>)
 8001446:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800144a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800144c:	4b13      	ldr	r3, [pc, #76]	@ (800149c <MX_I2C3_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001452:	4b12      	ldr	r3, [pc, #72]	@ (800149c <MX_I2C3_Init+0x74>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001458:	4b10      	ldr	r3, [pc, #64]	@ (800149c <MX_I2C3_Init+0x74>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800145e:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <MX_I2C3_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001464:	480d      	ldr	r0, [pc, #52]	@ (800149c <MX_I2C3_Init+0x74>)
 8001466:	f001 fe2b 	bl	80030c0 <HAL_I2C_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001470:	f000 fb10 	bl	8001a94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001474:	2100      	movs	r1, #0
 8001476:	4809      	ldr	r0, [pc, #36]	@ (800149c <MX_I2C3_Init+0x74>)
 8001478:	f002 fe46 	bl	8004108 <HAL_I2CEx_ConfigAnalogFilter>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001482:	f000 fb07 	bl	8001a94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001486:	2100      	movs	r1, #0
 8001488:	4804      	ldr	r0, [pc, #16]	@ (800149c <MX_I2C3_Init+0x74>)
 800148a:	f002 fe79 	bl	8004180 <HAL_I2CEx_ConfigDigitalFilter>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001494:	f000 fafe 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200259d4 	.word	0x200259d4
 80014a0:	40005c00 	.word	0x40005c00
 80014a4:	000186a0 	.word	0x000186a0

080014a8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b09a      	sub	sp, #104	@ 0x68
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80014ae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014b2:	2234      	movs	r2, #52	@ 0x34
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f004 fea0 	bl	80061fc <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80014bc:	463b      	mov	r3, r7
 80014be:	2234      	movs	r2, #52	@ 0x34
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f004 fe9a 	bl	80061fc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80014c8:	4b4e      	ldr	r3, [pc, #312]	@ (8001604 <MX_LTDC_Init+0x15c>)
 80014ca:	4a4f      	ldr	r2, [pc, #316]	@ (8001608 <MX_LTDC_Init+0x160>)
 80014cc:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80014ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001604 <MX_LTDC_Init+0x15c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80014d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001604 <MX_LTDC_Init+0x15c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80014da:	4b4a      	ldr	r3, [pc, #296]	@ (8001604 <MX_LTDC_Init+0x15c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80014e0:	4b48      	ldr	r3, [pc, #288]	@ (8001604 <MX_LTDC_Init+0x15c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80014e6:	4b47      	ldr	r3, [pc, #284]	@ (8001604 <MX_LTDC_Init+0x15c>)
 80014e8:	2207      	movs	r2, #7
 80014ea:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80014ec:	4b45      	ldr	r3, [pc, #276]	@ (8001604 <MX_LTDC_Init+0x15c>)
 80014ee:	2203      	movs	r2, #3
 80014f0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80014f2:	4b44      	ldr	r3, [pc, #272]	@ (8001604 <MX_LTDC_Init+0x15c>)
 80014f4:	220e      	movs	r2, #14
 80014f6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80014f8:	4b42      	ldr	r3, [pc, #264]	@ (8001604 <MX_LTDC_Init+0x15c>)
 80014fa:	2205      	movs	r2, #5
 80014fc:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80014fe:	4b41      	ldr	r3, [pc, #260]	@ (8001604 <MX_LTDC_Init+0x15c>)
 8001500:	f240 228e 	movw	r2, #654	@ 0x28e
 8001504:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001506:	4b3f      	ldr	r3, [pc, #252]	@ (8001604 <MX_LTDC_Init+0x15c>)
 8001508:	f240 12e5 	movw	r2, #485	@ 0x1e5
 800150c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 800150e:	4b3d      	ldr	r3, [pc, #244]	@ (8001604 <MX_LTDC_Init+0x15c>)
 8001510:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001514:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001516:	4b3b      	ldr	r3, [pc, #236]	@ (8001604 <MX_LTDC_Init+0x15c>)
 8001518:	f240 12e7 	movw	r2, #487	@ 0x1e7
 800151c:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800151e:	4b39      	ldr	r3, [pc, #228]	@ (8001604 <MX_LTDC_Init+0x15c>)
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001526:	4b37      	ldr	r3, [pc, #220]	@ (8001604 <MX_LTDC_Init+0x15c>)
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800152e:	4b35      	ldr	r3, [pc, #212]	@ (8001604 <MX_LTDC_Init+0x15c>)
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001536:	4833      	ldr	r0, [pc, #204]	@ (8001604 <MX_LTDC_Init+0x15c>)
 8001538:	f002 fe62 	bl	8004200 <HAL_LTDC_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001542:	f000 faa7 	bl	8001a94 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001556:	2300      	movs	r3, #0
 8001558:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001566:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001568:	2305      	movs	r3, #5
 800156a:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800158a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800158e:	2200      	movs	r2, #0
 8001590:	4619      	mov	r1, r3
 8001592:	481c      	ldr	r0, [pc, #112]	@ (8001604 <MX_LTDC_Init+0x15c>)
 8001594:	f002 ff04 	bl	80043a0 <HAL_LTDC_ConfigLayer>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800159e:	f000 fa79 	bl	8001a94 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80015be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015c2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80015c4:	2305      	movs	r3, #5
 80015c6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80015e6:	463b      	mov	r3, r7
 80015e8:	2201      	movs	r2, #1
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	@ (8001604 <MX_LTDC_Init+0x15c>)
 80015ee:	f002 fed7 	bl	80043a0 <HAL_LTDC_ConfigLayer>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80015f8:	f000 fa4c 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	3768      	adds	r7, #104	@ 0x68
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20025a28 	.word	0x20025a28
 8001608:	40016800 	.word	0x40016800

0800160c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001610:	4b06      	ldr	r3, [pc, #24]	@ (800162c <MX_RNG_Init+0x20>)
 8001612:	4a07      	ldr	r2, [pc, #28]	@ (8001630 <MX_RNG_Init+0x24>)
 8001614:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001616:	4805      	ldr	r0, [pc, #20]	@ (800162c <MX_RNG_Init+0x20>)
 8001618:	f003 fedc 	bl	80053d4 <HAL_RNG_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001622:	f000 fa37 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20025ad0 	.word	0x20025ad0
 8001630:	50060800 	.word	0x50060800

08001634 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001638:	4b17      	ldr	r3, [pc, #92]	@ (8001698 <MX_SPI5_Init+0x64>)
 800163a:	4a18      	ldr	r2, [pc, #96]	@ (800169c <MX_SPI5_Init+0x68>)
 800163c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800163e:	4b16      	ldr	r3, [pc, #88]	@ (8001698 <MX_SPI5_Init+0x64>)
 8001640:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001644:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001646:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <MX_SPI5_Init+0x64>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800164c:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <MX_SPI5_Init+0x64>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001652:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <MX_SPI5_Init+0x64>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001658:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <MX_SPI5_Init+0x64>)
 800165a:	2200      	movs	r2, #0
 800165c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800165e:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <MX_SPI5_Init+0x64>)
 8001660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001664:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001666:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <MX_SPI5_Init+0x64>)
 8001668:	2200      	movs	r2, #0
 800166a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800166c:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <MX_SPI5_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001672:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <MX_SPI5_Init+0x64>)
 8001674:	2200      	movs	r2, #0
 8001676:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001678:	4b07      	ldr	r3, [pc, #28]	@ (8001698 <MX_SPI5_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800167e:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <MX_SPI5_Init+0x64>)
 8001680:	220a      	movs	r2, #10
 8001682:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001684:	4804      	ldr	r0, [pc, #16]	@ (8001698 <MX_SPI5_Init+0x64>)
 8001686:	f003 fecf 	bl	8005428 <HAL_SPI_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001690:	f000 fa00 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20025ae0 	.word	0x20025ae0
 800169c:	40015000 	.word	0x40015000

080016a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	463b      	mov	r3, r7
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <MX_TIM2_Init+0x94>)
 80016be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <MX_TIM2_Init+0x94>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001734 <MX_TIM2_Init+0x94>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016d0:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <MX_TIM2_Init+0x94>)
 80016d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d8:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <MX_TIM2_Init+0x94>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <MX_TIM2_Init+0x94>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016e4:	4813      	ldr	r0, [pc, #76]	@ (8001734 <MX_TIM2_Init+0x94>)
 80016e6:	f004 f97f 	bl	80059e8 <HAL_TIM_Base_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016f0:	f000 f9d0 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016fa:	f107 0308 	add.w	r3, r7, #8
 80016fe:	4619      	mov	r1, r3
 8001700:	480c      	ldr	r0, [pc, #48]	@ (8001734 <MX_TIM2_Init+0x94>)
 8001702:	f004 f9c0 	bl	8005a86 <HAL_TIM_ConfigClockSource>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800170c:	f000 f9c2 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001710:	2300      	movs	r3, #0
 8001712:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001718:	463b      	mov	r3, r7
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	@ (8001734 <MX_TIM2_Init+0x94>)
 800171e:	f004 fbbf 	bl	8005ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001728:	f000 f9b4 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20025b38 	.word	0x20025b38

08001738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08e      	sub	sp, #56	@ 0x38
 800173c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
 8001752:	4bb2      	ldr	r3, [pc, #712]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	4ab1      	ldr	r2, [pc, #708]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	6313      	str	r3, [r2, #48]	@ 0x30
 800175e:	4baf      	ldr	r3, [pc, #700]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	623b      	str	r3, [r7, #32]
 8001768:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
 800176e:	4bab      	ldr	r3, [pc, #684]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	4aaa      	ldr	r2, [pc, #680]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 8001774:	f043 0320 	orr.w	r3, r3, #32
 8001778:	6313      	str	r3, [r2, #48]	@ 0x30
 800177a:	4ba8      	ldr	r3, [pc, #672]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	f003 0320 	and.w	r3, r3, #32
 8001782:	61fb      	str	r3, [r7, #28]
 8001784:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
 800178a:	4ba4      	ldr	r3, [pc, #656]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	4aa3      	ldr	r2, [pc, #652]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 8001790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001794:	6313      	str	r3, [r2, #48]	@ 0x30
 8001796:	4ba1      	ldr	r3, [pc, #644]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800179e:	61bb      	str	r3, [r7, #24]
 80017a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	4b9d      	ldr	r3, [pc, #628]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	4a9c      	ldr	r2, [pc, #624]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b2:	4b9a      	ldr	r3, [pc, #616]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b96      	ldr	r3, [pc, #600]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	4a95      	ldr	r2, [pc, #596]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 80017c8:	f043 0302 	orr.w	r3, r3, #2
 80017cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ce:	4b93      	ldr	r3, [pc, #588]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b8f      	ldr	r3, [pc, #572]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a8e      	ldr	r2, [pc, #568]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 80017e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b8c      	ldr	r3, [pc, #560]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	4b88      	ldr	r3, [pc, #544]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a87      	ldr	r2, [pc, #540]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 8001800:	f043 0310 	orr.w	r3, r3, #16
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b85      	ldr	r3, [pc, #532]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b81      	ldr	r3, [pc, #516]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	4a80      	ldr	r2, [pc, #512]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 800181c:	f043 0308 	orr.w	r3, r3, #8
 8001820:	6313      	str	r3, [r2, #48]	@ 0x30
 8001822:	4b7e      	ldr	r3, [pc, #504]	@ (8001a1c <MX_GPIO_Init+0x2e4>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	2116      	movs	r1, #22
 8001832:	487b      	ldr	r0, [pc, #492]	@ (8001a20 <MX_GPIO_Init+0x2e8>)
 8001834:	f001 fc2a 	bl	800308c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001838:	2200      	movs	r2, #0
 800183a:	2180      	movs	r1, #128	@ 0x80
 800183c:	4879      	ldr	r0, [pc, #484]	@ (8001a24 <MX_GPIO_Init+0x2ec>)
 800183e:	f001 fc25 	bl	800308c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001842:	2200      	movs	r2, #0
 8001844:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001848:	4877      	ldr	r0, [pc, #476]	@ (8001a28 <MX_GPIO_Init+0x2f0>)
 800184a:	f001 fc1f 	bl	800308c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001854:	4875      	ldr	r0, [pc, #468]	@ (8001a2c <MX_GPIO_Init+0x2f4>)
 8001856:	f001 fc19 	bl	800308c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800185a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800185e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001868:	2303      	movs	r3, #3
 800186a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800186c:	230c      	movs	r3, #12
 800186e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001870:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001874:	4619      	mov	r1, r3
 8001876:	486e      	ldr	r0, [pc, #440]	@ (8001a30 <MX_GPIO_Init+0x2f8>)
 8001878:	f001 f950 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800187c:	2301      	movs	r3, #1
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800188c:	230c      	movs	r3, #12
 800188e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001890:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001894:	4619      	mov	r1, r3
 8001896:	4862      	ldr	r0, [pc, #392]	@ (8001a20 <MX_GPIO_Init+0x2e8>)
 8001898:	f001 f940 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800189c:	2316      	movs	r3, #22
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b0:	4619      	mov	r1, r3
 80018b2:	485b      	ldr	r0, [pc, #364]	@ (8001a20 <MX_GPIO_Init+0x2e8>)
 80018b4:	f001 f932 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80018b8:	f248 0307 	movw	r3, #32775	@ 0x8007
 80018bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018be:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80018c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018cc:	4619      	mov	r1, r3
 80018ce:	4855      	ldr	r0, [pc, #340]	@ (8001a24 <MX_GPIO_Init+0x2ec>)
 80018d0:	f001 f924 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80018d4:	2380      	movs	r3, #128	@ 0x80
 80018d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d8:	2301      	movs	r3, #1
 80018da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80018e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e8:	4619      	mov	r1, r3
 80018ea:	484e      	ldr	r0, [pc, #312]	@ (8001a24 <MX_GPIO_Init+0x2ec>)
 80018ec:	f001 f916 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80018f0:	2320      	movs	r3, #32
 80018f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018f4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80018f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80018fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001902:	4619      	mov	r1, r3
 8001904:	4846      	ldr	r0, [pc, #280]	@ (8001a20 <MX_GPIO_Init+0x2e8>)
 8001906:	f001 f909 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800190a:	2304      	movs	r3, #4
 800190c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190e:	2300      	movs	r3, #0
 8001910:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800191a:	4619      	mov	r1, r3
 800191c:	4845      	ldr	r0, [pc, #276]	@ (8001a34 <MX_GPIO_Init+0x2fc>)
 800191e:	f001 f8fd 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001922:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001934:	230c      	movs	r3, #12
 8001936:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001938:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800193c:	4619      	mov	r1, r3
 800193e:	483b      	ldr	r0, [pc, #236]	@ (8001a2c <MX_GPIO_Init+0x2f4>)
 8001940:	f001 f8ec 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001944:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001952:	2303      	movs	r3, #3
 8001954:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001956:	230c      	movs	r3, #12
 8001958:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800195a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800195e:	4619      	mov	r1, r3
 8001960:	4835      	ldr	r0, [pc, #212]	@ (8001a38 <MX_GPIO_Init+0x300>)
 8001962:	f001 f8db 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001966:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800196a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001978:	230c      	movs	r3, #12
 800197a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001980:	4619      	mov	r1, r3
 8001982:	482c      	ldr	r0, [pc, #176]	@ (8001a34 <MX_GPIO_Init+0x2fc>)
 8001984:	f001 f8ca 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001988:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800198c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800198e:	2300      	movs	r3, #0
 8001990:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800199a:	4619      	mov	r1, r3
 800199c:	4825      	ldr	r0, [pc, #148]	@ (8001a34 <MX_GPIO_Init+0x2fc>)
 800199e:	f001 f8bd 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80019a2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b0:	2303      	movs	r3, #3
 80019b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019b4:	230c      	movs	r3, #12
 80019b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019bc:	4619      	mov	r1, r3
 80019be:	481a      	ldr	r0, [pc, #104]	@ (8001a28 <MX_GPIO_Init+0x2f0>)
 80019c0:	f001 f8ac 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80019c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80019d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019d6:	4619      	mov	r1, r3
 80019d8:	4813      	ldr	r0, [pc, #76]	@ (8001a28 <MX_GPIO_Init+0x2f0>)
 80019da:	f001 f89f 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80019de:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e4:	2301      	movs	r3, #1
 80019e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ec:	2300      	movs	r3, #0
 80019ee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019f4:	4619      	mov	r1, r3
 80019f6:	480c      	ldr	r0, [pc, #48]	@ (8001a28 <MX_GPIO_Init+0x2f0>)
 80019f8:	f001 f890 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80019fc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a0e:	2307      	movs	r3, #7
 8001a10:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a16:	4619      	mov	r1, r3
 8001a18:	e010      	b.n	8001a3c <MX_GPIO_Init+0x304>
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40020800 	.word	0x40020800
 8001a24:	40020000 	.word	0x40020000
 8001a28:	40020c00 	.word	0x40020c00
 8001a2c:	40021800 	.word	0x40021800
 8001a30:	40021400 	.word	0x40021400
 8001a34:	40020400 	.word	0x40020400
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	4812      	ldr	r0, [pc, #72]	@ (8001a88 <MX_GPIO_Init+0x350>)
 8001a3e:	f001 f86d 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001a42:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001a46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a58:	4619      	mov	r1, r3
 8001a5a:	480c      	ldr	r0, [pc, #48]	@ (8001a8c <MX_GPIO_Init+0x354>)
 8001a5c:	f001 f85e 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001a60:	2360      	movs	r3, #96	@ 0x60
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a70:	230c      	movs	r3, #12
 8001a72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4805      	ldr	r0, [pc, #20]	@ (8001a90 <MX_GPIO_Init+0x358>)
 8001a7c:	f001 f84e 	bl	8002b1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a80:	bf00      	nop
 8001a82:	3738      	adds	r7, #56	@ 0x38
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	40021800 	.word	0x40021800
 8001a90:	40020400 	.word	0x40020400

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
}
 8001a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <Error_Handler+0x8>

08001aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	4b10      	ldr	r3, [pc, #64]	@ (8001aec <HAL_MspInit+0x4c>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	4a0f      	ldr	r2, [pc, #60]	@ (8001aec <HAL_MspInit+0x4c>)
 8001ab0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8001aec <HAL_MspInit+0x4c>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	603b      	str	r3, [r7, #0]
 8001ac6:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <HAL_MspInit+0x4c>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	4a08      	ldr	r2, [pc, #32]	@ (8001aec <HAL_MspInit+0x4c>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad2:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <HAL_MspInit+0x4c>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ade:	2007      	movs	r0, #7
 8001ae0:	f000 ffe8 	bl	8002ab4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40023800 	.word	0x40023800

08001af0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	@ 0x28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a29      	ldr	r2, [pc, #164]	@ (8001bb4 <HAL_I2C_MspInit+0xc4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d14b      	bne.n	8001baa <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	4b28      	ldr	r3, [pc, #160]	@ (8001bb8 <HAL_I2C_MspInit+0xc8>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	4a27      	ldr	r2, [pc, #156]	@ (8001bb8 <HAL_I2C_MspInit+0xc8>)
 8001b1c:	f043 0304 	orr.w	r3, r3, #4
 8001b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b22:	4b25      	ldr	r3, [pc, #148]	@ (8001bb8 <HAL_I2C_MspInit+0xc8>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b21      	ldr	r3, [pc, #132]	@ (8001bb8 <HAL_I2C_MspInit+0xc8>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	4a20      	ldr	r2, [pc, #128]	@ (8001bb8 <HAL_I2C_MspInit+0xc8>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb8 <HAL_I2C_MspInit+0xc8>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001b4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b50:	2312      	movs	r3, #18
 8001b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4619      	mov	r1, r3
 8001b66:	4815      	ldr	r0, [pc, #84]	@ (8001bbc <HAL_I2C_MspInit+0xcc>)
 8001b68:	f000 ffd8 	bl	8002b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001b6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b72:	2312      	movs	r3, #18
 8001b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b7e:	2304      	movs	r3, #4
 8001b80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	480d      	ldr	r0, [pc, #52]	@ (8001bc0 <HAL_I2C_MspInit+0xd0>)
 8001b8a:	f000 ffc7 	bl	8002b1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <HAL_I2C_MspInit+0xc8>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b96:	4a08      	ldr	r2, [pc, #32]	@ (8001bb8 <HAL_I2C_MspInit+0xc8>)
 8001b98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b9e:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_I2C_MspInit+0xc8>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001baa:	bf00      	nop
 8001bac:	3728      	adds	r7, #40	@ 0x28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40005c00 	.word	0x40005c00
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020800 	.word	0x40020800
 8001bc0:	40020000 	.word	0x40020000

08001bc4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b09a      	sub	sp, #104	@ 0x68
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001be0:	2230      	movs	r2, #48	@ 0x30
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f004 fb09 	bl	80061fc <memset>
  if(hltdc->Instance==LTDC)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a81      	ldr	r2, [pc, #516]	@ (8001df4 <HAL_LTDC_MspInit+0x230>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	f040 80fb 	bne.w	8001dec <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001bf6:	2308      	movs	r3, #8
 8001bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8001bfa:	23c8      	movs	r3, #200	@ 0xc8
 8001bfc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8001c02:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001c06:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f003 fa21 	bl	8005054 <HAL_RCCEx_PeriphCLKConfig>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001c18:	f7ff ff3c 	bl	8001a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	623b      	str	r3, [r7, #32]
 8001c20:	4b75      	ldr	r3, [pc, #468]	@ (8001df8 <HAL_LTDC_MspInit+0x234>)
 8001c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c24:	4a74      	ldr	r2, [pc, #464]	@ (8001df8 <HAL_LTDC_MspInit+0x234>)
 8001c26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c2a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c2c:	4b72      	ldr	r3, [pc, #456]	@ (8001df8 <HAL_LTDC_MspInit+0x234>)
 8001c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c34:	623b      	str	r3, [r7, #32]
 8001c36:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61fb      	str	r3, [r7, #28]
 8001c3c:	4b6e      	ldr	r3, [pc, #440]	@ (8001df8 <HAL_LTDC_MspInit+0x234>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c40:	4a6d      	ldr	r2, [pc, #436]	@ (8001df8 <HAL_LTDC_MspInit+0x234>)
 8001c42:	f043 0320 	orr.w	r3, r3, #32
 8001c46:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c48:	4b6b      	ldr	r3, [pc, #428]	@ (8001df8 <HAL_LTDC_MspInit+0x234>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4c:	f003 0320 	and.w	r3, r3, #32
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	2300      	movs	r3, #0
 8001c56:	61bb      	str	r3, [r7, #24]
 8001c58:	4b67      	ldr	r3, [pc, #412]	@ (8001df8 <HAL_LTDC_MspInit+0x234>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5c:	4a66      	ldr	r2, [pc, #408]	@ (8001df8 <HAL_LTDC_MspInit+0x234>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c64:	4b64      	ldr	r3, [pc, #400]	@ (8001df8 <HAL_LTDC_MspInit+0x234>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	4b60      	ldr	r3, [pc, #384]	@ (8001df8 <HAL_LTDC_MspInit+0x234>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c78:	4a5f      	ldr	r2, [pc, #380]	@ (8001df8 <HAL_LTDC_MspInit+0x234>)
 8001c7a:	f043 0302 	orr.w	r3, r3, #2
 8001c7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c80:	4b5d      	ldr	r3, [pc, #372]	@ (8001df8 <HAL_LTDC_MspInit+0x234>)
 8001c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	4b59      	ldr	r3, [pc, #356]	@ (8001df8 <HAL_LTDC_MspInit+0x234>)
 8001c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c94:	4a58      	ldr	r2, [pc, #352]	@ (8001df8 <HAL_LTDC_MspInit+0x234>)
 8001c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9c:	4b56      	ldr	r3, [pc, #344]	@ (8001df8 <HAL_LTDC_MspInit+0x234>)
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	4b52      	ldr	r3, [pc, #328]	@ (8001df8 <HAL_LTDC_MspInit+0x234>)
 8001cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb0:	4a51      	ldr	r2, [pc, #324]	@ (8001df8 <HAL_LTDC_MspInit+0x234>)
 8001cb2:	f043 0304 	orr.w	r3, r3, #4
 8001cb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb8:	4b4f      	ldr	r3, [pc, #316]	@ (8001df8 <HAL_LTDC_MspInit+0x234>)
 8001cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8001df8 <HAL_LTDC_MspInit+0x234>)
 8001cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ccc:	4a4a      	ldr	r2, [pc, #296]	@ (8001df8 <HAL_LTDC_MspInit+0x234>)
 8001cce:	f043 0308 	orr.w	r3, r3, #8
 8001cd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd4:	4b48      	ldr	r3, [pc, #288]	@ (8001df8 <HAL_LTDC_MspInit+0x234>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001ce0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ce4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cf2:	230e      	movs	r3, #14
 8001cf4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001cf6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	483f      	ldr	r0, [pc, #252]	@ (8001dfc <HAL_LTDC_MspInit+0x238>)
 8001cfe:	f000 ff0d 	bl	8002b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001d02:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001d06:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d14:	230e      	movs	r3, #14
 8001d16:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4838      	ldr	r0, [pc, #224]	@ (8001e00 <HAL_LTDC_MspInit+0x23c>)
 8001d20:	f000 fefc 	bl	8002b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001d24:	2303      	movs	r3, #3
 8001d26:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2300      	movs	r3, #0
 8001d32:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d34:	2309      	movs	r3, #9
 8001d36:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4831      	ldr	r0, [pc, #196]	@ (8001e04 <HAL_LTDC_MspInit+0x240>)
 8001d40:	f000 feec 	bl	8002b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001d44:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001d48:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d56:	230e      	movs	r3, #14
 8001d58:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4828      	ldr	r0, [pc, #160]	@ (8001e04 <HAL_LTDC_MspInit+0x240>)
 8001d62:	f000 fedb 	bl	8002b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001d66:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001d6a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d78:	230e      	movs	r3, #14
 8001d7a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d7c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d80:	4619      	mov	r1, r3
 8001d82:	4821      	ldr	r0, [pc, #132]	@ (8001e08 <HAL_LTDC_MspInit+0x244>)
 8001d84:	f000 feca 	bl	8002b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001d88:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001d8c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d9a:	230e      	movs	r3, #14
 8001d9c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001da2:	4619      	mov	r1, r3
 8001da4:	4819      	ldr	r0, [pc, #100]	@ (8001e0c <HAL_LTDC_MspInit+0x248>)
 8001da6:	f000 feb9 	bl	8002b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001daa:	2348      	movs	r3, #72	@ 0x48
 8001dac:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dba:	230e      	movs	r3, #14
 8001dbc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dbe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4812      	ldr	r0, [pc, #72]	@ (8001e10 <HAL_LTDC_MspInit+0x24c>)
 8001dc6:	f000 fea9 	bl	8002b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001dca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001dce:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001ddc:	2309      	movs	r3, #9
 8001dde:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001de0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001de4:	4619      	mov	r1, r3
 8001de6:	4808      	ldr	r0, [pc, #32]	@ (8001e08 <HAL_LTDC_MspInit+0x244>)
 8001de8:	f000 fe98 	bl	8002b1c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001dec:	bf00      	nop
 8001dee:	3768      	adds	r7, #104	@ 0x68
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40016800 	.word	0x40016800
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40021400 	.word	0x40021400
 8001e00:	40020000 	.word	0x40020000
 8001e04:	40020400 	.word	0x40020400
 8001e08:	40021800 	.word	0x40021800
 8001e0c:	40020800 	.word	0x40020800
 8001e10:	40020c00 	.word	0x40020c00

08001e14 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0b      	ldr	r2, [pc, #44]	@ (8001e50 <HAL_RNG_MspInit+0x3c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d10d      	bne.n	8001e42 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e54 <HAL_RNG_MspInit+0x40>)
 8001e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e2e:	4a09      	ldr	r2, [pc, #36]	@ (8001e54 <HAL_RNG_MspInit+0x40>)
 8001e30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e34:	6353      	str	r3, [r2, #52]	@ 0x34
 8001e36:	4b07      	ldr	r3, [pc, #28]	@ (8001e54 <HAL_RNG_MspInit+0x40>)
 8001e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001e42:	bf00      	nop
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	50060800 	.word	0x50060800
 8001e54:	40023800 	.word	0x40023800

08001e58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08a      	sub	sp, #40	@ 0x28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a19      	ldr	r2, [pc, #100]	@ (8001edc <HAL_SPI_MspInit+0x84>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d12c      	bne.n	8001ed4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ee0 <HAL_SPI_MspInit+0x88>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e82:	4a17      	ldr	r2, [pc, #92]	@ (8001ee0 <HAL_SPI_MspInit+0x88>)
 8001e84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ee0 <HAL_SPI_MspInit+0x88>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <HAL_SPI_MspInit+0x88>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	4a10      	ldr	r2, [pc, #64]	@ (8001ee0 <HAL_SPI_MspInit+0x88>)
 8001ea0:	f043 0320 	orr.w	r3, r3, #32
 8001ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <HAL_SPI_MspInit+0x88>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001eb2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001ec4:	2305      	movs	r3, #5
 8001ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4805      	ldr	r0, [pc, #20]	@ (8001ee4 <HAL_SPI_MspInit+0x8c>)
 8001ed0:	f000 fe24 	bl	8002b1c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001ed4:	bf00      	nop
 8001ed6:	3728      	adds	r7, #40	@ 0x28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40015000 	.word	0x40015000
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40021400 	.word	0x40021400

08001ee8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a08      	ldr	r2, [pc, #32]	@ (8001f18 <HAL_SPI_MspDeInit+0x30>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d10a      	bne.n	8001f10 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001efa:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <HAL_SPI_MspDeInit+0x34>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efe:	4a07      	ldr	r2, [pc, #28]	@ (8001f1c <HAL_SPI_MspDeInit+0x34>)
 8001f00:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001f04:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001f06:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001f0a:	4805      	ldr	r0, [pc, #20]	@ (8001f20 <HAL_SPI_MspDeInit+0x38>)
 8001f0c:	f000 ffb2 	bl	8002e74 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001f10:	bf00      	nop
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40015000 	.word	0x40015000
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40021400 	.word	0x40021400

08001f24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f34:	d10d      	bne.n	8001f52 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <HAL_TIM_Base_MspInit+0x3c>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	4a08      	ldr	r2, [pc, #32]	@ (8001f60 <HAL_TIM_Base_MspInit+0x3c>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f46:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <HAL_TIM_Base_MspInit+0x3c>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001f52:	bf00      	nop
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800

08001f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <NMI_Handler+0x4>

08001f6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f70:	bf00      	nop
 8001f72:	e7fd      	b.n	8001f70 <HardFault_Handler+0x4>

08001f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <MemManage_Handler+0x4>

08001f7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <BusFault_Handler+0x4>

08001f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f88:	bf00      	nop
 8001f8a:	e7fd      	b.n	8001f88 <UsageFault_Handler+0x4>

08001f8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fba:	f000 fc85 	bl	80028c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8001fc8:	f000 f9ce 	bl	8002368 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8001fcc:	f000 f98e 	bl	80022ec <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	2103      	movs	r1, #3
 8001fd4:	2082      	movs	r0, #130	@ 0x82
 8001fd6:	f000 fa1b 	bl	8002410 <I2C3_Write>
    HAL_Delay(5);
 8001fda:	2005      	movs	r0, #5
 8001fdc:	f000 fc94 	bl	8002908 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2103      	movs	r1, #3
 8001fe4:	2082      	movs	r0, #130	@ 0x82
 8001fe6:	f000 fa13 	bl	8002410 <I2C3_Write>
    HAL_Delay(2);
 8001fea:	2002      	movs	r0, #2
 8001fec:	f000 fc8c 	bl	8002908 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8001ff0:	1cba      	adds	r2, r7, #2
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	2082      	movs	r0, #130	@ 0x82
 8001ff8:	f000 fa5a 	bl	80024b0 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8001ffc:	887b      	ldrh	r3, [r7, #2]
 8001ffe:	021b      	lsls	r3, r3, #8
 8002000:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002002:	887b      	ldrh	r3, [r7, #2]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	b29a      	uxth	r2, r3
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	4313      	orrs	r3, r2
 800200c:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	f640 0211 	movw	r2, #2065	@ 0x811
 8002014:	4293      	cmp	r3, r2
 8002016:	d001      	beq.n	800201c <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002018:	2303      	movs	r3, #3
 800201a:	e075      	b.n	8002108 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800201c:	2202      	movs	r2, #2
 800201e:	2103      	movs	r1, #3
 8002020:	2082      	movs	r0, #130	@ 0x82
 8002022:	f000 f9f5 	bl	8002410 <I2C3_Write>
    HAL_Delay(5);
 8002026:	2005      	movs	r0, #5
 8002028:	f000 fc6e 	bl	8002908 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800202c:	2200      	movs	r2, #0
 800202e:	2103      	movs	r1, #3
 8002030:	2082      	movs	r0, #130	@ 0x82
 8002032:	f000 f9ed 	bl	8002410 <I2C3_Write>
    HAL_Delay(2);
 8002036:	2002      	movs	r0, #2
 8002038:	f000 fc66 	bl	8002908 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800203c:	2004      	movs	r0, #4
 800203e:	f000 f867 	bl	8002110 <STMPE811_Read>
 8002042:	4603      	mov	r3, r0
 8002044:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002046:	797b      	ldrb	r3, [r7, #5]
 8002048:	f023 0301 	bic.w	r3, r3, #1
 800204c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800204e:	797b      	ldrb	r3, [r7, #5]
 8002050:	461a      	mov	r2, r3
 8002052:	2104      	movs	r1, #4
 8002054:	2082      	movs	r0, #130	@ 0x82
 8002056:	f000 f9db 	bl	8002410 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800205a:	2004      	movs	r0, #4
 800205c:	f000 f858 	bl	8002110 <STMPE811_Read>
 8002060:	4603      	mov	r3, r0
 8002062:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002064:	797b      	ldrb	r3, [r7, #5]
 8002066:	f023 0302 	bic.w	r3, r3, #2
 800206a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800206c:	797b      	ldrb	r3, [r7, #5]
 800206e:	461a      	mov	r2, r3
 8002070:	2104      	movs	r1, #4
 8002072:	2082      	movs	r0, #130	@ 0x82
 8002074:	f000 f9cc 	bl	8002410 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002078:	2249      	movs	r2, #73	@ 0x49
 800207a:	2120      	movs	r1, #32
 800207c:	2082      	movs	r0, #130	@ 0x82
 800207e:	f000 f9c7 	bl	8002410 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002082:	2002      	movs	r0, #2
 8002084:	f000 fc40 	bl	8002908 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002088:	2201      	movs	r2, #1
 800208a:	2121      	movs	r1, #33	@ 0x21
 800208c:	2082      	movs	r0, #130	@ 0x82
 800208e:	f000 f9bf 	bl	8002410 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002092:	2017      	movs	r0, #23
 8002094:	f000 f83c 	bl	8002110 <STMPE811_Read>
 8002098:	4603      	mov	r3, r0
 800209a:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 800209c:	797b      	ldrb	r3, [r7, #5]
 800209e:	f043 031e 	orr.w	r3, r3, #30
 80020a2:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80020a4:	797b      	ldrb	r3, [r7, #5]
 80020a6:	461a      	mov	r2, r3
 80020a8:	2117      	movs	r1, #23
 80020aa:	2082      	movs	r0, #130	@ 0x82
 80020ac:	f000 f9b0 	bl	8002410 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80020b0:	229a      	movs	r2, #154	@ 0x9a
 80020b2:	2141      	movs	r1, #65	@ 0x41
 80020b4:	2082      	movs	r0, #130	@ 0x82
 80020b6:	f000 f9ab 	bl	8002410 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80020ba:	2201      	movs	r2, #1
 80020bc:	214a      	movs	r1, #74	@ 0x4a
 80020be:	2082      	movs	r0, #130	@ 0x82
 80020c0:	f000 f9a6 	bl	8002410 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80020c4:	2201      	movs	r2, #1
 80020c6:	214b      	movs	r1, #75	@ 0x4b
 80020c8:	2082      	movs	r0, #130	@ 0x82
 80020ca:	f000 f9a1 	bl	8002410 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80020ce:	2200      	movs	r2, #0
 80020d0:	214b      	movs	r1, #75	@ 0x4b
 80020d2:	2082      	movs	r0, #130	@ 0x82
 80020d4:	f000 f99c 	bl	8002410 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80020d8:	2201      	movs	r2, #1
 80020da:	2156      	movs	r1, #86	@ 0x56
 80020dc:	2082      	movs	r0, #130	@ 0x82
 80020de:	f000 f997 	bl	8002410 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80020e2:	2201      	movs	r2, #1
 80020e4:	2158      	movs	r1, #88	@ 0x58
 80020e6:	2082      	movs	r0, #130	@ 0x82
 80020e8:	f000 f992 	bl	8002410 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80020ec:	2203      	movs	r2, #3
 80020ee:	2140      	movs	r1, #64	@ 0x40
 80020f0:	2082      	movs	r0, #130	@ 0x82
 80020f2:	f000 f98d 	bl	8002410 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80020f6:	22ff      	movs	r2, #255	@ 0xff
 80020f8:	210b      	movs	r1, #11
 80020fa:	2082      	movs	r0, #130	@ 0x82
 80020fc:	f000 f988 	bl	8002410 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002100:	20c8      	movs	r0, #200	@ 0xc8
 8002102:	f000 fc01 	bl	8002908 <HAL_Delay>

    return STMPE811_State_Ok;
 8002106:	2302      	movs	r3, #2

}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 800211a:	f107 020f 	add.w	r2, r7, #15
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	4619      	mov	r1, r3
 8002122:	2082      	movs	r0, #130	@ 0x82
 8002124:	f000 f99e 	bl	8002464 <I2C3_Read>

    return readData;
 8002128:	7bfb      	ldrb	r3, [r7, #15]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	791a      	ldrb	r2, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002142:	2040      	movs	r0, #64	@ 0x40
 8002144:	f7ff ffe4 	bl	8002110 <STMPE811_Read>
 8002148:	4603      	mov	r3, r0
 800214a:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 800214c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002150:	2b00      	cmp	r3, #0
 8002152:	db0e      	blt.n	8002172 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800215a:	2201      	movs	r2, #1
 800215c:	214b      	movs	r1, #75	@ 0x4b
 800215e:	2082      	movs	r0, #130	@ 0x82
 8002160:	f000 f956 	bl	8002410 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002164:	2200      	movs	r2, #0
 8002166:	214b      	movs	r1, #75	@ 0x4b
 8002168:	2082      	movs	r0, #130	@ 0x82
 800216a:	f000 f951 	bl	8002410 <I2C3_Write>

        return STMPE811_State_Released;
 800216e:	2301      	movs	r3, #1
 8002170:	e0a7      	b.n	80022c2 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	799b      	ldrb	r3, [r3, #6]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d117      	bne.n	80021aa <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f000 f9b8 	bl	80024f4 <TM_STMPE811_ReadX>
 8002184:	4603      	mov	r3, r0
 8002186:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800218a:	b29a      	uxth	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	885b      	ldrh	r3, [r3, #2]
 8002194:	4618      	mov	r0, r3
 8002196:	f000 fa0d 	bl	80025b4 <TM_STMPE811_ReadY>
 800219a:	4603      	mov	r3, r0
 800219c:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80021a0:	3301      	adds	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	805a      	strh	r2, [r3, #2]
 80021a8:	e048      	b.n	800223c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	799b      	ldrb	r3, [r3, #6]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d112      	bne.n	80021d8 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f99c 	bl	80024f4 <TM_STMPE811_ReadX>
 80021bc:	4603      	mov	r3, r0
 80021be:	461a      	mov	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	885b      	ldrh	r3, [r3, #2]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 f9f3 	bl	80025b4 <TM_STMPE811_ReadY>
 80021ce:	4603      	mov	r3, r0
 80021d0:	461a      	mov	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	805a      	strh	r2, [r3, #2]
 80021d6:	e031      	b.n	800223c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	799b      	ldrb	r3, [r3, #6]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d115      	bne.n	800220c <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	885b      	ldrh	r3, [r3, #2]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 f985 	bl	80024f4 <TM_STMPE811_ReadX>
 80021ea:	4603      	mov	r3, r0
 80021ec:	461a      	mov	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f9dc 	bl	80025b4 <TM_STMPE811_ReadY>
 80021fc:	4603      	mov	r3, r0
 80021fe:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002202:	3301      	adds	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	801a      	strh	r2, [r3, #0]
 800220a:	e017      	b.n	800223c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	799b      	ldrb	r3, [r3, #6]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d113      	bne.n	800223c <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f000 f96b 	bl	80024f4 <TM_STMPE811_ReadX>
 800221e:	4603      	mov	r3, r0
 8002220:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002224:	b29a      	uxth	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f000 f9c0 	bl	80025b4 <TM_STMPE811_ReadY>
 8002234:	4603      	mov	r3, r0
 8002236:	461a      	mov	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800223c:	2201      	movs	r2, #1
 800223e:	214b      	movs	r1, #75	@ 0x4b
 8002240:	2082      	movs	r0, #130	@ 0x82
 8002242:	f000 f8e5 	bl	8002410 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002246:	2200      	movs	r2, #0
 8002248:	214b      	movs	r1, #75	@ 0x4b
 800224a:	2082      	movs	r0, #130	@ 0x82
 800224c:	f000 f8e0 	bl	8002410 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	799b      	ldrb	r3, [r3, #6]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <STMPE811_ReadTouch+0x12e>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	799b      	ldrb	r3, [r3, #6]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d115      	bne.n	800228c <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d027      	beq.n	80022b8 <STMPE811_ReadTouch+0x186>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	2bee      	cmp	r3, #238	@ 0xee
 800226e:	d823      	bhi.n	80022b8 <STMPE811_ReadTouch+0x186>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	885b      	ldrh	r3, [r3, #2]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d01f      	beq.n	80022b8 <STMPE811_ReadTouch+0x186>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	885b      	ldrh	r3, [r3, #2]
 800227c:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002280:	d81a      	bhi.n	80022b8 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002288:	2300      	movs	r3, #0
 800228a:	e01a      	b.n	80022c2 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d012      	beq.n	80022ba <STMPE811_ReadTouch+0x188>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 800229c:	d80d      	bhi.n	80022ba <STMPE811_ReadTouch+0x188>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	885b      	ldrh	r3, [r3, #2]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d009      	beq.n	80022ba <STMPE811_ReadTouch+0x188>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	885b      	ldrh	r3, [r3, #2]
 80022aa:	2bee      	cmp	r3, #238	@ 0xee
 80022ac:	d805      	bhi.n	80022ba <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80022b4:	2300      	movs	r3, #0
 80022b6:	e004      	b.n	80022c2 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80022b8:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 80022c0:	2301      	movs	r3, #1
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80022d0:	4b05      	ldr	r3, [pc, #20]	@ (80022e8 <verifyHAL_I2C_IS_OKAY+0x1c>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20025bd4 	.word	0x20025bd4

080022ec <I2C3_Init>:

static void I2C3_Init()
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	603b      	str	r3, [r7, #0]
 80022f6:	4b18      	ldr	r3, [pc, #96]	@ (8002358 <I2C3_Init+0x6c>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	4a17      	ldr	r2, [pc, #92]	@ (8002358 <I2C3_Init+0x6c>)
 80022fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002300:	6413      	str	r3, [r2, #64]	@ 0x40
 8002302:	4b15      	ldr	r3, [pc, #84]	@ (8002358 <I2C3_Init+0x6c>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800230e:	4b13      	ldr	r3, [pc, #76]	@ (800235c <I2C3_Init+0x70>)
 8002310:	4a13      	ldr	r2, [pc, #76]	@ (8002360 <I2C3_Init+0x74>)
 8002312:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002314:	4b11      	ldr	r3, [pc, #68]	@ (800235c <I2C3_Init+0x70>)
 8002316:	4a13      	ldr	r2, [pc, #76]	@ (8002364 <I2C3_Init+0x78>)
 8002318:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800231a:	4b10      	ldr	r3, [pc, #64]	@ (800235c <I2C3_Init+0x70>)
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002320:	4b0e      	ldr	r3, [pc, #56]	@ (800235c <I2C3_Init+0x70>)
 8002322:	2200      	movs	r2, #0
 8002324:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002326:	4b0d      	ldr	r3, [pc, #52]	@ (800235c <I2C3_Init+0x70>)
 8002328:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800232c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800232e:	4b0b      	ldr	r3, [pc, #44]	@ (800235c <I2C3_Init+0x70>)
 8002330:	2200      	movs	r2, #0
 8002332:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002334:	4b09      	ldr	r3, [pc, #36]	@ (800235c <I2C3_Init+0x70>)
 8002336:	2200      	movs	r2, #0
 8002338:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800233a:	4808      	ldr	r0, [pc, #32]	@ (800235c <I2C3_Init+0x70>)
 800233c:	f000 fec0 	bl	80030c0 <HAL_I2C_Init>
 8002340:	4603      	mov	r3, r0
 8002342:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800234a:	bf00      	nop
 800234c:	e7fd      	b.n	800234a <I2C3_Init+0x5e>
    }
    return;
 800234e:	bf00      	nop
}
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	20025b80 	.word	0x20025b80
 8002360:	40005c00 	.word	0x40005c00
 8002364:	000186a0 	.word	0x000186a0

08002368 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236e:	f107 030c 	add.w	r3, r7, #12
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	60da      	str	r2, [r3, #12]
 800237c:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	4b20      	ldr	r3, [pc, #128]	@ (8002404 <I2C3_MspInit+0x9c>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002386:	4a1f      	ldr	r2, [pc, #124]	@ (8002404 <I2C3_MspInit+0x9c>)
 8002388:	f043 0304 	orr.w	r3, r3, #4
 800238c:	6313      	str	r3, [r2, #48]	@ 0x30
 800238e:	4b1d      	ldr	r3, [pc, #116]	@ (8002404 <I2C3_MspInit+0x9c>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	607b      	str	r3, [r7, #4]
 800239e:	4b19      	ldr	r3, [pc, #100]	@ (8002404 <I2C3_MspInit+0x9c>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	4a18      	ldr	r2, [pc, #96]	@ (8002404 <I2C3_MspInit+0x9c>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023aa:	4b16      	ldr	r3, [pc, #88]	@ (8002404 <I2C3_MspInit+0x9c>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80023b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023bc:	2312      	movs	r3, #18
 80023be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023c8:	2304      	movs	r3, #4
 80023ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80023cc:	f107 030c 	add.w	r3, r7, #12
 80023d0:	4619      	mov	r1, r3
 80023d2:	480d      	ldr	r0, [pc, #52]	@ (8002408 <I2C3_MspInit+0xa0>)
 80023d4:	f000 fba2 	bl	8002b1c <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80023d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023de:	2312      	movs	r3, #18
 80023e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023ea:	2304      	movs	r3, #4
 80023ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80023ee:	f107 030c 	add.w	r3, r7, #12
 80023f2:	4619      	mov	r1, r3
 80023f4:	4805      	ldr	r0, [pc, #20]	@ (800240c <I2C3_MspInit+0xa4>)
 80023f6:	f000 fb91 	bl	8002b1c <HAL_GPIO_Init>
    
}
 80023fa:	bf00      	nop
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800
 8002408:	40020800 	.word	0x40020800
 800240c:	40020000 	.word	0x40020000

08002410 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af04      	add	r7, sp, #16
 8002416:	4603      	mov	r3, r0
 8002418:	80fb      	strh	r3, [r7, #6]
 800241a:	460b      	mov	r3, r1
 800241c:	717b      	strb	r3, [r7, #5]
 800241e:	4613      	mov	r3, r2
 8002420:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002422:	793b      	ldrb	r3, [r7, #4]
 8002424:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002426:	797b      	ldrb	r3, [r7, #5]
 8002428:	b29a      	uxth	r2, r3
 800242a:	88f9      	ldrh	r1, [r7, #6]
 800242c:	4b0a      	ldr	r3, [pc, #40]	@ (8002458 <I2C3_Write+0x48>)
 800242e:	9302      	str	r3, [sp, #8]
 8002430:	2301      	movs	r3, #1
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	f107 030f 	add.w	r3, r7, #15
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	2301      	movs	r3, #1
 800243c:	4807      	ldr	r0, [pc, #28]	@ (800245c <I2C3_Write+0x4c>)
 800243e:	f000 ff83 	bl	8003348 <HAL_I2C_Mem_Write>
 8002442:	4603      	mov	r3, r0
 8002444:	461a      	mov	r2, r3
 8002446:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <I2C3_Write+0x50>)
 8002448:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800244a:	f7ff ff3f 	bl	80022cc <verifyHAL_I2C_IS_OKAY>
}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	0003d090 	.word	0x0003d090
 800245c:	20025b80 	.word	0x20025b80
 8002460:	20025bd4 	.word	0x20025bd4

08002464 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af04      	add	r7, sp, #16
 800246a:	4603      	mov	r3, r0
 800246c:	603a      	str	r2, [r7, #0]
 800246e:	71fb      	strb	r3, [r7, #7]
 8002470:	460b      	mov	r3, r1
 8002472:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	b299      	uxth	r1, r3
 8002478:	79bb      	ldrb	r3, [r7, #6]
 800247a:	b29a      	uxth	r2, r3
 800247c:	4b09      	ldr	r3, [pc, #36]	@ (80024a4 <I2C3_Read+0x40>)
 800247e:	9302      	str	r3, [sp, #8]
 8002480:	2301      	movs	r3, #1
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	2301      	movs	r3, #1
 800248a:	4807      	ldr	r0, [pc, #28]	@ (80024a8 <I2C3_Read+0x44>)
 800248c:	f001 f856 	bl	800353c <HAL_I2C_Mem_Read>
 8002490:	4603      	mov	r3, r0
 8002492:	461a      	mov	r2, r3
 8002494:	4b05      	ldr	r3, [pc, #20]	@ (80024ac <I2C3_Read+0x48>)
 8002496:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002498:	f7ff ff18 	bl	80022cc <verifyHAL_I2C_IS_OKAY>
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	0003d090 	.word	0x0003d090
 80024a8:	20025b80 	.word	0x20025b80
 80024ac:	20025bd4 	.word	0x20025bd4

080024b0 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af04      	add	r7, sp, #16
 80024b6:	603a      	str	r2, [r7, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
 80024be:	460b      	mov	r3, r1
 80024c0:	71bb      	strb	r3, [r7, #6]
 80024c2:	4613      	mov	r3, r2
 80024c4:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	b299      	uxth	r1, r3
 80024ca:	79bb      	ldrb	r3, [r7, #6]
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	4b07      	ldr	r3, [pc, #28]	@ (80024ec <I2C3_MulitByteRead+0x3c>)
 80024d0:	9302      	str	r3, [sp, #8]
 80024d2:	88bb      	ldrh	r3, [r7, #4]
 80024d4:	9301      	str	r3, [sp, #4]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	2301      	movs	r3, #1
 80024dc:	4804      	ldr	r0, [pc, #16]	@ (80024f0 <I2C3_MulitByteRead+0x40>)
 80024de:	f001 f82d 	bl	800353c <HAL_I2C_Mem_Read>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	0003d090 	.word	0x0003d090
 80024f0:	20025b80 	.word	0x20025b80

080024f4 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80024fe:	204d      	movs	r0, #77	@ 0x4d
 8002500:	f7ff fe06 	bl	8002110 <STMPE811_Read>
 8002504:	4603      	mov	r3, r0
 8002506:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002508:	204e      	movs	r0, #78	@ 0x4e
 800250a:	f7ff fe01 	bl	8002110 <STMPE811_Read>
 800250e:	4603      	mov	r3, r0
 8002510:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002512:	7a7b      	ldrb	r3, [r7, #9]
 8002514:	b21b      	sxth	r3, r3
 8002516:	021b      	lsls	r3, r3, #8
 8002518:	b21a      	sxth	r2, r3
 800251a:	7a3b      	ldrb	r3, [r7, #8]
 800251c:	b21b      	sxth	r3, r3
 800251e:	4313      	orrs	r3, r2
 8002520:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002522:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002526:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800252a:	4293      	cmp	r3, r2
 800252c:	dc06      	bgt.n	800253c <TM_STMPE811_ReadX+0x48>
        val = 3900 - val;
 800252e:	89fb      	ldrh	r3, [r7, #14]
 8002530:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002534:	330c      	adds	r3, #12
 8002536:	b29b      	uxth	r3, r3
 8002538:	81fb      	strh	r3, [r7, #14]
 800253a:	e005      	b.n	8002548 <TM_STMPE811_ReadX+0x54>
    } else {
        val = 3800 - val;
 800253c:	89fb      	ldrh	r3, [r7, #14]
 800253e:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002542:	3308      	adds	r3, #8
 8002544:	b29b      	uxth	r3, r3
 8002546:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002548:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800254c:	4a18      	ldr	r2, [pc, #96]	@ (80025b0 <TM_STMPE811_ReadX+0xbc>)
 800254e:	fb82 1203 	smull	r1, r2, r2, r3
 8002552:	441a      	add	r2, r3
 8002554:	10d2      	asrs	r2, r2, #3
 8002556:	17db      	asrs	r3, r3, #31
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 800255c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002560:	2bef      	cmp	r3, #239	@ 0xef
 8002562:	dd02      	ble.n	800256a <TM_STMPE811_ReadX+0x76>
        val = 239;
 8002564:	23ef      	movs	r3, #239	@ 0xef
 8002566:	81fb      	strh	r3, [r7, #14]
 8002568:	e005      	b.n	8002576 <TM_STMPE811_ReadX+0x82>
    } else if (val < 0) {
 800256a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800256e:	2b00      	cmp	r3, #0
 8002570:	da01      	bge.n	8002576 <TM_STMPE811_ReadX+0x82>
        val = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002576:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800257a:	88fb      	ldrh	r3, [r7, #6]
 800257c:	429a      	cmp	r2, r3
 800257e:	dd05      	ble.n	800258c <TM_STMPE811_ReadX+0x98>
 8002580:	89fa      	ldrh	r2, [r7, #14]
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	b29b      	uxth	r3, r3
 8002588:	b21b      	sxth	r3, r3
 800258a:	e004      	b.n	8002596 <TM_STMPE811_ReadX+0xa2>
 800258c:	89fb      	ldrh	r3, [r7, #14]
 800258e:	88fa      	ldrh	r2, [r7, #6]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	b29b      	uxth	r3, r3
 8002594:	b21b      	sxth	r3, r3
 8002596:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002598:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800259c:	2b04      	cmp	r3, #4
 800259e:	dd01      	ble.n	80025a4 <TM_STMPE811_ReadX+0xb0>
        return val;
 80025a0:	89fb      	ldrh	r3, [r7, #14]
 80025a2:	e000      	b.n	80025a6 <TM_STMPE811_ReadX+0xb2>
    }
    return x;
 80025a4:	88fb      	ldrh	r3, [r7, #6]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	88888889 	.word	0x88888889

080025b4 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80025be:	204f      	movs	r0, #79	@ 0x4f
 80025c0:	f7ff fda6 	bl	8002110 <STMPE811_Read>
 80025c4:	4603      	mov	r3, r0
 80025c6:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 80025c8:	2050      	movs	r0, #80	@ 0x50
 80025ca:	f7ff fda1 	bl	8002110 <STMPE811_Read>
 80025ce:	4603      	mov	r3, r0
 80025d0:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80025d2:	7a7b      	ldrb	r3, [r7, #9]
 80025d4:	b21b      	sxth	r3, r3
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	b21a      	sxth	r2, r3
 80025da:	7a3b      	ldrb	r3, [r7, #8]
 80025dc:	b21b      	sxth	r3, r3
 80025de:	4313      	orrs	r3, r2
 80025e0:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80025e2:	89fb      	ldrh	r3, [r7, #14]
 80025e4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 80025ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025f0:	4a18      	ldr	r2, [pc, #96]	@ (8002654 <TM_STMPE811_ReadY+0xa0>)
 80025f2:	fb82 1203 	smull	r1, r2, r2, r3
 80025f6:	1052      	asrs	r2, r2, #1
 80025f8:	17db      	asrs	r3, r3, #31
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 80025fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002602:	2b00      	cmp	r3, #0
 8002604:	dc02      	bgt.n	800260c <TM_STMPE811_ReadY+0x58>
        val = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	81fb      	strh	r3, [r7, #14]
 800260a:	e007      	b.n	800261c <TM_STMPE811_ReadY+0x68>
    } else if (val >= 320) {
 800260c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002610:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002614:	db02      	blt.n	800261c <TM_STMPE811_ReadY+0x68>
        val = 319;
 8002616:	f240 133f 	movw	r3, #319	@ 0x13f
 800261a:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 800261c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	429a      	cmp	r2, r3
 8002624:	dd05      	ble.n	8002632 <TM_STMPE811_ReadY+0x7e>
 8002626:	89fa      	ldrh	r2, [r7, #14]
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	b29b      	uxth	r3, r3
 800262e:	b21b      	sxth	r3, r3
 8002630:	e004      	b.n	800263c <TM_STMPE811_ReadY+0x88>
 8002632:	89fb      	ldrh	r3, [r7, #14]
 8002634:	88fa      	ldrh	r2, [r7, #6]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	b29b      	uxth	r3, r3
 800263a:	b21b      	sxth	r3, r3
 800263c:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 800263e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002642:	2b04      	cmp	r3, #4
 8002644:	dd01      	ble.n	800264a <TM_STMPE811_ReadY+0x96>
        return val;
 8002646:	89fb      	ldrh	r3, [r7, #14]
 8002648:	e000      	b.n	800264c <TM_STMPE811_ReadY+0x98>
    }
    return y;
 800264a:	88fb      	ldrh	r3, [r7, #6]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	2e8ba2e9 	.word	0x2e8ba2e9

08002658 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b086      	sub	sp, #24
 800266a:	af00      	add	r7, sp, #0
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	e00a      	b.n	800268e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002678:	f3af 8000 	nop.w
 800267c:	4601      	mov	r1, r0
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	60ba      	str	r2, [r7, #8]
 8002684:	b2ca      	uxtb	r2, r1
 8002686:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	3301      	adds	r3, #1
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	429a      	cmp	r2, r3
 8002694:	dbf0      	blt.n	8002678 <_read+0x12>
  }

  return len;
 8002696:	687b      	ldr	r3, [r7, #4]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	e009      	b.n	80026c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	60ba      	str	r2, [r7, #8]
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	3301      	adds	r3, #1
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	dbf1      	blt.n	80026b2 <_write+0x12>
  }
  return len;
 80026ce:	687b      	ldr	r3, [r7, #4]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <_close>:

int _close(int file)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002700:	605a      	str	r2, [r3, #4]
  return 0;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <_isatty>:

int _isatty(int file)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002718:	2301      	movs	r3, #1
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002726:	b480      	push	{r7}
 8002728:	b085      	sub	sp, #20
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002748:	4a14      	ldr	r2, [pc, #80]	@ (800279c <_sbrk+0x5c>)
 800274a:	4b15      	ldr	r3, [pc, #84]	@ (80027a0 <_sbrk+0x60>)
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002754:	4b13      	ldr	r3, [pc, #76]	@ (80027a4 <_sbrk+0x64>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800275c:	4b11      	ldr	r3, [pc, #68]	@ (80027a4 <_sbrk+0x64>)
 800275e:	4a12      	ldr	r2, [pc, #72]	@ (80027a8 <_sbrk+0x68>)
 8002760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002762:	4b10      	ldr	r3, [pc, #64]	@ (80027a4 <_sbrk+0x64>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	429a      	cmp	r2, r3
 800276e:	d207      	bcs.n	8002780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002770:	f003 fd4c 	bl	800620c <__errno>
 8002774:	4603      	mov	r3, r0
 8002776:	220c      	movs	r2, #12
 8002778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800277a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800277e:	e009      	b.n	8002794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002780:	4b08      	ldr	r3, [pc, #32]	@ (80027a4 <_sbrk+0x64>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002786:	4b07      	ldr	r3, [pc, #28]	@ (80027a4 <_sbrk+0x64>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	4a05      	ldr	r2, [pc, #20]	@ (80027a4 <_sbrk+0x64>)
 8002790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002792:	68fb      	ldr	r3, [r7, #12]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20030000 	.word	0x20030000
 80027a0:	00000400 	.word	0x00000400
 80027a4:	20025bd8 	.word	0x20025bd8
 80027a8:	20025d30 	.word	0x20025d30

080027ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027b0:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <SystemInit+0x20>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b6:	4a05      	ldr	r2, [pc, #20]	@ (80027cc <SystemInit+0x20>)
 80027b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80027d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002808 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027d4:	f7ff ffea 	bl	80027ac <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027d8:	480c      	ldr	r0, [pc, #48]	@ (800280c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027da:	490d      	ldr	r1, [pc, #52]	@ (8002810 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002814 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027e0:	e002      	b.n	80027e8 <LoopCopyDataInit>

080027e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027e6:	3304      	adds	r3, #4

080027e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027ec:	d3f9      	bcc.n	80027e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002818 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027f0:	4c0a      	ldr	r4, [pc, #40]	@ (800281c <LoopFillZerobss+0x22>)
  movs r3, #0
 80027f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f4:	e001      	b.n	80027fa <LoopFillZerobss>

080027f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027f8:	3204      	adds	r2, #4

080027fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027fc:	d3fb      	bcc.n	80027f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80027fe:	f003 fd0b 	bl	8006218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002802:	f7fe fd88 	bl	8001316 <main>
  bx  lr    
 8002806:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002808:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800280c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002810:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002814:	08008114 	.word	0x08008114
  ldr r2, =_sbss
 8002818:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800281c:	20025d2c 	.word	0x20025d2c

08002820 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002820:	e7fe      	b.n	8002820 <ADC_IRQHandler>
	...

08002824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002828:	4b0e      	ldr	r3, [pc, #56]	@ (8002864 <HAL_Init+0x40>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0d      	ldr	r2, [pc, #52]	@ (8002864 <HAL_Init+0x40>)
 800282e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002832:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002834:	4b0b      	ldr	r3, [pc, #44]	@ (8002864 <HAL_Init+0x40>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a0a      	ldr	r2, [pc, #40]	@ (8002864 <HAL_Init+0x40>)
 800283a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800283e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002840:	4b08      	ldr	r3, [pc, #32]	@ (8002864 <HAL_Init+0x40>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a07      	ldr	r2, [pc, #28]	@ (8002864 <HAL_Init+0x40>)
 8002846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800284a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800284c:	2003      	movs	r0, #3
 800284e:	f000 f931 	bl	8002ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002852:	2000      	movs	r0, #0
 8002854:	f000 f808 	bl	8002868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002858:	f7ff f922 	bl	8001aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023c00 	.word	0x40023c00

08002868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002870:	4b12      	ldr	r3, [pc, #72]	@ (80028bc <HAL_InitTick+0x54>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b12      	ldr	r3, [pc, #72]	@ (80028c0 <HAL_InitTick+0x58>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	4619      	mov	r1, r3
 800287a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800287e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002882:	fbb2 f3f3 	udiv	r3, r2, r3
 8002886:	4618      	mov	r0, r3
 8002888:	f000 f93b 	bl	8002b02 <HAL_SYSTICK_Config>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e00e      	b.n	80028b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b0f      	cmp	r3, #15
 800289a:	d80a      	bhi.n	80028b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800289c:	2200      	movs	r2, #0
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028a4:	f000 f911 	bl	8002aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028a8:	4a06      	ldr	r2, [pc, #24]	@ (80028c4 <HAL_InitTick+0x5c>)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e000      	b.n	80028b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20000010 	.word	0x20000010
 80028c0:	20000018 	.word	0x20000018
 80028c4:	20000014 	.word	0x20000014

080028c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028cc:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <HAL_IncTick+0x20>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	4b06      	ldr	r3, [pc, #24]	@ (80028ec <HAL_IncTick+0x24>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4413      	add	r3, r2
 80028d8:	4a04      	ldr	r2, [pc, #16]	@ (80028ec <HAL_IncTick+0x24>)
 80028da:	6013      	str	r3, [r2, #0]
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	20000018 	.word	0x20000018
 80028ec:	20025bdc 	.word	0x20025bdc

080028f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return uwTick;
 80028f4:	4b03      	ldr	r3, [pc, #12]	@ (8002904 <HAL_GetTick+0x14>)
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20025bdc 	.word	0x20025bdc

08002908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002910:	f7ff ffee 	bl	80028f0 <HAL_GetTick>
 8002914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002920:	d005      	beq.n	800292e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002922:	4b0a      	ldr	r3, [pc, #40]	@ (800294c <HAL_Delay+0x44>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800292e:	bf00      	nop
 8002930:	f7ff ffde 	bl	80028f0 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	429a      	cmp	r2, r3
 800293e:	d8f7      	bhi.n	8002930 <HAL_Delay+0x28>
  {
  }
}
 8002940:	bf00      	nop
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000018 	.word	0x20000018

08002950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002960:	4b0c      	ldr	r3, [pc, #48]	@ (8002994 <__NVIC_SetPriorityGrouping+0x44>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800296c:	4013      	ands	r3, r2
 800296e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002978:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800297c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002982:	4a04      	ldr	r2, [pc, #16]	@ (8002994 <__NVIC_SetPriorityGrouping+0x44>)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	60d3      	str	r3, [r2, #12]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800299c:	4b04      	ldr	r3, [pc, #16]	@ (80029b0 <__NVIC_GetPriorityGrouping+0x18>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	0a1b      	lsrs	r3, r3, #8
 80029a2:	f003 0307 	and.w	r3, r3, #7
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	6039      	str	r1, [r7, #0]
 80029be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	db0a      	blt.n	80029de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	490c      	ldr	r1, [pc, #48]	@ (8002a00 <__NVIC_SetPriority+0x4c>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	0112      	lsls	r2, r2, #4
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	440b      	add	r3, r1
 80029d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029dc:	e00a      	b.n	80029f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4908      	ldr	r1, [pc, #32]	@ (8002a04 <__NVIC_SetPriority+0x50>)
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	3b04      	subs	r3, #4
 80029ec:	0112      	lsls	r2, r2, #4
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	440b      	add	r3, r1
 80029f2:	761a      	strb	r2, [r3, #24]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	e000e100 	.word	0xe000e100
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b089      	sub	sp, #36	@ 0x24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f1c3 0307 	rsb	r3, r3, #7
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	bf28      	it	cs
 8002a26:	2304      	movcs	r3, #4
 8002a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	d902      	bls.n	8002a38 <NVIC_EncodePriority+0x30>
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3b03      	subs	r3, #3
 8002a36:	e000      	b.n	8002a3a <NVIC_EncodePriority+0x32>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43da      	mvns	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5a:	43d9      	mvns	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	4313      	orrs	r3, r2
         );
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3724      	adds	r7, #36	@ 0x24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a80:	d301      	bcc.n	8002a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a82:	2301      	movs	r3, #1
 8002a84:	e00f      	b.n	8002aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a86:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab0 <SysTick_Config+0x40>)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a8e:	210f      	movs	r1, #15
 8002a90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a94:	f7ff ff8e 	bl	80029b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a98:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <SysTick_Config+0x40>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a9e:	4b04      	ldr	r3, [pc, #16]	@ (8002ab0 <SysTick_Config+0x40>)
 8002aa0:	2207      	movs	r2, #7
 8002aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	e000e010 	.word	0xe000e010

08002ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ff47 	bl	8002950 <__NVIC_SetPriorityGrouping>
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b086      	sub	sp, #24
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002adc:	f7ff ff5c 	bl	8002998 <__NVIC_GetPriorityGrouping>
 8002ae0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68b9      	ldr	r1, [r7, #8]
 8002ae6:	6978      	ldr	r0, [r7, #20]
 8002ae8:	f7ff ff8e 	bl	8002a08 <NVIC_EncodePriority>
 8002aec:	4602      	mov	r2, r0
 8002aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ff5d 	bl	80029b4 <__NVIC_SetPriority>
}
 8002afa:	bf00      	nop
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff ffb0 	bl	8002a70 <SysTick_Config>
 8002b10:	4603      	mov	r3, r0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b089      	sub	sp, #36	@ 0x24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
 8002b36:	e177      	b.n	8002e28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b38:	2201      	movs	r2, #1
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	f040 8166 	bne.w	8002e22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d005      	beq.n	8002b6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d130      	bne.n	8002bd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	2203      	movs	r2, #3
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4013      	ands	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	f003 0201 	and.w	r2, r3, #1
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d017      	beq.n	8002c0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	2203      	movs	r2, #3
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 0303 	and.w	r3, r3, #3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d123      	bne.n	8002c60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	08da      	lsrs	r2, r3, #3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3208      	adds	r2, #8
 8002c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	220f      	movs	r2, #15
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	08da      	lsrs	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3208      	adds	r2, #8
 8002c5a:	69b9      	ldr	r1, [r7, #24]
 8002c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 0203 	and.w	r2, r3, #3
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 80c0 	beq.w	8002e22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	4b66      	ldr	r3, [pc, #408]	@ (8002e40 <HAL_GPIO_Init+0x324>)
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002caa:	4a65      	ldr	r2, [pc, #404]	@ (8002e40 <HAL_GPIO_Init+0x324>)
 8002cac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cb2:	4b63      	ldr	r3, [pc, #396]	@ (8002e40 <HAL_GPIO_Init+0x324>)
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cbe:	4a61      	ldr	r2, [pc, #388]	@ (8002e44 <HAL_GPIO_Init+0x328>)
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	089b      	lsrs	r3, r3, #2
 8002cc4:	3302      	adds	r3, #2
 8002cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	220f      	movs	r2, #15
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a58      	ldr	r2, [pc, #352]	@ (8002e48 <HAL_GPIO_Init+0x32c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d037      	beq.n	8002d5a <HAL_GPIO_Init+0x23e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a57      	ldr	r2, [pc, #348]	@ (8002e4c <HAL_GPIO_Init+0x330>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d031      	beq.n	8002d56 <HAL_GPIO_Init+0x23a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a56      	ldr	r2, [pc, #344]	@ (8002e50 <HAL_GPIO_Init+0x334>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d02b      	beq.n	8002d52 <HAL_GPIO_Init+0x236>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a55      	ldr	r2, [pc, #340]	@ (8002e54 <HAL_GPIO_Init+0x338>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d025      	beq.n	8002d4e <HAL_GPIO_Init+0x232>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a54      	ldr	r2, [pc, #336]	@ (8002e58 <HAL_GPIO_Init+0x33c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d01f      	beq.n	8002d4a <HAL_GPIO_Init+0x22e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a53      	ldr	r2, [pc, #332]	@ (8002e5c <HAL_GPIO_Init+0x340>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d019      	beq.n	8002d46 <HAL_GPIO_Init+0x22a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a52      	ldr	r2, [pc, #328]	@ (8002e60 <HAL_GPIO_Init+0x344>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <HAL_GPIO_Init+0x226>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a51      	ldr	r2, [pc, #324]	@ (8002e64 <HAL_GPIO_Init+0x348>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00d      	beq.n	8002d3e <HAL_GPIO_Init+0x222>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a50      	ldr	r2, [pc, #320]	@ (8002e68 <HAL_GPIO_Init+0x34c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d007      	beq.n	8002d3a <HAL_GPIO_Init+0x21e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a4f      	ldr	r2, [pc, #316]	@ (8002e6c <HAL_GPIO_Init+0x350>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d101      	bne.n	8002d36 <HAL_GPIO_Init+0x21a>
 8002d32:	2309      	movs	r3, #9
 8002d34:	e012      	b.n	8002d5c <HAL_GPIO_Init+0x240>
 8002d36:	230a      	movs	r3, #10
 8002d38:	e010      	b.n	8002d5c <HAL_GPIO_Init+0x240>
 8002d3a:	2308      	movs	r3, #8
 8002d3c:	e00e      	b.n	8002d5c <HAL_GPIO_Init+0x240>
 8002d3e:	2307      	movs	r3, #7
 8002d40:	e00c      	b.n	8002d5c <HAL_GPIO_Init+0x240>
 8002d42:	2306      	movs	r3, #6
 8002d44:	e00a      	b.n	8002d5c <HAL_GPIO_Init+0x240>
 8002d46:	2305      	movs	r3, #5
 8002d48:	e008      	b.n	8002d5c <HAL_GPIO_Init+0x240>
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	e006      	b.n	8002d5c <HAL_GPIO_Init+0x240>
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e004      	b.n	8002d5c <HAL_GPIO_Init+0x240>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e002      	b.n	8002d5c <HAL_GPIO_Init+0x240>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <HAL_GPIO_Init+0x240>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	69fa      	ldr	r2, [r7, #28]
 8002d5e:	f002 0203 	and.w	r2, r2, #3
 8002d62:	0092      	lsls	r2, r2, #2
 8002d64:	4093      	lsls	r3, r2
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d6c:	4935      	ldr	r1, [pc, #212]	@ (8002e44 <HAL_GPIO_Init+0x328>)
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	089b      	lsrs	r3, r3, #2
 8002d72:	3302      	adds	r3, #2
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e70 <HAL_GPIO_Init+0x354>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d9e:	4a34      	ldr	r2, [pc, #208]	@ (8002e70 <HAL_GPIO_Init+0x354>)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002da4:	4b32      	ldr	r3, [pc, #200]	@ (8002e70 <HAL_GPIO_Init+0x354>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dc8:	4a29      	ldr	r2, [pc, #164]	@ (8002e70 <HAL_GPIO_Init+0x354>)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dce:	4b28      	ldr	r3, [pc, #160]	@ (8002e70 <HAL_GPIO_Init+0x354>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002df2:	4a1f      	ldr	r2, [pc, #124]	@ (8002e70 <HAL_GPIO_Init+0x354>)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002df8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e70 <HAL_GPIO_Init+0x354>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e1c:	4a14      	ldr	r2, [pc, #80]	@ (8002e70 <HAL_GPIO_Init+0x354>)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3301      	adds	r3, #1
 8002e26:	61fb      	str	r3, [r7, #28]
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	2b0f      	cmp	r3, #15
 8002e2c:	f67f ae84 	bls.w	8002b38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e30:	bf00      	nop
 8002e32:	bf00      	nop
 8002e34:	3724      	adds	r7, #36	@ 0x24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40013800 	.word	0x40013800
 8002e48:	40020000 	.word	0x40020000
 8002e4c:	40020400 	.word	0x40020400
 8002e50:	40020800 	.word	0x40020800
 8002e54:	40020c00 	.word	0x40020c00
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40021400 	.word	0x40021400
 8002e60:	40021800 	.word	0x40021800
 8002e64:	40021c00 	.word	0x40021c00
 8002e68:	40022000 	.word	0x40022000
 8002e6c:	40022400 	.word	0x40022400
 8002e70:	40013c00 	.word	0x40013c00

08002e74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	e0d9      	b.n	8003044 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e90:	2201      	movs	r2, #1
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	f040 80c9 	bne.w	800303e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002eac:	4a6b      	ldr	r2, [pc, #428]	@ (800305c <HAL_GPIO_DeInit+0x1e8>)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	089b      	lsrs	r3, r3, #2
 8002eb2:	3302      	adds	r3, #2
 8002eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	220f      	movs	r2, #15
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a63      	ldr	r2, [pc, #396]	@ (8003060 <HAL_GPIO_DeInit+0x1ec>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d037      	beq.n	8002f46 <HAL_GPIO_DeInit+0xd2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a62      	ldr	r2, [pc, #392]	@ (8003064 <HAL_GPIO_DeInit+0x1f0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d031      	beq.n	8002f42 <HAL_GPIO_DeInit+0xce>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a61      	ldr	r2, [pc, #388]	@ (8003068 <HAL_GPIO_DeInit+0x1f4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d02b      	beq.n	8002f3e <HAL_GPIO_DeInit+0xca>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a60      	ldr	r2, [pc, #384]	@ (800306c <HAL_GPIO_DeInit+0x1f8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d025      	beq.n	8002f3a <HAL_GPIO_DeInit+0xc6>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a5f      	ldr	r2, [pc, #380]	@ (8003070 <HAL_GPIO_DeInit+0x1fc>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d01f      	beq.n	8002f36 <HAL_GPIO_DeInit+0xc2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a5e      	ldr	r2, [pc, #376]	@ (8003074 <HAL_GPIO_DeInit+0x200>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d019      	beq.n	8002f32 <HAL_GPIO_DeInit+0xbe>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a5d      	ldr	r2, [pc, #372]	@ (8003078 <HAL_GPIO_DeInit+0x204>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d013      	beq.n	8002f2e <HAL_GPIO_DeInit+0xba>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a5c      	ldr	r2, [pc, #368]	@ (800307c <HAL_GPIO_DeInit+0x208>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00d      	beq.n	8002f2a <HAL_GPIO_DeInit+0xb6>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a5b      	ldr	r2, [pc, #364]	@ (8003080 <HAL_GPIO_DeInit+0x20c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d007      	beq.n	8002f26 <HAL_GPIO_DeInit+0xb2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a5a      	ldr	r2, [pc, #360]	@ (8003084 <HAL_GPIO_DeInit+0x210>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d101      	bne.n	8002f22 <HAL_GPIO_DeInit+0xae>
 8002f1e:	2309      	movs	r3, #9
 8002f20:	e012      	b.n	8002f48 <HAL_GPIO_DeInit+0xd4>
 8002f22:	230a      	movs	r3, #10
 8002f24:	e010      	b.n	8002f48 <HAL_GPIO_DeInit+0xd4>
 8002f26:	2308      	movs	r3, #8
 8002f28:	e00e      	b.n	8002f48 <HAL_GPIO_DeInit+0xd4>
 8002f2a:	2307      	movs	r3, #7
 8002f2c:	e00c      	b.n	8002f48 <HAL_GPIO_DeInit+0xd4>
 8002f2e:	2306      	movs	r3, #6
 8002f30:	e00a      	b.n	8002f48 <HAL_GPIO_DeInit+0xd4>
 8002f32:	2305      	movs	r3, #5
 8002f34:	e008      	b.n	8002f48 <HAL_GPIO_DeInit+0xd4>
 8002f36:	2304      	movs	r3, #4
 8002f38:	e006      	b.n	8002f48 <HAL_GPIO_DeInit+0xd4>
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e004      	b.n	8002f48 <HAL_GPIO_DeInit+0xd4>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e002      	b.n	8002f48 <HAL_GPIO_DeInit+0xd4>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <HAL_GPIO_DeInit+0xd4>
 8002f46:	2300      	movs	r3, #0
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	f002 0203 	and.w	r2, r2, #3
 8002f4e:	0092      	lsls	r2, r2, #2
 8002f50:	4093      	lsls	r3, r2
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d132      	bne.n	8002fbe <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002f58:	4b4b      	ldr	r3, [pc, #300]	@ (8003088 <HAL_GPIO_DeInit+0x214>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	4949      	ldr	r1, [pc, #292]	@ (8003088 <HAL_GPIO_DeInit+0x214>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002f66:	4b48      	ldr	r3, [pc, #288]	@ (8003088 <HAL_GPIO_DeInit+0x214>)
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	4946      	ldr	r1, [pc, #280]	@ (8003088 <HAL_GPIO_DeInit+0x214>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002f74:	4b44      	ldr	r3, [pc, #272]	@ (8003088 <HAL_GPIO_DeInit+0x214>)
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	4942      	ldr	r1, [pc, #264]	@ (8003088 <HAL_GPIO_DeInit+0x214>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002f82:	4b41      	ldr	r3, [pc, #260]	@ (8003088 <HAL_GPIO_DeInit+0x214>)
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	493f      	ldr	r1, [pc, #252]	@ (8003088 <HAL_GPIO_DeInit+0x214>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	220f      	movs	r2, #15
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002fa0:	4a2e      	ldr	r2, [pc, #184]	@ (800305c <HAL_GPIO_DeInit+0x1e8>)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	089b      	lsrs	r3, r3, #2
 8002fa6:	3302      	adds	r3, #2
 8002fa8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	482a      	ldr	r0, [pc, #168]	@ (800305c <HAL_GPIO_DeInit+0x1e8>)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	089b      	lsrs	r3, r3, #2
 8002fb6:	400a      	ands	r2, r1
 8002fb8:	3302      	adds	r3, #2
 8002fba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	2103      	movs	r1, #3
 8002fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	401a      	ands	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	08da      	lsrs	r2, r3, #3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3208      	adds	r2, #8
 8002fdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	220f      	movs	r2, #15
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	08d2      	lsrs	r2, r2, #3
 8002ff4:	4019      	ands	r1, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	3208      	adds	r2, #8
 8002ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	2103      	movs	r1, #3
 8003008:	fa01 f303 	lsl.w	r3, r1, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	401a      	ands	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	2101      	movs	r1, #1
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	fa01 f303 	lsl.w	r3, r1, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	401a      	ands	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	2103      	movs	r1, #3
 8003032:	fa01 f303 	lsl.w	r3, r1, r3
 8003036:	43db      	mvns	r3, r3
 8003038:	401a      	ands	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	3301      	adds	r3, #1
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	2b0f      	cmp	r3, #15
 8003048:	f67f af22 	bls.w	8002e90 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800304c:	bf00      	nop
 800304e:	bf00      	nop
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40013800 	.word	0x40013800
 8003060:	40020000 	.word	0x40020000
 8003064:	40020400 	.word	0x40020400
 8003068:	40020800 	.word	0x40020800
 800306c:	40020c00 	.word	0x40020c00
 8003070:	40021000 	.word	0x40021000
 8003074:	40021400 	.word	0x40021400
 8003078:	40021800 	.word	0x40021800
 800307c:	40021c00 	.word	0x40021c00
 8003080:	40022000 	.word	0x40022000
 8003084:	40022400 	.word	0x40022400
 8003088:	40013c00 	.word	0x40013c00

0800308c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	807b      	strh	r3, [r7, #2]
 8003098:	4613      	mov	r3, r2
 800309a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800309c:	787b      	ldrb	r3, [r7, #1]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030a2:	887a      	ldrh	r2, [r7, #2]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030a8:	e003      	b.n	80030b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030aa:	887b      	ldrh	r3, [r7, #2]
 80030ac:	041a      	lsls	r2, r3, #16
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	619a      	str	r2, [r3, #24]
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
	...

080030c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e12b      	b.n	800332a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fe fd02 	bl	8001af0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2224      	movs	r2, #36	@ 0x24
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0201 	bic.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003112:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003122:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003124:	f001 ff82 	bl	800502c <HAL_RCC_GetPCLK1Freq>
 8003128:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4a81      	ldr	r2, [pc, #516]	@ (8003334 <HAL_I2C_Init+0x274>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d807      	bhi.n	8003144 <HAL_I2C_Init+0x84>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4a80      	ldr	r2, [pc, #512]	@ (8003338 <HAL_I2C_Init+0x278>)
 8003138:	4293      	cmp	r3, r2
 800313a:	bf94      	ite	ls
 800313c:	2301      	movls	r3, #1
 800313e:	2300      	movhi	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	e006      	b.n	8003152 <HAL_I2C_Init+0x92>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4a7d      	ldr	r2, [pc, #500]	@ (800333c <HAL_I2C_Init+0x27c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	bf94      	ite	ls
 800314c:	2301      	movls	r3, #1
 800314e:	2300      	movhi	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e0e7      	b.n	800332a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4a78      	ldr	r2, [pc, #480]	@ (8003340 <HAL_I2C_Init+0x280>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	0c9b      	lsrs	r3, r3, #18
 8003164:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4a6a      	ldr	r2, [pc, #424]	@ (8003334 <HAL_I2C_Init+0x274>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d802      	bhi.n	8003194 <HAL_I2C_Init+0xd4>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	3301      	adds	r3, #1
 8003192:	e009      	b.n	80031a8 <HAL_I2C_Init+0xe8>
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	4a69      	ldr	r2, [pc, #420]	@ (8003344 <HAL_I2C_Init+0x284>)
 80031a0:	fba2 2303 	umull	r2, r3, r2, r3
 80031a4:	099b      	lsrs	r3, r3, #6
 80031a6:	3301      	adds	r3, #1
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	430b      	orrs	r3, r1
 80031ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80031ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	495c      	ldr	r1, [pc, #368]	@ (8003334 <HAL_I2C_Init+0x274>)
 80031c4:	428b      	cmp	r3, r1
 80031c6:	d819      	bhi.n	80031fc <HAL_I2C_Init+0x13c>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1e59      	subs	r1, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80031d6:	1c59      	adds	r1, r3, #1
 80031d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80031dc:	400b      	ands	r3, r1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_I2C_Init+0x138>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1e59      	subs	r1, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80031f0:	3301      	adds	r3, #1
 80031f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f6:	e051      	b.n	800329c <HAL_I2C_Init+0x1dc>
 80031f8:	2304      	movs	r3, #4
 80031fa:	e04f      	b.n	800329c <HAL_I2C_Init+0x1dc>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d111      	bne.n	8003228 <HAL_I2C_Init+0x168>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1e58      	subs	r0, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	440b      	add	r3, r1
 8003212:	fbb0 f3f3 	udiv	r3, r0, r3
 8003216:	3301      	adds	r3, #1
 8003218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	e012      	b.n	800324e <HAL_I2C_Init+0x18e>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	1e58      	subs	r0, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6859      	ldr	r1, [r3, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	0099      	lsls	r1, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	fbb0 f3f3 	udiv	r3, r0, r3
 800323e:	3301      	adds	r3, #1
 8003240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_I2C_Init+0x196>
 8003252:	2301      	movs	r3, #1
 8003254:	e022      	b.n	800329c <HAL_I2C_Init+0x1dc>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10e      	bne.n	800327c <HAL_I2C_Init+0x1bc>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1e58      	subs	r0, r3, #1
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6859      	ldr	r1, [r3, #4]
 8003266:	460b      	mov	r3, r1
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	440b      	add	r3, r1
 800326c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003270:	3301      	adds	r3, #1
 8003272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003276:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800327a:	e00f      	b.n	800329c <HAL_I2C_Init+0x1dc>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	1e58      	subs	r0, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6859      	ldr	r1, [r3, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	0099      	lsls	r1, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003292:	3301      	adds	r3, #1
 8003294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003298:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	6809      	ldr	r1, [r1, #0]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69da      	ldr	r2, [r3, #28]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80032ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6911      	ldr	r1, [r2, #16]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	68d2      	ldr	r2, [r2, #12]
 80032d6:	4311      	orrs	r1, r2
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	430b      	orrs	r3, r1
 80032de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695a      	ldr	r2, [r3, #20]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	000186a0 	.word	0x000186a0
 8003338:	001e847f 	.word	0x001e847f
 800333c:	003d08ff 	.word	0x003d08ff
 8003340:	431bde83 	.word	0x431bde83
 8003344:	10624dd3 	.word	0x10624dd3

08003348 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af02      	add	r7, sp, #8
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	4608      	mov	r0, r1
 8003352:	4611      	mov	r1, r2
 8003354:	461a      	mov	r2, r3
 8003356:	4603      	mov	r3, r0
 8003358:	817b      	strh	r3, [r7, #10]
 800335a:	460b      	mov	r3, r1
 800335c:	813b      	strh	r3, [r7, #8]
 800335e:	4613      	mov	r3, r2
 8003360:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003362:	f7ff fac5 	bl	80028f0 <HAL_GetTick>
 8003366:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b20      	cmp	r3, #32
 8003372:	f040 80d9 	bne.w	8003528 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	2319      	movs	r3, #25
 800337c:	2201      	movs	r2, #1
 800337e:	496d      	ldr	r1, [pc, #436]	@ (8003534 <HAL_I2C_Mem_Write+0x1ec>)
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 fc8b 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800338c:	2302      	movs	r3, #2
 800338e:	e0cc      	b.n	800352a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_I2C_Mem_Write+0x56>
 800339a:	2302      	movs	r3, #2
 800339c:	e0c5      	b.n	800352a <HAL_I2C_Mem_Write+0x1e2>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d007      	beq.n	80033c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0201 	orr.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2221      	movs	r2, #33	@ 0x21
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2240      	movs	r2, #64	@ 0x40
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a3a      	ldr	r2, [r7, #32]
 80033ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80033f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4a4d      	ldr	r2, [pc, #308]	@ (8003538 <HAL_I2C_Mem_Write+0x1f0>)
 8003404:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003406:	88f8      	ldrh	r0, [r7, #6]
 8003408:	893a      	ldrh	r2, [r7, #8]
 800340a:	8979      	ldrh	r1, [r7, #10]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	9301      	str	r3, [sp, #4]
 8003410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	4603      	mov	r3, r0
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 fac2 	bl	80039a0 <I2C_RequestMemoryWrite>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d052      	beq.n	80034c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e081      	b.n	800352a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 fd50 	bl	8003ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00d      	beq.n	8003452 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343a:	2b04      	cmp	r3, #4
 800343c:	d107      	bne.n	800344e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800344c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e06b      	b.n	800352a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003456:	781a      	ldrb	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003478:	b29b      	uxth	r3, r3
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b04      	cmp	r3, #4
 800348e:	d11b      	bne.n	80034c8 <HAL_I2C_Mem_Write+0x180>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003494:	2b00      	cmp	r3, #0
 8003496:	d017      	beq.n	80034c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349c:	781a      	ldrb	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1aa      	bne.n	8003426 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 fd43 	bl	8003f60 <I2C_WaitOnBTFFlagUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00d      	beq.n	80034fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d107      	bne.n	80034f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e016      	b.n	800352a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800350a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003524:	2300      	movs	r3, #0
 8003526:	e000      	b.n	800352a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003528:	2302      	movs	r3, #2
  }
}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	00100002 	.word	0x00100002
 8003538:	ffff0000 	.word	0xffff0000

0800353c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08c      	sub	sp, #48	@ 0x30
 8003540:	af02      	add	r7, sp, #8
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	4608      	mov	r0, r1
 8003546:	4611      	mov	r1, r2
 8003548:	461a      	mov	r2, r3
 800354a:	4603      	mov	r3, r0
 800354c:	817b      	strh	r3, [r7, #10]
 800354e:	460b      	mov	r3, r1
 8003550:	813b      	strh	r3, [r7, #8]
 8003552:	4613      	mov	r3, r2
 8003554:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003556:	f7ff f9cb 	bl	80028f0 <HAL_GetTick>
 800355a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b20      	cmp	r3, #32
 8003566:	f040 8214 	bne.w	8003992 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	2319      	movs	r3, #25
 8003570:	2201      	movs	r2, #1
 8003572:	497b      	ldr	r1, [pc, #492]	@ (8003760 <HAL_I2C_Mem_Read+0x224>)
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 fb91 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003580:	2302      	movs	r3, #2
 8003582:	e207      	b.n	8003994 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_I2C_Mem_Read+0x56>
 800358e:	2302      	movs	r3, #2
 8003590:	e200      	b.n	8003994 <HAL_I2C_Mem_Read+0x458>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d007      	beq.n	80035b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2222      	movs	r2, #34	@ 0x22
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2240      	movs	r2, #64	@ 0x40
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80035e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003764 <HAL_I2C_Mem_Read+0x228>)
 80035f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035fa:	88f8      	ldrh	r0, [r7, #6]
 80035fc:	893a      	ldrh	r2, [r7, #8]
 80035fe:	8979      	ldrh	r1, [r7, #10]
 8003600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003602:	9301      	str	r3, [sp, #4]
 8003604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	4603      	mov	r3, r0
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 fa5e 	bl	8003acc <I2C_RequestMemoryRead>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e1bc      	b.n	8003994 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800361e:	2b00      	cmp	r3, #0
 8003620:	d113      	bne.n	800364a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003622:	2300      	movs	r3, #0
 8003624:	623b      	str	r3, [r7, #32]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	623b      	str	r3, [r7, #32]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	623b      	str	r3, [r7, #32]
 8003636:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	e190      	b.n	800396c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800364e:	2b01      	cmp	r3, #1
 8003650:	d11b      	bne.n	800368a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003660:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003662:	2300      	movs	r3, #0
 8003664:	61fb      	str	r3, [r7, #28]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	61fb      	str	r3, [r7, #28]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	61fb      	str	r3, [r7, #28]
 8003676:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	e170      	b.n	800396c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368e:	2b02      	cmp	r3, #2
 8003690:	d11b      	bne.n	80036ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b2:	2300      	movs	r3, #0
 80036b4:	61bb      	str	r3, [r7, #24]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	61bb      	str	r3, [r7, #24]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	61bb      	str	r3, [r7, #24]
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	e150      	b.n	800396c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036e0:	e144      	b.n	800396c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	f200 80f1 	bhi.w	80038ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d123      	bne.n	800373c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fc79 	bl	8003ff0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e145      	b.n	8003994 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800373a:	e117      	b.n	800396c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003740:	2b02      	cmp	r3, #2
 8003742:	d14e      	bne.n	80037e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800374a:	2200      	movs	r2, #0
 800374c:	4906      	ldr	r1, [pc, #24]	@ (8003768 <HAL_I2C_Mem_Read+0x22c>)
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 faa4 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d008      	beq.n	800376c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e11a      	b.n	8003994 <HAL_I2C_Mem_Read+0x458>
 800375e:	bf00      	nop
 8003760:	00100002 	.word	0x00100002
 8003764:	ffff0000 	.word	0xffff0000
 8003768:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800377a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037e0:	e0c4      	b.n	800396c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e8:	2200      	movs	r2, #0
 80037ea:	496c      	ldr	r1, [pc, #432]	@ (800399c <HAL_I2C_Mem_Read+0x460>)
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 fa55 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0cb      	b.n	8003994 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800380a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800383e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003844:	2200      	movs	r2, #0
 8003846:	4955      	ldr	r1, [pc, #340]	@ (800399c <HAL_I2C_Mem_Read+0x460>)
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 fa27 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e09d      	b.n	8003994 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003866:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038cc:	e04e      	b.n	800396c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 fb8c 	bl	8003ff0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e058      	b.n	8003994 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b04      	cmp	r3, #4
 8003920:	d124      	bne.n	800396c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003926:	2b03      	cmp	r3, #3
 8003928:	d107      	bne.n	800393a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003938:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003970:	2b00      	cmp	r3, #0
 8003972:	f47f aeb6 	bne.w	80036e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	e000      	b.n	8003994 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003992:	2302      	movs	r3, #2
  }
}
 8003994:	4618      	mov	r0, r3
 8003996:	3728      	adds	r7, #40	@ 0x28
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	00010004 	.word	0x00010004

080039a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	4608      	mov	r0, r1
 80039aa:	4611      	mov	r1, r2
 80039ac:	461a      	mov	r2, r3
 80039ae:	4603      	mov	r3, r0
 80039b0:	817b      	strh	r3, [r7, #10]
 80039b2:	460b      	mov	r3, r1
 80039b4:	813b      	strh	r3, [r7, #8]
 80039b6:	4613      	mov	r3, r2
 80039b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f960 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00d      	beq.n	80039fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039f0:	d103      	bne.n	80039fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e05f      	b.n	8003abe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039fe:	897b      	ldrh	r3, [r7, #10]
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	461a      	mov	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a10:	6a3a      	ldr	r2, [r7, #32]
 8003a12:	492d      	ldr	r1, [pc, #180]	@ (8003ac8 <I2C_RequestMemoryWrite+0x128>)
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f9bb 	bl	8003d90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e04c      	b.n	8003abe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a3c:	6a39      	ldr	r1, [r7, #32]
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 fa46 	bl	8003ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00d      	beq.n	8003a66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d107      	bne.n	8003a62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e02b      	b.n	8003abe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a66:	88fb      	ldrh	r3, [r7, #6]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d105      	bne.n	8003a78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a6c:	893b      	ldrh	r3, [r7, #8]
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	611a      	str	r2, [r3, #16]
 8003a76:	e021      	b.n	8003abc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a78:	893b      	ldrh	r3, [r7, #8]
 8003a7a:	0a1b      	lsrs	r3, r3, #8
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a88:	6a39      	ldr	r1, [r7, #32]
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 fa20 	bl	8003ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00d      	beq.n	8003ab2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d107      	bne.n	8003aae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e005      	b.n	8003abe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ab2:	893b      	ldrh	r3, [r7, #8]
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	00010002 	.word	0x00010002

08003acc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	461a      	mov	r2, r3
 8003ada:	4603      	mov	r3, r0
 8003adc:	817b      	strh	r3, [r7, #10]
 8003ade:	460b      	mov	r3, r1
 8003ae0:	813b      	strh	r3, [r7, #8]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003af4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f8c2 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00d      	beq.n	8003b3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b2c:	d103      	bne.n	8003b36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b34:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e0aa      	b.n	8003c90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b3a:	897b      	ldrh	r3, [r7, #10]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	6a3a      	ldr	r2, [r7, #32]
 8003b4e:	4952      	ldr	r1, [pc, #328]	@ (8003c98 <I2C_RequestMemoryRead+0x1cc>)
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f91d 	bl	8003d90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e097      	b.n	8003c90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b78:	6a39      	ldr	r1, [r7, #32]
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f9a8 	bl	8003ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00d      	beq.n	8003ba2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d107      	bne.n	8003b9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e076      	b.n	8003c90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d105      	bne.n	8003bb4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ba8:	893b      	ldrh	r3, [r7, #8]
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	611a      	str	r2, [r3, #16]
 8003bb2:	e021      	b.n	8003bf8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bb4:	893b      	ldrh	r3, [r7, #8]
 8003bb6:	0a1b      	lsrs	r3, r3, #8
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bc4:	6a39      	ldr	r1, [r7, #32]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f982 	bl	8003ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00d      	beq.n	8003bee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d107      	bne.n	8003bea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003be8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e050      	b.n	8003c90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bee:	893b      	ldrh	r3, [r7, #8]
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bfa:	6a39      	ldr	r1, [r7, #32]
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f967 	bl	8003ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00d      	beq.n	8003c24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d107      	bne.n	8003c20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e035      	b.n	8003c90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f82b 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00d      	beq.n	8003c68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c5a:	d103      	bne.n	8003c64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e013      	b.n	8003c90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c68:	897b      	ldrh	r3, [r7, #10]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	f043 0301 	orr.w	r3, r3, #1
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7a:	6a3a      	ldr	r2, [r7, #32]
 8003c7c:	4906      	ldr	r1, [pc, #24]	@ (8003c98 <I2C_RequestMemoryRead+0x1cc>)
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 f886 	bl	8003d90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	00010002 	.word	0x00010002

08003c9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cac:	e048      	b.n	8003d40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cb4:	d044      	beq.n	8003d40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb6:	f7fe fe1b 	bl	80028f0 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d302      	bcc.n	8003ccc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d139      	bne.n	8003d40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	0c1b      	lsrs	r3, r3, #16
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d10d      	bne.n	8003cf2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	43da      	mvns	r2, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	bf0c      	ite	eq
 8003ce8:	2301      	moveq	r3, #1
 8003cea:	2300      	movne	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	461a      	mov	r2, r3
 8003cf0:	e00c      	b.n	8003d0c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	43da      	mvns	r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	bf0c      	ite	eq
 8003d04:	2301      	moveq	r3, #1
 8003d06:	2300      	movne	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	79fb      	ldrb	r3, [r7, #7]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d116      	bne.n	8003d40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	f043 0220 	orr.w	r2, r3, #32
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e023      	b.n	8003d88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	0c1b      	lsrs	r3, r3, #16
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d10d      	bne.n	8003d66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	43da      	mvns	r2, r3
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	4013      	ands	r3, r2
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2301      	moveq	r3, #1
 8003d5e:	2300      	movne	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	461a      	mov	r2, r3
 8003d64:	e00c      	b.n	8003d80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	43da      	mvns	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	4013      	ands	r3, r2
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bf0c      	ite	eq
 8003d78:	2301      	moveq	r3, #1
 8003d7a:	2300      	movne	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	461a      	mov	r2, r3
 8003d80:	79fb      	ldrb	r3, [r7, #7]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d093      	beq.n	8003cae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d9e:	e071      	b.n	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003daa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dae:	d123      	bne.n	8003df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dbe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de4:	f043 0204 	orr.w	r2, r3, #4
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e067      	b.n	8003ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dfe:	d041      	beq.n	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e00:	f7fe fd76 	bl	80028f0 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d302      	bcc.n	8003e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d136      	bne.n	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	0c1b      	lsrs	r3, r3, #16
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d10c      	bne.n	8003e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	43da      	mvns	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	bf14      	ite	ne
 8003e32:	2301      	movne	r3, #1
 8003e34:	2300      	moveq	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	e00b      	b.n	8003e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	43da      	mvns	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4013      	ands	r3, r2
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf14      	ite	ne
 8003e4c:	2301      	movne	r3, #1
 8003e4e:	2300      	moveq	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d016      	beq.n	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	f043 0220 	orr.w	r2, r3, #32
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e021      	b.n	8003ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	0c1b      	lsrs	r3, r3, #16
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d10c      	bne.n	8003ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	43da      	mvns	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	bf14      	ite	ne
 8003ea0:	2301      	movne	r3, #1
 8003ea2:	2300      	moveq	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	e00b      	b.n	8003ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	43da      	mvns	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	bf14      	ite	ne
 8003eba:	2301      	movne	r3, #1
 8003ebc:	2300      	moveq	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f47f af6d 	bne.w	8003da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003edc:	e034      	b.n	8003f48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 f8e3 	bl	80040aa <I2C_IsAcknowledgeFailed>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e034      	b.n	8003f58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ef4:	d028      	beq.n	8003f48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef6:	f7fe fcfb 	bl	80028f0 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d302      	bcc.n	8003f0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d11d      	bne.n	8003f48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f16:	2b80      	cmp	r3, #128	@ 0x80
 8003f18:	d016      	beq.n	8003f48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f34:	f043 0220 	orr.w	r2, r3, #32
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e007      	b.n	8003f58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f52:	2b80      	cmp	r3, #128	@ 0x80
 8003f54:	d1c3      	bne.n	8003ede <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f6c:	e034      	b.n	8003fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f89b 	bl	80040aa <I2C_IsAcknowledgeFailed>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e034      	b.n	8003fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f84:	d028      	beq.n	8003fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f86:	f7fe fcb3 	bl	80028f0 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d302      	bcc.n	8003f9c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d11d      	bne.n	8003fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d016      	beq.n	8003fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc4:	f043 0220 	orr.w	r2, r3, #32
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e007      	b.n	8003fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d1c3      	bne.n	8003f6e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ffc:	e049      	b.n	8004092 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b10      	cmp	r3, #16
 800400a:	d119      	bne.n	8004040 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f06f 0210 	mvn.w	r2, #16
 8004014:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e030      	b.n	80040a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004040:	f7fe fc56 	bl	80028f0 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	429a      	cmp	r2, r3
 800404e:	d302      	bcc.n	8004056 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d11d      	bne.n	8004092 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004060:	2b40      	cmp	r3, #64	@ 0x40
 8004062:	d016      	beq.n	8004092 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407e:	f043 0220 	orr.w	r2, r3, #32
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e007      	b.n	80040a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800409c:	2b40      	cmp	r3, #64	@ 0x40
 800409e:	d1ae      	bne.n	8003ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040c0:	d11b      	bne.n	80040fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e6:	f043 0204 	orr.w	r2, r3, #4
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b20      	cmp	r3, #32
 800411c:	d129      	bne.n	8004172 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2224      	movs	r2, #36	@ 0x24
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0210 	bic.w	r2, r2, #16
 8004144:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 0201 	orr.w	r2, r2, #1
 8004164:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2220      	movs	r2, #32
 800416a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	e000      	b.n	8004174 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004172:	2302      	movs	r3, #2
  }
}
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b20      	cmp	r3, #32
 8004198:	d12a      	bne.n	80041f0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2224      	movs	r2, #36	@ 0x24
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0201 	bic.w	r2, r2, #1
 80041b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80041ba:	89fb      	ldrh	r3, [r7, #14]
 80041bc:	f023 030f 	bic.w	r3, r3, #15
 80041c0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	89fb      	ldrh	r3, [r7, #14]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	89fa      	ldrh	r2, [r7, #14]
 80041d2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0201 	orr.w	r2, r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	e000      	b.n	80041f2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80041f0:	2302      	movs	r3, #2
  }
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e0bf      	b.n	8004392 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fd fccc 	bl	8001bc4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004242:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6999      	ldr	r1, [r3, #24]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004258:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6899      	ldr	r1, [r3, #8]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	4b4a      	ldr	r3, [pc, #296]	@ (800439c <HAL_LTDC_Init+0x19c>)
 8004274:	400b      	ands	r3, r1
 8004276:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	041b      	lsls	r3, r3, #16
 800427e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6899      	ldr	r1, [r3, #8]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68d9      	ldr	r1, [r3, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b3e      	ldr	r3, [pc, #248]	@ (800439c <HAL_LTDC_Init+0x19c>)
 80042a2:	400b      	ands	r3, r1
 80042a4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	041b      	lsls	r3, r3, #16
 80042ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68d9      	ldr	r1, [r3, #12]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1a      	ldr	r2, [r3, #32]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6919      	ldr	r1, [r3, #16]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4b33      	ldr	r3, [pc, #204]	@ (800439c <HAL_LTDC_Init+0x19c>)
 80042d0:	400b      	ands	r3, r1
 80042d2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d8:	041b      	lsls	r3, r3, #16
 80042da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6919      	ldr	r1, [r3, #16]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6959      	ldr	r1, [r3, #20]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	4b27      	ldr	r3, [pc, #156]	@ (800439c <HAL_LTDC_Init+0x19c>)
 80042fe:	400b      	ands	r3, r1
 8004300:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004306:	041b      	lsls	r3, r3, #16
 8004308:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6959      	ldr	r1, [r3, #20]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004326:	021b      	lsls	r3, r3, #8
 8004328:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004330:	041b      	lsls	r3, r3, #16
 8004332:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004342:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0206 	orr.w	r2, r2, #6
 800436e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699a      	ldr	r2, [r3, #24]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	f000f800 	.word	0xf000f800

080043a0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80043a0:	b5b0      	push	{r4, r5, r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_LTDC_ConfigLayer+0x1a>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e02c      	b.n	8004414 <HAL_LTDC_ConfigLayer+0x74>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2202      	movs	r2, #2
 80043c6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2134      	movs	r1, #52	@ 0x34
 80043d0:	fb01 f303 	mul.w	r3, r1, r3
 80043d4:	4413      	add	r3, r2
 80043d6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	4614      	mov	r4, r2
 80043de:	461d      	mov	r5, r3
 80043e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043ec:	682b      	ldr	r3, [r5, #0]
 80043ee:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	68b9      	ldr	r1, [r7, #8]
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 f811 	bl	800441c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2201      	movs	r2, #1
 8004400:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bdb0      	pop	{r4, r5, r7, pc}

0800441c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800441c:	b480      	push	{r7}
 800441e:	b089      	sub	sp, #36	@ 0x24
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	0c1b      	lsrs	r3, r3, #16
 8004434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004438:	4413      	add	r3, r2
 800443a:	041b      	lsls	r3, r3, #16
 800443c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	01db      	lsls	r3, r3, #7
 8004448:	4413      	add	r3, r2
 800444a:	3384      	adds	r3, #132	@ 0x84
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	6812      	ldr	r2, [r2, #0]
 8004452:	4611      	mov	r1, r2
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	01d2      	lsls	r2, r2, #7
 8004458:	440a      	add	r2, r1
 800445a:	3284      	adds	r2, #132	@ 0x84
 800445c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004460:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	0c1b      	lsrs	r3, r3, #16
 800446e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004472:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004474:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4619      	mov	r1, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	01db      	lsls	r3, r3, #7
 8004480:	440b      	add	r3, r1
 8004482:	3384      	adds	r3, #132	@ 0x84
 8004484:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800448a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800449a:	4413      	add	r3, r2
 800449c:	041b      	lsls	r3, r3, #16
 800449e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	01db      	lsls	r3, r3, #7
 80044aa:	4413      	add	r3, r2
 80044ac:	3384      	adds	r3, #132	@ 0x84
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	6812      	ldr	r2, [r2, #0]
 80044b4:	4611      	mov	r1, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	01d2      	lsls	r2, r2, #7
 80044ba:	440a      	add	r2, r1
 80044bc:	3284      	adds	r2, #132	@ 0x84
 80044be:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80044c2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044d2:	4413      	add	r3, r2
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4619      	mov	r1, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	01db      	lsls	r3, r3, #7
 80044e0:	440b      	add	r3, r1
 80044e2:	3384      	adds	r3, #132	@ 0x84
 80044e4:	4619      	mov	r1, r3
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	01db      	lsls	r3, r3, #7
 80044f6:	4413      	add	r3, r2
 80044f8:	3384      	adds	r3, #132	@ 0x84
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	6812      	ldr	r2, [r2, #0]
 8004500:	4611      	mov	r1, r2
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	01d2      	lsls	r2, r2, #7
 8004506:	440a      	add	r2, r1
 8004508:	3284      	adds	r2, #132	@ 0x84
 800450a:	f023 0307 	bic.w	r3, r3, #7
 800450e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	01db      	lsls	r3, r3, #7
 800451a:	4413      	add	r3, r2
 800451c:	3384      	adds	r3, #132	@ 0x84
 800451e:	461a      	mov	r2, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800452c:	021b      	lsls	r3, r3, #8
 800452e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004536:	041b      	lsls	r3, r3, #16
 8004538:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	061b      	lsls	r3, r3, #24
 8004540:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	01db      	lsls	r3, r3, #7
 800454c:	4413      	add	r3, r2
 800454e:	3384      	adds	r3, #132	@ 0x84
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	01db      	lsls	r3, r3, #7
 800455c:	4413      	add	r3, r2
 800455e:	3384      	adds	r3, #132	@ 0x84
 8004560:	461a      	mov	r2, r3
 8004562:	2300      	movs	r3, #0
 8004564:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800456c:	461a      	mov	r2, r3
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	431a      	orrs	r2, r3
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	431a      	orrs	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4619      	mov	r1, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	01db      	lsls	r3, r3, #7
 8004580:	440b      	add	r3, r1
 8004582:	3384      	adds	r3, #132	@ 0x84
 8004584:	4619      	mov	r1, r3
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	461a      	mov	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	01db      	lsls	r3, r3, #7
 8004596:	4413      	add	r3, r2
 8004598:	3384      	adds	r3, #132	@ 0x84
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	4611      	mov	r1, r2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	01d2      	lsls	r2, r2, #7
 80045a6:	440a      	add	r2, r1
 80045a8:	3284      	adds	r2, #132	@ 0x84
 80045aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80045ae:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	461a      	mov	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	01db      	lsls	r3, r3, #7
 80045ba:	4413      	add	r3, r2
 80045bc:	3384      	adds	r3, #132	@ 0x84
 80045be:	461a      	mov	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	01db      	lsls	r3, r3, #7
 80045d0:	4413      	add	r3, r2
 80045d2:	3384      	adds	r3, #132	@ 0x84
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	6812      	ldr	r2, [r2, #0]
 80045da:	4611      	mov	r1, r2
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	01d2      	lsls	r2, r2, #7
 80045e0:	440a      	add	r2, r1
 80045e2:	3284      	adds	r2, #132	@ 0x84
 80045e4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80045e8:	f023 0307 	bic.w	r3, r3, #7
 80045ec:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	69da      	ldr	r2, [r3, #28]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	68f9      	ldr	r1, [r7, #12]
 80045f8:	6809      	ldr	r1, [r1, #0]
 80045fa:	4608      	mov	r0, r1
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	01c9      	lsls	r1, r1, #7
 8004600:	4401      	add	r1, r0
 8004602:	3184      	adds	r1, #132	@ 0x84
 8004604:	4313      	orrs	r3, r2
 8004606:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	461a      	mov	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	01db      	lsls	r3, r3, #7
 8004612:	4413      	add	r3, r2
 8004614:	3384      	adds	r3, #132	@ 0x84
 8004616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	461a      	mov	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	01db      	lsls	r3, r3, #7
 8004622:	4413      	add	r3, r2
 8004624:	3384      	adds	r3, #132	@ 0x84
 8004626:	461a      	mov	r2, r3
 8004628:	2300      	movs	r3, #0
 800462a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	461a      	mov	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	01db      	lsls	r3, r3, #7
 8004636:	4413      	add	r3, r2
 8004638:	3384      	adds	r3, #132	@ 0x84
 800463a:	461a      	mov	r2, r3
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004640:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d102      	bne.n	8004650 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800464a:	2304      	movs	r3, #4
 800464c:	61fb      	str	r3, [r7, #28]
 800464e:	e01b      	b.n	8004688 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d102      	bne.n	800465e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004658:	2303      	movs	r3, #3
 800465a:	61fb      	str	r3, [r7, #28]
 800465c:	e014      	b.n	8004688 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b04      	cmp	r3, #4
 8004664:	d00b      	beq.n	800467e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800466a:	2b02      	cmp	r3, #2
 800466c:	d007      	beq.n	800467e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004672:	2b03      	cmp	r3, #3
 8004674:	d003      	beq.n	800467e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800467a:	2b07      	cmp	r3, #7
 800467c:	d102      	bne.n	8004684 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800467e:	2302      	movs	r3, #2
 8004680:	61fb      	str	r3, [r7, #28]
 8004682:	e001      	b.n	8004688 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004684:	2301      	movs	r3, #1
 8004686:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	01db      	lsls	r3, r3, #7
 8004692:	4413      	add	r3, r2
 8004694:	3384      	adds	r3, #132	@ 0x84
 8004696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	4611      	mov	r1, r2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	01d2      	lsls	r2, r2, #7
 80046a2:	440a      	add	r2, r1
 80046a4:	3284      	adds	r2, #132	@ 0x84
 80046a6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80046aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b0:	69fa      	ldr	r2, [r7, #28]
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	6859      	ldr	r1, [r3, #4]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	1acb      	subs	r3, r1, r3
 80046c2:	69f9      	ldr	r1, [r7, #28]
 80046c4:	fb01 f303 	mul.w	r3, r1, r3
 80046c8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80046ca:	68f9      	ldr	r1, [r7, #12]
 80046cc:	6809      	ldr	r1, [r1, #0]
 80046ce:	4608      	mov	r0, r1
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	01c9      	lsls	r1, r1, #7
 80046d4:	4401      	add	r1, r0
 80046d6:	3184      	adds	r1, #132	@ 0x84
 80046d8:	4313      	orrs	r3, r2
 80046da:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	01db      	lsls	r3, r3, #7
 80046e6:	4413      	add	r3, r2
 80046e8:	3384      	adds	r3, #132	@ 0x84
 80046ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	6812      	ldr	r2, [r2, #0]
 80046f0:	4611      	mov	r1, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	01d2      	lsls	r2, r2, #7
 80046f6:	440a      	add	r2, r1
 80046f8:	3284      	adds	r2, #132	@ 0x84
 80046fa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80046fe:	f023 0307 	bic.w	r3, r3, #7
 8004702:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	461a      	mov	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	01db      	lsls	r3, r3, #7
 800470e:	4413      	add	r3, r2
 8004710:	3384      	adds	r3, #132	@ 0x84
 8004712:	461a      	mov	r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004718:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	01db      	lsls	r3, r3, #7
 8004724:	4413      	add	r3, r2
 8004726:	3384      	adds	r3, #132	@ 0x84
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	6812      	ldr	r2, [r2, #0]
 800472e:	4611      	mov	r1, r2
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	01d2      	lsls	r2, r2, #7
 8004734:	440a      	add	r2, r1
 8004736:	3284      	adds	r2, #132	@ 0x84
 8004738:	f043 0301 	orr.w	r3, r3, #1
 800473c:	6013      	str	r3, [r2, #0]
}
 800473e:	bf00      	nop
 8004740:	3724      	adds	r7, #36	@ 0x24
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
	...

0800474c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e267      	b.n	8004c2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d075      	beq.n	8004856 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800476a:	4b88      	ldr	r3, [pc, #544]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 030c 	and.w	r3, r3, #12
 8004772:	2b04      	cmp	r3, #4
 8004774:	d00c      	beq.n	8004790 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004776:	4b85      	ldr	r3, [pc, #532]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800477e:	2b08      	cmp	r3, #8
 8004780:	d112      	bne.n	80047a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004782:	4b82      	ldr	r3, [pc, #520]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800478a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800478e:	d10b      	bne.n	80047a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004790:	4b7e      	ldr	r3, [pc, #504]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d05b      	beq.n	8004854 <HAL_RCC_OscConfig+0x108>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d157      	bne.n	8004854 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e242      	b.n	8004c2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047b0:	d106      	bne.n	80047c0 <HAL_RCC_OscConfig+0x74>
 80047b2:	4b76      	ldr	r3, [pc, #472]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a75      	ldr	r2, [pc, #468]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 80047b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	e01d      	b.n	80047fc <HAL_RCC_OscConfig+0xb0>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047c8:	d10c      	bne.n	80047e4 <HAL_RCC_OscConfig+0x98>
 80047ca:	4b70      	ldr	r3, [pc, #448]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a6f      	ldr	r2, [pc, #444]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 80047d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	4b6d      	ldr	r3, [pc, #436]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a6c      	ldr	r2, [pc, #432]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 80047dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	e00b      	b.n	80047fc <HAL_RCC_OscConfig+0xb0>
 80047e4:	4b69      	ldr	r3, [pc, #420]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a68      	ldr	r2, [pc, #416]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 80047ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	4b66      	ldr	r3, [pc, #408]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a65      	ldr	r2, [pc, #404]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 80047f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d013      	beq.n	800482c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004804:	f7fe f874 	bl	80028f0 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800480c:	f7fe f870 	bl	80028f0 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b64      	cmp	r3, #100	@ 0x64
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e207      	b.n	8004c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481e:	4b5b      	ldr	r3, [pc, #364]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f0      	beq.n	800480c <HAL_RCC_OscConfig+0xc0>
 800482a:	e014      	b.n	8004856 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800482c:	f7fe f860 	bl	80028f0 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004834:	f7fe f85c 	bl	80028f0 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b64      	cmp	r3, #100	@ 0x64
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e1f3      	b.n	8004c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004846:	4b51      	ldr	r3, [pc, #324]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f0      	bne.n	8004834 <HAL_RCC_OscConfig+0xe8>
 8004852:	e000      	b.n	8004856 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d063      	beq.n	800492a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004862:	4b4a      	ldr	r3, [pc, #296]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 030c 	and.w	r3, r3, #12
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00b      	beq.n	8004886 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800486e:	4b47      	ldr	r3, [pc, #284]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004876:	2b08      	cmp	r3, #8
 8004878:	d11c      	bne.n	80048b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800487a:	4b44      	ldr	r3, [pc, #272]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d116      	bne.n	80048b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004886:	4b41      	ldr	r3, [pc, #260]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d005      	beq.n	800489e <HAL_RCC_OscConfig+0x152>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d001      	beq.n	800489e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e1c7      	b.n	8004c2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800489e:	4b3b      	ldr	r3, [pc, #236]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	4937      	ldr	r1, [pc, #220]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b2:	e03a      	b.n	800492a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d020      	beq.n	80048fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048bc:	4b34      	ldr	r3, [pc, #208]	@ (8004990 <HAL_RCC_OscConfig+0x244>)
 80048be:	2201      	movs	r2, #1
 80048c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c2:	f7fe f815 	bl	80028f0 <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ca:	f7fe f811 	bl	80028f0 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e1a8      	b.n	8004c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048dc:	4b2b      	ldr	r3, [pc, #172]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0f0      	beq.n	80048ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e8:	4b28      	ldr	r3, [pc, #160]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	4925      	ldr	r1, [pc, #148]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	600b      	str	r3, [r1, #0]
 80048fc:	e015      	b.n	800492a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048fe:	4b24      	ldr	r3, [pc, #144]	@ (8004990 <HAL_RCC_OscConfig+0x244>)
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004904:	f7fd fff4 	bl	80028f0 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800490c:	f7fd fff0 	bl	80028f0 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e187      	b.n	8004c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800491e:	4b1b      	ldr	r3, [pc, #108]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f0      	bne.n	800490c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b00      	cmp	r3, #0
 8004934:	d036      	beq.n	80049a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d016      	beq.n	800496c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800493e:	4b15      	ldr	r3, [pc, #84]	@ (8004994 <HAL_RCC_OscConfig+0x248>)
 8004940:	2201      	movs	r2, #1
 8004942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004944:	f7fd ffd4 	bl	80028f0 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800494c:	f7fd ffd0 	bl	80028f0 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e167      	b.n	8004c2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800495e:	4b0b      	ldr	r3, [pc, #44]	@ (800498c <HAL_RCC_OscConfig+0x240>)
 8004960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f0      	beq.n	800494c <HAL_RCC_OscConfig+0x200>
 800496a:	e01b      	b.n	80049a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800496c:	4b09      	ldr	r3, [pc, #36]	@ (8004994 <HAL_RCC_OscConfig+0x248>)
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004972:	f7fd ffbd 	bl	80028f0 <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004978:	e00e      	b.n	8004998 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800497a:	f7fd ffb9 	bl	80028f0 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d907      	bls.n	8004998 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e150      	b.n	8004c2e <HAL_RCC_OscConfig+0x4e2>
 800498c:	40023800 	.word	0x40023800
 8004990:	42470000 	.word	0x42470000
 8004994:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004998:	4b88      	ldr	r3, [pc, #544]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 800499a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1ea      	bne.n	800497a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 8097 	beq.w	8004ae0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049b2:	2300      	movs	r3, #0
 80049b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049b6:	4b81      	ldr	r3, [pc, #516]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 80049b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10f      	bne.n	80049e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049c2:	2300      	movs	r3, #0
 80049c4:	60bb      	str	r3, [r7, #8]
 80049c6:	4b7d      	ldr	r3, [pc, #500]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 80049c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ca:	4a7c      	ldr	r2, [pc, #496]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 80049cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80049d2:	4b7a      	ldr	r3, [pc, #488]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 80049d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049de:	2301      	movs	r3, #1
 80049e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e2:	4b77      	ldr	r3, [pc, #476]	@ (8004bc0 <HAL_RCC_OscConfig+0x474>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d118      	bne.n	8004a20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ee:	4b74      	ldr	r3, [pc, #464]	@ (8004bc0 <HAL_RCC_OscConfig+0x474>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a73      	ldr	r2, [pc, #460]	@ (8004bc0 <HAL_RCC_OscConfig+0x474>)
 80049f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049fa:	f7fd ff79 	bl	80028f0 <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a02:	f7fd ff75 	bl	80028f0 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e10c      	b.n	8004c2e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a14:	4b6a      	ldr	r3, [pc, #424]	@ (8004bc0 <HAL_RCC_OscConfig+0x474>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0f0      	beq.n	8004a02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d106      	bne.n	8004a36 <HAL_RCC_OscConfig+0x2ea>
 8004a28:	4b64      	ldr	r3, [pc, #400]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 8004a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a2c:	4a63      	ldr	r2, [pc, #396]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 8004a2e:	f043 0301 	orr.w	r3, r3, #1
 8004a32:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a34:	e01c      	b.n	8004a70 <HAL_RCC_OscConfig+0x324>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	2b05      	cmp	r3, #5
 8004a3c:	d10c      	bne.n	8004a58 <HAL_RCC_OscConfig+0x30c>
 8004a3e:	4b5f      	ldr	r3, [pc, #380]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 8004a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a42:	4a5e      	ldr	r2, [pc, #376]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 8004a44:	f043 0304 	orr.w	r3, r3, #4
 8004a48:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a4a:	4b5c      	ldr	r3, [pc, #368]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a4e:	4a5b      	ldr	r2, [pc, #364]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 8004a50:	f043 0301 	orr.w	r3, r3, #1
 8004a54:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a56:	e00b      	b.n	8004a70 <HAL_RCC_OscConfig+0x324>
 8004a58:	4b58      	ldr	r3, [pc, #352]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 8004a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a5c:	4a57      	ldr	r2, [pc, #348]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 8004a5e:	f023 0301 	bic.w	r3, r3, #1
 8004a62:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a64:	4b55      	ldr	r3, [pc, #340]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 8004a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a68:	4a54      	ldr	r2, [pc, #336]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 8004a6a:	f023 0304 	bic.w	r3, r3, #4
 8004a6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d015      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a78:	f7fd ff3a 	bl	80028f0 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a7e:	e00a      	b.n	8004a96 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a80:	f7fd ff36 	bl	80028f0 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e0cb      	b.n	8004c2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a96:	4b49      	ldr	r3, [pc, #292]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 8004a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0ee      	beq.n	8004a80 <HAL_RCC_OscConfig+0x334>
 8004aa2:	e014      	b.n	8004ace <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa4:	f7fd ff24 	bl	80028f0 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aaa:	e00a      	b.n	8004ac2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aac:	f7fd ff20 	bl	80028f0 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e0b5      	b.n	8004c2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 8004ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1ee      	bne.n	8004aac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ace:	7dfb      	ldrb	r3, [r7, #23]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d105      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ad4:	4b39      	ldr	r3, [pc, #228]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad8:	4a38      	ldr	r2, [pc, #224]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 8004ada:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ade:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 80a1 	beq.w	8004c2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aea:	4b34      	ldr	r3, [pc, #208]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	2b08      	cmp	r3, #8
 8004af4:	d05c      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d141      	bne.n	8004b82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004afe:	4b31      	ldr	r3, [pc, #196]	@ (8004bc4 <HAL_RCC_OscConfig+0x478>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b04:	f7fd fef4 	bl	80028f0 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b0c:	f7fd fef0 	bl	80028f0 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e087      	b.n	8004c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b1e:	4b27      	ldr	r3, [pc, #156]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f0      	bne.n	8004b0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69da      	ldr	r2, [r3, #28]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	431a      	orrs	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b38:	019b      	lsls	r3, r3, #6
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b40:	085b      	lsrs	r3, r3, #1
 8004b42:	3b01      	subs	r3, #1
 8004b44:	041b      	lsls	r3, r3, #16
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4c:	061b      	lsls	r3, r3, #24
 8004b4e:	491b      	ldr	r1, [pc, #108]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b54:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc4 <HAL_RCC_OscConfig+0x478>)
 8004b56:	2201      	movs	r2, #1
 8004b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5a:	f7fd fec9 	bl	80028f0 <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b62:	f7fd fec5 	bl	80028f0 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e05c      	b.n	8004c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b74:	4b11      	ldr	r3, [pc, #68]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0f0      	beq.n	8004b62 <HAL_RCC_OscConfig+0x416>
 8004b80:	e054      	b.n	8004c2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b82:	4b10      	ldr	r3, [pc, #64]	@ (8004bc4 <HAL_RCC_OscConfig+0x478>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b88:	f7fd feb2 	bl	80028f0 <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b90:	f7fd feae 	bl	80028f0 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e045      	b.n	8004c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ba2:	4b06      	ldr	r3, [pc, #24]	@ (8004bbc <HAL_RCC_OscConfig+0x470>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f0      	bne.n	8004b90 <HAL_RCC_OscConfig+0x444>
 8004bae:	e03d      	b.n	8004c2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d107      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e038      	b.n	8004c2e <HAL_RCC_OscConfig+0x4e2>
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	40007000 	.word	0x40007000
 8004bc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8004c38 <HAL_RCC_OscConfig+0x4ec>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d028      	beq.n	8004c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d121      	bne.n	8004c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d11a      	bne.n	8004c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d111      	bne.n	8004c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0e:	085b      	lsrs	r3, r3, #1
 8004c10:	3b01      	subs	r3, #1
 8004c12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d107      	bne.n	8004c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d001      	beq.n	8004c2c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e000      	b.n	8004c2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40023800 	.word	0x40023800

08004c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e0cc      	b.n	8004dea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c50:	4b68      	ldr	r3, [pc, #416]	@ (8004df4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 030f 	and.w	r3, r3, #15
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d90c      	bls.n	8004c78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5e:	4b65      	ldr	r3, [pc, #404]	@ (8004df4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c66:	4b63      	ldr	r3, [pc, #396]	@ (8004df4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d001      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e0b8      	b.n	8004dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d020      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d005      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c90:	4b59      	ldr	r3, [pc, #356]	@ (8004df8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	4a58      	ldr	r2, [pc, #352]	@ (8004df8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d005      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ca8:	4b53      	ldr	r3, [pc, #332]	@ (8004df8 <HAL_RCC_ClockConfig+0x1bc>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	4a52      	ldr	r2, [pc, #328]	@ (8004df8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004cb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb4:	4b50      	ldr	r3, [pc, #320]	@ (8004df8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	494d      	ldr	r1, [pc, #308]	@ (8004df8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d044      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d107      	bne.n	8004cea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cda:	4b47      	ldr	r3, [pc, #284]	@ (8004df8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d119      	bne.n	8004d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e07f      	b.n	8004dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d003      	beq.n	8004cfa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d107      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cfa:	4b3f      	ldr	r3, [pc, #252]	@ (8004df8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d109      	bne.n	8004d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e06f      	b.n	8004dea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8004df8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e067      	b.n	8004dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d1a:	4b37      	ldr	r3, [pc, #220]	@ (8004df8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f023 0203 	bic.w	r2, r3, #3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	4934      	ldr	r1, [pc, #208]	@ (8004df8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d2c:	f7fd fde0 	bl	80028f0 <HAL_GetTick>
 8004d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d32:	e00a      	b.n	8004d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d34:	f7fd fddc 	bl	80028f0 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e04f      	b.n	8004dea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8004df8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 020c 	and.w	r2, r3, #12
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d1eb      	bne.n	8004d34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d5c:	4b25      	ldr	r3, [pc, #148]	@ (8004df4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 030f 	and.w	r3, r3, #15
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d20c      	bcs.n	8004d84 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d6a:	4b22      	ldr	r3, [pc, #136]	@ (8004df4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d72:	4b20      	ldr	r3, [pc, #128]	@ (8004df4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d001      	beq.n	8004d84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e032      	b.n	8004dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d008      	beq.n	8004da2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d90:	4b19      	ldr	r3, [pc, #100]	@ (8004df8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	4916      	ldr	r1, [pc, #88]	@ (8004df8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d009      	beq.n	8004dc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dae:	4b12      	ldr	r3, [pc, #72]	@ (8004df8 <HAL_RCC_ClockConfig+0x1bc>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	490e      	ldr	r1, [pc, #56]	@ (8004df8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dc2:	f000 f821 	bl	8004e08 <HAL_RCC_GetSysClockFreq>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004df8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	091b      	lsrs	r3, r3, #4
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	490a      	ldr	r1, [pc, #40]	@ (8004dfc <HAL_RCC_ClockConfig+0x1c0>)
 8004dd4:	5ccb      	ldrb	r3, [r1, r3]
 8004dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dda:	4a09      	ldr	r2, [pc, #36]	@ (8004e00 <HAL_RCC_ClockConfig+0x1c4>)
 8004ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004dde:	4b09      	ldr	r3, [pc, #36]	@ (8004e04 <HAL_RCC_ClockConfig+0x1c8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fd fd40 	bl	8002868 <HAL_InitTick>

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	40023c00 	.word	0x40023c00
 8004df8:	40023800 	.word	0x40023800
 8004dfc:	080080b8 	.word	0x080080b8
 8004e00:	20000010 	.word	0x20000010
 8004e04:	20000014 	.word	0x20000014

08004e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e0c:	b094      	sub	sp, #80	@ 0x50
 8004e0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e20:	4b79      	ldr	r3, [pc, #484]	@ (8005008 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f003 030c 	and.w	r3, r3, #12
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	d00d      	beq.n	8004e48 <HAL_RCC_GetSysClockFreq+0x40>
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	f200 80e1 	bhi.w	8004ff4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <HAL_RCC_GetSysClockFreq+0x34>
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d003      	beq.n	8004e42 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e3a:	e0db      	b.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e3c:	4b73      	ldr	r3, [pc, #460]	@ (800500c <HAL_RCC_GetSysClockFreq+0x204>)
 8004e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e40:	e0db      	b.n	8004ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e42:	4b73      	ldr	r3, [pc, #460]	@ (8005010 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e46:	e0d8      	b.n	8004ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e48:	4b6f      	ldr	r3, [pc, #444]	@ (8005008 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e50:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e52:	4b6d      	ldr	r3, [pc, #436]	@ (8005008 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d063      	beq.n	8004f26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e5e:	4b6a      	ldr	r3, [pc, #424]	@ (8005008 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	099b      	lsrs	r3, r3, #6
 8004e64:	2200      	movs	r2, #0
 8004e66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e68:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e70:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e72:	2300      	movs	r3, #0
 8004e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004e7a:	4622      	mov	r2, r4
 8004e7c:	462b      	mov	r3, r5
 8004e7e:	f04f 0000 	mov.w	r0, #0
 8004e82:	f04f 0100 	mov.w	r1, #0
 8004e86:	0159      	lsls	r1, r3, #5
 8004e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e8c:	0150      	lsls	r0, r2, #5
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4621      	mov	r1, r4
 8004e94:	1a51      	subs	r1, r2, r1
 8004e96:	6139      	str	r1, [r7, #16]
 8004e98:	4629      	mov	r1, r5
 8004e9a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004eac:	4659      	mov	r1, fp
 8004eae:	018b      	lsls	r3, r1, #6
 8004eb0:	4651      	mov	r1, sl
 8004eb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004eb6:	4651      	mov	r1, sl
 8004eb8:	018a      	lsls	r2, r1, #6
 8004eba:	4651      	mov	r1, sl
 8004ebc:	ebb2 0801 	subs.w	r8, r2, r1
 8004ec0:	4659      	mov	r1, fp
 8004ec2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	f04f 0300 	mov.w	r3, #0
 8004ece:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ed2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ed6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eda:	4690      	mov	r8, r2
 8004edc:	4699      	mov	r9, r3
 8004ede:	4623      	mov	r3, r4
 8004ee0:	eb18 0303 	adds.w	r3, r8, r3
 8004ee4:	60bb      	str	r3, [r7, #8]
 8004ee6:	462b      	mov	r3, r5
 8004ee8:	eb49 0303 	adc.w	r3, r9, r3
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	f04f 0200 	mov.w	r2, #0
 8004ef2:	f04f 0300 	mov.w	r3, #0
 8004ef6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004efa:	4629      	mov	r1, r5
 8004efc:	024b      	lsls	r3, r1, #9
 8004efe:	4621      	mov	r1, r4
 8004f00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f04:	4621      	mov	r1, r4
 8004f06:	024a      	lsls	r2, r1, #9
 8004f08:	4610      	mov	r0, r2
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f0e:	2200      	movs	r2, #0
 8004f10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f18:	f7fb f9ba 	bl	8000290 <__aeabi_uldivmod>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4613      	mov	r3, r2
 8004f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f24:	e058      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f26:	4b38      	ldr	r3, [pc, #224]	@ (8005008 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	099b      	lsrs	r3, r3, #6
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	4618      	mov	r0, r3
 8004f30:	4611      	mov	r1, r2
 8004f32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f36:	623b      	str	r3, [r7, #32]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f40:	4642      	mov	r2, r8
 8004f42:	464b      	mov	r3, r9
 8004f44:	f04f 0000 	mov.w	r0, #0
 8004f48:	f04f 0100 	mov.w	r1, #0
 8004f4c:	0159      	lsls	r1, r3, #5
 8004f4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f52:	0150      	lsls	r0, r2, #5
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4641      	mov	r1, r8
 8004f5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f5e:	4649      	mov	r1, r9
 8004f60:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	f04f 0300 	mov.w	r3, #0
 8004f6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f78:	ebb2 040a 	subs.w	r4, r2, sl
 8004f7c:	eb63 050b 	sbc.w	r5, r3, fp
 8004f80:	f04f 0200 	mov.w	r2, #0
 8004f84:	f04f 0300 	mov.w	r3, #0
 8004f88:	00eb      	lsls	r3, r5, #3
 8004f8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f8e:	00e2      	lsls	r2, r4, #3
 8004f90:	4614      	mov	r4, r2
 8004f92:	461d      	mov	r5, r3
 8004f94:	4643      	mov	r3, r8
 8004f96:	18e3      	adds	r3, r4, r3
 8004f98:	603b      	str	r3, [r7, #0]
 8004f9a:	464b      	mov	r3, r9
 8004f9c:	eb45 0303 	adc.w	r3, r5, r3
 8004fa0:	607b      	str	r3, [r7, #4]
 8004fa2:	f04f 0200 	mov.w	r2, #0
 8004fa6:	f04f 0300 	mov.w	r3, #0
 8004faa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fae:	4629      	mov	r1, r5
 8004fb0:	028b      	lsls	r3, r1, #10
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fb8:	4621      	mov	r1, r4
 8004fba:	028a      	lsls	r2, r1, #10
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	61bb      	str	r3, [r7, #24]
 8004fc6:	61fa      	str	r2, [r7, #28]
 8004fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fcc:	f7fb f960 	bl	8000290 <__aeabi_uldivmod>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8005008 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	0c1b      	lsrs	r3, r3, #16
 8004fde:	f003 0303 	and.w	r3, r3, #3
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004fe8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ff2:	e002      	b.n	8004ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ff4:	4b05      	ldr	r3, [pc, #20]	@ (800500c <HAL_RCC_GetSysClockFreq+0x204>)
 8004ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ffa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3750      	adds	r7, #80	@ 0x50
 8005000:	46bd      	mov	sp, r7
 8005002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005006:	bf00      	nop
 8005008:	40023800 	.word	0x40023800
 800500c:	00f42400 	.word	0x00f42400
 8005010:	007a1200 	.word	0x007a1200

08005014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005018:	4b03      	ldr	r3, [pc, #12]	@ (8005028 <HAL_RCC_GetHCLKFreq+0x14>)
 800501a:	681b      	ldr	r3, [r3, #0]
}
 800501c:	4618      	mov	r0, r3
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	20000010 	.word	0x20000010

0800502c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005030:	f7ff fff0 	bl	8005014 <HAL_RCC_GetHCLKFreq>
 8005034:	4602      	mov	r2, r0
 8005036:	4b05      	ldr	r3, [pc, #20]	@ (800504c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	0a9b      	lsrs	r3, r3, #10
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	4903      	ldr	r1, [pc, #12]	@ (8005050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005042:	5ccb      	ldrb	r3, [r1, r3]
 8005044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005048:	4618      	mov	r0, r3
 800504a:	bd80      	pop	{r7, pc}
 800504c:	40023800 	.word	0x40023800
 8005050:	080080c8 	.word	0x080080c8

08005054 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10b      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005078:	2b00      	cmp	r3, #0
 800507a:	d105      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005084:	2b00      	cmp	r3, #0
 8005086:	d075      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005088:	4b91      	ldr	r3, [pc, #580]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800508e:	f7fd fc2f 	bl	80028f0 <HAL_GetTick>
 8005092:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005094:	e008      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005096:	f7fd fc2b 	bl	80028f0 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e189      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050a8:	4b8a      	ldr	r3, [pc, #552]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1f0      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d009      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	019a      	lsls	r2, r3, #6
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	071b      	lsls	r3, r3, #28
 80050cc:	4981      	ldr	r1, [pc, #516]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01f      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050e0:	4b7c      	ldr	r3, [pc, #496]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050e6:	0f1b      	lsrs	r3, r3, #28
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	019a      	lsls	r2, r3, #6
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	061b      	lsls	r3, r3, #24
 80050fa:	431a      	orrs	r2, r3
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	071b      	lsls	r3, r3, #28
 8005100:	4974      	ldr	r1, [pc, #464]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005102:	4313      	orrs	r3, r2
 8005104:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005108:	4b72      	ldr	r3, [pc, #456]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800510a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800510e:	f023 021f 	bic.w	r2, r3, #31
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	3b01      	subs	r3, #1
 8005118:	496e      	ldr	r1, [pc, #440]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00d      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	019a      	lsls	r2, r3, #6
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	061b      	lsls	r3, r3, #24
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	071b      	lsls	r3, r3, #28
 8005140:	4964      	ldr	r1, [pc, #400]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005148:	4b61      	ldr	r3, [pc, #388]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800514a:	2201      	movs	r2, #1
 800514c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800514e:	f7fd fbcf 	bl	80028f0 <HAL_GetTick>
 8005152:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005154:	e008      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005156:	f7fd fbcb 	bl	80028f0 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e129      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005168:	4b5a      	ldr	r3, [pc, #360]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f0      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	d105      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005188:	2b00      	cmp	r3, #0
 800518a:	d079      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800518c:	4b52      	ldr	r3, [pc, #328]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005192:	f7fd fbad 	bl	80028f0 <HAL_GetTick>
 8005196:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005198:	e008      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800519a:	f7fd fba9 	bl	80028f0 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e107      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051ac:	4b49      	ldr	r3, [pc, #292]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051b8:	d0ef      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0304 	and.w	r3, r3, #4
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d020      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051c6:	4b43      	ldr	r3, [pc, #268]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051cc:	0f1b      	lsrs	r3, r3, #28
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	019a      	lsls	r2, r3, #6
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	061b      	lsls	r3, r3, #24
 80051e0:	431a      	orrs	r2, r3
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	071b      	lsls	r3, r3, #28
 80051e6:	493b      	ldr	r1, [pc, #236]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80051ee:	4b39      	ldr	r3, [pc, #228]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051f4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	3b01      	subs	r3, #1
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	4934      	ldr	r1, [pc, #208]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005202:	4313      	orrs	r3, r2
 8005204:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0308 	and.w	r3, r3, #8
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01e      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005214:	4b2f      	ldr	r3, [pc, #188]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800521a:	0e1b      	lsrs	r3, r3, #24
 800521c:	f003 030f 	and.w	r3, r3, #15
 8005220:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	019a      	lsls	r2, r3, #6
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	061b      	lsls	r3, r3, #24
 800522c:	431a      	orrs	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	071b      	lsls	r3, r3, #28
 8005234:	4927      	ldr	r1, [pc, #156]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800523c:	4b25      	ldr	r3, [pc, #148]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800523e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005242:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524a:	4922      	ldr	r1, [pc, #136]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800524c:	4313      	orrs	r3, r2
 800524e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005252:	4b21      	ldr	r3, [pc, #132]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005254:	2201      	movs	r2, #1
 8005256:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005258:	f7fd fb4a 	bl	80028f0 <HAL_GetTick>
 800525c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800525e:	e008      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005260:	f7fd fb46 	bl	80028f0 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e0a4      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005272:	4b18      	ldr	r3, [pc, #96]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800527a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800527e:	d1ef      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0320 	and.w	r3, r3, #32
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 808b 	beq.w	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800528e:	2300      	movs	r3, #0
 8005290:	60fb      	str	r3, [r7, #12]
 8005292:	4b10      	ldr	r3, [pc, #64]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005296:	4a0f      	ldr	r2, [pc, #60]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800529c:	6413      	str	r3, [r2, #64]	@ 0x40
 800529e:	4b0d      	ldr	r3, [pc, #52]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80052aa:	4b0c      	ldr	r3, [pc, #48]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a0b      	ldr	r2, [pc, #44]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80052b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052b6:	f7fd fb1b 	bl	80028f0 <HAL_GetTick>
 80052ba:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80052bc:	e010      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052be:	f7fd fb17 	bl	80028f0 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d909      	bls.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e075      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x368>
 80052d0:	42470068 	.word	0x42470068
 80052d4:	40023800 	.word	0x40023800
 80052d8:	42470070 	.word	0x42470070
 80052dc:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80052e0:	4b38      	ldr	r3, [pc, #224]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0e8      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052ec:	4b36      	ldr	r3, [pc, #216]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052f4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d02f      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005300:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	429a      	cmp	r2, r3
 8005308:	d028      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800530a:	4b2f      	ldr	r3, [pc, #188]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005312:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005314:	4b2d      	ldr	r3, [pc, #180]	@ (80053cc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005316:	2201      	movs	r2, #1
 8005318:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800531a:	4b2c      	ldr	r3, [pc, #176]	@ (80053cc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800531c:	2200      	movs	r2, #0
 800531e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005320:	4a29      	ldr	r2, [pc, #164]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005326:	4b28      	ldr	r3, [pc, #160]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b01      	cmp	r3, #1
 8005330:	d114      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005332:	f7fd fadd 	bl	80028f0 <HAL_GetTick>
 8005336:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005338:	e00a      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533a:	f7fd fad9 	bl	80028f0 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005348:	4293      	cmp	r3, r2
 800534a:	d901      	bls.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e035      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005350:	4b1d      	ldr	r3, [pc, #116]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0ee      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005360:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005364:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005368:	d10d      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800536a:	4b17      	ldr	r3, [pc, #92]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005376:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800537a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800537e:	4912      	ldr	r1, [pc, #72]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005380:	4313      	orrs	r3, r2
 8005382:	608b      	str	r3, [r1, #8]
 8005384:	e005      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005386:	4b10      	ldr	r3, [pc, #64]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	4a0f      	ldr	r2, [pc, #60]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800538c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005390:	6093      	str	r3, [r2, #8]
 8005392:	4b0d      	ldr	r3, [pc, #52]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005394:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800539e:	490a      	ldr	r1, [pc, #40]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0310 	and.w	r3, r3, #16
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d004      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80053b6:	4b06      	ldr	r3, [pc, #24]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80053b8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3718      	adds	r7, #24
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40007000 	.word	0x40007000
 80053c8:	40023800 	.word	0x40023800
 80053cc:	42470e40 	.word	0x42470e40
 80053d0:	424711e0 	.word	0x424711e0

080053d4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e01c      	b.n	8005420 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	795b      	ldrb	r3, [r3, #5]
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d105      	bne.n	80053fc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fc fd0c 	bl	8001e14 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 0204 	orr.w	r2, r2, #4
 8005410:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e07b      	b.n	8005532 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543e:	2b00      	cmp	r3, #0
 8005440:	d108      	bne.n	8005454 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800544a:	d009      	beq.n	8005460 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	61da      	str	r2, [r3, #28]
 8005452:	e005      	b.n	8005460 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d106      	bne.n	8005480 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7fc fcec 	bl	8001e58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005496:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e4:	ea42 0103 	orr.w	r1, r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	0c1b      	lsrs	r3, r3, #16
 80054fe:	f003 0104 	and.w	r1, r3, #4
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005506:	f003 0210 	and.w	r2, r3, #16
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005520:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b082      	sub	sp, #8
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e01a      	b.n	8005582 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005562:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7fc fcbf 	bl	8001ee8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b088      	sub	sp, #32
 800558e:	af00      	add	r7, sp, #0
 8005590:	60f8      	str	r0, [r7, #12]
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	603b      	str	r3, [r7, #0]
 8005596:	4613      	mov	r3, r2
 8005598:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800559a:	f7fd f9a9 	bl	80028f0 <HAL_GetTick>
 800559e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80055a0:	88fb      	ldrh	r3, [r7, #6]
 80055a2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d001      	beq.n	80055b4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80055b0:	2302      	movs	r3, #2
 80055b2:	e12a      	b.n	800580a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <HAL_SPI_Transmit+0x36>
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e122      	b.n	800580a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d101      	bne.n	80055d2 <HAL_SPI_Transmit+0x48>
 80055ce:	2302      	movs	r3, #2
 80055d0:	e11b      	b.n	800580a <HAL_SPI_Transmit+0x280>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2203      	movs	r2, #3
 80055de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	88fa      	ldrh	r2, [r7, #6]
 80055f2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	88fa      	ldrh	r2, [r7, #6]
 80055f8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005620:	d10f      	bne.n	8005642 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005630:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005640:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800564c:	2b40      	cmp	r3, #64	@ 0x40
 800564e:	d007      	beq.n	8005660 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800565e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005668:	d152      	bne.n	8005710 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <HAL_SPI_Transmit+0xee>
 8005672:	8b7b      	ldrh	r3, [r7, #26]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d145      	bne.n	8005704 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800567c:	881a      	ldrh	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005688:	1c9a      	adds	r2, r3, #2
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005692:	b29b      	uxth	r3, r3
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800569c:	e032      	b.n	8005704 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d112      	bne.n	80056d2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b0:	881a      	ldrh	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056bc:	1c9a      	adds	r2, r3, #2
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	86da      	strh	r2, [r3, #54]	@ 0x36
 80056d0:	e018      	b.n	8005704 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056d2:	f7fd f90d 	bl	80028f0 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d803      	bhi.n	80056ea <HAL_SPI_Transmit+0x160>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056e8:	d102      	bne.n	80056f0 <HAL_SPI_Transmit+0x166>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d109      	bne.n	8005704 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e082      	b.n	800580a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005708:	b29b      	uxth	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1c7      	bne.n	800569e <HAL_SPI_Transmit+0x114>
 800570e:	e053      	b.n	80057b8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <HAL_SPI_Transmit+0x194>
 8005718:	8b7b      	ldrh	r3, [r7, #26]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d147      	bne.n	80057ae <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	330c      	adds	r3, #12
 8005728:	7812      	ldrb	r2, [r2, #0]
 800572a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800573a:	b29b      	uxth	r3, r3
 800573c:	3b01      	subs	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005744:	e033      	b.n	80057ae <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b02      	cmp	r3, #2
 8005752:	d113      	bne.n	800577c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	330c      	adds	r3, #12
 800575e:	7812      	ldrb	r2, [r2, #0]
 8005760:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005770:	b29b      	uxth	r3, r3
 8005772:	3b01      	subs	r3, #1
 8005774:	b29a      	uxth	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	86da      	strh	r2, [r3, #54]	@ 0x36
 800577a:	e018      	b.n	80057ae <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800577c:	f7fd f8b8 	bl	80028f0 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	429a      	cmp	r2, r3
 800578a:	d803      	bhi.n	8005794 <HAL_SPI_Transmit+0x20a>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005792:	d102      	bne.n	800579a <HAL_SPI_Transmit+0x210>
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d109      	bne.n	80057ae <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e02d      	b.n	800580a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1c6      	bne.n	8005746 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057b8:	69fa      	ldr	r2, [r7, #28]
 80057ba:	6839      	ldr	r1, [r7, #0]
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 f8bf 	bl	8005940 <SPI_EndRxTxTransaction>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057d6:	2300      	movs	r3, #0
 80057d8:	617b      	str	r3, [r7, #20]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	617b      	str	r3, [r7, #20]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e000      	b.n	800580a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005808:	2300      	movs	r3, #0
  }
}
 800580a:	4618      	mov	r0, r3
 800580c:	3720      	adds	r7, #32
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005820:	b2db      	uxtb	r3, r3
}
 8005822:	4618      	mov	r0, r3
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
	...

08005830 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b088      	sub	sp, #32
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	4613      	mov	r3, r2
 800583e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005840:	f7fd f856 	bl	80028f0 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005848:	1a9b      	subs	r3, r3, r2
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	4413      	add	r3, r2
 800584e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005850:	f7fd f84e 	bl	80028f0 <HAL_GetTick>
 8005854:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005856:	4b39      	ldr	r3, [pc, #228]	@ (800593c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	015b      	lsls	r3, r3, #5
 800585c:	0d1b      	lsrs	r3, r3, #20
 800585e:	69fa      	ldr	r2, [r7, #28]
 8005860:	fb02 f303 	mul.w	r3, r2, r3
 8005864:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005866:	e054      	b.n	8005912 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800586e:	d050      	beq.n	8005912 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005870:	f7fd f83e 	bl	80028f0 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	429a      	cmp	r2, r3
 800587e:	d902      	bls.n	8005886 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d13d      	bne.n	8005902 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005894:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800589e:	d111      	bne.n	80058c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058a8:	d004      	beq.n	80058b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058b2:	d107      	bne.n	80058c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058cc:	d10f      	bne.n	80058ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e017      	b.n	8005932 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	3b01      	subs	r3, #1
 8005910:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	4013      	ands	r3, r2
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	429a      	cmp	r2, r3
 8005920:	bf0c      	ite	eq
 8005922:	2301      	moveq	r3, #1
 8005924:	2300      	movne	r3, #0
 8005926:	b2db      	uxtb	r3, r3
 8005928:	461a      	mov	r2, r3
 800592a:	79fb      	ldrb	r3, [r7, #7]
 800592c:	429a      	cmp	r2, r3
 800592e:	d19b      	bne.n	8005868 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3720      	adds	r7, #32
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000010 	.word	0x20000010

08005940 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b088      	sub	sp, #32
 8005944:	af02      	add	r7, sp, #8
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2201      	movs	r2, #1
 8005954:	2102      	movs	r1, #2
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f7ff ff6a 	bl	8005830 <SPI_WaitFlagStateUntilTimeout>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d007      	beq.n	8005972 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005966:	f043 0220 	orr.w	r2, r3, #32
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e032      	b.n	80059d8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005972:	4b1b      	ldr	r3, [pc, #108]	@ (80059e0 <SPI_EndRxTxTransaction+0xa0>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a1b      	ldr	r2, [pc, #108]	@ (80059e4 <SPI_EndRxTxTransaction+0xa4>)
 8005978:	fba2 2303 	umull	r2, r3, r2, r3
 800597c:	0d5b      	lsrs	r3, r3, #21
 800597e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005982:	fb02 f303 	mul.w	r3, r2, r3
 8005986:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005990:	d112      	bne.n	80059b8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2200      	movs	r2, #0
 800599a:	2180      	movs	r1, #128	@ 0x80
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f7ff ff47 	bl	8005830 <SPI_WaitFlagStateUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d016      	beq.n	80059d6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ac:	f043 0220 	orr.w	r2, r3, #32
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e00f      	b.n	80059d8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ce:	2b80      	cmp	r3, #128	@ 0x80
 80059d0:	d0f2      	beq.n	80059b8 <SPI_EndRxTxTransaction+0x78>
 80059d2:	e000      	b.n	80059d6 <SPI_EndRxTxTransaction+0x96>
        break;
 80059d4:	bf00      	nop
  }

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3718      	adds	r7, #24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	20000010 	.word	0x20000010
 80059e4:	165e9f81 	.word	0x165e9f81

080059e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e041      	b.n	8005a7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fc fa88 	bl	8001f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3304      	adds	r3, #4
 8005a24:	4619      	mov	r1, r3
 8005a26:	4610      	mov	r0, r2
 8005a28:	f000 f8f4 	bl	8005c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_TIM_ConfigClockSource+0x1c>
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e0b4      	b.n	8005c0c <HAL_TIM_ConfigClockSource+0x186>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2202      	movs	r2, #2
 8005aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ac0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ac8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ada:	d03e      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0xd4>
 8005adc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ae0:	f200 8087 	bhi.w	8005bf2 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ae8:	f000 8086 	beq.w	8005bf8 <HAL_TIM_ConfigClockSource+0x172>
 8005aec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005af0:	d87f      	bhi.n	8005bf2 <HAL_TIM_ConfigClockSource+0x16c>
 8005af2:	2b70      	cmp	r3, #112	@ 0x70
 8005af4:	d01a      	beq.n	8005b2c <HAL_TIM_ConfigClockSource+0xa6>
 8005af6:	2b70      	cmp	r3, #112	@ 0x70
 8005af8:	d87b      	bhi.n	8005bf2 <HAL_TIM_ConfigClockSource+0x16c>
 8005afa:	2b60      	cmp	r3, #96	@ 0x60
 8005afc:	d050      	beq.n	8005ba0 <HAL_TIM_ConfigClockSource+0x11a>
 8005afe:	2b60      	cmp	r3, #96	@ 0x60
 8005b00:	d877      	bhi.n	8005bf2 <HAL_TIM_ConfigClockSource+0x16c>
 8005b02:	2b50      	cmp	r3, #80	@ 0x50
 8005b04:	d03c      	beq.n	8005b80 <HAL_TIM_ConfigClockSource+0xfa>
 8005b06:	2b50      	cmp	r3, #80	@ 0x50
 8005b08:	d873      	bhi.n	8005bf2 <HAL_TIM_ConfigClockSource+0x16c>
 8005b0a:	2b40      	cmp	r3, #64	@ 0x40
 8005b0c:	d058      	beq.n	8005bc0 <HAL_TIM_ConfigClockSource+0x13a>
 8005b0e:	2b40      	cmp	r3, #64	@ 0x40
 8005b10:	d86f      	bhi.n	8005bf2 <HAL_TIM_ConfigClockSource+0x16c>
 8005b12:	2b30      	cmp	r3, #48	@ 0x30
 8005b14:	d064      	beq.n	8005be0 <HAL_TIM_ConfigClockSource+0x15a>
 8005b16:	2b30      	cmp	r3, #48	@ 0x30
 8005b18:	d86b      	bhi.n	8005bf2 <HAL_TIM_ConfigClockSource+0x16c>
 8005b1a:	2b20      	cmp	r3, #32
 8005b1c:	d060      	beq.n	8005be0 <HAL_TIM_ConfigClockSource+0x15a>
 8005b1e:	2b20      	cmp	r3, #32
 8005b20:	d867      	bhi.n	8005bf2 <HAL_TIM_ConfigClockSource+0x16c>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d05c      	beq.n	8005be0 <HAL_TIM_ConfigClockSource+0x15a>
 8005b26:	2b10      	cmp	r3, #16
 8005b28:	d05a      	beq.n	8005be0 <HAL_TIM_ConfigClockSource+0x15a>
 8005b2a:	e062      	b.n	8005bf2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b3c:	f000 f990 	bl	8005e60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b4e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	609a      	str	r2, [r3, #8]
      break;
 8005b58:	e04f      	b.n	8005bfa <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b6a:	f000 f979 	bl	8005e60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b7c:	609a      	str	r2, [r3, #8]
      break;
 8005b7e:	e03c      	b.n	8005bfa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	f000 f8ed 	bl	8005d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2150      	movs	r1, #80	@ 0x50
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 f946 	bl	8005e2a <TIM_ITRx_SetConfig>
      break;
 8005b9e:	e02c      	b.n	8005bfa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bac:	461a      	mov	r2, r3
 8005bae:	f000 f90c 	bl	8005dca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2160      	movs	r1, #96	@ 0x60
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 f936 	bl	8005e2a <TIM_ITRx_SetConfig>
      break;
 8005bbe:	e01c      	b.n	8005bfa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bcc:	461a      	mov	r2, r3
 8005bce:	f000 f8cd 	bl	8005d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2140      	movs	r1, #64	@ 0x40
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 f926 	bl	8005e2a <TIM_ITRx_SetConfig>
      break;
 8005bde:	e00c      	b.n	8005bfa <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4619      	mov	r1, r3
 8005bea:	4610      	mov	r0, r2
 8005bec:	f000 f91d 	bl	8005e2a <TIM_ITRx_SetConfig>
      break;
 8005bf0:	e003      	b.n	8005bfa <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	73fb      	strb	r3, [r7, #15]
      break;
 8005bf6:	e000      	b.n	8005bfa <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bf8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a46      	ldr	r2, [pc, #280]	@ (8005d40 <TIM_Base_SetConfig+0x12c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d013      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c32:	d00f      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a43      	ldr	r2, [pc, #268]	@ (8005d44 <TIM_Base_SetConfig+0x130>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00b      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a42      	ldr	r2, [pc, #264]	@ (8005d48 <TIM_Base_SetConfig+0x134>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d007      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a41      	ldr	r2, [pc, #260]	@ (8005d4c <TIM_Base_SetConfig+0x138>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d003      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a40      	ldr	r2, [pc, #256]	@ (8005d50 <TIM_Base_SetConfig+0x13c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d108      	bne.n	8005c66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a35      	ldr	r2, [pc, #212]	@ (8005d40 <TIM_Base_SetConfig+0x12c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d02b      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c74:	d027      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a32      	ldr	r2, [pc, #200]	@ (8005d44 <TIM_Base_SetConfig+0x130>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d023      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a31      	ldr	r2, [pc, #196]	@ (8005d48 <TIM_Base_SetConfig+0x134>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d01f      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a30      	ldr	r2, [pc, #192]	@ (8005d4c <TIM_Base_SetConfig+0x138>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d01b      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a2f      	ldr	r2, [pc, #188]	@ (8005d50 <TIM_Base_SetConfig+0x13c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d017      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a2e      	ldr	r2, [pc, #184]	@ (8005d54 <TIM_Base_SetConfig+0x140>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d013      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a2d      	ldr	r2, [pc, #180]	@ (8005d58 <TIM_Base_SetConfig+0x144>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00f      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a2c      	ldr	r2, [pc, #176]	@ (8005d5c <TIM_Base_SetConfig+0x148>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00b      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a2b      	ldr	r2, [pc, #172]	@ (8005d60 <TIM_Base_SetConfig+0x14c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d007      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a2a      	ldr	r2, [pc, #168]	@ (8005d64 <TIM_Base_SetConfig+0x150>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d003      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a29      	ldr	r2, [pc, #164]	@ (8005d68 <TIM_Base_SetConfig+0x154>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d108      	bne.n	8005cd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a10      	ldr	r2, [pc, #64]	@ (8005d40 <TIM_Base_SetConfig+0x12c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d003      	beq.n	8005d0c <TIM_Base_SetConfig+0xf8>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a12      	ldr	r2, [pc, #72]	@ (8005d50 <TIM_Base_SetConfig+0x13c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d103      	bne.n	8005d14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d105      	bne.n	8005d32 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f023 0201 	bic.w	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	611a      	str	r2, [r3, #16]
  }
}
 8005d32:	bf00      	nop
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	40010000 	.word	0x40010000
 8005d44:	40000400 	.word	0x40000400
 8005d48:	40000800 	.word	0x40000800
 8005d4c:	40000c00 	.word	0x40000c00
 8005d50:	40010400 	.word	0x40010400
 8005d54:	40014000 	.word	0x40014000
 8005d58:	40014400 	.word	0x40014400
 8005d5c:	40014800 	.word	0x40014800
 8005d60:	40001800 	.word	0x40001800
 8005d64:	40001c00 	.word	0x40001c00
 8005d68:	40002000 	.word	0x40002000

08005d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	f023 0201 	bic.w	r2, r3, #1
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f023 030a 	bic.w	r3, r3, #10
 8005da8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	621a      	str	r2, [r3, #32]
}
 8005dbe:	bf00      	nop
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b087      	sub	sp, #28
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	f023 0210 	bic.w	r2, r3, #16
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005df4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	031b      	lsls	r3, r3, #12
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	621a      	str	r2, [r3, #32]
}
 8005e1e:	bf00      	nop
 8005e20:	371c      	adds	r7, #28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	f043 0307 	orr.w	r3, r3, #7
 8005e4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	609a      	str	r2, [r3, #8]
}
 8005e54:	bf00      	nop
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	021a      	lsls	r2, r3, #8
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	431a      	orrs	r2, r3
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	609a      	str	r2, [r3, #8]
}
 8005e94:	bf00      	nop
 8005e96:	371c      	adds	r7, #28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d101      	bne.n	8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e05a      	b.n	8005f6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ede:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a21      	ldr	r2, [pc, #132]	@ (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d022      	beq.n	8005f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f04:	d01d      	beq.n	8005f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a1d      	ldr	r2, [pc, #116]	@ (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d018      	beq.n	8005f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a1b      	ldr	r2, [pc, #108]	@ (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d013      	beq.n	8005f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a1a      	ldr	r2, [pc, #104]	@ (8005f88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d00e      	beq.n	8005f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a18      	ldr	r2, [pc, #96]	@ (8005f8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d009      	beq.n	8005f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a17      	ldr	r2, [pc, #92]	@ (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d004      	beq.n	8005f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a15      	ldr	r2, [pc, #84]	@ (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d10c      	bne.n	8005f5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	40010000 	.word	0x40010000
 8005f80:	40000400 	.word	0x40000400
 8005f84:	40000800 	.word	0x40000800
 8005f88:	40000c00 	.word	0x40000c00
 8005f8c:	40010400 	.word	0x40010400
 8005f90:	40014000 	.word	0x40014000
 8005f94:	40001800 	.word	0x40001800

08005f98 <std>:
 8005f98:	2300      	movs	r3, #0
 8005f9a:	b510      	push	{r4, lr}
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	e9c0 3300 	strd	r3, r3, [r0]
 8005fa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fa6:	6083      	str	r3, [r0, #8]
 8005fa8:	8181      	strh	r1, [r0, #12]
 8005faa:	6643      	str	r3, [r0, #100]	@ 0x64
 8005fac:	81c2      	strh	r2, [r0, #14]
 8005fae:	6183      	str	r3, [r0, #24]
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	2208      	movs	r2, #8
 8005fb4:	305c      	adds	r0, #92	@ 0x5c
 8005fb6:	f000 f921 	bl	80061fc <memset>
 8005fba:	4b0d      	ldr	r3, [pc, #52]	@ (8005ff0 <std+0x58>)
 8005fbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8005fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005ff4 <std+0x5c>)
 8005fc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ff8 <std+0x60>)
 8005fc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005ffc <std+0x64>)
 8005fc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005fca:	4b0d      	ldr	r3, [pc, #52]	@ (8006000 <std+0x68>)
 8005fcc:	6224      	str	r4, [r4, #32]
 8005fce:	429c      	cmp	r4, r3
 8005fd0:	d006      	beq.n	8005fe0 <std+0x48>
 8005fd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005fd6:	4294      	cmp	r4, r2
 8005fd8:	d002      	beq.n	8005fe0 <std+0x48>
 8005fda:	33d0      	adds	r3, #208	@ 0xd0
 8005fdc:	429c      	cmp	r4, r3
 8005fde:	d105      	bne.n	8005fec <std+0x54>
 8005fe0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fe8:	f000 b93a 	b.w	8006260 <__retarget_lock_init_recursive>
 8005fec:	bd10      	pop	{r4, pc}
 8005fee:	bf00      	nop
 8005ff0:	08006ab5 	.word	0x08006ab5
 8005ff4:	08006ad7 	.word	0x08006ad7
 8005ff8:	08006b0f 	.word	0x08006b0f
 8005ffc:	08006b33 	.word	0x08006b33
 8006000:	20025be0 	.word	0x20025be0

08006004 <stdio_exit_handler>:
 8006004:	4a02      	ldr	r2, [pc, #8]	@ (8006010 <stdio_exit_handler+0xc>)
 8006006:	4903      	ldr	r1, [pc, #12]	@ (8006014 <stdio_exit_handler+0x10>)
 8006008:	4803      	ldr	r0, [pc, #12]	@ (8006018 <stdio_exit_handler+0x14>)
 800600a:	f000 b869 	b.w	80060e0 <_fwalk_sglue>
 800600e:	bf00      	nop
 8006010:	2000001c 	.word	0x2000001c
 8006014:	08006a4d 	.word	0x08006a4d
 8006018:	2000002c 	.word	0x2000002c

0800601c <cleanup_stdio>:
 800601c:	6841      	ldr	r1, [r0, #4]
 800601e:	4b0c      	ldr	r3, [pc, #48]	@ (8006050 <cleanup_stdio+0x34>)
 8006020:	4299      	cmp	r1, r3
 8006022:	b510      	push	{r4, lr}
 8006024:	4604      	mov	r4, r0
 8006026:	d001      	beq.n	800602c <cleanup_stdio+0x10>
 8006028:	f000 fd10 	bl	8006a4c <_fflush_r>
 800602c:	68a1      	ldr	r1, [r4, #8]
 800602e:	4b09      	ldr	r3, [pc, #36]	@ (8006054 <cleanup_stdio+0x38>)
 8006030:	4299      	cmp	r1, r3
 8006032:	d002      	beq.n	800603a <cleanup_stdio+0x1e>
 8006034:	4620      	mov	r0, r4
 8006036:	f000 fd09 	bl	8006a4c <_fflush_r>
 800603a:	68e1      	ldr	r1, [r4, #12]
 800603c:	4b06      	ldr	r3, [pc, #24]	@ (8006058 <cleanup_stdio+0x3c>)
 800603e:	4299      	cmp	r1, r3
 8006040:	d004      	beq.n	800604c <cleanup_stdio+0x30>
 8006042:	4620      	mov	r0, r4
 8006044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006048:	f000 bd00 	b.w	8006a4c <_fflush_r>
 800604c:	bd10      	pop	{r4, pc}
 800604e:	bf00      	nop
 8006050:	20025be0 	.word	0x20025be0
 8006054:	20025c48 	.word	0x20025c48
 8006058:	20025cb0 	.word	0x20025cb0

0800605c <global_stdio_init.part.0>:
 800605c:	b510      	push	{r4, lr}
 800605e:	4b0b      	ldr	r3, [pc, #44]	@ (800608c <global_stdio_init.part.0+0x30>)
 8006060:	4c0b      	ldr	r4, [pc, #44]	@ (8006090 <global_stdio_init.part.0+0x34>)
 8006062:	4a0c      	ldr	r2, [pc, #48]	@ (8006094 <global_stdio_init.part.0+0x38>)
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	4620      	mov	r0, r4
 8006068:	2200      	movs	r2, #0
 800606a:	2104      	movs	r1, #4
 800606c:	f7ff ff94 	bl	8005f98 <std>
 8006070:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006074:	2201      	movs	r2, #1
 8006076:	2109      	movs	r1, #9
 8006078:	f7ff ff8e 	bl	8005f98 <std>
 800607c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006080:	2202      	movs	r2, #2
 8006082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006086:	2112      	movs	r1, #18
 8006088:	f7ff bf86 	b.w	8005f98 <std>
 800608c:	20025d18 	.word	0x20025d18
 8006090:	20025be0 	.word	0x20025be0
 8006094:	08006005 	.word	0x08006005

08006098 <__sfp_lock_acquire>:
 8006098:	4801      	ldr	r0, [pc, #4]	@ (80060a0 <__sfp_lock_acquire+0x8>)
 800609a:	f000 b8e2 	b.w	8006262 <__retarget_lock_acquire_recursive>
 800609e:	bf00      	nop
 80060a0:	20025d1d 	.word	0x20025d1d

080060a4 <__sfp_lock_release>:
 80060a4:	4801      	ldr	r0, [pc, #4]	@ (80060ac <__sfp_lock_release+0x8>)
 80060a6:	f000 b8dd 	b.w	8006264 <__retarget_lock_release_recursive>
 80060aa:	bf00      	nop
 80060ac:	20025d1d 	.word	0x20025d1d

080060b0 <__sinit>:
 80060b0:	b510      	push	{r4, lr}
 80060b2:	4604      	mov	r4, r0
 80060b4:	f7ff fff0 	bl	8006098 <__sfp_lock_acquire>
 80060b8:	6a23      	ldr	r3, [r4, #32]
 80060ba:	b11b      	cbz	r3, 80060c4 <__sinit+0x14>
 80060bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060c0:	f7ff bff0 	b.w	80060a4 <__sfp_lock_release>
 80060c4:	4b04      	ldr	r3, [pc, #16]	@ (80060d8 <__sinit+0x28>)
 80060c6:	6223      	str	r3, [r4, #32]
 80060c8:	4b04      	ldr	r3, [pc, #16]	@ (80060dc <__sinit+0x2c>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1f5      	bne.n	80060bc <__sinit+0xc>
 80060d0:	f7ff ffc4 	bl	800605c <global_stdio_init.part.0>
 80060d4:	e7f2      	b.n	80060bc <__sinit+0xc>
 80060d6:	bf00      	nop
 80060d8:	0800601d 	.word	0x0800601d
 80060dc:	20025d18 	.word	0x20025d18

080060e0 <_fwalk_sglue>:
 80060e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060e4:	4607      	mov	r7, r0
 80060e6:	4688      	mov	r8, r1
 80060e8:	4614      	mov	r4, r2
 80060ea:	2600      	movs	r6, #0
 80060ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060f0:	f1b9 0901 	subs.w	r9, r9, #1
 80060f4:	d505      	bpl.n	8006102 <_fwalk_sglue+0x22>
 80060f6:	6824      	ldr	r4, [r4, #0]
 80060f8:	2c00      	cmp	r4, #0
 80060fa:	d1f7      	bne.n	80060ec <_fwalk_sglue+0xc>
 80060fc:	4630      	mov	r0, r6
 80060fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006102:	89ab      	ldrh	r3, [r5, #12]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d907      	bls.n	8006118 <_fwalk_sglue+0x38>
 8006108:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800610c:	3301      	adds	r3, #1
 800610e:	d003      	beq.n	8006118 <_fwalk_sglue+0x38>
 8006110:	4629      	mov	r1, r5
 8006112:	4638      	mov	r0, r7
 8006114:	47c0      	blx	r8
 8006116:	4306      	orrs	r6, r0
 8006118:	3568      	adds	r5, #104	@ 0x68
 800611a:	e7e9      	b.n	80060f0 <_fwalk_sglue+0x10>

0800611c <iprintf>:
 800611c:	b40f      	push	{r0, r1, r2, r3}
 800611e:	b507      	push	{r0, r1, r2, lr}
 8006120:	4906      	ldr	r1, [pc, #24]	@ (800613c <iprintf+0x20>)
 8006122:	ab04      	add	r3, sp, #16
 8006124:	6808      	ldr	r0, [r1, #0]
 8006126:	f853 2b04 	ldr.w	r2, [r3], #4
 800612a:	6881      	ldr	r1, [r0, #8]
 800612c:	9301      	str	r3, [sp, #4]
 800612e:	f000 f8c3 	bl	80062b8 <_vfiprintf_r>
 8006132:	b003      	add	sp, #12
 8006134:	f85d eb04 	ldr.w	lr, [sp], #4
 8006138:	b004      	add	sp, #16
 800613a:	4770      	bx	lr
 800613c:	20000028 	.word	0x20000028

08006140 <_puts_r>:
 8006140:	6a03      	ldr	r3, [r0, #32]
 8006142:	b570      	push	{r4, r5, r6, lr}
 8006144:	6884      	ldr	r4, [r0, #8]
 8006146:	4605      	mov	r5, r0
 8006148:	460e      	mov	r6, r1
 800614a:	b90b      	cbnz	r3, 8006150 <_puts_r+0x10>
 800614c:	f7ff ffb0 	bl	80060b0 <__sinit>
 8006150:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006152:	07db      	lsls	r3, r3, #31
 8006154:	d405      	bmi.n	8006162 <_puts_r+0x22>
 8006156:	89a3      	ldrh	r3, [r4, #12]
 8006158:	0598      	lsls	r0, r3, #22
 800615a:	d402      	bmi.n	8006162 <_puts_r+0x22>
 800615c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800615e:	f000 f880 	bl	8006262 <__retarget_lock_acquire_recursive>
 8006162:	89a3      	ldrh	r3, [r4, #12]
 8006164:	0719      	lsls	r1, r3, #28
 8006166:	d502      	bpl.n	800616e <_puts_r+0x2e>
 8006168:	6923      	ldr	r3, [r4, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d135      	bne.n	80061da <_puts_r+0x9a>
 800616e:	4621      	mov	r1, r4
 8006170:	4628      	mov	r0, r5
 8006172:	f000 fd21 	bl	8006bb8 <__swsetup_r>
 8006176:	b380      	cbz	r0, 80061da <_puts_r+0x9a>
 8006178:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800617c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800617e:	07da      	lsls	r2, r3, #31
 8006180:	d405      	bmi.n	800618e <_puts_r+0x4e>
 8006182:	89a3      	ldrh	r3, [r4, #12]
 8006184:	059b      	lsls	r3, r3, #22
 8006186:	d402      	bmi.n	800618e <_puts_r+0x4e>
 8006188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800618a:	f000 f86b 	bl	8006264 <__retarget_lock_release_recursive>
 800618e:	4628      	mov	r0, r5
 8006190:	bd70      	pop	{r4, r5, r6, pc}
 8006192:	2b00      	cmp	r3, #0
 8006194:	da04      	bge.n	80061a0 <_puts_r+0x60>
 8006196:	69a2      	ldr	r2, [r4, #24]
 8006198:	429a      	cmp	r2, r3
 800619a:	dc17      	bgt.n	80061cc <_puts_r+0x8c>
 800619c:	290a      	cmp	r1, #10
 800619e:	d015      	beq.n	80061cc <_puts_r+0x8c>
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	6022      	str	r2, [r4, #0]
 80061a6:	7019      	strb	r1, [r3, #0]
 80061a8:	68a3      	ldr	r3, [r4, #8]
 80061aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80061ae:	3b01      	subs	r3, #1
 80061b0:	60a3      	str	r3, [r4, #8]
 80061b2:	2900      	cmp	r1, #0
 80061b4:	d1ed      	bne.n	8006192 <_puts_r+0x52>
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	da11      	bge.n	80061de <_puts_r+0x9e>
 80061ba:	4622      	mov	r2, r4
 80061bc:	210a      	movs	r1, #10
 80061be:	4628      	mov	r0, r5
 80061c0:	f000 fcbb 	bl	8006b3a <__swbuf_r>
 80061c4:	3001      	adds	r0, #1
 80061c6:	d0d7      	beq.n	8006178 <_puts_r+0x38>
 80061c8:	250a      	movs	r5, #10
 80061ca:	e7d7      	b.n	800617c <_puts_r+0x3c>
 80061cc:	4622      	mov	r2, r4
 80061ce:	4628      	mov	r0, r5
 80061d0:	f000 fcb3 	bl	8006b3a <__swbuf_r>
 80061d4:	3001      	adds	r0, #1
 80061d6:	d1e7      	bne.n	80061a8 <_puts_r+0x68>
 80061d8:	e7ce      	b.n	8006178 <_puts_r+0x38>
 80061da:	3e01      	subs	r6, #1
 80061dc:	e7e4      	b.n	80061a8 <_puts_r+0x68>
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	6022      	str	r2, [r4, #0]
 80061e4:	220a      	movs	r2, #10
 80061e6:	701a      	strb	r2, [r3, #0]
 80061e8:	e7ee      	b.n	80061c8 <_puts_r+0x88>
	...

080061ec <puts>:
 80061ec:	4b02      	ldr	r3, [pc, #8]	@ (80061f8 <puts+0xc>)
 80061ee:	4601      	mov	r1, r0
 80061f0:	6818      	ldr	r0, [r3, #0]
 80061f2:	f7ff bfa5 	b.w	8006140 <_puts_r>
 80061f6:	bf00      	nop
 80061f8:	20000028 	.word	0x20000028

080061fc <memset>:
 80061fc:	4402      	add	r2, r0
 80061fe:	4603      	mov	r3, r0
 8006200:	4293      	cmp	r3, r2
 8006202:	d100      	bne.n	8006206 <memset+0xa>
 8006204:	4770      	bx	lr
 8006206:	f803 1b01 	strb.w	r1, [r3], #1
 800620a:	e7f9      	b.n	8006200 <memset+0x4>

0800620c <__errno>:
 800620c:	4b01      	ldr	r3, [pc, #4]	@ (8006214 <__errno+0x8>)
 800620e:	6818      	ldr	r0, [r3, #0]
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	20000028 	.word	0x20000028

08006218 <__libc_init_array>:
 8006218:	b570      	push	{r4, r5, r6, lr}
 800621a:	4d0d      	ldr	r5, [pc, #52]	@ (8006250 <__libc_init_array+0x38>)
 800621c:	4c0d      	ldr	r4, [pc, #52]	@ (8006254 <__libc_init_array+0x3c>)
 800621e:	1b64      	subs	r4, r4, r5
 8006220:	10a4      	asrs	r4, r4, #2
 8006222:	2600      	movs	r6, #0
 8006224:	42a6      	cmp	r6, r4
 8006226:	d109      	bne.n	800623c <__libc_init_array+0x24>
 8006228:	4d0b      	ldr	r5, [pc, #44]	@ (8006258 <__libc_init_array+0x40>)
 800622a:	4c0c      	ldr	r4, [pc, #48]	@ (800625c <__libc_init_array+0x44>)
 800622c:	f000 fe3e 	bl	8006eac <_init>
 8006230:	1b64      	subs	r4, r4, r5
 8006232:	10a4      	asrs	r4, r4, #2
 8006234:	2600      	movs	r6, #0
 8006236:	42a6      	cmp	r6, r4
 8006238:	d105      	bne.n	8006246 <__libc_init_array+0x2e>
 800623a:	bd70      	pop	{r4, r5, r6, pc}
 800623c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006240:	4798      	blx	r3
 8006242:	3601      	adds	r6, #1
 8006244:	e7ee      	b.n	8006224 <__libc_init_array+0xc>
 8006246:	f855 3b04 	ldr.w	r3, [r5], #4
 800624a:	4798      	blx	r3
 800624c:	3601      	adds	r6, #1
 800624e:	e7f2      	b.n	8006236 <__libc_init_array+0x1e>
 8006250:	0800810c 	.word	0x0800810c
 8006254:	0800810c 	.word	0x0800810c
 8006258:	0800810c 	.word	0x0800810c
 800625c:	08008110 	.word	0x08008110

08006260 <__retarget_lock_init_recursive>:
 8006260:	4770      	bx	lr

08006262 <__retarget_lock_acquire_recursive>:
 8006262:	4770      	bx	lr

08006264 <__retarget_lock_release_recursive>:
 8006264:	4770      	bx	lr

08006266 <__sfputc_r>:
 8006266:	6893      	ldr	r3, [r2, #8]
 8006268:	3b01      	subs	r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	b410      	push	{r4}
 800626e:	6093      	str	r3, [r2, #8]
 8006270:	da08      	bge.n	8006284 <__sfputc_r+0x1e>
 8006272:	6994      	ldr	r4, [r2, #24]
 8006274:	42a3      	cmp	r3, r4
 8006276:	db01      	blt.n	800627c <__sfputc_r+0x16>
 8006278:	290a      	cmp	r1, #10
 800627a:	d103      	bne.n	8006284 <__sfputc_r+0x1e>
 800627c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006280:	f000 bc5b 	b.w	8006b3a <__swbuf_r>
 8006284:	6813      	ldr	r3, [r2, #0]
 8006286:	1c58      	adds	r0, r3, #1
 8006288:	6010      	str	r0, [r2, #0]
 800628a:	7019      	strb	r1, [r3, #0]
 800628c:	4608      	mov	r0, r1
 800628e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006292:	4770      	bx	lr

08006294 <__sfputs_r>:
 8006294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006296:	4606      	mov	r6, r0
 8006298:	460f      	mov	r7, r1
 800629a:	4614      	mov	r4, r2
 800629c:	18d5      	adds	r5, r2, r3
 800629e:	42ac      	cmp	r4, r5
 80062a0:	d101      	bne.n	80062a6 <__sfputs_r+0x12>
 80062a2:	2000      	movs	r0, #0
 80062a4:	e007      	b.n	80062b6 <__sfputs_r+0x22>
 80062a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062aa:	463a      	mov	r2, r7
 80062ac:	4630      	mov	r0, r6
 80062ae:	f7ff ffda 	bl	8006266 <__sfputc_r>
 80062b2:	1c43      	adds	r3, r0, #1
 80062b4:	d1f3      	bne.n	800629e <__sfputs_r+0xa>
 80062b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080062b8 <_vfiprintf_r>:
 80062b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062bc:	460d      	mov	r5, r1
 80062be:	b09d      	sub	sp, #116	@ 0x74
 80062c0:	4614      	mov	r4, r2
 80062c2:	4698      	mov	r8, r3
 80062c4:	4606      	mov	r6, r0
 80062c6:	b118      	cbz	r0, 80062d0 <_vfiprintf_r+0x18>
 80062c8:	6a03      	ldr	r3, [r0, #32]
 80062ca:	b90b      	cbnz	r3, 80062d0 <_vfiprintf_r+0x18>
 80062cc:	f7ff fef0 	bl	80060b0 <__sinit>
 80062d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062d2:	07d9      	lsls	r1, r3, #31
 80062d4:	d405      	bmi.n	80062e2 <_vfiprintf_r+0x2a>
 80062d6:	89ab      	ldrh	r3, [r5, #12]
 80062d8:	059a      	lsls	r2, r3, #22
 80062da:	d402      	bmi.n	80062e2 <_vfiprintf_r+0x2a>
 80062dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062de:	f7ff ffc0 	bl	8006262 <__retarget_lock_acquire_recursive>
 80062e2:	89ab      	ldrh	r3, [r5, #12]
 80062e4:	071b      	lsls	r3, r3, #28
 80062e6:	d501      	bpl.n	80062ec <_vfiprintf_r+0x34>
 80062e8:	692b      	ldr	r3, [r5, #16]
 80062ea:	b99b      	cbnz	r3, 8006314 <_vfiprintf_r+0x5c>
 80062ec:	4629      	mov	r1, r5
 80062ee:	4630      	mov	r0, r6
 80062f0:	f000 fc62 	bl	8006bb8 <__swsetup_r>
 80062f4:	b170      	cbz	r0, 8006314 <_vfiprintf_r+0x5c>
 80062f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062f8:	07dc      	lsls	r4, r3, #31
 80062fa:	d504      	bpl.n	8006306 <_vfiprintf_r+0x4e>
 80062fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006300:	b01d      	add	sp, #116	@ 0x74
 8006302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006306:	89ab      	ldrh	r3, [r5, #12]
 8006308:	0598      	lsls	r0, r3, #22
 800630a:	d4f7      	bmi.n	80062fc <_vfiprintf_r+0x44>
 800630c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800630e:	f7ff ffa9 	bl	8006264 <__retarget_lock_release_recursive>
 8006312:	e7f3      	b.n	80062fc <_vfiprintf_r+0x44>
 8006314:	2300      	movs	r3, #0
 8006316:	9309      	str	r3, [sp, #36]	@ 0x24
 8006318:	2320      	movs	r3, #32
 800631a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800631e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006322:	2330      	movs	r3, #48	@ 0x30
 8006324:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80064d4 <_vfiprintf_r+0x21c>
 8006328:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800632c:	f04f 0901 	mov.w	r9, #1
 8006330:	4623      	mov	r3, r4
 8006332:	469a      	mov	sl, r3
 8006334:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006338:	b10a      	cbz	r2, 800633e <_vfiprintf_r+0x86>
 800633a:	2a25      	cmp	r2, #37	@ 0x25
 800633c:	d1f9      	bne.n	8006332 <_vfiprintf_r+0x7a>
 800633e:	ebba 0b04 	subs.w	fp, sl, r4
 8006342:	d00b      	beq.n	800635c <_vfiprintf_r+0xa4>
 8006344:	465b      	mov	r3, fp
 8006346:	4622      	mov	r2, r4
 8006348:	4629      	mov	r1, r5
 800634a:	4630      	mov	r0, r6
 800634c:	f7ff ffa2 	bl	8006294 <__sfputs_r>
 8006350:	3001      	adds	r0, #1
 8006352:	f000 80a7 	beq.w	80064a4 <_vfiprintf_r+0x1ec>
 8006356:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006358:	445a      	add	r2, fp
 800635a:	9209      	str	r2, [sp, #36]	@ 0x24
 800635c:	f89a 3000 	ldrb.w	r3, [sl]
 8006360:	2b00      	cmp	r3, #0
 8006362:	f000 809f 	beq.w	80064a4 <_vfiprintf_r+0x1ec>
 8006366:	2300      	movs	r3, #0
 8006368:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800636c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006370:	f10a 0a01 	add.w	sl, sl, #1
 8006374:	9304      	str	r3, [sp, #16]
 8006376:	9307      	str	r3, [sp, #28]
 8006378:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800637c:	931a      	str	r3, [sp, #104]	@ 0x68
 800637e:	4654      	mov	r4, sl
 8006380:	2205      	movs	r2, #5
 8006382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006386:	4853      	ldr	r0, [pc, #332]	@ (80064d4 <_vfiprintf_r+0x21c>)
 8006388:	f7f9 ff32 	bl	80001f0 <memchr>
 800638c:	9a04      	ldr	r2, [sp, #16]
 800638e:	b9d8      	cbnz	r0, 80063c8 <_vfiprintf_r+0x110>
 8006390:	06d1      	lsls	r1, r2, #27
 8006392:	bf44      	itt	mi
 8006394:	2320      	movmi	r3, #32
 8006396:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800639a:	0713      	lsls	r3, r2, #28
 800639c:	bf44      	itt	mi
 800639e:	232b      	movmi	r3, #43	@ 0x2b
 80063a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063a4:	f89a 3000 	ldrb.w	r3, [sl]
 80063a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80063aa:	d015      	beq.n	80063d8 <_vfiprintf_r+0x120>
 80063ac:	9a07      	ldr	r2, [sp, #28]
 80063ae:	4654      	mov	r4, sl
 80063b0:	2000      	movs	r0, #0
 80063b2:	f04f 0c0a 	mov.w	ip, #10
 80063b6:	4621      	mov	r1, r4
 80063b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063bc:	3b30      	subs	r3, #48	@ 0x30
 80063be:	2b09      	cmp	r3, #9
 80063c0:	d94b      	bls.n	800645a <_vfiprintf_r+0x1a2>
 80063c2:	b1b0      	cbz	r0, 80063f2 <_vfiprintf_r+0x13a>
 80063c4:	9207      	str	r2, [sp, #28]
 80063c6:	e014      	b.n	80063f2 <_vfiprintf_r+0x13a>
 80063c8:	eba0 0308 	sub.w	r3, r0, r8
 80063cc:	fa09 f303 	lsl.w	r3, r9, r3
 80063d0:	4313      	orrs	r3, r2
 80063d2:	9304      	str	r3, [sp, #16]
 80063d4:	46a2      	mov	sl, r4
 80063d6:	e7d2      	b.n	800637e <_vfiprintf_r+0xc6>
 80063d8:	9b03      	ldr	r3, [sp, #12]
 80063da:	1d19      	adds	r1, r3, #4
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	9103      	str	r1, [sp, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	bfbb      	ittet	lt
 80063e4:	425b      	neglt	r3, r3
 80063e6:	f042 0202 	orrlt.w	r2, r2, #2
 80063ea:	9307      	strge	r3, [sp, #28]
 80063ec:	9307      	strlt	r3, [sp, #28]
 80063ee:	bfb8      	it	lt
 80063f0:	9204      	strlt	r2, [sp, #16]
 80063f2:	7823      	ldrb	r3, [r4, #0]
 80063f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80063f6:	d10a      	bne.n	800640e <_vfiprintf_r+0x156>
 80063f8:	7863      	ldrb	r3, [r4, #1]
 80063fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80063fc:	d132      	bne.n	8006464 <_vfiprintf_r+0x1ac>
 80063fe:	9b03      	ldr	r3, [sp, #12]
 8006400:	1d1a      	adds	r2, r3, #4
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	9203      	str	r2, [sp, #12]
 8006406:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800640a:	3402      	adds	r4, #2
 800640c:	9305      	str	r3, [sp, #20]
 800640e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80064e4 <_vfiprintf_r+0x22c>
 8006412:	7821      	ldrb	r1, [r4, #0]
 8006414:	2203      	movs	r2, #3
 8006416:	4650      	mov	r0, sl
 8006418:	f7f9 feea 	bl	80001f0 <memchr>
 800641c:	b138      	cbz	r0, 800642e <_vfiprintf_r+0x176>
 800641e:	9b04      	ldr	r3, [sp, #16]
 8006420:	eba0 000a 	sub.w	r0, r0, sl
 8006424:	2240      	movs	r2, #64	@ 0x40
 8006426:	4082      	lsls	r2, r0
 8006428:	4313      	orrs	r3, r2
 800642a:	3401      	adds	r4, #1
 800642c:	9304      	str	r3, [sp, #16]
 800642e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006432:	4829      	ldr	r0, [pc, #164]	@ (80064d8 <_vfiprintf_r+0x220>)
 8006434:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006438:	2206      	movs	r2, #6
 800643a:	f7f9 fed9 	bl	80001f0 <memchr>
 800643e:	2800      	cmp	r0, #0
 8006440:	d03f      	beq.n	80064c2 <_vfiprintf_r+0x20a>
 8006442:	4b26      	ldr	r3, [pc, #152]	@ (80064dc <_vfiprintf_r+0x224>)
 8006444:	bb1b      	cbnz	r3, 800648e <_vfiprintf_r+0x1d6>
 8006446:	9b03      	ldr	r3, [sp, #12]
 8006448:	3307      	adds	r3, #7
 800644a:	f023 0307 	bic.w	r3, r3, #7
 800644e:	3308      	adds	r3, #8
 8006450:	9303      	str	r3, [sp, #12]
 8006452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006454:	443b      	add	r3, r7
 8006456:	9309      	str	r3, [sp, #36]	@ 0x24
 8006458:	e76a      	b.n	8006330 <_vfiprintf_r+0x78>
 800645a:	fb0c 3202 	mla	r2, ip, r2, r3
 800645e:	460c      	mov	r4, r1
 8006460:	2001      	movs	r0, #1
 8006462:	e7a8      	b.n	80063b6 <_vfiprintf_r+0xfe>
 8006464:	2300      	movs	r3, #0
 8006466:	3401      	adds	r4, #1
 8006468:	9305      	str	r3, [sp, #20]
 800646a:	4619      	mov	r1, r3
 800646c:	f04f 0c0a 	mov.w	ip, #10
 8006470:	4620      	mov	r0, r4
 8006472:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006476:	3a30      	subs	r2, #48	@ 0x30
 8006478:	2a09      	cmp	r2, #9
 800647a:	d903      	bls.n	8006484 <_vfiprintf_r+0x1cc>
 800647c:	2b00      	cmp	r3, #0
 800647e:	d0c6      	beq.n	800640e <_vfiprintf_r+0x156>
 8006480:	9105      	str	r1, [sp, #20]
 8006482:	e7c4      	b.n	800640e <_vfiprintf_r+0x156>
 8006484:	fb0c 2101 	mla	r1, ip, r1, r2
 8006488:	4604      	mov	r4, r0
 800648a:	2301      	movs	r3, #1
 800648c:	e7f0      	b.n	8006470 <_vfiprintf_r+0x1b8>
 800648e:	ab03      	add	r3, sp, #12
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	462a      	mov	r2, r5
 8006494:	4b12      	ldr	r3, [pc, #72]	@ (80064e0 <_vfiprintf_r+0x228>)
 8006496:	a904      	add	r1, sp, #16
 8006498:	4630      	mov	r0, r6
 800649a:	f3af 8000 	nop.w
 800649e:	4607      	mov	r7, r0
 80064a0:	1c78      	adds	r0, r7, #1
 80064a2:	d1d6      	bne.n	8006452 <_vfiprintf_r+0x19a>
 80064a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064a6:	07d9      	lsls	r1, r3, #31
 80064a8:	d405      	bmi.n	80064b6 <_vfiprintf_r+0x1fe>
 80064aa:	89ab      	ldrh	r3, [r5, #12]
 80064ac:	059a      	lsls	r2, r3, #22
 80064ae:	d402      	bmi.n	80064b6 <_vfiprintf_r+0x1fe>
 80064b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064b2:	f7ff fed7 	bl	8006264 <__retarget_lock_release_recursive>
 80064b6:	89ab      	ldrh	r3, [r5, #12]
 80064b8:	065b      	lsls	r3, r3, #25
 80064ba:	f53f af1f 	bmi.w	80062fc <_vfiprintf_r+0x44>
 80064be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064c0:	e71e      	b.n	8006300 <_vfiprintf_r+0x48>
 80064c2:	ab03      	add	r3, sp, #12
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	462a      	mov	r2, r5
 80064c8:	4b05      	ldr	r3, [pc, #20]	@ (80064e0 <_vfiprintf_r+0x228>)
 80064ca:	a904      	add	r1, sp, #16
 80064cc:	4630      	mov	r0, r6
 80064ce:	f000 f91b 	bl	8006708 <_printf_i>
 80064d2:	e7e4      	b.n	800649e <_vfiprintf_r+0x1e6>
 80064d4:	080080d0 	.word	0x080080d0
 80064d8:	080080da 	.word	0x080080da
 80064dc:	00000000 	.word	0x00000000
 80064e0:	08006295 	.word	0x08006295
 80064e4:	080080d6 	.word	0x080080d6

080064e8 <sbrk_aligned>:
 80064e8:	b570      	push	{r4, r5, r6, lr}
 80064ea:	4e0f      	ldr	r6, [pc, #60]	@ (8006528 <sbrk_aligned+0x40>)
 80064ec:	460c      	mov	r4, r1
 80064ee:	6831      	ldr	r1, [r6, #0]
 80064f0:	4605      	mov	r5, r0
 80064f2:	b911      	cbnz	r1, 80064fa <sbrk_aligned+0x12>
 80064f4:	f000 fc4c 	bl	8006d90 <_sbrk_r>
 80064f8:	6030      	str	r0, [r6, #0]
 80064fa:	4621      	mov	r1, r4
 80064fc:	4628      	mov	r0, r5
 80064fe:	f000 fc47 	bl	8006d90 <_sbrk_r>
 8006502:	1c43      	adds	r3, r0, #1
 8006504:	d103      	bne.n	800650e <sbrk_aligned+0x26>
 8006506:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800650a:	4620      	mov	r0, r4
 800650c:	bd70      	pop	{r4, r5, r6, pc}
 800650e:	1cc4      	adds	r4, r0, #3
 8006510:	f024 0403 	bic.w	r4, r4, #3
 8006514:	42a0      	cmp	r0, r4
 8006516:	d0f8      	beq.n	800650a <sbrk_aligned+0x22>
 8006518:	1a21      	subs	r1, r4, r0
 800651a:	4628      	mov	r0, r5
 800651c:	f000 fc38 	bl	8006d90 <_sbrk_r>
 8006520:	3001      	adds	r0, #1
 8006522:	d1f2      	bne.n	800650a <sbrk_aligned+0x22>
 8006524:	e7ef      	b.n	8006506 <sbrk_aligned+0x1e>
 8006526:	bf00      	nop
 8006528:	20025d20 	.word	0x20025d20

0800652c <_malloc_r>:
 800652c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006530:	1ccd      	adds	r5, r1, #3
 8006532:	f025 0503 	bic.w	r5, r5, #3
 8006536:	3508      	adds	r5, #8
 8006538:	2d0c      	cmp	r5, #12
 800653a:	bf38      	it	cc
 800653c:	250c      	movcc	r5, #12
 800653e:	2d00      	cmp	r5, #0
 8006540:	4606      	mov	r6, r0
 8006542:	db01      	blt.n	8006548 <_malloc_r+0x1c>
 8006544:	42a9      	cmp	r1, r5
 8006546:	d904      	bls.n	8006552 <_malloc_r+0x26>
 8006548:	230c      	movs	r3, #12
 800654a:	6033      	str	r3, [r6, #0]
 800654c:	2000      	movs	r0, #0
 800654e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006552:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006628 <_malloc_r+0xfc>
 8006556:	f000 faa1 	bl	8006a9c <__malloc_lock>
 800655a:	f8d8 3000 	ldr.w	r3, [r8]
 800655e:	461c      	mov	r4, r3
 8006560:	bb44      	cbnz	r4, 80065b4 <_malloc_r+0x88>
 8006562:	4629      	mov	r1, r5
 8006564:	4630      	mov	r0, r6
 8006566:	f7ff ffbf 	bl	80064e8 <sbrk_aligned>
 800656a:	1c43      	adds	r3, r0, #1
 800656c:	4604      	mov	r4, r0
 800656e:	d158      	bne.n	8006622 <_malloc_r+0xf6>
 8006570:	f8d8 4000 	ldr.w	r4, [r8]
 8006574:	4627      	mov	r7, r4
 8006576:	2f00      	cmp	r7, #0
 8006578:	d143      	bne.n	8006602 <_malloc_r+0xd6>
 800657a:	2c00      	cmp	r4, #0
 800657c:	d04b      	beq.n	8006616 <_malloc_r+0xea>
 800657e:	6823      	ldr	r3, [r4, #0]
 8006580:	4639      	mov	r1, r7
 8006582:	4630      	mov	r0, r6
 8006584:	eb04 0903 	add.w	r9, r4, r3
 8006588:	f000 fc02 	bl	8006d90 <_sbrk_r>
 800658c:	4581      	cmp	r9, r0
 800658e:	d142      	bne.n	8006616 <_malloc_r+0xea>
 8006590:	6821      	ldr	r1, [r4, #0]
 8006592:	1a6d      	subs	r5, r5, r1
 8006594:	4629      	mov	r1, r5
 8006596:	4630      	mov	r0, r6
 8006598:	f7ff ffa6 	bl	80064e8 <sbrk_aligned>
 800659c:	3001      	adds	r0, #1
 800659e:	d03a      	beq.n	8006616 <_malloc_r+0xea>
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	442b      	add	r3, r5
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	f8d8 3000 	ldr.w	r3, [r8]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	bb62      	cbnz	r2, 8006608 <_malloc_r+0xdc>
 80065ae:	f8c8 7000 	str.w	r7, [r8]
 80065b2:	e00f      	b.n	80065d4 <_malloc_r+0xa8>
 80065b4:	6822      	ldr	r2, [r4, #0]
 80065b6:	1b52      	subs	r2, r2, r5
 80065b8:	d420      	bmi.n	80065fc <_malloc_r+0xd0>
 80065ba:	2a0b      	cmp	r2, #11
 80065bc:	d917      	bls.n	80065ee <_malloc_r+0xc2>
 80065be:	1961      	adds	r1, r4, r5
 80065c0:	42a3      	cmp	r3, r4
 80065c2:	6025      	str	r5, [r4, #0]
 80065c4:	bf18      	it	ne
 80065c6:	6059      	strne	r1, [r3, #4]
 80065c8:	6863      	ldr	r3, [r4, #4]
 80065ca:	bf08      	it	eq
 80065cc:	f8c8 1000 	streq.w	r1, [r8]
 80065d0:	5162      	str	r2, [r4, r5]
 80065d2:	604b      	str	r3, [r1, #4]
 80065d4:	4630      	mov	r0, r6
 80065d6:	f000 fa67 	bl	8006aa8 <__malloc_unlock>
 80065da:	f104 000b 	add.w	r0, r4, #11
 80065de:	1d23      	adds	r3, r4, #4
 80065e0:	f020 0007 	bic.w	r0, r0, #7
 80065e4:	1ac2      	subs	r2, r0, r3
 80065e6:	bf1c      	itt	ne
 80065e8:	1a1b      	subne	r3, r3, r0
 80065ea:	50a3      	strne	r3, [r4, r2]
 80065ec:	e7af      	b.n	800654e <_malloc_r+0x22>
 80065ee:	6862      	ldr	r2, [r4, #4]
 80065f0:	42a3      	cmp	r3, r4
 80065f2:	bf0c      	ite	eq
 80065f4:	f8c8 2000 	streq.w	r2, [r8]
 80065f8:	605a      	strne	r2, [r3, #4]
 80065fa:	e7eb      	b.n	80065d4 <_malloc_r+0xa8>
 80065fc:	4623      	mov	r3, r4
 80065fe:	6864      	ldr	r4, [r4, #4]
 8006600:	e7ae      	b.n	8006560 <_malloc_r+0x34>
 8006602:	463c      	mov	r4, r7
 8006604:	687f      	ldr	r7, [r7, #4]
 8006606:	e7b6      	b.n	8006576 <_malloc_r+0x4a>
 8006608:	461a      	mov	r2, r3
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	42a3      	cmp	r3, r4
 800660e:	d1fb      	bne.n	8006608 <_malloc_r+0xdc>
 8006610:	2300      	movs	r3, #0
 8006612:	6053      	str	r3, [r2, #4]
 8006614:	e7de      	b.n	80065d4 <_malloc_r+0xa8>
 8006616:	230c      	movs	r3, #12
 8006618:	6033      	str	r3, [r6, #0]
 800661a:	4630      	mov	r0, r6
 800661c:	f000 fa44 	bl	8006aa8 <__malloc_unlock>
 8006620:	e794      	b.n	800654c <_malloc_r+0x20>
 8006622:	6005      	str	r5, [r0, #0]
 8006624:	e7d6      	b.n	80065d4 <_malloc_r+0xa8>
 8006626:	bf00      	nop
 8006628:	20025d24 	.word	0x20025d24

0800662c <_printf_common>:
 800662c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006630:	4616      	mov	r6, r2
 8006632:	4698      	mov	r8, r3
 8006634:	688a      	ldr	r2, [r1, #8]
 8006636:	690b      	ldr	r3, [r1, #16]
 8006638:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800663c:	4293      	cmp	r3, r2
 800663e:	bfb8      	it	lt
 8006640:	4613      	movlt	r3, r2
 8006642:	6033      	str	r3, [r6, #0]
 8006644:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006648:	4607      	mov	r7, r0
 800664a:	460c      	mov	r4, r1
 800664c:	b10a      	cbz	r2, 8006652 <_printf_common+0x26>
 800664e:	3301      	adds	r3, #1
 8006650:	6033      	str	r3, [r6, #0]
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	0699      	lsls	r1, r3, #26
 8006656:	bf42      	ittt	mi
 8006658:	6833      	ldrmi	r3, [r6, #0]
 800665a:	3302      	addmi	r3, #2
 800665c:	6033      	strmi	r3, [r6, #0]
 800665e:	6825      	ldr	r5, [r4, #0]
 8006660:	f015 0506 	ands.w	r5, r5, #6
 8006664:	d106      	bne.n	8006674 <_printf_common+0x48>
 8006666:	f104 0a19 	add.w	sl, r4, #25
 800666a:	68e3      	ldr	r3, [r4, #12]
 800666c:	6832      	ldr	r2, [r6, #0]
 800666e:	1a9b      	subs	r3, r3, r2
 8006670:	42ab      	cmp	r3, r5
 8006672:	dc26      	bgt.n	80066c2 <_printf_common+0x96>
 8006674:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006678:	6822      	ldr	r2, [r4, #0]
 800667a:	3b00      	subs	r3, #0
 800667c:	bf18      	it	ne
 800667e:	2301      	movne	r3, #1
 8006680:	0692      	lsls	r2, r2, #26
 8006682:	d42b      	bmi.n	80066dc <_printf_common+0xb0>
 8006684:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006688:	4641      	mov	r1, r8
 800668a:	4638      	mov	r0, r7
 800668c:	47c8      	blx	r9
 800668e:	3001      	adds	r0, #1
 8006690:	d01e      	beq.n	80066d0 <_printf_common+0xa4>
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	6922      	ldr	r2, [r4, #16]
 8006696:	f003 0306 	and.w	r3, r3, #6
 800669a:	2b04      	cmp	r3, #4
 800669c:	bf02      	ittt	eq
 800669e:	68e5      	ldreq	r5, [r4, #12]
 80066a0:	6833      	ldreq	r3, [r6, #0]
 80066a2:	1aed      	subeq	r5, r5, r3
 80066a4:	68a3      	ldr	r3, [r4, #8]
 80066a6:	bf0c      	ite	eq
 80066a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066ac:	2500      	movne	r5, #0
 80066ae:	4293      	cmp	r3, r2
 80066b0:	bfc4      	itt	gt
 80066b2:	1a9b      	subgt	r3, r3, r2
 80066b4:	18ed      	addgt	r5, r5, r3
 80066b6:	2600      	movs	r6, #0
 80066b8:	341a      	adds	r4, #26
 80066ba:	42b5      	cmp	r5, r6
 80066bc:	d11a      	bne.n	80066f4 <_printf_common+0xc8>
 80066be:	2000      	movs	r0, #0
 80066c0:	e008      	b.n	80066d4 <_printf_common+0xa8>
 80066c2:	2301      	movs	r3, #1
 80066c4:	4652      	mov	r2, sl
 80066c6:	4641      	mov	r1, r8
 80066c8:	4638      	mov	r0, r7
 80066ca:	47c8      	blx	r9
 80066cc:	3001      	adds	r0, #1
 80066ce:	d103      	bne.n	80066d8 <_printf_common+0xac>
 80066d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066d8:	3501      	adds	r5, #1
 80066da:	e7c6      	b.n	800666a <_printf_common+0x3e>
 80066dc:	18e1      	adds	r1, r4, r3
 80066de:	1c5a      	adds	r2, r3, #1
 80066e0:	2030      	movs	r0, #48	@ 0x30
 80066e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066e6:	4422      	add	r2, r4
 80066e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066f0:	3302      	adds	r3, #2
 80066f2:	e7c7      	b.n	8006684 <_printf_common+0x58>
 80066f4:	2301      	movs	r3, #1
 80066f6:	4622      	mov	r2, r4
 80066f8:	4641      	mov	r1, r8
 80066fa:	4638      	mov	r0, r7
 80066fc:	47c8      	blx	r9
 80066fe:	3001      	adds	r0, #1
 8006700:	d0e6      	beq.n	80066d0 <_printf_common+0xa4>
 8006702:	3601      	adds	r6, #1
 8006704:	e7d9      	b.n	80066ba <_printf_common+0x8e>
	...

08006708 <_printf_i>:
 8006708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800670c:	7e0f      	ldrb	r7, [r1, #24]
 800670e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006710:	2f78      	cmp	r7, #120	@ 0x78
 8006712:	4691      	mov	r9, r2
 8006714:	4680      	mov	r8, r0
 8006716:	460c      	mov	r4, r1
 8006718:	469a      	mov	sl, r3
 800671a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800671e:	d807      	bhi.n	8006730 <_printf_i+0x28>
 8006720:	2f62      	cmp	r7, #98	@ 0x62
 8006722:	d80a      	bhi.n	800673a <_printf_i+0x32>
 8006724:	2f00      	cmp	r7, #0
 8006726:	f000 80d1 	beq.w	80068cc <_printf_i+0x1c4>
 800672a:	2f58      	cmp	r7, #88	@ 0x58
 800672c:	f000 80b8 	beq.w	80068a0 <_printf_i+0x198>
 8006730:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006734:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006738:	e03a      	b.n	80067b0 <_printf_i+0xa8>
 800673a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800673e:	2b15      	cmp	r3, #21
 8006740:	d8f6      	bhi.n	8006730 <_printf_i+0x28>
 8006742:	a101      	add	r1, pc, #4	@ (adr r1, 8006748 <_printf_i+0x40>)
 8006744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006748:	080067a1 	.word	0x080067a1
 800674c:	080067b5 	.word	0x080067b5
 8006750:	08006731 	.word	0x08006731
 8006754:	08006731 	.word	0x08006731
 8006758:	08006731 	.word	0x08006731
 800675c:	08006731 	.word	0x08006731
 8006760:	080067b5 	.word	0x080067b5
 8006764:	08006731 	.word	0x08006731
 8006768:	08006731 	.word	0x08006731
 800676c:	08006731 	.word	0x08006731
 8006770:	08006731 	.word	0x08006731
 8006774:	080068b3 	.word	0x080068b3
 8006778:	080067df 	.word	0x080067df
 800677c:	0800686d 	.word	0x0800686d
 8006780:	08006731 	.word	0x08006731
 8006784:	08006731 	.word	0x08006731
 8006788:	080068d5 	.word	0x080068d5
 800678c:	08006731 	.word	0x08006731
 8006790:	080067df 	.word	0x080067df
 8006794:	08006731 	.word	0x08006731
 8006798:	08006731 	.word	0x08006731
 800679c:	08006875 	.word	0x08006875
 80067a0:	6833      	ldr	r3, [r6, #0]
 80067a2:	1d1a      	adds	r2, r3, #4
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6032      	str	r2, [r6, #0]
 80067a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80067b0:	2301      	movs	r3, #1
 80067b2:	e09c      	b.n	80068ee <_printf_i+0x1e6>
 80067b4:	6833      	ldr	r3, [r6, #0]
 80067b6:	6820      	ldr	r0, [r4, #0]
 80067b8:	1d19      	adds	r1, r3, #4
 80067ba:	6031      	str	r1, [r6, #0]
 80067bc:	0606      	lsls	r6, r0, #24
 80067be:	d501      	bpl.n	80067c4 <_printf_i+0xbc>
 80067c0:	681d      	ldr	r5, [r3, #0]
 80067c2:	e003      	b.n	80067cc <_printf_i+0xc4>
 80067c4:	0645      	lsls	r5, r0, #25
 80067c6:	d5fb      	bpl.n	80067c0 <_printf_i+0xb8>
 80067c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80067cc:	2d00      	cmp	r5, #0
 80067ce:	da03      	bge.n	80067d8 <_printf_i+0xd0>
 80067d0:	232d      	movs	r3, #45	@ 0x2d
 80067d2:	426d      	negs	r5, r5
 80067d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067d8:	4858      	ldr	r0, [pc, #352]	@ (800693c <_printf_i+0x234>)
 80067da:	230a      	movs	r3, #10
 80067dc:	e011      	b.n	8006802 <_printf_i+0xfa>
 80067de:	6821      	ldr	r1, [r4, #0]
 80067e0:	6833      	ldr	r3, [r6, #0]
 80067e2:	0608      	lsls	r0, r1, #24
 80067e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80067e8:	d402      	bmi.n	80067f0 <_printf_i+0xe8>
 80067ea:	0649      	lsls	r1, r1, #25
 80067ec:	bf48      	it	mi
 80067ee:	b2ad      	uxthmi	r5, r5
 80067f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80067f2:	4852      	ldr	r0, [pc, #328]	@ (800693c <_printf_i+0x234>)
 80067f4:	6033      	str	r3, [r6, #0]
 80067f6:	bf14      	ite	ne
 80067f8:	230a      	movne	r3, #10
 80067fa:	2308      	moveq	r3, #8
 80067fc:	2100      	movs	r1, #0
 80067fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006802:	6866      	ldr	r6, [r4, #4]
 8006804:	60a6      	str	r6, [r4, #8]
 8006806:	2e00      	cmp	r6, #0
 8006808:	db05      	blt.n	8006816 <_printf_i+0x10e>
 800680a:	6821      	ldr	r1, [r4, #0]
 800680c:	432e      	orrs	r6, r5
 800680e:	f021 0104 	bic.w	r1, r1, #4
 8006812:	6021      	str	r1, [r4, #0]
 8006814:	d04b      	beq.n	80068ae <_printf_i+0x1a6>
 8006816:	4616      	mov	r6, r2
 8006818:	fbb5 f1f3 	udiv	r1, r5, r3
 800681c:	fb03 5711 	mls	r7, r3, r1, r5
 8006820:	5dc7      	ldrb	r7, [r0, r7]
 8006822:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006826:	462f      	mov	r7, r5
 8006828:	42bb      	cmp	r3, r7
 800682a:	460d      	mov	r5, r1
 800682c:	d9f4      	bls.n	8006818 <_printf_i+0x110>
 800682e:	2b08      	cmp	r3, #8
 8006830:	d10b      	bne.n	800684a <_printf_i+0x142>
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	07df      	lsls	r7, r3, #31
 8006836:	d508      	bpl.n	800684a <_printf_i+0x142>
 8006838:	6923      	ldr	r3, [r4, #16]
 800683a:	6861      	ldr	r1, [r4, #4]
 800683c:	4299      	cmp	r1, r3
 800683e:	bfde      	ittt	le
 8006840:	2330      	movle	r3, #48	@ 0x30
 8006842:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006846:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800684a:	1b92      	subs	r2, r2, r6
 800684c:	6122      	str	r2, [r4, #16]
 800684e:	f8cd a000 	str.w	sl, [sp]
 8006852:	464b      	mov	r3, r9
 8006854:	aa03      	add	r2, sp, #12
 8006856:	4621      	mov	r1, r4
 8006858:	4640      	mov	r0, r8
 800685a:	f7ff fee7 	bl	800662c <_printf_common>
 800685e:	3001      	adds	r0, #1
 8006860:	d14a      	bne.n	80068f8 <_printf_i+0x1f0>
 8006862:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006866:	b004      	add	sp, #16
 8006868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	f043 0320 	orr.w	r3, r3, #32
 8006872:	6023      	str	r3, [r4, #0]
 8006874:	4832      	ldr	r0, [pc, #200]	@ (8006940 <_printf_i+0x238>)
 8006876:	2778      	movs	r7, #120	@ 0x78
 8006878:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	6831      	ldr	r1, [r6, #0]
 8006880:	061f      	lsls	r7, r3, #24
 8006882:	f851 5b04 	ldr.w	r5, [r1], #4
 8006886:	d402      	bmi.n	800688e <_printf_i+0x186>
 8006888:	065f      	lsls	r7, r3, #25
 800688a:	bf48      	it	mi
 800688c:	b2ad      	uxthmi	r5, r5
 800688e:	6031      	str	r1, [r6, #0]
 8006890:	07d9      	lsls	r1, r3, #31
 8006892:	bf44      	itt	mi
 8006894:	f043 0320 	orrmi.w	r3, r3, #32
 8006898:	6023      	strmi	r3, [r4, #0]
 800689a:	b11d      	cbz	r5, 80068a4 <_printf_i+0x19c>
 800689c:	2310      	movs	r3, #16
 800689e:	e7ad      	b.n	80067fc <_printf_i+0xf4>
 80068a0:	4826      	ldr	r0, [pc, #152]	@ (800693c <_printf_i+0x234>)
 80068a2:	e7e9      	b.n	8006878 <_printf_i+0x170>
 80068a4:	6823      	ldr	r3, [r4, #0]
 80068a6:	f023 0320 	bic.w	r3, r3, #32
 80068aa:	6023      	str	r3, [r4, #0]
 80068ac:	e7f6      	b.n	800689c <_printf_i+0x194>
 80068ae:	4616      	mov	r6, r2
 80068b0:	e7bd      	b.n	800682e <_printf_i+0x126>
 80068b2:	6833      	ldr	r3, [r6, #0]
 80068b4:	6825      	ldr	r5, [r4, #0]
 80068b6:	6961      	ldr	r1, [r4, #20]
 80068b8:	1d18      	adds	r0, r3, #4
 80068ba:	6030      	str	r0, [r6, #0]
 80068bc:	062e      	lsls	r6, r5, #24
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	d501      	bpl.n	80068c6 <_printf_i+0x1be>
 80068c2:	6019      	str	r1, [r3, #0]
 80068c4:	e002      	b.n	80068cc <_printf_i+0x1c4>
 80068c6:	0668      	lsls	r0, r5, #25
 80068c8:	d5fb      	bpl.n	80068c2 <_printf_i+0x1ba>
 80068ca:	8019      	strh	r1, [r3, #0]
 80068cc:	2300      	movs	r3, #0
 80068ce:	6123      	str	r3, [r4, #16]
 80068d0:	4616      	mov	r6, r2
 80068d2:	e7bc      	b.n	800684e <_printf_i+0x146>
 80068d4:	6833      	ldr	r3, [r6, #0]
 80068d6:	1d1a      	adds	r2, r3, #4
 80068d8:	6032      	str	r2, [r6, #0]
 80068da:	681e      	ldr	r6, [r3, #0]
 80068dc:	6862      	ldr	r2, [r4, #4]
 80068de:	2100      	movs	r1, #0
 80068e0:	4630      	mov	r0, r6
 80068e2:	f7f9 fc85 	bl	80001f0 <memchr>
 80068e6:	b108      	cbz	r0, 80068ec <_printf_i+0x1e4>
 80068e8:	1b80      	subs	r0, r0, r6
 80068ea:	6060      	str	r0, [r4, #4]
 80068ec:	6863      	ldr	r3, [r4, #4]
 80068ee:	6123      	str	r3, [r4, #16]
 80068f0:	2300      	movs	r3, #0
 80068f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068f6:	e7aa      	b.n	800684e <_printf_i+0x146>
 80068f8:	6923      	ldr	r3, [r4, #16]
 80068fa:	4632      	mov	r2, r6
 80068fc:	4649      	mov	r1, r9
 80068fe:	4640      	mov	r0, r8
 8006900:	47d0      	blx	sl
 8006902:	3001      	adds	r0, #1
 8006904:	d0ad      	beq.n	8006862 <_printf_i+0x15a>
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	079b      	lsls	r3, r3, #30
 800690a:	d413      	bmi.n	8006934 <_printf_i+0x22c>
 800690c:	68e0      	ldr	r0, [r4, #12]
 800690e:	9b03      	ldr	r3, [sp, #12]
 8006910:	4298      	cmp	r0, r3
 8006912:	bfb8      	it	lt
 8006914:	4618      	movlt	r0, r3
 8006916:	e7a6      	b.n	8006866 <_printf_i+0x15e>
 8006918:	2301      	movs	r3, #1
 800691a:	4632      	mov	r2, r6
 800691c:	4649      	mov	r1, r9
 800691e:	4640      	mov	r0, r8
 8006920:	47d0      	blx	sl
 8006922:	3001      	adds	r0, #1
 8006924:	d09d      	beq.n	8006862 <_printf_i+0x15a>
 8006926:	3501      	adds	r5, #1
 8006928:	68e3      	ldr	r3, [r4, #12]
 800692a:	9903      	ldr	r1, [sp, #12]
 800692c:	1a5b      	subs	r3, r3, r1
 800692e:	42ab      	cmp	r3, r5
 8006930:	dcf2      	bgt.n	8006918 <_printf_i+0x210>
 8006932:	e7eb      	b.n	800690c <_printf_i+0x204>
 8006934:	2500      	movs	r5, #0
 8006936:	f104 0619 	add.w	r6, r4, #25
 800693a:	e7f5      	b.n	8006928 <_printf_i+0x220>
 800693c:	080080e1 	.word	0x080080e1
 8006940:	080080f2 	.word	0x080080f2

08006944 <__sflush_r>:
 8006944:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800694c:	0716      	lsls	r6, r2, #28
 800694e:	4605      	mov	r5, r0
 8006950:	460c      	mov	r4, r1
 8006952:	d454      	bmi.n	80069fe <__sflush_r+0xba>
 8006954:	684b      	ldr	r3, [r1, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	dc02      	bgt.n	8006960 <__sflush_r+0x1c>
 800695a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800695c:	2b00      	cmp	r3, #0
 800695e:	dd48      	ble.n	80069f2 <__sflush_r+0xae>
 8006960:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006962:	2e00      	cmp	r6, #0
 8006964:	d045      	beq.n	80069f2 <__sflush_r+0xae>
 8006966:	2300      	movs	r3, #0
 8006968:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800696c:	682f      	ldr	r7, [r5, #0]
 800696e:	6a21      	ldr	r1, [r4, #32]
 8006970:	602b      	str	r3, [r5, #0]
 8006972:	d030      	beq.n	80069d6 <__sflush_r+0x92>
 8006974:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	0759      	lsls	r1, r3, #29
 800697a:	d505      	bpl.n	8006988 <__sflush_r+0x44>
 800697c:	6863      	ldr	r3, [r4, #4]
 800697e:	1ad2      	subs	r2, r2, r3
 8006980:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006982:	b10b      	cbz	r3, 8006988 <__sflush_r+0x44>
 8006984:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006986:	1ad2      	subs	r2, r2, r3
 8006988:	2300      	movs	r3, #0
 800698a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800698c:	6a21      	ldr	r1, [r4, #32]
 800698e:	4628      	mov	r0, r5
 8006990:	47b0      	blx	r6
 8006992:	1c43      	adds	r3, r0, #1
 8006994:	89a3      	ldrh	r3, [r4, #12]
 8006996:	d106      	bne.n	80069a6 <__sflush_r+0x62>
 8006998:	6829      	ldr	r1, [r5, #0]
 800699a:	291d      	cmp	r1, #29
 800699c:	d82b      	bhi.n	80069f6 <__sflush_r+0xb2>
 800699e:	4a2a      	ldr	r2, [pc, #168]	@ (8006a48 <__sflush_r+0x104>)
 80069a0:	40ca      	lsrs	r2, r1
 80069a2:	07d6      	lsls	r6, r2, #31
 80069a4:	d527      	bpl.n	80069f6 <__sflush_r+0xb2>
 80069a6:	2200      	movs	r2, #0
 80069a8:	6062      	str	r2, [r4, #4]
 80069aa:	04d9      	lsls	r1, r3, #19
 80069ac:	6922      	ldr	r2, [r4, #16]
 80069ae:	6022      	str	r2, [r4, #0]
 80069b0:	d504      	bpl.n	80069bc <__sflush_r+0x78>
 80069b2:	1c42      	adds	r2, r0, #1
 80069b4:	d101      	bne.n	80069ba <__sflush_r+0x76>
 80069b6:	682b      	ldr	r3, [r5, #0]
 80069b8:	b903      	cbnz	r3, 80069bc <__sflush_r+0x78>
 80069ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80069bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069be:	602f      	str	r7, [r5, #0]
 80069c0:	b1b9      	cbz	r1, 80069f2 <__sflush_r+0xae>
 80069c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069c6:	4299      	cmp	r1, r3
 80069c8:	d002      	beq.n	80069d0 <__sflush_r+0x8c>
 80069ca:	4628      	mov	r0, r5
 80069cc:	f000 fa24 	bl	8006e18 <_free_r>
 80069d0:	2300      	movs	r3, #0
 80069d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80069d4:	e00d      	b.n	80069f2 <__sflush_r+0xae>
 80069d6:	2301      	movs	r3, #1
 80069d8:	4628      	mov	r0, r5
 80069da:	47b0      	blx	r6
 80069dc:	4602      	mov	r2, r0
 80069de:	1c50      	adds	r0, r2, #1
 80069e0:	d1c9      	bne.n	8006976 <__sflush_r+0x32>
 80069e2:	682b      	ldr	r3, [r5, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d0c6      	beq.n	8006976 <__sflush_r+0x32>
 80069e8:	2b1d      	cmp	r3, #29
 80069ea:	d001      	beq.n	80069f0 <__sflush_r+0xac>
 80069ec:	2b16      	cmp	r3, #22
 80069ee:	d11e      	bne.n	8006a2e <__sflush_r+0xea>
 80069f0:	602f      	str	r7, [r5, #0]
 80069f2:	2000      	movs	r0, #0
 80069f4:	e022      	b.n	8006a3c <__sflush_r+0xf8>
 80069f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069fa:	b21b      	sxth	r3, r3
 80069fc:	e01b      	b.n	8006a36 <__sflush_r+0xf2>
 80069fe:	690f      	ldr	r7, [r1, #16]
 8006a00:	2f00      	cmp	r7, #0
 8006a02:	d0f6      	beq.n	80069f2 <__sflush_r+0xae>
 8006a04:	0793      	lsls	r3, r2, #30
 8006a06:	680e      	ldr	r6, [r1, #0]
 8006a08:	bf08      	it	eq
 8006a0a:	694b      	ldreq	r3, [r1, #20]
 8006a0c:	600f      	str	r7, [r1, #0]
 8006a0e:	bf18      	it	ne
 8006a10:	2300      	movne	r3, #0
 8006a12:	eba6 0807 	sub.w	r8, r6, r7
 8006a16:	608b      	str	r3, [r1, #8]
 8006a18:	f1b8 0f00 	cmp.w	r8, #0
 8006a1c:	dde9      	ble.n	80069f2 <__sflush_r+0xae>
 8006a1e:	6a21      	ldr	r1, [r4, #32]
 8006a20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006a22:	4643      	mov	r3, r8
 8006a24:	463a      	mov	r2, r7
 8006a26:	4628      	mov	r0, r5
 8006a28:	47b0      	blx	r6
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	dc08      	bgt.n	8006a40 <__sflush_r+0xfc>
 8006a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a36:	81a3      	strh	r3, [r4, #12]
 8006a38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a40:	4407      	add	r7, r0
 8006a42:	eba8 0800 	sub.w	r8, r8, r0
 8006a46:	e7e7      	b.n	8006a18 <__sflush_r+0xd4>
 8006a48:	20400001 	.word	0x20400001

08006a4c <_fflush_r>:
 8006a4c:	b538      	push	{r3, r4, r5, lr}
 8006a4e:	690b      	ldr	r3, [r1, #16]
 8006a50:	4605      	mov	r5, r0
 8006a52:	460c      	mov	r4, r1
 8006a54:	b913      	cbnz	r3, 8006a5c <_fflush_r+0x10>
 8006a56:	2500      	movs	r5, #0
 8006a58:	4628      	mov	r0, r5
 8006a5a:	bd38      	pop	{r3, r4, r5, pc}
 8006a5c:	b118      	cbz	r0, 8006a66 <_fflush_r+0x1a>
 8006a5e:	6a03      	ldr	r3, [r0, #32]
 8006a60:	b90b      	cbnz	r3, 8006a66 <_fflush_r+0x1a>
 8006a62:	f7ff fb25 	bl	80060b0 <__sinit>
 8006a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d0f3      	beq.n	8006a56 <_fflush_r+0xa>
 8006a6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a70:	07d0      	lsls	r0, r2, #31
 8006a72:	d404      	bmi.n	8006a7e <_fflush_r+0x32>
 8006a74:	0599      	lsls	r1, r3, #22
 8006a76:	d402      	bmi.n	8006a7e <_fflush_r+0x32>
 8006a78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a7a:	f7ff fbf2 	bl	8006262 <__retarget_lock_acquire_recursive>
 8006a7e:	4628      	mov	r0, r5
 8006a80:	4621      	mov	r1, r4
 8006a82:	f7ff ff5f 	bl	8006944 <__sflush_r>
 8006a86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a88:	07da      	lsls	r2, r3, #31
 8006a8a:	4605      	mov	r5, r0
 8006a8c:	d4e4      	bmi.n	8006a58 <_fflush_r+0xc>
 8006a8e:	89a3      	ldrh	r3, [r4, #12]
 8006a90:	059b      	lsls	r3, r3, #22
 8006a92:	d4e1      	bmi.n	8006a58 <_fflush_r+0xc>
 8006a94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a96:	f7ff fbe5 	bl	8006264 <__retarget_lock_release_recursive>
 8006a9a:	e7dd      	b.n	8006a58 <_fflush_r+0xc>

08006a9c <__malloc_lock>:
 8006a9c:	4801      	ldr	r0, [pc, #4]	@ (8006aa4 <__malloc_lock+0x8>)
 8006a9e:	f7ff bbe0 	b.w	8006262 <__retarget_lock_acquire_recursive>
 8006aa2:	bf00      	nop
 8006aa4:	20025d1c 	.word	0x20025d1c

08006aa8 <__malloc_unlock>:
 8006aa8:	4801      	ldr	r0, [pc, #4]	@ (8006ab0 <__malloc_unlock+0x8>)
 8006aaa:	f7ff bbdb 	b.w	8006264 <__retarget_lock_release_recursive>
 8006aae:	bf00      	nop
 8006ab0:	20025d1c 	.word	0x20025d1c

08006ab4 <__sread>:
 8006ab4:	b510      	push	{r4, lr}
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006abc:	f000 f956 	bl	8006d6c <_read_r>
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	bfab      	itete	ge
 8006ac4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ac6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ac8:	181b      	addge	r3, r3, r0
 8006aca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ace:	bfac      	ite	ge
 8006ad0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ad2:	81a3      	strhlt	r3, [r4, #12]
 8006ad4:	bd10      	pop	{r4, pc}

08006ad6 <__swrite>:
 8006ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ada:	461f      	mov	r7, r3
 8006adc:	898b      	ldrh	r3, [r1, #12]
 8006ade:	05db      	lsls	r3, r3, #23
 8006ae0:	4605      	mov	r5, r0
 8006ae2:	460c      	mov	r4, r1
 8006ae4:	4616      	mov	r6, r2
 8006ae6:	d505      	bpl.n	8006af4 <__swrite+0x1e>
 8006ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aec:	2302      	movs	r3, #2
 8006aee:	2200      	movs	r2, #0
 8006af0:	f000 f92a 	bl	8006d48 <_lseek_r>
 8006af4:	89a3      	ldrh	r3, [r4, #12]
 8006af6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006afa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006afe:	81a3      	strh	r3, [r4, #12]
 8006b00:	4632      	mov	r2, r6
 8006b02:	463b      	mov	r3, r7
 8006b04:	4628      	mov	r0, r5
 8006b06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0a:	f000 b951 	b.w	8006db0 <_write_r>

08006b0e <__sseek>:
 8006b0e:	b510      	push	{r4, lr}
 8006b10:	460c      	mov	r4, r1
 8006b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b16:	f000 f917 	bl	8006d48 <_lseek_r>
 8006b1a:	1c43      	adds	r3, r0, #1
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	bf15      	itete	ne
 8006b20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b2a:	81a3      	strheq	r3, [r4, #12]
 8006b2c:	bf18      	it	ne
 8006b2e:	81a3      	strhne	r3, [r4, #12]
 8006b30:	bd10      	pop	{r4, pc}

08006b32 <__sclose>:
 8006b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b36:	f000 b94d 	b.w	8006dd4 <_close_r>

08006b3a <__swbuf_r>:
 8006b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3c:	460e      	mov	r6, r1
 8006b3e:	4614      	mov	r4, r2
 8006b40:	4605      	mov	r5, r0
 8006b42:	b118      	cbz	r0, 8006b4c <__swbuf_r+0x12>
 8006b44:	6a03      	ldr	r3, [r0, #32]
 8006b46:	b90b      	cbnz	r3, 8006b4c <__swbuf_r+0x12>
 8006b48:	f7ff fab2 	bl	80060b0 <__sinit>
 8006b4c:	69a3      	ldr	r3, [r4, #24]
 8006b4e:	60a3      	str	r3, [r4, #8]
 8006b50:	89a3      	ldrh	r3, [r4, #12]
 8006b52:	071a      	lsls	r2, r3, #28
 8006b54:	d501      	bpl.n	8006b5a <__swbuf_r+0x20>
 8006b56:	6923      	ldr	r3, [r4, #16]
 8006b58:	b943      	cbnz	r3, 8006b6c <__swbuf_r+0x32>
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	4628      	mov	r0, r5
 8006b5e:	f000 f82b 	bl	8006bb8 <__swsetup_r>
 8006b62:	b118      	cbz	r0, 8006b6c <__swbuf_r+0x32>
 8006b64:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006b68:	4638      	mov	r0, r7
 8006b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	6922      	ldr	r2, [r4, #16]
 8006b70:	1a98      	subs	r0, r3, r2
 8006b72:	6963      	ldr	r3, [r4, #20]
 8006b74:	b2f6      	uxtb	r6, r6
 8006b76:	4283      	cmp	r3, r0
 8006b78:	4637      	mov	r7, r6
 8006b7a:	dc05      	bgt.n	8006b88 <__swbuf_r+0x4e>
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	4628      	mov	r0, r5
 8006b80:	f7ff ff64 	bl	8006a4c <_fflush_r>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	d1ed      	bne.n	8006b64 <__swbuf_r+0x2a>
 8006b88:	68a3      	ldr	r3, [r4, #8]
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	60a3      	str	r3, [r4, #8]
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	6022      	str	r2, [r4, #0]
 8006b94:	701e      	strb	r6, [r3, #0]
 8006b96:	6962      	ldr	r2, [r4, #20]
 8006b98:	1c43      	adds	r3, r0, #1
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d004      	beq.n	8006ba8 <__swbuf_r+0x6e>
 8006b9e:	89a3      	ldrh	r3, [r4, #12]
 8006ba0:	07db      	lsls	r3, r3, #31
 8006ba2:	d5e1      	bpl.n	8006b68 <__swbuf_r+0x2e>
 8006ba4:	2e0a      	cmp	r6, #10
 8006ba6:	d1df      	bne.n	8006b68 <__swbuf_r+0x2e>
 8006ba8:	4621      	mov	r1, r4
 8006baa:	4628      	mov	r0, r5
 8006bac:	f7ff ff4e 	bl	8006a4c <_fflush_r>
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	d0d9      	beq.n	8006b68 <__swbuf_r+0x2e>
 8006bb4:	e7d6      	b.n	8006b64 <__swbuf_r+0x2a>
	...

08006bb8 <__swsetup_r>:
 8006bb8:	b538      	push	{r3, r4, r5, lr}
 8006bba:	4b29      	ldr	r3, [pc, #164]	@ (8006c60 <__swsetup_r+0xa8>)
 8006bbc:	4605      	mov	r5, r0
 8006bbe:	6818      	ldr	r0, [r3, #0]
 8006bc0:	460c      	mov	r4, r1
 8006bc2:	b118      	cbz	r0, 8006bcc <__swsetup_r+0x14>
 8006bc4:	6a03      	ldr	r3, [r0, #32]
 8006bc6:	b90b      	cbnz	r3, 8006bcc <__swsetup_r+0x14>
 8006bc8:	f7ff fa72 	bl	80060b0 <__sinit>
 8006bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bd0:	0719      	lsls	r1, r3, #28
 8006bd2:	d422      	bmi.n	8006c1a <__swsetup_r+0x62>
 8006bd4:	06da      	lsls	r2, r3, #27
 8006bd6:	d407      	bmi.n	8006be8 <__swsetup_r+0x30>
 8006bd8:	2209      	movs	r2, #9
 8006bda:	602a      	str	r2, [r5, #0]
 8006bdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006be0:	81a3      	strh	r3, [r4, #12]
 8006be2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006be6:	e033      	b.n	8006c50 <__swsetup_r+0x98>
 8006be8:	0758      	lsls	r0, r3, #29
 8006bea:	d512      	bpl.n	8006c12 <__swsetup_r+0x5a>
 8006bec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bee:	b141      	cbz	r1, 8006c02 <__swsetup_r+0x4a>
 8006bf0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006bf4:	4299      	cmp	r1, r3
 8006bf6:	d002      	beq.n	8006bfe <__swsetup_r+0x46>
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	f000 f90d 	bl	8006e18 <_free_r>
 8006bfe:	2300      	movs	r3, #0
 8006c00:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006c08:	81a3      	strh	r3, [r4, #12]
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	6063      	str	r3, [r4, #4]
 8006c0e:	6923      	ldr	r3, [r4, #16]
 8006c10:	6023      	str	r3, [r4, #0]
 8006c12:	89a3      	ldrh	r3, [r4, #12]
 8006c14:	f043 0308 	orr.w	r3, r3, #8
 8006c18:	81a3      	strh	r3, [r4, #12]
 8006c1a:	6923      	ldr	r3, [r4, #16]
 8006c1c:	b94b      	cbnz	r3, 8006c32 <__swsetup_r+0x7a>
 8006c1e:	89a3      	ldrh	r3, [r4, #12]
 8006c20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c28:	d003      	beq.n	8006c32 <__swsetup_r+0x7a>
 8006c2a:	4621      	mov	r1, r4
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	f000 f83f 	bl	8006cb0 <__smakebuf_r>
 8006c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c36:	f013 0201 	ands.w	r2, r3, #1
 8006c3a:	d00a      	beq.n	8006c52 <__swsetup_r+0x9a>
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	60a2      	str	r2, [r4, #8]
 8006c40:	6962      	ldr	r2, [r4, #20]
 8006c42:	4252      	negs	r2, r2
 8006c44:	61a2      	str	r2, [r4, #24]
 8006c46:	6922      	ldr	r2, [r4, #16]
 8006c48:	b942      	cbnz	r2, 8006c5c <__swsetup_r+0xa4>
 8006c4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006c4e:	d1c5      	bne.n	8006bdc <__swsetup_r+0x24>
 8006c50:	bd38      	pop	{r3, r4, r5, pc}
 8006c52:	0799      	lsls	r1, r3, #30
 8006c54:	bf58      	it	pl
 8006c56:	6962      	ldrpl	r2, [r4, #20]
 8006c58:	60a2      	str	r2, [r4, #8]
 8006c5a:	e7f4      	b.n	8006c46 <__swsetup_r+0x8e>
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	e7f7      	b.n	8006c50 <__swsetup_r+0x98>
 8006c60:	20000028 	.word	0x20000028

08006c64 <__swhatbuf_r>:
 8006c64:	b570      	push	{r4, r5, r6, lr}
 8006c66:	460c      	mov	r4, r1
 8006c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c6c:	2900      	cmp	r1, #0
 8006c6e:	b096      	sub	sp, #88	@ 0x58
 8006c70:	4615      	mov	r5, r2
 8006c72:	461e      	mov	r6, r3
 8006c74:	da0d      	bge.n	8006c92 <__swhatbuf_r+0x2e>
 8006c76:	89a3      	ldrh	r3, [r4, #12]
 8006c78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006c7c:	f04f 0100 	mov.w	r1, #0
 8006c80:	bf14      	ite	ne
 8006c82:	2340      	movne	r3, #64	@ 0x40
 8006c84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006c88:	2000      	movs	r0, #0
 8006c8a:	6031      	str	r1, [r6, #0]
 8006c8c:	602b      	str	r3, [r5, #0]
 8006c8e:	b016      	add	sp, #88	@ 0x58
 8006c90:	bd70      	pop	{r4, r5, r6, pc}
 8006c92:	466a      	mov	r2, sp
 8006c94:	f000 f8ae 	bl	8006df4 <_fstat_r>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	dbec      	blt.n	8006c76 <__swhatbuf_r+0x12>
 8006c9c:	9901      	ldr	r1, [sp, #4]
 8006c9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006ca2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006ca6:	4259      	negs	r1, r3
 8006ca8:	4159      	adcs	r1, r3
 8006caa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006cae:	e7eb      	b.n	8006c88 <__swhatbuf_r+0x24>

08006cb0 <__smakebuf_r>:
 8006cb0:	898b      	ldrh	r3, [r1, #12]
 8006cb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cb4:	079d      	lsls	r5, r3, #30
 8006cb6:	4606      	mov	r6, r0
 8006cb8:	460c      	mov	r4, r1
 8006cba:	d507      	bpl.n	8006ccc <__smakebuf_r+0x1c>
 8006cbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006cc0:	6023      	str	r3, [r4, #0]
 8006cc2:	6123      	str	r3, [r4, #16]
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	6163      	str	r3, [r4, #20]
 8006cc8:	b003      	add	sp, #12
 8006cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ccc:	ab01      	add	r3, sp, #4
 8006cce:	466a      	mov	r2, sp
 8006cd0:	f7ff ffc8 	bl	8006c64 <__swhatbuf_r>
 8006cd4:	9f00      	ldr	r7, [sp, #0]
 8006cd6:	4605      	mov	r5, r0
 8006cd8:	4639      	mov	r1, r7
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f7ff fc26 	bl	800652c <_malloc_r>
 8006ce0:	b948      	cbnz	r0, 8006cf6 <__smakebuf_r+0x46>
 8006ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ce6:	059a      	lsls	r2, r3, #22
 8006ce8:	d4ee      	bmi.n	8006cc8 <__smakebuf_r+0x18>
 8006cea:	f023 0303 	bic.w	r3, r3, #3
 8006cee:	f043 0302 	orr.w	r3, r3, #2
 8006cf2:	81a3      	strh	r3, [r4, #12]
 8006cf4:	e7e2      	b.n	8006cbc <__smakebuf_r+0xc>
 8006cf6:	89a3      	ldrh	r3, [r4, #12]
 8006cf8:	6020      	str	r0, [r4, #0]
 8006cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cfe:	81a3      	strh	r3, [r4, #12]
 8006d00:	9b01      	ldr	r3, [sp, #4]
 8006d02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006d06:	b15b      	cbz	r3, 8006d20 <__smakebuf_r+0x70>
 8006d08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	f000 f80b 	bl	8006d28 <_isatty_r>
 8006d12:	b128      	cbz	r0, 8006d20 <__smakebuf_r+0x70>
 8006d14:	89a3      	ldrh	r3, [r4, #12]
 8006d16:	f023 0303 	bic.w	r3, r3, #3
 8006d1a:	f043 0301 	orr.w	r3, r3, #1
 8006d1e:	81a3      	strh	r3, [r4, #12]
 8006d20:	89a3      	ldrh	r3, [r4, #12]
 8006d22:	431d      	orrs	r5, r3
 8006d24:	81a5      	strh	r5, [r4, #12]
 8006d26:	e7cf      	b.n	8006cc8 <__smakebuf_r+0x18>

08006d28 <_isatty_r>:
 8006d28:	b538      	push	{r3, r4, r5, lr}
 8006d2a:	4d06      	ldr	r5, [pc, #24]	@ (8006d44 <_isatty_r+0x1c>)
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	4604      	mov	r4, r0
 8006d30:	4608      	mov	r0, r1
 8006d32:	602b      	str	r3, [r5, #0]
 8006d34:	f7fb fcec 	bl	8002710 <_isatty>
 8006d38:	1c43      	adds	r3, r0, #1
 8006d3a:	d102      	bne.n	8006d42 <_isatty_r+0x1a>
 8006d3c:	682b      	ldr	r3, [r5, #0]
 8006d3e:	b103      	cbz	r3, 8006d42 <_isatty_r+0x1a>
 8006d40:	6023      	str	r3, [r4, #0]
 8006d42:	bd38      	pop	{r3, r4, r5, pc}
 8006d44:	20025d28 	.word	0x20025d28

08006d48 <_lseek_r>:
 8006d48:	b538      	push	{r3, r4, r5, lr}
 8006d4a:	4d07      	ldr	r5, [pc, #28]	@ (8006d68 <_lseek_r+0x20>)
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	4608      	mov	r0, r1
 8006d50:	4611      	mov	r1, r2
 8006d52:	2200      	movs	r2, #0
 8006d54:	602a      	str	r2, [r5, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	f7fb fce5 	bl	8002726 <_lseek>
 8006d5c:	1c43      	adds	r3, r0, #1
 8006d5e:	d102      	bne.n	8006d66 <_lseek_r+0x1e>
 8006d60:	682b      	ldr	r3, [r5, #0]
 8006d62:	b103      	cbz	r3, 8006d66 <_lseek_r+0x1e>
 8006d64:	6023      	str	r3, [r4, #0]
 8006d66:	bd38      	pop	{r3, r4, r5, pc}
 8006d68:	20025d28 	.word	0x20025d28

08006d6c <_read_r>:
 8006d6c:	b538      	push	{r3, r4, r5, lr}
 8006d6e:	4d07      	ldr	r5, [pc, #28]	@ (8006d8c <_read_r+0x20>)
 8006d70:	4604      	mov	r4, r0
 8006d72:	4608      	mov	r0, r1
 8006d74:	4611      	mov	r1, r2
 8006d76:	2200      	movs	r2, #0
 8006d78:	602a      	str	r2, [r5, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	f7fb fc73 	bl	8002666 <_read>
 8006d80:	1c43      	adds	r3, r0, #1
 8006d82:	d102      	bne.n	8006d8a <_read_r+0x1e>
 8006d84:	682b      	ldr	r3, [r5, #0]
 8006d86:	b103      	cbz	r3, 8006d8a <_read_r+0x1e>
 8006d88:	6023      	str	r3, [r4, #0]
 8006d8a:	bd38      	pop	{r3, r4, r5, pc}
 8006d8c:	20025d28 	.word	0x20025d28

08006d90 <_sbrk_r>:
 8006d90:	b538      	push	{r3, r4, r5, lr}
 8006d92:	4d06      	ldr	r5, [pc, #24]	@ (8006dac <_sbrk_r+0x1c>)
 8006d94:	2300      	movs	r3, #0
 8006d96:	4604      	mov	r4, r0
 8006d98:	4608      	mov	r0, r1
 8006d9a:	602b      	str	r3, [r5, #0]
 8006d9c:	f7fb fcd0 	bl	8002740 <_sbrk>
 8006da0:	1c43      	adds	r3, r0, #1
 8006da2:	d102      	bne.n	8006daa <_sbrk_r+0x1a>
 8006da4:	682b      	ldr	r3, [r5, #0]
 8006da6:	b103      	cbz	r3, 8006daa <_sbrk_r+0x1a>
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	bd38      	pop	{r3, r4, r5, pc}
 8006dac:	20025d28 	.word	0x20025d28

08006db0 <_write_r>:
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	4d07      	ldr	r5, [pc, #28]	@ (8006dd0 <_write_r+0x20>)
 8006db4:	4604      	mov	r4, r0
 8006db6:	4608      	mov	r0, r1
 8006db8:	4611      	mov	r1, r2
 8006dba:	2200      	movs	r2, #0
 8006dbc:	602a      	str	r2, [r5, #0]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f7fb fc6e 	bl	80026a0 <_write>
 8006dc4:	1c43      	adds	r3, r0, #1
 8006dc6:	d102      	bne.n	8006dce <_write_r+0x1e>
 8006dc8:	682b      	ldr	r3, [r5, #0]
 8006dca:	b103      	cbz	r3, 8006dce <_write_r+0x1e>
 8006dcc:	6023      	str	r3, [r4, #0]
 8006dce:	bd38      	pop	{r3, r4, r5, pc}
 8006dd0:	20025d28 	.word	0x20025d28

08006dd4 <_close_r>:
 8006dd4:	b538      	push	{r3, r4, r5, lr}
 8006dd6:	4d06      	ldr	r5, [pc, #24]	@ (8006df0 <_close_r+0x1c>)
 8006dd8:	2300      	movs	r3, #0
 8006dda:	4604      	mov	r4, r0
 8006ddc:	4608      	mov	r0, r1
 8006dde:	602b      	str	r3, [r5, #0]
 8006de0:	f7fb fc7a 	bl	80026d8 <_close>
 8006de4:	1c43      	adds	r3, r0, #1
 8006de6:	d102      	bne.n	8006dee <_close_r+0x1a>
 8006de8:	682b      	ldr	r3, [r5, #0]
 8006dea:	b103      	cbz	r3, 8006dee <_close_r+0x1a>
 8006dec:	6023      	str	r3, [r4, #0]
 8006dee:	bd38      	pop	{r3, r4, r5, pc}
 8006df0:	20025d28 	.word	0x20025d28

08006df4 <_fstat_r>:
 8006df4:	b538      	push	{r3, r4, r5, lr}
 8006df6:	4d07      	ldr	r5, [pc, #28]	@ (8006e14 <_fstat_r+0x20>)
 8006df8:	2300      	movs	r3, #0
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	4608      	mov	r0, r1
 8006dfe:	4611      	mov	r1, r2
 8006e00:	602b      	str	r3, [r5, #0]
 8006e02:	f7fb fc75 	bl	80026f0 <_fstat>
 8006e06:	1c43      	adds	r3, r0, #1
 8006e08:	d102      	bne.n	8006e10 <_fstat_r+0x1c>
 8006e0a:	682b      	ldr	r3, [r5, #0]
 8006e0c:	b103      	cbz	r3, 8006e10 <_fstat_r+0x1c>
 8006e0e:	6023      	str	r3, [r4, #0]
 8006e10:	bd38      	pop	{r3, r4, r5, pc}
 8006e12:	bf00      	nop
 8006e14:	20025d28 	.word	0x20025d28

08006e18 <_free_r>:
 8006e18:	b538      	push	{r3, r4, r5, lr}
 8006e1a:	4605      	mov	r5, r0
 8006e1c:	2900      	cmp	r1, #0
 8006e1e:	d041      	beq.n	8006ea4 <_free_r+0x8c>
 8006e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e24:	1f0c      	subs	r4, r1, #4
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	bfb8      	it	lt
 8006e2a:	18e4      	addlt	r4, r4, r3
 8006e2c:	f7ff fe36 	bl	8006a9c <__malloc_lock>
 8006e30:	4a1d      	ldr	r2, [pc, #116]	@ (8006ea8 <_free_r+0x90>)
 8006e32:	6813      	ldr	r3, [r2, #0]
 8006e34:	b933      	cbnz	r3, 8006e44 <_free_r+0x2c>
 8006e36:	6063      	str	r3, [r4, #4]
 8006e38:	6014      	str	r4, [r2, #0]
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e40:	f7ff be32 	b.w	8006aa8 <__malloc_unlock>
 8006e44:	42a3      	cmp	r3, r4
 8006e46:	d908      	bls.n	8006e5a <_free_r+0x42>
 8006e48:	6820      	ldr	r0, [r4, #0]
 8006e4a:	1821      	adds	r1, r4, r0
 8006e4c:	428b      	cmp	r3, r1
 8006e4e:	bf01      	itttt	eq
 8006e50:	6819      	ldreq	r1, [r3, #0]
 8006e52:	685b      	ldreq	r3, [r3, #4]
 8006e54:	1809      	addeq	r1, r1, r0
 8006e56:	6021      	streq	r1, [r4, #0]
 8006e58:	e7ed      	b.n	8006e36 <_free_r+0x1e>
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	b10b      	cbz	r3, 8006e64 <_free_r+0x4c>
 8006e60:	42a3      	cmp	r3, r4
 8006e62:	d9fa      	bls.n	8006e5a <_free_r+0x42>
 8006e64:	6811      	ldr	r1, [r2, #0]
 8006e66:	1850      	adds	r0, r2, r1
 8006e68:	42a0      	cmp	r0, r4
 8006e6a:	d10b      	bne.n	8006e84 <_free_r+0x6c>
 8006e6c:	6820      	ldr	r0, [r4, #0]
 8006e6e:	4401      	add	r1, r0
 8006e70:	1850      	adds	r0, r2, r1
 8006e72:	4283      	cmp	r3, r0
 8006e74:	6011      	str	r1, [r2, #0]
 8006e76:	d1e0      	bne.n	8006e3a <_free_r+0x22>
 8006e78:	6818      	ldr	r0, [r3, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	6053      	str	r3, [r2, #4]
 8006e7e:	4408      	add	r0, r1
 8006e80:	6010      	str	r0, [r2, #0]
 8006e82:	e7da      	b.n	8006e3a <_free_r+0x22>
 8006e84:	d902      	bls.n	8006e8c <_free_r+0x74>
 8006e86:	230c      	movs	r3, #12
 8006e88:	602b      	str	r3, [r5, #0]
 8006e8a:	e7d6      	b.n	8006e3a <_free_r+0x22>
 8006e8c:	6820      	ldr	r0, [r4, #0]
 8006e8e:	1821      	adds	r1, r4, r0
 8006e90:	428b      	cmp	r3, r1
 8006e92:	bf04      	itt	eq
 8006e94:	6819      	ldreq	r1, [r3, #0]
 8006e96:	685b      	ldreq	r3, [r3, #4]
 8006e98:	6063      	str	r3, [r4, #4]
 8006e9a:	bf04      	itt	eq
 8006e9c:	1809      	addeq	r1, r1, r0
 8006e9e:	6021      	streq	r1, [r4, #0]
 8006ea0:	6054      	str	r4, [r2, #4]
 8006ea2:	e7ca      	b.n	8006e3a <_free_r+0x22>
 8006ea4:	bd38      	pop	{r3, r4, r5, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20025d24 	.word	0x20025d24

08006eac <_init>:
 8006eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eae:	bf00      	nop
 8006eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eb2:	bc08      	pop	{r3}
 8006eb4:	469e      	mov	lr, r3
 8006eb6:	4770      	bx	lr

08006eb8 <_fini>:
 8006eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eba:	bf00      	nop
 8006ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ebe:	bc08      	pop	{r3}
 8006ec0:	469e      	mov	lr, r3
 8006ec2:	4770      	bx	lr
