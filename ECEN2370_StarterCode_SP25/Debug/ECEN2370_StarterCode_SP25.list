
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b00  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e8  08005cac  08005cac  00006cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e94  08006e94  0000801c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006e94  08006e94  00007e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e9c  08006e9c  0000801c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e9c  08006e9c  00007e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ea0  08006ea0  00007ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08006ea4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000801c  2**0
                  CONTENTS
 10 .bss          00025b64  2000001c  2000001c  0000801c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025b80  20025b80  0000801c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000801c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f3b  00000000  00000000  0000804c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fc1  00000000  00000000  0001af87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  0001df48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f2a  00000000  00000000  0001f2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026ebe  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000173df  00000000  00000000  000470d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2a84  00000000  00000000  0005e4b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00140f3b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005248  00000000  00000000  00140f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a3  00000000  00000000  001461c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005c94 	.word	0x08005c94

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	08005c94 	.word	0x08005c94

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 800051c:	f001 ff90 	bl	8002440 <initialise_monitor_handles>
    LTCD__Init();
 8000520:	f000 f9ba 	bl	8000898 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000524:	2000      	movs	r0, #0
 8000526:	f000 f977 	bl	8000818 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 800052a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800052e:	2000      	movs	r0, #0
 8000530:	f000 fa2e 	bl	8000990 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 8000534:	f000 fb04 	bl	8000b40 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 8000538:	4b02      	ldr	r3, [pc, #8]	@ (8000544 <ApplicationInit+0x2c>)
 800053a:	2201      	movs	r2, #1
 800053c:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000038 	.word	0x20000038

08000548 <ApplicationFirstScreen>:
void ApplicationFirstScreen(){
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	firstScreen();
 800054c:	f000 f81e 	bl	800058c <firstScreen>
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}

08000554 <LCD_Touch_Polling_Demo>:
// 	visualDemo();
// }

#if COMPILE_TOUCH_FUNCTIONS == 1
void LCD_Touch_Polling_Demo(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_GREEN);
 8000558:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800055c:	2000      	movs	r0, #0
 800055e:	f000 fa17 	bl	8000990 <LCD_Clear>
	while (1) {
		/* If touch pressed */
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000562:	4809      	ldr	r0, [pc, #36]	@ (8000588 <LCD_Touch_Polling_Demo+0x34>)
 8000564:	f000 faf7 	bl	8000b56 <returnTouchStateAndLocation>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d105      	bne.n	800057a <LCD_Touch_Polling_Demo+0x26>
			/* Touch valid */
			LCD_Clear(0, LCD_COLOR_RED);
 800056e:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8000572:	2000      	movs	r0, #0
 8000574:	f000 fa0c 	bl	8000990 <LCD_Clear>
 8000578:	e7f3      	b.n	8000562 <LCD_Touch_Polling_Demo+0xe>
		} else {
			/* Touch not pressed */
			LCD_Clear(0, LCD_COLOR_GREEN);
 800057a:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800057e:	2000      	movs	r0, #0
 8000580:	f000 fa06 	bl	8000990 <LCD_Clear>
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000584:	e7ed      	b.n	8000562 <LCD_Touch_Polling_Demo+0xe>
 8000586:	bf00      	nop
 8000588:	20000038 	.word	0x20000038

0800058c <firstScreen>:
#define ROWS 6
#define COLS 7

char board[ROWS][COLS];

void firstScreen(void){
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLUE);
 8000590:	211f      	movs	r1, #31
 8000592:	2000      	movs	r0, #0
 8000594:	f000 f9fc 	bl	8000990 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000598:	2000      	movs	r0, #0
 800059a:	f000 fa1b 	bl	80009d4 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 800059e:	4839      	ldr	r0, [pc, #228]	@ (8000684 <firstScreen+0xf8>)
 80005a0:	f000 fa28 	bl	80009f4 <LCD_SetFont>
	LCD_DisplayChar(60,140,'C');
 80005a4:	2243      	movs	r2, #67	@ 0x43
 80005a6:	218c      	movs	r1, #140	@ 0x8c
 80005a8:	203c      	movs	r0, #60	@ 0x3c
 80005aa:	f000 faa1 	bl	8000af0 <LCD_DisplayChar>
	LCD_DisplayChar(75,140,'o');
 80005ae:	226f      	movs	r2, #111	@ 0x6f
 80005b0:	218c      	movs	r1, #140	@ 0x8c
 80005b2:	204b      	movs	r0, #75	@ 0x4b
 80005b4:	f000 fa9c 	bl	8000af0 <LCD_DisplayChar>
	LCD_DisplayChar(90,140,'n');
 80005b8:	226e      	movs	r2, #110	@ 0x6e
 80005ba:	218c      	movs	r1, #140	@ 0x8c
 80005bc:	205a      	movs	r0, #90	@ 0x5a
 80005be:	f000 fa97 	bl	8000af0 <LCD_DisplayChar>
	LCD_DisplayChar(105,140,'n');
 80005c2:	226e      	movs	r2, #110	@ 0x6e
 80005c4:	218c      	movs	r1, #140	@ 0x8c
 80005c6:	2069      	movs	r0, #105	@ 0x69
 80005c8:	f000 fa92 	bl	8000af0 <LCD_DisplayChar>
	LCD_DisplayChar(120,140,'e');
 80005cc:	2265      	movs	r2, #101	@ 0x65
 80005ce:	218c      	movs	r1, #140	@ 0x8c
 80005d0:	2078      	movs	r0, #120	@ 0x78
 80005d2:	f000 fa8d 	bl	8000af0 <LCD_DisplayChar>
	LCD_DisplayChar(135,140,'c');
 80005d6:	2263      	movs	r2, #99	@ 0x63
 80005d8:	218c      	movs	r1, #140	@ 0x8c
 80005da:	2087      	movs	r0, #135	@ 0x87
 80005dc:	f000 fa88 	bl	8000af0 <LCD_DisplayChar>
	LCD_DisplayChar(150,140,'t');
 80005e0:	2274      	movs	r2, #116	@ 0x74
 80005e2:	218c      	movs	r1, #140	@ 0x8c
 80005e4:	2096      	movs	r0, #150	@ 0x96
 80005e6:	f000 fa83 	bl	8000af0 <LCD_DisplayChar>
	LCD_DisplayChar(180,140,'4');
 80005ea:	2234      	movs	r2, #52	@ 0x34
 80005ec:	218c      	movs	r1, #140	@ 0x8c
 80005ee:	20b4      	movs	r0, #180	@ 0xb4
 80005f0:	f000 fa7e 	bl	8000af0 <LCD_DisplayChar>

    LCD_DisplayChar(10,190,'P');
 80005f4:	2250      	movs	r2, #80	@ 0x50
 80005f6:	21be      	movs	r1, #190	@ 0xbe
 80005f8:	200a      	movs	r0, #10
 80005fa:	f000 fa79 	bl	8000af0 <LCD_DisplayChar>
    LCD_DisplayChar(20,190,'L');
 80005fe:	224c      	movs	r2, #76	@ 0x4c
 8000600:	21be      	movs	r1, #190	@ 0xbe
 8000602:	2014      	movs	r0, #20
 8000604:	f000 fa74 	bl	8000af0 <LCD_DisplayChar>
    LCD_DisplayChar(30,190,'A');
 8000608:	2241      	movs	r2, #65	@ 0x41
 800060a:	21be      	movs	r1, #190	@ 0xbe
 800060c:	201e      	movs	r0, #30
 800060e:	f000 fa6f 	bl	8000af0 <LCD_DisplayChar>
    LCD_DisplayChar(45,190,'Y');
 8000612:	2259      	movs	r2, #89	@ 0x59
 8000614:	21be      	movs	r1, #190	@ 0xbe
 8000616:	202d      	movs	r0, #45	@ 0x2d
 8000618:	f000 fa6a 	bl	8000af0 <LCD_DisplayChar>
    LCD_DisplayChar(60,190,'E');
 800061c:	2245      	movs	r2, #69	@ 0x45
 800061e:	21be      	movs	r1, #190	@ 0xbe
 8000620:	203c      	movs	r0, #60	@ 0x3c
 8000622:	f000 fa65 	bl	8000af0 <LCD_DisplayChar>
    LCD_DisplayChar(75,190,'R');
 8000626:	2252      	movs	r2, #82	@ 0x52
 8000628:	21be      	movs	r1, #190	@ 0xbe
 800062a:	204b      	movs	r0, #75	@ 0x4b
 800062c:	f000 fa60 	bl	8000af0 <LCD_DisplayChar>
    LCD_DisplayChar(95,190,'1');
 8000630:	2231      	movs	r2, #49	@ 0x31
 8000632:	21be      	movs	r1, #190	@ 0xbe
 8000634:	205f      	movs	r0, #95	@ 0x5f
 8000636:	f000 fa5b 	bl	8000af0 <LCD_DisplayChar>

    LCD_DisplayChar(120,190,'P');
 800063a:	2250      	movs	r2, #80	@ 0x50
 800063c:	21be      	movs	r1, #190	@ 0xbe
 800063e:	2078      	movs	r0, #120	@ 0x78
 8000640:	f000 fa56 	bl	8000af0 <LCD_DisplayChar>
    LCD_DisplayChar(130,190,'L');
 8000644:	224c      	movs	r2, #76	@ 0x4c
 8000646:	21be      	movs	r1, #190	@ 0xbe
 8000648:	2082      	movs	r0, #130	@ 0x82
 800064a:	f000 fa51 	bl	8000af0 <LCD_DisplayChar>
    LCD_DisplayChar(140,190,'A');
 800064e:	2241      	movs	r2, #65	@ 0x41
 8000650:	21be      	movs	r1, #190	@ 0xbe
 8000652:	208c      	movs	r0, #140	@ 0x8c
 8000654:	f000 fa4c 	bl	8000af0 <LCD_DisplayChar>
    LCD_DisplayChar(155,190,'Y');
 8000658:	2259      	movs	r2, #89	@ 0x59
 800065a:	21be      	movs	r1, #190	@ 0xbe
 800065c:	209b      	movs	r0, #155	@ 0x9b
 800065e:	f000 fa47 	bl	8000af0 <LCD_DisplayChar>
    LCD_DisplayChar(170,190,'E');
 8000662:	2245      	movs	r2, #69	@ 0x45
 8000664:	21be      	movs	r1, #190	@ 0xbe
 8000666:	20aa      	movs	r0, #170	@ 0xaa
 8000668:	f000 fa42 	bl	8000af0 <LCD_DisplayChar>
    LCD_DisplayChar(185,190,'R');
 800066c:	2252      	movs	r2, #82	@ 0x52
 800066e:	21be      	movs	r1, #190	@ 0xbe
 8000670:	20b9      	movs	r0, #185	@ 0xb9
 8000672:	f000 fa3d 	bl	8000af0 <LCD_DisplayChar>
    LCD_DisplayChar(205,190,'2');
 8000676:	2232      	movs	r2, #50	@ 0x32
 8000678:	21be      	movs	r1, #190	@ 0xbe
 800067a:	20cd      	movs	r0, #205	@ 0xcd
 800067c:	f000 fa38 	bl	8000af0 <LCD_DisplayChar>

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000004 	.word	0x20000004

08000688 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08c      	sub	sp, #48	@ 0x30
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
 8000692:	4b5a      	ldr	r3, [pc, #360]	@ (80007fc <LCD_GPIO_Init+0x174>)
 8000694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000696:	4a59      	ldr	r2, [pc, #356]	@ (80007fc <LCD_GPIO_Init+0x174>)
 8000698:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800069c:	6453      	str	r3, [r2, #68]	@ 0x44
 800069e:	4b57      	ldr	r3, [pc, #348]	@ (80007fc <LCD_GPIO_Init+0x174>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80006a6:	61bb      	str	r3, [r7, #24]
 80006a8:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
 80006ae:	4b53      	ldr	r3, [pc, #332]	@ (80007fc <LCD_GPIO_Init+0x174>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a52      	ldr	r2, [pc, #328]	@ (80007fc <LCD_GPIO_Init+0x174>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b50      	ldr	r3, [pc, #320]	@ (80007fc <LCD_GPIO_Init+0x174>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
 80006ca:	4b4c      	ldr	r3, [pc, #304]	@ (80007fc <LCD_GPIO_Init+0x174>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a4b      	ldr	r2, [pc, #300]	@ (80007fc <LCD_GPIO_Init+0x174>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b49      	ldr	r3, [pc, #292]	@ (80007fc <LCD_GPIO_Init+0x174>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	4b45      	ldr	r3, [pc, #276]	@ (80007fc <LCD_GPIO_Init+0x174>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a44      	ldr	r2, [pc, #272]	@ (80007fc <LCD_GPIO_Init+0x174>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b42      	ldr	r3, [pc, #264]	@ (80007fc <LCD_GPIO_Init+0x174>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	4b3e      	ldr	r3, [pc, #248]	@ (80007fc <LCD_GPIO_Init+0x174>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a3d      	ldr	r2, [pc, #244]	@ (80007fc <LCD_GPIO_Init+0x174>)
 8000708:	f043 0308 	orr.w	r3, r3, #8
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b3b      	ldr	r3, [pc, #236]	@ (80007fc <LCD_GPIO_Init+0x174>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0308 	and.w	r3, r3, #8
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b37      	ldr	r3, [pc, #220]	@ (80007fc <LCD_GPIO_Init+0x174>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a36      	ldr	r2, [pc, #216]	@ (80007fc <LCD_GPIO_Init+0x174>)
 8000724:	f043 0320 	orr.w	r3, r3, #32
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b34      	ldr	r3, [pc, #208]	@ (80007fc <LCD_GPIO_Init+0x174>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0320 	and.w	r3, r3, #32
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4b30      	ldr	r3, [pc, #192]	@ (80007fc <LCD_GPIO_Init+0x174>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a2f      	ldr	r2, [pc, #188]	@ (80007fc <LCD_GPIO_Init+0x174>)
 8000740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b2d      	ldr	r3, [pc, #180]	@ (80007fc <LCD_GPIO_Init+0x174>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000752:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000756:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000760:	2302      	movs	r3, #2
 8000762:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000764:	230e      	movs	r3, #14
 8000766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	4824      	ldr	r0, [pc, #144]	@ (8000800 <LCD_GPIO_Init+0x178>)
 8000770:	f002 f826 	bl	80027c0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000774:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000778:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	4619      	mov	r1, r3
 8000780:	4820      	ldr	r0, [pc, #128]	@ (8000804 <LCD_GPIO_Init+0x17c>)
 8000782:	f002 f81d 	bl	80027c0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000786:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800078a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800078c:	f107 031c 	add.w	r3, r7, #28
 8000790:	4619      	mov	r1, r3
 8000792:	481d      	ldr	r0, [pc, #116]	@ (8000808 <LCD_GPIO_Init+0x180>)
 8000794:	f002 f814 	bl	80027c0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000798:	2348      	movs	r3, #72	@ 0x48
 800079a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	481a      	ldr	r0, [pc, #104]	@ (800080c <LCD_GPIO_Init+0x184>)
 80007a4:	f002 f80c 	bl	80027c0 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80007a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4619      	mov	r1, r3
 80007b4:	4816      	ldr	r0, [pc, #88]	@ (8000810 <LCD_GPIO_Init+0x188>)
 80007b6:	f002 f803 	bl	80027c0 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80007ba:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80007be:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	4619      	mov	r1, r3
 80007c6:	4813      	ldr	r0, [pc, #76]	@ (8000814 <LCD_GPIO_Init+0x18c>)
 80007c8:	f001 fffa 	bl	80027c0 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80007cc:	2303      	movs	r3, #3
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80007d0:	2309      	movs	r3, #9
 80007d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	480a      	ldr	r0, [pc, #40]	@ (8000804 <LCD_GPIO_Init+0x17c>)
 80007dc:	f001 fff0 	bl	80027c0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80007e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4809      	ldr	r0, [pc, #36]	@ (8000814 <LCD_GPIO_Init+0x18c>)
 80007ee:	f001 ffe7 	bl	80027c0 <HAL_GPIO_Init>
}
 80007f2:	bf00      	nop
 80007f4:	3730      	adds	r7, #48	@ 0x30
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800
 8000800:	40020000 	.word	0x40020000
 8000804:	40020400 	.word	0x40020400
 8000808:	40020800 	.word	0x40020800
 800080c:	40020c00 	.word	0x40020c00
 8000810:	40021400 	.word	0x40021400
 8000814:	40021800 	.word	0x40021800

08000818 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b090      	sub	sp, #64	@ 0x40
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000826:	23f0      	movs	r3, #240	@ 0xf0
 8000828:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800082e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000832:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000834:	2302      	movs	r3, #2
 8000836:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000838:	23ff      	movs	r3, #255	@ 0xff
 800083a:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000840:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000844:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000846:	2305      	movs	r3, #5
 8000848:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d101      	bne.n	8000854 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000850:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <LTCD_Layer_Init+0x78>)
 8000852:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000854:	23f0      	movs	r3, #240	@ 0xf0
 8000856:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000858:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800085c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000870:	79fa      	ldrb	r2, [r7, #7]
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	4619      	mov	r1, r3
 8000878:	4806      	ldr	r0, [pc, #24]	@ (8000894 <LTCD_Layer_Init+0x7c>)
 800087a:	f003 fbe3 	bl	8004044 <HAL_LTDC_ConfigLayer>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000884:	f000 f956 	bl	8000b34 <LCD_Error_Handler>
	}
}
 8000888:	bf00      	nop
 800088a:	3740      	adds	r7, #64	@ 0x40
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	2000011c 	.word	0x2000011c
 8000894:	20000040 	.word	0x20000040

08000898 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 800089c:	4b2a      	ldr	r3, [pc, #168]	@ (8000948 <LTCD__Init+0xb0>)
 800089e:	4a2b      	ldr	r2, [pc, #172]	@ (800094c <LTCD__Init+0xb4>)
 80008a0:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80008a2:	4b29      	ldr	r3, [pc, #164]	@ (8000948 <LTCD__Init+0xb0>)
 80008a4:	2209      	movs	r2, #9
 80008a6:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80008a8:	4b27      	ldr	r3, [pc, #156]	@ (8000948 <LTCD__Init+0xb0>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80008ae:	4b26      	ldr	r3, [pc, #152]	@ (8000948 <LTCD__Init+0xb0>)
 80008b0:	221d      	movs	r2, #29
 80008b2:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80008b4:	4b24      	ldr	r3, [pc, #144]	@ (8000948 <LTCD__Init+0xb0>)
 80008b6:	2203      	movs	r2, #3
 80008b8:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80008ba:	4b23      	ldr	r3, [pc, #140]	@ (8000948 <LTCD__Init+0xb0>)
 80008bc:	f240 120d 	movw	r2, #269	@ 0x10d
 80008c0:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80008c2:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <LTCD__Init+0xb0>)
 80008c4:	f240 1243 	movw	r2, #323	@ 0x143
 80008c8:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000948 <LTCD__Init+0xb0>)
 80008cc:	f240 1217 	movw	r2, #279	@ 0x117
 80008d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80008d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <LTCD__Init+0xb0>)
 80008d4:	f240 1247 	movw	r2, #327	@ 0x147
 80008d8:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80008da:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <LTCD__Init+0xb0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80008e2:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <LTCD__Init+0xb0>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80008ea:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <LTCD__Init+0xb0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80008f2:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <LTCD__Init+0xb8>)
 80008f4:	2208      	movs	r2, #8
 80008f6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80008f8:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <LTCD__Init+0xb8>)
 80008fa:	22c0      	movs	r2, #192	@ 0xc0
 80008fc:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80008fe:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <LTCD__Init+0xb8>)
 8000900:	2204      	movs	r2, #4
 8000902:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000904:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <LTCD__Init+0xb8>)
 8000906:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800090a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800090c:	4810      	ldr	r0, [pc, #64]	@ (8000950 <LTCD__Init+0xb8>)
 800090e:	f004 f9f3 	bl	8004cf8 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000912:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <LTCD__Init+0xb0>)
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000918:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <LTCD__Init+0xb0>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800091e:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <LTCD__Init+0xb0>)
 8000920:	2200      	movs	r2, #0
 8000922:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000924:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <LTCD__Init+0xb0>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 800092a:	f7ff fead 	bl	8000688 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800092e:	4806      	ldr	r0, [pc, #24]	@ (8000948 <LTCD__Init+0xb0>)
 8000930:	f003 fab8 	bl	8003ea4 <HAL_LTDC_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 800093a:	f000 f8fb 	bl	8000b34 <LCD_Error_Handler>
	 }

	ili9341_Init();
 800093e:	f000 f916 	bl	8000b6e <ili9341_Init>
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000040 	.word	0x20000040
 800094c:	40016800 	.word	0x40016800
 8000950:	200000e8 	.word	0x200000e8

08000954 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	80fb      	strh	r3, [r7, #6]
 800095e:	460b      	mov	r3, r1
 8000960:	80bb      	strh	r3, [r7, #4]
 8000962:	4613      	mov	r3, r2
 8000964:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000966:	88ba      	ldrh	r2, [r7, #4]
 8000968:	4613      	mov	r3, r2
 800096a:	011b      	lsls	r3, r3, #4
 800096c:	1a9b      	subs	r3, r3, r2
 800096e:	011b      	lsls	r3, r3, #4
 8000970:	461a      	mov	r2, r3
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	4413      	add	r3, r2
 8000976:	4905      	ldr	r1, [pc, #20]	@ (800098c <LCD_Draw_Pixel+0x38>)
 8000978:	887a      	ldrh	r2, [r7, #2]
 800097a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	2000011c 	.word	0x2000011c

08000990 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	460a      	mov	r2, r1
 800099a:	71fb      	strb	r3, [r7, #7]
 800099c:	4613      	mov	r3, r2
 800099e:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d10e      	bne.n	80009c4 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	e007      	b.n	80009bc <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80009ac:	4908      	ldr	r1, [pc, #32]	@ (80009d0 <LCD_Clear+0x40>)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	88ba      	ldrh	r2, [r7, #4]
 80009b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	3301      	adds	r3, #1
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80009c2:	d3f3      	bcc.n	80009ac <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	2000011c 	.word	0x2000011c

080009d4 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80009de:	4a04      	ldr	r2, [pc, #16]	@ (80009f0 <LCD_SetTextColor+0x1c>)
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	8013      	strh	r3, [r2, #0]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	20000000 	.word	0x20000000

080009f4 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80009fc:	4a04      	ldr	r2, [pc, #16]	@ (8000a10 <LCD_SetFont+0x1c>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000118 	.word	0x20000118

08000a14 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	603a      	str	r2, [r7, #0]
 8000a1e:	80fb      	strh	r3, [r7, #6]
 8000a20:	460b      	mov	r3, r1
 8000a22:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	e04c      	b.n	8000acc <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	e03f      	b.n	8000ab8 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	4619      	mov	r1, r3
 8000a44:	4b27      	ldr	r3, [pc, #156]	@ (8000ae4 <LCD_Draw_Char+0xd0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	889b      	ldrh	r3, [r3, #4]
 8000a4a:	4a27      	ldr	r2, [pc, #156]	@ (8000ae8 <LCD_Draw_Char+0xd4>)
 8000a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a50:	08db      	lsrs	r3, r3, #3
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	2280      	movs	r2, #128	@ 0x80
 8000a58:	409a      	lsls	r2, r3
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	fa42 f303 	asr.w	r3, r2, r3
 8000a60:	400b      	ands	r3, r1
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d104      	bne.n	8000a70 <LCD_Draw_Char+0x5c>
 8000a66:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae4 <LCD_Draw_Char+0xd0>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	889b      	ldrh	r3, [r3, #4]
 8000a6c:	2b0c      	cmp	r3, #12
 8000a6e:	d920      	bls.n	8000ab2 <LCD_Draw_Char+0x9e>
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	683a      	ldr	r2, [r7, #0]
 8000a76:	4413      	add	r3, r2
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	fa42 f303 	asr.w	r3, r2, r3
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d104      	bne.n	8000a94 <LCD_Draw_Char+0x80>
 8000a8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ae4 <LCD_Draw_Char+0xd0>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	889b      	ldrh	r3, [r3, #4]
 8000a90:	2b0c      	cmp	r3, #12
 8000a92:	d80e      	bhi.n	8000ab2 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	88fb      	ldrh	r3, [r7, #6]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	b298      	uxth	r0, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	88bb      	ldrh	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	4a10      	ldr	r2, [pc, #64]	@ (8000aec <LCD_Draw_Char+0xd8>)
 8000aaa:	8812      	ldrh	r2, [r2, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	f7ff ff51 	bl	8000954 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <LCD_Draw_Char+0xd0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	889b      	ldrh	r3, [r3, #4]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d3b8      	bcc.n	8000a38 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <LCD_Draw_Char+0xd0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	88db      	ldrh	r3, [r3, #6]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d3ab      	bcc.n	8000a32 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000ada:	bf00      	nop
 8000adc:	bf00      	nop
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000118 	.word	0x20000118
 8000ae8:	aaaaaaab 	.word	0xaaaaaaab
 8000aec:	20000000 	.word	0x20000000

08000af0 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	80fb      	strh	r3, [r7, #6]
 8000afa:	460b      	mov	r3, r1
 8000afc:	80bb      	strh	r3, [r7, #4]
 8000afe:	4613      	mov	r3, r2
 8000b00:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000b02:	78fb      	ldrb	r3, [r7, #3]
 8000b04:	3b20      	subs	r3, #32
 8000b06:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000b08:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <LCD_DisplayChar+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	78fb      	ldrb	r3, [r7, #3]
 8000b10:	4907      	ldr	r1, [pc, #28]	@ (8000b30 <LCD_DisplayChar+0x40>)
 8000b12:	6809      	ldr	r1, [r1, #0]
 8000b14:	88c9      	ldrh	r1, [r1, #6]
 8000b16:	fb01 f303 	mul.w	r3, r1, r3
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	441a      	add	r2, r3
 8000b1e:	88b9      	ldrh	r1, [r7, #4]
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff ff76 	bl	8000a14 <LCD_Draw_Char>
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000118 	.word	0x20000118

08000b34 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <LCD_Error_Handler+0x8>

08000b40 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000b44:	f001 f931 	bl	8001daa <STMPE811_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d001      	beq.n	8000b52 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000b4e:	bf00      	nop
 8000b50:	e7fd      	b.n	8000b4e <InitializeLCDTouch+0xe>
  }
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f001 f9db 	bl	8001f1a <STMPE811_ReadTouch>
 8000b64:	4603      	mov	r3, r0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000b72:	f000 f9ff 	bl	8000f74 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000b76:	20ca      	movs	r0, #202	@ 0xca
 8000b78:	f000 f943 	bl	8000e02 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000b7c:	20c3      	movs	r0, #195	@ 0xc3
 8000b7e:	f000 f94d 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000b82:	2008      	movs	r0, #8
 8000b84:	f000 f94a 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000b88:	2050      	movs	r0, #80	@ 0x50
 8000b8a:	f000 f947 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000b8e:	20cf      	movs	r0, #207	@ 0xcf
 8000b90:	f000 f937 	bl	8000e02 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000b94:	2000      	movs	r0, #0
 8000b96:	f000 f941 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000b9a:	20c1      	movs	r0, #193	@ 0xc1
 8000b9c:	f000 f93e 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000ba0:	2030      	movs	r0, #48	@ 0x30
 8000ba2:	f000 f93b 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000ba6:	20ed      	movs	r0, #237	@ 0xed
 8000ba8:	f000 f92b 	bl	8000e02 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000bac:	2064      	movs	r0, #100	@ 0x64
 8000bae:	f000 f935 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000bb2:	2003      	movs	r0, #3
 8000bb4:	f000 f932 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000bb8:	2012      	movs	r0, #18
 8000bba:	f000 f92f 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000bbe:	2081      	movs	r0, #129	@ 0x81
 8000bc0:	f000 f92c 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000bc4:	20e8      	movs	r0, #232	@ 0xe8
 8000bc6:	f000 f91c 	bl	8000e02 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000bca:	2085      	movs	r0, #133	@ 0x85
 8000bcc:	f000 f926 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f000 f923 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000bd6:	2078      	movs	r0, #120	@ 0x78
 8000bd8:	f000 f920 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000bdc:	20cb      	movs	r0, #203	@ 0xcb
 8000bde:	f000 f910 	bl	8000e02 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000be2:	2039      	movs	r0, #57	@ 0x39
 8000be4:	f000 f91a 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000be8:	202c      	movs	r0, #44	@ 0x2c
 8000bea:	f000 f917 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f000 f914 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000bf4:	2034      	movs	r0, #52	@ 0x34
 8000bf6:	f000 f911 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	f000 f90e 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000c00:	20f7      	movs	r0, #247	@ 0xf7
 8000c02:	f000 f8fe 	bl	8000e02 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000c06:	2020      	movs	r0, #32
 8000c08:	f000 f908 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000c0c:	20ea      	movs	r0, #234	@ 0xea
 8000c0e:	f000 f8f8 	bl	8000e02 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 f902 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f000 f8ff 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000c1e:	20b1      	movs	r0, #177	@ 0xb1
 8000c20:	f000 f8ef 	bl	8000e02 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000c24:	2000      	movs	r0, #0
 8000c26:	f000 f8f9 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000c2a:	201b      	movs	r0, #27
 8000c2c:	f000 f8f6 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000c30:	20b6      	movs	r0, #182	@ 0xb6
 8000c32:	f000 f8e6 	bl	8000e02 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000c36:	200a      	movs	r0, #10
 8000c38:	f000 f8f0 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8000c3c:	20a2      	movs	r0, #162	@ 0xa2
 8000c3e:	f000 f8ed 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8000c42:	20c0      	movs	r0, #192	@ 0xc0
 8000c44:	f000 f8dd 	bl	8000e02 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000c48:	2010      	movs	r0, #16
 8000c4a:	f000 f8e7 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8000c4e:	20c1      	movs	r0, #193	@ 0xc1
 8000c50:	f000 f8d7 	bl	8000e02 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000c54:	2010      	movs	r0, #16
 8000c56:	f000 f8e1 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8000c5a:	20c5      	movs	r0, #197	@ 0xc5
 8000c5c:	f000 f8d1 	bl	8000e02 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8000c60:	2045      	movs	r0, #69	@ 0x45
 8000c62:	f000 f8db 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8000c66:	2015      	movs	r0, #21
 8000c68:	f000 f8d8 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8000c6c:	20c7      	movs	r0, #199	@ 0xc7
 8000c6e:	f000 f8c8 	bl	8000e02 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8000c72:	2090      	movs	r0, #144	@ 0x90
 8000c74:	f000 f8d2 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8000c78:	2036      	movs	r0, #54	@ 0x36
 8000c7a:	f000 f8c2 	bl	8000e02 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8000c7e:	20c8      	movs	r0, #200	@ 0xc8
 8000c80:	f000 f8cc 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8000c84:	20f2      	movs	r0, #242	@ 0xf2
 8000c86:	f000 f8bc 	bl	8000e02 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f000 f8c6 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8000c90:	20b0      	movs	r0, #176	@ 0xb0
 8000c92:	f000 f8b6 	bl	8000e02 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8000c96:	20c2      	movs	r0, #194	@ 0xc2
 8000c98:	f000 f8c0 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000c9c:	20b6      	movs	r0, #182	@ 0xb6
 8000c9e:	f000 f8b0 	bl	8000e02 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000ca2:	200a      	movs	r0, #10
 8000ca4:	f000 f8ba 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8000ca8:	20a7      	movs	r0, #167	@ 0xa7
 8000caa:	f000 f8b7 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8000cae:	2027      	movs	r0, #39	@ 0x27
 8000cb0:	f000 f8b4 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000cb4:	2004      	movs	r0, #4
 8000cb6:	f000 f8b1 	bl	8000e1c <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8000cba:	202a      	movs	r0, #42	@ 0x2a
 8000cbc:	f000 f8a1 	bl	8000e02 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f000 f8ab 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f000 f8a8 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f000 f8a5 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8000cd2:	20ef      	movs	r0, #239	@ 0xef
 8000cd4:	f000 f8a2 	bl	8000e1c <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8000cd8:	202b      	movs	r0, #43	@ 0x2b
 8000cda:	f000 f892 	bl	8000e02 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 f89c 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f000 f899 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8000cea:	2001      	movs	r0, #1
 8000cec:	f000 f896 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8000cf0:	203f      	movs	r0, #63	@ 0x3f
 8000cf2:	f000 f893 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8000cf6:	20f6      	movs	r0, #246	@ 0xf6
 8000cf8:	f000 f883 	bl	8000e02 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f000 f88d 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 f88a 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8000d08:	2006      	movs	r0, #6
 8000d0a:	f000 f887 	bl	8000e1c <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8000d0e:	202c      	movs	r0, #44	@ 0x2c
 8000d10:	f000 f877 	bl	8000e02 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000d14:	20c8      	movs	r0, #200	@ 0xc8
 8000d16:	f000 f9e9 	bl	80010ec <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8000d1a:	2026      	movs	r0, #38	@ 0x26
 8000d1c:	f000 f871 	bl	8000e02 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f000 f87b 	bl	8000e1c <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8000d26:	20e0      	movs	r0, #224	@ 0xe0
 8000d28:	f000 f86b 	bl	8000e02 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8000d2c:	200f      	movs	r0, #15
 8000d2e:	f000 f875 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8000d32:	2029      	movs	r0, #41	@ 0x29
 8000d34:	f000 f872 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8000d38:	2024      	movs	r0, #36	@ 0x24
 8000d3a:	f000 f86f 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000d3e:	200c      	movs	r0, #12
 8000d40:	f000 f86c 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8000d44:	200e      	movs	r0, #14
 8000d46:	f000 f869 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000d4a:	2009      	movs	r0, #9
 8000d4c:	f000 f866 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8000d50:	204e      	movs	r0, #78	@ 0x4e
 8000d52:	f000 f863 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000d56:	2078      	movs	r0, #120	@ 0x78
 8000d58:	f000 f860 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8000d5c:	203c      	movs	r0, #60	@ 0x3c
 8000d5e:	f000 f85d 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000d62:	2009      	movs	r0, #9
 8000d64:	f000 f85a 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8000d68:	2013      	movs	r0, #19
 8000d6a:	f000 f857 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000d6e:	2005      	movs	r0, #5
 8000d70:	f000 f854 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8000d74:	2017      	movs	r0, #23
 8000d76:	f000 f851 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000d7a:	2011      	movs	r0, #17
 8000d7c:	f000 f84e 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d80:	2000      	movs	r0, #0
 8000d82:	f000 f84b 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8000d86:	20e1      	movs	r0, #225	@ 0xe1
 8000d88:	f000 f83b 	bl	8000e02 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f000 f845 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8000d92:	2016      	movs	r0, #22
 8000d94:	f000 f842 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000d98:	201b      	movs	r0, #27
 8000d9a:	f000 f83f 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000d9e:	2004      	movs	r0, #4
 8000da0:	f000 f83c 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000da4:	2011      	movs	r0, #17
 8000da6:	f000 f839 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8000daa:	2007      	movs	r0, #7
 8000dac:	f000 f836 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8000db0:	2031      	movs	r0, #49	@ 0x31
 8000db2:	f000 f833 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8000db6:	2033      	movs	r0, #51	@ 0x33
 8000db8:	f000 f830 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8000dbc:	2042      	movs	r0, #66	@ 0x42
 8000dbe:	f000 f82d 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000dc2:	2005      	movs	r0, #5
 8000dc4:	f000 f82a 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000dc8:	200c      	movs	r0, #12
 8000dca:	f000 f827 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8000dce:	200a      	movs	r0, #10
 8000dd0:	f000 f824 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8000dd4:	2028      	movs	r0, #40	@ 0x28
 8000dd6:	f000 f821 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8000dda:	202f      	movs	r0, #47	@ 0x2f
 8000ddc:	f000 f81e 	bl	8000e1c <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8000de0:	200f      	movs	r0, #15
 8000de2:	f000 f81b 	bl	8000e1c <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8000de6:	2011      	movs	r0, #17
 8000de8:	f000 f80b 	bl	8000e02 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000dec:	20c8      	movs	r0, #200	@ 0xc8
 8000dee:	f000 f97d 	bl	80010ec <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8000df2:	2029      	movs	r0, #41	@ 0x29
 8000df4:	f000 f805 	bl	8000e02 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8000df8:	202c      	movs	r0, #44	@ 0x2c
 8000dfa:	f000 f802 	bl	8000e02 <ili9341_Write_Reg>
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f94a 	bl	80010a8 <LCD_IO_WriteReg>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 f91b 	bl	8001064 <LCD_IO_WriteData>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000e3c:	4819      	ldr	r0, [pc, #100]	@ (8000ea4 <SPI_Init+0x6c>)
 8000e3e:	f004 fb3a 	bl	80054b6 <HAL_SPI_GetState>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d12b      	bne.n	8000ea0 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8000e48:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <SPI_Init+0x6c>)
 8000e4a:	4a17      	ldr	r2, [pc, #92]	@ (8000ea8 <SPI_Init+0x70>)
 8000e4c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <SPI_Init+0x6c>)
 8000e50:	2218      	movs	r2, #24
 8000e52:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000e54:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <SPI_Init+0x6c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000e5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <SPI_Init+0x6c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000e60:	4b10      	ldr	r3, [pc, #64]	@ (8000ea4 <SPI_Init+0x6c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000e66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <SPI_Init+0x6c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea4 <SPI_Init+0x6c>)
 8000e6e:	2207      	movs	r2, #7
 8000e70:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000e72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <SPI_Init+0x6c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000e78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <SPI_Init+0x6c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000e7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <SPI_Init+0x6c>)
 8000e80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e84:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000e86:	4b07      	ldr	r3, [pc, #28]	@ (8000ea4 <SPI_Init+0x6c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000e8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <SPI_Init+0x6c>)
 8000e8e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e92:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8000e94:	4803      	ldr	r0, [pc, #12]	@ (8000ea4 <SPI_Init+0x6c>)
 8000e96:	f000 f833 	bl	8000f00 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000e9a:	4802      	ldr	r0, [pc, #8]	@ (8000ea4 <SPI_Init+0x6c>)
 8000e9c:	f004 f916 	bl	80050cc <HAL_SPI_Init>
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2002591c 	.word	0x2002591c
 8000ea8:	40015000 	.word	0x40015000

08000eac <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <SPI_Write+0x34>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	1db9      	adds	r1, r7, #6
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	4808      	ldr	r0, [pc, #32]	@ (8000ee4 <SPI_Write+0x38>)
 8000ec4:	f004 f9b3 	bl	800522e <HAL_SPI_Transmit>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8000ed2:	f000 f809 	bl	8000ee8 <SPI_Error>
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	2000000c 	.word	0x2000000c
 8000ee4:	2002591c 	.word	0x2002591c

08000ee8 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000eec:	4803      	ldr	r0, [pc, #12]	@ (8000efc <SPI_Error+0x14>)
 8000eee:	f004 f976 	bl	80051de <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8000ef2:	f7ff ffa1 	bl	8000e38 <SPI_Init>
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2002591c 	.word	0x2002591c

08000f00 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	@ 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8000f08:	2300      	movs	r3, #0
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	4b17      	ldr	r3, [pc, #92]	@ (8000f6c <SPI_MspInit+0x6c>)
 8000f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f10:	4a16      	ldr	r2, [pc, #88]	@ (8000f6c <SPI_MspInit+0x6c>)
 8000f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000f16:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f18:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <SPI_MspInit+0x6c>)
 8000f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <SPI_MspInit+0x6c>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2c:	4a0f      	ldr	r2, [pc, #60]	@ (8000f6c <SPI_MspInit+0x6c>)
 8000f2e:	f043 0320 	orr.w	r3, r3, #32
 8000f32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f34:	4b0d      	ldr	r3, [pc, #52]	@ (8000f6c <SPI_MspInit+0x6c>)
 8000f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f38:	f003 0320 	and.w	r3, r3, #32
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8000f40:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8000f52:	2305      	movs	r3, #5
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4804      	ldr	r0, [pc, #16]	@ (8000f70 <SPI_MspInit+0x70>)
 8000f5e:	f001 fc2f 	bl	80027c0 <HAL_GPIO_Init>
}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	@ 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40021400 	.word	0x40021400

08000f74 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8000f7a:	4b36      	ldr	r3, [pc, #216]	@ (8001054 <LCD_IO_Init+0xe0>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d164      	bne.n	800104c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8000f82:	4b34      	ldr	r3, [pc, #208]	@ (8001054 <LCD_IO_Init+0xe0>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	4b32      	ldr	r3, [pc, #200]	@ (8001058 <LCD_IO_Init+0xe4>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f90:	4a31      	ldr	r2, [pc, #196]	@ (8001058 <LCD_IO_Init+0xe4>)
 8000f92:	f043 0308 	orr.w	r3, r3, #8
 8000f96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f98:	4b2f      	ldr	r3, [pc, #188]	@ (8001058 <LCD_IO_Init+0xe4>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9c:	f003 0308 	and.w	r3, r3, #8
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000fa4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fa8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4827      	ldr	r0, [pc, #156]	@ (800105c <LCD_IO_Init+0xe8>)
 8000fbe:	f001 fbff 	bl	80027c0 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	4b24      	ldr	r3, [pc, #144]	@ (8001058 <LCD_IO_Init+0xe4>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	4a23      	ldr	r2, [pc, #140]	@ (8001058 <LCD_IO_Init+0xe4>)
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd2:	4b21      	ldr	r3, [pc, #132]	@ (8001058 <LCD_IO_Init+0xe4>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8000fde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4819      	ldr	r0, [pc, #100]	@ (800105c <LCD_IO_Init+0xe8>)
 8000ff8:	f001 fbe2 	bl	80027c0 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <LCD_IO_Init+0xe4>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001004:	4a14      	ldr	r2, [pc, #80]	@ (8001058 <LCD_IO_Init+0xe4>)
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	6313      	str	r3, [r2, #48]	@ 0x30
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <LCD_IO_Init+0xe4>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001018:	2304      	movs	r3, #4
 800101a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800101c:	2301      	movs	r3, #1
 800101e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001024:	2302      	movs	r3, #2
 8001026:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	4619      	mov	r1, r3
 800102e:	480c      	ldr	r0, [pc, #48]	@ (8001060 <LCD_IO_Init+0xec>)
 8001030:	f001 fbc6 	bl	80027c0 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001034:	2200      	movs	r2, #0
 8001036:	2104      	movs	r1, #4
 8001038:	4809      	ldr	r0, [pc, #36]	@ (8001060 <LCD_IO_Init+0xec>)
 800103a:	f001 fe79 	bl	8002d30 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800103e:	2201      	movs	r2, #1
 8001040:	2104      	movs	r1, #4
 8001042:	4807      	ldr	r0, [pc, #28]	@ (8001060 <LCD_IO_Init+0xec>)
 8001044:	f001 fe74 	bl	8002d30 <HAL_GPIO_WritePin>

    SPI_Init();
 8001048:	f7ff fef6 	bl	8000e38 <SPI_Init>
  }
}
 800104c:	bf00      	nop
 800104e:	3720      	adds	r7, #32
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20025974 	.word	0x20025974
 8001058:	40023800 	.word	0x40023800
 800105c:	40020c00 	.word	0x40020c00
 8001060:	40020800 	.word	0x40020800

08001064 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800106e:	2201      	movs	r2, #1
 8001070:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001074:	480a      	ldr	r0, [pc, #40]	@ (80010a0 <LCD_IO_WriteData+0x3c>)
 8001076:	f001 fe5b 	bl	8002d30 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800107a:	2200      	movs	r2, #0
 800107c:	2104      	movs	r1, #4
 800107e:	4809      	ldr	r0, [pc, #36]	@ (80010a4 <LCD_IO_WriteData+0x40>)
 8001080:	f001 fe56 	bl	8002d30 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff10 	bl	8000eac <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800108c:	2201      	movs	r2, #1
 800108e:	2104      	movs	r1, #4
 8001090:	4804      	ldr	r0, [pc, #16]	@ (80010a4 <LCD_IO_WriteData+0x40>)
 8001092:	f001 fe4d 	bl	8002d30 <HAL_GPIO_WritePin>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40020c00 	.word	0x40020c00
 80010a4:	40020800 	.word	0x40020800

080010a8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010b8:	480a      	ldr	r0, [pc, #40]	@ (80010e4 <LCD_IO_WriteReg+0x3c>)
 80010ba:	f001 fe39 	bl	8002d30 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80010be:	2200      	movs	r2, #0
 80010c0:	2104      	movs	r1, #4
 80010c2:	4809      	ldr	r0, [pc, #36]	@ (80010e8 <LCD_IO_WriteReg+0x40>)
 80010c4:	f001 fe34 	bl	8002d30 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff feed 	bl	8000eac <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80010d2:	2201      	movs	r2, #1
 80010d4:	2104      	movs	r1, #4
 80010d6:	4804      	ldr	r0, [pc, #16]	@ (80010e8 <LCD_IO_WriteReg+0x40>)
 80010d8:	f001 fe2a 	bl	8002d30 <HAL_GPIO_WritePin>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40020c00 	.word	0x40020c00
 80010e8:	40020800 	.word	0x40020800

080010ec <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f001 fa59 	bl	80025ac <HAL_Delay>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001106:	f001 f9df 	bl	80024c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110a:	f000 f817 	bl	800113c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110e:	f000 fa07 	bl	8001520 <MX_GPIO_Init>
  MX_LTDC_Init();
 8001112:	f000 f8bd 	bl	8001290 <MX_LTDC_Init>
  MX_RNG_Init();
 8001116:	f000 f96d 	bl	80013f4 <MX_RNG_Init>
  MX_TIM2_Init();
 800111a:	f000 f9b5 	bl	8001488 <MX_TIM2_Init>
  MX_SPI5_Init();
 800111e:	f000 f97d 	bl	800141c <MX_SPI5_Init>
  MX_I2C3_Init();
 8001122:	f000 f875 	bl	8001210 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8001126:	f7ff f9f7 	bl	8000518 <ApplicationInit>
  ApplicationFirstScreen();
 800112a:	f7ff fa0d 	bl	8000548 <ApplicationFirstScreen>
  //LCD_Visual_Demo();
  HAL_Delay(5000);
 800112e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001132:	f001 fa3b 	bl	80025ac <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  LCD_Touch_Polling_Demo();
 8001136:	f7ff fa0d 	bl	8000554 <LCD_Touch_Polling_Demo>
 800113a:	e7fc      	b.n	8001136 <main+0x34>

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b094      	sub	sp, #80	@ 0x50
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 0320 	add.w	r3, r7, #32
 8001146:	2230      	movs	r2, #48	@ 0x30
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f004 fd76 	bl	8005c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	4b28      	ldr	r3, [pc, #160]	@ (8001208 <SystemClock_Config+0xcc>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001168:	4a27      	ldr	r2, [pc, #156]	@ (8001208 <SystemClock_Config+0xcc>)
 800116a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800116e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001170:	4b25      	ldr	r3, [pc, #148]	@ (8001208 <SystemClock_Config+0xcc>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800117c:	2300      	movs	r3, #0
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	4b22      	ldr	r3, [pc, #136]	@ (800120c <SystemClock_Config+0xd0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a21      	ldr	r2, [pc, #132]	@ (800120c <SystemClock_Config+0xd0>)
 8001186:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <SystemClock_Config+0xd0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001198:	2301      	movs	r3, #1
 800119a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800119c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a2:	2302      	movs	r3, #2
 80011a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011ac:	2308      	movs	r3, #8
 80011ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011b0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b6:	2302      	movs	r3, #2
 80011b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011ba:	2307      	movs	r3, #7
 80011bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011be:	f107 0320 	add.w	r3, r7, #32
 80011c2:	4618      	mov	r0, r3
 80011c4:	f003 f914 	bl	80043f0 <HAL_RCC_OscConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011ce:	f000 fb55 	bl	800187c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d2:	230f      	movs	r3, #15
 80011d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d6:	2302      	movs	r3, #2
 80011d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011de:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	2105      	movs	r1, #5
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 fb75 	bl	80048e0 <HAL_RCC_ClockConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011fc:	f000 fb3e 	bl	800187c <Error_Handler>
  }
}
 8001200:	bf00      	nop
 8001202:	3750      	adds	r7, #80	@ 0x50
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800
 800120c:	40007000 	.word	0x40007000

08001210 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001214:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <MX_I2C3_Init+0x74>)
 8001216:	4a1c      	ldr	r2, [pc, #112]	@ (8001288 <MX_I2C3_Init+0x78>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800121a:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <MX_I2C3_Init+0x74>)
 800121c:	4a1b      	ldr	r2, [pc, #108]	@ (800128c <MX_I2C3_Init+0x7c>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <MX_I2C3_Init+0x74>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001226:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <MX_I2C3_Init+0x74>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122c:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <MX_I2C3_Init+0x74>)
 800122e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001232:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <MX_I2C3_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800123a:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <MX_I2C3_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001240:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <MX_I2C3_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001246:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <MX_I2C3_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800124c:	480d      	ldr	r0, [pc, #52]	@ (8001284 <MX_I2C3_Init+0x74>)
 800124e:	f001 fd89 	bl	8002d64 <HAL_I2C_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001258:	f000 fb10 	bl	800187c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800125c:	2100      	movs	r1, #0
 800125e:	4809      	ldr	r0, [pc, #36]	@ (8001284 <MX_I2C3_Init+0x74>)
 8001260:	f002 fda4 	bl	8003dac <HAL_I2CEx_ConfigAnalogFilter>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800126a:	f000 fb07 	bl	800187c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800126e:	2100      	movs	r1, #0
 8001270:	4804      	ldr	r0, [pc, #16]	@ (8001284 <MX_I2C3_Init+0x74>)
 8001272:	f002 fdd7 	bl	8003e24 <HAL_I2CEx_ConfigDigitalFilter>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800127c:	f000 fafe 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20025978 	.word	0x20025978
 8001288:	40005c00 	.word	0x40005c00
 800128c:	000186a0 	.word	0x000186a0

08001290 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b09a      	sub	sp, #104	@ 0x68
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001296:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800129a:	2234      	movs	r2, #52	@ 0x34
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f004 fccc 	bl	8005c3c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80012a4:	463b      	mov	r3, r7
 80012a6:	2234      	movs	r2, #52	@ 0x34
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f004 fcc6 	bl	8005c3c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80012b0:	4b4e      	ldr	r3, [pc, #312]	@ (80013ec <MX_LTDC_Init+0x15c>)
 80012b2:	4a4f      	ldr	r2, [pc, #316]	@ (80013f0 <MX_LTDC_Init+0x160>)
 80012b4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80012b6:	4b4d      	ldr	r3, [pc, #308]	@ (80013ec <MX_LTDC_Init+0x15c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80012bc:	4b4b      	ldr	r3, [pc, #300]	@ (80013ec <MX_LTDC_Init+0x15c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80012c2:	4b4a      	ldr	r3, [pc, #296]	@ (80013ec <MX_LTDC_Init+0x15c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80012c8:	4b48      	ldr	r3, [pc, #288]	@ (80013ec <MX_LTDC_Init+0x15c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80012ce:	4b47      	ldr	r3, [pc, #284]	@ (80013ec <MX_LTDC_Init+0x15c>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80012d4:	4b45      	ldr	r3, [pc, #276]	@ (80013ec <MX_LTDC_Init+0x15c>)
 80012d6:	2203      	movs	r2, #3
 80012d8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80012da:	4b44      	ldr	r3, [pc, #272]	@ (80013ec <MX_LTDC_Init+0x15c>)
 80012dc:	220e      	movs	r2, #14
 80012de:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80012e0:	4b42      	ldr	r3, [pc, #264]	@ (80013ec <MX_LTDC_Init+0x15c>)
 80012e2:	2205      	movs	r2, #5
 80012e4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80012e6:	4b41      	ldr	r3, [pc, #260]	@ (80013ec <MX_LTDC_Init+0x15c>)
 80012e8:	f240 228e 	movw	r2, #654	@ 0x28e
 80012ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80012ee:	4b3f      	ldr	r3, [pc, #252]	@ (80013ec <MX_LTDC_Init+0x15c>)
 80012f0:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80012f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80012f6:	4b3d      	ldr	r3, [pc, #244]	@ (80013ec <MX_LTDC_Init+0x15c>)
 80012f8:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80012fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80012fe:	4b3b      	ldr	r3, [pc, #236]	@ (80013ec <MX_LTDC_Init+0x15c>)
 8001300:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001304:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001306:	4b39      	ldr	r3, [pc, #228]	@ (80013ec <MX_LTDC_Init+0x15c>)
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800130e:	4b37      	ldr	r3, [pc, #220]	@ (80013ec <MX_LTDC_Init+0x15c>)
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001316:	4b35      	ldr	r3, [pc, #212]	@ (80013ec <MX_LTDC_Init+0x15c>)
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800131e:	4833      	ldr	r0, [pc, #204]	@ (80013ec <MX_LTDC_Init+0x15c>)
 8001320:	f002 fdc0 	bl	8003ea4 <HAL_LTDC_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800132a:	f000 faa7 	bl	800187c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800133e:	2300      	movs	r3, #0
 8001340:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800134a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800134e:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001350:	2305      	movs	r3, #5
 8001352:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001372:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001376:	2200      	movs	r2, #0
 8001378:	4619      	mov	r1, r3
 800137a:	481c      	ldr	r0, [pc, #112]	@ (80013ec <MX_LTDC_Init+0x15c>)
 800137c:	f002 fe62 	bl	8004044 <HAL_LTDC_ConfigLayer>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001386:	f000 fa79 	bl	800187c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80013a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013aa:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80013ac:	2305      	movs	r3, #5
 80013ae:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80013ce:	463b      	mov	r3, r7
 80013d0:	2201      	movs	r2, #1
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	@ (80013ec <MX_LTDC_Init+0x15c>)
 80013d6:	f002 fe35 	bl	8004044 <HAL_LTDC_ConfigLayer>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80013e0:	f000 fa4c 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	3768      	adds	r7, #104	@ 0x68
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200259cc 	.word	0x200259cc
 80013f0:	40016800 	.word	0x40016800

080013f4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80013f8:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <MX_RNG_Init+0x20>)
 80013fa:	4a07      	ldr	r2, [pc, #28]	@ (8001418 <MX_RNG_Init+0x24>)
 80013fc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	@ (8001414 <MX_RNG_Init+0x20>)
 8001400:	f003 fe3a 	bl	8005078 <HAL_RNG_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800140a:	f000 fa37 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20025a74 	.word	0x20025a74
 8001418:	50060800 	.word	0x50060800

0800141c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001420:	4b17      	ldr	r3, [pc, #92]	@ (8001480 <MX_SPI5_Init+0x64>)
 8001422:	4a18      	ldr	r2, [pc, #96]	@ (8001484 <MX_SPI5_Init+0x68>)
 8001424:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001426:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <MX_SPI5_Init+0x64>)
 8001428:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800142c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800142e:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <MX_SPI5_Init+0x64>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001434:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <MX_SPI5_Init+0x64>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800143a:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <MX_SPI5_Init+0x64>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001440:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <MX_SPI5_Init+0x64>)
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001446:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <MX_SPI5_Init+0x64>)
 8001448:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800144c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800144e:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <MX_SPI5_Init+0x64>)
 8001450:	2200      	movs	r2, #0
 8001452:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001454:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <MX_SPI5_Init+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800145a:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <MX_SPI5_Init+0x64>)
 800145c:	2200      	movs	r2, #0
 800145e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001460:	4b07      	ldr	r3, [pc, #28]	@ (8001480 <MX_SPI5_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001466:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <MX_SPI5_Init+0x64>)
 8001468:	220a      	movs	r2, #10
 800146a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800146c:	4804      	ldr	r0, [pc, #16]	@ (8001480 <MX_SPI5_Init+0x64>)
 800146e:	f003 fe2d 	bl	80050cc <HAL_SPI_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001478:	f000 fa00 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20025a84 	.word	0x20025a84
 8001484:	40015000 	.word	0x40015000

08001488 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	463b      	mov	r3, r7
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014a4:	4b1d      	ldr	r3, [pc, #116]	@ (800151c <MX_TIM2_Init+0x94>)
 80014a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014ac:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <MX_TIM2_Init+0x94>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b2:	4b1a      	ldr	r3, [pc, #104]	@ (800151c <MX_TIM2_Init+0x94>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014b8:	4b18      	ldr	r3, [pc, #96]	@ (800151c <MX_TIM2_Init+0x94>)
 80014ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c0:	4b16      	ldr	r3, [pc, #88]	@ (800151c <MX_TIM2_Init+0x94>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c6:	4b15      	ldr	r3, [pc, #84]	@ (800151c <MX_TIM2_Init+0x94>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014cc:	4813      	ldr	r0, [pc, #76]	@ (800151c <MX_TIM2_Init+0x94>)
 80014ce:	f004 f8dd 	bl	800568c <HAL_TIM_Base_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014d8:	f000 f9d0 	bl	800187c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014e2:	f107 0308 	add.w	r3, r7, #8
 80014e6:	4619      	mov	r1, r3
 80014e8:	480c      	ldr	r0, [pc, #48]	@ (800151c <MX_TIM2_Init+0x94>)
 80014ea:	f004 f91e 	bl	800572a <HAL_TIM_ConfigClockSource>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014f4:	f000 f9c2 	bl	800187c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001500:	463b      	mov	r3, r7
 8001502:	4619      	mov	r1, r3
 8001504:	4805      	ldr	r0, [pc, #20]	@ (800151c <MX_TIM2_Init+0x94>)
 8001506:	f004 fb1d 	bl	8005b44 <HAL_TIMEx_MasterConfigSynchronization>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001510:	f000 f9b4 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20025adc 	.word	0x20025adc

08001520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08e      	sub	sp, #56	@ 0x38
 8001524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
 800153a:	4bb2      	ldr	r3, [pc, #712]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	4ab1      	ldr	r2, [pc, #708]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	6313      	str	r3, [r2, #48]	@ 0x30
 8001546:	4baf      	ldr	r3, [pc, #700]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	623b      	str	r3, [r7, #32]
 8001550:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
 8001556:	4bab      	ldr	r3, [pc, #684]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	4aaa      	ldr	r2, [pc, #680]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 800155c:	f043 0320 	orr.w	r3, r3, #32
 8001560:	6313      	str	r3, [r2, #48]	@ 0x30
 8001562:	4ba8      	ldr	r3, [pc, #672]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	f003 0320 	and.w	r3, r3, #32
 800156a:	61fb      	str	r3, [r7, #28]
 800156c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
 8001572:	4ba4      	ldr	r3, [pc, #656]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	4aa3      	ldr	r2, [pc, #652]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 8001578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800157c:	6313      	str	r3, [r2, #48]	@ 0x30
 800157e:	4ba1      	ldr	r3, [pc, #644]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001586:	61bb      	str	r3, [r7, #24]
 8001588:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	4b9d      	ldr	r3, [pc, #628]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a9c      	ldr	r2, [pc, #624]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b9a      	ldr	r3, [pc, #616]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	4b96      	ldr	r3, [pc, #600]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a95      	ldr	r2, [pc, #596]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b93      	ldr	r3, [pc, #588]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b8f      	ldr	r3, [pc, #572]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	4a8e      	ldr	r2, [pc, #568]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 80015cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d2:	4b8c      	ldr	r3, [pc, #560]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	4b88      	ldr	r3, [pc, #544]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	4a87      	ldr	r2, [pc, #540]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 80015e8:	f043 0310 	orr.w	r3, r3, #16
 80015ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ee:	4b85      	ldr	r3, [pc, #532]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b81      	ldr	r3, [pc, #516]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a80      	ldr	r2, [pc, #512]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 8001604:	f043 0308 	orr.w	r3, r3, #8
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b7e      	ldr	r3, [pc, #504]	@ (8001804 <MX_GPIO_Init+0x2e4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	2116      	movs	r1, #22
 800161a:	487b      	ldr	r0, [pc, #492]	@ (8001808 <MX_GPIO_Init+0x2e8>)
 800161c:	f001 fb88 	bl	8002d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	2180      	movs	r1, #128	@ 0x80
 8001624:	4879      	ldr	r0, [pc, #484]	@ (800180c <MX_GPIO_Init+0x2ec>)
 8001626:	f001 fb83 	bl	8002d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001630:	4877      	ldr	r0, [pc, #476]	@ (8001810 <MX_GPIO_Init+0x2f0>)
 8001632:	f001 fb7d 	bl	8002d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800163c:	4875      	ldr	r0, [pc, #468]	@ (8001814 <MX_GPIO_Init+0x2f4>)
 800163e:	f001 fb77 	bl	8002d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001642:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001654:	230c      	movs	r3, #12
 8001656:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001658:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800165c:	4619      	mov	r1, r3
 800165e:	486e      	ldr	r0, [pc, #440]	@ (8001818 <MX_GPIO_Init+0x2f8>)
 8001660:	f001 f8ae 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001664:	2301      	movs	r3, #1
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001674:	230c      	movs	r3, #12
 8001676:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800167c:	4619      	mov	r1, r3
 800167e:	4862      	ldr	r0, [pc, #392]	@ (8001808 <MX_GPIO_Init+0x2e8>)
 8001680:	f001 f89e 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001684:	2316      	movs	r3, #22
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001698:	4619      	mov	r1, r3
 800169a:	485b      	ldr	r0, [pc, #364]	@ (8001808 <MX_GPIO_Init+0x2e8>)
 800169c:	f001 f890 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80016a0:	f248 0307 	movw	r3, #32775	@ 0x8007
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016a6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80016aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b4:	4619      	mov	r1, r3
 80016b6:	4855      	ldr	r0, [pc, #340]	@ (800180c <MX_GPIO_Init+0x2ec>)
 80016b8:	f001 f882 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80016bc:	2380      	movs	r3, #128	@ 0x80
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016d0:	4619      	mov	r1, r3
 80016d2:	484e      	ldr	r0, [pc, #312]	@ (800180c <MX_GPIO_Init+0x2ec>)
 80016d4:	f001 f874 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80016d8:	2320      	movs	r3, #32
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016dc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80016e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80016e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ea:	4619      	mov	r1, r3
 80016ec:	4846      	ldr	r0, [pc, #280]	@ (8001808 <MX_GPIO_Init+0x2e8>)
 80016ee:	f001 f867 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80016f2:	2304      	movs	r3, #4
 80016f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80016fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001702:	4619      	mov	r1, r3
 8001704:	4845      	ldr	r0, [pc, #276]	@ (800181c <MX_GPIO_Init+0x2fc>)
 8001706:	f001 f85b 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800170a:	f248 1333 	movw	r3, #33075	@ 0x8133
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001718:	2303      	movs	r3, #3
 800171a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800171c:	230c      	movs	r3, #12
 800171e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001724:	4619      	mov	r1, r3
 8001726:	483b      	ldr	r0, [pc, #236]	@ (8001814 <MX_GPIO_Init+0x2f4>)
 8001728:	f001 f84a 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800172c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800173e:	230c      	movs	r3, #12
 8001740:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001746:	4619      	mov	r1, r3
 8001748:	4835      	ldr	r0, [pc, #212]	@ (8001820 <MX_GPIO_Init+0x300>)
 800174a:	f001 f839 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800174e:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001760:	230c      	movs	r3, #12
 8001762:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001768:	4619      	mov	r1, r3
 800176a:	482c      	ldr	r0, [pc, #176]	@ (800181c <MX_GPIO_Init+0x2fc>)
 800176c:	f001 f828 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001770:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001776:	2300      	movs	r3, #0
 8001778:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800177e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001782:	4619      	mov	r1, r3
 8001784:	4825      	ldr	r0, [pc, #148]	@ (800181c <MX_GPIO_Init+0x2fc>)
 8001786:	f001 f81b 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800178a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800179c:	230c      	movs	r3, #12
 800179e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a4:	4619      	mov	r1, r3
 80017a6:	481a      	ldr	r0, [pc, #104]	@ (8001810 <MX_GPIO_Init+0x2f0>)
 80017a8:	f001 f80a 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80017ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b2:	2300      	movs	r3, #0
 80017b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80017ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017be:	4619      	mov	r1, r3
 80017c0:	4813      	ldr	r0, [pc, #76]	@ (8001810 <MX_GPIO_Init+0x2f0>)
 80017c2:	f000 fffd 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80017c6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017cc:	2301      	movs	r3, #1
 80017ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d4:	2300      	movs	r3, #0
 80017d6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017dc:	4619      	mov	r1, r3
 80017de:	480c      	ldr	r0, [pc, #48]	@ (8001810 <MX_GPIO_Init+0x2f0>)
 80017e0:	f000 ffee 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80017e4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017f6:	2307      	movs	r3, #7
 80017f8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017fe:	4619      	mov	r1, r3
 8001800:	e010      	b.n	8001824 <MX_GPIO_Init+0x304>
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	40020800 	.word	0x40020800
 800180c:	40020000 	.word	0x40020000
 8001810:	40020c00 	.word	0x40020c00
 8001814:	40021800 	.word	0x40021800
 8001818:	40021400 	.word	0x40021400
 800181c:	40020400 	.word	0x40020400
 8001820:	40021000 	.word	0x40021000
 8001824:	4812      	ldr	r0, [pc, #72]	@ (8001870 <MX_GPIO_Init+0x350>)
 8001826:	f000 ffcb 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800182a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800182e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800183c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001840:	4619      	mov	r1, r3
 8001842:	480c      	ldr	r0, [pc, #48]	@ (8001874 <MX_GPIO_Init+0x354>)
 8001844:	f000 ffbc 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001848:	2360      	movs	r3, #96	@ 0x60
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001854:	2303      	movs	r3, #3
 8001856:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001858:	230c      	movs	r3, #12
 800185a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001860:	4619      	mov	r1, r3
 8001862:	4805      	ldr	r0, [pc, #20]	@ (8001878 <MX_GPIO_Init+0x358>)
 8001864:	f000 ffac 	bl	80027c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001868:	bf00      	nop
 800186a:	3738      	adds	r7, #56	@ 0x38
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40020000 	.word	0x40020000
 8001874:	40021800 	.word	0x40021800
 8001878:	40020400 	.word	0x40020400

0800187c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001880:	b672      	cpsid	i
}
 8001882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <Error_Handler+0x8>

08001888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <HAL_MspInit+0x4c>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	4a0f      	ldr	r2, [pc, #60]	@ (80018d4 <HAL_MspInit+0x4c>)
 8001898:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800189c:	6453      	str	r3, [r2, #68]	@ 0x44
 800189e:	4b0d      	ldr	r3, [pc, #52]	@ (80018d4 <HAL_MspInit+0x4c>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <HAL_MspInit+0x4c>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	4a08      	ldr	r2, [pc, #32]	@ (80018d4 <HAL_MspInit+0x4c>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_MspInit+0x4c>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018c6:	2007      	movs	r0, #7
 80018c8:	f000 ff46 	bl	8002758 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40023800 	.word	0x40023800

080018d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	@ 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a29      	ldr	r2, [pc, #164]	@ (800199c <HAL_I2C_MspInit+0xc4>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d14b      	bne.n	8001992 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	4b28      	ldr	r3, [pc, #160]	@ (80019a0 <HAL_I2C_MspInit+0xc8>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	4a27      	ldr	r2, [pc, #156]	@ (80019a0 <HAL_I2C_MspInit+0xc8>)
 8001904:	f043 0304 	orr.w	r3, r3, #4
 8001908:	6313      	str	r3, [r2, #48]	@ 0x30
 800190a:	4b25      	ldr	r3, [pc, #148]	@ (80019a0 <HAL_I2C_MspInit+0xc8>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	4b21      	ldr	r3, [pc, #132]	@ (80019a0 <HAL_I2C_MspInit+0xc8>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	4a20      	ldr	r2, [pc, #128]	@ (80019a0 <HAL_I2C_MspInit+0xc8>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6313      	str	r3, [r2, #48]	@ 0x30
 8001926:	4b1e      	ldr	r3, [pc, #120]	@ (80019a0 <HAL_I2C_MspInit+0xc8>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001932:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001938:	2312      	movs	r3, #18
 800193a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001944:	2304      	movs	r3, #4
 8001946:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	4815      	ldr	r0, [pc, #84]	@ (80019a4 <HAL_I2C_MspInit+0xcc>)
 8001950:	f000 ff36 	bl	80027c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001954:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800195a:	2312      	movs	r3, #18
 800195c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001966:	2304      	movs	r3, #4
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	480d      	ldr	r0, [pc, #52]	@ (80019a8 <HAL_I2C_MspInit+0xd0>)
 8001972:	f000 ff25 	bl	80027c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <HAL_I2C_MspInit+0xc8>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	4a08      	ldr	r2, [pc, #32]	@ (80019a0 <HAL_I2C_MspInit+0xc8>)
 8001980:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001984:	6413      	str	r3, [r2, #64]	@ 0x40
 8001986:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <HAL_I2C_MspInit+0xc8>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001992:	bf00      	nop
 8001994:	3728      	adds	r7, #40	@ 0x28
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40005c00 	.word	0x40005c00
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020800 	.word	0x40020800
 80019a8:	40020000 	.word	0x40020000

080019ac <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b09a      	sub	sp, #104	@ 0x68
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019c8:	2230      	movs	r2, #48	@ 0x30
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f004 f935 	bl	8005c3c <memset>
  if(hltdc->Instance==LTDC)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a81      	ldr	r2, [pc, #516]	@ (8001bdc <HAL_LTDC_MspInit+0x230>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	f040 80fb 	bne.w	8001bd4 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80019de:	2308      	movs	r3, #8
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 80019e2:	23c8      	movs	r3, #200	@ 0xc8
 80019e4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80019e6:	2302      	movs	r3, #2
 80019e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 80019ea:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80019ee:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019f4:	4618      	mov	r0, r3
 80019f6:	f003 f97f 	bl	8004cf8 <HAL_RCCEx_PeriphCLKConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001a00:	f7ff ff3c 	bl	800187c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001a04:	2300      	movs	r3, #0
 8001a06:	623b      	str	r3, [r7, #32]
 8001a08:	4b75      	ldr	r3, [pc, #468]	@ (8001be0 <HAL_LTDC_MspInit+0x234>)
 8001a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0c:	4a74      	ldr	r2, [pc, #464]	@ (8001be0 <HAL_LTDC_MspInit+0x234>)
 8001a0e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a12:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a14:	4b72      	ldr	r3, [pc, #456]	@ (8001be0 <HAL_LTDC_MspInit+0x234>)
 8001a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a1c:	623b      	str	r3, [r7, #32]
 8001a1e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a20:	2300      	movs	r3, #0
 8001a22:	61fb      	str	r3, [r7, #28]
 8001a24:	4b6e      	ldr	r3, [pc, #440]	@ (8001be0 <HAL_LTDC_MspInit+0x234>)
 8001a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a28:	4a6d      	ldr	r2, [pc, #436]	@ (8001be0 <HAL_LTDC_MspInit+0x234>)
 8001a2a:	f043 0320 	orr.w	r3, r3, #32
 8001a2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a30:	4b6b      	ldr	r3, [pc, #428]	@ (8001be0 <HAL_LTDC_MspInit+0x234>)
 8001a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a34:	f003 0320 	and.w	r3, r3, #32
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	4b67      	ldr	r3, [pc, #412]	@ (8001be0 <HAL_LTDC_MspInit+0x234>)
 8001a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a44:	4a66      	ldr	r2, [pc, #408]	@ (8001be0 <HAL_LTDC_MspInit+0x234>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4c:	4b64      	ldr	r3, [pc, #400]	@ (8001be0 <HAL_LTDC_MspInit+0x234>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	4b60      	ldr	r3, [pc, #384]	@ (8001be0 <HAL_LTDC_MspInit+0x234>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a60:	4a5f      	ldr	r2, [pc, #380]	@ (8001be0 <HAL_LTDC_MspInit+0x234>)
 8001a62:	f043 0302 	orr.w	r3, r3, #2
 8001a66:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a68:	4b5d      	ldr	r3, [pc, #372]	@ (8001be0 <HAL_LTDC_MspInit+0x234>)
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a74:	2300      	movs	r3, #0
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	4b59      	ldr	r3, [pc, #356]	@ (8001be0 <HAL_LTDC_MspInit+0x234>)
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7c:	4a58      	ldr	r2, [pc, #352]	@ (8001be0 <HAL_LTDC_MspInit+0x234>)
 8001a7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a82:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a84:	4b56      	ldr	r3, [pc, #344]	@ (8001be0 <HAL_LTDC_MspInit+0x234>)
 8001a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	4b52      	ldr	r3, [pc, #328]	@ (8001be0 <HAL_LTDC_MspInit+0x234>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a98:	4a51      	ldr	r2, [pc, #324]	@ (8001be0 <HAL_LTDC_MspInit+0x234>)
 8001a9a:	f043 0304 	orr.w	r3, r3, #4
 8001a9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa0:	4b4f      	ldr	r3, [pc, #316]	@ (8001be0 <HAL_LTDC_MspInit+0x234>)
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	4b4b      	ldr	r3, [pc, #300]	@ (8001be0 <HAL_LTDC_MspInit+0x234>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab4:	4a4a      	ldr	r2, [pc, #296]	@ (8001be0 <HAL_LTDC_MspInit+0x234>)
 8001ab6:	f043 0308 	orr.w	r3, r3, #8
 8001aba:	6313      	str	r3, [r2, #48]	@ 0x30
 8001abc:	4b48      	ldr	r3, [pc, #288]	@ (8001be0 <HAL_LTDC_MspInit+0x234>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac0:	f003 0308 	and.w	r3, r3, #8
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001ac8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001acc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ada:	230e      	movs	r3, #14
 8001adc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001ade:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	483f      	ldr	r0, [pc, #252]	@ (8001be4 <HAL_LTDC_MspInit+0x238>)
 8001ae6:	f000 fe6b 	bl	80027c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001aea:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001aee:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001afc:	230e      	movs	r3, #14
 8001afe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b04:	4619      	mov	r1, r3
 8001b06:	4838      	ldr	r0, [pc, #224]	@ (8001be8 <HAL_LTDC_MspInit+0x23c>)
 8001b08:	f000 fe5a 	bl	80027c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b10:	2302      	movs	r3, #2
 8001b12:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b1c:	2309      	movs	r3, #9
 8001b1e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b20:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b24:	4619      	mov	r1, r3
 8001b26:	4831      	ldr	r0, [pc, #196]	@ (8001bec <HAL_LTDC_MspInit+0x240>)
 8001b28:	f000 fe4a 	bl	80027c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001b2c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001b30:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b3e:	230e      	movs	r3, #14
 8001b40:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b42:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b46:	4619      	mov	r1, r3
 8001b48:	4828      	ldr	r0, [pc, #160]	@ (8001bec <HAL_LTDC_MspInit+0x240>)
 8001b4a:	f000 fe39 	bl	80027c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001b4e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001b52:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b60:	230e      	movs	r3, #14
 8001b62:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b64:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4821      	ldr	r0, [pc, #132]	@ (8001bf0 <HAL_LTDC_MspInit+0x244>)
 8001b6c:	f000 fe28 	bl	80027c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001b70:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001b74:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	2302      	movs	r3, #2
 8001b78:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b82:	230e      	movs	r3, #14
 8001b84:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b86:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4819      	ldr	r0, [pc, #100]	@ (8001bf4 <HAL_LTDC_MspInit+0x248>)
 8001b8e:	f000 fe17 	bl	80027c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001b92:	2348      	movs	r3, #72	@ 0x48
 8001b94:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ba2:	230e      	movs	r3, #14
 8001ba4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001baa:	4619      	mov	r1, r3
 8001bac:	4812      	ldr	r0, [pc, #72]	@ (8001bf8 <HAL_LTDC_MspInit+0x24c>)
 8001bae:	f000 fe07 	bl	80027c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001bb2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001bb6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001bc4:	2309      	movs	r3, #9
 8001bc6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bc8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4808      	ldr	r0, [pc, #32]	@ (8001bf0 <HAL_LTDC_MspInit+0x244>)
 8001bd0:	f000 fdf6 	bl	80027c0 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001bd4:	bf00      	nop
 8001bd6:	3768      	adds	r7, #104	@ 0x68
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40016800 	.word	0x40016800
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40021400 	.word	0x40021400
 8001be8:	40020000 	.word	0x40020000
 8001bec:	40020400 	.word	0x40020400
 8001bf0:	40021800 	.word	0x40021800
 8001bf4:	40020800 	.word	0x40020800
 8001bf8:	40020c00 	.word	0x40020c00

08001bfc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0b      	ldr	r2, [pc, #44]	@ (8001c38 <HAL_RNG_MspInit+0x3c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d10d      	bne.n	8001c2a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b0a      	ldr	r3, [pc, #40]	@ (8001c3c <HAL_RNG_MspInit+0x40>)
 8001c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c16:	4a09      	ldr	r2, [pc, #36]	@ (8001c3c <HAL_RNG_MspInit+0x40>)
 8001c18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c1c:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c1e:	4b07      	ldr	r3, [pc, #28]	@ (8001c3c <HAL_RNG_MspInit+0x40>)
 8001c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001c2a:	bf00      	nop
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	50060800 	.word	0x50060800
 8001c3c:	40023800 	.word	0x40023800

08001c40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	@ 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a19      	ldr	r2, [pc, #100]	@ (8001cc4 <HAL_SPI_MspInit+0x84>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d12c      	bne.n	8001cbc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	4b18      	ldr	r3, [pc, #96]	@ (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6a:	4a17      	ldr	r2, [pc, #92]	@ (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c72:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	4a10      	ldr	r2, [pc, #64]	@ (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c88:	f043 0320 	orr.w	r3, r3, #32
 8001c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	f003 0320 	and.w	r3, r3, #32
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001c9a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001cac:	2305      	movs	r3, #5
 8001cae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4805      	ldr	r0, [pc, #20]	@ (8001ccc <HAL_SPI_MspInit+0x8c>)
 8001cb8:	f000 fd82 	bl	80027c0 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001cbc:	bf00      	nop
 8001cbe:	3728      	adds	r7, #40	@ 0x28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40015000 	.word	0x40015000
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40021400 	.word	0x40021400

08001cd0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a08      	ldr	r2, [pc, #32]	@ (8001d00 <HAL_SPI_MspDeInit+0x30>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d10a      	bne.n	8001cf8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001ce2:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <HAL_SPI_MspDeInit+0x34>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	4a07      	ldr	r2, [pc, #28]	@ (8001d04 <HAL_SPI_MspDeInit+0x34>)
 8001ce8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001cec:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001cee:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001cf2:	4805      	ldr	r0, [pc, #20]	@ (8001d08 <HAL_SPI_MspDeInit+0x38>)
 8001cf4:	f000 ff10 	bl	8002b18 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40015000 	.word	0x40015000
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40021400 	.word	0x40021400

08001d0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d1c:	d10d      	bne.n	8001d3a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	4b09      	ldr	r3, [pc, #36]	@ (8001d48 <HAL_TIM_Base_MspInit+0x3c>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	4a08      	ldr	r2, [pc, #32]	@ (8001d48 <HAL_TIM_Base_MspInit+0x3c>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2e:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_TIM_Base_MspInit+0x3c>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800

08001d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <NMI_Handler+0x4>

08001d54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <HardFault_Handler+0x4>

08001d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <MemManage_Handler+0x4>

08001d64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <BusFault_Handler+0x4>

08001d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <UsageFault_Handler+0x4>

08001d74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da2:	f000 fbe3 	bl	800256c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}

08001daa <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8001db0:	f000 f9ce 	bl	8002150 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8001db4:	f000 f98e 	bl	80020d4 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8001db8:	2202      	movs	r2, #2
 8001dba:	2103      	movs	r1, #3
 8001dbc:	2082      	movs	r0, #130	@ 0x82
 8001dbe:	f000 fa1b 	bl	80021f8 <I2C3_Write>
    HAL_Delay(5);
 8001dc2:	2005      	movs	r0, #5
 8001dc4:	f000 fbf2 	bl	80025ac <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2103      	movs	r1, #3
 8001dcc:	2082      	movs	r0, #130	@ 0x82
 8001dce:	f000 fa13 	bl	80021f8 <I2C3_Write>
    HAL_Delay(2);
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	f000 fbea 	bl	80025ac <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8001dd8:	1cba      	adds	r2, r7, #2
 8001dda:	2302      	movs	r3, #2
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2082      	movs	r0, #130	@ 0x82
 8001de0:	f000 fa5a 	bl	8002298 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8001de4:	887b      	ldrh	r3, [r7, #2]
 8001de6:	021b      	lsls	r3, r3, #8
 8001de8:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8001dea:	887b      	ldrh	r3, [r7, #2]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	f640 0211 	movw	r2, #2065	@ 0x811
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d001      	beq.n	8001e04 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e075      	b.n	8001ef0 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8001e04:	2202      	movs	r2, #2
 8001e06:	2103      	movs	r1, #3
 8001e08:	2082      	movs	r0, #130	@ 0x82
 8001e0a:	f000 f9f5 	bl	80021f8 <I2C3_Write>
    HAL_Delay(5);
 8001e0e:	2005      	movs	r0, #5
 8001e10:	f000 fbcc 	bl	80025ac <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8001e14:	2200      	movs	r2, #0
 8001e16:	2103      	movs	r1, #3
 8001e18:	2082      	movs	r0, #130	@ 0x82
 8001e1a:	f000 f9ed 	bl	80021f8 <I2C3_Write>
    HAL_Delay(2);
 8001e1e:	2002      	movs	r0, #2
 8001e20:	f000 fbc4 	bl	80025ac <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8001e24:	2004      	movs	r0, #4
 8001e26:	f000 f867 	bl	8001ef8 <STMPE811_Read>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8001e2e:	797b      	ldrb	r3, [r7, #5]
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8001e36:	797b      	ldrb	r3, [r7, #5]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	2104      	movs	r1, #4
 8001e3c:	2082      	movs	r0, #130	@ 0x82
 8001e3e:	f000 f9db 	bl	80021f8 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8001e42:	2004      	movs	r0, #4
 8001e44:	f000 f858 	bl	8001ef8 <STMPE811_Read>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8001e4c:	797b      	ldrb	r3, [r7, #5]
 8001e4e:	f023 0302 	bic.w	r3, r3, #2
 8001e52:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8001e54:	797b      	ldrb	r3, [r7, #5]
 8001e56:	461a      	mov	r2, r3
 8001e58:	2104      	movs	r1, #4
 8001e5a:	2082      	movs	r0, #130	@ 0x82
 8001e5c:	f000 f9cc 	bl	80021f8 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8001e60:	2249      	movs	r2, #73	@ 0x49
 8001e62:	2120      	movs	r1, #32
 8001e64:	2082      	movs	r0, #130	@ 0x82
 8001e66:	f000 f9c7 	bl	80021f8 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8001e6a:	2002      	movs	r0, #2
 8001e6c:	f000 fb9e 	bl	80025ac <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8001e70:	2201      	movs	r2, #1
 8001e72:	2121      	movs	r1, #33	@ 0x21
 8001e74:	2082      	movs	r0, #130	@ 0x82
 8001e76:	f000 f9bf 	bl	80021f8 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8001e7a:	2017      	movs	r0, #23
 8001e7c:	f000 f83c 	bl	8001ef8 <STMPE811_Read>
 8001e80:	4603      	mov	r3, r0
 8001e82:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8001e84:	797b      	ldrb	r3, [r7, #5]
 8001e86:	f043 031e 	orr.w	r3, r3, #30
 8001e8a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8001e8c:	797b      	ldrb	r3, [r7, #5]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2117      	movs	r1, #23
 8001e92:	2082      	movs	r0, #130	@ 0x82
 8001e94:	f000 f9b0 	bl	80021f8 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8001e98:	229a      	movs	r2, #154	@ 0x9a
 8001e9a:	2141      	movs	r1, #65	@ 0x41
 8001e9c:	2082      	movs	r0, #130	@ 0x82
 8001e9e:	f000 f9ab 	bl	80021f8 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	214a      	movs	r1, #74	@ 0x4a
 8001ea6:	2082      	movs	r0, #130	@ 0x82
 8001ea8:	f000 f9a6 	bl	80021f8 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8001eac:	2201      	movs	r2, #1
 8001eae:	214b      	movs	r1, #75	@ 0x4b
 8001eb0:	2082      	movs	r0, #130	@ 0x82
 8001eb2:	f000 f9a1 	bl	80021f8 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	214b      	movs	r1, #75	@ 0x4b
 8001eba:	2082      	movs	r0, #130	@ 0x82
 8001ebc:	f000 f99c 	bl	80021f8 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	2156      	movs	r1, #86	@ 0x56
 8001ec4:	2082      	movs	r0, #130	@ 0x82
 8001ec6:	f000 f997 	bl	80021f8 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8001eca:	2201      	movs	r2, #1
 8001ecc:	2158      	movs	r1, #88	@ 0x58
 8001ece:	2082      	movs	r0, #130	@ 0x82
 8001ed0:	f000 f992 	bl	80021f8 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	2140      	movs	r1, #64	@ 0x40
 8001ed8:	2082      	movs	r0, #130	@ 0x82
 8001eda:	f000 f98d 	bl	80021f8 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8001ede:	22ff      	movs	r2, #255	@ 0xff
 8001ee0:	210b      	movs	r1, #11
 8001ee2:	2082      	movs	r0, #130	@ 0x82
 8001ee4:	f000 f988 	bl	80021f8 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8001ee8:	20c8      	movs	r0, #200	@ 0xc8
 8001eea:	f000 fb5f 	bl	80025ac <HAL_Delay>

    return STMPE811_State_Ok;
 8001eee:	2302      	movs	r3, #2

}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8001f02:	f107 020f 	add.w	r2, r7, #15
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	2082      	movs	r0, #130	@ 0x82
 8001f0c:	f000 f99e 	bl	800224c <I2C3_Read>

    return readData;
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	791a      	ldrb	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8001f2a:	2040      	movs	r0, #64	@ 0x40
 8001f2c:	f7ff ffe4 	bl	8001ef8 <STMPE811_Read>
 8001f30:	4603      	mov	r3, r0
 8001f32:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8001f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	db0e      	blt.n	8001f5a <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8001f42:	2201      	movs	r2, #1
 8001f44:	214b      	movs	r1, #75	@ 0x4b
 8001f46:	2082      	movs	r0, #130	@ 0x82
 8001f48:	f000 f956 	bl	80021f8 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	214b      	movs	r1, #75	@ 0x4b
 8001f50:	2082      	movs	r0, #130	@ 0x82
 8001f52:	f000 f951 	bl	80021f8 <I2C3_Write>

        return STMPE811_State_Released;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e0a7      	b.n	80020aa <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	799b      	ldrb	r3, [r3, #6]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d117      	bne.n	8001f92 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f9b8 	bl	80022dc <TM_STMPE811_ReadX>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	885b      	ldrh	r3, [r3, #2]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fa0d 	bl	800239c <TM_STMPE811_ReadY>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8001f88:	3301      	adds	r3, #1
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	805a      	strh	r2, [r3, #2]
 8001f90:	e048      	b.n	8002024 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	799b      	ldrb	r3, [r3, #6]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d112      	bne.n	8001fc0 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 f99c 	bl	80022dc <TM_STMPE811_ReadX>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	885b      	ldrh	r3, [r3, #2]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 f9f3 	bl	800239c <TM_STMPE811_ReadY>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	461a      	mov	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	805a      	strh	r2, [r3, #2]
 8001fbe:	e031      	b.n	8002024 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	799b      	ldrb	r3, [r3, #6]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d115      	bne.n	8001ff4 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	885b      	ldrh	r3, [r3, #2]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 f985 	bl	80022dc <TM_STMPE811_ReadX>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f9dc 	bl	800239c <TM_STMPE811_ReadY>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8001fea:	3301      	adds	r3, #1
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	801a      	strh	r2, [r3, #0]
 8001ff2:	e017      	b.n	8002024 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	799b      	ldrb	r3, [r3, #6]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d113      	bne.n	8002024 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f000 f96b 	bl	80022dc <TM_STMPE811_ReadX>
 8002006:	4603      	mov	r3, r0
 8002008:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800200c:	b29a      	uxth	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f000 f9c0 	bl	800239c <TM_STMPE811_ReadY>
 800201c:	4603      	mov	r3, r0
 800201e:	461a      	mov	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002024:	2201      	movs	r2, #1
 8002026:	214b      	movs	r1, #75	@ 0x4b
 8002028:	2082      	movs	r0, #130	@ 0x82
 800202a:	f000 f8e5 	bl	80021f8 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800202e:	2200      	movs	r2, #0
 8002030:	214b      	movs	r1, #75	@ 0x4b
 8002032:	2082      	movs	r0, #130	@ 0x82
 8002034:	f000 f8e0 	bl	80021f8 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	799b      	ldrb	r3, [r3, #6]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <STMPE811_ReadTouch+0x12e>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	799b      	ldrb	r3, [r3, #6]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d115      	bne.n	8002074 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d027      	beq.n	80020a0 <STMPE811_ReadTouch+0x186>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	2bee      	cmp	r3, #238	@ 0xee
 8002056:	d823      	bhi.n	80020a0 <STMPE811_ReadTouch+0x186>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	885b      	ldrh	r3, [r3, #2]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d01f      	beq.n	80020a0 <STMPE811_ReadTouch+0x186>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	885b      	ldrh	r3, [r3, #2]
 8002064:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002068:	d81a      	bhi.n	80020a0 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002070:	2300      	movs	r3, #0
 8002072:	e01a      	b.n	80020aa <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d012      	beq.n	80020a2 <STMPE811_ReadTouch+0x188>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002084:	d80d      	bhi.n	80020a2 <STMPE811_ReadTouch+0x188>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	885b      	ldrh	r3, [r3, #2]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d009      	beq.n	80020a2 <STMPE811_ReadTouch+0x188>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	885b      	ldrh	r3, [r3, #2]
 8002092:	2bee      	cmp	r3, #238	@ 0xee
 8002094:	d805      	bhi.n	80020a2 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 800209c:	2300      	movs	r3, #0
 800209e:	e004      	b.n	80020aa <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80020a0:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 80020a8:	2301      	movs	r3, #1
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80020b8:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <verifyHAL_I2C_IS_OKAY+0x1c>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20025b78 	.word	0x20025b78

080020d4 <I2C3_Init>:

static void I2C3_Init()
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	4b18      	ldr	r3, [pc, #96]	@ (8002140 <I2C3_Init+0x6c>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	4a17      	ldr	r2, [pc, #92]	@ (8002140 <I2C3_Init+0x6c>)
 80020e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ea:	4b15      	ldr	r3, [pc, #84]	@ (8002140 <I2C3_Init+0x6c>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80020f6:	4b13      	ldr	r3, [pc, #76]	@ (8002144 <I2C3_Init+0x70>)
 80020f8:	4a13      	ldr	r2, [pc, #76]	@ (8002148 <I2C3_Init+0x74>)
 80020fa:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80020fc:	4b11      	ldr	r3, [pc, #68]	@ (8002144 <I2C3_Init+0x70>)
 80020fe:	4a13      	ldr	r2, [pc, #76]	@ (800214c <I2C3_Init+0x78>)
 8002100:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002102:	4b10      	ldr	r3, [pc, #64]	@ (8002144 <I2C3_Init+0x70>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002108:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <I2C3_Init+0x70>)
 800210a:	2200      	movs	r2, #0
 800210c:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800210e:	4b0d      	ldr	r3, [pc, #52]	@ (8002144 <I2C3_Init+0x70>)
 8002110:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002114:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002116:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <I2C3_Init+0x70>)
 8002118:	2200      	movs	r2, #0
 800211a:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800211c:	4b09      	ldr	r3, [pc, #36]	@ (8002144 <I2C3_Init+0x70>)
 800211e:	2200      	movs	r2, #0
 8002120:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002122:	4808      	ldr	r0, [pc, #32]	@ (8002144 <I2C3_Init+0x70>)
 8002124:	f000 fe1e 	bl	8002d64 <HAL_I2C_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002132:	bf00      	nop
 8002134:	e7fd      	b.n	8002132 <I2C3_Init+0x5e>
    }
    return;
 8002136:	bf00      	nop
}
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800
 8002144:	20025b24 	.word	0x20025b24
 8002148:	40005c00 	.word	0x40005c00
 800214c:	000186a0 	.word	0x000186a0

08002150 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002156:	f107 030c 	add.w	r3, r7, #12
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]
 8002164:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	4b20      	ldr	r3, [pc, #128]	@ (80021ec <I2C3_MspInit+0x9c>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	4a1f      	ldr	r2, [pc, #124]	@ (80021ec <I2C3_MspInit+0x9c>)
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	6313      	str	r3, [r2, #48]	@ 0x30
 8002176:	4b1d      	ldr	r3, [pc, #116]	@ (80021ec <I2C3_MspInit+0x9c>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	4b19      	ldr	r3, [pc, #100]	@ (80021ec <I2C3_MspInit+0x9c>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	4a18      	ldr	r2, [pc, #96]	@ (80021ec <I2C3_MspInit+0x9c>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6313      	str	r3, [r2, #48]	@ 0x30
 8002192:	4b16      	ldr	r3, [pc, #88]	@ (80021ec <I2C3_MspInit+0x9c>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800219e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a4:	2312      	movs	r3, #18
 80021a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021b0:	2304      	movs	r3, #4
 80021b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80021b4:	f107 030c 	add.w	r3, r7, #12
 80021b8:	4619      	mov	r1, r3
 80021ba:	480d      	ldr	r0, [pc, #52]	@ (80021f0 <I2C3_MspInit+0xa0>)
 80021bc:	f000 fb00 	bl	80027c0 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80021c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021c6:	2312      	movs	r3, #18
 80021c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021d2:	2304      	movs	r3, #4
 80021d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80021d6:	f107 030c 	add.w	r3, r7, #12
 80021da:	4619      	mov	r1, r3
 80021dc:	4805      	ldr	r0, [pc, #20]	@ (80021f4 <I2C3_MspInit+0xa4>)
 80021de:	f000 faef 	bl	80027c0 <HAL_GPIO_Init>
    
}
 80021e2:	bf00      	nop
 80021e4:	3720      	adds	r7, #32
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40020800 	.word	0x40020800
 80021f4:	40020000 	.word	0x40020000

080021f8 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af04      	add	r7, sp, #16
 80021fe:	4603      	mov	r3, r0
 8002200:	80fb      	strh	r3, [r7, #6]
 8002202:	460b      	mov	r3, r1
 8002204:	717b      	strb	r3, [r7, #5]
 8002206:	4613      	mov	r3, r2
 8002208:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 800220a:	793b      	ldrb	r3, [r7, #4]
 800220c:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800220e:	797b      	ldrb	r3, [r7, #5]
 8002210:	b29a      	uxth	r2, r3
 8002212:	88f9      	ldrh	r1, [r7, #6]
 8002214:	4b0a      	ldr	r3, [pc, #40]	@ (8002240 <I2C3_Write+0x48>)
 8002216:	9302      	str	r3, [sp, #8]
 8002218:	2301      	movs	r3, #1
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	f107 030f 	add.w	r3, r7, #15
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	2301      	movs	r3, #1
 8002224:	4807      	ldr	r0, [pc, #28]	@ (8002244 <I2C3_Write+0x4c>)
 8002226:	f000 fee1 	bl	8002fec <HAL_I2C_Mem_Write>
 800222a:	4603      	mov	r3, r0
 800222c:	461a      	mov	r2, r3
 800222e:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <I2C3_Write+0x50>)
 8002230:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002232:	f7ff ff3f 	bl	80020b4 <verifyHAL_I2C_IS_OKAY>
}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	0003d090 	.word	0x0003d090
 8002244:	20025b24 	.word	0x20025b24
 8002248:	20025b78 	.word	0x20025b78

0800224c <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af04      	add	r7, sp, #16
 8002252:	4603      	mov	r3, r0
 8002254:	603a      	str	r2, [r7, #0]
 8002256:	71fb      	strb	r3, [r7, #7]
 8002258:	460b      	mov	r3, r1
 800225a:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	b299      	uxth	r1, r3
 8002260:	79bb      	ldrb	r3, [r7, #6]
 8002262:	b29a      	uxth	r2, r3
 8002264:	4b09      	ldr	r3, [pc, #36]	@ (800228c <I2C3_Read+0x40>)
 8002266:	9302      	str	r3, [sp, #8]
 8002268:	2301      	movs	r3, #1
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2301      	movs	r3, #1
 8002272:	4807      	ldr	r0, [pc, #28]	@ (8002290 <I2C3_Read+0x44>)
 8002274:	f000 ffb4 	bl	80031e0 <HAL_I2C_Mem_Read>
 8002278:	4603      	mov	r3, r0
 800227a:	461a      	mov	r2, r3
 800227c:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <I2C3_Read+0x48>)
 800227e:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002280:	f7ff ff18 	bl	80020b4 <verifyHAL_I2C_IS_OKAY>
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	0003d090 	.word	0x0003d090
 8002290:	20025b24 	.word	0x20025b24
 8002294:	20025b78 	.word	0x20025b78

08002298 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af04      	add	r7, sp, #16
 800229e:	603a      	str	r2, [r7, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
 80022a6:	460b      	mov	r3, r1
 80022a8:	71bb      	strb	r3, [r7, #6]
 80022aa:	4613      	mov	r3, r2
 80022ac:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	b299      	uxth	r1, r3
 80022b2:	79bb      	ldrb	r3, [r7, #6]
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	4b07      	ldr	r3, [pc, #28]	@ (80022d4 <I2C3_MulitByteRead+0x3c>)
 80022b8:	9302      	str	r3, [sp, #8]
 80022ba:	88bb      	ldrh	r3, [r7, #4]
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	2301      	movs	r3, #1
 80022c4:	4804      	ldr	r0, [pc, #16]	@ (80022d8 <I2C3_MulitByteRead+0x40>)
 80022c6:	f000 ff8b 	bl	80031e0 <HAL_I2C_Mem_Read>
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	0003d090 	.word	0x0003d090
 80022d8:	20025b24 	.word	0x20025b24

080022dc <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80022e6:	204d      	movs	r0, #77	@ 0x4d
 80022e8:	f7ff fe06 	bl	8001ef8 <STMPE811_Read>
 80022ec:	4603      	mov	r3, r0
 80022ee:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80022f0:	204e      	movs	r0, #78	@ 0x4e
 80022f2:	f7ff fe01 	bl	8001ef8 <STMPE811_Read>
 80022f6:	4603      	mov	r3, r0
 80022f8:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80022fa:	7a7b      	ldrb	r3, [r7, #9]
 80022fc:	b21b      	sxth	r3, r3
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	b21a      	sxth	r2, r3
 8002302:	7a3b      	ldrb	r3, [r7, #8]
 8002304:	b21b      	sxth	r3, r3
 8002306:	4313      	orrs	r3, r2
 8002308:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 800230a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800230e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002312:	4293      	cmp	r3, r2
 8002314:	dc06      	bgt.n	8002324 <TM_STMPE811_ReadX+0x48>
        val = 3900 - val;
 8002316:	89fb      	ldrh	r3, [r7, #14]
 8002318:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 800231c:	330c      	adds	r3, #12
 800231e:	b29b      	uxth	r3, r3
 8002320:	81fb      	strh	r3, [r7, #14]
 8002322:	e005      	b.n	8002330 <TM_STMPE811_ReadX+0x54>
    } else {
        val = 3800 - val;
 8002324:	89fb      	ldrh	r3, [r7, #14]
 8002326:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800232a:	3308      	adds	r3, #8
 800232c:	b29b      	uxth	r3, r3
 800232e:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002330:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002334:	4a18      	ldr	r2, [pc, #96]	@ (8002398 <TM_STMPE811_ReadX+0xbc>)
 8002336:	fb82 1203 	smull	r1, r2, r2, r3
 800233a:	441a      	add	r2, r3
 800233c:	10d2      	asrs	r2, r2, #3
 800233e:	17db      	asrs	r3, r3, #31
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002344:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002348:	2bef      	cmp	r3, #239	@ 0xef
 800234a:	dd02      	ble.n	8002352 <TM_STMPE811_ReadX+0x76>
        val = 239;
 800234c:	23ef      	movs	r3, #239	@ 0xef
 800234e:	81fb      	strh	r3, [r7, #14]
 8002350:	e005      	b.n	800235e <TM_STMPE811_ReadX+0x82>
    } else if (val < 0) {
 8002352:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002356:	2b00      	cmp	r3, #0
 8002358:	da01      	bge.n	800235e <TM_STMPE811_ReadX+0x82>
        val = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 800235e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	429a      	cmp	r2, r3
 8002366:	dd05      	ble.n	8002374 <TM_STMPE811_ReadX+0x98>
 8002368:	89fa      	ldrh	r2, [r7, #14]
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	b29b      	uxth	r3, r3
 8002370:	b21b      	sxth	r3, r3
 8002372:	e004      	b.n	800237e <TM_STMPE811_ReadX+0xa2>
 8002374:	89fb      	ldrh	r3, [r7, #14]
 8002376:	88fa      	ldrh	r2, [r7, #6]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	b29b      	uxth	r3, r3
 800237c:	b21b      	sxth	r3, r3
 800237e:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002380:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002384:	2b04      	cmp	r3, #4
 8002386:	dd01      	ble.n	800238c <TM_STMPE811_ReadX+0xb0>
        return val;
 8002388:	89fb      	ldrh	r3, [r7, #14]
 800238a:	e000      	b.n	800238e <TM_STMPE811_ReadX+0xb2>
    }
    return x;
 800238c:	88fb      	ldrh	r3, [r7, #6]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	88888889 	.word	0x88888889

0800239c <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80023a6:	204f      	movs	r0, #79	@ 0x4f
 80023a8:	f7ff fda6 	bl	8001ef8 <STMPE811_Read>
 80023ac:	4603      	mov	r3, r0
 80023ae:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 80023b0:	2050      	movs	r0, #80	@ 0x50
 80023b2:	f7ff fda1 	bl	8001ef8 <STMPE811_Read>
 80023b6:	4603      	mov	r3, r0
 80023b8:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80023ba:	7a7b      	ldrb	r3, [r7, #9]
 80023bc:	b21b      	sxth	r3, r3
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	b21a      	sxth	r2, r3
 80023c2:	7a3b      	ldrb	r3, [r7, #8]
 80023c4:	b21b      	sxth	r3, r3
 80023c6:	4313      	orrs	r3, r2
 80023c8:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80023ca:	89fb      	ldrh	r3, [r7, #14]
 80023cc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 80023d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023d8:	4a18      	ldr	r2, [pc, #96]	@ (800243c <TM_STMPE811_ReadY+0xa0>)
 80023da:	fb82 1203 	smull	r1, r2, r2, r3
 80023de:	1052      	asrs	r2, r2, #1
 80023e0:	17db      	asrs	r3, r3, #31
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 80023e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	dc02      	bgt.n	80023f4 <TM_STMPE811_ReadY+0x58>
        val = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	81fb      	strh	r3, [r7, #14]
 80023f2:	e007      	b.n	8002404 <TM_STMPE811_ReadY+0x68>
    } else if (val >= 320) {
 80023f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023f8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80023fc:	db02      	blt.n	8002404 <TM_STMPE811_ReadY+0x68>
        val = 319;
 80023fe:	f240 133f 	movw	r3, #319	@ 0x13f
 8002402:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002404:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002408:	88fb      	ldrh	r3, [r7, #6]
 800240a:	429a      	cmp	r2, r3
 800240c:	dd05      	ble.n	800241a <TM_STMPE811_ReadY+0x7e>
 800240e:	89fa      	ldrh	r2, [r7, #14]
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	b29b      	uxth	r3, r3
 8002416:	b21b      	sxth	r3, r3
 8002418:	e004      	b.n	8002424 <TM_STMPE811_ReadY+0x88>
 800241a:	89fb      	ldrh	r3, [r7, #14]
 800241c:	88fa      	ldrh	r2, [r7, #6]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	b29b      	uxth	r3, r3
 8002422:	b21b      	sxth	r3, r3
 8002424:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002426:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800242a:	2b04      	cmp	r3, #4
 800242c:	dd01      	ble.n	8002432 <TM_STMPE811_ReadY+0x96>
        return val;
 800242e:	89fb      	ldrh	r3, [r7, #14]
 8002430:	e000      	b.n	8002434 <TM_STMPE811_ReadY+0x98>
    }
    return y;
 8002432:	88fb      	ldrh	r3, [r7, #6]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	2e8ba2e9 	.word	0x2e8ba2e9

08002440 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002454:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <SystemInit+0x20>)
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800245a:	4a05      	ldr	r2, [pc, #20]	@ (8002470 <SystemInit+0x20>)
 800245c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002460:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002474:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002478:	f7ff ffea 	bl	8002450 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800247c:	480c      	ldr	r0, [pc, #48]	@ (80024b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800247e:	490d      	ldr	r1, [pc, #52]	@ (80024b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002480:	4a0d      	ldr	r2, [pc, #52]	@ (80024b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002484:	e002      	b.n	800248c <LoopCopyDataInit>

08002486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800248a:	3304      	adds	r3, #4

0800248c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800248c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002490:	d3f9      	bcc.n	8002486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002492:	4a0a      	ldr	r2, [pc, #40]	@ (80024bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002494:	4c0a      	ldr	r4, [pc, #40]	@ (80024c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002498:	e001      	b.n	800249e <LoopFillZerobss>

0800249a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800249a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800249c:	3204      	adds	r2, #4

0800249e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a0:	d3fb      	bcc.n	800249a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80024a2:	f003 fbd3 	bl	8005c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024a6:	f7fe fe2c 	bl	8001102 <main>
  bx  lr    
 80024aa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80024ac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80024b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80024b8:	08006ea4 	.word	0x08006ea4
  ldr r2, =_sbss
 80024bc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80024c0:	20025b80 	.word	0x20025b80

080024c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024c4:	e7fe      	b.n	80024c4 <ADC_IRQHandler>
	...

080024c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002508 <HAL_Init+0x40>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002508 <HAL_Init+0x40>)
 80024d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <HAL_Init+0x40>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002508 <HAL_Init+0x40>)
 80024de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024e4:	4b08      	ldr	r3, [pc, #32]	@ (8002508 <HAL_Init+0x40>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a07      	ldr	r2, [pc, #28]	@ (8002508 <HAL_Init+0x40>)
 80024ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f0:	2003      	movs	r0, #3
 80024f2:	f000 f931 	bl	8002758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024f6:	2000      	movs	r0, #0
 80024f8:	f000 f808 	bl	800250c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024fc:	f7ff f9c4 	bl	8001888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40023c00 	.word	0x40023c00

0800250c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002514:	4b12      	ldr	r3, [pc, #72]	@ (8002560 <HAL_InitTick+0x54>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b12      	ldr	r3, [pc, #72]	@ (8002564 <HAL_InitTick+0x58>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	4619      	mov	r1, r3
 800251e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002522:	fbb3 f3f1 	udiv	r3, r3, r1
 8002526:	fbb2 f3f3 	udiv	r3, r2, r3
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f93b 	bl	80027a6 <HAL_SYSTICK_Config>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e00e      	b.n	8002558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b0f      	cmp	r3, #15
 800253e:	d80a      	bhi.n	8002556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002540:	2200      	movs	r2, #0
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002548:	f000 f911 	bl	800276e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800254c:	4a06      	ldr	r2, [pc, #24]	@ (8002568 <HAL_InitTick+0x5c>)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	e000      	b.n	8002558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20000010 	.word	0x20000010
 8002564:	20000018 	.word	0x20000018
 8002568:	20000014 	.word	0x20000014

0800256c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002570:	4b06      	ldr	r3, [pc, #24]	@ (800258c <HAL_IncTick+0x20>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
 8002576:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <HAL_IncTick+0x24>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4413      	add	r3, r2
 800257c:	4a04      	ldr	r2, [pc, #16]	@ (8002590 <HAL_IncTick+0x24>)
 800257e:	6013      	str	r3, [r2, #0]
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	20000018 	.word	0x20000018
 8002590:	20025b7c 	.word	0x20025b7c

08002594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return uwTick;
 8002598:	4b03      	ldr	r3, [pc, #12]	@ (80025a8 <HAL_GetTick+0x14>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20025b7c 	.word	0x20025b7c

080025ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025b4:	f7ff ffee 	bl	8002594 <HAL_GetTick>
 80025b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025c4:	d005      	beq.n	80025d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025c6:	4b0a      	ldr	r3, [pc, #40]	@ (80025f0 <HAL_Delay+0x44>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4413      	add	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025d2:	bf00      	nop
 80025d4:	f7ff ffde 	bl	8002594 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d8f7      	bhi.n	80025d4 <HAL_Delay+0x28>
  {
  }
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000018 	.word	0x20000018

080025f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002604:	4b0c      	ldr	r3, [pc, #48]	@ (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002610:	4013      	ands	r3, r2
 8002612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800261c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002620:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002626:	4a04      	ldr	r2, [pc, #16]	@ (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	60d3      	str	r3, [r2, #12]
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002640:	4b04      	ldr	r3, [pc, #16]	@ (8002654 <__NVIC_GetPriorityGrouping+0x18>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	f003 0307 	and.w	r3, r3, #7
}
 800264a:	4618      	mov	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	6039      	str	r1, [r7, #0]
 8002662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002668:	2b00      	cmp	r3, #0
 800266a:	db0a      	blt.n	8002682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	b2da      	uxtb	r2, r3
 8002670:	490c      	ldr	r1, [pc, #48]	@ (80026a4 <__NVIC_SetPriority+0x4c>)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	0112      	lsls	r2, r2, #4
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	440b      	add	r3, r1
 800267c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002680:	e00a      	b.n	8002698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	b2da      	uxtb	r2, r3
 8002686:	4908      	ldr	r1, [pc, #32]	@ (80026a8 <__NVIC_SetPriority+0x50>)
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	3b04      	subs	r3, #4
 8002690:	0112      	lsls	r2, r2, #4
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	440b      	add	r3, r1
 8002696:	761a      	strb	r2, [r3, #24]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000e100 	.word	0xe000e100
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b089      	sub	sp, #36	@ 0x24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f1c3 0307 	rsb	r3, r3, #7
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	bf28      	it	cs
 80026ca:	2304      	movcs	r3, #4
 80026cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3304      	adds	r3, #4
 80026d2:	2b06      	cmp	r3, #6
 80026d4:	d902      	bls.n	80026dc <NVIC_EncodePriority+0x30>
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3b03      	subs	r3, #3
 80026da:	e000      	b.n	80026de <NVIC_EncodePriority+0x32>
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43da      	mvns	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	401a      	ands	r2, r3
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	fa01 f303 	lsl.w	r3, r1, r3
 80026fe:	43d9      	mvns	r1, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002704:	4313      	orrs	r3, r2
         );
}
 8002706:	4618      	mov	r0, r3
 8002708:	3724      	adds	r7, #36	@ 0x24
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3b01      	subs	r3, #1
 8002720:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002724:	d301      	bcc.n	800272a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002726:	2301      	movs	r3, #1
 8002728:	e00f      	b.n	800274a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800272a:	4a0a      	ldr	r2, [pc, #40]	@ (8002754 <SysTick_Config+0x40>)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3b01      	subs	r3, #1
 8002730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002732:	210f      	movs	r1, #15
 8002734:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002738:	f7ff ff8e 	bl	8002658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800273c:	4b05      	ldr	r3, [pc, #20]	@ (8002754 <SysTick_Config+0x40>)
 800273e:	2200      	movs	r2, #0
 8002740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002742:	4b04      	ldr	r3, [pc, #16]	@ (8002754 <SysTick_Config+0x40>)
 8002744:	2207      	movs	r2, #7
 8002746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	e000e010 	.word	0xe000e010

08002758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff ff47 	bl	80025f4 <__NVIC_SetPriorityGrouping>
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800276e:	b580      	push	{r7, lr}
 8002770:	b086      	sub	sp, #24
 8002772:	af00      	add	r7, sp, #0
 8002774:	4603      	mov	r3, r0
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	607a      	str	r2, [r7, #4]
 800277a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002780:	f7ff ff5c 	bl	800263c <__NVIC_GetPriorityGrouping>
 8002784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	6978      	ldr	r0, [r7, #20]
 800278c:	f7ff ff8e 	bl	80026ac <NVIC_EncodePriority>
 8002790:	4602      	mov	r2, r0
 8002792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002796:	4611      	mov	r1, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff5d 	bl	8002658 <__NVIC_SetPriority>
}
 800279e:	bf00      	nop
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff ffb0 	bl	8002714 <SysTick_Config>
 80027b4:	4603      	mov	r3, r0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b089      	sub	sp, #36	@ 0x24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	e177      	b.n	8002acc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027dc:	2201      	movs	r2, #1
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	4013      	ands	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	f040 8166 	bne.w	8002ac6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d005      	beq.n	8002812 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800280e:	2b02      	cmp	r3, #2
 8002810:	d130      	bne.n	8002874 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	2203      	movs	r2, #3
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002848:	2201      	movs	r2, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 0201 	and.w	r2, r3, #1
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	2b03      	cmp	r3, #3
 800287e:	d017      	beq.n	80028b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	2203      	movs	r2, #3
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d123      	bne.n	8002904 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	08da      	lsrs	r2, r3, #3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3208      	adds	r2, #8
 80028c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	220f      	movs	r2, #15
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	08da      	lsrs	r2, r3, #3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3208      	adds	r2, #8
 80028fe:	69b9      	ldr	r1, [r7, #24]
 8002900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	2203      	movs	r2, #3
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0203 	and.w	r2, r3, #3
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 80c0 	beq.w	8002ac6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	4b66      	ldr	r3, [pc, #408]	@ (8002ae4 <HAL_GPIO_Init+0x324>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294e:	4a65      	ldr	r2, [pc, #404]	@ (8002ae4 <HAL_GPIO_Init+0x324>)
 8002950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002954:	6453      	str	r3, [r2, #68]	@ 0x44
 8002956:	4b63      	ldr	r3, [pc, #396]	@ (8002ae4 <HAL_GPIO_Init+0x324>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002962:	4a61      	ldr	r2, [pc, #388]	@ (8002ae8 <HAL_GPIO_Init+0x328>)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	089b      	lsrs	r3, r3, #2
 8002968:	3302      	adds	r3, #2
 800296a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	220f      	movs	r2, #15
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a58      	ldr	r2, [pc, #352]	@ (8002aec <HAL_GPIO_Init+0x32c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d037      	beq.n	80029fe <HAL_GPIO_Init+0x23e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a57      	ldr	r2, [pc, #348]	@ (8002af0 <HAL_GPIO_Init+0x330>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d031      	beq.n	80029fa <HAL_GPIO_Init+0x23a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a56      	ldr	r2, [pc, #344]	@ (8002af4 <HAL_GPIO_Init+0x334>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d02b      	beq.n	80029f6 <HAL_GPIO_Init+0x236>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a55      	ldr	r2, [pc, #340]	@ (8002af8 <HAL_GPIO_Init+0x338>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d025      	beq.n	80029f2 <HAL_GPIO_Init+0x232>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a54      	ldr	r2, [pc, #336]	@ (8002afc <HAL_GPIO_Init+0x33c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01f      	beq.n	80029ee <HAL_GPIO_Init+0x22e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a53      	ldr	r2, [pc, #332]	@ (8002b00 <HAL_GPIO_Init+0x340>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d019      	beq.n	80029ea <HAL_GPIO_Init+0x22a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a52      	ldr	r2, [pc, #328]	@ (8002b04 <HAL_GPIO_Init+0x344>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d013      	beq.n	80029e6 <HAL_GPIO_Init+0x226>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a51      	ldr	r2, [pc, #324]	@ (8002b08 <HAL_GPIO_Init+0x348>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00d      	beq.n	80029e2 <HAL_GPIO_Init+0x222>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a50      	ldr	r2, [pc, #320]	@ (8002b0c <HAL_GPIO_Init+0x34c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d007      	beq.n	80029de <HAL_GPIO_Init+0x21e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002b10 <HAL_GPIO_Init+0x350>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d101      	bne.n	80029da <HAL_GPIO_Init+0x21a>
 80029d6:	2309      	movs	r3, #9
 80029d8:	e012      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029da:	230a      	movs	r3, #10
 80029dc:	e010      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029de:	2308      	movs	r3, #8
 80029e0:	e00e      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029e2:	2307      	movs	r3, #7
 80029e4:	e00c      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029e6:	2306      	movs	r3, #6
 80029e8:	e00a      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029ea:	2305      	movs	r3, #5
 80029ec:	e008      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029ee:	2304      	movs	r3, #4
 80029f0:	e006      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029f2:	2303      	movs	r3, #3
 80029f4:	e004      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e002      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029fe:	2300      	movs	r3, #0
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	f002 0203 	and.w	r2, r2, #3
 8002a06:	0092      	lsls	r2, r2, #2
 8002a08:	4093      	lsls	r3, r2
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a10:	4935      	ldr	r1, [pc, #212]	@ (8002ae8 <HAL_GPIO_Init+0x328>)
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	089b      	lsrs	r3, r3, #2
 8002a16:	3302      	adds	r3, #2
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b14 <HAL_GPIO_Init+0x354>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a42:	4a34      	ldr	r2, [pc, #208]	@ (8002b14 <HAL_GPIO_Init+0x354>)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a48:	4b32      	ldr	r3, [pc, #200]	@ (8002b14 <HAL_GPIO_Init+0x354>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a6c:	4a29      	ldr	r2, [pc, #164]	@ (8002b14 <HAL_GPIO_Init+0x354>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a72:	4b28      	ldr	r3, [pc, #160]	@ (8002b14 <HAL_GPIO_Init+0x354>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a96:	4a1f      	ldr	r2, [pc, #124]	@ (8002b14 <HAL_GPIO_Init+0x354>)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b14 <HAL_GPIO_Init+0x354>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ac0:	4a14      	ldr	r2, [pc, #80]	@ (8002b14 <HAL_GPIO_Init+0x354>)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	61fb      	str	r3, [r7, #28]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	2b0f      	cmp	r3, #15
 8002ad0:	f67f ae84 	bls.w	80027dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	3724      	adds	r7, #36	@ 0x24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40013800 	.word	0x40013800
 8002aec:	40020000 	.word	0x40020000
 8002af0:	40020400 	.word	0x40020400
 8002af4:	40020800 	.word	0x40020800
 8002af8:	40020c00 	.word	0x40020c00
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40021400 	.word	0x40021400
 8002b04:	40021800 	.word	0x40021800
 8002b08:	40021c00 	.word	0x40021c00
 8002b0c:	40022000 	.word	0x40022000
 8002b10:	40022400 	.word	0x40022400
 8002b14:	40013c00 	.word	0x40013c00

08002b18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	e0d9      	b.n	8002ce8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b34:	2201      	movs	r2, #1
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4013      	ands	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	f040 80c9 	bne.w	8002ce2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002b50:	4a6b      	ldr	r2, [pc, #428]	@ (8002d00 <HAL_GPIO_DeInit+0x1e8>)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	089b      	lsrs	r3, r3, #2
 8002b56:	3302      	adds	r3, #2
 8002b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	220f      	movs	r2, #15
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a63      	ldr	r2, [pc, #396]	@ (8002d04 <HAL_GPIO_DeInit+0x1ec>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d037      	beq.n	8002bea <HAL_GPIO_DeInit+0xd2>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a62      	ldr	r2, [pc, #392]	@ (8002d08 <HAL_GPIO_DeInit+0x1f0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d031      	beq.n	8002be6 <HAL_GPIO_DeInit+0xce>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a61      	ldr	r2, [pc, #388]	@ (8002d0c <HAL_GPIO_DeInit+0x1f4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d02b      	beq.n	8002be2 <HAL_GPIO_DeInit+0xca>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a60      	ldr	r2, [pc, #384]	@ (8002d10 <HAL_GPIO_DeInit+0x1f8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d025      	beq.n	8002bde <HAL_GPIO_DeInit+0xc6>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a5f      	ldr	r2, [pc, #380]	@ (8002d14 <HAL_GPIO_DeInit+0x1fc>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d01f      	beq.n	8002bda <HAL_GPIO_DeInit+0xc2>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a5e      	ldr	r2, [pc, #376]	@ (8002d18 <HAL_GPIO_DeInit+0x200>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d019      	beq.n	8002bd6 <HAL_GPIO_DeInit+0xbe>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a5d      	ldr	r2, [pc, #372]	@ (8002d1c <HAL_GPIO_DeInit+0x204>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d013      	beq.n	8002bd2 <HAL_GPIO_DeInit+0xba>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a5c      	ldr	r2, [pc, #368]	@ (8002d20 <HAL_GPIO_DeInit+0x208>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d00d      	beq.n	8002bce <HAL_GPIO_DeInit+0xb6>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a5b      	ldr	r2, [pc, #364]	@ (8002d24 <HAL_GPIO_DeInit+0x20c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d007      	beq.n	8002bca <HAL_GPIO_DeInit+0xb2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a5a      	ldr	r2, [pc, #360]	@ (8002d28 <HAL_GPIO_DeInit+0x210>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d101      	bne.n	8002bc6 <HAL_GPIO_DeInit+0xae>
 8002bc2:	2309      	movs	r3, #9
 8002bc4:	e012      	b.n	8002bec <HAL_GPIO_DeInit+0xd4>
 8002bc6:	230a      	movs	r3, #10
 8002bc8:	e010      	b.n	8002bec <HAL_GPIO_DeInit+0xd4>
 8002bca:	2308      	movs	r3, #8
 8002bcc:	e00e      	b.n	8002bec <HAL_GPIO_DeInit+0xd4>
 8002bce:	2307      	movs	r3, #7
 8002bd0:	e00c      	b.n	8002bec <HAL_GPIO_DeInit+0xd4>
 8002bd2:	2306      	movs	r3, #6
 8002bd4:	e00a      	b.n	8002bec <HAL_GPIO_DeInit+0xd4>
 8002bd6:	2305      	movs	r3, #5
 8002bd8:	e008      	b.n	8002bec <HAL_GPIO_DeInit+0xd4>
 8002bda:	2304      	movs	r3, #4
 8002bdc:	e006      	b.n	8002bec <HAL_GPIO_DeInit+0xd4>
 8002bde:	2303      	movs	r3, #3
 8002be0:	e004      	b.n	8002bec <HAL_GPIO_DeInit+0xd4>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e002      	b.n	8002bec <HAL_GPIO_DeInit+0xd4>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <HAL_GPIO_DeInit+0xd4>
 8002bea:	2300      	movs	r3, #0
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	f002 0203 	and.w	r2, r2, #3
 8002bf2:	0092      	lsls	r2, r2, #2
 8002bf4:	4093      	lsls	r3, r2
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d132      	bne.n	8002c62 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002bfc:	4b4b      	ldr	r3, [pc, #300]	@ (8002d2c <HAL_GPIO_DeInit+0x214>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	43db      	mvns	r3, r3
 8002c04:	4949      	ldr	r1, [pc, #292]	@ (8002d2c <HAL_GPIO_DeInit+0x214>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002c0a:	4b48      	ldr	r3, [pc, #288]	@ (8002d2c <HAL_GPIO_DeInit+0x214>)
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	43db      	mvns	r3, r3
 8002c12:	4946      	ldr	r1, [pc, #280]	@ (8002d2c <HAL_GPIO_DeInit+0x214>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002c18:	4b44      	ldr	r3, [pc, #272]	@ (8002d2c <HAL_GPIO_DeInit+0x214>)
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	4942      	ldr	r1, [pc, #264]	@ (8002d2c <HAL_GPIO_DeInit+0x214>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002c26:	4b41      	ldr	r3, [pc, #260]	@ (8002d2c <HAL_GPIO_DeInit+0x214>)
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	493f      	ldr	r1, [pc, #252]	@ (8002d2c <HAL_GPIO_DeInit+0x214>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	220f      	movs	r2, #15
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002c44:	4a2e      	ldr	r2, [pc, #184]	@ (8002d00 <HAL_GPIO_DeInit+0x1e8>)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	089b      	lsrs	r3, r3, #2
 8002c4a:	3302      	adds	r3, #2
 8002c4c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	43da      	mvns	r2, r3
 8002c54:	482a      	ldr	r0, [pc, #168]	@ (8002d00 <HAL_GPIO_DeInit+0x1e8>)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	089b      	lsrs	r3, r3, #2
 8002c5a:	400a      	ands	r2, r1
 8002c5c:	3302      	adds	r3, #2
 8002c5e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	2103      	movs	r1, #3
 8002c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	401a      	ands	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	08da      	lsrs	r2, r3, #3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3208      	adds	r2, #8
 8002c80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	220f      	movs	r2, #15
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	08d2      	lsrs	r2, r2, #3
 8002c98:	4019      	ands	r1, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3208      	adds	r2, #8
 8002c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	2103      	movs	r1, #3
 8002cac:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	2103      	movs	r1, #3
 8002cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	401a      	ands	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2b0f      	cmp	r3, #15
 8002cec:	f67f af22 	bls.w	8002b34 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	371c      	adds	r7, #28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40013800 	.word	0x40013800
 8002d04:	40020000 	.word	0x40020000
 8002d08:	40020400 	.word	0x40020400
 8002d0c:	40020800 	.word	0x40020800
 8002d10:	40020c00 	.word	0x40020c00
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40021400 	.word	0x40021400
 8002d1c:	40021800 	.word	0x40021800
 8002d20:	40021c00 	.word	0x40021c00
 8002d24:	40022000 	.word	0x40022000
 8002d28:	40022400 	.word	0x40022400
 8002d2c:	40013c00 	.word	0x40013c00

08002d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	807b      	strh	r3, [r7, #2]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d40:	787b      	ldrb	r3, [r7, #1]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d46:	887a      	ldrh	r2, [r7, #2]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d4c:	e003      	b.n	8002d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d4e:	887b      	ldrh	r3, [r7, #2]
 8002d50:	041a      	lsls	r2, r3, #16
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	619a      	str	r2, [r3, #24]
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
	...

08002d64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e12b      	b.n	8002fce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fe fda4 	bl	80018d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2224      	movs	r2, #36	@ 0x24
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0201 	bic.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002db6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dc8:	f001 ff82 	bl	8004cd0 <HAL_RCC_GetPCLK1Freq>
 8002dcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	4a81      	ldr	r2, [pc, #516]	@ (8002fd8 <HAL_I2C_Init+0x274>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d807      	bhi.n	8002de8 <HAL_I2C_Init+0x84>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4a80      	ldr	r2, [pc, #512]	@ (8002fdc <HAL_I2C_Init+0x278>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	bf94      	ite	ls
 8002de0:	2301      	movls	r3, #1
 8002de2:	2300      	movhi	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e006      	b.n	8002df6 <HAL_I2C_Init+0x92>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4a7d      	ldr	r2, [pc, #500]	@ (8002fe0 <HAL_I2C_Init+0x27c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	bf94      	ite	ls
 8002df0:	2301      	movls	r3, #1
 8002df2:	2300      	movhi	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0e7      	b.n	8002fce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4a78      	ldr	r2, [pc, #480]	@ (8002fe4 <HAL_I2C_Init+0x280>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	0c9b      	lsrs	r3, r3, #18
 8002e08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4a6a      	ldr	r2, [pc, #424]	@ (8002fd8 <HAL_I2C_Init+0x274>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d802      	bhi.n	8002e38 <HAL_I2C_Init+0xd4>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	3301      	adds	r3, #1
 8002e36:	e009      	b.n	8002e4c <HAL_I2C_Init+0xe8>
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e3e:	fb02 f303 	mul.w	r3, r2, r3
 8002e42:	4a69      	ldr	r2, [pc, #420]	@ (8002fe8 <HAL_I2C_Init+0x284>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	099b      	lsrs	r3, r3, #6
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	430b      	orrs	r3, r1
 8002e52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	495c      	ldr	r1, [pc, #368]	@ (8002fd8 <HAL_I2C_Init+0x274>)
 8002e68:	428b      	cmp	r3, r1
 8002e6a:	d819      	bhi.n	8002ea0 <HAL_I2C_Init+0x13c>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1e59      	subs	r1, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e7a:	1c59      	adds	r1, r3, #1
 8002e7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e80:	400b      	ands	r3, r1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_I2C_Init+0x138>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1e59      	subs	r1, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e94:	3301      	adds	r3, #1
 8002e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9a:	e051      	b.n	8002f40 <HAL_I2C_Init+0x1dc>
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	e04f      	b.n	8002f40 <HAL_I2C_Init+0x1dc>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d111      	bne.n	8002ecc <HAL_I2C_Init+0x168>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1e58      	subs	r0, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	440b      	add	r3, r1
 8002eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eba:	3301      	adds	r3, #1
 8002ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf0c      	ite	eq
 8002ec4:	2301      	moveq	r3, #1
 8002ec6:	2300      	movne	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	e012      	b.n	8002ef2 <HAL_I2C_Init+0x18e>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1e58      	subs	r0, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6859      	ldr	r1, [r3, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	0099      	lsls	r1, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_I2C_Init+0x196>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e022      	b.n	8002f40 <HAL_I2C_Init+0x1dc>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10e      	bne.n	8002f20 <HAL_I2C_Init+0x1bc>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1e58      	subs	r0, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6859      	ldr	r1, [r3, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	440b      	add	r3, r1
 8002f10:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f14:	3301      	adds	r3, #1
 8002f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f1e:	e00f      	b.n	8002f40 <HAL_I2C_Init+0x1dc>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1e58      	subs	r0, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	0099      	lsls	r1, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f36:	3301      	adds	r3, #1
 8002f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	6809      	ldr	r1, [r1, #0]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69da      	ldr	r2, [r3, #28]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6911      	ldr	r1, [r2, #16]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68d2      	ldr	r2, [r2, #12]
 8002f7a:	4311      	orrs	r1, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6812      	ldr	r2, [r2, #0]
 8002f80:	430b      	orrs	r3, r1
 8002f82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	000186a0 	.word	0x000186a0
 8002fdc:	001e847f 	.word	0x001e847f
 8002fe0:	003d08ff 	.word	0x003d08ff
 8002fe4:	431bde83 	.word	0x431bde83
 8002fe8:	10624dd3 	.word	0x10624dd3

08002fec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	817b      	strh	r3, [r7, #10]
 8002ffe:	460b      	mov	r3, r1
 8003000:	813b      	strh	r3, [r7, #8]
 8003002:	4613      	mov	r3, r2
 8003004:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003006:	f7ff fac5 	bl	8002594 <HAL_GetTick>
 800300a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b20      	cmp	r3, #32
 8003016:	f040 80d9 	bne.w	80031cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	2319      	movs	r3, #25
 8003020:	2201      	movs	r2, #1
 8003022:	496d      	ldr	r1, [pc, #436]	@ (80031d8 <HAL_I2C_Mem_Write+0x1ec>)
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 fc8b 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003030:	2302      	movs	r3, #2
 8003032:	e0cc      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_I2C_Mem_Write+0x56>
 800303e:	2302      	movs	r3, #2
 8003040:	e0c5      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b01      	cmp	r3, #1
 8003056:	d007      	beq.n	8003068 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003076:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2221      	movs	r2, #33	@ 0x21
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2240      	movs	r2, #64	@ 0x40
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a3a      	ldr	r2, [r7, #32]
 8003092:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003098:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4a4d      	ldr	r2, [pc, #308]	@ (80031dc <HAL_I2C_Mem_Write+0x1f0>)
 80030a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030aa:	88f8      	ldrh	r0, [r7, #6]
 80030ac:	893a      	ldrh	r2, [r7, #8]
 80030ae:	8979      	ldrh	r1, [r7, #10]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	4603      	mov	r3, r0
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 fac2 	bl	8003644 <I2C_RequestMemoryWrite>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d052      	beq.n	800316c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e081      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 fd50 	bl	8003b74 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00d      	beq.n	80030f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d107      	bne.n	80030f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e06b      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fa:	781a      	ldrb	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b04      	cmp	r3, #4
 8003132:	d11b      	bne.n	800316c <HAL_I2C_Mem_Write+0x180>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003138:	2b00      	cmp	r3, #0
 800313a:	d017      	beq.n	800316c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	781a      	ldrb	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1aa      	bne.n	80030ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fd43 	bl	8003c04 <I2C_WaitOnBTFFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00d      	beq.n	80031a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003188:	2b04      	cmp	r3, #4
 800318a:	d107      	bne.n	800319c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800319a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e016      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	e000      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031cc:	2302      	movs	r3, #2
  }
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	00100002 	.word	0x00100002
 80031dc:	ffff0000 	.word	0xffff0000

080031e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08c      	sub	sp, #48	@ 0x30
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	4608      	mov	r0, r1
 80031ea:	4611      	mov	r1, r2
 80031ec:	461a      	mov	r2, r3
 80031ee:	4603      	mov	r3, r0
 80031f0:	817b      	strh	r3, [r7, #10]
 80031f2:	460b      	mov	r3, r1
 80031f4:	813b      	strh	r3, [r7, #8]
 80031f6:	4613      	mov	r3, r2
 80031f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031fa:	f7ff f9cb 	bl	8002594 <HAL_GetTick>
 80031fe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b20      	cmp	r3, #32
 800320a:	f040 8214 	bne.w	8003636 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	2319      	movs	r3, #25
 8003214:	2201      	movs	r2, #1
 8003216:	497b      	ldr	r1, [pc, #492]	@ (8003404 <HAL_I2C_Mem_Read+0x224>)
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 fb91 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003224:	2302      	movs	r3, #2
 8003226:	e207      	b.n	8003638 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_I2C_Mem_Read+0x56>
 8003232:	2302      	movs	r3, #2
 8003234:	e200      	b.n	8003638 <HAL_I2C_Mem_Read+0x458>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d007      	beq.n	800325c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0201 	orr.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800326a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2222      	movs	r2, #34	@ 0x22
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2240      	movs	r2, #64	@ 0x40
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003286:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800328c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4a5b      	ldr	r2, [pc, #364]	@ (8003408 <HAL_I2C_Mem_Read+0x228>)
 800329c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800329e:	88f8      	ldrh	r0, [r7, #6]
 80032a0:	893a      	ldrh	r2, [r7, #8]
 80032a2:	8979      	ldrh	r1, [r7, #10]
 80032a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a6:	9301      	str	r3, [sp, #4]
 80032a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	4603      	mov	r3, r0
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 fa5e 	bl	8003770 <I2C_RequestMemoryRead>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e1bc      	b.n	8003638 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d113      	bne.n	80032ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c6:	2300      	movs	r3, #0
 80032c8:	623b      	str	r3, [r7, #32]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	623b      	str	r3, [r7, #32]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	623b      	str	r3, [r7, #32]
 80032da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e190      	b.n	8003610 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d11b      	bne.n	800332e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003304:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	e170      	b.n	8003610 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003332:	2b02      	cmp	r3, #2
 8003334:	d11b      	bne.n	800336e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003344:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003354:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	e150      	b.n	8003610 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	617b      	str	r3, [r7, #20]
 8003382:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003384:	e144      	b.n	8003610 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800338a:	2b03      	cmp	r3, #3
 800338c:	f200 80f1 	bhi.w	8003572 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003394:	2b01      	cmp	r3, #1
 8003396:	d123      	bne.n	80033e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800339a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 fc79 	bl	8003c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e145      	b.n	8003638 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033de:	e117      	b.n	8003610 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d14e      	bne.n	8003486 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ee:	2200      	movs	r2, #0
 80033f0:	4906      	ldr	r1, [pc, #24]	@ (800340c <HAL_I2C_Mem_Read+0x22c>)
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 faa4 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d008      	beq.n	8003410 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e11a      	b.n	8003638 <HAL_I2C_Mem_Read+0x458>
 8003402:	bf00      	nop
 8003404:	00100002 	.word	0x00100002
 8003408:	ffff0000 	.word	0xffff0000
 800340c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800341e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691a      	ldr	r2, [r3, #16]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003448:	b29b      	uxth	r3, r3
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003484:	e0c4      	b.n	8003610 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800348c:	2200      	movs	r2, #0
 800348e:	496c      	ldr	r1, [pc, #432]	@ (8003640 <HAL_I2C_Mem_Read+0x460>)
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fa55 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0cb      	b.n	8003638 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691a      	ldr	r2, [r3, #16]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e8:	2200      	movs	r2, #0
 80034ea:	4955      	ldr	r1, [pc, #340]	@ (8003640 <HAL_I2C_Mem_Read+0x460>)
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 fa27 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e09d      	b.n	8003638 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800350a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691a      	ldr	r2, [r3, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003534:	b29b      	uxth	r3, r3
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003570:	e04e      	b.n	8003610 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003574:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fb8c 	bl	8003c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e058      	b.n	8003638 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d124      	bne.n	8003610 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d107      	bne.n	80035de <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035dc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003614:	2b00      	cmp	r3, #0
 8003616:	f47f aeb6 	bne.w	8003386 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e000      	b.n	8003638 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003636:	2302      	movs	r3, #2
  }
}
 8003638:	4618      	mov	r0, r3
 800363a:	3728      	adds	r7, #40	@ 0x28
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	00010004 	.word	0x00010004

08003644 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af02      	add	r7, sp, #8
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	4608      	mov	r0, r1
 800364e:	4611      	mov	r1, r2
 8003650:	461a      	mov	r2, r3
 8003652:	4603      	mov	r3, r0
 8003654:	817b      	strh	r3, [r7, #10]
 8003656:	460b      	mov	r3, r1
 8003658:	813b      	strh	r3, [r7, #8]
 800365a:	4613      	mov	r3, r2
 800365c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800366c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	2200      	movs	r2, #0
 8003676:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f960 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00d      	beq.n	80036a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003690:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003694:	d103      	bne.n	800369e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800369c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e05f      	b.n	8003762 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036a2:	897b      	ldrh	r3, [r7, #10]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	461a      	mov	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b4:	6a3a      	ldr	r2, [r7, #32]
 80036b6:	492d      	ldr	r1, [pc, #180]	@ (800376c <I2C_RequestMemoryWrite+0x128>)
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f9bb 	bl	8003a34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e04c      	b.n	8003762 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e0:	6a39      	ldr	r1, [r7, #32]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fa46 	bl	8003b74 <I2C_WaitOnTXEFlagUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00d      	beq.n	800370a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d107      	bne.n	8003706 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003704:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e02b      	b.n	8003762 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800370a:	88fb      	ldrh	r3, [r7, #6]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d105      	bne.n	800371c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003710:	893b      	ldrh	r3, [r7, #8]
 8003712:	b2da      	uxtb	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	611a      	str	r2, [r3, #16]
 800371a:	e021      	b.n	8003760 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800371c:	893b      	ldrh	r3, [r7, #8]
 800371e:	0a1b      	lsrs	r3, r3, #8
 8003720:	b29b      	uxth	r3, r3
 8003722:	b2da      	uxtb	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800372a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800372c:	6a39      	ldr	r1, [r7, #32]
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 fa20 	bl	8003b74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00d      	beq.n	8003756 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	2b04      	cmp	r3, #4
 8003740:	d107      	bne.n	8003752 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003750:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e005      	b.n	8003762 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003756:	893b      	ldrh	r3, [r7, #8]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	00010002 	.word	0x00010002

08003770 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af02      	add	r7, sp, #8
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	4608      	mov	r0, r1
 800377a:	4611      	mov	r1, r2
 800377c:	461a      	mov	r2, r3
 800377e:	4603      	mov	r3, r0
 8003780:	817b      	strh	r3, [r7, #10]
 8003782:	460b      	mov	r3, r1
 8003784:	813b      	strh	r3, [r7, #8]
 8003786:	4613      	mov	r3, r2
 8003788:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003798:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 f8c2 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00d      	beq.n	80037de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037d0:	d103      	bne.n	80037da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e0aa      	b.n	8003934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037de:	897b      	ldrh	r3, [r7, #10]
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	461a      	mov	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f0:	6a3a      	ldr	r2, [r7, #32]
 80037f2:	4952      	ldr	r1, [pc, #328]	@ (800393c <I2C_RequestMemoryRead+0x1cc>)
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f91d 	bl	8003a34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e097      	b.n	8003934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800381a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800381c:	6a39      	ldr	r1, [r7, #32]
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f9a8 	bl	8003b74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00d      	beq.n	8003846 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382e:	2b04      	cmp	r3, #4
 8003830:	d107      	bne.n	8003842 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003840:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e076      	b.n	8003934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003846:	88fb      	ldrh	r3, [r7, #6]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d105      	bne.n	8003858 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800384c:	893b      	ldrh	r3, [r7, #8]
 800384e:	b2da      	uxtb	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	611a      	str	r2, [r3, #16]
 8003856:	e021      	b.n	800389c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003858:	893b      	ldrh	r3, [r7, #8]
 800385a:	0a1b      	lsrs	r3, r3, #8
 800385c:	b29b      	uxth	r3, r3
 800385e:	b2da      	uxtb	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003868:	6a39      	ldr	r1, [r7, #32]
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f982 	bl	8003b74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00d      	beq.n	8003892 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	2b04      	cmp	r3, #4
 800387c:	d107      	bne.n	800388e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800388c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e050      	b.n	8003934 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003892:	893b      	ldrh	r3, [r7, #8]
 8003894:	b2da      	uxtb	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800389c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800389e:	6a39      	ldr	r1, [r7, #32]
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 f967 	bl	8003b74 <I2C_WaitOnTXEFlagUntilTimeout>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00d      	beq.n	80038c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d107      	bne.n	80038c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e035      	b.n	8003934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	2200      	movs	r2, #0
 80038e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f82b 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00d      	beq.n	800390c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038fe:	d103      	bne.n	8003908 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003906:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e013      	b.n	8003934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800390c:	897b      	ldrh	r3, [r7, #10]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	b2da      	uxtb	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800391c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391e:	6a3a      	ldr	r2, [r7, #32]
 8003920:	4906      	ldr	r1, [pc, #24]	@ (800393c <I2C_RequestMemoryRead+0x1cc>)
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f886 	bl	8003a34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	00010002 	.word	0x00010002

08003940 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	4613      	mov	r3, r2
 800394e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003950:	e048      	b.n	80039e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003958:	d044      	beq.n	80039e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395a:	f7fe fe1b 	bl	8002594 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d302      	bcc.n	8003970 <I2C_WaitOnFlagUntilTimeout+0x30>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d139      	bne.n	80039e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	0c1b      	lsrs	r3, r3, #16
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b01      	cmp	r3, #1
 8003978:	d10d      	bne.n	8003996 <I2C_WaitOnFlagUntilTimeout+0x56>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	43da      	mvns	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	4013      	ands	r3, r2
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	bf0c      	ite	eq
 800398c:	2301      	moveq	r3, #1
 800398e:	2300      	movne	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	e00c      	b.n	80039b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	43da      	mvns	r2, r3
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	4013      	ands	r3, r2
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bf0c      	ite	eq
 80039a8:	2301      	moveq	r3, #1
 80039aa:	2300      	movne	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	461a      	mov	r2, r3
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d116      	bne.n	80039e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d0:	f043 0220 	orr.w	r2, r3, #32
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e023      	b.n	8003a2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	0c1b      	lsrs	r3, r3, #16
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d10d      	bne.n	8003a0a <I2C_WaitOnFlagUntilTimeout+0xca>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	43da      	mvns	r2, r3
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	4013      	ands	r3, r2
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	bf0c      	ite	eq
 8003a00:	2301      	moveq	r3, #1
 8003a02:	2300      	movne	r3, #0
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	461a      	mov	r2, r3
 8003a08:	e00c      	b.n	8003a24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	43da      	mvns	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	4013      	ands	r3, r2
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bf0c      	ite	eq
 8003a1c:	2301      	moveq	r3, #1
 8003a1e:	2300      	movne	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d093      	beq.n	8003952 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a42:	e071      	b.n	8003b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a52:	d123      	bne.n	8003a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a88:	f043 0204 	orr.w	r2, r3, #4
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e067      	b.n	8003b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003aa2:	d041      	beq.n	8003b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa4:	f7fe fd76 	bl	8002594 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d302      	bcc.n	8003aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d136      	bne.n	8003b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	0c1b      	lsrs	r3, r3, #16
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d10c      	bne.n	8003ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	43da      	mvns	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bf14      	ite	ne
 8003ad6:	2301      	movne	r3, #1
 8003ad8:	2300      	moveq	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	e00b      	b.n	8003af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	43da      	mvns	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bf14      	ite	ne
 8003af0:	2301      	movne	r3, #1
 8003af2:	2300      	moveq	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d016      	beq.n	8003b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	f043 0220 	orr.w	r2, r3, #32
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e021      	b.n	8003b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	0c1b      	lsrs	r3, r3, #16
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d10c      	bne.n	8003b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	43da      	mvns	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	bf14      	ite	ne
 8003b44:	2301      	movne	r3, #1
 8003b46:	2300      	moveq	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	e00b      	b.n	8003b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	43da      	mvns	r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4013      	ands	r3, r2
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	bf14      	ite	ne
 8003b5e:	2301      	movne	r3, #1
 8003b60:	2300      	moveq	r3, #0
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f47f af6d 	bne.w	8003a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b80:	e034      	b.n	8003bec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 f8e3 	bl	8003d4e <I2C_IsAcknowledgeFailed>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e034      	b.n	8003bfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b98:	d028      	beq.n	8003bec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9a:	f7fe fcfb 	bl	8002594 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d302      	bcc.n	8003bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d11d      	bne.n	8003bec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bba:	2b80      	cmp	r3, #128	@ 0x80
 8003bbc:	d016      	beq.n	8003bec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd8:	f043 0220 	orr.w	r2, r3, #32
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e007      	b.n	8003bfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bf6:	2b80      	cmp	r3, #128	@ 0x80
 8003bf8:	d1c3      	bne.n	8003b82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c10:	e034      	b.n	8003c7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f89b 	bl	8003d4e <I2C_IsAcknowledgeFailed>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e034      	b.n	8003c8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c28:	d028      	beq.n	8003c7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2a:	f7fe fcb3 	bl	8002594 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d302      	bcc.n	8003c40 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d11d      	bne.n	8003c7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d016      	beq.n	8003c7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c68:	f043 0220 	orr.w	r2, r3, #32
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e007      	b.n	8003c8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d1c3      	bne.n	8003c12 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ca0:	e049      	b.n	8003d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	f003 0310 	and.w	r3, r3, #16
 8003cac:	2b10      	cmp	r3, #16
 8003cae:	d119      	bne.n	8003ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0210 	mvn.w	r2, #16
 8003cb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e030      	b.n	8003d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce4:	f7fe fc56 	bl	8002594 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d302      	bcc.n	8003cfa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d11d      	bne.n	8003d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d04:	2b40      	cmp	r3, #64	@ 0x40
 8003d06:	d016      	beq.n	8003d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d22:	f043 0220 	orr.w	r2, r3, #32
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e007      	b.n	8003d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d40:	2b40      	cmp	r3, #64	@ 0x40
 8003d42:	d1ae      	bne.n	8003ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d64:	d11b      	bne.n	8003d9e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d6e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8a:	f043 0204 	orr.w	r2, r3, #4
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d129      	bne.n	8003e16 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2224      	movs	r2, #36	@ 0x24
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0201 	bic.w	r2, r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0210 	bic.w	r2, r2, #16
 8003de8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0201 	orr.w	r2, r2, #1
 8003e08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	e000      	b.n	8003e18 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003e16:	2302      	movs	r3, #2
  }
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b20      	cmp	r3, #32
 8003e3c:	d12a      	bne.n	8003e94 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2224      	movs	r2, #36	@ 0x24
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0201 	bic.w	r2, r2, #1
 8003e54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003e5e:	89fb      	ldrh	r3, [r7, #14]
 8003e60:	f023 030f 	bic.w	r3, r3, #15
 8003e64:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	89fb      	ldrh	r3, [r7, #14]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	89fa      	ldrh	r2, [r7, #14]
 8003e76:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	e000      	b.n	8003e96 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003e94:	2302      	movs	r3, #2
  }
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e0bf      	b.n	8004036 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fd fd6e 	bl	80019ac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699a      	ldr	r2, [r3, #24]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003ee6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6999      	ldr	r1, [r3, #24]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003efc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6899      	ldr	r1, [r3, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	4b4a      	ldr	r3, [pc, #296]	@ (8004040 <HAL_LTDC_Init+0x19c>)
 8003f18:	400b      	ands	r3, r1
 8003f1a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	041b      	lsls	r3, r3, #16
 8003f22:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6899      	ldr	r1, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68d9      	ldr	r1, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b3e      	ldr	r3, [pc, #248]	@ (8004040 <HAL_LTDC_Init+0x19c>)
 8003f46:	400b      	ands	r3, r1
 8003f48:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	041b      	lsls	r3, r3, #16
 8003f50:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68d9      	ldr	r1, [r3, #12]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1a      	ldr	r2, [r3, #32]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6919      	ldr	r1, [r3, #16]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	4b33      	ldr	r3, [pc, #204]	@ (8004040 <HAL_LTDC_Init+0x19c>)
 8003f74:	400b      	ands	r3, r1
 8003f76:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7c:	041b      	lsls	r3, r3, #16
 8003f7e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6919      	ldr	r1, [r3, #16]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6959      	ldr	r1, [r3, #20]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	4b27      	ldr	r3, [pc, #156]	@ (8004040 <HAL_LTDC_Init+0x19c>)
 8003fa2:	400b      	ands	r3, r1
 8003fa4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003faa:	041b      	lsls	r3, r3, #16
 8003fac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6959      	ldr	r1, [r3, #20]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fca:	021b      	lsls	r3, r3, #8
 8003fcc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003fd4:	041b      	lsls	r3, r3, #16
 8003fd6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0206 	orr.w	r2, r2, #6
 8004012:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699a      	ldr	r2, [r3, #24]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	f000f800 	.word	0xf000f800

08004044 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004044:	b5b0      	push	{r4, r5, r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_LTDC_ConfigLayer+0x1a>
 800405a:	2302      	movs	r3, #2
 800405c:	e02c      	b.n	80040b8 <HAL_LTDC_ConfigLayer+0x74>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2202      	movs	r2, #2
 800406a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2134      	movs	r1, #52	@ 0x34
 8004074:	fb01 f303 	mul.w	r3, r1, r3
 8004078:	4413      	add	r3, r2
 800407a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	4614      	mov	r4, r2
 8004082:	461d      	mov	r5, r3
 8004084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800408a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800408c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800408e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004090:	682b      	ldr	r3, [r5, #0]
 8004092:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	68b9      	ldr	r1, [r7, #8]
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 f811 	bl	80040c0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2201      	movs	r2, #1
 80040a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bdb0      	pop	{r4, r5, r7, pc}

080040c0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b089      	sub	sp, #36	@ 0x24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	0c1b      	lsrs	r3, r3, #16
 80040d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040dc:	4413      	add	r3, r2
 80040de:	041b      	lsls	r3, r3, #16
 80040e0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	01db      	lsls	r3, r3, #7
 80040ec:	4413      	add	r3, r2
 80040ee:	3384      	adds	r3, #132	@ 0x84
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	4611      	mov	r1, r2
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	01d2      	lsls	r2, r2, #7
 80040fc:	440a      	add	r2, r1
 80040fe:	3284      	adds	r2, #132	@ 0x84
 8004100:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004104:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	0c1b      	lsrs	r3, r3, #16
 8004112:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004116:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004118:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4619      	mov	r1, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	01db      	lsls	r3, r3, #7
 8004124:	440b      	add	r3, r1
 8004126:	3384      	adds	r3, #132	@ 0x84
 8004128:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800412e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800413e:	4413      	add	r3, r2
 8004140:	041b      	lsls	r3, r3, #16
 8004142:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	01db      	lsls	r3, r3, #7
 800414e:	4413      	add	r3, r2
 8004150:	3384      	adds	r3, #132	@ 0x84
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	6812      	ldr	r2, [r2, #0]
 8004158:	4611      	mov	r1, r2
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	01d2      	lsls	r2, r2, #7
 800415e:	440a      	add	r2, r1
 8004160:	3284      	adds	r2, #132	@ 0x84
 8004162:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004166:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004176:	4413      	add	r3, r2
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4619      	mov	r1, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	01db      	lsls	r3, r3, #7
 8004184:	440b      	add	r3, r1
 8004186:	3384      	adds	r3, #132	@ 0x84
 8004188:	4619      	mov	r1, r3
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	4313      	orrs	r3, r2
 800418e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	461a      	mov	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	01db      	lsls	r3, r3, #7
 800419a:	4413      	add	r3, r2
 800419c:	3384      	adds	r3, #132	@ 0x84
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	4611      	mov	r1, r2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	01d2      	lsls	r2, r2, #7
 80041aa:	440a      	add	r2, r1
 80041ac:	3284      	adds	r2, #132	@ 0x84
 80041ae:	f023 0307 	bic.w	r3, r3, #7
 80041b2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	01db      	lsls	r3, r3, #7
 80041be:	4413      	add	r3, r2
 80041c0:	3384      	adds	r3, #132	@ 0x84
 80041c2:	461a      	mov	r2, r3
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80041da:	041b      	lsls	r3, r3, #16
 80041dc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	061b      	lsls	r3, r3, #24
 80041e4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	01db      	lsls	r3, r3, #7
 80041f0:	4413      	add	r3, r2
 80041f2:	3384      	adds	r3, #132	@ 0x84
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	01db      	lsls	r3, r3, #7
 8004200:	4413      	add	r3, r2
 8004202:	3384      	adds	r3, #132	@ 0x84
 8004204:	461a      	mov	r2, r3
 8004206:	2300      	movs	r3, #0
 8004208:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004210:	461a      	mov	r2, r3
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	431a      	orrs	r2, r3
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	431a      	orrs	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4619      	mov	r1, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	01db      	lsls	r3, r3, #7
 8004224:	440b      	add	r3, r1
 8004226:	3384      	adds	r3, #132	@ 0x84
 8004228:	4619      	mov	r1, r3
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	4313      	orrs	r3, r2
 800422e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	01db      	lsls	r3, r3, #7
 800423a:	4413      	add	r3, r2
 800423c:	3384      	adds	r3, #132	@ 0x84
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	4611      	mov	r1, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	01d2      	lsls	r2, r2, #7
 800424a:	440a      	add	r2, r1
 800424c:	3284      	adds	r2, #132	@ 0x84
 800424e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004252:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	01db      	lsls	r3, r3, #7
 800425e:	4413      	add	r3, r2
 8004260:	3384      	adds	r3, #132	@ 0x84
 8004262:	461a      	mov	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	01db      	lsls	r3, r3, #7
 8004274:	4413      	add	r3, r2
 8004276:	3384      	adds	r3, #132	@ 0x84
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	6812      	ldr	r2, [r2, #0]
 800427e:	4611      	mov	r1, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	01d2      	lsls	r2, r2, #7
 8004284:	440a      	add	r2, r1
 8004286:	3284      	adds	r2, #132	@ 0x84
 8004288:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800428c:	f023 0307 	bic.w	r3, r3, #7
 8004290:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	69da      	ldr	r2, [r3, #28]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	68f9      	ldr	r1, [r7, #12]
 800429c:	6809      	ldr	r1, [r1, #0]
 800429e:	4608      	mov	r0, r1
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	01c9      	lsls	r1, r1, #7
 80042a4:	4401      	add	r1, r0
 80042a6:	3184      	adds	r1, #132	@ 0x84
 80042a8:	4313      	orrs	r3, r2
 80042aa:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	01db      	lsls	r3, r3, #7
 80042b6:	4413      	add	r3, r2
 80042b8:	3384      	adds	r3, #132	@ 0x84
 80042ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	461a      	mov	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	01db      	lsls	r3, r3, #7
 80042c6:	4413      	add	r3, r2
 80042c8:	3384      	adds	r3, #132	@ 0x84
 80042ca:	461a      	mov	r2, r3
 80042cc:	2300      	movs	r3, #0
 80042ce:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	461a      	mov	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	01db      	lsls	r3, r3, #7
 80042da:	4413      	add	r3, r2
 80042dc:	3384      	adds	r3, #132	@ 0x84
 80042de:	461a      	mov	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d102      	bne.n	80042f4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80042ee:	2304      	movs	r3, #4
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	e01b      	b.n	800432c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d102      	bne.n	8004302 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80042fc:	2303      	movs	r3, #3
 80042fe:	61fb      	str	r3, [r7, #28]
 8004300:	e014      	b.n	800432c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b04      	cmp	r3, #4
 8004308:	d00b      	beq.n	8004322 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800430e:	2b02      	cmp	r3, #2
 8004310:	d007      	beq.n	8004322 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004316:	2b03      	cmp	r3, #3
 8004318:	d003      	beq.n	8004322 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800431e:	2b07      	cmp	r3, #7
 8004320:	d102      	bne.n	8004328 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004322:	2302      	movs	r3, #2
 8004324:	61fb      	str	r3, [r7, #28]
 8004326:	e001      	b.n	800432c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004328:	2301      	movs	r3, #1
 800432a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	01db      	lsls	r3, r3, #7
 8004336:	4413      	add	r3, r2
 8004338:	3384      	adds	r3, #132	@ 0x84
 800433a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	4611      	mov	r1, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	01d2      	lsls	r2, r2, #7
 8004346:	440a      	add	r2, r1
 8004348:	3284      	adds	r2, #132	@ 0x84
 800434a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800434e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004354:	69fa      	ldr	r2, [r7, #28]
 8004356:	fb02 f303 	mul.w	r3, r2, r3
 800435a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	6859      	ldr	r1, [r3, #4]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	1acb      	subs	r3, r1, r3
 8004366:	69f9      	ldr	r1, [r7, #28]
 8004368:	fb01 f303 	mul.w	r3, r1, r3
 800436c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800436e:	68f9      	ldr	r1, [r7, #12]
 8004370:	6809      	ldr	r1, [r1, #0]
 8004372:	4608      	mov	r0, r1
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	01c9      	lsls	r1, r1, #7
 8004378:	4401      	add	r1, r0
 800437a:	3184      	adds	r1, #132	@ 0x84
 800437c:	4313      	orrs	r3, r2
 800437e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	01db      	lsls	r3, r3, #7
 800438a:	4413      	add	r3, r2
 800438c:	3384      	adds	r3, #132	@ 0x84
 800438e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	4611      	mov	r1, r2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	01d2      	lsls	r2, r2, #7
 800439a:	440a      	add	r2, r1
 800439c:	3284      	adds	r2, #132	@ 0x84
 800439e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80043a2:	f023 0307 	bic.w	r3, r3, #7
 80043a6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	01db      	lsls	r3, r3, #7
 80043b2:	4413      	add	r3, r2
 80043b4:	3384      	adds	r3, #132	@ 0x84
 80043b6:	461a      	mov	r2, r3
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043bc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	01db      	lsls	r3, r3, #7
 80043c8:	4413      	add	r3, r2
 80043ca:	3384      	adds	r3, #132	@ 0x84
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	6812      	ldr	r2, [r2, #0]
 80043d2:	4611      	mov	r1, r2
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	01d2      	lsls	r2, r2, #7
 80043d8:	440a      	add	r2, r1
 80043da:	3284      	adds	r2, #132	@ 0x84
 80043dc:	f043 0301 	orr.w	r3, r3, #1
 80043e0:	6013      	str	r3, [r2, #0]
}
 80043e2:	bf00      	nop
 80043e4:	3724      	adds	r7, #36	@ 0x24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
	...

080043f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e267      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d075      	beq.n	80044fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800440e:	4b88      	ldr	r3, [pc, #544]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 030c 	and.w	r3, r3, #12
 8004416:	2b04      	cmp	r3, #4
 8004418:	d00c      	beq.n	8004434 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800441a:	4b85      	ldr	r3, [pc, #532]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004422:	2b08      	cmp	r3, #8
 8004424:	d112      	bne.n	800444c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004426:	4b82      	ldr	r3, [pc, #520]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800442e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004432:	d10b      	bne.n	800444c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004434:	4b7e      	ldr	r3, [pc, #504]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d05b      	beq.n	80044f8 <HAL_RCC_OscConfig+0x108>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d157      	bne.n	80044f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e242      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004454:	d106      	bne.n	8004464 <HAL_RCC_OscConfig+0x74>
 8004456:	4b76      	ldr	r3, [pc, #472]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a75      	ldr	r2, [pc, #468]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 800445c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	e01d      	b.n	80044a0 <HAL_RCC_OscConfig+0xb0>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800446c:	d10c      	bne.n	8004488 <HAL_RCC_OscConfig+0x98>
 800446e:	4b70      	ldr	r3, [pc, #448]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a6f      	ldr	r2, [pc, #444]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004474:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	4b6d      	ldr	r3, [pc, #436]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a6c      	ldr	r2, [pc, #432]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	e00b      	b.n	80044a0 <HAL_RCC_OscConfig+0xb0>
 8004488:	4b69      	ldr	r3, [pc, #420]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a68      	ldr	r2, [pc, #416]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 800448e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	4b66      	ldr	r3, [pc, #408]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a65      	ldr	r2, [pc, #404]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 800449a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800449e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d013      	beq.n	80044d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a8:	f7fe f874 	bl	8002594 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044b0:	f7fe f870 	bl	8002594 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b64      	cmp	r3, #100	@ 0x64
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e207      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCC_OscConfig+0xc0>
 80044ce:	e014      	b.n	80044fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d0:	f7fe f860 	bl	8002594 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d8:	f7fe f85c 	bl	8002594 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b64      	cmp	r3, #100	@ 0x64
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e1f3      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ea:	4b51      	ldr	r3, [pc, #324]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0xe8>
 80044f6:	e000      	b.n	80044fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d063      	beq.n	80045ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004506:	4b4a      	ldr	r3, [pc, #296]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 030c 	and.w	r3, r3, #12
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00b      	beq.n	800452a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004512:	4b47      	ldr	r3, [pc, #284]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800451a:	2b08      	cmp	r3, #8
 800451c:	d11c      	bne.n	8004558 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800451e:	4b44      	ldr	r3, [pc, #272]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d116      	bne.n	8004558 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800452a:	4b41      	ldr	r3, [pc, #260]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <HAL_RCC_OscConfig+0x152>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d001      	beq.n	8004542 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e1c7      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004542:	4b3b      	ldr	r3, [pc, #236]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	4937      	ldr	r1, [pc, #220]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004552:	4313      	orrs	r3, r2
 8004554:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004556:	e03a      	b.n	80045ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d020      	beq.n	80045a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004560:	4b34      	ldr	r3, [pc, #208]	@ (8004634 <HAL_RCC_OscConfig+0x244>)
 8004562:	2201      	movs	r2, #1
 8004564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004566:	f7fe f815 	bl	8002594 <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456c:	e008      	b.n	8004580 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800456e:	f7fe f811 	bl	8002594 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e1a8      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004580:	4b2b      	ldr	r3, [pc, #172]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0f0      	beq.n	800456e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800458c:	4b28      	ldr	r3, [pc, #160]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	4925      	ldr	r1, [pc, #148]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 800459c:	4313      	orrs	r3, r2
 800459e:	600b      	str	r3, [r1, #0]
 80045a0:	e015      	b.n	80045ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045a2:	4b24      	ldr	r3, [pc, #144]	@ (8004634 <HAL_RCC_OscConfig+0x244>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7fd fff4 	bl	8002594 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b0:	f7fd fff0 	bl	8002594 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e187      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d036      	beq.n	8004648 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d016      	beq.n	8004610 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045e2:	4b15      	ldr	r3, [pc, #84]	@ (8004638 <HAL_RCC_OscConfig+0x248>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7fd ffd4 	bl	8002594 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045f0:	f7fd ffd0 	bl	8002594 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e167      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004602:	4b0b      	ldr	r3, [pc, #44]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0f0      	beq.n	80045f0 <HAL_RCC_OscConfig+0x200>
 800460e:	e01b      	b.n	8004648 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004610:	4b09      	ldr	r3, [pc, #36]	@ (8004638 <HAL_RCC_OscConfig+0x248>)
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004616:	f7fd ffbd 	bl	8002594 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800461c:	e00e      	b.n	800463c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800461e:	f7fd ffb9 	bl	8002594 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d907      	bls.n	800463c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e150      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
 8004630:	40023800 	.word	0x40023800
 8004634:	42470000 	.word	0x42470000
 8004638:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800463c:	4b88      	ldr	r3, [pc, #544]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 800463e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1ea      	bne.n	800461e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 8097 	beq.w	8004784 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004656:	2300      	movs	r3, #0
 8004658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800465a:	4b81      	ldr	r3, [pc, #516]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10f      	bne.n	8004686 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004666:	2300      	movs	r3, #0
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	4b7d      	ldr	r3, [pc, #500]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	4a7c      	ldr	r2, [pc, #496]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 8004670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004674:	6413      	str	r3, [r2, #64]	@ 0x40
 8004676:	4b7a      	ldr	r3, [pc, #488]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800467e:	60bb      	str	r3, [r7, #8]
 8004680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004682:	2301      	movs	r3, #1
 8004684:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004686:	4b77      	ldr	r3, [pc, #476]	@ (8004864 <HAL_RCC_OscConfig+0x474>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800468e:	2b00      	cmp	r3, #0
 8004690:	d118      	bne.n	80046c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004692:	4b74      	ldr	r3, [pc, #464]	@ (8004864 <HAL_RCC_OscConfig+0x474>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a73      	ldr	r2, [pc, #460]	@ (8004864 <HAL_RCC_OscConfig+0x474>)
 8004698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800469c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800469e:	f7fd ff79 	bl	8002594 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a6:	f7fd ff75 	bl	8002594 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e10c      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b8:	4b6a      	ldr	r3, [pc, #424]	@ (8004864 <HAL_RCC_OscConfig+0x474>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d106      	bne.n	80046da <HAL_RCC_OscConfig+0x2ea>
 80046cc:	4b64      	ldr	r3, [pc, #400]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 80046ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d0:	4a63      	ldr	r2, [pc, #396]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80046d8:	e01c      	b.n	8004714 <HAL_RCC_OscConfig+0x324>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2b05      	cmp	r3, #5
 80046e0:	d10c      	bne.n	80046fc <HAL_RCC_OscConfig+0x30c>
 80046e2:	4b5f      	ldr	r3, [pc, #380]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e6:	4a5e      	ldr	r2, [pc, #376]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 80046e8:	f043 0304 	orr.w	r3, r3, #4
 80046ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80046ee:	4b5c      	ldr	r3, [pc, #368]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 80046f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f2:	4a5b      	ldr	r2, [pc, #364]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 80046f4:	f043 0301 	orr.w	r3, r3, #1
 80046f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80046fa:	e00b      	b.n	8004714 <HAL_RCC_OscConfig+0x324>
 80046fc:	4b58      	ldr	r3, [pc, #352]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 80046fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004700:	4a57      	ldr	r2, [pc, #348]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 8004702:	f023 0301 	bic.w	r3, r3, #1
 8004706:	6713      	str	r3, [r2, #112]	@ 0x70
 8004708:	4b55      	ldr	r3, [pc, #340]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 800470a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470c:	4a54      	ldr	r2, [pc, #336]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 800470e:	f023 0304 	bic.w	r3, r3, #4
 8004712:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d015      	beq.n	8004748 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471c:	f7fd ff3a 	bl	8002594 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004722:	e00a      	b.n	800473a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004724:	f7fd ff36 	bl	8002594 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004732:	4293      	cmp	r3, r2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e0cb      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800473a:	4b49      	ldr	r3, [pc, #292]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 800473c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0ee      	beq.n	8004724 <HAL_RCC_OscConfig+0x334>
 8004746:	e014      	b.n	8004772 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004748:	f7fd ff24 	bl	8002594 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800474e:	e00a      	b.n	8004766 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004750:	f7fd ff20 	bl	8002594 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800475e:	4293      	cmp	r3, r2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e0b5      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004766:	4b3e      	ldr	r3, [pc, #248]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 8004768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1ee      	bne.n	8004750 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004772:	7dfb      	ldrb	r3, [r7, #23]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d105      	bne.n	8004784 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004778:	4b39      	ldr	r3, [pc, #228]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 800477a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477c:	4a38      	ldr	r2, [pc, #224]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 800477e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004782:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 80a1 	beq.w	80048d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800478e:	4b34      	ldr	r3, [pc, #208]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 030c 	and.w	r3, r3, #12
 8004796:	2b08      	cmp	r3, #8
 8004798:	d05c      	beq.n	8004854 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d141      	bne.n	8004826 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a2:	4b31      	ldr	r3, [pc, #196]	@ (8004868 <HAL_RCC_OscConfig+0x478>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a8:	f7fd fef4 	bl	8002594 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b0:	f7fd fef0 	bl	8002594 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e087      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c2:	4b27      	ldr	r3, [pc, #156]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f0      	bne.n	80047b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69da      	ldr	r2, [r3, #28]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047dc:	019b      	lsls	r3, r3, #6
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e4:	085b      	lsrs	r3, r3, #1
 80047e6:	3b01      	subs	r3, #1
 80047e8:	041b      	lsls	r3, r3, #16
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f0:	061b      	lsls	r3, r3, #24
 80047f2:	491b      	ldr	r1, [pc, #108]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004868 <HAL_RCC_OscConfig+0x478>)
 80047fa:	2201      	movs	r2, #1
 80047fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047fe:	f7fd fec9 	bl	8002594 <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004804:	e008      	b.n	8004818 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004806:	f7fd fec5 	bl	8002594 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e05c      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004818:	4b11      	ldr	r3, [pc, #68]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0f0      	beq.n	8004806 <HAL_RCC_OscConfig+0x416>
 8004824:	e054      	b.n	80048d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004826:	4b10      	ldr	r3, [pc, #64]	@ (8004868 <HAL_RCC_OscConfig+0x478>)
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800482c:	f7fd feb2 	bl	8002594 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004834:	f7fd feae 	bl	8002594 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e045      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004846:	4b06      	ldr	r3, [pc, #24]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f0      	bne.n	8004834 <HAL_RCC_OscConfig+0x444>
 8004852:	e03d      	b.n	80048d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d107      	bne.n	800486c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e038      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
 8004860:	40023800 	.word	0x40023800
 8004864:	40007000 	.word	0x40007000
 8004868:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800486c:	4b1b      	ldr	r3, [pc, #108]	@ (80048dc <HAL_RCC_OscConfig+0x4ec>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d028      	beq.n	80048cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004884:	429a      	cmp	r2, r3
 8004886:	d121      	bne.n	80048cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004892:	429a      	cmp	r2, r3
 8004894:	d11a      	bne.n	80048cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800489c:	4013      	ands	r3, r2
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d111      	bne.n	80048cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b2:	085b      	lsrs	r3, r3, #1
 80048b4:	3b01      	subs	r3, #1
 80048b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d107      	bne.n	80048cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d001      	beq.n	80048d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e000      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40023800 	.word	0x40023800

080048e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e0cc      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048f4:	4b68      	ldr	r3, [pc, #416]	@ (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 030f 	and.w	r3, r3, #15
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d90c      	bls.n	800491c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004902:	4b65      	ldr	r3, [pc, #404]	@ (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800490a:	4b63      	ldr	r3, [pc, #396]	@ (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d001      	beq.n	800491c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0b8      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d020      	beq.n	800496a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004934:	4b59      	ldr	r3, [pc, #356]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	4a58      	ldr	r2, [pc, #352]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800493e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b00      	cmp	r3, #0
 800494a:	d005      	beq.n	8004958 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800494c:	4b53      	ldr	r3, [pc, #332]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	4a52      	ldr	r2, [pc, #328]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004956:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004958:	4b50      	ldr	r3, [pc, #320]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	494d      	ldr	r1, [pc, #308]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	4313      	orrs	r3, r2
 8004968:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d044      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d107      	bne.n	800498e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497e:	4b47      	ldr	r3, [pc, #284]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d119      	bne.n	80049be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e07f      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d003      	beq.n	800499e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800499a:	2b03      	cmp	r3, #3
 800499c:	d107      	bne.n	80049ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800499e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d109      	bne.n	80049be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e06f      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ae:	4b3b      	ldr	r3, [pc, #236]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e067      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049be:	4b37      	ldr	r3, [pc, #220]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f023 0203 	bic.w	r2, r3, #3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	4934      	ldr	r1, [pc, #208]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049d0:	f7fd fde0 	bl	8002594 <HAL_GetTick>
 80049d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d6:	e00a      	b.n	80049ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d8:	f7fd fddc 	bl	8002594 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e04f      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ee:	4b2b      	ldr	r3, [pc, #172]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 020c 	and.w	r2, r3, #12
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d1eb      	bne.n	80049d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a00:	4b25      	ldr	r3, [pc, #148]	@ (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 030f 	and.w	r3, r3, #15
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d20c      	bcs.n	8004a28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0e:	4b22      	ldr	r3, [pc, #136]	@ (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a16:	4b20      	ldr	r3, [pc, #128]	@ (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d001      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e032      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a34:	4b19      	ldr	r3, [pc, #100]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	4916      	ldr	r1, [pc, #88]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d009      	beq.n	8004a66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a52:	4b12      	ldr	r3, [pc, #72]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	490e      	ldr	r1, [pc, #56]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a66:	f000 f821 	bl	8004aac <HAL_RCC_GetSysClockFreq>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	091b      	lsrs	r3, r3, #4
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	490a      	ldr	r1, [pc, #40]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a78:	5ccb      	ldrb	r3, [r1, r3]
 8004a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7e:	4a09      	ldr	r2, [pc, #36]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a82:	4b09      	ldr	r3, [pc, #36]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fd fd40 	bl	800250c <HAL_InitTick>

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40023c00 	.word	0x40023c00
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	08006e7c 	.word	0x08006e7c
 8004aa4:	20000010 	.word	0x20000010
 8004aa8:	20000014 	.word	0x20000014

08004aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ab0:	b094      	sub	sp, #80	@ 0x50
 8004ab2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ac4:	4b79      	ldr	r3, [pc, #484]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x200>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 030c 	and.w	r3, r3, #12
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d00d      	beq.n	8004aec <HAL_RCC_GetSysClockFreq+0x40>
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	f200 80e1 	bhi.w	8004c98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x34>
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d003      	beq.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004ade:	e0db      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ae0:	4b73      	ldr	r3, [pc, #460]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ae4:	e0db      	b.n	8004c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ae6:	4b73      	ldr	r3, [pc, #460]	@ (8004cb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004aea:	e0d8      	b.n	8004c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aec:	4b6f      	ldr	r3, [pc, #444]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x200>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004af4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004af6:	4b6d      	ldr	r3, [pc, #436]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x200>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d063      	beq.n	8004bca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b02:	4b6a      	ldr	r3, [pc, #424]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x200>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	099b      	lsrs	r3, r3, #6
 8004b08:	2200      	movs	r2, #0
 8004b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b14:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b16:	2300      	movs	r3, #0
 8004b18:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b1e:	4622      	mov	r2, r4
 8004b20:	462b      	mov	r3, r5
 8004b22:	f04f 0000 	mov.w	r0, #0
 8004b26:	f04f 0100 	mov.w	r1, #0
 8004b2a:	0159      	lsls	r1, r3, #5
 8004b2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b30:	0150      	lsls	r0, r2, #5
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	4621      	mov	r1, r4
 8004b38:	1a51      	subs	r1, r2, r1
 8004b3a:	6139      	str	r1, [r7, #16]
 8004b3c:	4629      	mov	r1, r5
 8004b3e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b50:	4659      	mov	r1, fp
 8004b52:	018b      	lsls	r3, r1, #6
 8004b54:	4651      	mov	r1, sl
 8004b56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b5a:	4651      	mov	r1, sl
 8004b5c:	018a      	lsls	r2, r1, #6
 8004b5e:	4651      	mov	r1, sl
 8004b60:	ebb2 0801 	subs.w	r8, r2, r1
 8004b64:	4659      	mov	r1, fp
 8004b66:	eb63 0901 	sbc.w	r9, r3, r1
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b7e:	4690      	mov	r8, r2
 8004b80:	4699      	mov	r9, r3
 8004b82:	4623      	mov	r3, r4
 8004b84:	eb18 0303 	adds.w	r3, r8, r3
 8004b88:	60bb      	str	r3, [r7, #8]
 8004b8a:	462b      	mov	r3, r5
 8004b8c:	eb49 0303 	adc.w	r3, r9, r3
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	024b      	lsls	r3, r1, #9
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ba8:	4621      	mov	r1, r4
 8004baa:	024a      	lsls	r2, r1, #9
 8004bac:	4610      	mov	r0, r2
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bbc:	f7fb fb16 	bl	80001ec <__aeabi_uldivmod>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bc8:	e058      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bca:	4b38      	ldr	r3, [pc, #224]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x200>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	099b      	lsrs	r3, r3, #6
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bda:	623b      	str	r3, [r7, #32]
 8004bdc:	2300      	movs	r3, #0
 8004bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8004be0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004be4:	4642      	mov	r2, r8
 8004be6:	464b      	mov	r3, r9
 8004be8:	f04f 0000 	mov.w	r0, #0
 8004bec:	f04f 0100 	mov.w	r1, #0
 8004bf0:	0159      	lsls	r1, r3, #5
 8004bf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bf6:	0150      	lsls	r0, r2, #5
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4641      	mov	r1, r8
 8004bfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c02:	4649      	mov	r1, r9
 8004c04:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	f04f 0300 	mov.w	r3, #0
 8004c10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c1c:	ebb2 040a 	subs.w	r4, r2, sl
 8004c20:	eb63 050b 	sbc.w	r5, r3, fp
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	00eb      	lsls	r3, r5, #3
 8004c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c32:	00e2      	lsls	r2, r4, #3
 8004c34:	4614      	mov	r4, r2
 8004c36:	461d      	mov	r5, r3
 8004c38:	4643      	mov	r3, r8
 8004c3a:	18e3      	adds	r3, r4, r3
 8004c3c:	603b      	str	r3, [r7, #0]
 8004c3e:	464b      	mov	r3, r9
 8004c40:	eb45 0303 	adc.w	r3, r5, r3
 8004c44:	607b      	str	r3, [r7, #4]
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c52:	4629      	mov	r1, r5
 8004c54:	028b      	lsls	r3, r1, #10
 8004c56:	4621      	mov	r1, r4
 8004c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	028a      	lsls	r2, r1, #10
 8004c60:	4610      	mov	r0, r2
 8004c62:	4619      	mov	r1, r3
 8004c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c66:	2200      	movs	r2, #0
 8004c68:	61bb      	str	r3, [r7, #24]
 8004c6a:	61fa      	str	r2, [r7, #28]
 8004c6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c70:	f7fb fabc 	bl	80001ec <__aeabi_uldivmod>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4613      	mov	r3, r2
 8004c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x200>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	0c1b      	lsrs	r3, r3, #16
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	3301      	adds	r3, #1
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004c8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c96:	e002      	b.n	8004c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c98:	4b05      	ldr	r3, [pc, #20]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3750      	adds	r7, #80	@ 0x50
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004caa:	bf00      	nop
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	00f42400 	.word	0x00f42400
 8004cb4:	007a1200 	.word	0x007a1200

08004cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cbc:	4b03      	ldr	r3, [pc, #12]	@ (8004ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	20000010 	.word	0x20000010

08004cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cd4:	f7ff fff0 	bl	8004cb8 <HAL_RCC_GetHCLKFreq>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	4b05      	ldr	r3, [pc, #20]	@ (8004cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	0a9b      	lsrs	r3, r3, #10
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	4903      	ldr	r1, [pc, #12]	@ (8004cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ce6:	5ccb      	ldrb	r3, [r1, r3]
 8004ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	08006e8c 	.word	0x08006e8c

08004cf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10b      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d105      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d075      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d2c:	4b91      	ldr	r3, [pc, #580]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d32:	f7fd fc2f 	bl	8002594 <HAL_GetTick>
 8004d36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d38:	e008      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d3a:	f7fd fc2b 	bl	8002594 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e189      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d4c:	4b8a      	ldr	r3, [pc, #552]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1f0      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d009      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	019a      	lsls	r2, r3, #6
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	071b      	lsls	r3, r3, #28
 8004d70:	4981      	ldr	r1, [pc, #516]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d01f      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d84:	4b7c      	ldr	r3, [pc, #496]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d8a:	0f1b      	lsrs	r3, r3, #28
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	019a      	lsls	r2, r3, #6
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	061b      	lsls	r3, r3, #24
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	071b      	lsls	r3, r3, #28
 8004da4:	4974      	ldr	r1, [pc, #464]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004dac:	4b72      	ldr	r3, [pc, #456]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004db2:	f023 021f 	bic.w	r2, r3, #31
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	496e      	ldr	r1, [pc, #440]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00d      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	019a      	lsls	r2, r3, #6
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	061b      	lsls	r3, r3, #24
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	071b      	lsls	r3, r3, #28
 8004de4:	4964      	ldr	r1, [pc, #400]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004dec:	4b61      	ldr	r3, [pc, #388]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004dee:	2201      	movs	r2, #1
 8004df0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004df2:	f7fd fbcf 	bl	8002594 <HAL_GetTick>
 8004df6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004df8:	e008      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004dfa:	f7fd fbcb 	bl	8002594 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e129      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e0c:	4b5a      	ldr	r3, [pc, #360]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0f0      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d105      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d079      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e30:	4b52      	ldr	r3, [pc, #328]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e36:	f7fd fbad 	bl	8002594 <HAL_GetTick>
 8004e3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e3c:	e008      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e3e:	f7fd fba9 	bl	8002594 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e107      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e50:	4b49      	ldr	r3, [pc, #292]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e5c:	d0ef      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0304 	and.w	r3, r3, #4
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d020      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e6a:	4b43      	ldr	r3, [pc, #268]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e70:	0f1b      	lsrs	r3, r3, #28
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	019a      	lsls	r2, r3, #6
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	061b      	lsls	r3, r3, #24
 8004e84:	431a      	orrs	r2, r3
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	071b      	lsls	r3, r3, #28
 8004e8a:	493b      	ldr	r1, [pc, #236]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e92:	4b39      	ldr	r3, [pc, #228]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e98:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	021b      	lsls	r3, r3, #8
 8004ea4:	4934      	ldr	r1, [pc, #208]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01e      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004eb8:	4b2f      	ldr	r3, [pc, #188]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ebe:	0e1b      	lsrs	r3, r3, #24
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	019a      	lsls	r2, r3, #6
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	061b      	lsls	r3, r3, #24
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	071b      	lsls	r3, r3, #28
 8004ed8:	4927      	ldr	r1, [pc, #156]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ee0:	4b25      	ldr	r3, [pc, #148]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ee6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eee:	4922      	ldr	r1, [pc, #136]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ef6:	4b21      	ldr	r3, [pc, #132]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ef8:	2201      	movs	r2, #1
 8004efa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004efc:	f7fd fb4a 	bl	8002594 <HAL_GetTick>
 8004f00:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f02:	e008      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f04:	f7fd fb46 	bl	8002594 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e0a4      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f16:	4b18      	ldr	r3, [pc, #96]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f22:	d1ef      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0320 	and.w	r3, r3, #32
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 808b 	beq.w	8005048 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f32:	2300      	movs	r3, #0
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	4b10      	ldr	r3, [pc, #64]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3a:	4a0f      	ldr	r2, [pc, #60]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f42:	4b0d      	ldr	r3, [pc, #52]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a0b      	ldr	r2, [pc, #44]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f5a:	f7fd fb1b 	bl	8002594 <HAL_GetTick>
 8004f5e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004f60:	e010      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f62:	f7fd fb17 	bl	8002594 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d909      	bls.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e075      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004f74:	42470068 	.word	0x42470068
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	42470070 	.word	0x42470070
 8004f80:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004f84:	4b38      	ldr	r3, [pc, #224]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0e8      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f90:	4b36      	ldr	r3, [pc, #216]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f98:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d02f      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d028      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fae:	4b2f      	ldr	r3, [pc, #188]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fb6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fb8:	4b2d      	ldr	r3, [pc, #180]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004fba:	2201      	movs	r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fbe:	4b2c      	ldr	r3, [pc, #176]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004fc4:	4a29      	ldr	r2, [pc, #164]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fca:	4b28      	ldr	r3, [pc, #160]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d114      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004fd6:	f7fd fadd 	bl	8002594 <HAL_GetTick>
 8004fda:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fdc:	e00a      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fde:	f7fd fad9 	bl	8002594 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e035      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0ee      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005004:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005008:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800500c:	d10d      	bne.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800500e:	4b17      	ldr	r3, [pc, #92]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800501e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005022:	4912      	ldr	r1, [pc, #72]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005024:	4313      	orrs	r3, r2
 8005026:	608b      	str	r3, [r1, #8]
 8005028:	e005      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800502a:	4b10      	ldr	r3, [pc, #64]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	4a0f      	ldr	r2, [pc, #60]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005030:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005034:	6093      	str	r3, [r2, #8]
 8005036:	4b0d      	ldr	r3, [pc, #52]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005038:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005042:	490a      	ldr	r1, [pc, #40]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005044:	4313      	orrs	r3, r2
 8005046:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0310 	and.w	r3, r3, #16
 8005050:	2b00      	cmp	r3, #0
 8005052:	d004      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800505a:	4b06      	ldr	r3, [pc, #24]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800505c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	40007000 	.word	0x40007000
 800506c:	40023800 	.word	0x40023800
 8005070:	42470e40 	.word	0x42470e40
 8005074:	424711e0 	.word	0x424711e0

08005078 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e01c      	b.n	80050c4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	795b      	ldrb	r3, [r3, #5]
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d105      	bne.n	80050a0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fc fdae 	bl	8001bfc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f042 0204 	orr.w	r2, r2, #4
 80050b4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e07b      	b.n	80051d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d108      	bne.n	80050f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050ee:	d009      	beq.n	8005104 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	61da      	str	r2, [r3, #28]
 80050f6:	e005      	b.n	8005104 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fc fd8e 	bl	8001c40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800513a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	431a      	orrs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005188:	ea42 0103 	orr.w	r1, r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005190:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	0c1b      	lsrs	r3, r3, #16
 80051a2:	f003 0104 	and.w	r1, r3, #4
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051aa:	f003 0210 	and.w	r2, r3, #16
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e01a      	b.n	8005226 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005206:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7fc fd61 	bl	8001cd0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b088      	sub	sp, #32
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	603b      	str	r3, [r7, #0]
 800523a:	4613      	mov	r3, r2
 800523c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800523e:	f7fd f9a9 	bl	8002594 <HAL_GetTick>
 8005242:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005244:	88fb      	ldrh	r3, [r7, #6]
 8005246:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	d001      	beq.n	8005258 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005254:	2302      	movs	r3, #2
 8005256:	e12a      	b.n	80054ae <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <HAL_SPI_Transmit+0x36>
 800525e:	88fb      	ldrh	r3, [r7, #6]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e122      	b.n	80054ae <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800526e:	2b01      	cmp	r3, #1
 8005270:	d101      	bne.n	8005276 <HAL_SPI_Transmit+0x48>
 8005272:	2302      	movs	r3, #2
 8005274:	e11b      	b.n	80054ae <HAL_SPI_Transmit+0x280>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2203      	movs	r2, #3
 8005282:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	88fa      	ldrh	r2, [r7, #6]
 8005296:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	88fa      	ldrh	r2, [r7, #6]
 800529c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052c4:	d10f      	bne.n	80052e6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f0:	2b40      	cmp	r3, #64	@ 0x40
 80052f2:	d007      	beq.n	8005304 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005302:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800530c:	d152      	bne.n	80053b4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <HAL_SPI_Transmit+0xee>
 8005316:	8b7b      	ldrh	r3, [r7, #26]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d145      	bne.n	80053a8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005320:	881a      	ldrh	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532c:	1c9a      	adds	r2, r3, #2
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005340:	e032      	b.n	80053a8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b02      	cmp	r3, #2
 800534e:	d112      	bne.n	8005376 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005354:	881a      	ldrh	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005360:	1c9a      	adds	r2, r3, #2
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005374:	e018      	b.n	80053a8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005376:	f7fd f90d 	bl	8002594 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d803      	bhi.n	800538e <HAL_SPI_Transmit+0x160>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800538c:	d102      	bne.n	8005394 <HAL_SPI_Transmit+0x166>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d109      	bne.n	80053a8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e082      	b.n	80054ae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1c7      	bne.n	8005342 <HAL_SPI_Transmit+0x114>
 80053b2:	e053      	b.n	800545c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <HAL_SPI_Transmit+0x194>
 80053bc:	8b7b      	ldrh	r3, [r7, #26]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d147      	bne.n	8005452 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	330c      	adds	r3, #12
 80053cc:	7812      	ldrb	r2, [r2, #0]
 80053ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053e8:	e033      	b.n	8005452 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d113      	bne.n	8005420 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	330c      	adds	r3, #12
 8005402:	7812      	ldrb	r2, [r2, #0]
 8005404:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005414:	b29b      	uxth	r3, r3
 8005416:	3b01      	subs	r3, #1
 8005418:	b29a      	uxth	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800541e:	e018      	b.n	8005452 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005420:	f7fd f8b8 	bl	8002594 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d803      	bhi.n	8005438 <HAL_SPI_Transmit+0x20a>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005436:	d102      	bne.n	800543e <HAL_SPI_Transmit+0x210>
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d109      	bne.n	8005452 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e02d      	b.n	80054ae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005456:	b29b      	uxth	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1c6      	bne.n	80053ea <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800545c:	69fa      	ldr	r2, [r7, #28]
 800545e:	6839      	ldr	r1, [r7, #0]
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 f8bf 	bl	80055e4 <SPI_EndRxTxTransaction>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10a      	bne.n	8005490 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800547a:	2300      	movs	r3, #0
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	617b      	str	r3, [r7, #20]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e000      	b.n	80054ae <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80054ac:	2300      	movs	r3, #0
  }
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3720      	adds	r7, #32
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054c4:	b2db      	uxtb	r3, r3
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
	...

080054d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	603b      	str	r3, [r7, #0]
 80054e0:	4613      	mov	r3, r2
 80054e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054e4:	f7fd f856 	bl	8002594 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ec:	1a9b      	subs	r3, r3, r2
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	4413      	add	r3, r2
 80054f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054f4:	f7fd f84e 	bl	8002594 <HAL_GetTick>
 80054f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054fa:	4b39      	ldr	r3, [pc, #228]	@ (80055e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	015b      	lsls	r3, r3, #5
 8005500:	0d1b      	lsrs	r3, r3, #20
 8005502:	69fa      	ldr	r2, [r7, #28]
 8005504:	fb02 f303 	mul.w	r3, r2, r3
 8005508:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800550a:	e054      	b.n	80055b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005512:	d050      	beq.n	80055b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005514:	f7fd f83e 	bl	8002594 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	69fa      	ldr	r2, [r7, #28]
 8005520:	429a      	cmp	r2, r3
 8005522:	d902      	bls.n	800552a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d13d      	bne.n	80055a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005538:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005542:	d111      	bne.n	8005568 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800554c:	d004      	beq.n	8005558 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005556:	d107      	bne.n	8005568 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005566:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005570:	d10f      	bne.n	8005592 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005590:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e017      	b.n	80055d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4013      	ands	r3, r2
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	bf0c      	ite	eq
 80055c6:	2301      	moveq	r3, #1
 80055c8:	2300      	movne	r3, #0
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	461a      	mov	r2, r3
 80055ce:	79fb      	ldrb	r3, [r7, #7]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d19b      	bne.n	800550c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3720      	adds	r7, #32
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000010 	.word	0x20000010

080055e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2201      	movs	r2, #1
 80055f8:	2102      	movs	r1, #2
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f7ff ff6a 	bl	80054d4 <SPI_WaitFlagStateUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d007      	beq.n	8005616 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560a:	f043 0220 	orr.w	r2, r3, #32
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e032      	b.n	800567c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005616:	4b1b      	ldr	r3, [pc, #108]	@ (8005684 <SPI_EndRxTxTransaction+0xa0>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a1b      	ldr	r2, [pc, #108]	@ (8005688 <SPI_EndRxTxTransaction+0xa4>)
 800561c:	fba2 2303 	umull	r2, r3, r2, r3
 8005620:	0d5b      	lsrs	r3, r3, #21
 8005622:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005626:	fb02 f303 	mul.w	r3, r2, r3
 800562a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005634:	d112      	bne.n	800565c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2200      	movs	r2, #0
 800563e:	2180      	movs	r1, #128	@ 0x80
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f7ff ff47 	bl	80054d4 <SPI_WaitFlagStateUntilTimeout>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d016      	beq.n	800567a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005650:	f043 0220 	orr.w	r2, r3, #32
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e00f      	b.n	800567c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	3b01      	subs	r3, #1
 8005666:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005672:	2b80      	cmp	r3, #128	@ 0x80
 8005674:	d0f2      	beq.n	800565c <SPI_EndRxTxTransaction+0x78>
 8005676:	e000      	b.n	800567a <SPI_EndRxTxTransaction+0x96>
        break;
 8005678:	bf00      	nop
  }

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	20000010 	.word	0x20000010
 8005688:	165e9f81 	.word	0x165e9f81

0800568c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e041      	b.n	8005722 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fc fb2a 	bl	8001d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3304      	adds	r3, #4
 80056c8:	4619      	mov	r1, r3
 80056ca:	4610      	mov	r0, r2
 80056cc:	f000 f8f4 	bl	80058b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <HAL_TIM_ConfigClockSource+0x1c>
 8005742:	2302      	movs	r3, #2
 8005744:	e0b4      	b.n	80058b0 <HAL_TIM_ConfigClockSource+0x186>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2202      	movs	r2, #2
 8005752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005764:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800576c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800577e:	d03e      	beq.n	80057fe <HAL_TIM_ConfigClockSource+0xd4>
 8005780:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005784:	f200 8087 	bhi.w	8005896 <HAL_TIM_ConfigClockSource+0x16c>
 8005788:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800578c:	f000 8086 	beq.w	800589c <HAL_TIM_ConfigClockSource+0x172>
 8005790:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005794:	d87f      	bhi.n	8005896 <HAL_TIM_ConfigClockSource+0x16c>
 8005796:	2b70      	cmp	r3, #112	@ 0x70
 8005798:	d01a      	beq.n	80057d0 <HAL_TIM_ConfigClockSource+0xa6>
 800579a:	2b70      	cmp	r3, #112	@ 0x70
 800579c:	d87b      	bhi.n	8005896 <HAL_TIM_ConfigClockSource+0x16c>
 800579e:	2b60      	cmp	r3, #96	@ 0x60
 80057a0:	d050      	beq.n	8005844 <HAL_TIM_ConfigClockSource+0x11a>
 80057a2:	2b60      	cmp	r3, #96	@ 0x60
 80057a4:	d877      	bhi.n	8005896 <HAL_TIM_ConfigClockSource+0x16c>
 80057a6:	2b50      	cmp	r3, #80	@ 0x50
 80057a8:	d03c      	beq.n	8005824 <HAL_TIM_ConfigClockSource+0xfa>
 80057aa:	2b50      	cmp	r3, #80	@ 0x50
 80057ac:	d873      	bhi.n	8005896 <HAL_TIM_ConfigClockSource+0x16c>
 80057ae:	2b40      	cmp	r3, #64	@ 0x40
 80057b0:	d058      	beq.n	8005864 <HAL_TIM_ConfigClockSource+0x13a>
 80057b2:	2b40      	cmp	r3, #64	@ 0x40
 80057b4:	d86f      	bhi.n	8005896 <HAL_TIM_ConfigClockSource+0x16c>
 80057b6:	2b30      	cmp	r3, #48	@ 0x30
 80057b8:	d064      	beq.n	8005884 <HAL_TIM_ConfigClockSource+0x15a>
 80057ba:	2b30      	cmp	r3, #48	@ 0x30
 80057bc:	d86b      	bhi.n	8005896 <HAL_TIM_ConfigClockSource+0x16c>
 80057be:	2b20      	cmp	r3, #32
 80057c0:	d060      	beq.n	8005884 <HAL_TIM_ConfigClockSource+0x15a>
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d867      	bhi.n	8005896 <HAL_TIM_ConfigClockSource+0x16c>
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d05c      	beq.n	8005884 <HAL_TIM_ConfigClockSource+0x15a>
 80057ca:	2b10      	cmp	r3, #16
 80057cc:	d05a      	beq.n	8005884 <HAL_TIM_ConfigClockSource+0x15a>
 80057ce:	e062      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057e0:	f000 f990 	bl	8005b04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80057f2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	609a      	str	r2, [r3, #8]
      break;
 80057fc:	e04f      	b.n	800589e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800580e:	f000 f979 	bl	8005b04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005820:	609a      	str	r2, [r3, #8]
      break;
 8005822:	e03c      	b.n	800589e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005830:	461a      	mov	r2, r3
 8005832:	f000 f8ed 	bl	8005a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2150      	movs	r1, #80	@ 0x50
 800583c:	4618      	mov	r0, r3
 800583e:	f000 f946 	bl	8005ace <TIM_ITRx_SetConfig>
      break;
 8005842:	e02c      	b.n	800589e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005850:	461a      	mov	r2, r3
 8005852:	f000 f90c 	bl	8005a6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2160      	movs	r1, #96	@ 0x60
 800585c:	4618      	mov	r0, r3
 800585e:	f000 f936 	bl	8005ace <TIM_ITRx_SetConfig>
      break;
 8005862:	e01c      	b.n	800589e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005870:	461a      	mov	r2, r3
 8005872:	f000 f8cd 	bl	8005a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2140      	movs	r1, #64	@ 0x40
 800587c:	4618      	mov	r0, r3
 800587e:	f000 f926 	bl	8005ace <TIM_ITRx_SetConfig>
      break;
 8005882:	e00c      	b.n	800589e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4619      	mov	r1, r3
 800588e:	4610      	mov	r0, r2
 8005890:	f000 f91d 	bl	8005ace <TIM_ITRx_SetConfig>
      break;
 8005894:	e003      	b.n	800589e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	73fb      	strb	r3, [r7, #15]
      break;
 800589a:	e000      	b.n	800589e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800589c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a46      	ldr	r2, [pc, #280]	@ (80059e4 <TIM_Base_SetConfig+0x12c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d013      	beq.n	80058f8 <TIM_Base_SetConfig+0x40>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058d6:	d00f      	beq.n	80058f8 <TIM_Base_SetConfig+0x40>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a43      	ldr	r2, [pc, #268]	@ (80059e8 <TIM_Base_SetConfig+0x130>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d00b      	beq.n	80058f8 <TIM_Base_SetConfig+0x40>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a42      	ldr	r2, [pc, #264]	@ (80059ec <TIM_Base_SetConfig+0x134>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d007      	beq.n	80058f8 <TIM_Base_SetConfig+0x40>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a41      	ldr	r2, [pc, #260]	@ (80059f0 <TIM_Base_SetConfig+0x138>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_Base_SetConfig+0x40>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a40      	ldr	r2, [pc, #256]	@ (80059f4 <TIM_Base_SetConfig+0x13c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d108      	bne.n	800590a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4313      	orrs	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a35      	ldr	r2, [pc, #212]	@ (80059e4 <TIM_Base_SetConfig+0x12c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d02b      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005918:	d027      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a32      	ldr	r2, [pc, #200]	@ (80059e8 <TIM_Base_SetConfig+0x130>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d023      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a31      	ldr	r2, [pc, #196]	@ (80059ec <TIM_Base_SetConfig+0x134>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d01f      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a30      	ldr	r2, [pc, #192]	@ (80059f0 <TIM_Base_SetConfig+0x138>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d01b      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a2f      	ldr	r2, [pc, #188]	@ (80059f4 <TIM_Base_SetConfig+0x13c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d017      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a2e      	ldr	r2, [pc, #184]	@ (80059f8 <TIM_Base_SetConfig+0x140>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d013      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a2d      	ldr	r2, [pc, #180]	@ (80059fc <TIM_Base_SetConfig+0x144>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00f      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a2c      	ldr	r2, [pc, #176]	@ (8005a00 <TIM_Base_SetConfig+0x148>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00b      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a2b      	ldr	r2, [pc, #172]	@ (8005a04 <TIM_Base_SetConfig+0x14c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d007      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a2a      	ldr	r2, [pc, #168]	@ (8005a08 <TIM_Base_SetConfig+0x150>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d003      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a29      	ldr	r2, [pc, #164]	@ (8005a0c <TIM_Base_SetConfig+0x154>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d108      	bne.n	800597c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a10      	ldr	r2, [pc, #64]	@ (80059e4 <TIM_Base_SetConfig+0x12c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d003      	beq.n	80059b0 <TIM_Base_SetConfig+0xf8>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a12      	ldr	r2, [pc, #72]	@ (80059f4 <TIM_Base_SetConfig+0x13c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d103      	bne.n	80059b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	691a      	ldr	r2, [r3, #16]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d105      	bne.n	80059d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f023 0201 	bic.w	r2, r3, #1
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	611a      	str	r2, [r3, #16]
  }
}
 80059d6:	bf00      	nop
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40010000 	.word	0x40010000
 80059e8:	40000400 	.word	0x40000400
 80059ec:	40000800 	.word	0x40000800
 80059f0:	40000c00 	.word	0x40000c00
 80059f4:	40010400 	.word	0x40010400
 80059f8:	40014000 	.word	0x40014000
 80059fc:	40014400 	.word	0x40014400
 8005a00:	40014800 	.word	0x40014800
 8005a04:	40001800 	.word	0x40001800
 8005a08:	40001c00 	.word	0x40001c00
 8005a0c:	40002000 	.word	0x40002000

08005a10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	f023 0201 	bic.w	r2, r3, #1
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f023 030a 	bic.w	r3, r3, #10
 8005a4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	621a      	str	r2, [r3, #32]
}
 8005a62:	bf00      	nop
 8005a64:	371c      	adds	r7, #28
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b087      	sub	sp, #28
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	f023 0210 	bic.w	r2, r3, #16
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	031b      	lsls	r3, r3, #12
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005aaa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	011b      	lsls	r3, r3, #4
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	621a      	str	r2, [r3, #32]
}
 8005ac2:	bf00      	nop
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b085      	sub	sp, #20
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ae4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	f043 0307 	orr.w	r3, r3, #7
 8005af0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	609a      	str	r2, [r3, #8]
}
 8005af8:	bf00      	nop
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
 8005b10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	021a      	lsls	r2, r3, #8
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	431a      	orrs	r2, r3
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	609a      	str	r2, [r3, #8]
}
 8005b38:	bf00      	nop
 8005b3a:	371c      	adds	r7, #28
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d101      	bne.n	8005b5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	e05a      	b.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a21      	ldr	r2, [pc, #132]	@ (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d022      	beq.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ba8:	d01d      	beq.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a1d      	ldr	r2, [pc, #116]	@ (8005c24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d018      	beq.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d013      	beq.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a1a      	ldr	r2, [pc, #104]	@ (8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d00e      	beq.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a18      	ldr	r2, [pc, #96]	@ (8005c30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d009      	beq.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a17      	ldr	r2, [pc, #92]	@ (8005c34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d004      	beq.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a15      	ldr	r2, [pc, #84]	@ (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d10c      	bne.n	8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	40010000 	.word	0x40010000
 8005c24:	40000400 	.word	0x40000400
 8005c28:	40000800 	.word	0x40000800
 8005c2c:	40000c00 	.word	0x40000c00
 8005c30:	40010400 	.word	0x40010400
 8005c34:	40014000 	.word	0x40014000
 8005c38:	40001800 	.word	0x40001800

08005c3c <memset>:
 8005c3c:	4402      	add	r2, r0
 8005c3e:	4603      	mov	r3, r0
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d100      	bne.n	8005c46 <memset+0xa>
 8005c44:	4770      	bx	lr
 8005c46:	f803 1b01 	strb.w	r1, [r3], #1
 8005c4a:	e7f9      	b.n	8005c40 <memset+0x4>

08005c4c <__libc_init_array>:
 8005c4c:	b570      	push	{r4, r5, r6, lr}
 8005c4e:	4d0d      	ldr	r5, [pc, #52]	@ (8005c84 <__libc_init_array+0x38>)
 8005c50:	4c0d      	ldr	r4, [pc, #52]	@ (8005c88 <__libc_init_array+0x3c>)
 8005c52:	1b64      	subs	r4, r4, r5
 8005c54:	10a4      	asrs	r4, r4, #2
 8005c56:	2600      	movs	r6, #0
 8005c58:	42a6      	cmp	r6, r4
 8005c5a:	d109      	bne.n	8005c70 <__libc_init_array+0x24>
 8005c5c:	4d0b      	ldr	r5, [pc, #44]	@ (8005c8c <__libc_init_array+0x40>)
 8005c5e:	4c0c      	ldr	r4, [pc, #48]	@ (8005c90 <__libc_init_array+0x44>)
 8005c60:	f000 f818 	bl	8005c94 <_init>
 8005c64:	1b64      	subs	r4, r4, r5
 8005c66:	10a4      	asrs	r4, r4, #2
 8005c68:	2600      	movs	r6, #0
 8005c6a:	42a6      	cmp	r6, r4
 8005c6c:	d105      	bne.n	8005c7a <__libc_init_array+0x2e>
 8005c6e:	bd70      	pop	{r4, r5, r6, pc}
 8005c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c74:	4798      	blx	r3
 8005c76:	3601      	adds	r6, #1
 8005c78:	e7ee      	b.n	8005c58 <__libc_init_array+0xc>
 8005c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c7e:	4798      	blx	r3
 8005c80:	3601      	adds	r6, #1
 8005c82:	e7f2      	b.n	8005c6a <__libc_init_array+0x1e>
 8005c84:	08006e9c 	.word	0x08006e9c
 8005c88:	08006e9c 	.word	0x08006e9c
 8005c8c:	08006e9c 	.word	0x08006e9c
 8005c90:	08006ea0 	.word	0x08006ea0

08005c94 <_init>:
 8005c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c96:	bf00      	nop
 8005c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c9a:	bc08      	pop	{r3}
 8005c9c:	469e      	mov	lr, r3
 8005c9e:	4770      	bx	lr

08005ca0 <_fini>:
 8005ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca2:	bf00      	nop
 8005ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ca6:	bc08      	pop	{r3}
 8005ca8:	469e      	mov	lr, r3
 8005caa:	4770      	bx	lr
