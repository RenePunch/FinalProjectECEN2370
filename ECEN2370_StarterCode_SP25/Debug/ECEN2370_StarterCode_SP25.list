
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c18  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001204  08006dc4  08006dc4  00007dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fc8  08007fc8  00009080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007fc8  08007fc8  00008fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fd0  08007fd0  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fd0  08007fd0  00008fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007fd4  08007fd4  00008fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08007fd8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009080  2**0
                  CONTENTS
 10 .bss          00025d8c  20000080  20000080  00009080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025e0c  20025e0c  00009080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d6d  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ecf  00000000  00000000  0001be1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001328  00000000  00000000  0001ecf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ed3  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263d5  00000000  00000000  00020eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016def  00000000  00000000  000472c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0c05  00000000  00000000  0005e0af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013ecb4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058b0  00000000  00000000  0013ecf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a3  00000000  00000000  001445a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000080 	.word	0x20000080
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006dac 	.word	0x08006dac

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000084 	.word	0x20000084
 80001e8:	08006dac 	.word	0x08006dac

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b988 	b.w	8000524 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	468e      	mov	lr, r1
 8000234:	4604      	mov	r4, r0
 8000236:	4688      	mov	r8, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d962      	bls.n	8000308 <__udivmoddi4+0xdc>
 8000242:	fab2 f682 	clz	r6, r2
 8000246:	b14e      	cbz	r6, 800025c <__udivmoddi4+0x30>
 8000248:	f1c6 0320 	rsb	r3, r6, #32
 800024c:	fa01 f806 	lsl.w	r8, r1, r6
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	40b7      	lsls	r7, r6
 8000256:	ea43 0808 	orr.w	r8, r3, r8
 800025a:	40b4      	lsls	r4, r6
 800025c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000260:	fa1f fc87 	uxth.w	ip, r7
 8000264:	fbb8 f1fe 	udiv	r1, r8, lr
 8000268:	0c23      	lsrs	r3, r4, #16
 800026a:	fb0e 8811 	mls	r8, lr, r1, r8
 800026e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000272:	fb01 f20c 	mul.w	r2, r1, ip
 8000276:	429a      	cmp	r2, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x62>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000280:	f080 80ea 	bcs.w	8000458 <__udivmoddi4+0x22c>
 8000284:	429a      	cmp	r2, r3
 8000286:	f240 80e7 	bls.w	8000458 <__udivmoddi4+0x22c>
 800028a:	3902      	subs	r1, #2
 800028c:	443b      	add	r3, r7
 800028e:	1a9a      	subs	r2, r3, r2
 8000290:	b2a3      	uxth	r3, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800029e:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a2:	459c      	cmp	ip, r3
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0x8e>
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002ac:	f080 80d6 	bcs.w	800045c <__udivmoddi4+0x230>
 80002b0:	459c      	cmp	ip, r3
 80002b2:	f240 80d3 	bls.w	800045c <__udivmoddi4+0x230>
 80002b6:	443b      	add	r3, r7
 80002b8:	3802      	subs	r0, #2
 80002ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002be:	eba3 030c 	sub.w	r3, r3, ip
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40f3      	lsrs	r3, r6
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xb6>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb0>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa2>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x14c>
 80002ea:	4573      	cmp	r3, lr
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xc8>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 8105 	bhi.w	80004fe <__udivmoddi4+0x2d2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4690      	mov	r8, r2
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e5      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000302:	e9c5 4800 	strd	r4, r8, [r5]
 8000306:	e7e2      	b.n	80002ce <__udivmoddi4+0xa2>
 8000308:	2a00      	cmp	r2, #0
 800030a:	f000 8090 	beq.w	800042e <__udivmoddi4+0x202>
 800030e:	fab2 f682 	clz	r6, r2
 8000312:	2e00      	cmp	r6, #0
 8000314:	f040 80a4 	bne.w	8000460 <__udivmoddi4+0x234>
 8000318:	1a8a      	subs	r2, r1, r2
 800031a:	0c03      	lsrs	r3, r0, #16
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	b280      	uxth	r0, r0
 8000322:	b2bc      	uxth	r4, r7
 8000324:	2101      	movs	r1, #1
 8000326:	fbb2 fcfe 	udiv	ip, r2, lr
 800032a:	fb0e 221c 	mls	r2, lr, ip, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb04 f20c 	mul.w	r2, r4, ip
 8000336:	429a      	cmp	r2, r3
 8000338:	d907      	bls.n	800034a <__udivmoddi4+0x11e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x11c>
 8000342:	429a      	cmp	r2, r3
 8000344:	f200 80e0 	bhi.w	8000508 <__udivmoddi4+0x2dc>
 8000348:	46c4      	mov	ip, r8
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000350:	fb0e 3312 	mls	r3, lr, r2, r3
 8000354:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000358:	fb02 f404 	mul.w	r4, r2, r4
 800035c:	429c      	cmp	r4, r3
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x144>
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x142>
 8000368:	429c      	cmp	r4, r3
 800036a:	f200 80ca 	bhi.w	8000502 <__udivmoddi4+0x2d6>
 800036e:	4602      	mov	r2, r0
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x98>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa0e f401 	lsl.w	r4, lr, r1
 8000388:	fa20 f306 	lsr.w	r3, r0, r6
 800038c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000390:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	fa1f fc87 	uxth.w	ip, r7
 800039e:	fbbe f0f9 	udiv	r0, lr, r9
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80003a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1a0>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003be:	f080 809c 	bcs.w	80004fa <__udivmoddi4+0x2ce>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8099 	bls.w	80004fa <__udivmoddi4+0x2ce>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	fa1f fe83 	uxth.w	lr, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e4:	45a4      	cmp	ip, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1ce>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ee:	f080 8082 	bcs.w	80004f6 <__udivmoddi4+0x2ca>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d97f      	bls.n	80004f6 <__udivmoddi4+0x2ca>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	fba0 ec02 	umull	lr, ip, r0, r2
 8000406:	4564      	cmp	r4, ip
 8000408:	4673      	mov	r3, lr
 800040a:	46e1      	mov	r9, ip
 800040c:	d362      	bcc.n	80004d4 <__udivmoddi4+0x2a8>
 800040e:	d05f      	beq.n	80004d0 <__udivmoddi4+0x2a4>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x1fe>
 8000412:	ebb8 0203 	subs.w	r2, r8, r3
 8000416:	eb64 0409 	sbc.w	r4, r4, r9
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431e      	orrs	r6, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c5 6400 	strd	r6, r4, [r5]
 800042a:	2100      	movs	r1, #0
 800042c:	e74f      	b.n	80002ce <__udivmoddi4+0xa2>
 800042e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000432:	0c01      	lsrs	r1, r0, #16
 8000434:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000438:	b280      	uxth	r0, r0
 800043a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800043e:	463b      	mov	r3, r7
 8000440:	4638      	mov	r0, r7
 8000442:	463c      	mov	r4, r7
 8000444:	46b8      	mov	r8, r7
 8000446:	46be      	mov	lr, r7
 8000448:	2620      	movs	r6, #32
 800044a:	fbb1 f1f7 	udiv	r1, r1, r7
 800044e:	eba2 0208 	sub.w	r2, r2, r8
 8000452:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000456:	e766      	b.n	8000326 <__udivmoddi4+0xfa>
 8000458:	4601      	mov	r1, r0
 800045a:	e718      	b.n	800028e <__udivmoddi4+0x62>
 800045c:	4610      	mov	r0, r2
 800045e:	e72c      	b.n	80002ba <__udivmoddi4+0x8e>
 8000460:	f1c6 0220 	rsb	r2, r6, #32
 8000464:	fa2e f302 	lsr.w	r3, lr, r2
 8000468:	40b7      	lsls	r7, r6
 800046a:	40b1      	lsls	r1, r6
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	430a      	orrs	r2, r1
 8000476:	fbb3 f8fe 	udiv	r8, r3, lr
 800047a:	b2bc      	uxth	r4, r7
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	0c11      	lsrs	r1, r2, #16
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb08 f904 	mul.w	r9, r8, r4
 800048a:	40b0      	lsls	r0, r6
 800048c:	4589      	cmp	r9, r1
 800048e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000492:	b280      	uxth	r0, r0
 8000494:	d93e      	bls.n	8000514 <__udivmoddi4+0x2e8>
 8000496:	1879      	adds	r1, r7, r1
 8000498:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x276>
 800049e:	4589      	cmp	r9, r1
 80004a0:	d81f      	bhi.n	80004e2 <__udivmoddi4+0x2b6>
 80004a2:	eba1 0109 	sub.w	r1, r1, r9
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fb09 f804 	mul.w	r8, r9, r4
 80004ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b2:	b292      	uxth	r2, r2
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d229      	bcs.n	8000510 <__udivmoddi4+0x2e4>
 80004bc:	18ba      	adds	r2, r7, r2
 80004be:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004c2:	d2c4      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d2c2      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c8:	f1a9 0102 	sub.w	r1, r9, #2
 80004cc:	443a      	add	r2, r7
 80004ce:	e7be      	b.n	800044e <__udivmoddi4+0x222>
 80004d0:	45f0      	cmp	r8, lr
 80004d2:	d29d      	bcs.n	8000410 <__udivmoddi4+0x1e4>
 80004d4:	ebbe 0302 	subs.w	r3, lr, r2
 80004d8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004dc:	3801      	subs	r0, #1
 80004de:	46e1      	mov	r9, ip
 80004e0:	e796      	b.n	8000410 <__udivmoddi4+0x1e4>
 80004e2:	eba7 0909 	sub.w	r9, r7, r9
 80004e6:	4449      	add	r1, r9
 80004e8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004ec:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f0:	fb09 f804 	mul.w	r8, r9, r4
 80004f4:	e7db      	b.n	80004ae <__udivmoddi4+0x282>
 80004f6:	4673      	mov	r3, lr
 80004f8:	e77f      	b.n	80003fa <__udivmoddi4+0x1ce>
 80004fa:	4650      	mov	r0, sl
 80004fc:	e766      	b.n	80003cc <__udivmoddi4+0x1a0>
 80004fe:	4608      	mov	r0, r1
 8000500:	e6fd      	b.n	80002fe <__udivmoddi4+0xd2>
 8000502:	443b      	add	r3, r7
 8000504:	3a02      	subs	r2, #2
 8000506:	e733      	b.n	8000370 <__udivmoddi4+0x144>
 8000508:	f1ac 0c02 	sub.w	ip, ip, #2
 800050c:	443b      	add	r3, r7
 800050e:	e71c      	b.n	800034a <__udivmoddi4+0x11e>
 8000510:	4649      	mov	r1, r9
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x222>
 8000514:	eba1 0109 	sub.w	r1, r1, r9
 8000518:	46c4      	mov	ip, r8
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	e7c4      	b.n	80004ae <__udivmoddi4+0x282>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 800052c:	f006 f95a 	bl	80067e4 <initialise_monitor_handles>
    LTCD__Init();
 8000530:	f000 fcd4 	bl	8000edc <LTCD__Init>
    LTCD_Layer_Init(0);
 8000534:	2000      	movs	r0, #0
 8000536:	f000 fc91 	bl	8000e5c <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 800053a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800053e:	2000      	movs	r0, #0
 8000540:	f000 fd9c 	bl	800107c <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 8000544:	f000 fe72 	bl	800122c <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 8000548:	4b02      	ldr	r3, [pc, #8]	@ (8000554 <ApplicationInit+0x2c>)
 800054a:	2201      	movs	r2, #1
 800054c:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	2000009c 	.word	0x2000009c

08000558 <ApplicationFirstScreen>:
void ApplicationFirstScreen(){
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	firstScreen();
 800055c:	f000 f82e 	bl	80005bc <firstScreen>
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}

08000564 <LCD_Touch_Polling_Demo>:
// 	visualDemo();
// }

#if COMPILE_TOUCH_FUNCTIONS == 1
void LCD_Touch_Polling_Demo(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	while (1) {
		/* If touch pressed */
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000568:	4813      	ldr	r0, [pc, #76]	@ (80005b8 <LCD_Touch_Polling_Demo+0x54>)
 800056a:	f000 fe6a 	bl	8001242 <returnTouchStateAndLocation>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d1f9      	bne.n	8000568 <LCD_Touch_Polling_Demo+0x4>
			/* Touch valid */
			if(StaticTouchData.x <= 120){
 8000574:	4b10      	ldr	r3, [pc, #64]	@ (80005b8 <LCD_Touch_Polling_Demo+0x54>)
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	2b78      	cmp	r3, #120	@ 0x78
 800057a:	d80a      	bhi.n	8000592 <LCD_Touch_Polling_Demo+0x2e>

				PlayOnePlayer();
 800057c:	f000 fa7a 	bl	8000a74 <PlayOnePlayer>
				endScreen();
 8000580:	f000 f8a4 	bl	80006cc <endScreen>
				HAL_Delay(1000);
 8000584:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000588:	f002 fb7e 	bl	8002c88 <HAL_Delay>
				firstScreen();
 800058c:	f000 f816 	bl	80005bc <firstScreen>
 8000590:	e00d      	b.n	80005ae <LCD_Touch_Polling_Demo+0x4a>


			}
			else if(StaticTouchData.x >= 120){
 8000592:	4b09      	ldr	r3, [pc, #36]	@ (80005b8 <LCD_Touch_Polling_Demo+0x54>)
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	2b77      	cmp	r3, #119	@ 0x77
 8000598:	d909      	bls.n	80005ae <LCD_Touch_Polling_Demo+0x4a>
				PlayTwoPlayer();
 800059a:	f000 fb2d 	bl	8000bf8 <PlayTwoPlayer>
				endScreen();
 800059e:	f000 f895 	bl	80006cc <endScreen>
				HAL_Delay(1000);
 80005a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005a6:	f002 fb6f 	bl	8002c88 <HAL_Delay>
				firstScreen();
 80005aa:	f000 f807 	bl	80005bc <firstScreen>
			}
			HAL_Delay(1000);
 80005ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005b2:	f002 fb69 	bl	8002c88 <HAL_Delay>
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 80005b6:	e7d7      	b.n	8000568 <LCD_Touch_Polling_Demo+0x4>
 80005b8:	2000009c 	.word	0x2000009c

080005bc <firstScreen>:





void firstScreen(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	touchData.orientation = STMPE811_Orientation_Portrait_2;
 80005c0:	4b40      	ldr	r3, [pc, #256]	@ (80006c4 <firstScreen+0x108>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	719a      	strb	r2, [r3, #6]
    LCD_Clear(0,LCD_COLOR_BLUE);
 80005c6:	211f      	movs	r1, #31
 80005c8:	2000      	movs	r0, #0
 80005ca:	f000 fd57 	bl	800107c <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fd76 	bl	80010c0 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80005d4:	483c      	ldr	r0, [pc, #240]	@ (80006c8 <firstScreen+0x10c>)
 80005d6:	f000 fd83 	bl	80010e0 <LCD_SetFont>
	LCD_DisplayChar(60,140,'C');
 80005da:	2243      	movs	r2, #67	@ 0x43
 80005dc:	218c      	movs	r1, #140	@ 0x8c
 80005de:	203c      	movs	r0, #60	@ 0x3c
 80005e0:	f000 fdfc 	bl	80011dc <LCD_DisplayChar>
	LCD_DisplayChar(75,140,'o');
 80005e4:	226f      	movs	r2, #111	@ 0x6f
 80005e6:	218c      	movs	r1, #140	@ 0x8c
 80005e8:	204b      	movs	r0, #75	@ 0x4b
 80005ea:	f000 fdf7 	bl	80011dc <LCD_DisplayChar>
	LCD_DisplayChar(90,140,'n');
 80005ee:	226e      	movs	r2, #110	@ 0x6e
 80005f0:	218c      	movs	r1, #140	@ 0x8c
 80005f2:	205a      	movs	r0, #90	@ 0x5a
 80005f4:	f000 fdf2 	bl	80011dc <LCD_DisplayChar>
	LCD_DisplayChar(105,140,'n');
 80005f8:	226e      	movs	r2, #110	@ 0x6e
 80005fa:	218c      	movs	r1, #140	@ 0x8c
 80005fc:	2069      	movs	r0, #105	@ 0x69
 80005fe:	f000 fded 	bl	80011dc <LCD_DisplayChar>
	LCD_DisplayChar(120,140,'e');
 8000602:	2265      	movs	r2, #101	@ 0x65
 8000604:	218c      	movs	r1, #140	@ 0x8c
 8000606:	2078      	movs	r0, #120	@ 0x78
 8000608:	f000 fde8 	bl	80011dc <LCD_DisplayChar>
	LCD_DisplayChar(135,140,'c');
 800060c:	2263      	movs	r2, #99	@ 0x63
 800060e:	218c      	movs	r1, #140	@ 0x8c
 8000610:	2087      	movs	r0, #135	@ 0x87
 8000612:	f000 fde3 	bl	80011dc <LCD_DisplayChar>
	LCD_DisplayChar(150,140,'t');
 8000616:	2274      	movs	r2, #116	@ 0x74
 8000618:	218c      	movs	r1, #140	@ 0x8c
 800061a:	2096      	movs	r0, #150	@ 0x96
 800061c:	f000 fdde 	bl	80011dc <LCD_DisplayChar>
	LCD_DisplayChar(180,140,'4');
 8000620:	2234      	movs	r2, #52	@ 0x34
 8000622:	218c      	movs	r1, #140	@ 0x8c
 8000624:	20b4      	movs	r0, #180	@ 0xb4
 8000626:	f000 fdd9 	bl	80011dc <LCD_DisplayChar>

    LCD_DisplayChar(10,190,'1');
 800062a:	2231      	movs	r2, #49	@ 0x31
 800062c:	21be      	movs	r1, #190	@ 0xbe
 800062e:	200a      	movs	r0, #10
 8000630:	f000 fdd4 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(20,190,'P');
 8000634:	2250      	movs	r2, #80	@ 0x50
 8000636:	21be      	movs	r1, #190	@ 0xbe
 8000638:	2014      	movs	r0, #20
 800063a:	f000 fdcf 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(30,190,'L');
 800063e:	224c      	movs	r2, #76	@ 0x4c
 8000640:	21be      	movs	r1, #190	@ 0xbe
 8000642:	201e      	movs	r0, #30
 8000644:	f000 fdca 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(40,190,'A');
 8000648:	2241      	movs	r2, #65	@ 0x41
 800064a:	21be      	movs	r1, #190	@ 0xbe
 800064c:	2028      	movs	r0, #40	@ 0x28
 800064e:	f000 fdc5 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(55,190,'Y');
 8000652:	2259      	movs	r2, #89	@ 0x59
 8000654:	21be      	movs	r1, #190	@ 0xbe
 8000656:	2037      	movs	r0, #55	@ 0x37
 8000658:	f000 fdc0 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(70,190,'E');
 800065c:	2245      	movs	r2, #69	@ 0x45
 800065e:	21be      	movs	r1, #190	@ 0xbe
 8000660:	2046      	movs	r0, #70	@ 0x46
 8000662:	f000 fdbb 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(85,190,'R');
 8000666:	2252      	movs	r2, #82	@ 0x52
 8000668:	21be      	movs	r1, #190	@ 0xbe
 800066a:	2055      	movs	r0, #85	@ 0x55
 800066c:	f000 fdb6 	bl	80011dc <LCD_DisplayChar>
    

    LCD_DisplayChar(115,190,'2');
 8000670:	2232      	movs	r2, #50	@ 0x32
 8000672:	21be      	movs	r1, #190	@ 0xbe
 8000674:	2073      	movs	r0, #115	@ 0x73
 8000676:	f000 fdb1 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(135,190,'P');
 800067a:	2250      	movs	r2, #80	@ 0x50
 800067c:	21be      	movs	r1, #190	@ 0xbe
 800067e:	2087      	movs	r0, #135	@ 0x87
 8000680:	f000 fdac 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(145,190,'L');
 8000684:	224c      	movs	r2, #76	@ 0x4c
 8000686:	21be      	movs	r1, #190	@ 0xbe
 8000688:	2091      	movs	r0, #145	@ 0x91
 800068a:	f000 fda7 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(155,190,'A');
 800068e:	2241      	movs	r2, #65	@ 0x41
 8000690:	21be      	movs	r1, #190	@ 0xbe
 8000692:	209b      	movs	r0, #155	@ 0x9b
 8000694:	f000 fda2 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(170,190,'Y');
 8000698:	2259      	movs	r2, #89	@ 0x59
 800069a:	21be      	movs	r1, #190	@ 0xbe
 800069c:	20aa      	movs	r0, #170	@ 0xaa
 800069e:	f000 fd9d 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(185,190,'E');
 80006a2:	2245      	movs	r2, #69	@ 0x45
 80006a4:	21be      	movs	r1, #190	@ 0xbe
 80006a6:	20b9      	movs	r0, #185	@ 0xb9
 80006a8:	f000 fd98 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(200,190,'R');
 80006ac:	2252      	movs	r2, #82	@ 0x52
 80006ae:	21be      	movs	r1, #190	@ 0xbe
 80006b0:	20c8      	movs	r0, #200	@ 0xc8
 80006b2:	f000 fd93 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(215,190,'S');
 80006b6:	2253      	movs	r2, #83	@ 0x53
 80006b8:	21be      	movs	r1, #190	@ 0xbe
 80006ba:	20d7      	movs	r0, #215	@ 0xd7
 80006bc:	f000 fd8e 	bl	80011dc <LCD_DisplayChar>
    
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200000d0 	.word	0x200000d0
 80006c8:	20000004 	.word	0x20000004

080006cc <endScreen>:

void endScreen(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	touchData.orientation = STMPE811_Orientation_Portrait_2;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <endScreen+0x74>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	719a      	strb	r2, [r3, #6]
    LCD_Clear(0,LCD_COLOR_BLUE);
 80006d6:	211f      	movs	r1, #31
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 fccf 	bl	800107c <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 80006de:	2000      	movs	r0, #0
 80006e0:	f000 fcee 	bl	80010c0 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80006e4:	4817      	ldr	r0, [pc, #92]	@ (8000744 <endScreen+0x78>)
 80006e6:	f000 fcfb 	bl	80010e0 <LCD_SetFont>
	LCD_DisplayChar(60,140,'G');
 80006ea:	2247      	movs	r2, #71	@ 0x47
 80006ec:	218c      	movs	r1, #140	@ 0x8c
 80006ee:	203c      	movs	r0, #60	@ 0x3c
 80006f0:	f000 fd74 	bl	80011dc <LCD_DisplayChar>
	LCD_DisplayChar(75,140,'A');
 80006f4:	2241      	movs	r2, #65	@ 0x41
 80006f6:	218c      	movs	r1, #140	@ 0x8c
 80006f8:	204b      	movs	r0, #75	@ 0x4b
 80006fa:	f000 fd6f 	bl	80011dc <LCD_DisplayChar>
	LCD_DisplayChar(90,140,'M');
 80006fe:	224d      	movs	r2, #77	@ 0x4d
 8000700:	218c      	movs	r1, #140	@ 0x8c
 8000702:	205a      	movs	r0, #90	@ 0x5a
 8000704:	f000 fd6a 	bl	80011dc <LCD_DisplayChar>
	LCD_DisplayChar(105,140,'E');
 8000708:	2245      	movs	r2, #69	@ 0x45
 800070a:	218c      	movs	r1, #140	@ 0x8c
 800070c:	2069      	movs	r0, #105	@ 0x69
 800070e:	f000 fd65 	bl	80011dc <LCD_DisplayChar>
	LCD_DisplayChar(135,140,'O');
 8000712:	224f      	movs	r2, #79	@ 0x4f
 8000714:	218c      	movs	r1, #140	@ 0x8c
 8000716:	2087      	movs	r0, #135	@ 0x87
 8000718:	f000 fd60 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(150,140,'V');
 800071c:	2256      	movs	r2, #86	@ 0x56
 800071e:	218c      	movs	r1, #140	@ 0x8c
 8000720:	2096      	movs	r0, #150	@ 0x96
 8000722:	f000 fd5b 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(165,140,'E');
 8000726:	2245      	movs	r2, #69	@ 0x45
 8000728:	218c      	movs	r1, #140	@ 0x8c
 800072a:	20a5      	movs	r0, #165	@ 0xa5
 800072c:	f000 fd56 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(170,140,'R');
 8000730:	2252      	movs	r2, #82	@ 0x52
 8000732:	218c      	movs	r1, #140	@ 0x8c
 8000734:	20aa      	movs	r0, #170	@ 0xaa
 8000736:	f000 fd51 	bl	80011dc <LCD_DisplayChar>



}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200000d0 	.word	0x200000d0
 8000744:	20000004 	.word	0x20000004

08000748 <initBoard>:


void initBoard(void) {
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
    for (int r = 0; r < ROWS; r++) {
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	e015      	b.n	8000780 <initBoard+0x38>
        for (int c = 0; c < COLS; c++) {
 8000754:	2300      	movs	r3, #0
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	e00c      	b.n	8000774 <initBoard+0x2c>
            board[r][c] = ' ';
 800075a:	490e      	ldr	r1, [pc, #56]	@ (8000794 <initBoard+0x4c>)
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	4613      	mov	r3, r2
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	1a9b      	subs	r3, r3, r2
 8000764:	18ca      	adds	r2, r1, r3
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	4413      	add	r3, r2
 800076a:	2220      	movs	r2, #32
 800076c:	701a      	strb	r2, [r3, #0]
        for (int c = 0; c < COLS; c++) {
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	3301      	adds	r3, #1
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	2b06      	cmp	r3, #6
 8000778:	ddef      	ble.n	800075a <initBoard+0x12>
    for (int r = 0; r < ROWS; r++) {
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3301      	adds	r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b05      	cmp	r3, #5
 8000784:	dde6      	ble.n	8000754 <initBoard+0xc>
        }
    }
}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	200000a4 	.word	0x200000a4

08000798 <GameScreen_Init>:


void GameScreen_Init(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0

    LCD_Clear(0, BOARD_BG_COLOR);
 800079e:	211f      	movs	r1, #31
 80007a0:	2000      	movs	r0, #0
 80007a2:	f000 fc6b 	bl	800107c <LCD_Clear>
    for (int r = 0; r < ROWS; r++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	e021      	b.n	80007f0 <GameScreen_Init+0x58>
        for (int c = 0; c < COLS; c++) {
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	e018      	b.n	80007e4 <GameScreen_Init+0x4c>
            uint16_t x = ORIGIN_X + c * CELL_SPACING_X;
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	015b      	lsls	r3, r3, #5
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	3314      	adds	r3, #20
 80007bc:	80fb      	strh	r3, [r7, #6]
            uint16_t y = ORIGIN_Y + r * CELL_SPACING_Y;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	461a      	mov	r2, r3
 80007c4:	0092      	lsls	r2, r2, #2
 80007c6:	4413      	add	r3, r2
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	333c      	adds	r3, #60	@ 0x3c
 80007ce:	80bb      	strh	r3, [r7, #4]
            LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, EMPTY_HOLE_COLOR);
 80007d0:	88b9      	ldrh	r1, [r7, #4]
 80007d2:	88f8      	ldrh	r0, [r7, #6]
 80007d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007d8:	220d      	movs	r2, #13
 80007da:	f000 fbfb 	bl	8000fd4 <LCD_Draw_Circle_Fill>
        for (int c = 0; c < COLS; c++) {
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	3301      	adds	r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	2b06      	cmp	r3, #6
 80007e8:	dde3      	ble.n	80007b2 <GameScreen_Init+0x1a>
    for (int r = 0; r < ROWS; r++) {
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	3301      	adds	r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	2b05      	cmp	r3, #5
 80007f4:	ddda      	ble.n	80007ac <GameScreen_Init+0x14>
        }
    }
}
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <PollTouchColumn>:
        }
    }
}


static int PollTouchColumn(char currentPlayer) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
    while (1) {
        if (returnTouchStateAndLocation(&touchData) == STMPE811_State_Pressed) {
 800080a:	4834      	ldr	r0, [pc, #208]	@ (80008dc <PollTouchColumn+0xdc>)
 800080c:	f000 fd19 	bl	8001242 <returnTouchStateAndLocation>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d159      	bne.n	80008ca <PollTouchColumn+0xca>
            //DetermineTouchPosition(&touchData);
            int tx = touchData.x;
 8000816:	4b31      	ldr	r3, [pc, #196]	@ (80008dc <PollTouchColumn+0xdc>)
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	617b      	str	r3, [r7, #20]


            if (tx >= ORIGIN_X - CELL_SPACING_X/2 &&
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	2b03      	cmp	r3, #3
 8000820:	d953      	bls.n	80008ca <PollTouchColumn+0xca>
                tx <= ORIGIN_X + (COLS-1)*CELL_SPACING_X + CELL_SPACING_X/2) {
 8000822:	697b      	ldr	r3, [r7, #20]
            if (tx >= ORIGIN_X - CELL_SPACING_X/2 &&
 8000824:	2be4      	cmp	r3, #228	@ 0xe4
 8000826:	d850      	bhi.n	80008ca <PollTouchColumn+0xca>

                int col = (tx - (ORIGIN_X - CELL_SPACING_X/2)) / CELL_SPACING_X;
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	3b04      	subs	r3, #4
 800082c:	095b      	lsrs	r3, r3, #5
 800082e:	613b      	str	r3, [r7, #16]
                if (col >= 0 && col < COLS) {
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	2b00      	cmp	r3, #0
 8000834:	db49      	blt.n	80008ca <PollTouchColumn+0xca>
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	2b06      	cmp	r3, #6
 800083a:	dc46      	bgt.n	80008ca <PollTouchColumn+0xca>

                    int rowIndex = -1;
 800083c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000840:	61fb      	str	r3, [r7, #28]
                    for (int r = ROWS - 1; r >= 0; r--) {
 8000842:	2305      	movs	r3, #5
 8000844:	61bb      	str	r3, [r7, #24]
 8000846:	e01a      	b.n	800087e <PollTouchColumn+0x7e>
                        if (board[r][col] == ' ') {
 8000848:	4925      	ldr	r1, [pc, #148]	@ (80008e0 <PollTouchColumn+0xe0>)
 800084a:	69ba      	ldr	r2, [r7, #24]
 800084c:	4613      	mov	r3, r2
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	1a9b      	subs	r3, r3, r2
 8000852:	18ca      	adds	r2, r1, r3
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	4413      	add	r3, r2
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b20      	cmp	r3, #32
 800085c:	d10c      	bne.n	8000878 <PollTouchColumn+0x78>
                            rowIndex = r;
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	61fb      	str	r3, [r7, #28]
                            board[r][col] = currentPlayer;
 8000862:	491f      	ldr	r1, [pc, #124]	@ (80008e0 <PollTouchColumn+0xe0>)
 8000864:	69ba      	ldr	r2, [r7, #24]
 8000866:	4613      	mov	r3, r2
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	1a9b      	subs	r3, r3, r2
 800086c:	18ca      	adds	r2, r1, r3
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	4413      	add	r3, r2
 8000872:	79fa      	ldrb	r2, [r7, #7]
 8000874:	701a      	strb	r2, [r3, #0]
                            break;
 8000876:	e005      	b.n	8000884 <PollTouchColumn+0x84>
                    for (int r = ROWS - 1; r >= 0; r--) {
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	3b01      	subs	r3, #1
 800087c:	61bb      	str	r3, [r7, #24]
 800087e:	69bb      	ldr	r3, [r7, #24]
 8000880:	2b00      	cmp	r3, #0
 8000882:	dae1      	bge.n	8000848 <PollTouchColumn+0x48>
                        }
                    }
                    if (rowIndex != -1) {
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800088a:	d01e      	beq.n	80008ca <PollTouchColumn+0xca>

                        uint16_t color = (currentPlayer == 'X')
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	2b58      	cmp	r3, #88	@ 0x58
 8000890:	d102      	bne.n	8000898 <PollTouchColumn+0x98>
 8000892:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000896:	e000      	b.n	800089a <PollTouchColumn+0x9a>
 8000898:	2300      	movs	r3, #0
 800089a:	81fb      	strh	r3, [r7, #14]
                            ? LCD_COLOR_RED
                            : LCD_COLOR_BLACK;

                        uint16_t x = ORIGIN_X + col * CELL_SPACING_X;
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	b29b      	uxth	r3, r3
 80008a0:	015b      	lsls	r3, r3, #5
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	3314      	adds	r3, #20
 80008a6:	81bb      	strh	r3, [r7, #12]
                        uint16_t y = ORIGIN_Y + rowIndex * CELL_SPACING_Y;
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	461a      	mov	r2, r3
 80008ae:	0092      	lsls	r2, r2, #2
 80008b0:	4413      	add	r3, r2
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	333c      	adds	r3, #60	@ 0x3c
 80008b8:	817b      	strh	r3, [r7, #10]

                        LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, color);
 80008ba:	89fb      	ldrh	r3, [r7, #14]
 80008bc:	8979      	ldrh	r1, [r7, #10]
 80008be:	89b8      	ldrh	r0, [r7, #12]
 80008c0:	220d      	movs	r2, #13
 80008c2:	f000 fb87 	bl	8000fd4 <LCD_Draw_Circle_Fill>
                        return col;
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	e003      	b.n	80008d2 <PollTouchColumn+0xd2>
                    }
                }
            }
        }
        HAL_Delay(200);
 80008ca:	20c8      	movs	r0, #200	@ 0xc8
 80008cc:	f002 f9dc 	bl	8002c88 <HAL_Delay>
        if (returnTouchStateAndLocation(&touchData) == STMPE811_State_Pressed) {
 80008d0:	e79b      	b.n	800080a <PollTouchColumn+0xa>
    }
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3720      	adds	r7, #32
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000d0 	.word	0x200000d0
 80008e0:	200000a4 	.word	0x200000a4

080008e4 <checkDirection>:
        }
    }
    return -1;
}

int checkDirection(int startR, int startC, int dR, int dC, char piece) {
 80008e4:	b480      	push	{r7}
 80008e6:	b089      	sub	sp, #36	@ 0x24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
 80008f0:	603b      	str	r3, [r7, #0]
    for (int i = 1; i < 4; i++) {
 80008f2:	2301      	movs	r3, #1
 80008f4:	61fb      	str	r3, [r7, #28]
 80008f6:	e02b      	b.n	8000950 <checkDirection+0x6c>
        int rr = startR + dR * i;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	69fa      	ldr	r2, [r7, #28]
 80008fc:	fb02 f303 	mul.w	r3, r2, r3
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	4413      	add	r3, r2
 8000904:	61bb      	str	r3, [r7, #24]
        int cc = startC + dC * i;
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	69fa      	ldr	r2, [r7, #28]
 800090a:	fb02 f303 	mul.w	r3, r2, r3
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	4413      	add	r3, r2
 8000912:	617b      	str	r3, [r7, #20]
        if (rr < 0 || rr >= ROWS || cc < 0 || cc >= COLS || board[rr][cc] != piece)
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	2b00      	cmp	r3, #0
 8000918:	db15      	blt.n	8000946 <checkDirection+0x62>
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	2b05      	cmp	r3, #5
 800091e:	dc12      	bgt.n	8000946 <checkDirection+0x62>
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	2b00      	cmp	r3, #0
 8000924:	db0f      	blt.n	8000946 <checkDirection+0x62>
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	2b06      	cmp	r3, #6
 800092a:	dc0c      	bgt.n	8000946 <checkDirection+0x62>
 800092c:	490d      	ldr	r1, [pc, #52]	@ (8000964 <checkDirection+0x80>)
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	4613      	mov	r3, r2
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	1a9b      	subs	r3, r3, r2
 8000936:	18ca      	adds	r2, r1, r3
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	4413      	add	r3, r2
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000942:	429a      	cmp	r2, r3
 8000944:	d001      	beq.n	800094a <checkDirection+0x66>
            return 0;
 8000946:	2300      	movs	r3, #0
 8000948:	e006      	b.n	8000958 <checkDirection+0x74>
    for (int i = 1; i < 4; i++) {
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	3301      	adds	r3, #1
 800094e:	61fb      	str	r3, [r7, #28]
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	2b03      	cmp	r3, #3
 8000954:	ddd0      	ble.n	80008f8 <checkDirection+0x14>
    }
    return 1;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	3724      	adds	r7, #36	@ 0x24
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	200000a4 	.word	0x200000a4

08000968 <checkWin>:

int checkWin(char piece) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af02      	add	r7, sp, #8
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
    for (int r = 0; r < ROWS; r++) {
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	e047      	b.n	8000a08 <checkWin+0xa0>
        for (int c = 0; c < COLS; c++) {
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	e03e      	b.n	80009fc <checkWin+0x94>
            if (board[r][c] != piece) continue;
 800097e:	4926      	ldr	r1, [pc, #152]	@ (8000a18 <checkWin+0xb0>)
 8000980:	68fa      	ldr	r2, [r7, #12]
 8000982:	4613      	mov	r3, r2
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	1a9b      	subs	r3, r3, r2
 8000988:	18ca      	adds	r2, r1, r3
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	4413      	add	r3, r2
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	79fa      	ldrb	r2, [r7, #7]
 8000992:	429a      	cmp	r2, r3
 8000994:	d12e      	bne.n	80009f4 <checkWin+0x8c>
            if (checkDirection(r, c, 0, 1, piece)  ||
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	2301      	movs	r3, #1
 800099c:	2200      	movs	r2, #0
 800099e:	68b9      	ldr	r1, [r7, #8]
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f7ff ff9f 	bl	80008e4 <checkDirection>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d121      	bne.n	80009f0 <checkWin+0x88>
                checkDirection(r, c, 1, 0, piece)  ||
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	2300      	movs	r3, #0
 80009b2:	2201      	movs	r2, #1
 80009b4:	68b9      	ldr	r1, [r7, #8]
 80009b6:	68f8      	ldr	r0, [r7, #12]
 80009b8:	f7ff ff94 	bl	80008e4 <checkDirection>
 80009bc:	4603      	mov	r3, r0
            if (checkDirection(r, c, 0, 1, piece)  ||
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d116      	bne.n	80009f0 <checkWin+0x88>
                checkDirection(r, c, 1, 1, piece)  ||
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	2301      	movs	r3, #1
 80009c8:	2201      	movs	r2, #1
 80009ca:	68b9      	ldr	r1, [r7, #8]
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f7ff ff89 	bl	80008e4 <checkDirection>
 80009d2:	4603      	mov	r3, r0
                checkDirection(r, c, 1, 0, piece)  ||
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d10b      	bne.n	80009f0 <checkWin+0x88>
                checkDirection(r, c, -1, 1, piece)) {
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	2301      	movs	r3, #1
 80009de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009e2:	68b9      	ldr	r1, [r7, #8]
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f7ff ff7d 	bl	80008e4 <checkDirection>
 80009ea:	4603      	mov	r3, r0
                checkDirection(r, c, 1, 1, piece)  ||
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d002      	beq.n	80009f6 <checkWin+0x8e>
                return 1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	e00d      	b.n	8000a10 <checkWin+0xa8>
            if (board[r][c] != piece) continue;
 80009f4:	bf00      	nop
        for (int c = 0; c < COLS; c++) {
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	3301      	adds	r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	2b06      	cmp	r3, #6
 8000a00:	ddbd      	ble.n	800097e <checkWin+0x16>
    for (int r = 0; r < ROWS; r++) {
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	3301      	adds	r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	2b05      	cmp	r3, #5
 8000a0c:	ddb4      	ble.n	8000978 <checkWin+0x10>
            }
        }
    }
    return 0;
 8000a0e:	2300      	movs	r3, #0
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200000a4 	.word	0x200000a4

08000a1c <isBoardFull>:

int isBoardFull(void) {
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
    for (int r = 0; r < ROWS; r++) {
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	e018      	b.n	8000a5a <isBoardFull+0x3e>
        for (int c = 0; c < COLS; c++) {
 8000a28:	2300      	movs	r3, #0
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	e00f      	b.n	8000a4e <isBoardFull+0x32>
            if (board[r][c] == ' ') return 0;
 8000a2e:	4910      	ldr	r1, [pc, #64]	@ (8000a70 <isBoardFull+0x54>)
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	4613      	mov	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	1a9b      	subs	r3, r3, r2
 8000a38:	18ca      	adds	r2, r1, r3
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b20      	cmp	r3, #32
 8000a42:	d101      	bne.n	8000a48 <isBoardFull+0x2c>
 8000a44:	2300      	movs	r3, #0
 8000a46:	e00c      	b.n	8000a62 <isBoardFull+0x46>
        for (int c = 0; c < COLS; c++) {
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	2b06      	cmp	r3, #6
 8000a52:	ddec      	ble.n	8000a2e <isBoardFull+0x12>
    for (int r = 0; r < ROWS; r++) {
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3301      	adds	r3, #1
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b05      	cmp	r3, #5
 8000a5e:	dde3      	ble.n	8000a28 <isBoardFull+0xc>
        }
    }
    return 1;
 8000a60:	2301      	movs	r3, #1
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	200000a4 	.word	0x200000a4

08000a74 <PlayOnePlayer>:

enum {
    HUMAN = 'X', BOT = 'O'
};

void PlayOnePlayer(void) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
    initBoard();
 8000a7a:	f7ff fe65 	bl	8000748 <initBoard>
    GameScreen_Init();
 8000a7e:	f7ff fe8b 	bl	8000798 <GameScreen_Init>

    LCD_SetTextColor(LCD_COLOR_WHITE);
 8000a82:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000a86:	f000 fb1b 	bl	80010c0 <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 8000a8a:	4857      	ldr	r0, [pc, #348]	@ (8000be8 <PlayOnePlayer+0x174>)
 8000a8c:	f000 fb28 	bl	80010e0 <LCD_SetFont>
    LCD_DisplayChar(20,20,'S');
 8000a90:	2253      	movs	r2, #83	@ 0x53
 8000a92:	2114      	movs	r1, #20
 8000a94:	2014      	movs	r0, #20
 8000a96:	f000 fba1 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(35,20,'I');
 8000a9a:	2249      	movs	r2, #73	@ 0x49
 8000a9c:	2114      	movs	r1, #20
 8000a9e:	2023      	movs	r0, #35	@ 0x23
 8000aa0:	f000 fb9c 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(50,20,'N');
 8000aa4:	224e      	movs	r2, #78	@ 0x4e
 8000aa6:	2114      	movs	r1, #20
 8000aa8:	2032      	movs	r0, #50	@ 0x32
 8000aaa:	f000 fb97 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(65,20,'G');
 8000aae:	2247      	movs	r2, #71	@ 0x47
 8000ab0:	2114      	movs	r1, #20
 8000ab2:	2041      	movs	r0, #65	@ 0x41
 8000ab4:	f000 fb92 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(80,20,'L');
 8000ab8:	224c      	movs	r2, #76	@ 0x4c
 8000aba:	2114      	movs	r1, #20
 8000abc:	2050      	movs	r0, #80	@ 0x50
 8000abe:	f000 fb8d 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(95,20,'E');
 8000ac2:	2245      	movs	r2, #69	@ 0x45
 8000ac4:	2114      	movs	r1, #20
 8000ac6:	205f      	movs	r0, #95	@ 0x5f
 8000ac8:	f000 fb88 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(125,20,'P');
 8000acc:	2250      	movs	r2, #80	@ 0x50
 8000ace:	2114      	movs	r1, #20
 8000ad0:	207d      	movs	r0, #125	@ 0x7d
 8000ad2:	f000 fb83 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(140,20,'L');
 8000ad6:	224c      	movs	r2, #76	@ 0x4c
 8000ad8:	2114      	movs	r1, #20
 8000ada:	208c      	movs	r0, #140	@ 0x8c
 8000adc:	f000 fb7e 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(155,20,'A');
 8000ae0:	2241      	movs	r2, #65	@ 0x41
 8000ae2:	2114      	movs	r1, #20
 8000ae4:	209b      	movs	r0, #155	@ 0x9b
 8000ae6:	f000 fb79 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(170,20,'Y');
 8000aea:	2259      	movs	r2, #89	@ 0x59
 8000aec:	2114      	movs	r1, #20
 8000aee:	20aa      	movs	r0, #170	@ 0xaa
 8000af0:	f000 fb74 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(185,20,'E');
 8000af4:	2245      	movs	r2, #69	@ 0x45
 8000af6:	2114      	movs	r1, #20
 8000af8:	20b9      	movs	r0, #185	@ 0xb9
 8000afa:	f000 fb6f 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(200,20,'R');
 8000afe:	2252      	movs	r2, #82	@ 0x52
 8000b00:	2114      	movs	r1, #20
 8000b02:	20c8      	movs	r0, #200	@ 0xc8
 8000b04:	f000 fb6a 	bl	80011dc <LCD_DisplayChar>

    char current = HUMAN;
 8000b08:	2358      	movs	r3, #88	@ 0x58
 8000b0a:	75fb      	strb	r3, [r7, #23]
    while (1) {
        int col;
        if (current == HUMAN) {
 8000b0c:	7dfb      	ldrb	r3, [r7, #23]
 8000b0e:	2b58      	cmp	r3, #88	@ 0x58
 8000b10:	d104      	bne.n	8000b1c <PlayOnePlayer+0xa8>
            col = PollTouchColumn(HUMAN);
 8000b12:	2058      	movs	r0, #88	@ 0x58
 8000b14:	f7ff fe74 	bl	8000800 <PollTouchColumn>
 8000b18:	60f8      	str	r0, [r7, #12]
 8000b1a:	e04c      	b.n	8000bb6 <PlayOnePlayer+0x142>
        } else {
            
            uint32_t rnd;
            do {
                HAL_RNG_GenerateRandomNumber(&hrng, &rnd);
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4832      	ldr	r0, [pc, #200]	@ (8000bec <PlayOnePlayer+0x178>)
 8000b22:	f004 fe41 	bl	80057a8 <HAL_RNG_GenerateRandomNumber>
                col = rnd % COLS;
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	4b31      	ldr	r3, [pc, #196]	@ (8000bf0 <PlayOnePlayer+0x17c>)
 8000b2a:	fba3 2301 	umull	r2, r3, r3, r1
 8000b2e:	1aca      	subs	r2, r1, r3
 8000b30:	0852      	lsrs	r2, r2, #1
 8000b32:	4413      	add	r3, r2
 8000b34:	089a      	lsrs	r2, r3, #2
 8000b36:	4613      	mov	r3, r2
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	1a9b      	subs	r3, r3, r2
 8000b3c:	1aca      	subs	r2, r1, r3
 8000b3e:	60fa      	str	r2, [r7, #12]
            } while (board[0][col] != ' ');
 8000b40:	4a2c      	ldr	r2, [pc, #176]	@ (8000bf4 <PlayOnePlayer+0x180>)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4413      	add	r3, r2
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b20      	cmp	r3, #32
 8000b4a:	d1e7      	bne.n	8000b1c <PlayOnePlayer+0xa8>
          
            for (int r = ROWS - 1; r >= 0; r--) {
 8000b4c:	2305      	movs	r3, #5
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	e02e      	b.n	8000bb0 <PlayOnePlayer+0x13c>
                if (board[r][col] == ' ') {
 8000b52:	4928      	ldr	r1, [pc, #160]	@ (8000bf4 <PlayOnePlayer+0x180>)
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4613      	mov	r3, r2
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	1a9b      	subs	r3, r3, r2
 8000b5c:	18ca      	adds	r2, r1, r3
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4413      	add	r3, r2
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b20      	cmp	r3, #32
 8000b66:	d120      	bne.n	8000baa <PlayOnePlayer+0x136>
                    board[r][col] = BOT;
 8000b68:	4922      	ldr	r1, [pc, #136]	@ (8000bf4 <PlayOnePlayer+0x180>)
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	1a9b      	subs	r3, r3, r2
 8000b72:	18ca      	adds	r2, r1, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4413      	add	r3, r2
 8000b78:	224f      	movs	r2, #79	@ 0x4f
 8000b7a:	701a      	strb	r2, [r3, #0]
                    uint16_t x = ORIGIN_X + col * CELL_SPACING_X;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	015b      	lsls	r3, r3, #5
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	3314      	adds	r3, #20
 8000b86:	817b      	strh	r3, [r7, #10]
                    uint16_t y = ORIGIN_Y + r * CELL_SPACING_Y;
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	0092      	lsls	r2, r2, #2
 8000b90:	4413      	add	r3, r2
 8000b92:	00db      	lsls	r3, r3, #3
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	333c      	adds	r3, #60	@ 0x3c
 8000b98:	813b      	strh	r3, [r7, #8]
                    LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, PLAYER2_COLOR);
 8000b9a:	8939      	ldrh	r1, [r7, #8]
 8000b9c:	8978      	ldrh	r0, [r7, #10]
 8000b9e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000ba2:	220d      	movs	r2, #13
 8000ba4:	f000 fa16 	bl	8000fd4 <LCD_Draw_Circle_Fill>
                    break;
 8000ba8:	e005      	b.n	8000bb6 <PlayOnePlayer+0x142>
            for (int r = ROWS - 1; r >= 0; r--) {
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	dacd      	bge.n	8000b52 <PlayOnePlayer+0xde>
                }
            }
        }
        if (checkWin(current) || isBoardFull()) break;
 8000bb6:	7dfb      	ldrb	r3, [r7, #23]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fed5 	bl	8000968 <checkWin>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d10c      	bne.n	8000bde <PlayOnePlayer+0x16a>
 8000bc4:	f7ff ff2a 	bl	8000a1c <isBoardFull>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d107      	bne.n	8000bde <PlayOnePlayer+0x16a>
        current = (current == HUMAN) ? BOT : HUMAN;
 8000bce:	7dfb      	ldrb	r3, [r7, #23]
 8000bd0:	2b58      	cmp	r3, #88	@ 0x58
 8000bd2:	d101      	bne.n	8000bd8 <PlayOnePlayer+0x164>
 8000bd4:	234f      	movs	r3, #79	@ 0x4f
 8000bd6:	e000      	b.n	8000bda <PlayOnePlayer+0x166>
 8000bd8:	2358      	movs	r3, #88	@ 0x58
 8000bda:	75fb      	strb	r3, [r7, #23]
    while (1) {
 8000bdc:	e796      	b.n	8000b0c <PlayOnePlayer+0x98>
    }
}
 8000bde:	bf00      	nop
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000004 	.word	0x20000004
 8000bec:	20025b0c 	.word	0x20025b0c
 8000bf0:	24924925 	.word	0x24924925
 8000bf4:	200000a4 	.word	0x200000a4

08000bf8 <PlayTwoPlayer>:



void PlayTwoPlayer(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
    initBoard();
 8000bfe:	f7ff fda3 	bl	8000748 <initBoard>
    GameScreen_Init();
 8000c02:	f7ff fdc9 	bl	8000798 <GameScreen_Init>

    LCD_SetTextColor(LCD_COLOR_WHITE);
 8000c06:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000c0a:	f000 fa59 	bl	80010c0 <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 8000c0e:	482e      	ldr	r0, [pc, #184]	@ (8000cc8 <PlayTwoPlayer+0xd0>)
 8000c10:	f000 fa66 	bl	80010e0 <LCD_SetFont>
    LCD_DisplayChar(20,20,'2');
 8000c14:	2232      	movs	r2, #50	@ 0x32
 8000c16:	2114      	movs	r1, #20
 8000c18:	2014      	movs	r0, #20
 8000c1a:	f000 fadf 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(35,20,'-');
 8000c1e:	222d      	movs	r2, #45	@ 0x2d
 8000c20:	2114      	movs	r1, #20
 8000c22:	2023      	movs	r0, #35	@ 0x23
 8000c24:	f000 fada 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(50,20,'P');
 8000c28:	2250      	movs	r2, #80	@ 0x50
 8000c2a:	2114      	movs	r1, #20
 8000c2c:	2032      	movs	r0, #50	@ 0x32
 8000c2e:	f000 fad5 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(65,20,'L');
 8000c32:	224c      	movs	r2, #76	@ 0x4c
 8000c34:	2114      	movs	r1, #20
 8000c36:	2041      	movs	r0, #65	@ 0x41
 8000c38:	f000 fad0 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(80,20,'A');
 8000c3c:	2241      	movs	r2, #65	@ 0x41
 8000c3e:	2114      	movs	r1, #20
 8000c40:	2050      	movs	r0, #80	@ 0x50
 8000c42:	f000 facb 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(95,20,'Y');
 8000c46:	2259      	movs	r2, #89	@ 0x59
 8000c48:	2114      	movs	r1, #20
 8000c4a:	205f      	movs	r0, #95	@ 0x5f
 8000c4c:	f000 fac6 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(110,20,'E');
 8000c50:	2245      	movs	r2, #69	@ 0x45
 8000c52:	2114      	movs	r1, #20
 8000c54:	206e      	movs	r0, #110	@ 0x6e
 8000c56:	f000 fac1 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(125,20,'R');
 8000c5a:	2252      	movs	r2, #82	@ 0x52
 8000c5c:	2114      	movs	r1, #20
 8000c5e:	207d      	movs	r0, #125	@ 0x7d
 8000c60:	f000 fabc 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(155,20,'M');
 8000c64:	224d      	movs	r2, #77	@ 0x4d
 8000c66:	2114      	movs	r1, #20
 8000c68:	209b      	movs	r0, #155	@ 0x9b
 8000c6a:	f000 fab7 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(170,20,'O');
 8000c6e:	224f      	movs	r2, #79	@ 0x4f
 8000c70:	2114      	movs	r1, #20
 8000c72:	20aa      	movs	r0, #170	@ 0xaa
 8000c74:	f000 fab2 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(185,20,'D');
 8000c78:	2244      	movs	r2, #68	@ 0x44
 8000c7a:	2114      	movs	r1, #20
 8000c7c:	20b9      	movs	r0, #185	@ 0xb9
 8000c7e:	f000 faad 	bl	80011dc <LCD_DisplayChar>
    LCD_DisplayChar(200,20,'E');
 8000c82:	2245      	movs	r2, #69	@ 0x45
 8000c84:	2114      	movs	r1, #20
 8000c86:	20c8      	movs	r0, #200	@ 0xc8
 8000c88:	f000 faa8 	bl	80011dc <LCD_DisplayChar>

    char current = HUMAN;
 8000c8c:	2358      	movs	r3, #88	@ 0x58
 8000c8e:	71fb      	strb	r3, [r7, #7]
    while (1) {
      
        PollTouchColumn(current);
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fdb4 	bl	8000800 <PollTouchColumn>
        if (checkWin(current) || isBoardFull()) break;
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fe64 	bl	8000968 <checkWin>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d10c      	bne.n	8000cc0 <PlayTwoPlayer+0xc8>
 8000ca6:	f7ff feb9 	bl	8000a1c <isBoardFull>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d107      	bne.n	8000cc0 <PlayTwoPlayer+0xc8>
        current = (current == HUMAN) ? BOT : HUMAN;
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	2b58      	cmp	r3, #88	@ 0x58
 8000cb4:	d101      	bne.n	8000cba <PlayTwoPlayer+0xc2>
 8000cb6:	234f      	movs	r3, #79	@ 0x4f
 8000cb8:	e000      	b.n	8000cbc <PlayTwoPlayer+0xc4>
 8000cba:	2358      	movs	r3, #88	@ 0x58
 8000cbc:	71fb      	strb	r3, [r7, #7]
        PollTouchColumn(current);
 8000cbe:	e7e7      	b.n	8000c90 <PlayTwoPlayer+0x98>
    }

}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000004 	.word	0x20000004

08000ccc <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08c      	sub	sp, #48	@ 0x30
 8000cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
 8000cd6:	4b5a      	ldr	r3, [pc, #360]	@ (8000e40 <LCD_GPIO_Init+0x174>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cda:	4a59      	ldr	r2, [pc, #356]	@ (8000e40 <LCD_GPIO_Init+0x174>)
 8000cdc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ce2:	4b57      	ldr	r3, [pc, #348]	@ (8000e40 <LCD_GPIO_Init+0x174>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000cea:	61bb      	str	r3, [r7, #24]
 8000cec:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	4b53      	ldr	r3, [pc, #332]	@ (8000e40 <LCD_GPIO_Init+0x174>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a52      	ldr	r2, [pc, #328]	@ (8000e40 <LCD_GPIO_Init+0x174>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b50      	ldr	r3, [pc, #320]	@ (8000e40 <LCD_GPIO_Init+0x174>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b4c      	ldr	r3, [pc, #304]	@ (8000e40 <LCD_GPIO_Init+0x174>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a4b      	ldr	r2, [pc, #300]	@ (8000e40 <LCD_GPIO_Init+0x174>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b49      	ldr	r3, [pc, #292]	@ (8000e40 <LCD_GPIO_Init+0x174>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b45      	ldr	r3, [pc, #276]	@ (8000e40 <LCD_GPIO_Init+0x174>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	4a44      	ldr	r2, [pc, #272]	@ (8000e40 <LCD_GPIO_Init+0x174>)
 8000d30:	f043 0304 	orr.w	r3, r3, #4
 8000d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d36:	4b42      	ldr	r3, [pc, #264]	@ (8000e40 <LCD_GPIO_Init+0x174>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	f003 0304 	and.w	r3, r3, #4
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	4b3e      	ldr	r3, [pc, #248]	@ (8000e40 <LCD_GPIO_Init+0x174>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	4a3d      	ldr	r2, [pc, #244]	@ (8000e40 <LCD_GPIO_Init+0x174>)
 8000d4c:	f043 0308 	orr.w	r3, r3, #8
 8000d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d52:	4b3b      	ldr	r3, [pc, #236]	@ (8000e40 <LCD_GPIO_Init+0x174>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	f003 0308 	and.w	r3, r3, #8
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	4b37      	ldr	r3, [pc, #220]	@ (8000e40 <LCD_GPIO_Init+0x174>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a36      	ldr	r2, [pc, #216]	@ (8000e40 <LCD_GPIO_Init+0x174>)
 8000d68:	f043 0320 	orr.w	r3, r3, #32
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b34      	ldr	r3, [pc, #208]	@ (8000e40 <LCD_GPIO_Init+0x174>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f003 0320 	and.w	r3, r3, #32
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	603b      	str	r3, [r7, #0]
 8000d7e:	4b30      	ldr	r3, [pc, #192]	@ (8000e40 <LCD_GPIO_Init+0x174>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a2f      	ldr	r2, [pc, #188]	@ (8000e40 <LCD_GPIO_Init+0x174>)
 8000d84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e40 <LCD_GPIO_Init+0x174>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000d96:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000d9a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000da4:	2302      	movs	r3, #2
 8000da6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000da8:	230e      	movs	r3, #14
 8000daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	4619      	mov	r1, r3
 8000db2:	4824      	ldr	r0, [pc, #144]	@ (8000e44 <LCD_GPIO_Init+0x178>)
 8000db4:	f002 f872 	bl	8002e9c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000db8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000dbc:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4820      	ldr	r0, [pc, #128]	@ (8000e48 <LCD_GPIO_Init+0x17c>)
 8000dc6:	f002 f869 	bl	8002e9c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000dca:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000dce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	481d      	ldr	r0, [pc, #116]	@ (8000e4c <LCD_GPIO_Init+0x180>)
 8000dd8:	f002 f860 	bl	8002e9c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000ddc:	2348      	movs	r3, #72	@ 0x48
 8000dde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	4619      	mov	r1, r3
 8000de6:	481a      	ldr	r0, [pc, #104]	@ (8000e50 <LCD_GPIO_Init+0x184>)
 8000de8:	f002 f858 	bl	8002e9c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000dec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000df0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	4816      	ldr	r0, [pc, #88]	@ (8000e54 <LCD_GPIO_Init+0x188>)
 8000dfa:	f002 f84f 	bl	8002e9c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000dfe:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000e02:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4813      	ldr	r0, [pc, #76]	@ (8000e58 <LCD_GPIO_Init+0x18c>)
 8000e0c:	f002 f846 	bl	8002e9c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000e10:	2303      	movs	r3, #3
 8000e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000e14:	2309      	movs	r3, #9
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480a      	ldr	r0, [pc, #40]	@ (8000e48 <LCD_GPIO_Init+0x17c>)
 8000e20:	f002 f83c 	bl	8002e9c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000e24:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4809      	ldr	r0, [pc, #36]	@ (8000e58 <LCD_GPIO_Init+0x18c>)
 8000e32:	f002 f833 	bl	8002e9c <HAL_GPIO_Init>
}
 8000e36:	bf00      	nop
 8000e38:	3730      	adds	r7, #48	@ 0x30
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020000 	.word	0x40020000
 8000e48:	40020400 	.word	0x40020400
 8000e4c:	40020800 	.word	0x40020800
 8000e50:	40020c00 	.word	0x40020c00
 8000e54:	40021400 	.word	0x40021400
 8000e58:	40021800 	.word	0x40021800

08000e5c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b090      	sub	sp, #64	@ 0x40
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000e6a:	23f0      	movs	r3, #240	@ 0xf0
 8000e6c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000e72:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e76:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000e78:	2302      	movs	r3, #2
 8000e7a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000e7c:	23ff      	movs	r3, #255	@ 0xff
 8000e7e:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e88:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d101      	bne.n	8000e98 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <LTCD_Layer_Init+0x78>)
 8000e96:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000e98:	23f0      	movs	r3, #240	@ 0xf0
 8000e9a:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000e9c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000eb4:	79fa      	ldrb	r2, [r7, #7]
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4806      	ldr	r0, [pc, #24]	@ (8000ed8 <LTCD_Layer_Init+0x7c>)
 8000ebe:	f003 fc2f 	bl	8004720 <HAL_LTDC_ConfigLayer>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000ec8:	f000 f9aa 	bl	8001220 <LCD_Error_Handler>
	}
}
 8000ecc:	bf00      	nop
 8000ece:	3740      	adds	r7, #64	@ 0x40
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200001b4 	.word	0x200001b4
 8000ed8:	200000d8 	.word	0x200000d8

08000edc <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000ee0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f8c <LTCD__Init+0xb0>)
 8000ee2:	4a2b      	ldr	r2, [pc, #172]	@ (8000f90 <LTCD__Init+0xb4>)
 8000ee4:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000ee6:	4b29      	ldr	r3, [pc, #164]	@ (8000f8c <LTCD__Init+0xb0>)
 8000ee8:	2209      	movs	r2, #9
 8000eea:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000eec:	4b27      	ldr	r3, [pc, #156]	@ (8000f8c <LTCD__Init+0xb0>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000ef2:	4b26      	ldr	r3, [pc, #152]	@ (8000f8c <LTCD__Init+0xb0>)
 8000ef4:	221d      	movs	r2, #29
 8000ef6:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000ef8:	4b24      	ldr	r3, [pc, #144]	@ (8000f8c <LTCD__Init+0xb0>)
 8000efa:	2203      	movs	r2, #3
 8000efc:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000efe:	4b23      	ldr	r3, [pc, #140]	@ (8000f8c <LTCD__Init+0xb0>)
 8000f00:	f240 120d 	movw	r2, #269	@ 0x10d
 8000f04:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000f06:	4b21      	ldr	r3, [pc, #132]	@ (8000f8c <LTCD__Init+0xb0>)
 8000f08:	f240 1243 	movw	r2, #323	@ 0x143
 8000f0c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f8c <LTCD__Init+0xb0>)
 8000f10:	f240 1217 	movw	r2, #279	@ 0x117
 8000f14:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000f16:	4b1d      	ldr	r3, [pc, #116]	@ (8000f8c <LTCD__Init+0xb0>)
 8000f18:	f240 1247 	movw	r2, #327	@ 0x147
 8000f1c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f8c <LTCD__Init+0xb0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000f26:	4b19      	ldr	r3, [pc, #100]	@ (8000f8c <LTCD__Init+0xb0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000f2e:	4b17      	ldr	r3, [pc, #92]	@ (8000f8c <LTCD__Init+0xb0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f36:	4b17      	ldr	r3, [pc, #92]	@ (8000f94 <LTCD__Init+0xb8>)
 8000f38:	2208      	movs	r2, #8
 8000f3a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <LTCD__Init+0xb8>)
 8000f3e:	22c0      	movs	r2, #192	@ 0xc0
 8000f40:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000f42:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <LTCD__Init+0xb8>)
 8000f44:	2204      	movs	r2, #4
 8000f46:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <LTCD__Init+0xb8>)
 8000f4a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f4e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000f50:	4810      	ldr	r0, [pc, #64]	@ (8000f94 <LTCD__Init+0xb8>)
 8000f52:	f004 fa3f 	bl	80053d4 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f56:	4b0d      	ldr	r3, [pc, #52]	@ (8000f8c <LTCD__Init+0xb0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <LTCD__Init+0xb0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f62:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <LTCD__Init+0xb0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f68:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <LTCD__Init+0xb0>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000f6e:	f7ff fead 	bl	8000ccc <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f72:	4806      	ldr	r0, [pc, #24]	@ (8000f8c <LTCD__Init+0xb0>)
 8000f74:	f003 fb04 	bl	8004580 <HAL_LTDC_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000f7e:	f000 f94f 	bl	8001220 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000f82:	f000 f96a 	bl	800125a <ili9341_Init>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200000d8 	.word	0x200000d8
 8000f90:	40016800 	.word	0x40016800
 8000f94:	20000180 	.word	0x20000180

08000f98 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	80bb      	strh	r3, [r7, #4]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000faa:	88ba      	ldrh	r2, [r7, #4]
 8000fac:	4613      	mov	r3, r2
 8000fae:	011b      	lsls	r3, r3, #4
 8000fb0:	1a9b      	subs	r3, r3, r2
 8000fb2:	011b      	lsls	r3, r3, #4
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4905      	ldr	r1, [pc, #20]	@ (8000fd0 <LCD_Draw_Pixel+0x38>)
 8000fbc:	887a      	ldrh	r2, [r7, #2]
 8000fbe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	200001b4 	.word	0x200001b4

08000fd4 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4604      	mov	r4, r0
 8000fdc:	4608      	mov	r0, r1
 8000fde:	4611      	mov	r1, r2
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	80fb      	strh	r3, [r7, #6]
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80bb      	strh	r3, [r7, #4]
 8000fea:	460b      	mov	r3, r1
 8000fec:	807b      	strh	r3, [r7, #2]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000ff2:	887b      	ldrh	r3, [r7, #2]
 8000ff4:	425b      	negs	r3, r3
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	81fb      	strh	r3, [r7, #14]
 8000ffa:	e034      	b.n	8001066 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000ffc:	887b      	ldrh	r3, [r7, #2]
 8000ffe:	425b      	negs	r3, r3
 8001000:	b29b      	uxth	r3, r3
 8001002:	81bb      	strh	r3, [r7, #12]
 8001004:	e024      	b.n	8001050 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8001006:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800100a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800100e:	fb03 f202 	mul.w	r2, r3, r2
 8001012:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001016:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800101a:	fb01 f303 	mul.w	r3, r1, r3
 800101e:	441a      	add	r2, r3
 8001020:	887b      	ldrh	r3, [r7, #2]
 8001022:	8879      	ldrh	r1, [r7, #2]
 8001024:	fb01 f303 	mul.w	r3, r1, r3
 8001028:	429a      	cmp	r2, r3
 800102a:	dc0b      	bgt.n	8001044 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 800102c:	89ba      	ldrh	r2, [r7, #12]
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	4413      	add	r3, r2
 8001032:	b298      	uxth	r0, r3
 8001034:	89fa      	ldrh	r2, [r7, #14]
 8001036:	88bb      	ldrh	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	b29b      	uxth	r3, r3
 800103c:	883a      	ldrh	r2, [r7, #0]
 800103e:	4619      	mov	r1, r3
 8001040:	f7ff ffaa 	bl	8000f98 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8001044:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001048:	b29b      	uxth	r3, r3
 800104a:	3301      	adds	r3, #1
 800104c:	b29b      	uxth	r3, r3
 800104e:	81bb      	strh	r3, [r7, #12]
 8001050:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	429a      	cmp	r2, r3
 8001058:	ddd5      	ble.n	8001006 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 800105a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800105e:	b29b      	uxth	r3, r3
 8001060:	3301      	adds	r3, #1
 8001062:	b29b      	uxth	r3, r3
 8001064:	81fb      	strh	r3, [r7, #14]
 8001066:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	429a      	cmp	r2, r3
 800106e:	ddc5      	ble.n	8000ffc <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	bd90      	pop	{r4, r7, pc}
	...

0800107c <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	460a      	mov	r2, r1
 8001086:	71fb      	strb	r3, [r7, #7]
 8001088:	4613      	mov	r3, r2
 800108a:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10e      	bne.n	80010b0 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	e007      	b.n	80010a8 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8001098:	4908      	ldr	r1, [pc, #32]	@ (80010bc <LCD_Clear+0x40>)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	88ba      	ldrh	r2, [r7, #4]
 800109e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	3301      	adds	r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80010ae:	d3f3      	bcc.n	8001098 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	200001b4 	.word	0x200001b4

080010c0 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80010ca:	4a04      	ldr	r2, [pc, #16]	@ (80010dc <LCD_SetTextColor+0x1c>)
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	8013      	strh	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	20000000 	.word	0x20000000

080010e0 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80010e8:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <LCD_SetFont+0x1c>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	200001b0 	.word	0x200001b0

08001100 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	603a      	str	r2, [r7, #0]
 800110a:	80fb      	strh	r3, [r7, #6]
 800110c:	460b      	mov	r3, r1
 800110e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	e04c      	b.n	80011b8 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	e03f      	b.n	80011a4 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	4413      	add	r3, r2
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	4619      	mov	r1, r3
 8001130:	4b27      	ldr	r3, [pc, #156]	@ (80011d0 <LCD_Draw_Char+0xd0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	889b      	ldrh	r3, [r3, #4]
 8001136:	4a27      	ldr	r2, [pc, #156]	@ (80011d4 <LCD_Draw_Char+0xd4>)
 8001138:	fba2 2303 	umull	r2, r3, r2, r3
 800113c:	08db      	lsrs	r3, r3, #3
 800113e:	b29b      	uxth	r3, r3
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	2280      	movs	r2, #128	@ 0x80
 8001144:	409a      	lsls	r2, r3
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	fa42 f303 	asr.w	r3, r2, r3
 800114c:	400b      	ands	r3, r1
 800114e:	2b00      	cmp	r3, #0
 8001150:	d104      	bne.n	800115c <LCD_Draw_Char+0x5c>
 8001152:	4b1f      	ldr	r3, [pc, #124]	@ (80011d0 <LCD_Draw_Char+0xd0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	889b      	ldrh	r3, [r3, #4]
 8001158:	2b0c      	cmp	r3, #12
 800115a:	d920      	bls.n	800119e <LCD_Draw_Char+0x9e>
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	4413      	add	r3, r2
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	fa42 f303 	asr.w	r3, r2, r3
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d104      	bne.n	8001180 <LCD_Draw_Char+0x80>
 8001176:	4b16      	ldr	r3, [pc, #88]	@ (80011d0 <LCD_Draw_Char+0xd0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	889b      	ldrh	r3, [r3, #4]
 800117c:	2b0c      	cmp	r3, #12
 800117e:	d80e      	bhi.n	800119e <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	b29a      	uxth	r2, r3
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	4413      	add	r3, r2
 8001188:	b298      	uxth	r0, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	b29a      	uxth	r2, r3
 800118e:	88bb      	ldrh	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	b29b      	uxth	r3, r3
 8001194:	4a10      	ldr	r2, [pc, #64]	@ (80011d8 <LCD_Draw_Char+0xd8>)
 8001196:	8812      	ldrh	r2, [r2, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	f7ff fefd 	bl	8000f98 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	3301      	adds	r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <LCD_Draw_Char+0xd0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	889b      	ldrh	r3, [r3, #4]
 80011aa:	461a      	mov	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d3b8      	bcc.n	8001124 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3301      	adds	r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	4b05      	ldr	r3, [pc, #20]	@ (80011d0 <LCD_Draw_Char+0xd0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	88db      	ldrh	r3, [r3, #6]
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d3ab      	bcc.n	800111e <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 80011c6:	bf00      	nop
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200001b0 	.word	0x200001b0
 80011d4:	aaaaaaab 	.word	0xaaaaaaab
 80011d8:	20000000 	.word	0x20000000

080011dc <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	80fb      	strh	r3, [r7, #6]
 80011e6:	460b      	mov	r3, r1
 80011e8:	80bb      	strh	r3, [r7, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 80011ee:	78fb      	ldrb	r3, [r7, #3]
 80011f0:	3b20      	subs	r3, #32
 80011f2:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 80011f4:	4b09      	ldr	r3, [pc, #36]	@ (800121c <LCD_DisplayChar+0x40>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	4907      	ldr	r1, [pc, #28]	@ (800121c <LCD_DisplayChar+0x40>)
 80011fe:	6809      	ldr	r1, [r1, #0]
 8001200:	88c9      	ldrh	r1, [r1, #6]
 8001202:	fb01 f303 	mul.w	r3, r1, r3
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	441a      	add	r2, r3
 800120a:	88b9      	ldrh	r1, [r7, #4]
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff76 	bl	8001100 <LCD_Draw_Char>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200001b0 	.word	0x200001b0

08001220 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <LCD_Error_Handler+0x8>

0800122c <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001230:	f001 f931 	bl	8002496 <STMPE811_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b02      	cmp	r3, #2
 8001238:	d001      	beq.n	800123e <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 800123a:	bf00      	nop
 800123c:	e7fd      	b.n	800123a <InitializeLCDTouch+0xe>
  }
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}

08001242 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f001 f9db 	bl	8002606 <STMPE811_ReadTouch>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800125e:	f000 f9ff 	bl	8001660 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001262:	20ca      	movs	r0, #202	@ 0xca
 8001264:	f000 f943 	bl	80014ee <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001268:	20c3      	movs	r0, #195	@ 0xc3
 800126a:	f000 f94d 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 800126e:	2008      	movs	r0, #8
 8001270:	f000 f94a 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001274:	2050      	movs	r0, #80	@ 0x50
 8001276:	f000 f947 	bl	8001508 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 800127a:	20cf      	movs	r0, #207	@ 0xcf
 800127c:	f000 f937 	bl	80014ee <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001280:	2000      	movs	r0, #0
 8001282:	f000 f941 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001286:	20c1      	movs	r0, #193	@ 0xc1
 8001288:	f000 f93e 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 800128c:	2030      	movs	r0, #48	@ 0x30
 800128e:	f000 f93b 	bl	8001508 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001292:	20ed      	movs	r0, #237	@ 0xed
 8001294:	f000 f92b 	bl	80014ee <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001298:	2064      	movs	r0, #100	@ 0x64
 800129a:	f000 f935 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 800129e:	2003      	movs	r0, #3
 80012a0:	f000 f932 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80012a4:	2012      	movs	r0, #18
 80012a6:	f000 f92f 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80012aa:	2081      	movs	r0, #129	@ 0x81
 80012ac:	f000 f92c 	bl	8001508 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80012b0:	20e8      	movs	r0, #232	@ 0xe8
 80012b2:	f000 f91c 	bl	80014ee <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80012b6:	2085      	movs	r0, #133	@ 0x85
 80012b8:	f000 f926 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80012bc:	2000      	movs	r0, #0
 80012be:	f000 f923 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80012c2:	2078      	movs	r0, #120	@ 0x78
 80012c4:	f000 f920 	bl	8001508 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80012c8:	20cb      	movs	r0, #203	@ 0xcb
 80012ca:	f000 f910 	bl	80014ee <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80012ce:	2039      	movs	r0, #57	@ 0x39
 80012d0:	f000 f91a 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80012d4:	202c      	movs	r0, #44	@ 0x2c
 80012d6:	f000 f917 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80012da:	2000      	movs	r0, #0
 80012dc:	f000 f914 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80012e0:	2034      	movs	r0, #52	@ 0x34
 80012e2:	f000 f911 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80012e6:	2002      	movs	r0, #2
 80012e8:	f000 f90e 	bl	8001508 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80012ec:	20f7      	movs	r0, #247	@ 0xf7
 80012ee:	f000 f8fe 	bl	80014ee <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80012f2:	2020      	movs	r0, #32
 80012f4:	f000 f908 	bl	8001508 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 80012f8:	20ea      	movs	r0, #234	@ 0xea
 80012fa:	f000 f8f8 	bl	80014ee <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80012fe:	2000      	movs	r0, #0
 8001300:	f000 f902 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001304:	2000      	movs	r0, #0
 8001306:	f000 f8ff 	bl	8001508 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 800130a:	20b1      	movs	r0, #177	@ 0xb1
 800130c:	f000 f8ef 	bl	80014ee <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001310:	2000      	movs	r0, #0
 8001312:	f000 f8f9 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001316:	201b      	movs	r0, #27
 8001318:	f000 f8f6 	bl	8001508 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800131c:	20b6      	movs	r0, #182	@ 0xb6
 800131e:	f000 f8e6 	bl	80014ee <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001322:	200a      	movs	r0, #10
 8001324:	f000 f8f0 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001328:	20a2      	movs	r0, #162	@ 0xa2
 800132a:	f000 f8ed 	bl	8001508 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 800132e:	20c0      	movs	r0, #192	@ 0xc0
 8001330:	f000 f8dd 	bl	80014ee <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001334:	2010      	movs	r0, #16
 8001336:	f000 f8e7 	bl	8001508 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 800133a:	20c1      	movs	r0, #193	@ 0xc1
 800133c:	f000 f8d7 	bl	80014ee <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001340:	2010      	movs	r0, #16
 8001342:	f000 f8e1 	bl	8001508 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001346:	20c5      	movs	r0, #197	@ 0xc5
 8001348:	f000 f8d1 	bl	80014ee <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 800134c:	2045      	movs	r0, #69	@ 0x45
 800134e:	f000 f8db 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001352:	2015      	movs	r0, #21
 8001354:	f000 f8d8 	bl	8001508 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001358:	20c7      	movs	r0, #199	@ 0xc7
 800135a:	f000 f8c8 	bl	80014ee <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 800135e:	2090      	movs	r0, #144	@ 0x90
 8001360:	f000 f8d2 	bl	8001508 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001364:	2036      	movs	r0, #54	@ 0x36
 8001366:	f000 f8c2 	bl	80014ee <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 800136a:	20c8      	movs	r0, #200	@ 0xc8
 800136c:	f000 f8cc 	bl	8001508 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001370:	20f2      	movs	r0, #242	@ 0xf2
 8001372:	f000 f8bc 	bl	80014ee <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001376:	2000      	movs	r0, #0
 8001378:	f000 f8c6 	bl	8001508 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800137c:	20b0      	movs	r0, #176	@ 0xb0
 800137e:	f000 f8b6 	bl	80014ee <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001382:	20c2      	movs	r0, #194	@ 0xc2
 8001384:	f000 f8c0 	bl	8001508 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001388:	20b6      	movs	r0, #182	@ 0xb6
 800138a:	f000 f8b0 	bl	80014ee <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800138e:	200a      	movs	r0, #10
 8001390:	f000 f8ba 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001394:	20a7      	movs	r0, #167	@ 0xa7
 8001396:	f000 f8b7 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 800139a:	2027      	movs	r0, #39	@ 0x27
 800139c:	f000 f8b4 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80013a0:	2004      	movs	r0, #4
 80013a2:	f000 f8b1 	bl	8001508 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80013a6:	202a      	movs	r0, #42	@ 0x2a
 80013a8:	f000 f8a1 	bl	80014ee <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80013ac:	2000      	movs	r0, #0
 80013ae:	f000 f8ab 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f000 f8a8 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80013b8:	2000      	movs	r0, #0
 80013ba:	f000 f8a5 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80013be:	20ef      	movs	r0, #239	@ 0xef
 80013c0:	f000 f8a2 	bl	8001508 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80013c4:	202b      	movs	r0, #43	@ 0x2b
 80013c6:	f000 f892 	bl	80014ee <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f000 f89c 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80013d0:	2000      	movs	r0, #0
 80013d2:	f000 f899 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80013d6:	2001      	movs	r0, #1
 80013d8:	f000 f896 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80013dc:	203f      	movs	r0, #63	@ 0x3f
 80013de:	f000 f893 	bl	8001508 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80013e2:	20f6      	movs	r0, #246	@ 0xf6
 80013e4:	f000 f883 	bl	80014ee <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80013e8:	2001      	movs	r0, #1
 80013ea:	f000 f88d 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f000 f88a 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80013f4:	2006      	movs	r0, #6
 80013f6:	f000 f887 	bl	8001508 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80013fa:	202c      	movs	r0, #44	@ 0x2c
 80013fc:	f000 f877 	bl	80014ee <ili9341_Write_Reg>
  LCD_Delay(200);
 8001400:	20c8      	movs	r0, #200	@ 0xc8
 8001402:	f000 f9e9 	bl	80017d8 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001406:	2026      	movs	r0, #38	@ 0x26
 8001408:	f000 f871 	bl	80014ee <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800140c:	2001      	movs	r0, #1
 800140e:	f000 f87b 	bl	8001508 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001412:	20e0      	movs	r0, #224	@ 0xe0
 8001414:	f000 f86b 	bl	80014ee <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001418:	200f      	movs	r0, #15
 800141a:	f000 f875 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 800141e:	2029      	movs	r0, #41	@ 0x29
 8001420:	f000 f872 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001424:	2024      	movs	r0, #36	@ 0x24
 8001426:	f000 f86f 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800142a:	200c      	movs	r0, #12
 800142c:	f000 f86c 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001430:	200e      	movs	r0, #14
 8001432:	f000 f869 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001436:	2009      	movs	r0, #9
 8001438:	f000 f866 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800143c:	204e      	movs	r0, #78	@ 0x4e
 800143e:	f000 f863 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001442:	2078      	movs	r0, #120	@ 0x78
 8001444:	f000 f860 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001448:	203c      	movs	r0, #60	@ 0x3c
 800144a:	f000 f85d 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800144e:	2009      	movs	r0, #9
 8001450:	f000 f85a 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001454:	2013      	movs	r0, #19
 8001456:	f000 f857 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800145a:	2005      	movs	r0, #5
 800145c:	f000 f854 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001460:	2017      	movs	r0, #23
 8001462:	f000 f851 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001466:	2011      	movs	r0, #17
 8001468:	f000 f84e 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800146c:	2000      	movs	r0, #0
 800146e:	f000 f84b 	bl	8001508 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001472:	20e1      	movs	r0, #225	@ 0xe1
 8001474:	f000 f83b 	bl	80014ee <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001478:	2000      	movs	r0, #0
 800147a:	f000 f845 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800147e:	2016      	movs	r0, #22
 8001480:	f000 f842 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001484:	201b      	movs	r0, #27
 8001486:	f000 f83f 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800148a:	2004      	movs	r0, #4
 800148c:	f000 f83c 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001490:	2011      	movs	r0, #17
 8001492:	f000 f839 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001496:	2007      	movs	r0, #7
 8001498:	f000 f836 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800149c:	2031      	movs	r0, #49	@ 0x31
 800149e:	f000 f833 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80014a2:	2033      	movs	r0, #51	@ 0x33
 80014a4:	f000 f830 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80014a8:	2042      	movs	r0, #66	@ 0x42
 80014aa:	f000 f82d 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80014ae:	2005      	movs	r0, #5
 80014b0:	f000 f82a 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80014b4:	200c      	movs	r0, #12
 80014b6:	f000 f827 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80014ba:	200a      	movs	r0, #10
 80014bc:	f000 f824 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80014c0:	2028      	movs	r0, #40	@ 0x28
 80014c2:	f000 f821 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80014c6:	202f      	movs	r0, #47	@ 0x2f
 80014c8:	f000 f81e 	bl	8001508 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80014cc:	200f      	movs	r0, #15
 80014ce:	f000 f81b 	bl	8001508 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80014d2:	2011      	movs	r0, #17
 80014d4:	f000 f80b 	bl	80014ee <ili9341_Write_Reg>
  LCD_Delay(200);
 80014d8:	20c8      	movs	r0, #200	@ 0xc8
 80014da:	f000 f97d 	bl	80017d8 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80014de:	2029      	movs	r0, #41	@ 0x29
 80014e0:	f000 f805 	bl	80014ee <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80014e4:	202c      	movs	r0, #44	@ 0x2c
 80014e6:	f000 f802 	bl	80014ee <ili9341_Write_Reg>
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}

080014ee <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f94a 	bl	8001794 <LCD_IO_WriteReg>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	4618      	mov	r0, r3
 8001516:	f000 f91b 	bl	8001750 <LCD_IO_WriteData>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001528:	4819      	ldr	r0, [pc, #100]	@ (8001590 <SPI_Init+0x6c>)
 800152a:	f004 fb88 	bl	8005c3e <HAL_SPI_GetState>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d12b      	bne.n	800158c <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001534:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <SPI_Init+0x6c>)
 8001536:	4a17      	ldr	r2, [pc, #92]	@ (8001594 <SPI_Init+0x70>)
 8001538:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800153a:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <SPI_Init+0x6c>)
 800153c:	2218      	movs	r2, #24
 800153e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001540:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <SPI_Init+0x6c>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001546:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <SPI_Init+0x6c>)
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800154c:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <SPI_Init+0x6c>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001552:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <SPI_Init+0x6c>)
 8001554:	2200      	movs	r2, #0
 8001556:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001558:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <SPI_Init+0x6c>)
 800155a:	2207      	movs	r2, #7
 800155c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800155e:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <SPI_Init+0x6c>)
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001564:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <SPI_Init+0x6c>)
 8001566:	2200      	movs	r2, #0
 8001568:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800156a:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <SPI_Init+0x6c>)
 800156c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001570:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001572:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <SPI_Init+0x6c>)
 8001574:	2200      	movs	r2, #0
 8001576:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001578:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <SPI_Init+0x6c>)
 800157a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800157e:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001580:	4803      	ldr	r0, [pc, #12]	@ (8001590 <SPI_Init+0x6c>)
 8001582:	f000 f833 	bl	80015ec <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001586:	4802      	ldr	r0, [pc, #8]	@ (8001590 <SPI_Init+0x6c>)
 8001588:	f004 f964 	bl	8005854 <HAL_SPI_Init>
  }
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200259b4 	.word	0x200259b4
 8001594:	40015000 	.word	0x40015000

08001598 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <SPI_Write+0x34>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	1db9      	adds	r1, r7, #6
 80015ac:	2201      	movs	r2, #1
 80015ae:	4808      	ldr	r0, [pc, #32]	@ (80015d0 <SPI_Write+0x38>)
 80015b0:	f004 fa01 	bl	80059b6 <HAL_SPI_Transmit>
 80015b4:	4603      	mov	r3, r0
 80015b6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80015be:	f000 f809 	bl	80015d4 <SPI_Error>
  }
}
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000000c 	.word	0x2000000c
 80015d0:	200259b4 	.word	0x200259b4

080015d4 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80015d8:	4803      	ldr	r0, [pc, #12]	@ (80015e8 <SPI_Error+0x14>)
 80015da:	f004 f9c4 	bl	8005966 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80015de:	f7ff ffa1 	bl	8001524 <SPI_Init>
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200259b4 	.word	0x200259b4

080015ec <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	@ 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	4b17      	ldr	r3, [pc, #92]	@ (8001658 <SPI_MspInit+0x6c>)
 80015fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fc:	4a16      	ldr	r2, [pc, #88]	@ (8001658 <SPI_MspInit+0x6c>)
 80015fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001602:	6453      	str	r3, [r2, #68]	@ 0x44
 8001604:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <SPI_MspInit+0x6c>)
 8001606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001608:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	4b10      	ldr	r3, [pc, #64]	@ (8001658 <SPI_MspInit+0x6c>)
 8001616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001618:	4a0f      	ldr	r2, [pc, #60]	@ (8001658 <SPI_MspInit+0x6c>)
 800161a:	f043 0320 	orr.w	r3, r3, #32
 800161e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001620:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <SPI_MspInit+0x6c>)
 8001622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001624:	f003 0320 	and.w	r3, r3, #32
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 800162c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001630:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001636:	2302      	movs	r3, #2
 8001638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800163a:	2301      	movs	r3, #1
 800163c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 800163e:	2305      	movs	r3, #5
 8001640:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	4804      	ldr	r0, [pc, #16]	@ (800165c <SPI_MspInit+0x70>)
 800164a:	f001 fc27 	bl	8002e9c <HAL_GPIO_Init>
}
 800164e:	bf00      	nop
 8001650:	3728      	adds	r7, #40	@ 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800
 800165c:	40021400 	.word	0x40021400

08001660 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001666:	4b36      	ldr	r3, [pc, #216]	@ (8001740 <LCD_IO_Init+0xe0>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d164      	bne.n	8001738 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800166e:	4b34      	ldr	r3, [pc, #208]	@ (8001740 <LCD_IO_Init+0xe0>)
 8001670:	2201      	movs	r2, #1
 8001672:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	4b32      	ldr	r3, [pc, #200]	@ (8001744 <LCD_IO_Init+0xe4>)
 800167a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167c:	4a31      	ldr	r2, [pc, #196]	@ (8001744 <LCD_IO_Init+0xe4>)
 800167e:	f043 0308 	orr.w	r3, r3, #8
 8001682:	6313      	str	r3, [r2, #48]	@ 0x30
 8001684:	4b2f      	ldr	r3, [pc, #188]	@ (8001744 <LCD_IO_Init+0xe4>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001690:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001694:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001696:	2301      	movs	r3, #1
 8001698:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800169e:	2302      	movs	r3, #2
 80016a0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	4619      	mov	r1, r3
 80016a8:	4827      	ldr	r0, [pc, #156]	@ (8001748 <LCD_IO_Init+0xe8>)
 80016aa:	f001 fbf7 	bl	8002e9c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <LCD_IO_Init+0xe4>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	4a23      	ldr	r2, [pc, #140]	@ (8001744 <LCD_IO_Init+0xe4>)
 80016b8:	f043 0308 	orr.w	r3, r3, #8
 80016bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016be:	4b21      	ldr	r3, [pc, #132]	@ (8001744 <LCD_IO_Init+0xe4>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80016ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80016d0:	2301      	movs	r3, #1
 80016d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80016d8:	2302      	movs	r3, #2
 80016da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	4619      	mov	r1, r3
 80016e2:	4819      	ldr	r0, [pc, #100]	@ (8001748 <LCD_IO_Init+0xe8>)
 80016e4:	f001 fbda 	bl	8002e9c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <LCD_IO_Init+0xe4>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f0:	4a14      	ldr	r2, [pc, #80]	@ (8001744 <LCD_IO_Init+0xe4>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <LCD_IO_Init+0xe4>)
 80016fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001704:	2304      	movs	r3, #4
 8001706:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001710:	2302      	movs	r3, #2
 8001712:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	4619      	mov	r1, r3
 800171a:	480c      	ldr	r0, [pc, #48]	@ (800174c <LCD_IO_Init+0xec>)
 800171c:	f001 fbbe 	bl	8002e9c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001720:	2200      	movs	r2, #0
 8001722:	2104      	movs	r1, #4
 8001724:	4809      	ldr	r0, [pc, #36]	@ (800174c <LCD_IO_Init+0xec>)
 8001726:	f001 fe71 	bl	800340c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800172a:	2201      	movs	r2, #1
 800172c:	2104      	movs	r1, #4
 800172e:	4807      	ldr	r0, [pc, #28]	@ (800174c <LCD_IO_Init+0xec>)
 8001730:	f001 fe6c 	bl	800340c <HAL_GPIO_WritePin>

    SPI_Init();
 8001734:	f7ff fef6 	bl	8001524 <SPI_Init>
  }
}
 8001738:	bf00      	nop
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20025a0c 	.word	0x20025a0c
 8001744:	40023800 	.word	0x40023800
 8001748:	40020c00 	.word	0x40020c00
 800174c:	40020800 	.word	0x40020800

08001750 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800175a:	2201      	movs	r2, #1
 800175c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001760:	480a      	ldr	r0, [pc, #40]	@ (800178c <LCD_IO_WriteData+0x3c>)
 8001762:	f001 fe53 	bl	800340c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001766:	2200      	movs	r2, #0
 8001768:	2104      	movs	r1, #4
 800176a:	4809      	ldr	r0, [pc, #36]	@ (8001790 <LCD_IO_WriteData+0x40>)
 800176c:	f001 fe4e 	bl	800340c <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff ff10 	bl	8001598 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001778:	2201      	movs	r2, #1
 800177a:	2104      	movs	r1, #4
 800177c:	4804      	ldr	r0, [pc, #16]	@ (8001790 <LCD_IO_WriteData+0x40>)
 800177e:	f001 fe45 	bl	800340c <HAL_GPIO_WritePin>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40020c00 	.word	0x40020c00
 8001790:	40020800 	.word	0x40020800

08001794 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017a4:	480a      	ldr	r0, [pc, #40]	@ (80017d0 <LCD_IO_WriteReg+0x3c>)
 80017a6:	f001 fe31 	bl	800340c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80017aa:	2200      	movs	r2, #0
 80017ac:	2104      	movs	r1, #4
 80017ae:	4809      	ldr	r0, [pc, #36]	@ (80017d4 <LCD_IO_WriteReg+0x40>)
 80017b0:	f001 fe2c 	bl	800340c <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff feed 	bl	8001598 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80017be:	2201      	movs	r2, #1
 80017c0:	2104      	movs	r1, #4
 80017c2:	4804      	ldr	r0, [pc, #16]	@ (80017d4 <LCD_IO_WriteReg+0x40>)
 80017c4:	f001 fe22 	bl	800340c <HAL_GPIO_WritePin>
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40020c00 	.word	0x40020c00
 80017d4:	40020800 	.word	0x40020800

080017d8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f001 fa51 	bl	8002c88 <HAL_Delay>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017f2:	f001 f9d7 	bl	8002ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f6:	f000 f817 	bl	8001828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017fa:	f000 fa07 	bl	8001c0c <MX_GPIO_Init>
  MX_LTDC_Init();
 80017fe:	f000 f8bd 	bl	800197c <MX_LTDC_Init>
  MX_RNG_Init();
 8001802:	f000 f96d 	bl	8001ae0 <MX_RNG_Init>
  MX_TIM2_Init();
 8001806:	f000 f9b5 	bl	8001b74 <MX_TIM2_Init>
  MX_SPI5_Init();
 800180a:	f000 f97d 	bl	8001b08 <MX_SPI5_Init>
  MX_I2C3_Init();
 800180e:	f000 f875 	bl	80018fc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8001812:	f7fe fe89 	bl	8000528 <ApplicationInit>
  ApplicationFirstScreen();
 8001816:	f7fe fe9f 	bl	8000558 <ApplicationFirstScreen>

  //LCD_Visual_Demo();
  HAL_Delay(5000);
 800181a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800181e:	f001 fa33 	bl	8002c88 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  LCD_Touch_Polling_Demo();
 8001822:	f7fe fe9f 	bl	8000564 <LCD_Touch_Polling_Demo>
 8001826:	e7fc      	b.n	8001822 <main+0x34>

08001828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b094      	sub	sp, #80	@ 0x50
 800182c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800182e:	f107 0320 	add.w	r3, r7, #32
 8001832:	2230      	movs	r2, #48	@ 0x30
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f005 f8f6 	bl	8006a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800184c:	2300      	movs	r3, #0
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	4b28      	ldr	r3, [pc, #160]	@ (80018f4 <SystemClock_Config+0xcc>)
 8001852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001854:	4a27      	ldr	r2, [pc, #156]	@ (80018f4 <SystemClock_Config+0xcc>)
 8001856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800185a:	6413      	str	r3, [r2, #64]	@ 0x40
 800185c:	4b25      	ldr	r3, [pc, #148]	@ (80018f4 <SystemClock_Config+0xcc>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001868:	2300      	movs	r3, #0
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	4b22      	ldr	r3, [pc, #136]	@ (80018f8 <SystemClock_Config+0xd0>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a21      	ldr	r2, [pc, #132]	@ (80018f8 <SystemClock_Config+0xd0>)
 8001872:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	4b1f      	ldr	r3, [pc, #124]	@ (80018f8 <SystemClock_Config+0xd0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001884:	2301      	movs	r3, #1
 8001886:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001888:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800188e:	2302      	movs	r3, #2
 8001890:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001892:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001896:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001898:	2308      	movs	r3, #8
 800189a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800189c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80018a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018a2:	2302      	movs	r3, #2
 80018a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018a6:	2307      	movs	r3, #7
 80018a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018aa:	f107 0320 	add.w	r3, r7, #32
 80018ae:	4618      	mov	r0, r3
 80018b0:	f003 f90c 	bl	8004acc <HAL_RCC_OscConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80018ba:	f000 fb55 	bl	8001f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018be:	230f      	movs	r3, #15
 80018c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018c2:	2302      	movs	r3, #2
 80018c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	2105      	movs	r1, #5
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 fb6d 	bl	8004fbc <HAL_RCC_ClockConfig>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80018e8:	f000 fb3e 	bl	8001f68 <Error_Handler>
  }
}
 80018ec:	bf00      	nop
 80018ee:	3750      	adds	r7, #80	@ 0x50
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40007000 	.word	0x40007000

080018fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001900:	4b1b      	ldr	r3, [pc, #108]	@ (8001970 <MX_I2C3_Init+0x74>)
 8001902:	4a1c      	ldr	r2, [pc, #112]	@ (8001974 <MX_I2C3_Init+0x78>)
 8001904:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001906:	4b1a      	ldr	r3, [pc, #104]	@ (8001970 <MX_I2C3_Init+0x74>)
 8001908:	4a1b      	ldr	r2, [pc, #108]	@ (8001978 <MX_I2C3_Init+0x7c>)
 800190a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800190c:	4b18      	ldr	r3, [pc, #96]	@ (8001970 <MX_I2C3_Init+0x74>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001912:	4b17      	ldr	r3, [pc, #92]	@ (8001970 <MX_I2C3_Init+0x74>)
 8001914:	2200      	movs	r2, #0
 8001916:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001918:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <MX_I2C3_Init+0x74>)
 800191a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800191e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001920:	4b13      	ldr	r3, [pc, #76]	@ (8001970 <MX_I2C3_Init+0x74>)
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001926:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <MX_I2C3_Init+0x74>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800192c:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <MX_I2C3_Init+0x74>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001932:	4b0f      	ldr	r3, [pc, #60]	@ (8001970 <MX_I2C3_Init+0x74>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001938:	480d      	ldr	r0, [pc, #52]	@ (8001970 <MX_I2C3_Init+0x74>)
 800193a:	f001 fd81 	bl	8003440 <HAL_I2C_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001944:	f000 fb10 	bl	8001f68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001948:	2100      	movs	r1, #0
 800194a:	4809      	ldr	r0, [pc, #36]	@ (8001970 <MX_I2C3_Init+0x74>)
 800194c:	f002 fd9c 	bl	8004488 <HAL_I2CEx_ConfigAnalogFilter>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001956:	f000 fb07 	bl	8001f68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800195a:	2100      	movs	r1, #0
 800195c:	4804      	ldr	r0, [pc, #16]	@ (8001970 <MX_I2C3_Init+0x74>)
 800195e:	f002 fdcf 	bl	8004500 <HAL_I2CEx_ConfigDigitalFilter>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001968:	f000 fafe 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20025a10 	.word	0x20025a10
 8001974:	40005c00 	.word	0x40005c00
 8001978:	000186a0 	.word	0x000186a0

0800197c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b09a      	sub	sp, #104	@ 0x68
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001982:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001986:	2234      	movs	r2, #52	@ 0x34
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f005 f84c 	bl	8006a28 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001990:	463b      	mov	r3, r7
 8001992:	2234      	movs	r2, #52	@ 0x34
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f005 f846 	bl	8006a28 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800199c:	4b4e      	ldr	r3, [pc, #312]	@ (8001ad8 <MX_LTDC_Init+0x15c>)
 800199e:	4a4f      	ldr	r2, [pc, #316]	@ (8001adc <MX_LTDC_Init+0x160>)
 80019a0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80019a2:	4b4d      	ldr	r3, [pc, #308]	@ (8001ad8 <MX_LTDC_Init+0x15c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80019a8:	4b4b      	ldr	r3, [pc, #300]	@ (8001ad8 <MX_LTDC_Init+0x15c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80019ae:	4b4a      	ldr	r3, [pc, #296]	@ (8001ad8 <MX_LTDC_Init+0x15c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80019b4:	4b48      	ldr	r3, [pc, #288]	@ (8001ad8 <MX_LTDC_Init+0x15c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80019ba:	4b47      	ldr	r3, [pc, #284]	@ (8001ad8 <MX_LTDC_Init+0x15c>)
 80019bc:	2207      	movs	r2, #7
 80019be:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80019c0:	4b45      	ldr	r3, [pc, #276]	@ (8001ad8 <MX_LTDC_Init+0x15c>)
 80019c2:	2203      	movs	r2, #3
 80019c4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80019c6:	4b44      	ldr	r3, [pc, #272]	@ (8001ad8 <MX_LTDC_Init+0x15c>)
 80019c8:	220e      	movs	r2, #14
 80019ca:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80019cc:	4b42      	ldr	r3, [pc, #264]	@ (8001ad8 <MX_LTDC_Init+0x15c>)
 80019ce:	2205      	movs	r2, #5
 80019d0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80019d2:	4b41      	ldr	r3, [pc, #260]	@ (8001ad8 <MX_LTDC_Init+0x15c>)
 80019d4:	f240 228e 	movw	r2, #654	@ 0x28e
 80019d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80019da:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad8 <MX_LTDC_Init+0x15c>)
 80019dc:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80019e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80019e2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ad8 <MX_LTDC_Init+0x15c>)
 80019e4:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80019e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80019ea:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad8 <MX_LTDC_Init+0x15c>)
 80019ec:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80019f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80019f2:	4b39      	ldr	r3, [pc, #228]	@ (8001ad8 <MX_LTDC_Init+0x15c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80019fa:	4b37      	ldr	r3, [pc, #220]	@ (8001ad8 <MX_LTDC_Init+0x15c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001a02:	4b35      	ldr	r3, [pc, #212]	@ (8001ad8 <MX_LTDC_Init+0x15c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001a0a:	4833      	ldr	r0, [pc, #204]	@ (8001ad8 <MX_LTDC_Init+0x15c>)
 8001a0c:	f002 fdb8 	bl	8004580 <HAL_LTDC_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001a16:	f000 faa7 	bl	8001f68 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001a36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a3a:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001a3c:	2305      	movs	r3, #5
 8001a3e:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001a5e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a62:	2200      	movs	r2, #0
 8001a64:	4619      	mov	r1, r3
 8001a66:	481c      	ldr	r0, [pc, #112]	@ (8001ad8 <MX_LTDC_Init+0x15c>)
 8001a68:	f002 fe5a 	bl	8004720 <HAL_LTDC_ConfigLayer>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001a72:	f000 fa79 	bl	8001f68 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001a92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a96:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001a98:	2305      	movs	r3, #5
 8001a9a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001aba:	463b      	mov	r3, r7
 8001abc:	2201      	movs	r2, #1
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4805      	ldr	r0, [pc, #20]	@ (8001ad8 <MX_LTDC_Init+0x15c>)
 8001ac2:	f002 fe2d 	bl	8004720 <HAL_LTDC_ConfigLayer>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001acc:	f000 fa4c 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001ad0:	bf00      	nop
 8001ad2:	3768      	adds	r7, #104	@ 0x68
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20025a64 	.word	0x20025a64
 8001adc:	40016800 	.word	0x40016800

08001ae0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <MX_RNG_Init+0x20>)
 8001ae6:	4a07      	ldr	r2, [pc, #28]	@ (8001b04 <MX_RNG_Init+0x24>)
 8001ae8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001aea:	4805      	ldr	r0, [pc, #20]	@ (8001b00 <MX_RNG_Init+0x20>)
 8001aec:	f003 fe32 	bl	8005754 <HAL_RNG_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001af6:	f000 fa37 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20025b0c 	.word	0x20025b0c
 8001b04:	50060800 	.word	0x50060800

08001b08 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001b0c:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <MX_SPI5_Init+0x64>)
 8001b0e:	4a18      	ldr	r2, [pc, #96]	@ (8001b70 <MX_SPI5_Init+0x68>)
 8001b10:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001b12:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <MX_SPI5_Init+0x64>)
 8001b14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b18:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001b1a:	4b14      	ldr	r3, [pc, #80]	@ (8001b6c <MX_SPI5_Init+0x64>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b20:	4b12      	ldr	r3, [pc, #72]	@ (8001b6c <MX_SPI5_Init+0x64>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b26:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <MX_SPI5_Init+0x64>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <MX_SPI5_Init+0x64>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001b32:	4b0e      	ldr	r3, [pc, #56]	@ (8001b6c <MX_SPI5_Init+0x64>)
 8001b34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b38:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <MX_SPI5_Init+0x64>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b40:	4b0a      	ldr	r3, [pc, #40]	@ (8001b6c <MX_SPI5_Init+0x64>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b46:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <MX_SPI5_Init+0x64>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b4c:	4b07      	ldr	r3, [pc, #28]	@ (8001b6c <MX_SPI5_Init+0x64>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001b52:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <MX_SPI5_Init+0x64>)
 8001b54:	220a      	movs	r2, #10
 8001b56:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001b58:	4804      	ldr	r0, [pc, #16]	@ (8001b6c <MX_SPI5_Init+0x64>)
 8001b5a:	f003 fe7b 	bl	8005854 <HAL_SPI_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001b64:	f000 fa00 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20025b1c 	.word	0x20025b1c
 8001b70:	40015000 	.word	0x40015000

08001b74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7a:	f107 0308 	add.w	r3, r7, #8
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b88:	463b      	mov	r3, r7
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b90:	4b1d      	ldr	r3, [pc, #116]	@ (8001c08 <MX_TIM2_Init+0x94>)
 8001b92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	@ (8001c08 <MX_TIM2_Init+0x94>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c08 <MX_TIM2_Init+0x94>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	@ (8001c08 <MX_TIM2_Init+0x94>)
 8001ba6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001baa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bac:	4b16      	ldr	r3, [pc, #88]	@ (8001c08 <MX_TIM2_Init+0x94>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb2:	4b15      	ldr	r3, [pc, #84]	@ (8001c08 <MX_TIM2_Init+0x94>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bb8:	4813      	ldr	r0, [pc, #76]	@ (8001c08 <MX_TIM2_Init+0x94>)
 8001bba:	f004 f92b 	bl	8005e14 <HAL_TIM_Base_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bc4:	f000 f9d0 	bl	8001f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480c      	ldr	r0, [pc, #48]	@ (8001c08 <MX_TIM2_Init+0x94>)
 8001bd6:	f004 f96c 	bl	8005eb2 <HAL_TIM_ConfigClockSource>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001be0:	f000 f9c2 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be4:	2300      	movs	r3, #0
 8001be6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bec:	463b      	mov	r3, r7
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4805      	ldr	r0, [pc, #20]	@ (8001c08 <MX_TIM2_Init+0x94>)
 8001bf2:	f004 fb6b 	bl	80062cc <HAL_TIMEx_MasterConfigSynchronization>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001bfc:	f000 f9b4 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20025b74 	.word	0x20025b74

08001c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08e      	sub	sp, #56	@ 0x38
 8001c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
 8001c26:	4bb2      	ldr	r3, [pc, #712]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	4ab1      	ldr	r2, [pc, #708]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c32:	4baf      	ldr	r3, [pc, #700]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	623b      	str	r3, [r7, #32]
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	4bab      	ldr	r3, [pc, #684]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	4aaa      	ldr	r2, [pc, #680]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001c48:	f043 0320 	orr.w	r3, r3, #32
 8001c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4e:	4ba8      	ldr	r3, [pc, #672]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	f003 0320 	and.w	r3, r3, #32
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
 8001c5e:	4ba4      	ldr	r3, [pc, #656]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	4aa3      	ldr	r2, [pc, #652]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001c64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6a:	4ba1      	ldr	r3, [pc, #644]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c72:	61bb      	str	r3, [r7, #24]
 8001c74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	4b9d      	ldr	r3, [pc, #628]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	4a9c      	ldr	r2, [pc, #624]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c86:	4b9a      	ldr	r3, [pc, #616]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	4b96      	ldr	r3, [pc, #600]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	4a95      	ldr	r2, [pc, #596]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001c9c:	f043 0302 	orr.w	r3, r3, #2
 8001ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca2:	4b93      	ldr	r3, [pc, #588]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b8f      	ldr	r3, [pc, #572]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	4a8e      	ldr	r2, [pc, #568]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cbe:	4b8c      	ldr	r3, [pc, #560]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	4b88      	ldr	r3, [pc, #544]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	4a87      	ldr	r2, [pc, #540]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001cd4:	f043 0310 	orr.w	r3, r3, #16
 8001cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cda:	4b85      	ldr	r3, [pc, #532]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	4b81      	ldr	r3, [pc, #516]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	4a80      	ldr	r2, [pc, #512]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001cf0:	f043 0308 	orr.w	r3, r3, #8
 8001cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf6:	4b7e      	ldr	r3, [pc, #504]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2116      	movs	r1, #22
 8001d06:	487b      	ldr	r0, [pc, #492]	@ (8001ef4 <MX_GPIO_Init+0x2e8>)
 8001d08:	f001 fb80 	bl	800340c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2180      	movs	r1, #128	@ 0x80
 8001d10:	4879      	ldr	r0, [pc, #484]	@ (8001ef8 <MX_GPIO_Init+0x2ec>)
 8001d12:	f001 fb7b 	bl	800340c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001d16:	2200      	movs	r2, #0
 8001d18:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001d1c:	4877      	ldr	r0, [pc, #476]	@ (8001efc <MX_GPIO_Init+0x2f0>)
 8001d1e:	f001 fb75 	bl	800340c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001d22:	2200      	movs	r2, #0
 8001d24:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001d28:	4875      	ldr	r0, [pc, #468]	@ (8001f00 <MX_GPIO_Init+0x2f4>)
 8001d2a:	f001 fb6f 	bl	800340c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001d2e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001d32:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	2302      	movs	r3, #2
 8001d36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d40:	230c      	movs	r3, #12
 8001d42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d48:	4619      	mov	r1, r3
 8001d4a:	486e      	ldr	r0, [pc, #440]	@ (8001f04 <MX_GPIO_Init+0x2f8>)
 8001d4c:	f001 f8a6 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001d50:	2301      	movs	r3, #1
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d60:	230c      	movs	r3, #12
 8001d62:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001d64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4862      	ldr	r0, [pc, #392]	@ (8001ef4 <MX_GPIO_Init+0x2e8>)
 8001d6c:	f001 f896 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001d70:	2316      	movs	r3, #22
 8001d72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d74:	2301      	movs	r3, #1
 8001d76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d84:	4619      	mov	r1, r3
 8001d86:	485b      	ldr	r0, [pc, #364]	@ (8001ef4 <MX_GPIO_Init+0x2e8>)
 8001d88:	f001 f888 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001d8c:	f248 0307 	movw	r3, #32775	@ 0x8007
 8001d90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d92:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001d96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001da0:	4619      	mov	r1, r3
 8001da2:	4855      	ldr	r0, [pc, #340]	@ (8001ef8 <MX_GPIO_Init+0x2ec>)
 8001da4:	f001 f87a 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001da8:	2380      	movs	r3, #128	@ 0x80
 8001daa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dac:	2301      	movs	r3, #1
 8001dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001db8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	484e      	ldr	r0, [pc, #312]	@ (8001ef8 <MX_GPIO_Init+0x2ec>)
 8001dc0:	f001 f86c 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001dc8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001dd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4846      	ldr	r0, [pc, #280]	@ (8001ef4 <MX_GPIO_Init+0x2e8>)
 8001dda:	f001 f85f 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001dde:	2304      	movs	r3, #4
 8001de0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de2:	2300      	movs	r3, #0
 8001de4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dee:	4619      	mov	r1, r3
 8001df0:	4845      	ldr	r0, [pc, #276]	@ (8001f08 <MX_GPIO_Init+0x2fc>)
 8001df2:	f001 f853 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001df6:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e08:	230c      	movs	r3, #12
 8001e0a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e10:	4619      	mov	r1, r3
 8001e12:	483b      	ldr	r0, [pc, #236]	@ (8001f00 <MX_GPIO_Init+0x2f4>)
 8001e14:	f001 f842 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001e18:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001e1c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e26:	2303      	movs	r3, #3
 8001e28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e2a:	230c      	movs	r3, #12
 8001e2c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e32:	4619      	mov	r1, r3
 8001e34:	4835      	ldr	r0, [pc, #212]	@ (8001f0c <MX_GPIO_Init+0x300>)
 8001e36:	f001 f831 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001e3a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001e4c:	230c      	movs	r3, #12
 8001e4e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e54:	4619      	mov	r1, r3
 8001e56:	482c      	ldr	r0, [pc, #176]	@ (8001f08 <MX_GPIO_Init+0x2fc>)
 8001e58:	f001 f820 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001e5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e62:	2300      	movs	r3, #0
 8001e64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001e6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4825      	ldr	r0, [pc, #148]	@ (8001f08 <MX_GPIO_Init+0x2fc>)
 8001e72:	f001 f813 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001e76:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001e7a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e84:	2303      	movs	r3, #3
 8001e86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e88:	230c      	movs	r3, #12
 8001e8a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e90:	4619      	mov	r1, r3
 8001e92:	481a      	ldr	r0, [pc, #104]	@ (8001efc <MX_GPIO_Init+0x2f0>)
 8001e94:	f001 f802 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001e98:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001ea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4813      	ldr	r0, [pc, #76]	@ (8001efc <MX_GPIO_Init+0x2f0>)
 8001eae:	f000 fff5 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001eb2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ec4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ec8:	4619      	mov	r1, r3
 8001eca:	480c      	ldr	r0, [pc, #48]	@ (8001efc <MX_GPIO_Init+0x2f0>)
 8001ecc:	f000 ffe6 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001ed0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ee2:	2307      	movs	r3, #7
 8001ee4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eea:	4619      	mov	r1, r3
 8001eec:	e010      	b.n	8001f10 <MX_GPIO_Init+0x304>
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020800 	.word	0x40020800
 8001ef8:	40020000 	.word	0x40020000
 8001efc:	40020c00 	.word	0x40020c00
 8001f00:	40021800 	.word	0x40021800
 8001f04:	40021400 	.word	0x40021400
 8001f08:	40020400 	.word	0x40020400
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	4812      	ldr	r0, [pc, #72]	@ (8001f5c <MX_GPIO_Init+0x350>)
 8001f12:	f000 ffc3 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001f16:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2300      	movs	r3, #0
 8001f26:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	480c      	ldr	r0, [pc, #48]	@ (8001f60 <MX_GPIO_Init+0x354>)
 8001f30:	f000 ffb4 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001f34:	2360      	movs	r3, #96	@ 0x60
 8001f36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f40:	2303      	movs	r3, #3
 8001f42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f44:	230c      	movs	r3, #12
 8001f46:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4805      	ldr	r0, [pc, #20]	@ (8001f64 <MX_GPIO_Init+0x358>)
 8001f50:	f000 ffa4 	bl	8002e9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f54:	bf00      	nop
 8001f56:	3738      	adds	r7, #56	@ 0x38
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40020000 	.word	0x40020000
 8001f60:	40021800 	.word	0x40021800
 8001f64:	40020400 	.word	0x40020400

08001f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f6c:	b672      	cpsid	i
}
 8001f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f70:	bf00      	nop
 8001f72:	e7fd      	b.n	8001f70 <Error_Handler+0x8>

08001f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
 8001f7e:	4b10      	ldr	r3, [pc, #64]	@ (8001fc0 <HAL_MspInit+0x4c>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f82:	4a0f      	ldr	r2, [pc, #60]	@ (8001fc0 <HAL_MspInit+0x4c>)
 8001f84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc0 <HAL_MspInit+0x4c>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	4b09      	ldr	r3, [pc, #36]	@ (8001fc0 <HAL_MspInit+0x4c>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	4a08      	ldr	r2, [pc, #32]	@ (8001fc0 <HAL_MspInit+0x4c>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa6:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <HAL_MspInit+0x4c>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fb2:	2007      	movs	r0, #7
 8001fb4:	f000 ff3e 	bl	8002e34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40023800 	.word	0x40023800

08001fc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	@ 0x28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a29      	ldr	r2, [pc, #164]	@ (8002088 <HAL_I2C_MspInit+0xc4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d14b      	bne.n	800207e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	4b28      	ldr	r3, [pc, #160]	@ (800208c <HAL_I2C_MspInit+0xc8>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	4a27      	ldr	r2, [pc, #156]	@ (800208c <HAL_I2C_MspInit+0xc8>)
 8001ff0:	f043 0304 	orr.w	r3, r3, #4
 8001ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff6:	4b25      	ldr	r3, [pc, #148]	@ (800208c <HAL_I2C_MspInit+0xc8>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	4b21      	ldr	r3, [pc, #132]	@ (800208c <HAL_I2C_MspInit+0xc8>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	4a20      	ldr	r2, [pc, #128]	@ (800208c <HAL_I2C_MspInit+0xc8>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6313      	str	r3, [r2, #48]	@ 0x30
 8002012:	4b1e      	ldr	r3, [pc, #120]	@ (800208c <HAL_I2C_MspInit+0xc8>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800201e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002024:	2312      	movs	r3, #18
 8002026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202c:	2300      	movs	r3, #0
 800202e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002030:	2304      	movs	r3, #4
 8002032:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	4619      	mov	r1, r3
 800203a:	4815      	ldr	r0, [pc, #84]	@ (8002090 <HAL_I2C_MspInit+0xcc>)
 800203c:	f000 ff2e 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002040:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002046:	2312      	movs	r3, #18
 8002048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002052:	2304      	movs	r3, #4
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002056:	f107 0314 	add.w	r3, r7, #20
 800205a:	4619      	mov	r1, r3
 800205c:	480d      	ldr	r0, [pc, #52]	@ (8002094 <HAL_I2C_MspInit+0xd0>)
 800205e:	f000 ff1d 	bl	8002e9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	4b09      	ldr	r3, [pc, #36]	@ (800208c <HAL_I2C_MspInit+0xc8>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	4a08      	ldr	r2, [pc, #32]	@ (800208c <HAL_I2C_MspInit+0xc8>)
 800206c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002070:	6413      	str	r3, [r2, #64]	@ 0x40
 8002072:	4b06      	ldr	r3, [pc, #24]	@ (800208c <HAL_I2C_MspInit+0xc8>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800207e:	bf00      	nop
 8002080:	3728      	adds	r7, #40	@ 0x28
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40005c00 	.word	0x40005c00
 800208c:	40023800 	.word	0x40023800
 8002090:	40020800 	.word	0x40020800
 8002094:	40020000 	.word	0x40020000

08002098 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b09a      	sub	sp, #104	@ 0x68
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020b4:	2230      	movs	r2, #48	@ 0x30
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f004 fcb5 	bl	8006a28 <memset>
  if(hltdc->Instance==LTDC)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a81      	ldr	r2, [pc, #516]	@ (80022c8 <HAL_LTDC_MspInit+0x230>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	f040 80fb 	bne.w	80022c0 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80020ca:	2308      	movs	r3, #8
 80020cc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 80020ce:	23c8      	movs	r3, #200	@ 0xc8
 80020d0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80020d2:	2302      	movs	r3, #2
 80020d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 80020d6:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80020da:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020e0:	4618      	mov	r0, r3
 80020e2:	f003 f977 	bl	80053d4 <HAL_RCCEx_PeriphCLKConfig>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 80020ec:	f7ff ff3c 	bl	8001f68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	623b      	str	r3, [r7, #32]
 80020f4:	4b75      	ldr	r3, [pc, #468]	@ (80022cc <HAL_LTDC_MspInit+0x234>)
 80020f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f8:	4a74      	ldr	r2, [pc, #464]	@ (80022cc <HAL_LTDC_MspInit+0x234>)
 80020fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80020fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8002100:	4b72      	ldr	r3, [pc, #456]	@ (80022cc <HAL_LTDC_MspInit+0x234>)
 8002102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002104:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002108:	623b      	str	r3, [r7, #32]
 800210a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800210c:	2300      	movs	r3, #0
 800210e:	61fb      	str	r3, [r7, #28]
 8002110:	4b6e      	ldr	r3, [pc, #440]	@ (80022cc <HAL_LTDC_MspInit+0x234>)
 8002112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002114:	4a6d      	ldr	r2, [pc, #436]	@ (80022cc <HAL_LTDC_MspInit+0x234>)
 8002116:	f043 0320 	orr.w	r3, r3, #32
 800211a:	6313      	str	r3, [r2, #48]	@ 0x30
 800211c:	4b6b      	ldr	r3, [pc, #428]	@ (80022cc <HAL_LTDC_MspInit+0x234>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	61fb      	str	r3, [r7, #28]
 8002126:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002128:	2300      	movs	r3, #0
 800212a:	61bb      	str	r3, [r7, #24]
 800212c:	4b67      	ldr	r3, [pc, #412]	@ (80022cc <HAL_LTDC_MspInit+0x234>)
 800212e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002130:	4a66      	ldr	r2, [pc, #408]	@ (80022cc <HAL_LTDC_MspInit+0x234>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6313      	str	r3, [r2, #48]	@ 0x30
 8002138:	4b64      	ldr	r3, [pc, #400]	@ (80022cc <HAL_LTDC_MspInit+0x234>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	61bb      	str	r3, [r7, #24]
 8002142:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	4b60      	ldr	r3, [pc, #384]	@ (80022cc <HAL_LTDC_MspInit+0x234>)
 800214a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214c:	4a5f      	ldr	r2, [pc, #380]	@ (80022cc <HAL_LTDC_MspInit+0x234>)
 800214e:	f043 0302 	orr.w	r3, r3, #2
 8002152:	6313      	str	r3, [r2, #48]	@ 0x30
 8002154:	4b5d      	ldr	r3, [pc, #372]	@ (80022cc <HAL_LTDC_MspInit+0x234>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002160:	2300      	movs	r3, #0
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	4b59      	ldr	r3, [pc, #356]	@ (80022cc <HAL_LTDC_MspInit+0x234>)
 8002166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002168:	4a58      	ldr	r2, [pc, #352]	@ (80022cc <HAL_LTDC_MspInit+0x234>)
 800216a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800216e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002170:	4b56      	ldr	r3, [pc, #344]	@ (80022cc <HAL_LTDC_MspInit+0x234>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	4b52      	ldr	r3, [pc, #328]	@ (80022cc <HAL_LTDC_MspInit+0x234>)
 8002182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002184:	4a51      	ldr	r2, [pc, #324]	@ (80022cc <HAL_LTDC_MspInit+0x234>)
 8002186:	f043 0304 	orr.w	r3, r3, #4
 800218a:	6313      	str	r3, [r2, #48]	@ 0x30
 800218c:	4b4f      	ldr	r3, [pc, #316]	@ (80022cc <HAL_LTDC_MspInit+0x234>)
 800218e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002198:	2300      	movs	r3, #0
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	4b4b      	ldr	r3, [pc, #300]	@ (80022cc <HAL_LTDC_MspInit+0x234>)
 800219e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a0:	4a4a      	ldr	r2, [pc, #296]	@ (80022cc <HAL_LTDC_MspInit+0x234>)
 80021a2:	f043 0308 	orr.w	r3, r3, #8
 80021a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a8:	4b48      	ldr	r3, [pc, #288]	@ (80022cc <HAL_LTDC_MspInit+0x234>)
 80021aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80021b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021b8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2300      	movs	r3, #0
 80021c4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021c6:	230e      	movs	r3, #14
 80021c8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80021ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021ce:	4619      	mov	r1, r3
 80021d0:	483f      	ldr	r0, [pc, #252]	@ (80022d0 <HAL_LTDC_MspInit+0x238>)
 80021d2:	f000 fe63 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80021d6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80021da:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e4:	2300      	movs	r3, #0
 80021e6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021e8:	230e      	movs	r3, #14
 80021ea:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021f0:	4619      	mov	r1, r3
 80021f2:	4838      	ldr	r0, [pc, #224]	@ (80022d4 <HAL_LTDC_MspInit+0x23c>)
 80021f4:	f000 fe52 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80021f8:	2303      	movs	r3, #3
 80021fa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	2300      	movs	r3, #0
 8002206:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002208:	2309      	movs	r3, #9
 800220a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002210:	4619      	mov	r1, r3
 8002212:	4831      	ldr	r0, [pc, #196]	@ (80022d8 <HAL_LTDC_MspInit+0x240>)
 8002214:	f000 fe42 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002218:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800221c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221e:	2302      	movs	r3, #2
 8002220:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800222a:	230e      	movs	r3, #14
 800222c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002232:	4619      	mov	r1, r3
 8002234:	4828      	ldr	r0, [pc, #160]	@ (80022d8 <HAL_LTDC_MspInit+0x240>)
 8002236:	f000 fe31 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800223a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800223e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800224c:	230e      	movs	r3, #14
 800224e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002250:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002254:	4619      	mov	r1, r3
 8002256:	4821      	ldr	r0, [pc, #132]	@ (80022dc <HAL_LTDC_MspInit+0x244>)
 8002258:	f000 fe20 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800225c:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002260:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226a:	2300      	movs	r3, #0
 800226c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800226e:	230e      	movs	r3, #14
 8002270:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002272:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002276:	4619      	mov	r1, r3
 8002278:	4819      	ldr	r0, [pc, #100]	@ (80022e0 <HAL_LTDC_MspInit+0x248>)
 800227a:	f000 fe0f 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800227e:	2348      	movs	r3, #72	@ 0x48
 8002280:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	2300      	movs	r3, #0
 800228c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800228e:	230e      	movs	r3, #14
 8002290:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002292:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002296:	4619      	mov	r1, r3
 8002298:	4812      	ldr	r0, [pc, #72]	@ (80022e4 <HAL_LTDC_MspInit+0x24c>)
 800229a:	f000 fdff 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800229e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80022a2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ac:	2300      	movs	r3, #0
 80022ae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80022b0:	2309      	movs	r3, #9
 80022b2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022b8:	4619      	mov	r1, r3
 80022ba:	4808      	ldr	r0, [pc, #32]	@ (80022dc <HAL_LTDC_MspInit+0x244>)
 80022bc:	f000 fdee 	bl	8002e9c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80022c0:	bf00      	nop
 80022c2:	3768      	adds	r7, #104	@ 0x68
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40016800 	.word	0x40016800
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40021400 	.word	0x40021400
 80022d4:	40020000 	.word	0x40020000
 80022d8:	40020400 	.word	0x40020400
 80022dc:	40021800 	.word	0x40021800
 80022e0:	40020800 	.word	0x40020800
 80022e4:	40020c00 	.word	0x40020c00

080022e8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002324 <HAL_RNG_MspInit+0x3c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d10d      	bne.n	8002316 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002328 <HAL_RNG_MspInit+0x40>)
 8002300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002302:	4a09      	ldr	r2, [pc, #36]	@ (8002328 <HAL_RNG_MspInit+0x40>)
 8002304:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002308:	6353      	str	r3, [r2, #52]	@ 0x34
 800230a:	4b07      	ldr	r3, [pc, #28]	@ (8002328 <HAL_RNG_MspInit+0x40>)
 800230c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800230e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	50060800 	.word	0x50060800
 8002328:	40023800 	.word	0x40023800

0800232c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	@ 0x28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 0314 	add.w	r3, r7, #20
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a19      	ldr	r2, [pc, #100]	@ (80023b0 <HAL_SPI_MspInit+0x84>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d12c      	bne.n	80023a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	4b18      	ldr	r3, [pc, #96]	@ (80023b4 <HAL_SPI_MspInit+0x88>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002356:	4a17      	ldr	r2, [pc, #92]	@ (80023b4 <HAL_SPI_MspInit+0x88>)
 8002358:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800235c:	6453      	str	r3, [r2, #68]	@ 0x44
 800235e:	4b15      	ldr	r3, [pc, #84]	@ (80023b4 <HAL_SPI_MspInit+0x88>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b11      	ldr	r3, [pc, #68]	@ (80023b4 <HAL_SPI_MspInit+0x88>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	4a10      	ldr	r2, [pc, #64]	@ (80023b4 <HAL_SPI_MspInit+0x88>)
 8002374:	f043 0320 	orr.w	r3, r3, #32
 8002378:	6313      	str	r3, [r2, #48]	@ 0x30
 800237a:	4b0e      	ldr	r3, [pc, #56]	@ (80023b4 <HAL_SPI_MspInit+0x88>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	f003 0320 	and.w	r3, r3, #32
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002386:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800238a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002398:	2305      	movs	r3, #5
 800239a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800239c:	f107 0314 	add.w	r3, r7, #20
 80023a0:	4619      	mov	r1, r3
 80023a2:	4805      	ldr	r0, [pc, #20]	@ (80023b8 <HAL_SPI_MspInit+0x8c>)
 80023a4:	f000 fd7a 	bl	8002e9c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80023a8:	bf00      	nop
 80023aa:	3728      	adds	r7, #40	@ 0x28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40015000 	.word	0x40015000
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40021400 	.word	0x40021400

080023bc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a08      	ldr	r2, [pc, #32]	@ (80023ec <HAL_SPI_MspDeInit+0x30>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d10a      	bne.n	80023e4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80023ce:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <HAL_SPI_MspDeInit+0x34>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d2:	4a07      	ldr	r2, [pc, #28]	@ (80023f0 <HAL_SPI_MspDeInit+0x34>)
 80023d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80023d8:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80023da:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80023de:	4805      	ldr	r0, [pc, #20]	@ (80023f4 <HAL_SPI_MspDeInit+0x38>)
 80023e0:	f000 ff08 	bl	80031f4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40015000 	.word	0x40015000
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40021400 	.word	0x40021400

080023f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002408:	d10d      	bne.n	8002426 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <HAL_TIM_Base_MspInit+0x3c>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	4a08      	ldr	r2, [pc, #32]	@ (8002434 <HAL_TIM_Base_MspInit+0x3c>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6413      	str	r3, [r2, #64]	@ 0x40
 800241a:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <HAL_TIM_Base_MspInit+0x3c>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800

08002438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800243c:	bf00      	nop
 800243e:	e7fd      	b.n	800243c <NMI_Handler+0x4>

08002440 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <HardFault_Handler+0x4>

08002448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <MemManage_Handler+0x4>

08002450 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <BusFault_Handler+0x4>

08002458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <UsageFault_Handler+0x4>

08002460 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800248e:	f000 fbdb 	bl	8002c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}

08002496 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 800249c:	f000 f9ce 	bl	800283c <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80024a0:	f000 f98e 	bl	80027c0 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80024a4:	2202      	movs	r2, #2
 80024a6:	2103      	movs	r1, #3
 80024a8:	2082      	movs	r0, #130	@ 0x82
 80024aa:	f000 fa1b 	bl	80028e4 <I2C3_Write>
    HAL_Delay(5);
 80024ae:	2005      	movs	r0, #5
 80024b0:	f000 fbea 	bl	8002c88 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2103      	movs	r1, #3
 80024b8:	2082      	movs	r0, #130	@ 0x82
 80024ba:	f000 fa13 	bl	80028e4 <I2C3_Write>
    HAL_Delay(2);
 80024be:	2002      	movs	r0, #2
 80024c0:	f000 fbe2 	bl	8002c88 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80024c4:	1cba      	adds	r2, r7, #2
 80024c6:	2302      	movs	r3, #2
 80024c8:	2100      	movs	r1, #0
 80024ca:	2082      	movs	r0, #130	@ 0x82
 80024cc:	f000 fa5a 	bl	8002984 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 80024d0:	887b      	ldrh	r3, [r7, #2]
 80024d2:	021b      	lsls	r3, r3, #8
 80024d4:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 80024d6:	887b      	ldrh	r3, [r7, #2]
 80024d8:	0a1b      	lsrs	r3, r3, #8
 80024da:	b29a      	uxth	r2, r3
 80024dc:	88fb      	ldrh	r3, [r7, #6]
 80024de:	4313      	orrs	r3, r2
 80024e0:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	f640 0211 	movw	r2, #2065	@ 0x811
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d001      	beq.n	80024f0 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e075      	b.n	80025dc <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80024f0:	2202      	movs	r2, #2
 80024f2:	2103      	movs	r1, #3
 80024f4:	2082      	movs	r0, #130	@ 0x82
 80024f6:	f000 f9f5 	bl	80028e4 <I2C3_Write>
    HAL_Delay(5);
 80024fa:	2005      	movs	r0, #5
 80024fc:	f000 fbc4 	bl	8002c88 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002500:	2200      	movs	r2, #0
 8002502:	2103      	movs	r1, #3
 8002504:	2082      	movs	r0, #130	@ 0x82
 8002506:	f000 f9ed 	bl	80028e4 <I2C3_Write>
    HAL_Delay(2);
 800250a:	2002      	movs	r0, #2
 800250c:	f000 fbbc 	bl	8002c88 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002510:	2004      	movs	r0, #4
 8002512:	f000 f867 	bl	80025e4 <STMPE811_Read>
 8002516:	4603      	mov	r3, r0
 8002518:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 800251a:	797b      	ldrb	r3, [r7, #5]
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002522:	797b      	ldrb	r3, [r7, #5]
 8002524:	461a      	mov	r2, r3
 8002526:	2104      	movs	r1, #4
 8002528:	2082      	movs	r0, #130	@ 0x82
 800252a:	f000 f9db 	bl	80028e4 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800252e:	2004      	movs	r0, #4
 8002530:	f000 f858 	bl	80025e4 <STMPE811_Read>
 8002534:	4603      	mov	r3, r0
 8002536:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002538:	797b      	ldrb	r3, [r7, #5]
 800253a:	f023 0302 	bic.w	r3, r3, #2
 800253e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002540:	797b      	ldrb	r3, [r7, #5]
 8002542:	461a      	mov	r2, r3
 8002544:	2104      	movs	r1, #4
 8002546:	2082      	movs	r0, #130	@ 0x82
 8002548:	f000 f9cc 	bl	80028e4 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 800254c:	2249      	movs	r2, #73	@ 0x49
 800254e:	2120      	movs	r1, #32
 8002550:	2082      	movs	r0, #130	@ 0x82
 8002552:	f000 f9c7 	bl	80028e4 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002556:	2002      	movs	r0, #2
 8002558:	f000 fb96 	bl	8002c88 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 800255c:	2201      	movs	r2, #1
 800255e:	2121      	movs	r1, #33	@ 0x21
 8002560:	2082      	movs	r0, #130	@ 0x82
 8002562:	f000 f9bf 	bl	80028e4 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002566:	2017      	movs	r0, #23
 8002568:	f000 f83c 	bl	80025e4 <STMPE811_Read>
 800256c:	4603      	mov	r3, r0
 800256e:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002570:	797b      	ldrb	r3, [r7, #5]
 8002572:	f043 031e 	orr.w	r3, r3, #30
 8002576:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002578:	797b      	ldrb	r3, [r7, #5]
 800257a:	461a      	mov	r2, r3
 800257c:	2117      	movs	r1, #23
 800257e:	2082      	movs	r0, #130	@ 0x82
 8002580:	f000 f9b0 	bl	80028e4 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002584:	229a      	movs	r2, #154	@ 0x9a
 8002586:	2141      	movs	r1, #65	@ 0x41
 8002588:	2082      	movs	r0, #130	@ 0x82
 800258a:	f000 f9ab 	bl	80028e4 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 800258e:	2201      	movs	r2, #1
 8002590:	214a      	movs	r1, #74	@ 0x4a
 8002592:	2082      	movs	r0, #130	@ 0x82
 8002594:	f000 f9a6 	bl	80028e4 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002598:	2201      	movs	r2, #1
 800259a:	214b      	movs	r1, #75	@ 0x4b
 800259c:	2082      	movs	r0, #130	@ 0x82
 800259e:	f000 f9a1 	bl	80028e4 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80025a2:	2200      	movs	r2, #0
 80025a4:	214b      	movs	r1, #75	@ 0x4b
 80025a6:	2082      	movs	r0, #130	@ 0x82
 80025a8:	f000 f99c 	bl	80028e4 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80025ac:	2201      	movs	r2, #1
 80025ae:	2156      	movs	r1, #86	@ 0x56
 80025b0:	2082      	movs	r0, #130	@ 0x82
 80025b2:	f000 f997 	bl	80028e4 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80025b6:	2201      	movs	r2, #1
 80025b8:	2158      	movs	r1, #88	@ 0x58
 80025ba:	2082      	movs	r0, #130	@ 0x82
 80025bc:	f000 f992 	bl	80028e4 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80025c0:	2203      	movs	r2, #3
 80025c2:	2140      	movs	r1, #64	@ 0x40
 80025c4:	2082      	movs	r0, #130	@ 0x82
 80025c6:	f000 f98d 	bl	80028e4 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80025ca:	22ff      	movs	r2, #255	@ 0xff
 80025cc:	210b      	movs	r1, #11
 80025ce:	2082      	movs	r0, #130	@ 0x82
 80025d0:	f000 f988 	bl	80028e4 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 80025d4:	20c8      	movs	r0, #200	@ 0xc8
 80025d6:	f000 fb57 	bl	8002c88 <HAL_Delay>

    return STMPE811_State_Ok;
 80025da:	2302      	movs	r3, #2

}
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 80025ee:	f107 020f 	add.w	r2, r7, #15
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	4619      	mov	r1, r3
 80025f6:	2082      	movs	r0, #130	@ 0x82
 80025f8:	f000 f99e 	bl	8002938 <I2C3_Read>

    return readData;
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	791a      	ldrb	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002616:	2040      	movs	r0, #64	@ 0x40
 8002618:	f7ff ffe4 	bl	80025e4 <STMPE811_Read>
 800261c:	4603      	mov	r3, r0
 800261e:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002624:	2b00      	cmp	r3, #0
 8002626:	db0e      	blt.n	8002646 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800262e:	2201      	movs	r2, #1
 8002630:	214b      	movs	r1, #75	@ 0x4b
 8002632:	2082      	movs	r0, #130	@ 0x82
 8002634:	f000 f956 	bl	80028e4 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002638:	2200      	movs	r2, #0
 800263a:	214b      	movs	r1, #75	@ 0x4b
 800263c:	2082      	movs	r0, #130	@ 0x82
 800263e:	f000 f951 	bl	80028e4 <I2C3_Write>

        return STMPE811_State_Released;
 8002642:	2301      	movs	r3, #1
 8002644:	e0a7      	b.n	8002796 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	799b      	ldrb	r3, [r3, #6]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d117      	bne.n	800267e <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f000 f9b8 	bl	80029c8 <TM_STMPE811_ReadX>
 8002658:	4603      	mov	r3, r0
 800265a:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800265e:	b29a      	uxth	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	885b      	ldrh	r3, [r3, #2]
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fa0d 	bl	8002a88 <TM_STMPE811_ReadY>
 800266e:	4603      	mov	r3, r0
 8002670:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002674:	3301      	adds	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	805a      	strh	r2, [r3, #2]
 800267c:	e048      	b.n	8002710 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	799b      	ldrb	r3, [r3, #6]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d112      	bne.n	80026ac <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f99c 	bl	80029c8 <TM_STMPE811_ReadX>
 8002690:	4603      	mov	r3, r0
 8002692:	461a      	mov	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	885b      	ldrh	r3, [r3, #2]
 800269c:	4618      	mov	r0, r3
 800269e:	f000 f9f3 	bl	8002a88 <TM_STMPE811_ReadY>
 80026a2:	4603      	mov	r3, r0
 80026a4:	461a      	mov	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	805a      	strh	r2, [r3, #2]
 80026aa:	e031      	b.n	8002710 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	799b      	ldrb	r3, [r3, #6]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d115      	bne.n	80026e0 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	885b      	ldrh	r3, [r3, #2]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 f985 	bl	80029c8 <TM_STMPE811_ReadX>
 80026be:	4603      	mov	r3, r0
 80026c0:	461a      	mov	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f9dc 	bl	8002a88 <TM_STMPE811_ReadY>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80026d6:	3301      	adds	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	801a      	strh	r2, [r3, #0]
 80026de:	e017      	b.n	8002710 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	799b      	ldrb	r3, [r3, #6]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d113      	bne.n	8002710 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 f96b 	bl	80029c8 <TM_STMPE811_ReadX>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f000 f9c0 	bl	8002a88 <TM_STMPE811_ReadY>
 8002708:	4603      	mov	r3, r0
 800270a:	461a      	mov	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002710:	2201      	movs	r2, #1
 8002712:	214b      	movs	r1, #75	@ 0x4b
 8002714:	2082      	movs	r0, #130	@ 0x82
 8002716:	f000 f8e5 	bl	80028e4 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800271a:	2200      	movs	r2, #0
 800271c:	214b      	movs	r1, #75	@ 0x4b
 800271e:	2082      	movs	r0, #130	@ 0x82
 8002720:	f000 f8e0 	bl	80028e4 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	799b      	ldrb	r3, [r3, #6]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <STMPE811_ReadTouch+0x12e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	799b      	ldrb	r3, [r3, #6]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d115      	bne.n	8002760 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d027      	beq.n	800278c <STMPE811_ReadTouch+0x186>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	2bee      	cmp	r3, #238	@ 0xee
 8002742:	d823      	bhi.n	800278c <STMPE811_ReadTouch+0x186>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	885b      	ldrh	r3, [r3, #2]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01f      	beq.n	800278c <STMPE811_ReadTouch+0x186>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	885b      	ldrh	r3, [r3, #2]
 8002750:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002754:	d81a      	bhi.n	800278c <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 800275c:	2300      	movs	r3, #0
 800275e:	e01a      	b.n	8002796 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d012      	beq.n	800278e <STMPE811_ReadTouch+0x188>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002770:	d80d      	bhi.n	800278e <STMPE811_ReadTouch+0x188>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	885b      	ldrh	r3, [r3, #2]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d009      	beq.n	800278e <STMPE811_ReadTouch+0x188>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	885b      	ldrh	r3, [r3, #2]
 800277e:	2bee      	cmp	r3, #238	@ 0xee
 8002780:	d805      	bhi.n	800278e <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002788:	2300      	movs	r3, #0
 800278a:	e004      	b.n	8002796 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 800278c:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002794:	2301      	movs	r3, #1
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80027a4:	4b05      	ldr	r3, [pc, #20]	@ (80027bc <verifyHAL_I2C_IS_OKAY+0x1c>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80027ac:	bf00      	nop
 80027ae:	e7fd      	b.n	80027ac <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	20025c10 	.word	0x20025c10

080027c0 <I2C3_Init>:

static void I2C3_Init()
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	603b      	str	r3, [r7, #0]
 80027ca:	4b18      	ldr	r3, [pc, #96]	@ (800282c <I2C3_Init+0x6c>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	4a17      	ldr	r2, [pc, #92]	@ (800282c <I2C3_Init+0x6c>)
 80027d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027d6:	4b15      	ldr	r3, [pc, #84]	@ (800282c <I2C3_Init+0x6c>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027de:	603b      	str	r3, [r7, #0]
 80027e0:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80027e2:	4b13      	ldr	r3, [pc, #76]	@ (8002830 <I2C3_Init+0x70>)
 80027e4:	4a13      	ldr	r2, [pc, #76]	@ (8002834 <I2C3_Init+0x74>)
 80027e6:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80027e8:	4b11      	ldr	r3, [pc, #68]	@ (8002830 <I2C3_Init+0x70>)
 80027ea:	4a13      	ldr	r2, [pc, #76]	@ (8002838 <I2C3_Init+0x78>)
 80027ec:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027ee:	4b10      	ldr	r3, [pc, #64]	@ (8002830 <I2C3_Init+0x70>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 80027f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002830 <I2C3_Init+0x70>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002830 <I2C3_Init+0x70>)
 80027fc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002800:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002802:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <I2C3_Init+0x70>)
 8002804:	2200      	movs	r2, #0
 8002806:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002808:	4b09      	ldr	r3, [pc, #36]	@ (8002830 <I2C3_Init+0x70>)
 800280a:	2200      	movs	r2, #0
 800280c:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800280e:	4808      	ldr	r0, [pc, #32]	@ (8002830 <I2C3_Init+0x70>)
 8002810:	f000 fe16 	bl	8003440 <HAL_I2C_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800281e:	bf00      	nop
 8002820:	e7fd      	b.n	800281e <I2C3_Init+0x5e>
    }
    return;
 8002822:	bf00      	nop
}
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	20025bbc 	.word	0x20025bbc
 8002834:	40005c00 	.word	0x40005c00
 8002838:	000186a0 	.word	0x000186a0

0800283c <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002842:	f107 030c 	add.w	r3, r7, #12
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	60da      	str	r2, [r3, #12]
 8002850:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	4b20      	ldr	r3, [pc, #128]	@ (80028d8 <I2C3_MspInit+0x9c>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	4a1f      	ldr	r2, [pc, #124]	@ (80028d8 <I2C3_MspInit+0x9c>)
 800285c:	f043 0304 	orr.w	r3, r3, #4
 8002860:	6313      	str	r3, [r2, #48]	@ 0x30
 8002862:	4b1d      	ldr	r3, [pc, #116]	@ (80028d8 <I2C3_MspInit+0x9c>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	4b19      	ldr	r3, [pc, #100]	@ (80028d8 <I2C3_MspInit+0x9c>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	4a18      	ldr	r2, [pc, #96]	@ (80028d8 <I2C3_MspInit+0x9c>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	6313      	str	r3, [r2, #48]	@ 0x30
 800287e:	4b16      	ldr	r3, [pc, #88]	@ (80028d8 <I2C3_MspInit+0x9c>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	607b      	str	r3, [r7, #4]
 8002888:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800288a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800288e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002890:	2312      	movs	r3, #18
 8002892:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002898:	2300      	movs	r3, #0
 800289a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800289c:	2304      	movs	r3, #4
 800289e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80028a0:	f107 030c 	add.w	r3, r7, #12
 80028a4:	4619      	mov	r1, r3
 80028a6:	480d      	ldr	r0, [pc, #52]	@ (80028dc <I2C3_MspInit+0xa0>)
 80028a8:	f000 faf8 	bl	8002e9c <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80028ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028b2:	2312      	movs	r3, #18
 80028b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028be:	2304      	movs	r3, #4
 80028c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80028c2:	f107 030c 	add.w	r3, r7, #12
 80028c6:	4619      	mov	r1, r3
 80028c8:	4805      	ldr	r0, [pc, #20]	@ (80028e0 <I2C3_MspInit+0xa4>)
 80028ca:	f000 fae7 	bl	8002e9c <HAL_GPIO_Init>
    
}
 80028ce:	bf00      	nop
 80028d0:	3720      	adds	r7, #32
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40020800 	.word	0x40020800
 80028e0:	40020000 	.word	0x40020000

080028e4 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af04      	add	r7, sp, #16
 80028ea:	4603      	mov	r3, r0
 80028ec:	80fb      	strh	r3, [r7, #6]
 80028ee:	460b      	mov	r3, r1
 80028f0:	717b      	strb	r3, [r7, #5]
 80028f2:	4613      	mov	r3, r2
 80028f4:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80028f6:	793b      	ldrb	r3, [r7, #4]
 80028f8:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80028fa:	797b      	ldrb	r3, [r7, #5]
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	88f9      	ldrh	r1, [r7, #6]
 8002900:	4b0a      	ldr	r3, [pc, #40]	@ (800292c <I2C3_Write+0x48>)
 8002902:	9302      	str	r3, [sp, #8]
 8002904:	2301      	movs	r3, #1
 8002906:	9301      	str	r3, [sp, #4]
 8002908:	f107 030f 	add.w	r3, r7, #15
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	2301      	movs	r3, #1
 8002910:	4807      	ldr	r0, [pc, #28]	@ (8002930 <I2C3_Write+0x4c>)
 8002912:	f000 fed9 	bl	80036c8 <HAL_I2C_Mem_Write>
 8002916:	4603      	mov	r3, r0
 8002918:	461a      	mov	r2, r3
 800291a:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <I2C3_Write+0x50>)
 800291c:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800291e:	f7ff ff3f 	bl	80027a0 <verifyHAL_I2C_IS_OKAY>
}
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	0003d090 	.word	0x0003d090
 8002930:	20025bbc 	.word	0x20025bbc
 8002934:	20025c10 	.word	0x20025c10

08002938 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af04      	add	r7, sp, #16
 800293e:	4603      	mov	r3, r0
 8002940:	603a      	str	r2, [r7, #0]
 8002942:	71fb      	strb	r3, [r7, #7]
 8002944:	460b      	mov	r3, r1
 8002946:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	b299      	uxth	r1, r3
 800294c:	79bb      	ldrb	r3, [r7, #6]
 800294e:	b29a      	uxth	r2, r3
 8002950:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <I2C3_Read+0x40>)
 8002952:	9302      	str	r3, [sp, #8]
 8002954:	2301      	movs	r3, #1
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	2301      	movs	r3, #1
 800295e:	4807      	ldr	r0, [pc, #28]	@ (800297c <I2C3_Read+0x44>)
 8002960:	f000 ffac 	bl	80038bc <HAL_I2C_Mem_Read>
 8002964:	4603      	mov	r3, r0
 8002966:	461a      	mov	r2, r3
 8002968:	4b05      	ldr	r3, [pc, #20]	@ (8002980 <I2C3_Read+0x48>)
 800296a:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800296c:	f7ff ff18 	bl	80027a0 <verifyHAL_I2C_IS_OKAY>
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	0003d090 	.word	0x0003d090
 800297c:	20025bbc 	.word	0x20025bbc
 8002980:	20025c10 	.word	0x20025c10

08002984 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af04      	add	r7, sp, #16
 800298a:	603a      	str	r2, [r7, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	4603      	mov	r3, r0
 8002990:	71fb      	strb	r3, [r7, #7]
 8002992:	460b      	mov	r3, r1
 8002994:	71bb      	strb	r3, [r7, #6]
 8002996:	4613      	mov	r3, r2
 8002998:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	b299      	uxth	r1, r3
 800299e:	79bb      	ldrb	r3, [r7, #6]
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	4b07      	ldr	r3, [pc, #28]	@ (80029c0 <I2C3_MulitByteRead+0x3c>)
 80029a4:	9302      	str	r3, [sp, #8]
 80029a6:	88bb      	ldrh	r3, [r7, #4]
 80029a8:	9301      	str	r3, [sp, #4]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	2301      	movs	r3, #1
 80029b0:	4804      	ldr	r0, [pc, #16]	@ (80029c4 <I2C3_MulitByteRead+0x40>)
 80029b2:	f000 ff83 	bl	80038bc <HAL_I2C_Mem_Read>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	0003d090 	.word	0x0003d090
 80029c4:	20025bbc 	.word	0x20025bbc

080029c8 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80029d2:	204d      	movs	r0, #77	@ 0x4d
 80029d4:	f7ff fe06 	bl	80025e4 <STMPE811_Read>
 80029d8:	4603      	mov	r3, r0
 80029da:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80029dc:	204e      	movs	r0, #78	@ 0x4e
 80029de:	f7ff fe01 	bl	80025e4 <STMPE811_Read>
 80029e2:	4603      	mov	r3, r0
 80029e4:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80029e6:	7a7b      	ldrb	r3, [r7, #9]
 80029e8:	b21b      	sxth	r3, r3
 80029ea:	021b      	lsls	r3, r3, #8
 80029ec:	b21a      	sxth	r2, r3
 80029ee:	7a3b      	ldrb	r3, [r7, #8]
 80029f0:	b21b      	sxth	r3, r3
 80029f2:	4313      	orrs	r3, r2
 80029f4:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 80029f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029fa:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80029fe:	4293      	cmp	r3, r2
 8002a00:	dc06      	bgt.n	8002a10 <TM_STMPE811_ReadX+0x48>
        val = 3900 - val;
 8002a02:	89fb      	ldrh	r3, [r7, #14]
 8002a04:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002a08:	330c      	adds	r3, #12
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	81fb      	strh	r3, [r7, #14]
 8002a0e:	e005      	b.n	8002a1c <TM_STMPE811_ReadX+0x54>
    } else {
        val = 3800 - val;
 8002a10:	89fb      	ldrh	r3, [r7, #14]
 8002a12:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002a16:	3308      	adds	r3, #8
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002a1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a20:	4a18      	ldr	r2, [pc, #96]	@ (8002a84 <TM_STMPE811_ReadX+0xbc>)
 8002a22:	fb82 1203 	smull	r1, r2, r2, r3
 8002a26:	441a      	add	r2, r3
 8002a28:	10d2      	asrs	r2, r2, #3
 8002a2a:	17db      	asrs	r3, r3, #31
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002a30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a34:	2bef      	cmp	r3, #239	@ 0xef
 8002a36:	dd02      	ble.n	8002a3e <TM_STMPE811_ReadX+0x76>
        val = 239;
 8002a38:	23ef      	movs	r3, #239	@ 0xef
 8002a3a:	81fb      	strh	r3, [r7, #14]
 8002a3c:	e005      	b.n	8002a4a <TM_STMPE811_ReadX+0x82>
    } else if (val < 0) {
 8002a3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	da01      	bge.n	8002a4a <TM_STMPE811_ReadX+0x82>
        val = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002a4a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	dd05      	ble.n	8002a60 <TM_STMPE811_ReadX+0x98>
 8002a54:	89fa      	ldrh	r2, [r7, #14]
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	b21b      	sxth	r3, r3
 8002a5e:	e004      	b.n	8002a6a <TM_STMPE811_ReadX+0xa2>
 8002a60:	89fb      	ldrh	r3, [r7, #14]
 8002a62:	88fa      	ldrh	r2, [r7, #6]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	b21b      	sxth	r3, r3
 8002a6a:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002a6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	dd01      	ble.n	8002a78 <TM_STMPE811_ReadX+0xb0>
        return val;
 8002a74:	89fb      	ldrh	r3, [r7, #14]
 8002a76:	e000      	b.n	8002a7a <TM_STMPE811_ReadX+0xb2>
    }
    return x;
 8002a78:	88fb      	ldrh	r3, [r7, #6]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	88888889 	.word	0x88888889

08002a88 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002a92:	204f      	movs	r0, #79	@ 0x4f
 8002a94:	f7ff fda6 	bl	80025e4 <STMPE811_Read>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002a9c:	2050      	movs	r0, #80	@ 0x50
 8002a9e:	f7ff fda1 	bl	80025e4 <STMPE811_Read>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002aa6:	7a7b      	ldrb	r3, [r7, #9]
 8002aa8:	b21b      	sxth	r3, r3
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	b21a      	sxth	r2, r3
 8002aae:	7a3b      	ldrb	r3, [r7, #8]
 8002ab0:	b21b      	sxth	r3, r3
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002ab6:	89fb      	ldrh	r3, [r7, #14]
 8002ab8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002ac0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ac4:	4a18      	ldr	r2, [pc, #96]	@ (8002b28 <TM_STMPE811_ReadY+0xa0>)
 8002ac6:	fb82 1203 	smull	r1, r2, r2, r3
 8002aca:	1052      	asrs	r2, r2, #1
 8002acc:	17db      	asrs	r3, r3, #31
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002ad2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	dc02      	bgt.n	8002ae0 <TM_STMPE811_ReadY+0x58>
        val = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	81fb      	strh	r3, [r7, #14]
 8002ade:	e007      	b.n	8002af0 <TM_STMPE811_ReadY+0x68>
    } else if (val >= 320) {
 8002ae0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ae4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002ae8:	db02      	blt.n	8002af0 <TM_STMPE811_ReadY+0x68>
        val = 319;
 8002aea:	f240 133f 	movw	r3, #319	@ 0x13f
 8002aee:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002af0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	dd05      	ble.n	8002b06 <TM_STMPE811_ReadY+0x7e>
 8002afa:	89fa      	ldrh	r2, [r7, #14]
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	b21b      	sxth	r3, r3
 8002b04:	e004      	b.n	8002b10 <TM_STMPE811_ReadY+0x88>
 8002b06:	89fb      	ldrh	r3, [r7, #14]
 8002b08:	88fa      	ldrh	r2, [r7, #6]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	b21b      	sxth	r3, r3
 8002b10:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002b12:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	dd01      	ble.n	8002b1e <TM_STMPE811_ReadY+0x96>
        return val;
 8002b1a:	89fb      	ldrh	r3, [r7, #14]
 8002b1c:	e000      	b.n	8002b20 <TM_STMPE811_ReadY+0x98>
    }
    return y;
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	2e8ba2e9 	.word	0x2e8ba2e9

08002b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b30:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <SystemInit+0x20>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b36:	4a05      	ldr	r2, [pc, #20]	@ (8002b4c <SystemInit+0x20>)
 8002b38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002b50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b54:	f7ff ffea 	bl	8002b2c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b58:	480c      	ldr	r0, [pc, #48]	@ (8002b8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b5a:	490d      	ldr	r1, [pc, #52]	@ (8002b90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b60:	e002      	b.n	8002b68 <LoopCopyDataInit>

08002b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b66:	3304      	adds	r3, #4

08002b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b6c:	d3f9      	bcc.n	8002b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b70:	4c0a      	ldr	r4, [pc, #40]	@ (8002b9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b74:	e001      	b.n	8002b7a <LoopFillZerobss>

08002b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b78:	3204      	adds	r2, #4

08002b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b7c:	d3fb      	bcc.n	8002b76 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002b7e:	f003 ff61 	bl	8006a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b82:	f7fe fe34 	bl	80017ee <main>
  bx  lr    
 8002b86:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002b88:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b90:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002b94:	08007fd8 	.word	0x08007fd8
  ldr r2, =_sbss
 8002b98:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002b9c:	20025e0c 	.word	0x20025e0c

08002ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ba0:	e7fe      	b.n	8002ba0 <ADC_IRQHandler>
	...

08002ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8002be4 <HAL_Init+0x40>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a0d      	ldr	r2, [pc, #52]	@ (8002be4 <HAL_Init+0x40>)
 8002bae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002be4 <HAL_Init+0x40>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a0a      	ldr	r2, [pc, #40]	@ (8002be4 <HAL_Init+0x40>)
 8002bba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bc0:	4b08      	ldr	r3, [pc, #32]	@ (8002be4 <HAL_Init+0x40>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a07      	ldr	r2, [pc, #28]	@ (8002be4 <HAL_Init+0x40>)
 8002bc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bcc:	2003      	movs	r0, #3
 8002bce:	f000 f931 	bl	8002e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	f000 f808 	bl	8002be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bd8:	f7ff f9cc 	bl	8001f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40023c00 	.word	0x40023c00

08002be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bf0:	4b12      	ldr	r3, [pc, #72]	@ (8002c3c <HAL_InitTick+0x54>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4b12      	ldr	r3, [pc, #72]	@ (8002c40 <HAL_InitTick+0x58>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 f93b 	bl	8002e82 <HAL_SYSTICK_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e00e      	b.n	8002c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b0f      	cmp	r3, #15
 8002c1a:	d80a      	bhi.n	8002c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c24:	f000 f911 	bl	8002e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c28:	4a06      	ldr	r2, [pc, #24]	@ (8002c44 <HAL_InitTick+0x5c>)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e000      	b.n	8002c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000010 	.word	0x20000010
 8002c40:	20000018 	.word	0x20000018
 8002c44:	20000014 	.word	0x20000014

08002c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c4c:	4b06      	ldr	r3, [pc, #24]	@ (8002c68 <HAL_IncTick+0x20>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b06      	ldr	r3, [pc, #24]	@ (8002c6c <HAL_IncTick+0x24>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4413      	add	r3, r2
 8002c58:	4a04      	ldr	r2, [pc, #16]	@ (8002c6c <HAL_IncTick+0x24>)
 8002c5a:	6013      	str	r3, [r2, #0]
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20000018 	.word	0x20000018
 8002c6c:	20025c14 	.word	0x20025c14

08002c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return uwTick;
 8002c74:	4b03      	ldr	r3, [pc, #12]	@ (8002c84 <HAL_GetTick+0x14>)
 8002c76:	681b      	ldr	r3, [r3, #0]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	20025c14 	.word	0x20025c14

08002c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c90:	f7ff ffee 	bl	8002c70 <HAL_GetTick>
 8002c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ca0:	d005      	beq.n	8002cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ccc <HAL_Delay+0x44>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4413      	add	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cae:	bf00      	nop
 8002cb0:	f7ff ffde 	bl	8002c70 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d8f7      	bhi.n	8002cb0 <HAL_Delay+0x28>
  {
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000018 	.word	0x20000018

08002cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d14 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cec:	4013      	ands	r3, r2
 8002cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d02:	4a04      	ldr	r2, [pc, #16]	@ (8002d14 <__NVIC_SetPriorityGrouping+0x44>)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	60d3      	str	r3, [r2, #12]
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d1c:	4b04      	ldr	r3, [pc, #16]	@ (8002d30 <__NVIC_GetPriorityGrouping+0x18>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	0a1b      	lsrs	r3, r3, #8
 8002d22:	f003 0307 	and.w	r3, r3, #7
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	6039      	str	r1, [r7, #0]
 8002d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	db0a      	blt.n	8002d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	490c      	ldr	r1, [pc, #48]	@ (8002d80 <__NVIC_SetPriority+0x4c>)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	0112      	lsls	r2, r2, #4
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	440b      	add	r3, r1
 8002d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d5c:	e00a      	b.n	8002d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	4908      	ldr	r1, [pc, #32]	@ (8002d84 <__NVIC_SetPriority+0x50>)
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	3b04      	subs	r3, #4
 8002d6c:	0112      	lsls	r2, r2, #4
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	440b      	add	r3, r1
 8002d72:	761a      	strb	r2, [r3, #24]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000e100 	.word	0xe000e100
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b089      	sub	sp, #36	@ 0x24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f1c3 0307 	rsb	r3, r3, #7
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	bf28      	it	cs
 8002da6:	2304      	movcs	r3, #4
 8002da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3304      	adds	r3, #4
 8002dae:	2b06      	cmp	r3, #6
 8002db0:	d902      	bls.n	8002db8 <NVIC_EncodePriority+0x30>
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3b03      	subs	r3, #3
 8002db6:	e000      	b.n	8002dba <NVIC_EncodePriority+0x32>
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43da      	mvns	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	401a      	ands	r2, r3
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dda:	43d9      	mvns	r1, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de0:	4313      	orrs	r3, r2
         );
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3724      	adds	r7, #36	@ 0x24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e00:	d301      	bcc.n	8002e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e02:	2301      	movs	r3, #1
 8002e04:	e00f      	b.n	8002e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e06:	4a0a      	ldr	r2, [pc, #40]	@ (8002e30 <SysTick_Config+0x40>)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e0e:	210f      	movs	r1, #15
 8002e10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e14:	f7ff ff8e 	bl	8002d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e18:	4b05      	ldr	r3, [pc, #20]	@ (8002e30 <SysTick_Config+0x40>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e1e:	4b04      	ldr	r3, [pc, #16]	@ (8002e30 <SysTick_Config+0x40>)
 8002e20:	2207      	movs	r2, #7
 8002e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	e000e010 	.word	0xe000e010

08002e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff ff47 	bl	8002cd0 <__NVIC_SetPriorityGrouping>
}
 8002e42:	bf00      	nop
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b086      	sub	sp, #24
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	4603      	mov	r3, r0
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e5c:	f7ff ff5c 	bl	8002d18 <__NVIC_GetPriorityGrouping>
 8002e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	6978      	ldr	r0, [r7, #20]
 8002e68:	f7ff ff8e 	bl	8002d88 <NVIC_EncodePriority>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e72:	4611      	mov	r1, r2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff ff5d 	bl	8002d34 <__NVIC_SetPriority>
}
 8002e7a:	bf00      	nop
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff ffb0 	bl	8002df0 <SysTick_Config>
 8002e90:	4603      	mov	r3, r0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b089      	sub	sp, #36	@ 0x24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	e177      	b.n	80031a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002eb8:	2201      	movs	r2, #1
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	f040 8166 	bne.w	80031a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d005      	beq.n	8002eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d130      	bne.n	8002f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	2203      	movs	r2, #3
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f24:	2201      	movs	r2, #1
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 0201 	and.w	r2, r3, #1
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d017      	beq.n	8002f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	2203      	movs	r2, #3
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d123      	bne.n	8002fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	08da      	lsrs	r2, r3, #3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3208      	adds	r2, #8
 8002fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	220f      	movs	r2, #15
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	08da      	lsrs	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3208      	adds	r2, #8
 8002fda:	69b9      	ldr	r1, [r7, #24]
 8002fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	2203      	movs	r2, #3
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 0203 	and.w	r2, r3, #3
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 80c0 	beq.w	80031a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	4b66      	ldr	r3, [pc, #408]	@ (80031c0 <HAL_GPIO_Init+0x324>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302a:	4a65      	ldr	r2, [pc, #404]	@ (80031c0 <HAL_GPIO_Init+0x324>)
 800302c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003030:	6453      	str	r3, [r2, #68]	@ 0x44
 8003032:	4b63      	ldr	r3, [pc, #396]	@ (80031c0 <HAL_GPIO_Init+0x324>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800303e:	4a61      	ldr	r2, [pc, #388]	@ (80031c4 <HAL_GPIO_Init+0x328>)
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	089b      	lsrs	r3, r3, #2
 8003044:	3302      	adds	r3, #2
 8003046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	220f      	movs	r2, #15
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a58      	ldr	r2, [pc, #352]	@ (80031c8 <HAL_GPIO_Init+0x32c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d037      	beq.n	80030da <HAL_GPIO_Init+0x23e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a57      	ldr	r2, [pc, #348]	@ (80031cc <HAL_GPIO_Init+0x330>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d031      	beq.n	80030d6 <HAL_GPIO_Init+0x23a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a56      	ldr	r2, [pc, #344]	@ (80031d0 <HAL_GPIO_Init+0x334>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d02b      	beq.n	80030d2 <HAL_GPIO_Init+0x236>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a55      	ldr	r2, [pc, #340]	@ (80031d4 <HAL_GPIO_Init+0x338>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d025      	beq.n	80030ce <HAL_GPIO_Init+0x232>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a54      	ldr	r2, [pc, #336]	@ (80031d8 <HAL_GPIO_Init+0x33c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d01f      	beq.n	80030ca <HAL_GPIO_Init+0x22e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a53      	ldr	r2, [pc, #332]	@ (80031dc <HAL_GPIO_Init+0x340>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d019      	beq.n	80030c6 <HAL_GPIO_Init+0x22a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a52      	ldr	r2, [pc, #328]	@ (80031e0 <HAL_GPIO_Init+0x344>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <HAL_GPIO_Init+0x226>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a51      	ldr	r2, [pc, #324]	@ (80031e4 <HAL_GPIO_Init+0x348>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00d      	beq.n	80030be <HAL_GPIO_Init+0x222>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a50      	ldr	r2, [pc, #320]	@ (80031e8 <HAL_GPIO_Init+0x34c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d007      	beq.n	80030ba <HAL_GPIO_Init+0x21e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a4f      	ldr	r2, [pc, #316]	@ (80031ec <HAL_GPIO_Init+0x350>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d101      	bne.n	80030b6 <HAL_GPIO_Init+0x21a>
 80030b2:	2309      	movs	r3, #9
 80030b4:	e012      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030b6:	230a      	movs	r3, #10
 80030b8:	e010      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030ba:	2308      	movs	r3, #8
 80030bc:	e00e      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030be:	2307      	movs	r3, #7
 80030c0:	e00c      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030c2:	2306      	movs	r3, #6
 80030c4:	e00a      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030c6:	2305      	movs	r3, #5
 80030c8:	e008      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030ca:	2304      	movs	r3, #4
 80030cc:	e006      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030ce:	2303      	movs	r3, #3
 80030d0:	e004      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e002      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030da:	2300      	movs	r3, #0
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	f002 0203 	and.w	r2, r2, #3
 80030e2:	0092      	lsls	r2, r2, #2
 80030e4:	4093      	lsls	r3, r2
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030ec:	4935      	ldr	r1, [pc, #212]	@ (80031c4 <HAL_GPIO_Init+0x328>)
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	089b      	lsrs	r3, r3, #2
 80030f2:	3302      	adds	r3, #2
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030fa:	4b3d      	ldr	r3, [pc, #244]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	43db      	mvns	r3, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4013      	ands	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800311e:	4a34      	ldr	r2, [pc, #208]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003124:	4b32      	ldr	r3, [pc, #200]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	43db      	mvns	r3, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003148:	4a29      	ldr	r2, [pc, #164]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800314e:	4b28      	ldr	r3, [pc, #160]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	43db      	mvns	r3, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4013      	ands	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003172:	4a1f      	ldr	r2, [pc, #124]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003178:	4b1d      	ldr	r3, [pc, #116]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800319c:	4a14      	ldr	r2, [pc, #80]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	3301      	adds	r3, #1
 80031a6:	61fb      	str	r3, [r7, #28]
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	2b0f      	cmp	r3, #15
 80031ac:	f67f ae84 	bls.w	8002eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031b0:	bf00      	nop
 80031b2:	bf00      	nop
 80031b4:	3724      	adds	r7, #36	@ 0x24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40013800 	.word	0x40013800
 80031c8:	40020000 	.word	0x40020000
 80031cc:	40020400 	.word	0x40020400
 80031d0:	40020800 	.word	0x40020800
 80031d4:	40020c00 	.word	0x40020c00
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40021400 	.word	0x40021400
 80031e0:	40021800 	.word	0x40021800
 80031e4:	40021c00 	.word	0x40021c00
 80031e8:	40022000 	.word	0x40022000
 80031ec:	40022400 	.word	0x40022400
 80031f0:	40013c00 	.word	0x40013c00

080031f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031fe:	2300      	movs	r3, #0
 8003200:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003206:	2300      	movs	r3, #0
 8003208:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	e0d9      	b.n	80033c4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003210:	2201      	movs	r2, #1
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4013      	ands	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	429a      	cmp	r2, r3
 8003228:	f040 80c9 	bne.w	80033be <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800322c:	4a6b      	ldr	r2, [pc, #428]	@ (80033dc <HAL_GPIO_DeInit+0x1e8>)
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	089b      	lsrs	r3, r3, #2
 8003232:	3302      	adds	r3, #2
 8003234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003238:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	220f      	movs	r2, #15
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	4013      	ands	r3, r2
 800324c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a63      	ldr	r2, [pc, #396]	@ (80033e0 <HAL_GPIO_DeInit+0x1ec>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d037      	beq.n	80032c6 <HAL_GPIO_DeInit+0xd2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a62      	ldr	r2, [pc, #392]	@ (80033e4 <HAL_GPIO_DeInit+0x1f0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d031      	beq.n	80032c2 <HAL_GPIO_DeInit+0xce>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a61      	ldr	r2, [pc, #388]	@ (80033e8 <HAL_GPIO_DeInit+0x1f4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d02b      	beq.n	80032be <HAL_GPIO_DeInit+0xca>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a60      	ldr	r2, [pc, #384]	@ (80033ec <HAL_GPIO_DeInit+0x1f8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d025      	beq.n	80032ba <HAL_GPIO_DeInit+0xc6>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a5f      	ldr	r2, [pc, #380]	@ (80033f0 <HAL_GPIO_DeInit+0x1fc>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d01f      	beq.n	80032b6 <HAL_GPIO_DeInit+0xc2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a5e      	ldr	r2, [pc, #376]	@ (80033f4 <HAL_GPIO_DeInit+0x200>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d019      	beq.n	80032b2 <HAL_GPIO_DeInit+0xbe>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a5d      	ldr	r2, [pc, #372]	@ (80033f8 <HAL_GPIO_DeInit+0x204>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d013      	beq.n	80032ae <HAL_GPIO_DeInit+0xba>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a5c      	ldr	r2, [pc, #368]	@ (80033fc <HAL_GPIO_DeInit+0x208>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00d      	beq.n	80032aa <HAL_GPIO_DeInit+0xb6>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a5b      	ldr	r2, [pc, #364]	@ (8003400 <HAL_GPIO_DeInit+0x20c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d007      	beq.n	80032a6 <HAL_GPIO_DeInit+0xb2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a5a      	ldr	r2, [pc, #360]	@ (8003404 <HAL_GPIO_DeInit+0x210>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <HAL_GPIO_DeInit+0xae>
 800329e:	2309      	movs	r3, #9
 80032a0:	e012      	b.n	80032c8 <HAL_GPIO_DeInit+0xd4>
 80032a2:	230a      	movs	r3, #10
 80032a4:	e010      	b.n	80032c8 <HAL_GPIO_DeInit+0xd4>
 80032a6:	2308      	movs	r3, #8
 80032a8:	e00e      	b.n	80032c8 <HAL_GPIO_DeInit+0xd4>
 80032aa:	2307      	movs	r3, #7
 80032ac:	e00c      	b.n	80032c8 <HAL_GPIO_DeInit+0xd4>
 80032ae:	2306      	movs	r3, #6
 80032b0:	e00a      	b.n	80032c8 <HAL_GPIO_DeInit+0xd4>
 80032b2:	2305      	movs	r3, #5
 80032b4:	e008      	b.n	80032c8 <HAL_GPIO_DeInit+0xd4>
 80032b6:	2304      	movs	r3, #4
 80032b8:	e006      	b.n	80032c8 <HAL_GPIO_DeInit+0xd4>
 80032ba:	2303      	movs	r3, #3
 80032bc:	e004      	b.n	80032c8 <HAL_GPIO_DeInit+0xd4>
 80032be:	2302      	movs	r3, #2
 80032c0:	e002      	b.n	80032c8 <HAL_GPIO_DeInit+0xd4>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <HAL_GPIO_DeInit+0xd4>
 80032c6:	2300      	movs	r3, #0
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	f002 0203 	and.w	r2, r2, #3
 80032ce:	0092      	lsls	r2, r2, #2
 80032d0:	4093      	lsls	r3, r2
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d132      	bne.n	800333e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80032d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003408 <HAL_GPIO_DeInit+0x214>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	43db      	mvns	r3, r3
 80032e0:	4949      	ldr	r1, [pc, #292]	@ (8003408 <HAL_GPIO_DeInit+0x214>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80032e6:	4b48      	ldr	r3, [pc, #288]	@ (8003408 <HAL_GPIO_DeInit+0x214>)
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	4946      	ldr	r1, [pc, #280]	@ (8003408 <HAL_GPIO_DeInit+0x214>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80032f4:	4b44      	ldr	r3, [pc, #272]	@ (8003408 <HAL_GPIO_DeInit+0x214>)
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	4942      	ldr	r1, [pc, #264]	@ (8003408 <HAL_GPIO_DeInit+0x214>)
 80032fe:	4013      	ands	r3, r2
 8003300:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003302:	4b41      	ldr	r3, [pc, #260]	@ (8003408 <HAL_GPIO_DeInit+0x214>)
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	43db      	mvns	r3, r3
 800330a:	493f      	ldr	r1, [pc, #252]	@ (8003408 <HAL_GPIO_DeInit+0x214>)
 800330c:	4013      	ands	r3, r2
 800330e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	220f      	movs	r2, #15
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003320:	4a2e      	ldr	r2, [pc, #184]	@ (80033dc <HAL_GPIO_DeInit+0x1e8>)
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	089b      	lsrs	r3, r3, #2
 8003326:	3302      	adds	r3, #2
 8003328:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	43da      	mvns	r2, r3
 8003330:	482a      	ldr	r0, [pc, #168]	@ (80033dc <HAL_GPIO_DeInit+0x1e8>)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	089b      	lsrs	r3, r3, #2
 8003336:	400a      	ands	r2, r1
 8003338:	3302      	adds	r3, #2
 800333a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	2103      	movs	r1, #3
 8003348:	fa01 f303 	lsl.w	r3, r1, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	401a      	ands	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	08da      	lsrs	r2, r3, #3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3208      	adds	r2, #8
 800335c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	220f      	movs	r2, #15
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	08d2      	lsrs	r2, r2, #3
 8003374:	4019      	ands	r1, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3208      	adds	r2, #8
 800337a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	2103      	movs	r1, #3
 8003388:	fa01 f303 	lsl.w	r3, r1, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	401a      	ands	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	2101      	movs	r1, #1
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	fa01 f303 	lsl.w	r3, r1, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	401a      	ands	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	2103      	movs	r1, #3
 80033b2:	fa01 f303 	lsl.w	r3, r1, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	401a      	ands	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	3301      	adds	r3, #1
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	2b0f      	cmp	r3, #15
 80033c8:	f67f af22 	bls.w	8003210 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80033cc:	bf00      	nop
 80033ce:	bf00      	nop
 80033d0:	371c      	adds	r7, #28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	40013800 	.word	0x40013800
 80033e0:	40020000 	.word	0x40020000
 80033e4:	40020400 	.word	0x40020400
 80033e8:	40020800 	.word	0x40020800
 80033ec:	40020c00 	.word	0x40020c00
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40021400 	.word	0x40021400
 80033f8:	40021800 	.word	0x40021800
 80033fc:	40021c00 	.word	0x40021c00
 8003400:	40022000 	.word	0x40022000
 8003404:	40022400 	.word	0x40022400
 8003408:	40013c00 	.word	0x40013c00

0800340c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	807b      	strh	r3, [r7, #2]
 8003418:	4613      	mov	r3, r2
 800341a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800341c:	787b      	ldrb	r3, [r7, #1]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003422:	887a      	ldrh	r2, [r7, #2]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003428:	e003      	b.n	8003432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800342a:	887b      	ldrh	r3, [r7, #2]
 800342c:	041a      	lsls	r2, r3, #16
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	619a      	str	r2, [r3, #24]
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e12b      	b.n	80036aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fe fdac 	bl	8001fc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2224      	movs	r2, #36	@ 0x24
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003492:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034a4:	f001 ff82 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 80034a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4a81      	ldr	r2, [pc, #516]	@ (80036b4 <HAL_I2C_Init+0x274>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d807      	bhi.n	80034c4 <HAL_I2C_Init+0x84>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4a80      	ldr	r2, [pc, #512]	@ (80036b8 <HAL_I2C_Init+0x278>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	bf94      	ite	ls
 80034bc:	2301      	movls	r3, #1
 80034be:	2300      	movhi	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	e006      	b.n	80034d2 <HAL_I2C_Init+0x92>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4a7d      	ldr	r2, [pc, #500]	@ (80036bc <HAL_I2C_Init+0x27c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	bf94      	ite	ls
 80034cc:	2301      	movls	r3, #1
 80034ce:	2300      	movhi	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e0e7      	b.n	80036aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4a78      	ldr	r2, [pc, #480]	@ (80036c0 <HAL_I2C_Init+0x280>)
 80034de:	fba2 2303 	umull	r2, r3, r2, r3
 80034e2:	0c9b      	lsrs	r3, r3, #18
 80034e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	4a6a      	ldr	r2, [pc, #424]	@ (80036b4 <HAL_I2C_Init+0x274>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d802      	bhi.n	8003514 <HAL_I2C_Init+0xd4>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	3301      	adds	r3, #1
 8003512:	e009      	b.n	8003528 <HAL_I2C_Init+0xe8>
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800351a:	fb02 f303 	mul.w	r3, r2, r3
 800351e:	4a69      	ldr	r2, [pc, #420]	@ (80036c4 <HAL_I2C_Init+0x284>)
 8003520:	fba2 2303 	umull	r2, r3, r2, r3
 8003524:	099b      	lsrs	r3, r3, #6
 8003526:	3301      	adds	r3, #1
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	430b      	orrs	r3, r1
 800352e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800353a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	495c      	ldr	r1, [pc, #368]	@ (80036b4 <HAL_I2C_Init+0x274>)
 8003544:	428b      	cmp	r3, r1
 8003546:	d819      	bhi.n	800357c <HAL_I2C_Init+0x13c>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	1e59      	subs	r1, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	fbb1 f3f3 	udiv	r3, r1, r3
 8003556:	1c59      	adds	r1, r3, #1
 8003558:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800355c:	400b      	ands	r3, r1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_I2C_Init+0x138>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	1e59      	subs	r1, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003570:	3301      	adds	r3, #1
 8003572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003576:	e051      	b.n	800361c <HAL_I2C_Init+0x1dc>
 8003578:	2304      	movs	r3, #4
 800357a:	e04f      	b.n	800361c <HAL_I2C_Init+0x1dc>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d111      	bne.n	80035a8 <HAL_I2C_Init+0x168>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1e58      	subs	r0, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6859      	ldr	r1, [r3, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	440b      	add	r3, r1
 8003592:	fbb0 f3f3 	udiv	r3, r0, r3
 8003596:	3301      	adds	r3, #1
 8003598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359c:	2b00      	cmp	r3, #0
 800359e:	bf0c      	ite	eq
 80035a0:	2301      	moveq	r3, #1
 80035a2:	2300      	movne	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	e012      	b.n	80035ce <HAL_I2C_Init+0x18e>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1e58      	subs	r0, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	0099      	lsls	r1, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80035be:	3301      	adds	r3, #1
 80035c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf0c      	ite	eq
 80035c8:	2301      	moveq	r3, #1
 80035ca:	2300      	movne	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_I2C_Init+0x196>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e022      	b.n	800361c <HAL_I2C_Init+0x1dc>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10e      	bne.n	80035fc <HAL_I2C_Init+0x1bc>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1e58      	subs	r0, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6859      	ldr	r1, [r3, #4]
 80035e6:	460b      	mov	r3, r1
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	440b      	add	r3, r1
 80035ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80035f0:	3301      	adds	r3, #1
 80035f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035fa:	e00f      	b.n	800361c <HAL_I2C_Init+0x1dc>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1e58      	subs	r0, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6859      	ldr	r1, [r3, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	0099      	lsls	r1, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003612:	3301      	adds	r3, #1
 8003614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003618:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	6809      	ldr	r1, [r1, #0]
 8003620:	4313      	orrs	r3, r2
 8003622:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69da      	ldr	r2, [r3, #28]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800364a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6911      	ldr	r1, [r2, #16]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68d2      	ldr	r2, [r2, #12]
 8003656:	4311      	orrs	r1, r2
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	430b      	orrs	r3, r1
 800365e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695a      	ldr	r2, [r3, #20]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	000186a0 	.word	0x000186a0
 80036b8:	001e847f 	.word	0x001e847f
 80036bc:	003d08ff 	.word	0x003d08ff
 80036c0:	431bde83 	.word	0x431bde83
 80036c4:	10624dd3 	.word	0x10624dd3

080036c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	4608      	mov	r0, r1
 80036d2:	4611      	mov	r1, r2
 80036d4:	461a      	mov	r2, r3
 80036d6:	4603      	mov	r3, r0
 80036d8:	817b      	strh	r3, [r7, #10]
 80036da:	460b      	mov	r3, r1
 80036dc:	813b      	strh	r3, [r7, #8]
 80036de:	4613      	mov	r3, r2
 80036e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036e2:	f7ff fac5 	bl	8002c70 <HAL_GetTick>
 80036e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	f040 80d9 	bne.w	80038a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	2319      	movs	r3, #25
 80036fc:	2201      	movs	r2, #1
 80036fe:	496d      	ldr	r1, [pc, #436]	@ (80038b4 <HAL_I2C_Mem_Write+0x1ec>)
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 fc8b 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800370c:	2302      	movs	r3, #2
 800370e:	e0cc      	b.n	80038aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_I2C_Mem_Write+0x56>
 800371a:	2302      	movs	r3, #2
 800371c:	e0c5      	b.n	80038aa <HAL_I2C_Mem_Write+0x1e2>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b01      	cmp	r3, #1
 8003732:	d007      	beq.n	8003744 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0201 	orr.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003752:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2221      	movs	r2, #33	@ 0x21
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2240      	movs	r2, #64	@ 0x40
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a3a      	ldr	r2, [r7, #32]
 800376e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003774:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4a4d      	ldr	r2, [pc, #308]	@ (80038b8 <HAL_I2C_Mem_Write+0x1f0>)
 8003784:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003786:	88f8      	ldrh	r0, [r7, #6]
 8003788:	893a      	ldrh	r2, [r7, #8]
 800378a:	8979      	ldrh	r1, [r7, #10]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	9301      	str	r3, [sp, #4]
 8003790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	4603      	mov	r3, r0
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 fac2 	bl	8003d20 <I2C_RequestMemoryWrite>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d052      	beq.n	8003848 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e081      	b.n	80038aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 fd50 	bl	8004250 <I2C_WaitOnTXEFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00d      	beq.n	80037d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d107      	bne.n	80037ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e06b      	b.n	80038aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d6:	781a      	ldrb	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b04      	cmp	r3, #4
 800380e:	d11b      	bne.n	8003848 <HAL_I2C_Mem_Write+0x180>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003814:	2b00      	cmp	r3, #0
 8003816:	d017      	beq.n	8003848 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	781a      	ldrb	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003832:	3b01      	subs	r3, #1
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1aa      	bne.n	80037a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 fd43 	bl	80042e0 <I2C_WaitOnBTFFlagUntilTimeout>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00d      	beq.n	800387c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003864:	2b04      	cmp	r3, #4
 8003866:	d107      	bne.n	8003878 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003876:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e016      	b.n	80038aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800388a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	e000      	b.n	80038aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
  }
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	00100002 	.word	0x00100002
 80038b8:	ffff0000 	.word	0xffff0000

080038bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08c      	sub	sp, #48	@ 0x30
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	4608      	mov	r0, r1
 80038c6:	4611      	mov	r1, r2
 80038c8:	461a      	mov	r2, r3
 80038ca:	4603      	mov	r3, r0
 80038cc:	817b      	strh	r3, [r7, #10]
 80038ce:	460b      	mov	r3, r1
 80038d0:	813b      	strh	r3, [r7, #8]
 80038d2:	4613      	mov	r3, r2
 80038d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038d6:	f7ff f9cb 	bl	8002c70 <HAL_GetTick>
 80038da:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	f040 8214 	bne.w	8003d12 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	2319      	movs	r3, #25
 80038f0:	2201      	movs	r2, #1
 80038f2:	497b      	ldr	r1, [pc, #492]	@ (8003ae0 <HAL_I2C_Mem_Read+0x224>)
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 fb91 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003900:	2302      	movs	r3, #2
 8003902:	e207      	b.n	8003d14 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_I2C_Mem_Read+0x56>
 800390e:	2302      	movs	r3, #2
 8003910:	e200      	b.n	8003d14 <HAL_I2C_Mem_Read+0x458>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b01      	cmp	r3, #1
 8003926:	d007      	beq.n	8003938 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0201 	orr.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003946:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2222      	movs	r2, #34	@ 0x22
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2240      	movs	r2, #64	@ 0x40
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003962:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003968:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4a5b      	ldr	r2, [pc, #364]	@ (8003ae4 <HAL_I2C_Mem_Read+0x228>)
 8003978:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800397a:	88f8      	ldrh	r0, [r7, #6]
 800397c:	893a      	ldrh	r2, [r7, #8]
 800397e:	8979      	ldrh	r1, [r7, #10]
 8003980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003982:	9301      	str	r3, [sp, #4]
 8003984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	4603      	mov	r3, r0
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 fa5e 	bl	8003e4c <I2C_RequestMemoryRead>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e1bc      	b.n	8003d14 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d113      	bne.n	80039ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a2:	2300      	movs	r3, #0
 80039a4:	623b      	str	r3, [r7, #32]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	623b      	str	r3, [r7, #32]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	623b      	str	r3, [r7, #32]
 80039b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	e190      	b.n	8003cec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d11b      	bne.n	8003a0a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	e170      	b.n	8003cec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d11b      	bne.n	8003a4a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a20:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	e150      	b.n	8003cec <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a60:	e144      	b.n	8003cec <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	f200 80f1 	bhi.w	8003c4e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d123      	bne.n	8003abc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a76:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 fc79 	bl	8004370 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e145      	b.n	8003d14 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003aba:	e117      	b.n	8003cec <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d14e      	bne.n	8003b62 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aca:	2200      	movs	r2, #0
 8003acc:	4906      	ldr	r1, [pc, #24]	@ (8003ae8 <HAL_I2C_Mem_Read+0x22c>)
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 faa4 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d008      	beq.n	8003aec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e11a      	b.n	8003d14 <HAL_I2C_Mem_Read+0x458>
 8003ade:	bf00      	nop
 8003ae0:	00100002 	.word	0x00100002
 8003ae4:	ffff0000 	.word	0xffff0000
 8003ae8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003afa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691a      	ldr	r2, [r3, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b60:	e0c4      	b.n	8003cec <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b68:	2200      	movs	r2, #0
 8003b6a:	496c      	ldr	r1, [pc, #432]	@ (8003d1c <HAL_I2C_Mem_Read+0x460>)
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 fa55 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e0cb      	b.n	8003d14 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691a      	ldr	r2, [r3, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	4955      	ldr	r1, [pc, #340]	@ (8003d1c <HAL_I2C_Mem_Read+0x460>)
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 fa27 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e09d      	b.n	8003d14 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003be6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	691a      	ldr	r2, [r3, #16]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c4c:	e04e      	b.n	8003cec <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c50:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 fb8c 	bl	8004370 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e058      	b.n	8003d14 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d124      	bne.n	8003cec <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d107      	bne.n	8003cba <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cb8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f47f aeb6 	bne.w	8003a62 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	e000      	b.n	8003d14 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003d12:	2302      	movs	r3, #2
  }
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3728      	adds	r7, #40	@ 0x28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	00010004 	.word	0x00010004

08003d20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	4608      	mov	r0, r1
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	4603      	mov	r3, r0
 8003d30:	817b      	strh	r3, [r7, #10]
 8003d32:	460b      	mov	r3, r1
 8003d34:	813b      	strh	r3, [r7, #8]
 8003d36:	4613      	mov	r3, r2
 8003d38:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f960 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00d      	beq.n	8003d7e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d70:	d103      	bne.n	8003d7a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d78:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e05f      	b.n	8003e3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d7e:	897b      	ldrh	r3, [r7, #10]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	6a3a      	ldr	r2, [r7, #32]
 8003d92:	492d      	ldr	r1, [pc, #180]	@ (8003e48 <I2C_RequestMemoryWrite+0x128>)
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f9bb 	bl	8004110 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e04c      	b.n	8003e3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da4:	2300      	movs	r3, #0
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dbc:	6a39      	ldr	r1, [r7, #32]
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 fa46 	bl	8004250 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00d      	beq.n	8003de6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d107      	bne.n	8003de2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003de0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e02b      	b.n	8003e3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d105      	bne.n	8003df8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dec:	893b      	ldrh	r3, [r7, #8]
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	611a      	str	r2, [r3, #16]
 8003df6:	e021      	b.n	8003e3c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003df8:	893b      	ldrh	r3, [r7, #8]
 8003dfa:	0a1b      	lsrs	r3, r3, #8
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e08:	6a39      	ldr	r1, [r7, #32]
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 fa20 	bl	8004250 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00d      	beq.n	8003e32 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d107      	bne.n	8003e2e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e005      	b.n	8003e3e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e32:	893b      	ldrh	r3, [r7, #8]
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	00010002 	.word	0x00010002

08003e4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	4608      	mov	r0, r1
 8003e56:	4611      	mov	r1, r2
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	817b      	strh	r3, [r7, #10]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	813b      	strh	r3, [r7, #8]
 8003e62:	4613      	mov	r3, r2
 8003e64:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e74:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 f8c2 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00d      	beq.n	8003eba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eac:	d103      	bne.n	8003eb6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003eb4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e0aa      	b.n	8004010 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003eba:	897b      	ldrh	r3, [r7, #10]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ec8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	6a3a      	ldr	r2, [r7, #32]
 8003ece:	4952      	ldr	r1, [pc, #328]	@ (8004018 <I2C_RequestMemoryRead+0x1cc>)
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f91d 	bl	8004110 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e097      	b.n	8004010 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef8:	6a39      	ldr	r1, [r7, #32]
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 f9a8 	bl	8004250 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00d      	beq.n	8003f22 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d107      	bne.n	8003f1e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e076      	b.n	8004010 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d105      	bne.n	8003f34 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f28:	893b      	ldrh	r3, [r7, #8]
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	611a      	str	r2, [r3, #16]
 8003f32:	e021      	b.n	8003f78 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f34:	893b      	ldrh	r3, [r7, #8]
 8003f36:	0a1b      	lsrs	r3, r3, #8
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f44:	6a39      	ldr	r1, [r7, #32]
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f982 	bl	8004250 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00d      	beq.n	8003f6e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d107      	bne.n	8003f6a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e050      	b.n	8004010 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f6e:	893b      	ldrh	r3, [r7, #8]
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f7a:	6a39      	ldr	r1, [r7, #32]
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f967 	bl	8004250 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00d      	beq.n	8003fa4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d107      	bne.n	8003fa0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f9e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e035      	b.n	8004010 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fb2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 f82b 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00d      	beq.n	8003fe8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fda:	d103      	bne.n	8003fe4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fe2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e013      	b.n	8004010 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fe8:	897b      	ldrh	r3, [r7, #10]
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	6a3a      	ldr	r2, [r7, #32]
 8003ffc:	4906      	ldr	r1, [pc, #24]	@ (8004018 <I2C_RequestMemoryRead+0x1cc>)
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 f886 	bl	8004110 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	00010002 	.word	0x00010002

0800401c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800402c:	e048      	b.n	80040c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004034:	d044      	beq.n	80040c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004036:	f7fe fe1b 	bl	8002c70 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d302      	bcc.n	800404c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d139      	bne.n	80040c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	0c1b      	lsrs	r3, r3, #16
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b01      	cmp	r3, #1
 8004054:	d10d      	bne.n	8004072 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	43da      	mvns	r2, r3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4013      	ands	r3, r2
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	bf0c      	ite	eq
 8004068:	2301      	moveq	r3, #1
 800406a:	2300      	movne	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	461a      	mov	r2, r3
 8004070:	e00c      	b.n	800408c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	43da      	mvns	r2, r3
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	4013      	ands	r3, r2
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	bf0c      	ite	eq
 8004084:	2301      	moveq	r3, #1
 8004086:	2300      	movne	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	461a      	mov	r2, r3
 800408c:	79fb      	ldrb	r3, [r7, #7]
 800408e:	429a      	cmp	r2, r3
 8004090:	d116      	bne.n	80040c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ac:	f043 0220 	orr.w	r2, r3, #32
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e023      	b.n	8004108 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	0c1b      	lsrs	r3, r3, #16
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d10d      	bne.n	80040e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	43da      	mvns	r2, r3
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	4013      	ands	r3, r2
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bf0c      	ite	eq
 80040dc:	2301      	moveq	r3, #1
 80040de:	2300      	movne	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	e00c      	b.n	8004100 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	43da      	mvns	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	4013      	ands	r3, r2
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	bf0c      	ite	eq
 80040f8:	2301      	moveq	r3, #1
 80040fa:	2300      	movne	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	461a      	mov	r2, r3
 8004100:	79fb      	ldrb	r3, [r7, #7]
 8004102:	429a      	cmp	r2, r3
 8004104:	d093      	beq.n	800402e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800411e:	e071      	b.n	8004204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800412a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800412e:	d123      	bne.n	8004178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800413e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004148:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004164:	f043 0204 	orr.w	r2, r3, #4
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e067      	b.n	8004248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800417e:	d041      	beq.n	8004204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004180:	f7fe fd76 	bl	8002c70 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	429a      	cmp	r2, r3
 800418e:	d302      	bcc.n	8004196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d136      	bne.n	8004204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	0c1b      	lsrs	r3, r3, #16
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b01      	cmp	r3, #1
 800419e:	d10c      	bne.n	80041ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	43da      	mvns	r2, r3
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4013      	ands	r3, r2
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	bf14      	ite	ne
 80041b2:	2301      	movne	r3, #1
 80041b4:	2300      	moveq	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	e00b      	b.n	80041d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	43da      	mvns	r2, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4013      	ands	r3, r2
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	bf14      	ite	ne
 80041cc:	2301      	movne	r3, #1
 80041ce:	2300      	moveq	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d016      	beq.n	8004204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f0:	f043 0220 	orr.w	r2, r3, #32
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e021      	b.n	8004248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	0c1b      	lsrs	r3, r3, #16
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b01      	cmp	r3, #1
 800420c:	d10c      	bne.n	8004228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	43da      	mvns	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	4013      	ands	r3, r2
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	bf14      	ite	ne
 8004220:	2301      	movne	r3, #1
 8004222:	2300      	moveq	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	e00b      	b.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	43da      	mvns	r2, r3
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4013      	ands	r3, r2
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	bf14      	ite	ne
 800423a:	2301      	movne	r3, #1
 800423c:	2300      	moveq	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	f47f af6d 	bne.w	8004120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800425c:	e034      	b.n	80042c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 f8e3 	bl	800442a <I2C_IsAcknowledgeFailed>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e034      	b.n	80042d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004274:	d028      	beq.n	80042c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004276:	f7fe fcfb 	bl	8002c70 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	429a      	cmp	r2, r3
 8004284:	d302      	bcc.n	800428c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d11d      	bne.n	80042c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004296:	2b80      	cmp	r3, #128	@ 0x80
 8004298:	d016      	beq.n	80042c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b4:	f043 0220 	orr.w	r2, r3, #32
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e007      	b.n	80042d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d2:	2b80      	cmp	r3, #128	@ 0x80
 80042d4:	d1c3      	bne.n	800425e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042ec:	e034      	b.n	8004358 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 f89b 	bl	800442a <I2C_IsAcknowledgeFailed>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e034      	b.n	8004368 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004304:	d028      	beq.n	8004358 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004306:	f7fe fcb3 	bl	8002c70 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	429a      	cmp	r2, r3
 8004314:	d302      	bcc.n	800431c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d11d      	bne.n	8004358 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b04      	cmp	r3, #4
 8004328:	d016      	beq.n	8004358 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004344:	f043 0220 	orr.w	r2, r3, #32
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e007      	b.n	8004368 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b04      	cmp	r3, #4
 8004364:	d1c3      	bne.n	80042ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800437c:	e049      	b.n	8004412 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b10      	cmp	r3, #16
 800438a:	d119      	bne.n	80043c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f06f 0210 	mvn.w	r2, #16
 8004394:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e030      	b.n	8004422 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c0:	f7fe fc56 	bl	8002c70 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d302      	bcc.n	80043d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d11d      	bne.n	8004412 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e0:	2b40      	cmp	r3, #64	@ 0x40
 80043e2:	d016      	beq.n	8004412 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e007      	b.n	8004422 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800441c:	2b40      	cmp	r3, #64	@ 0x40
 800441e:	d1ae      	bne.n	800437e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800443c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004440:	d11b      	bne.n	800447a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800444a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004466:	f043 0204 	orr.w	r2, r3, #4
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b20      	cmp	r3, #32
 800449c:	d129      	bne.n	80044f2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2224      	movs	r2, #36	@ 0x24
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0201 	bic.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0210 	bic.w	r2, r2, #16
 80044c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0201 	orr.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80044ee:	2300      	movs	r3, #0
 80044f0:	e000      	b.n	80044f4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80044f2:	2302      	movs	r3, #2
  }
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b20      	cmp	r3, #32
 8004518:	d12a      	bne.n	8004570 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2224      	movs	r2, #36	@ 0x24
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0201 	bic.w	r2, r2, #1
 8004530:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004538:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800453a:	89fb      	ldrh	r3, [r7, #14]
 800453c:	f023 030f 	bic.w	r3, r3, #15
 8004540:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	b29a      	uxth	r2, r3
 8004546:	89fb      	ldrh	r3, [r7, #14]
 8004548:	4313      	orrs	r3, r2
 800454a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	89fa      	ldrh	r2, [r7, #14]
 8004552:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2220      	movs	r2, #32
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800456c:	2300      	movs	r3, #0
 800456e:	e000      	b.n	8004572 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004570:	2302      	movs	r3, #2
  }
}
 8004572:	4618      	mov	r0, r3
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
	...

08004580 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e0bf      	b.n	8004712 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fd fd76 	bl	8002098 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80045c2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6999      	ldr	r1, [r3, #24]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80045d8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6899      	ldr	r1, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	4b4a      	ldr	r3, [pc, #296]	@ (800471c <HAL_LTDC_Init+0x19c>)
 80045f4:	400b      	ands	r3, r1
 80045f6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	041b      	lsls	r3, r3, #16
 80045fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6899      	ldr	r1, [r3, #8]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699a      	ldr	r2, [r3, #24]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68d9      	ldr	r1, [r3, #12]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	4b3e      	ldr	r3, [pc, #248]	@ (800471c <HAL_LTDC_Init+0x19c>)
 8004622:	400b      	ands	r3, r1
 8004624:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	041b      	lsls	r3, r3, #16
 800462c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68d9      	ldr	r1, [r3, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a1a      	ldr	r2, [r3, #32]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6919      	ldr	r1, [r3, #16]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	4b33      	ldr	r3, [pc, #204]	@ (800471c <HAL_LTDC_Init+0x19c>)
 8004650:	400b      	ands	r3, r1
 8004652:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004658:	041b      	lsls	r3, r3, #16
 800465a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6919      	ldr	r1, [r3, #16]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6959      	ldr	r1, [r3, #20]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	4b27      	ldr	r3, [pc, #156]	@ (800471c <HAL_LTDC_Init+0x19c>)
 800467e:	400b      	ands	r3, r1
 8004680:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004686:	041b      	lsls	r3, r3, #16
 8004688:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6959      	ldr	r1, [r3, #20]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046a6:	021b      	lsls	r3, r3, #8
 80046a8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80046b0:	041b      	lsls	r3, r3, #16
 80046b2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80046c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0206 	orr.w	r2, r2, #6
 80046ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699a      	ldr	r2, [r3, #24]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	f000f800 	.word	0xf000f800

08004720 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004720:	b5b0      	push	{r4, r5, r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_LTDC_ConfigLayer+0x1a>
 8004736:	2302      	movs	r3, #2
 8004738:	e02c      	b.n	8004794 <HAL_LTDC_ConfigLayer+0x74>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2202      	movs	r2, #2
 8004746:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2134      	movs	r1, #52	@ 0x34
 8004750:	fb01 f303 	mul.w	r3, r1, r3
 8004754:	4413      	add	r3, r2
 8004756:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	4614      	mov	r4, r2
 800475e:	461d      	mov	r5, r3
 8004760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800476a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800476c:	682b      	ldr	r3, [r5, #0]
 800476e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	68b9      	ldr	r1, [r7, #8]
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f811 	bl	800479c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2201      	movs	r2, #1
 8004780:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bdb0      	pop	{r4, r5, r7, pc}

0800479c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800479c:	b480      	push	{r7}
 800479e:	b089      	sub	sp, #36	@ 0x24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	0c1b      	lsrs	r3, r3, #16
 80047b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b8:	4413      	add	r3, r2
 80047ba:	041b      	lsls	r3, r3, #16
 80047bc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	01db      	lsls	r3, r3, #7
 80047c8:	4413      	add	r3, r2
 80047ca:	3384      	adds	r3, #132	@ 0x84
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	6812      	ldr	r2, [r2, #0]
 80047d2:	4611      	mov	r1, r2
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	01d2      	lsls	r2, r2, #7
 80047d8:	440a      	add	r2, r1
 80047da:	3284      	adds	r2, #132	@ 0x84
 80047dc:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80047e0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	0c1b      	lsrs	r3, r3, #16
 80047ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80047f2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80047f4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4619      	mov	r1, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	01db      	lsls	r3, r3, #7
 8004800:	440b      	add	r3, r1
 8004802:	3384      	adds	r3, #132	@ 0x84
 8004804:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800480a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800481a:	4413      	add	r3, r2
 800481c:	041b      	lsls	r3, r3, #16
 800481e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	461a      	mov	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	01db      	lsls	r3, r3, #7
 800482a:	4413      	add	r3, r2
 800482c:	3384      	adds	r3, #132	@ 0x84
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	6812      	ldr	r2, [r2, #0]
 8004834:	4611      	mov	r1, r2
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	01d2      	lsls	r2, r2, #7
 800483a:	440a      	add	r2, r1
 800483c:	3284      	adds	r2, #132	@ 0x84
 800483e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004842:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004852:	4413      	add	r3, r2
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4619      	mov	r1, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	01db      	lsls	r3, r3, #7
 8004860:	440b      	add	r3, r1
 8004862:	3384      	adds	r3, #132	@ 0x84
 8004864:	4619      	mov	r1, r3
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	4313      	orrs	r3, r2
 800486a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	461a      	mov	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	01db      	lsls	r3, r3, #7
 8004876:	4413      	add	r3, r2
 8004878:	3384      	adds	r3, #132	@ 0x84
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	6812      	ldr	r2, [r2, #0]
 8004880:	4611      	mov	r1, r2
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	01d2      	lsls	r2, r2, #7
 8004886:	440a      	add	r2, r1
 8004888:	3284      	adds	r2, #132	@ 0x84
 800488a:	f023 0307 	bic.w	r3, r3, #7
 800488e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	01db      	lsls	r3, r3, #7
 800489a:	4413      	add	r3, r2
 800489c:	3384      	adds	r3, #132	@ 0x84
 800489e:	461a      	mov	r2, r3
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80048ac:	021b      	lsls	r3, r3, #8
 80048ae:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80048b6:	041b      	lsls	r3, r3, #16
 80048b8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	061b      	lsls	r3, r3, #24
 80048c0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	01db      	lsls	r3, r3, #7
 80048cc:	4413      	add	r3, r2
 80048ce:	3384      	adds	r3, #132	@ 0x84
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	01db      	lsls	r3, r3, #7
 80048dc:	4413      	add	r3, r2
 80048de:	3384      	adds	r3, #132	@ 0x84
 80048e0:	461a      	mov	r2, r3
 80048e2:	2300      	movs	r3, #0
 80048e4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80048ec:	461a      	mov	r2, r3
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	431a      	orrs	r2, r3
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	431a      	orrs	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4619      	mov	r1, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	01db      	lsls	r3, r3, #7
 8004900:	440b      	add	r3, r1
 8004902:	3384      	adds	r3, #132	@ 0x84
 8004904:	4619      	mov	r1, r3
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	4313      	orrs	r3, r2
 800490a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	01db      	lsls	r3, r3, #7
 8004916:	4413      	add	r3, r2
 8004918:	3384      	adds	r3, #132	@ 0x84
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	6812      	ldr	r2, [r2, #0]
 8004920:	4611      	mov	r1, r2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	01d2      	lsls	r2, r2, #7
 8004926:	440a      	add	r2, r1
 8004928:	3284      	adds	r2, #132	@ 0x84
 800492a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800492e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	461a      	mov	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	01db      	lsls	r3, r3, #7
 800493a:	4413      	add	r3, r2
 800493c:	3384      	adds	r3, #132	@ 0x84
 800493e:	461a      	mov	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	461a      	mov	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	01db      	lsls	r3, r3, #7
 8004950:	4413      	add	r3, r2
 8004952:	3384      	adds	r3, #132	@ 0x84
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	6812      	ldr	r2, [r2, #0]
 800495a:	4611      	mov	r1, r2
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	01d2      	lsls	r2, r2, #7
 8004960:	440a      	add	r2, r1
 8004962:	3284      	adds	r2, #132	@ 0x84
 8004964:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004968:	f023 0307 	bic.w	r3, r3, #7
 800496c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	69da      	ldr	r2, [r3, #28]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	68f9      	ldr	r1, [r7, #12]
 8004978:	6809      	ldr	r1, [r1, #0]
 800497a:	4608      	mov	r0, r1
 800497c:	6879      	ldr	r1, [r7, #4]
 800497e:	01c9      	lsls	r1, r1, #7
 8004980:	4401      	add	r1, r0
 8004982:	3184      	adds	r1, #132	@ 0x84
 8004984:	4313      	orrs	r3, r2
 8004986:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	461a      	mov	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	01db      	lsls	r3, r3, #7
 8004992:	4413      	add	r3, r2
 8004994:	3384      	adds	r3, #132	@ 0x84
 8004996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	461a      	mov	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	01db      	lsls	r3, r3, #7
 80049a2:	4413      	add	r3, r2
 80049a4:	3384      	adds	r3, #132	@ 0x84
 80049a6:	461a      	mov	r2, r3
 80049a8:	2300      	movs	r3, #0
 80049aa:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	01db      	lsls	r3, r3, #7
 80049b6:	4413      	add	r3, r2
 80049b8:	3384      	adds	r3, #132	@ 0x84
 80049ba:	461a      	mov	r2, r3
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c0:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d102      	bne.n	80049d0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80049ca:	2304      	movs	r3, #4
 80049cc:	61fb      	str	r3, [r7, #28]
 80049ce:	e01b      	b.n	8004a08 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d102      	bne.n	80049de <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80049d8:	2303      	movs	r3, #3
 80049da:	61fb      	str	r3, [r7, #28]
 80049dc:	e014      	b.n	8004a08 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d00b      	beq.n	80049fe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d007      	beq.n	80049fe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d003      	beq.n	80049fe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80049fa:	2b07      	cmp	r3, #7
 80049fc:	d102      	bne.n	8004a04 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80049fe:	2302      	movs	r3, #2
 8004a00:	61fb      	str	r3, [r7, #28]
 8004a02:	e001      	b.n	8004a08 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004a04:	2301      	movs	r3, #1
 8004a06:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	01db      	lsls	r3, r3, #7
 8004a12:	4413      	add	r3, r2
 8004a14:	3384      	adds	r3, #132	@ 0x84
 8004a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	6812      	ldr	r2, [r2, #0]
 8004a1c:	4611      	mov	r1, r2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	01d2      	lsls	r2, r2, #7
 8004a22:	440a      	add	r2, r1
 8004a24:	3284      	adds	r2, #132	@ 0x84
 8004a26:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a30:	69fa      	ldr	r2, [r7, #28]
 8004a32:	fb02 f303 	mul.w	r3, r2, r3
 8004a36:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	6859      	ldr	r1, [r3, #4]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	1acb      	subs	r3, r1, r3
 8004a42:	69f9      	ldr	r1, [r7, #28]
 8004a44:	fb01 f303 	mul.w	r3, r1, r3
 8004a48:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004a4a:	68f9      	ldr	r1, [r7, #12]
 8004a4c:	6809      	ldr	r1, [r1, #0]
 8004a4e:	4608      	mov	r0, r1
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	01c9      	lsls	r1, r1, #7
 8004a54:	4401      	add	r1, r0
 8004a56:	3184      	adds	r1, #132	@ 0x84
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	461a      	mov	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	01db      	lsls	r3, r3, #7
 8004a66:	4413      	add	r3, r2
 8004a68:	3384      	adds	r3, #132	@ 0x84
 8004a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	6812      	ldr	r2, [r2, #0]
 8004a70:	4611      	mov	r1, r2
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	01d2      	lsls	r2, r2, #7
 8004a76:	440a      	add	r2, r1
 8004a78:	3284      	adds	r2, #132	@ 0x84
 8004a7a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004a7e:	f023 0307 	bic.w	r3, r3, #7
 8004a82:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	01db      	lsls	r3, r3, #7
 8004a8e:	4413      	add	r3, r2
 8004a90:	3384      	adds	r3, #132	@ 0x84
 8004a92:	461a      	mov	r2, r3
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a98:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	01db      	lsls	r3, r3, #7
 8004aa4:	4413      	add	r3, r2
 8004aa6:	3384      	adds	r3, #132	@ 0x84
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	6812      	ldr	r2, [r2, #0]
 8004aae:	4611      	mov	r1, r2
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	01d2      	lsls	r2, r2, #7
 8004ab4:	440a      	add	r2, r1
 8004ab6:	3284      	adds	r2, #132	@ 0x84
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	6013      	str	r3, [r2, #0]
}
 8004abe:	bf00      	nop
 8004ac0:	3724      	adds	r7, #36	@ 0x24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
	...

08004acc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e267      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d075      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004aea:	4b88      	ldr	r3, [pc, #544]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d00c      	beq.n	8004b10 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004af6:	4b85      	ldr	r3, [pc, #532]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d112      	bne.n	8004b28 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b02:	4b82      	ldr	r3, [pc, #520]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b0e:	d10b      	bne.n	8004b28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b10:	4b7e      	ldr	r3, [pc, #504]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d05b      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x108>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d157      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e242      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b30:	d106      	bne.n	8004b40 <HAL_RCC_OscConfig+0x74>
 8004b32:	4b76      	ldr	r3, [pc, #472]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a75      	ldr	r2, [pc, #468]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	e01d      	b.n	8004b7c <HAL_RCC_OscConfig+0xb0>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b48:	d10c      	bne.n	8004b64 <HAL_RCC_OscConfig+0x98>
 8004b4a:	4b70      	ldr	r3, [pc, #448]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a6f      	ldr	r2, [pc, #444]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	4b6d      	ldr	r3, [pc, #436]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a6c      	ldr	r2, [pc, #432]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	e00b      	b.n	8004b7c <HAL_RCC_OscConfig+0xb0>
 8004b64:	4b69      	ldr	r3, [pc, #420]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a68      	ldr	r2, [pc, #416]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b6e:	6013      	str	r3, [r2, #0]
 8004b70:	4b66      	ldr	r3, [pc, #408]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a65      	ldr	r2, [pc, #404]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d013      	beq.n	8004bac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b84:	f7fe f874 	bl	8002c70 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b8c:	f7fe f870 	bl	8002c70 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b64      	cmp	r3, #100	@ 0x64
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e207      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9e:	4b5b      	ldr	r3, [pc, #364]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCC_OscConfig+0xc0>
 8004baa:	e014      	b.n	8004bd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bac:	f7fe f860 	bl	8002c70 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb4:	f7fe f85c 	bl	8002c70 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b64      	cmp	r3, #100	@ 0x64
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e1f3      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc6:	4b51      	ldr	r3, [pc, #324]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1f0      	bne.n	8004bb4 <HAL_RCC_OscConfig+0xe8>
 8004bd2:	e000      	b.n	8004bd6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d063      	beq.n	8004caa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004be2:	4b4a      	ldr	r3, [pc, #296]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 030c 	and.w	r3, r3, #12
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00b      	beq.n	8004c06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bee:	4b47      	ldr	r3, [pc, #284]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004bf6:	2b08      	cmp	r3, #8
 8004bf8:	d11c      	bne.n	8004c34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bfa:	4b44      	ldr	r3, [pc, #272]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d116      	bne.n	8004c34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c06:	4b41      	ldr	r3, [pc, #260]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <HAL_RCC_OscConfig+0x152>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d001      	beq.n	8004c1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e1c7      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	4937      	ldr	r1, [pc, #220]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c32:	e03a      	b.n	8004caa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d020      	beq.n	8004c7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c3c:	4b34      	ldr	r3, [pc, #208]	@ (8004d10 <HAL_RCC_OscConfig+0x244>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c42:	f7fe f815 	bl	8002c70 <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c4a:	f7fe f811 	bl	8002c70 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e1a8      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5c:	4b2b      	ldr	r3, [pc, #172]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f0      	beq.n	8004c4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c68:	4b28      	ldr	r3, [pc, #160]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	4925      	ldr	r1, [pc, #148]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	600b      	str	r3, [r1, #0]
 8004c7c:	e015      	b.n	8004caa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c7e:	4b24      	ldr	r3, [pc, #144]	@ (8004d10 <HAL_RCC_OscConfig+0x244>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c84:	f7fd fff4 	bl	8002c70 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c8c:	f7fd fff0 	bl	8002c70 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e187      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f0      	bne.n	8004c8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d036      	beq.n	8004d24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d016      	beq.n	8004cec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cbe:	4b15      	ldr	r3, [pc, #84]	@ (8004d14 <HAL_RCC_OscConfig+0x248>)
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc4:	f7fd ffd4 	bl	8002c70 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ccc:	f7fd ffd0 	bl	8002c70 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e167      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cde:	4b0b      	ldr	r3, [pc, #44]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004ce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCC_OscConfig+0x200>
 8004cea:	e01b      	b.n	8004d24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cec:	4b09      	ldr	r3, [pc, #36]	@ (8004d14 <HAL_RCC_OscConfig+0x248>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf2:	f7fd ffbd 	bl	8002c70 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf8:	e00e      	b.n	8004d18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cfa:	f7fd ffb9 	bl	8002c70 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d907      	bls.n	8004d18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e150      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	42470000 	.word	0x42470000
 8004d14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d18:	4b88      	ldr	r3, [pc, #544]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1ea      	bne.n	8004cfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 8097 	beq.w	8004e60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d32:	2300      	movs	r3, #0
 8004d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d36:	4b81      	ldr	r3, [pc, #516]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10f      	bne.n	8004d62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d42:	2300      	movs	r3, #0
 8004d44:	60bb      	str	r3, [r7, #8]
 8004d46:	4b7d      	ldr	r3, [pc, #500]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4a:	4a7c      	ldr	r2, [pc, #496]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d52:	4b7a      	ldr	r3, [pc, #488]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d62:	4b77      	ldr	r3, [pc, #476]	@ (8004f40 <HAL_RCC_OscConfig+0x474>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d118      	bne.n	8004da0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d6e:	4b74      	ldr	r3, [pc, #464]	@ (8004f40 <HAL_RCC_OscConfig+0x474>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a73      	ldr	r2, [pc, #460]	@ (8004f40 <HAL_RCC_OscConfig+0x474>)
 8004d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d7a:	f7fd ff79 	bl	8002c70 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d82:	f7fd ff75 	bl	8002c70 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e10c      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d94:	4b6a      	ldr	r3, [pc, #424]	@ (8004f40 <HAL_RCC_OscConfig+0x474>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d106      	bne.n	8004db6 <HAL_RCC_OscConfig+0x2ea>
 8004da8:	4b64      	ldr	r3, [pc, #400]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dac:	4a63      	ldr	r2, [pc, #396]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004db4:	e01c      	b.n	8004df0 <HAL_RCC_OscConfig+0x324>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b05      	cmp	r3, #5
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x30c>
 8004dbe:	4b5f      	ldr	r3, [pc, #380]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc2:	4a5e      	ldr	r2, [pc, #376]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dc4:	f043 0304 	orr.w	r3, r3, #4
 8004dc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dca:	4b5c      	ldr	r3, [pc, #368]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dce:	4a5b      	ldr	r2, [pc, #364]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dd0:	f043 0301 	orr.w	r3, r3, #1
 8004dd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dd6:	e00b      	b.n	8004df0 <HAL_RCC_OscConfig+0x324>
 8004dd8:	4b58      	ldr	r3, [pc, #352]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ddc:	4a57      	ldr	r2, [pc, #348]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004de4:	4b55      	ldr	r3, [pc, #340]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de8:	4a54      	ldr	r2, [pc, #336]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dea:	f023 0304 	bic.w	r3, r3, #4
 8004dee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d015      	beq.n	8004e24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df8:	f7fd ff3a 	bl	8002c70 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfe:	e00a      	b.n	8004e16 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e00:	f7fd ff36 	bl	8002c70 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e0cb      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e16:	4b49      	ldr	r3, [pc, #292]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0ee      	beq.n	8004e00 <HAL_RCC_OscConfig+0x334>
 8004e22:	e014      	b.n	8004e4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e24:	f7fd ff24 	bl	8002c70 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e2c:	f7fd ff20 	bl	8002c70 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e0b5      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e42:	4b3e      	ldr	r3, [pc, #248]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1ee      	bne.n	8004e2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e4e:	7dfb      	ldrb	r3, [r7, #23]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d105      	bne.n	8004e60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e54:	4b39      	ldr	r3, [pc, #228]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e58:	4a38      	ldr	r2, [pc, #224]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004e5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80a1 	beq.w	8004fac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e6a:	4b34      	ldr	r3, [pc, #208]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 030c 	and.w	r3, r3, #12
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d05c      	beq.n	8004f30 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d141      	bne.n	8004f02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7e:	4b31      	ldr	r3, [pc, #196]	@ (8004f44 <HAL_RCC_OscConfig+0x478>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e84:	f7fd fef4 	bl	8002c70 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e8c:	f7fd fef0 	bl	8002c70 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e087      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9e:	4b27      	ldr	r3, [pc, #156]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1f0      	bne.n	8004e8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69da      	ldr	r2, [r3, #28]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb8:	019b      	lsls	r3, r3, #6
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	041b      	lsls	r3, r3, #16
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ecc:	061b      	lsls	r3, r3, #24
 8004ece:	491b      	ldr	r1, [pc, #108]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f44 <HAL_RCC_OscConfig+0x478>)
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eda:	f7fd fec9 	bl	8002c70 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee2:	f7fd fec5 	bl	8002c70 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e05c      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef4:	4b11      	ldr	r3, [pc, #68]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0f0      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x416>
 8004f00:	e054      	b.n	8004fac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f02:	4b10      	ldr	r3, [pc, #64]	@ (8004f44 <HAL_RCC_OscConfig+0x478>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f08:	f7fd feb2 	bl	8002c70 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f10:	f7fd feae 	bl	8002c70 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e045      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f22:	4b06      	ldr	r3, [pc, #24]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1f0      	bne.n	8004f10 <HAL_RCC_OscConfig+0x444>
 8004f2e:	e03d      	b.n	8004fac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d107      	bne.n	8004f48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e038      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	40007000 	.word	0x40007000
 8004f44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f48:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb8 <HAL_RCC_OscConfig+0x4ec>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d028      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d121      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d11a      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f78:	4013      	ands	r3, r2
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d111      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8e:	085b      	lsrs	r3, r3, #1
 8004f90:	3b01      	subs	r3, #1
 8004f92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d107      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d001      	beq.n	8004fac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40023800 	.word	0x40023800

08004fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e0cc      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fd0:	4b68      	ldr	r3, [pc, #416]	@ (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d90c      	bls.n	8004ff8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fde:	4b65      	ldr	r3, [pc, #404]	@ (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe6:	4b63      	ldr	r3, [pc, #396]	@ (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d001      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0b8      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d020      	beq.n	8005046 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005010:	4b59      	ldr	r3, [pc, #356]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	4a58      	ldr	r2, [pc, #352]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005016:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800501a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0308 	and.w	r3, r3, #8
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005028:	4b53      	ldr	r3, [pc, #332]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	4a52      	ldr	r2, [pc, #328]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005032:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005034:	4b50      	ldr	r3, [pc, #320]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	494d      	ldr	r1, [pc, #308]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	4313      	orrs	r3, r2
 8005044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d044      	beq.n	80050dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d107      	bne.n	800506a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505a:	4b47      	ldr	r3, [pc, #284]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d119      	bne.n	800509a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e07f      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d003      	beq.n	800507a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005076:	2b03      	cmp	r3, #3
 8005078:	d107      	bne.n	800508a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800507a:	4b3f      	ldr	r3, [pc, #252]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d109      	bne.n	800509a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e06f      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800508a:	4b3b      	ldr	r3, [pc, #236]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e067      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800509a:	4b37      	ldr	r3, [pc, #220]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f023 0203 	bic.w	r2, r3, #3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	4934      	ldr	r1, [pc, #208]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050ac:	f7fd fde0 	bl	8002c70 <HAL_GetTick>
 80050b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b2:	e00a      	b.n	80050ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050b4:	f7fd fddc 	bl	8002c70 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e04f      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ca:	4b2b      	ldr	r3, [pc, #172]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 020c 	and.w	r2, r3, #12
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	429a      	cmp	r2, r3
 80050da:	d1eb      	bne.n	80050b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050dc:	4b25      	ldr	r3, [pc, #148]	@ (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 030f 	and.w	r3, r3, #15
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d20c      	bcs.n	8005104 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ea:	4b22      	ldr	r3, [pc, #136]	@ (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f2:	4b20      	ldr	r3, [pc, #128]	@ (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d001      	beq.n	8005104 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e032      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d008      	beq.n	8005122 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005110:	4b19      	ldr	r3, [pc, #100]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	4916      	ldr	r1, [pc, #88]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800511e:	4313      	orrs	r3, r2
 8005120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d009      	beq.n	8005142 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800512e:	4b12      	ldr	r3, [pc, #72]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	490e      	ldr	r1, [pc, #56]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800513e:	4313      	orrs	r3, r2
 8005140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005142:	f000 f821 	bl	8005188 <HAL_RCC_GetSysClockFreq>
 8005146:	4602      	mov	r2, r0
 8005148:	4b0b      	ldr	r3, [pc, #44]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	091b      	lsrs	r3, r3, #4
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	490a      	ldr	r1, [pc, #40]	@ (800517c <HAL_RCC_ClockConfig+0x1c0>)
 8005154:	5ccb      	ldrb	r3, [r1, r3]
 8005156:	fa22 f303 	lsr.w	r3, r2, r3
 800515a:	4a09      	ldr	r2, [pc, #36]	@ (8005180 <HAL_RCC_ClockConfig+0x1c4>)
 800515c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800515e:	4b09      	ldr	r3, [pc, #36]	@ (8005184 <HAL_RCC_ClockConfig+0x1c8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f7fd fd40 	bl	8002be8 <HAL_InitTick>

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	40023c00 	.word	0x40023c00
 8005178:	40023800 	.word	0x40023800
 800517c:	08007f94 	.word	0x08007f94
 8005180:	20000010 	.word	0x20000010
 8005184:	20000014 	.word	0x20000014

08005188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800518c:	b094      	sub	sp, #80	@ 0x50
 800518e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051a0:	4b79      	ldr	r3, [pc, #484]	@ (8005388 <HAL_RCC_GetSysClockFreq+0x200>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f003 030c 	and.w	r3, r3, #12
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d00d      	beq.n	80051c8 <HAL_RCC_GetSysClockFreq+0x40>
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	f200 80e1 	bhi.w	8005374 <HAL_RCC_GetSysClockFreq+0x1ec>
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <HAL_RCC_GetSysClockFreq+0x34>
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d003      	beq.n	80051c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80051ba:	e0db      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051bc:	4b73      	ldr	r3, [pc, #460]	@ (800538c <HAL_RCC_GetSysClockFreq+0x204>)
 80051be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051c0:	e0db      	b.n	800537a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051c2:	4b73      	ldr	r3, [pc, #460]	@ (8005390 <HAL_RCC_GetSysClockFreq+0x208>)
 80051c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051c6:	e0d8      	b.n	800537a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051c8:	4b6f      	ldr	r3, [pc, #444]	@ (8005388 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051d2:	4b6d      	ldr	r3, [pc, #436]	@ (8005388 <HAL_RCC_GetSysClockFreq+0x200>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d063      	beq.n	80052a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051de:	4b6a      	ldr	r3, [pc, #424]	@ (8005388 <HAL_RCC_GetSysClockFreq+0x200>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	099b      	lsrs	r3, r3, #6
 80051e4:	2200      	movs	r2, #0
 80051e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80051ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80051f2:	2300      	movs	r3, #0
 80051f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80051f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80051fa:	4622      	mov	r2, r4
 80051fc:	462b      	mov	r3, r5
 80051fe:	f04f 0000 	mov.w	r0, #0
 8005202:	f04f 0100 	mov.w	r1, #0
 8005206:	0159      	lsls	r1, r3, #5
 8005208:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800520c:	0150      	lsls	r0, r2, #5
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4621      	mov	r1, r4
 8005214:	1a51      	subs	r1, r2, r1
 8005216:	6139      	str	r1, [r7, #16]
 8005218:	4629      	mov	r1, r5
 800521a:	eb63 0301 	sbc.w	r3, r3, r1
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800522c:	4659      	mov	r1, fp
 800522e:	018b      	lsls	r3, r1, #6
 8005230:	4651      	mov	r1, sl
 8005232:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005236:	4651      	mov	r1, sl
 8005238:	018a      	lsls	r2, r1, #6
 800523a:	4651      	mov	r1, sl
 800523c:	ebb2 0801 	subs.w	r8, r2, r1
 8005240:	4659      	mov	r1, fp
 8005242:	eb63 0901 	sbc.w	r9, r3, r1
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	f04f 0300 	mov.w	r3, #0
 800524e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800525a:	4690      	mov	r8, r2
 800525c:	4699      	mov	r9, r3
 800525e:	4623      	mov	r3, r4
 8005260:	eb18 0303 	adds.w	r3, r8, r3
 8005264:	60bb      	str	r3, [r7, #8]
 8005266:	462b      	mov	r3, r5
 8005268:	eb49 0303 	adc.w	r3, r9, r3
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800527a:	4629      	mov	r1, r5
 800527c:	024b      	lsls	r3, r1, #9
 800527e:	4621      	mov	r1, r4
 8005280:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005284:	4621      	mov	r1, r4
 8005286:	024a      	lsls	r2, r1, #9
 8005288:	4610      	mov	r0, r2
 800528a:	4619      	mov	r1, r3
 800528c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800528e:	2200      	movs	r2, #0
 8005290:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005292:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005294:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005298:	f7fa ffb0 	bl	80001fc <__aeabi_uldivmod>
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	4613      	mov	r3, r2
 80052a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052a4:	e058      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052a6:	4b38      	ldr	r3, [pc, #224]	@ (8005388 <HAL_RCC_GetSysClockFreq+0x200>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	099b      	lsrs	r3, r3, #6
 80052ac:	2200      	movs	r2, #0
 80052ae:	4618      	mov	r0, r3
 80052b0:	4611      	mov	r1, r2
 80052b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052b6:	623b      	str	r3, [r7, #32]
 80052b8:	2300      	movs	r3, #0
 80052ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80052bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052c0:	4642      	mov	r2, r8
 80052c2:	464b      	mov	r3, r9
 80052c4:	f04f 0000 	mov.w	r0, #0
 80052c8:	f04f 0100 	mov.w	r1, #0
 80052cc:	0159      	lsls	r1, r3, #5
 80052ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052d2:	0150      	lsls	r0, r2, #5
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4641      	mov	r1, r8
 80052da:	ebb2 0a01 	subs.w	sl, r2, r1
 80052de:	4649      	mov	r1, r9
 80052e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052f8:	ebb2 040a 	subs.w	r4, r2, sl
 80052fc:	eb63 050b 	sbc.w	r5, r3, fp
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	00eb      	lsls	r3, r5, #3
 800530a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800530e:	00e2      	lsls	r2, r4, #3
 8005310:	4614      	mov	r4, r2
 8005312:	461d      	mov	r5, r3
 8005314:	4643      	mov	r3, r8
 8005316:	18e3      	adds	r3, r4, r3
 8005318:	603b      	str	r3, [r7, #0]
 800531a:	464b      	mov	r3, r9
 800531c:	eb45 0303 	adc.w	r3, r5, r3
 8005320:	607b      	str	r3, [r7, #4]
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800532e:	4629      	mov	r1, r5
 8005330:	028b      	lsls	r3, r1, #10
 8005332:	4621      	mov	r1, r4
 8005334:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005338:	4621      	mov	r1, r4
 800533a:	028a      	lsls	r2, r1, #10
 800533c:	4610      	mov	r0, r2
 800533e:	4619      	mov	r1, r3
 8005340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005342:	2200      	movs	r2, #0
 8005344:	61bb      	str	r3, [r7, #24]
 8005346:	61fa      	str	r2, [r7, #28]
 8005348:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800534c:	f7fa ff56 	bl	80001fc <__aeabi_uldivmod>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4613      	mov	r3, r2
 8005356:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005358:	4b0b      	ldr	r3, [pc, #44]	@ (8005388 <HAL_RCC_GetSysClockFreq+0x200>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	0c1b      	lsrs	r3, r3, #16
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	3301      	adds	r3, #1
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005368:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800536a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800536c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005370:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005372:	e002      	b.n	800537a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005374:	4b05      	ldr	r3, [pc, #20]	@ (800538c <HAL_RCC_GetSysClockFreq+0x204>)
 8005376:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800537a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800537c:	4618      	mov	r0, r3
 800537e:	3750      	adds	r7, #80	@ 0x50
 8005380:	46bd      	mov	sp, r7
 8005382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005386:	bf00      	nop
 8005388:	40023800 	.word	0x40023800
 800538c:	00f42400 	.word	0x00f42400
 8005390:	007a1200 	.word	0x007a1200

08005394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005398:	4b03      	ldr	r3, [pc, #12]	@ (80053a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800539a:	681b      	ldr	r3, [r3, #0]
}
 800539c:	4618      	mov	r0, r3
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	20000010 	.word	0x20000010

080053ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053b0:	f7ff fff0 	bl	8005394 <HAL_RCC_GetHCLKFreq>
 80053b4:	4602      	mov	r2, r0
 80053b6:	4b05      	ldr	r3, [pc, #20]	@ (80053cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	0a9b      	lsrs	r3, r3, #10
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	4903      	ldr	r1, [pc, #12]	@ (80053d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053c2:	5ccb      	ldrb	r3, [r1, r3]
 80053c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40023800 	.word	0x40023800
 80053d0:	08007fa4 	.word	0x08007fa4

080053d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10b      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d105      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005404:	2b00      	cmp	r3, #0
 8005406:	d075      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005408:	4b91      	ldr	r3, [pc, #580]	@ (8005650 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800540e:	f7fd fc2f 	bl	8002c70 <HAL_GetTick>
 8005412:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005414:	e008      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005416:	f7fd fc2b 	bl	8002c70 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d901      	bls.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e189      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005428:	4b8a      	ldr	r3, [pc, #552]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1f0      	bne.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d009      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	019a      	lsls	r2, r3, #6
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	071b      	lsls	r3, r3, #28
 800544c:	4981      	ldr	r1, [pc, #516]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01f      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005460:	4b7c      	ldr	r3, [pc, #496]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005462:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005466:	0f1b      	lsrs	r3, r3, #28
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	019a      	lsls	r2, r3, #6
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	061b      	lsls	r3, r3, #24
 800547a:	431a      	orrs	r2, r3
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	071b      	lsls	r3, r3, #28
 8005480:	4974      	ldr	r1, [pc, #464]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005482:	4313      	orrs	r3, r2
 8005484:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005488:	4b72      	ldr	r3, [pc, #456]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800548a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800548e:	f023 021f 	bic.w	r2, r3, #31
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	3b01      	subs	r3, #1
 8005498:	496e      	ldr	r1, [pc, #440]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800549a:	4313      	orrs	r3, r2
 800549c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00d      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	019a      	lsls	r2, r3, #6
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	061b      	lsls	r3, r3, #24
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	071b      	lsls	r3, r3, #28
 80054c0:	4964      	ldr	r1, [pc, #400]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054c8:	4b61      	ldr	r3, [pc, #388]	@ (8005650 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80054ca:	2201      	movs	r2, #1
 80054cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054ce:	f7fd fbcf 	bl	8002c70 <HAL_GetTick>
 80054d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054d4:	e008      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054d6:	f7fd fbcb 	bl	8002c70 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e129      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054e8:	4b5a      	ldr	r3, [pc, #360]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0f0      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d105      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005508:	2b00      	cmp	r3, #0
 800550a:	d079      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800550c:	4b52      	ldr	r3, [pc, #328]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800550e:	2200      	movs	r2, #0
 8005510:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005512:	f7fd fbad 	bl	8002c70 <HAL_GetTick>
 8005516:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005518:	e008      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800551a:	f7fd fba9 	bl	8002c70 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d901      	bls.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e107      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800552c:	4b49      	ldr	r3, [pc, #292]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005538:	d0ef      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0304 	and.w	r3, r3, #4
 8005542:	2b00      	cmp	r3, #0
 8005544:	d020      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005546:	4b43      	ldr	r3, [pc, #268]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554c:	0f1b      	lsrs	r3, r3, #28
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	019a      	lsls	r2, r3, #6
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	061b      	lsls	r3, r3, #24
 8005560:	431a      	orrs	r2, r3
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	071b      	lsls	r3, r3, #28
 8005566:	493b      	ldr	r1, [pc, #236]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005568:	4313      	orrs	r3, r2
 800556a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800556e:	4b39      	ldr	r3, [pc, #228]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005570:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005574:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	3b01      	subs	r3, #1
 800557e:	021b      	lsls	r3, r3, #8
 8005580:	4934      	ldr	r1, [pc, #208]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005582:	4313      	orrs	r3, r2
 8005584:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b00      	cmp	r3, #0
 8005592:	d01e      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005594:	4b2f      	ldr	r3, [pc, #188]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800559a:	0e1b      	lsrs	r3, r3, #24
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	019a      	lsls	r2, r3, #6
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	061b      	lsls	r3, r3, #24
 80055ac:	431a      	orrs	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	071b      	lsls	r3, r3, #28
 80055b4:	4927      	ldr	r1, [pc, #156]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055bc:	4b25      	ldr	r3, [pc, #148]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055c2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ca:	4922      	ldr	r1, [pc, #136]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055d2:	4b21      	ldr	r3, [pc, #132]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055d4:	2201      	movs	r2, #1
 80055d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055d8:	f7fd fb4a 	bl	8002c70 <HAL_GetTick>
 80055dc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055de:	e008      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055e0:	f7fd fb46 	bl	8002c70 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e0a4      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055f2:	4b18      	ldr	r3, [pc, #96]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055fe:	d1ef      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0320 	and.w	r3, r3, #32
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 808b 	beq.w	8005724 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]
 8005612:	4b10      	ldr	r3, [pc, #64]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005616:	4a0f      	ldr	r2, [pc, #60]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800561c:	6413      	str	r3, [r2, #64]	@ 0x40
 800561e:	4b0d      	ldr	r3, [pc, #52]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800562a:	4b0c      	ldr	r3, [pc, #48]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a0b      	ldr	r2, [pc, #44]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005634:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005636:	f7fd fb1b 	bl	8002c70 <HAL_GetTick>
 800563a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800563c:	e010      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800563e:	f7fd fb17 	bl	8002c70 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d909      	bls.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e075      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005650:	42470068 	.word	0x42470068
 8005654:	40023800 	.word	0x40023800
 8005658:	42470070 	.word	0x42470070
 800565c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005660:	4b38      	ldr	r3, [pc, #224]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0e8      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800566c:	4b36      	ldr	r3, [pc, #216]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800566e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005670:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005674:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d02f      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005680:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	429a      	cmp	r2, r3
 8005688:	d028      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800568a:	4b2f      	ldr	r3, [pc, #188]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800568c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800568e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005692:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005694:	4b2d      	ldr	r3, [pc, #180]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005696:	2201      	movs	r2, #1
 8005698:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800569a:	4b2c      	ldr	r3, [pc, #176]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80056a0:	4a29      	ldr	r2, [pc, #164]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056a6:	4b28      	ldr	r3, [pc, #160]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d114      	bne.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80056b2:	f7fd fadd 	bl	8002c70 <HAL_GetTick>
 80056b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056b8:	e00a      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ba:	f7fd fad9 	bl	8002c70 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e035      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0ee      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056e8:	d10d      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80056ea:	4b17      	ldr	r3, [pc, #92]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80056fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056fe:	4912      	ldr	r1, [pc, #72]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005700:	4313      	orrs	r3, r2
 8005702:	608b      	str	r3, [r1, #8]
 8005704:	e005      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005706:	4b10      	ldr	r3, [pc, #64]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	4a0f      	ldr	r2, [pc, #60]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800570c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005710:	6093      	str	r3, [r2, #8]
 8005712:	4b0d      	ldr	r3, [pc, #52]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005714:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800571a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800571e:	490a      	ldr	r1, [pc, #40]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005720:	4313      	orrs	r3, r2
 8005722:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0310 	and.w	r3, r3, #16
 800572c:	2b00      	cmp	r3, #0
 800572e:	d004      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005736:	4b06      	ldr	r3, [pc, #24]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005738:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40007000 	.word	0x40007000
 8005748:	40023800 	.word	0x40023800
 800574c:	42470e40 	.word	0x42470e40
 8005750:	424711e0 	.word	0x424711e0

08005754 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e01c      	b.n	80057a0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	795b      	ldrb	r3, [r3, #5]
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d105      	bne.n	800577c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7fc fdb6 	bl	80022e8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f042 0204 	orr.w	r2, r2, #4
 8005790:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	791b      	ldrb	r3, [r3, #4]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d101      	bne.n	80057c2 <HAL_RNG_GenerateRandomNumber+0x1a>
 80057be:	2302      	movs	r3, #2
 80057c0:	e044      	b.n	800584c <HAL_RNG_GenerateRandomNumber+0xa4>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	795b      	ldrb	r3, [r3, #5]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d133      	bne.n	800583a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2202      	movs	r2, #2
 80057d6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057d8:	f7fd fa4a 	bl	8002c70 <HAL_GetTick>
 80057dc:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80057de:	e018      	b.n	8005812 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80057e0:	f7fd fa46 	bl	8002c70 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d911      	bls.n	8005812 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d00a      	beq.n	8005812 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2202      	movs	r2, #2
 8005806:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e01c      	b.n	800584c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b01      	cmp	r3, #1
 800581e:	d1df      	bne.n	80057e0 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689a      	ldr	r2, [r3, #8]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	715a      	strb	r2, [r3, #5]
 8005838:	e004      	b.n	8005844 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2204      	movs	r2, #4
 800583e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	711a      	strb	r2, [r3, #4]

  return status;
 800584a:	7bfb      	ldrb	r3, [r7, #15]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e07b      	b.n	800595e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586a:	2b00      	cmp	r3, #0
 800586c:	d108      	bne.n	8005880 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005876:	d009      	beq.n	800588c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	61da      	str	r2, [r3, #28]
 800587e:	e005      	b.n	800588c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fc fd40 	bl	800232c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80058d4:	431a      	orrs	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058de:	431a      	orrs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	431a      	orrs	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	431a      	orrs	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058fc:	431a      	orrs	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005910:	ea42 0103 	orr.w	r1, r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005918:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	0c1b      	lsrs	r3, r3, #16
 800592a:	f003 0104 	and.w	r1, r3, #4
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005932:	f003 0210 	and.w	r2, r3, #16
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69da      	ldr	r2, [r3, #28]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800594c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b082      	sub	sp, #8
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e01a      	b.n	80059ae <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800598e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7fc fd13 	bl	80023bc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b088      	sub	sp, #32
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	60f8      	str	r0, [r7, #12]
 80059be:	60b9      	str	r1, [r7, #8]
 80059c0:	603b      	str	r3, [r7, #0]
 80059c2:	4613      	mov	r3, r2
 80059c4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059c6:	f7fd f953 	bl	8002c70 <HAL_GetTick>
 80059ca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80059cc:	88fb      	ldrh	r3, [r7, #6]
 80059ce:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d001      	beq.n	80059e0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80059dc:	2302      	movs	r3, #2
 80059de:	e12a      	b.n	8005c36 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <HAL_SPI_Transmit+0x36>
 80059e6:	88fb      	ldrh	r3, [r7, #6]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e122      	b.n	8005c36 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d101      	bne.n	80059fe <HAL_SPI_Transmit+0x48>
 80059fa:	2302      	movs	r3, #2
 80059fc:	e11b      	b.n	8005c36 <HAL_SPI_Transmit+0x280>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2203      	movs	r2, #3
 8005a0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	88fa      	ldrh	r2, [r7, #6]
 8005a1e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	88fa      	ldrh	r2, [r7, #6]
 8005a24:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a4c:	d10f      	bne.n	8005a6e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a78:	2b40      	cmp	r3, #64	@ 0x40
 8005a7a:	d007      	beq.n	8005a8c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a94:	d152      	bne.n	8005b3c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <HAL_SPI_Transmit+0xee>
 8005a9e:	8b7b      	ldrh	r3, [r7, #26]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d145      	bne.n	8005b30 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa8:	881a      	ldrh	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab4:	1c9a      	adds	r2, r3, #2
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ac8:	e032      	b.n	8005b30 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d112      	bne.n	8005afe <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005adc:	881a      	ldrh	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae8:	1c9a      	adds	r2, r3, #2
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	3b01      	subs	r3, #1
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005afc:	e018      	b.n	8005b30 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005afe:	f7fd f8b7 	bl	8002c70 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d803      	bhi.n	8005b16 <HAL_SPI_Transmit+0x160>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b14:	d102      	bne.n	8005b1c <HAL_SPI_Transmit+0x166>
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d109      	bne.n	8005b30 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e082      	b.n	8005c36 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1c7      	bne.n	8005aca <HAL_SPI_Transmit+0x114>
 8005b3a:	e053      	b.n	8005be4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <HAL_SPI_Transmit+0x194>
 8005b44:	8b7b      	ldrh	r3, [r7, #26]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d147      	bne.n	8005bda <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	330c      	adds	r3, #12
 8005b54:	7812      	ldrb	r2, [r2, #0]
 8005b56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b70:	e033      	b.n	8005bda <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d113      	bne.n	8005ba8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	330c      	adds	r3, #12
 8005b8a:	7812      	ldrb	r2, [r2, #0]
 8005b8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ba6:	e018      	b.n	8005bda <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ba8:	f7fd f862 	bl	8002c70 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d803      	bhi.n	8005bc0 <HAL_SPI_Transmit+0x20a>
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bbe:	d102      	bne.n	8005bc6 <HAL_SPI_Transmit+0x210>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d109      	bne.n	8005bda <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e02d      	b.n	8005c36 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1c6      	bne.n	8005b72 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005be4:	69fa      	ldr	r2, [r7, #28]
 8005be6:	6839      	ldr	r1, [r7, #0]
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 f8bf 	bl	8005d6c <SPI_EndRxTxTransaction>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10a      	bne.n	8005c18 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c02:	2300      	movs	r3, #0
 8005c04:	617b      	str	r3, [r7, #20]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	617b      	str	r3, [r7, #20]
 8005c16:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e000      	b.n	8005c36 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005c34:	2300      	movs	r3, #0
  }
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3720      	adds	r7, #32
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b083      	sub	sp, #12
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c4c:	b2db      	uxtb	r3, r3
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
	...

08005c5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	603b      	str	r3, [r7, #0]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c6c:	f7fd f800 	bl	8002c70 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c74:	1a9b      	subs	r3, r3, r2
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	4413      	add	r3, r2
 8005c7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c7c:	f7fc fff8 	bl	8002c70 <HAL_GetTick>
 8005c80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c82:	4b39      	ldr	r3, [pc, #228]	@ (8005d68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	015b      	lsls	r3, r3, #5
 8005c88:	0d1b      	lsrs	r3, r3, #20
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	fb02 f303 	mul.w	r3, r2, r3
 8005c90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c92:	e054      	b.n	8005d3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c9a:	d050      	beq.n	8005d3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c9c:	f7fc ffe8 	bl	8002c70 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	69fa      	ldr	r2, [r7, #28]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d902      	bls.n	8005cb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d13d      	bne.n	8005d2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005cc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cca:	d111      	bne.n	8005cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cd4:	d004      	beq.n	8005ce0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cde:	d107      	bne.n	8005cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cf8:	d10f      	bne.n	8005d1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e017      	b.n	8005d5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4013      	ands	r3, r2
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	bf0c      	ite	eq
 8005d4e:	2301      	moveq	r3, #1
 8005d50:	2300      	movne	r3, #0
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	79fb      	ldrb	r3, [r7, #7]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d19b      	bne.n	8005c94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3720      	adds	r7, #32
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20000010 	.word	0x20000010

08005d6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	2102      	movs	r1, #2
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f7ff ff6a 	bl	8005c5c <SPI_WaitFlagStateUntilTimeout>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d007      	beq.n	8005d9e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d92:	f043 0220 	orr.w	r2, r3, #32
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e032      	b.n	8005e04 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8005e0c <SPI_EndRxTxTransaction+0xa0>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a1b      	ldr	r2, [pc, #108]	@ (8005e10 <SPI_EndRxTxTransaction+0xa4>)
 8005da4:	fba2 2303 	umull	r2, r3, r2, r3
 8005da8:	0d5b      	lsrs	r3, r3, #21
 8005daa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005dae:	fb02 f303 	mul.w	r3, r2, r3
 8005db2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dbc:	d112      	bne.n	8005de4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	2180      	movs	r1, #128	@ 0x80
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f7ff ff47 	bl	8005c5c <SPI_WaitFlagStateUntilTimeout>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d016      	beq.n	8005e02 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd8:	f043 0220 	orr.w	r2, r3, #32
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e00f      	b.n	8005e04 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	3b01      	subs	r3, #1
 8005dee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dfa:	2b80      	cmp	r3, #128	@ 0x80
 8005dfc:	d0f2      	beq.n	8005de4 <SPI_EndRxTxTransaction+0x78>
 8005dfe:	e000      	b.n	8005e02 <SPI_EndRxTxTransaction+0x96>
        break;
 8005e00:	bf00      	nop
  }

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3718      	adds	r7, #24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	20000010 	.word	0x20000010
 8005e10:	165e9f81 	.word	0x165e9f81

08005e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e041      	b.n	8005eaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d106      	bne.n	8005e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7fc fadc 	bl	80023f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3304      	adds	r3, #4
 8005e50:	4619      	mov	r1, r3
 8005e52:	4610      	mov	r0, r2
 8005e54:	f000 f8f4 	bl	8006040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b084      	sub	sp, #16
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_TIM_ConfigClockSource+0x1c>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e0b4      	b.n	8006038 <HAL_TIM_ConfigClockSource+0x186>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005eec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ef4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f06:	d03e      	beq.n	8005f86 <HAL_TIM_ConfigClockSource+0xd4>
 8005f08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f0c:	f200 8087 	bhi.w	800601e <HAL_TIM_ConfigClockSource+0x16c>
 8005f10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f14:	f000 8086 	beq.w	8006024 <HAL_TIM_ConfigClockSource+0x172>
 8005f18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f1c:	d87f      	bhi.n	800601e <HAL_TIM_ConfigClockSource+0x16c>
 8005f1e:	2b70      	cmp	r3, #112	@ 0x70
 8005f20:	d01a      	beq.n	8005f58 <HAL_TIM_ConfigClockSource+0xa6>
 8005f22:	2b70      	cmp	r3, #112	@ 0x70
 8005f24:	d87b      	bhi.n	800601e <HAL_TIM_ConfigClockSource+0x16c>
 8005f26:	2b60      	cmp	r3, #96	@ 0x60
 8005f28:	d050      	beq.n	8005fcc <HAL_TIM_ConfigClockSource+0x11a>
 8005f2a:	2b60      	cmp	r3, #96	@ 0x60
 8005f2c:	d877      	bhi.n	800601e <HAL_TIM_ConfigClockSource+0x16c>
 8005f2e:	2b50      	cmp	r3, #80	@ 0x50
 8005f30:	d03c      	beq.n	8005fac <HAL_TIM_ConfigClockSource+0xfa>
 8005f32:	2b50      	cmp	r3, #80	@ 0x50
 8005f34:	d873      	bhi.n	800601e <HAL_TIM_ConfigClockSource+0x16c>
 8005f36:	2b40      	cmp	r3, #64	@ 0x40
 8005f38:	d058      	beq.n	8005fec <HAL_TIM_ConfigClockSource+0x13a>
 8005f3a:	2b40      	cmp	r3, #64	@ 0x40
 8005f3c:	d86f      	bhi.n	800601e <HAL_TIM_ConfigClockSource+0x16c>
 8005f3e:	2b30      	cmp	r3, #48	@ 0x30
 8005f40:	d064      	beq.n	800600c <HAL_TIM_ConfigClockSource+0x15a>
 8005f42:	2b30      	cmp	r3, #48	@ 0x30
 8005f44:	d86b      	bhi.n	800601e <HAL_TIM_ConfigClockSource+0x16c>
 8005f46:	2b20      	cmp	r3, #32
 8005f48:	d060      	beq.n	800600c <HAL_TIM_ConfigClockSource+0x15a>
 8005f4a:	2b20      	cmp	r3, #32
 8005f4c:	d867      	bhi.n	800601e <HAL_TIM_ConfigClockSource+0x16c>
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d05c      	beq.n	800600c <HAL_TIM_ConfigClockSource+0x15a>
 8005f52:	2b10      	cmp	r3, #16
 8005f54:	d05a      	beq.n	800600c <HAL_TIM_ConfigClockSource+0x15a>
 8005f56:	e062      	b.n	800601e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f68:	f000 f990 	bl	800628c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f7a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	609a      	str	r2, [r3, #8]
      break;
 8005f84:	e04f      	b.n	8006026 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f96:	f000 f979 	bl	800628c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fa8:	609a      	str	r2, [r3, #8]
      break;
 8005faa:	e03c      	b.n	8006026 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fb8:	461a      	mov	r2, r3
 8005fba:	f000 f8ed 	bl	8006198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2150      	movs	r1, #80	@ 0x50
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 f946 	bl	8006256 <TIM_ITRx_SetConfig>
      break;
 8005fca:	e02c      	b.n	8006026 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fd8:	461a      	mov	r2, r3
 8005fda:	f000 f90c 	bl	80061f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2160      	movs	r1, #96	@ 0x60
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 f936 	bl	8006256 <TIM_ITRx_SetConfig>
      break;
 8005fea:	e01c      	b.n	8006026 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	f000 f8cd 	bl	8006198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2140      	movs	r1, #64	@ 0x40
 8006004:	4618      	mov	r0, r3
 8006006:	f000 f926 	bl	8006256 <TIM_ITRx_SetConfig>
      break;
 800600a:	e00c      	b.n	8006026 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4619      	mov	r1, r3
 8006016:	4610      	mov	r0, r2
 8006018:	f000 f91d 	bl	8006256 <TIM_ITRx_SetConfig>
      break;
 800601c:	e003      	b.n	8006026 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	73fb      	strb	r3, [r7, #15]
      break;
 8006022:	e000      	b.n	8006026 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006024:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006036:	7bfb      	ldrb	r3, [r7, #15]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a46      	ldr	r2, [pc, #280]	@ (800616c <TIM_Base_SetConfig+0x12c>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d013      	beq.n	8006080 <TIM_Base_SetConfig+0x40>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800605e:	d00f      	beq.n	8006080 <TIM_Base_SetConfig+0x40>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a43      	ldr	r2, [pc, #268]	@ (8006170 <TIM_Base_SetConfig+0x130>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d00b      	beq.n	8006080 <TIM_Base_SetConfig+0x40>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a42      	ldr	r2, [pc, #264]	@ (8006174 <TIM_Base_SetConfig+0x134>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d007      	beq.n	8006080 <TIM_Base_SetConfig+0x40>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a41      	ldr	r2, [pc, #260]	@ (8006178 <TIM_Base_SetConfig+0x138>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d003      	beq.n	8006080 <TIM_Base_SetConfig+0x40>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a40      	ldr	r2, [pc, #256]	@ (800617c <TIM_Base_SetConfig+0x13c>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d108      	bne.n	8006092 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a35      	ldr	r2, [pc, #212]	@ (800616c <TIM_Base_SetConfig+0x12c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d02b      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060a0:	d027      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a32      	ldr	r2, [pc, #200]	@ (8006170 <TIM_Base_SetConfig+0x130>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d023      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a31      	ldr	r2, [pc, #196]	@ (8006174 <TIM_Base_SetConfig+0x134>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d01f      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a30      	ldr	r2, [pc, #192]	@ (8006178 <TIM_Base_SetConfig+0x138>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d01b      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a2f      	ldr	r2, [pc, #188]	@ (800617c <TIM_Base_SetConfig+0x13c>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d017      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a2e      	ldr	r2, [pc, #184]	@ (8006180 <TIM_Base_SetConfig+0x140>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d013      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a2d      	ldr	r2, [pc, #180]	@ (8006184 <TIM_Base_SetConfig+0x144>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d00f      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a2c      	ldr	r2, [pc, #176]	@ (8006188 <TIM_Base_SetConfig+0x148>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d00b      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a2b      	ldr	r2, [pc, #172]	@ (800618c <TIM_Base_SetConfig+0x14c>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d007      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a2a      	ldr	r2, [pc, #168]	@ (8006190 <TIM_Base_SetConfig+0x150>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d003      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a29      	ldr	r2, [pc, #164]	@ (8006194 <TIM_Base_SetConfig+0x154>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d108      	bne.n	8006104 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a10      	ldr	r2, [pc, #64]	@ (800616c <TIM_Base_SetConfig+0x12c>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d003      	beq.n	8006138 <TIM_Base_SetConfig+0xf8>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a12      	ldr	r2, [pc, #72]	@ (800617c <TIM_Base_SetConfig+0x13c>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d103      	bne.n	8006140 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b01      	cmp	r3, #1
 8006150:	d105      	bne.n	800615e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	f023 0201 	bic.w	r2, r3, #1
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	611a      	str	r2, [r3, #16]
  }
}
 800615e:	bf00      	nop
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	40010000 	.word	0x40010000
 8006170:	40000400 	.word	0x40000400
 8006174:	40000800 	.word	0x40000800
 8006178:	40000c00 	.word	0x40000c00
 800617c:	40010400 	.word	0x40010400
 8006180:	40014000 	.word	0x40014000
 8006184:	40014400 	.word	0x40014400
 8006188:	40014800 	.word	0x40014800
 800618c:	40001800 	.word	0x40001800
 8006190:	40001c00 	.word	0x40001c00
 8006194:	40002000 	.word	0x40002000

08006198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	f023 0201 	bic.w	r2, r3, #1
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f023 030a 	bic.w	r3, r3, #10
 80061d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	4313      	orrs	r3, r2
 80061dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	621a      	str	r2, [r3, #32]
}
 80061ea:	bf00      	nop
 80061ec:	371c      	adds	r7, #28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b087      	sub	sp, #28
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	60f8      	str	r0, [r7, #12]
 80061fe:	60b9      	str	r1, [r7, #8]
 8006200:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	f023 0210 	bic.w	r2, r3, #16
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006220:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	031b      	lsls	r3, r3, #12
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	4313      	orrs	r3, r2
 800622a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006232:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	4313      	orrs	r3, r2
 800623c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	621a      	str	r2, [r3, #32]
}
 800624a:	bf00      	nop
 800624c:	371c      	adds	r7, #28
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006256:	b480      	push	{r7}
 8006258:	b085      	sub	sp, #20
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800626c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4313      	orrs	r3, r2
 8006274:	f043 0307 	orr.w	r3, r3, #7
 8006278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	609a      	str	r2, [r3, #8]
}
 8006280:	bf00      	nop
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
 8006298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	021a      	lsls	r2, r3, #8
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	431a      	orrs	r2, r3
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	609a      	str	r2, [r3, #8]
}
 80062c0:	bf00      	nop
 80062c2:	371c      	adds	r7, #28
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e05a      	b.n	800639a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800630a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a21      	ldr	r2, [pc, #132]	@ (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d022      	beq.n	800636e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006330:	d01d      	beq.n	800636e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a1d      	ldr	r2, [pc, #116]	@ (80063ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d018      	beq.n	800636e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a1b      	ldr	r2, [pc, #108]	@ (80063b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d013      	beq.n	800636e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a1a      	ldr	r2, [pc, #104]	@ (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d00e      	beq.n	800636e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a18      	ldr	r2, [pc, #96]	@ (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d009      	beq.n	800636e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a17      	ldr	r2, [pc, #92]	@ (80063bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d004      	beq.n	800636e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a15      	ldr	r2, [pc, #84]	@ (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d10c      	bne.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006374:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	4313      	orrs	r3, r2
 800637e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40010000 	.word	0x40010000
 80063ac:	40000400 	.word	0x40000400
 80063b0:	40000800 	.word	0x40000800
 80063b4:	40000c00 	.word	0x40000c00
 80063b8:	40010400 	.word	0x40010400
 80063bc:	40014000 	.word	0x40014000
 80063c0:	40001800 	.word	0x40001800

080063c4 <findslot>:
 80063c4:	4b0a      	ldr	r3, [pc, #40]	@ (80063f0 <findslot+0x2c>)
 80063c6:	b510      	push	{r4, lr}
 80063c8:	4604      	mov	r4, r0
 80063ca:	6818      	ldr	r0, [r3, #0]
 80063cc:	b118      	cbz	r0, 80063d6 <findslot+0x12>
 80063ce:	6a03      	ldr	r3, [r0, #32]
 80063d0:	b90b      	cbnz	r3, 80063d6 <findslot+0x12>
 80063d2:	f000 faf3 	bl	80069bc <__sinit>
 80063d6:	2c13      	cmp	r4, #19
 80063d8:	d807      	bhi.n	80063ea <findslot+0x26>
 80063da:	4806      	ldr	r0, [pc, #24]	@ (80063f4 <findslot+0x30>)
 80063dc:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80063e0:	3201      	adds	r2, #1
 80063e2:	d002      	beq.n	80063ea <findslot+0x26>
 80063e4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80063e8:	bd10      	pop	{r4, pc}
 80063ea:	2000      	movs	r0, #0
 80063ec:	e7fc      	b.n	80063e8 <findslot+0x24>
 80063ee:	bf00      	nop
 80063f0:	20000030 	.word	0x20000030
 80063f4:	20025c24 	.word	0x20025c24

080063f8 <error>:
 80063f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fa:	4604      	mov	r4, r0
 80063fc:	f000 fb1c 	bl	8006a38 <__errno>
 8006400:	2613      	movs	r6, #19
 8006402:	4605      	mov	r5, r0
 8006404:	2700      	movs	r7, #0
 8006406:	4630      	mov	r0, r6
 8006408:	4639      	mov	r1, r7
 800640a:	beab      	bkpt	0x00ab
 800640c:	4606      	mov	r6, r0
 800640e:	602e      	str	r6, [r5, #0]
 8006410:	4620      	mov	r0, r4
 8006412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006414 <checkerror>:
 8006414:	1c43      	adds	r3, r0, #1
 8006416:	d101      	bne.n	800641c <checkerror+0x8>
 8006418:	f7ff bfee 	b.w	80063f8 <error>
 800641c:	4770      	bx	lr

0800641e <_swiread>:
 800641e:	b530      	push	{r4, r5, lr}
 8006420:	b085      	sub	sp, #20
 8006422:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006426:	9203      	str	r2, [sp, #12]
 8006428:	2406      	movs	r4, #6
 800642a:	ad01      	add	r5, sp, #4
 800642c:	4620      	mov	r0, r4
 800642e:	4629      	mov	r1, r5
 8006430:	beab      	bkpt	0x00ab
 8006432:	4604      	mov	r4, r0
 8006434:	4620      	mov	r0, r4
 8006436:	f7ff ffed 	bl	8006414 <checkerror>
 800643a:	b005      	add	sp, #20
 800643c:	bd30      	pop	{r4, r5, pc}

0800643e <_read>:
 800643e:	b570      	push	{r4, r5, r6, lr}
 8006440:	460e      	mov	r6, r1
 8006442:	4614      	mov	r4, r2
 8006444:	f7ff ffbe 	bl	80063c4 <findslot>
 8006448:	4605      	mov	r5, r0
 800644a:	b930      	cbnz	r0, 800645a <_read+0x1c>
 800644c:	f000 faf4 	bl	8006a38 <__errno>
 8006450:	2309      	movs	r3, #9
 8006452:	6003      	str	r3, [r0, #0]
 8006454:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006458:	bd70      	pop	{r4, r5, r6, pc}
 800645a:	6800      	ldr	r0, [r0, #0]
 800645c:	4622      	mov	r2, r4
 800645e:	4631      	mov	r1, r6
 8006460:	f7ff ffdd 	bl	800641e <_swiread>
 8006464:	1c43      	adds	r3, r0, #1
 8006466:	d0f5      	beq.n	8006454 <_read+0x16>
 8006468:	686b      	ldr	r3, [r5, #4]
 800646a:	1a20      	subs	r0, r4, r0
 800646c:	4403      	add	r3, r0
 800646e:	606b      	str	r3, [r5, #4]
 8006470:	e7f2      	b.n	8006458 <_read+0x1a>

08006472 <_swilseek>:
 8006472:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006474:	460c      	mov	r4, r1
 8006476:	4616      	mov	r6, r2
 8006478:	f7ff ffa4 	bl	80063c4 <findslot>
 800647c:	4605      	mov	r5, r0
 800647e:	b940      	cbnz	r0, 8006492 <_swilseek+0x20>
 8006480:	f000 fada 	bl	8006a38 <__errno>
 8006484:	2309      	movs	r3, #9
 8006486:	6003      	str	r3, [r0, #0]
 8006488:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800648c:	4620      	mov	r0, r4
 800648e:	b003      	add	sp, #12
 8006490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006492:	2e02      	cmp	r6, #2
 8006494:	d903      	bls.n	800649e <_swilseek+0x2c>
 8006496:	f000 facf 	bl	8006a38 <__errno>
 800649a:	2316      	movs	r3, #22
 800649c:	e7f3      	b.n	8006486 <_swilseek+0x14>
 800649e:	2e01      	cmp	r6, #1
 80064a0:	d112      	bne.n	80064c8 <_swilseek+0x56>
 80064a2:	6843      	ldr	r3, [r0, #4]
 80064a4:	18e4      	adds	r4, r4, r3
 80064a6:	d4f6      	bmi.n	8006496 <_swilseek+0x24>
 80064a8:	682b      	ldr	r3, [r5, #0]
 80064aa:	260a      	movs	r6, #10
 80064ac:	e9cd 3400 	strd	r3, r4, [sp]
 80064b0:	466f      	mov	r7, sp
 80064b2:	4630      	mov	r0, r6
 80064b4:	4639      	mov	r1, r7
 80064b6:	beab      	bkpt	0x00ab
 80064b8:	4606      	mov	r6, r0
 80064ba:	4630      	mov	r0, r6
 80064bc:	f7ff ffaa 	bl	8006414 <checkerror>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	dbe1      	blt.n	8006488 <_swilseek+0x16>
 80064c4:	606c      	str	r4, [r5, #4]
 80064c6:	e7e1      	b.n	800648c <_swilseek+0x1a>
 80064c8:	2e02      	cmp	r6, #2
 80064ca:	6803      	ldr	r3, [r0, #0]
 80064cc:	d1ec      	bne.n	80064a8 <_swilseek+0x36>
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	260c      	movs	r6, #12
 80064d2:	466f      	mov	r7, sp
 80064d4:	4630      	mov	r0, r6
 80064d6:	4639      	mov	r1, r7
 80064d8:	beab      	bkpt	0x00ab
 80064da:	4606      	mov	r6, r0
 80064dc:	4630      	mov	r0, r6
 80064de:	f7ff ff99 	bl	8006414 <checkerror>
 80064e2:	1c43      	adds	r3, r0, #1
 80064e4:	d0d0      	beq.n	8006488 <_swilseek+0x16>
 80064e6:	4404      	add	r4, r0
 80064e8:	e7de      	b.n	80064a8 <_swilseek+0x36>

080064ea <_lseek>:
 80064ea:	f7ff bfc2 	b.w	8006472 <_swilseek>

080064ee <_swiwrite>:
 80064ee:	b530      	push	{r4, r5, lr}
 80064f0:	b085      	sub	sp, #20
 80064f2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80064f6:	9203      	str	r2, [sp, #12]
 80064f8:	2405      	movs	r4, #5
 80064fa:	ad01      	add	r5, sp, #4
 80064fc:	4620      	mov	r0, r4
 80064fe:	4629      	mov	r1, r5
 8006500:	beab      	bkpt	0x00ab
 8006502:	4604      	mov	r4, r0
 8006504:	4620      	mov	r0, r4
 8006506:	f7ff ff85 	bl	8006414 <checkerror>
 800650a:	b005      	add	sp, #20
 800650c:	bd30      	pop	{r4, r5, pc}

0800650e <_write>:
 800650e:	b570      	push	{r4, r5, r6, lr}
 8006510:	460e      	mov	r6, r1
 8006512:	4615      	mov	r5, r2
 8006514:	f7ff ff56 	bl	80063c4 <findslot>
 8006518:	4604      	mov	r4, r0
 800651a:	b930      	cbnz	r0, 800652a <_write+0x1c>
 800651c:	f000 fa8c 	bl	8006a38 <__errno>
 8006520:	2309      	movs	r3, #9
 8006522:	6003      	str	r3, [r0, #0]
 8006524:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006528:	bd70      	pop	{r4, r5, r6, pc}
 800652a:	6800      	ldr	r0, [r0, #0]
 800652c:	462a      	mov	r2, r5
 800652e:	4631      	mov	r1, r6
 8006530:	f7ff ffdd 	bl	80064ee <_swiwrite>
 8006534:	1e03      	subs	r3, r0, #0
 8006536:	dbf5      	blt.n	8006524 <_write+0x16>
 8006538:	6862      	ldr	r2, [r4, #4]
 800653a:	1ae8      	subs	r0, r5, r3
 800653c:	4402      	add	r2, r0
 800653e:	42ab      	cmp	r3, r5
 8006540:	6062      	str	r2, [r4, #4]
 8006542:	d1f1      	bne.n	8006528 <_write+0x1a>
 8006544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006548:	2000      	movs	r0, #0
 800654a:	f7ff bf55 	b.w	80063f8 <error>

0800654e <_swiclose>:
 800654e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006550:	2402      	movs	r4, #2
 8006552:	9001      	str	r0, [sp, #4]
 8006554:	ad01      	add	r5, sp, #4
 8006556:	4620      	mov	r0, r4
 8006558:	4629      	mov	r1, r5
 800655a:	beab      	bkpt	0x00ab
 800655c:	4604      	mov	r4, r0
 800655e:	4620      	mov	r0, r4
 8006560:	f7ff ff58 	bl	8006414 <checkerror>
 8006564:	b003      	add	sp, #12
 8006566:	bd30      	pop	{r4, r5, pc}

08006568 <_close>:
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	4605      	mov	r5, r0
 800656c:	f7ff ff2a 	bl	80063c4 <findslot>
 8006570:	4604      	mov	r4, r0
 8006572:	b930      	cbnz	r0, 8006582 <_close+0x1a>
 8006574:	f000 fa60 	bl	8006a38 <__errno>
 8006578:	2309      	movs	r3, #9
 800657a:	6003      	str	r3, [r0, #0]
 800657c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006580:	bd38      	pop	{r3, r4, r5, pc}
 8006582:	3d01      	subs	r5, #1
 8006584:	2d01      	cmp	r5, #1
 8006586:	d809      	bhi.n	800659c <_close+0x34>
 8006588:	4b09      	ldr	r3, [pc, #36]	@ (80065b0 <_close+0x48>)
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	429a      	cmp	r2, r3
 8006590:	d104      	bne.n	800659c <_close+0x34>
 8006592:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006596:	6003      	str	r3, [r0, #0]
 8006598:	2000      	movs	r0, #0
 800659a:	e7f1      	b.n	8006580 <_close+0x18>
 800659c:	6820      	ldr	r0, [r4, #0]
 800659e:	f7ff ffd6 	bl	800654e <_swiclose>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d1ec      	bne.n	8006580 <_close+0x18>
 80065a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80065aa:	6023      	str	r3, [r4, #0]
 80065ac:	e7e8      	b.n	8006580 <_close+0x18>
 80065ae:	bf00      	nop
 80065b0:	20025c24 	.word	0x20025c24

080065b4 <_swistat>:
 80065b4:	b570      	push	{r4, r5, r6, lr}
 80065b6:	460c      	mov	r4, r1
 80065b8:	f7ff ff04 	bl	80063c4 <findslot>
 80065bc:	4605      	mov	r5, r0
 80065be:	b930      	cbnz	r0, 80065ce <_swistat+0x1a>
 80065c0:	f000 fa3a 	bl	8006a38 <__errno>
 80065c4:	2309      	movs	r3, #9
 80065c6:	6003      	str	r3, [r0, #0]
 80065c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065cc:	bd70      	pop	{r4, r5, r6, pc}
 80065ce:	6863      	ldr	r3, [r4, #4]
 80065d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80065d4:	6063      	str	r3, [r4, #4]
 80065d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065da:	64a3      	str	r3, [r4, #72]	@ 0x48
 80065dc:	260c      	movs	r6, #12
 80065de:	4630      	mov	r0, r6
 80065e0:	4629      	mov	r1, r5
 80065e2:	beab      	bkpt	0x00ab
 80065e4:	4605      	mov	r5, r0
 80065e6:	4628      	mov	r0, r5
 80065e8:	f7ff ff14 	bl	8006414 <checkerror>
 80065ec:	1c43      	adds	r3, r0, #1
 80065ee:	d0eb      	beq.n	80065c8 <_swistat+0x14>
 80065f0:	6120      	str	r0, [r4, #16]
 80065f2:	2000      	movs	r0, #0
 80065f4:	e7ea      	b.n	80065cc <_swistat+0x18>

080065f6 <_stat>:
 80065f6:	b538      	push	{r3, r4, r5, lr}
 80065f8:	460d      	mov	r5, r1
 80065fa:	4604      	mov	r4, r0
 80065fc:	2258      	movs	r2, #88	@ 0x58
 80065fe:	2100      	movs	r1, #0
 8006600:	4628      	mov	r0, r5
 8006602:	f000 fa11 	bl	8006a28 <memset>
 8006606:	4620      	mov	r0, r4
 8006608:	2100      	movs	r1, #0
 800660a:	f000 f811 	bl	8006630 <_swiopen>
 800660e:	1c43      	adds	r3, r0, #1
 8006610:	4604      	mov	r4, r0
 8006612:	d00b      	beq.n	800662c <_stat+0x36>
 8006614:	686b      	ldr	r3, [r5, #4]
 8006616:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800661a:	606b      	str	r3, [r5, #4]
 800661c:	4629      	mov	r1, r5
 800661e:	f7ff ffc9 	bl	80065b4 <_swistat>
 8006622:	4605      	mov	r5, r0
 8006624:	4620      	mov	r0, r4
 8006626:	f7ff ff9f 	bl	8006568 <_close>
 800662a:	462c      	mov	r4, r5
 800662c:	4620      	mov	r0, r4
 800662e:	bd38      	pop	{r3, r4, r5, pc}

08006630 <_swiopen>:
 8006630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006634:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 80066e0 <_swiopen+0xb0>
 8006638:	b096      	sub	sp, #88	@ 0x58
 800663a:	4607      	mov	r7, r0
 800663c:	460e      	mov	r6, r1
 800663e:	2400      	movs	r4, #0
 8006640:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8006644:	3301      	adds	r3, #1
 8006646:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800664a:	d032      	beq.n	80066b2 <_swiopen+0x82>
 800664c:	3401      	adds	r4, #1
 800664e:	2c14      	cmp	r4, #20
 8006650:	d1f6      	bne.n	8006640 <_swiopen+0x10>
 8006652:	f000 f9f1 	bl	8006a38 <__errno>
 8006656:	2318      	movs	r3, #24
 8006658:	e03a      	b.n	80066d0 <_swiopen+0xa0>
 800665a:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800665e:	f240 6301 	movw	r3, #1537	@ 0x601
 8006662:	07b2      	lsls	r2, r6, #30
 8006664:	bf48      	it	mi
 8006666:	f045 0502 	orrmi.w	r5, r5, #2
 800666a:	421e      	tst	r6, r3
 800666c:	bf18      	it	ne
 800666e:	f045 0504 	orrne.w	r5, r5, #4
 8006672:	0733      	lsls	r3, r6, #28
 8006674:	bf48      	it	mi
 8006676:	f025 0504 	bicmi.w	r5, r5, #4
 800667a:	4638      	mov	r0, r7
 800667c:	bf48      	it	mi
 800667e:	f045 0508 	orrmi.w	r5, r5, #8
 8006682:	9700      	str	r7, [sp, #0]
 8006684:	f7f9 fdb2 	bl	80001ec <strlen>
 8006688:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800668c:	2501      	movs	r5, #1
 800668e:	4628      	mov	r0, r5
 8006690:	4651      	mov	r1, sl
 8006692:	beab      	bkpt	0x00ab
 8006694:	4605      	mov	r5, r0
 8006696:	2d00      	cmp	r5, #0
 8006698:	db06      	blt.n	80066a8 <_swiopen+0x78>
 800669a:	44c8      	add	r8, r9
 800669c:	2300      	movs	r3, #0
 800669e:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 80066a2:	f8c8 3004 	str.w	r3, [r8, #4]
 80066a6:	e016      	b.n	80066d6 <_swiopen+0xa6>
 80066a8:	4628      	mov	r0, r5
 80066aa:	f7ff fea5 	bl	80063f8 <error>
 80066ae:	4604      	mov	r4, r0
 80066b0:	e011      	b.n	80066d6 <_swiopen+0xa6>
 80066b2:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80066b6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80066ba:	46ea      	mov	sl, sp
 80066bc:	d1cd      	bne.n	800665a <_swiopen+0x2a>
 80066be:	4651      	mov	r1, sl
 80066c0:	4638      	mov	r0, r7
 80066c2:	f7ff ff98 	bl	80065f6 <_stat>
 80066c6:	3001      	adds	r0, #1
 80066c8:	d0c7      	beq.n	800665a <_swiopen+0x2a>
 80066ca:	f000 f9b5 	bl	8006a38 <__errno>
 80066ce:	2311      	movs	r3, #17
 80066d0:	6003      	str	r3, [r0, #0]
 80066d2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80066d6:	4620      	mov	r0, r4
 80066d8:	b016      	add	sp, #88	@ 0x58
 80066da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066de:	bf00      	nop
 80066e0:	20025c24 	.word	0x20025c24

080066e4 <_get_semihosting_exts>:
 80066e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80066e8:	4606      	mov	r6, r0
 80066ea:	460f      	mov	r7, r1
 80066ec:	4829      	ldr	r0, [pc, #164]	@ (8006794 <_get_semihosting_exts+0xb0>)
 80066ee:	2100      	movs	r1, #0
 80066f0:	4615      	mov	r5, r2
 80066f2:	f7ff ff9d 	bl	8006630 <_swiopen>
 80066f6:	462a      	mov	r2, r5
 80066f8:	4604      	mov	r4, r0
 80066fa:	2100      	movs	r1, #0
 80066fc:	4630      	mov	r0, r6
 80066fe:	f000 f993 	bl	8006a28 <memset>
 8006702:	1c63      	adds	r3, r4, #1
 8006704:	d014      	beq.n	8006730 <_get_semihosting_exts+0x4c>
 8006706:	4620      	mov	r0, r4
 8006708:	f7ff fe5c 	bl	80063c4 <findslot>
 800670c:	f04f 080c 	mov.w	r8, #12
 8006710:	4681      	mov	r9, r0
 8006712:	4640      	mov	r0, r8
 8006714:	4649      	mov	r1, r9
 8006716:	beab      	bkpt	0x00ab
 8006718:	4680      	mov	r8, r0
 800671a:	4640      	mov	r0, r8
 800671c:	f7ff fe7a 	bl	8006414 <checkerror>
 8006720:	2803      	cmp	r0, #3
 8006722:	dd02      	ble.n	800672a <_get_semihosting_exts+0x46>
 8006724:	1ec3      	subs	r3, r0, #3
 8006726:	42ab      	cmp	r3, r5
 8006728:	dc07      	bgt.n	800673a <_get_semihosting_exts+0x56>
 800672a:	4620      	mov	r0, r4
 800672c:	f7ff ff1c 	bl	8006568 <_close>
 8006730:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006734:	b003      	add	sp, #12
 8006736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800673a:	2204      	movs	r2, #4
 800673c:	eb0d 0102 	add.w	r1, sp, r2
 8006740:	4620      	mov	r0, r4
 8006742:	f7ff fe7c 	bl	800643e <_read>
 8006746:	2803      	cmp	r0, #3
 8006748:	ddef      	ble.n	800672a <_get_semihosting_exts+0x46>
 800674a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800674e:	2b53      	cmp	r3, #83	@ 0x53
 8006750:	d1eb      	bne.n	800672a <_get_semihosting_exts+0x46>
 8006752:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006756:	2b48      	cmp	r3, #72	@ 0x48
 8006758:	d1e7      	bne.n	800672a <_get_semihosting_exts+0x46>
 800675a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800675e:	2b46      	cmp	r3, #70	@ 0x46
 8006760:	d1e3      	bne.n	800672a <_get_semihosting_exts+0x46>
 8006762:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006766:	2b42      	cmp	r3, #66	@ 0x42
 8006768:	d1df      	bne.n	800672a <_get_semihosting_exts+0x46>
 800676a:	2201      	movs	r2, #1
 800676c:	4639      	mov	r1, r7
 800676e:	4620      	mov	r0, r4
 8006770:	f7ff fe7f 	bl	8006472 <_swilseek>
 8006774:	2800      	cmp	r0, #0
 8006776:	dbd8      	blt.n	800672a <_get_semihosting_exts+0x46>
 8006778:	462a      	mov	r2, r5
 800677a:	4631      	mov	r1, r6
 800677c:	4620      	mov	r0, r4
 800677e:	f7ff fe5e 	bl	800643e <_read>
 8006782:	4605      	mov	r5, r0
 8006784:	4620      	mov	r0, r4
 8006786:	f7ff feef 	bl	8006568 <_close>
 800678a:	4628      	mov	r0, r5
 800678c:	f7ff fe42 	bl	8006414 <checkerror>
 8006790:	e7d0      	b.n	8006734 <_get_semihosting_exts+0x50>
 8006792:	bf00      	nop
 8006794:	08007fac 	.word	0x08007fac

08006798 <initialise_semihosting_exts>:
 8006798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800679a:	4d0a      	ldr	r5, [pc, #40]	@ (80067c4 <initialise_semihosting_exts+0x2c>)
 800679c:	4c0a      	ldr	r4, [pc, #40]	@ (80067c8 <initialise_semihosting_exts+0x30>)
 800679e:	2100      	movs	r1, #0
 80067a0:	2201      	movs	r2, #1
 80067a2:	a801      	add	r0, sp, #4
 80067a4:	6029      	str	r1, [r5, #0]
 80067a6:	6022      	str	r2, [r4, #0]
 80067a8:	f7ff ff9c 	bl	80066e4 <_get_semihosting_exts>
 80067ac:	2800      	cmp	r0, #0
 80067ae:	dd07      	ble.n	80067c0 <initialise_semihosting_exts+0x28>
 80067b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80067b4:	f003 0201 	and.w	r2, r3, #1
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	602a      	str	r2, [r5, #0]
 80067be:	6023      	str	r3, [r4, #0]
 80067c0:	b003      	add	sp, #12
 80067c2:	bd30      	pop	{r4, r5, pc}
 80067c4:	20000020 	.word	0x20000020
 80067c8:	2000001c 	.word	0x2000001c

080067cc <_has_ext_stdout_stderr>:
 80067cc:	b510      	push	{r4, lr}
 80067ce:	4c04      	ldr	r4, [pc, #16]	@ (80067e0 <_has_ext_stdout_stderr+0x14>)
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	da01      	bge.n	80067da <_has_ext_stdout_stderr+0xe>
 80067d6:	f7ff ffdf 	bl	8006798 <initialise_semihosting_exts>
 80067da:	6820      	ldr	r0, [r4, #0]
 80067dc:	bd10      	pop	{r4, pc}
 80067de:	bf00      	nop
 80067e0:	2000001c 	.word	0x2000001c

080067e4 <initialise_monitor_handles>:
 80067e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e8:	b085      	sub	sp, #20
 80067ea:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800689c <initialise_monitor_handles+0xb8>
 80067ee:	f8cd 9004 	str.w	r9, [sp, #4]
 80067f2:	2303      	movs	r3, #3
 80067f4:	2400      	movs	r4, #0
 80067f6:	9303      	str	r3, [sp, #12]
 80067f8:	af01      	add	r7, sp, #4
 80067fa:	9402      	str	r4, [sp, #8]
 80067fc:	2501      	movs	r5, #1
 80067fe:	4628      	mov	r0, r5
 8006800:	4639      	mov	r1, r7
 8006802:	beab      	bkpt	0x00ab
 8006804:	4605      	mov	r5, r0
 8006806:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80068a0 <initialise_monitor_handles+0xbc>
 800680a:	4623      	mov	r3, r4
 800680c:	4c20      	ldr	r4, [pc, #128]	@ (8006890 <initialise_monitor_handles+0xac>)
 800680e:	f8c8 5000 	str.w	r5, [r8]
 8006812:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006816:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800681a:	3301      	adds	r3, #1
 800681c:	2b14      	cmp	r3, #20
 800681e:	d1fa      	bne.n	8006816 <initialise_monitor_handles+0x32>
 8006820:	f7ff ffd4 	bl	80067cc <_has_ext_stdout_stderr>
 8006824:	4d1b      	ldr	r5, [pc, #108]	@ (8006894 <initialise_monitor_handles+0xb0>)
 8006826:	b1d0      	cbz	r0, 800685e <initialise_monitor_handles+0x7a>
 8006828:	f04f 0a03 	mov.w	sl, #3
 800682c:	2304      	movs	r3, #4
 800682e:	f8cd 9004 	str.w	r9, [sp, #4]
 8006832:	2601      	movs	r6, #1
 8006834:	f8cd a00c 	str.w	sl, [sp, #12]
 8006838:	9302      	str	r3, [sp, #8]
 800683a:	4630      	mov	r0, r6
 800683c:	4639      	mov	r1, r7
 800683e:	beab      	bkpt	0x00ab
 8006840:	4683      	mov	fp, r0
 8006842:	4b15      	ldr	r3, [pc, #84]	@ (8006898 <initialise_monitor_handles+0xb4>)
 8006844:	f8cd 9004 	str.w	r9, [sp, #4]
 8006848:	f8c3 b000 	str.w	fp, [r3]
 800684c:	2308      	movs	r3, #8
 800684e:	f8cd a00c 	str.w	sl, [sp, #12]
 8006852:	9302      	str	r3, [sp, #8]
 8006854:	4630      	mov	r0, r6
 8006856:	4639      	mov	r1, r7
 8006858:	beab      	bkpt	0x00ab
 800685a:	4606      	mov	r6, r0
 800685c:	602e      	str	r6, [r5, #0]
 800685e:	682b      	ldr	r3, [r5, #0]
 8006860:	3301      	adds	r3, #1
 8006862:	bf02      	ittt	eq
 8006864:	4b0c      	ldreq	r3, [pc, #48]	@ (8006898 <initialise_monitor_handles+0xb4>)
 8006866:	681b      	ldreq	r3, [r3, #0]
 8006868:	602b      	streq	r3, [r5, #0]
 800686a:	2600      	movs	r6, #0
 800686c:	f8d8 3000 	ldr.w	r3, [r8]
 8006870:	6023      	str	r3, [r4, #0]
 8006872:	6066      	str	r6, [r4, #4]
 8006874:	f7ff ffaa 	bl	80067cc <_has_ext_stdout_stderr>
 8006878:	b130      	cbz	r0, 8006888 <initialise_monitor_handles+0xa4>
 800687a:	4b07      	ldr	r3, [pc, #28]	@ (8006898 <initialise_monitor_handles+0xb4>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8006882:	682b      	ldr	r3, [r5, #0]
 8006884:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8006888:	b005      	add	sp, #20
 800688a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688e:	bf00      	nop
 8006890:	20025c24 	.word	0x20025c24
 8006894:	20025c18 	.word	0x20025c18
 8006898:	20025c1c 	.word	0x20025c1c
 800689c:	08007fc2 	.word	0x08007fc2
 80068a0:	20025c20 	.word	0x20025c20

080068a4 <std>:
 80068a4:	2300      	movs	r3, #0
 80068a6:	b510      	push	{r4, lr}
 80068a8:	4604      	mov	r4, r0
 80068aa:	e9c0 3300 	strd	r3, r3, [r0]
 80068ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068b2:	6083      	str	r3, [r0, #8]
 80068b4:	8181      	strh	r1, [r0, #12]
 80068b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80068b8:	81c2      	strh	r2, [r0, #14]
 80068ba:	6183      	str	r3, [r0, #24]
 80068bc:	4619      	mov	r1, r3
 80068be:	2208      	movs	r2, #8
 80068c0:	305c      	adds	r0, #92	@ 0x5c
 80068c2:	f000 f8b1 	bl	8006a28 <memset>
 80068c6:	4b0d      	ldr	r3, [pc, #52]	@ (80068fc <std+0x58>)
 80068c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80068ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006900 <std+0x5c>)
 80068cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80068ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006904 <std+0x60>)
 80068d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80068d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006908 <std+0x64>)
 80068d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80068d6:	4b0d      	ldr	r3, [pc, #52]	@ (800690c <std+0x68>)
 80068d8:	6224      	str	r4, [r4, #32]
 80068da:	429c      	cmp	r4, r3
 80068dc:	d006      	beq.n	80068ec <std+0x48>
 80068de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80068e2:	4294      	cmp	r4, r2
 80068e4:	d002      	beq.n	80068ec <std+0x48>
 80068e6:	33d0      	adds	r3, #208	@ 0xd0
 80068e8:	429c      	cmp	r4, r3
 80068ea:	d105      	bne.n	80068f8 <std+0x54>
 80068ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80068f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068f4:	f000 b8ca 	b.w	8006a8c <__retarget_lock_init_recursive>
 80068f8:	bd10      	pop	{r4, pc}
 80068fa:	bf00      	nop
 80068fc:	08006c05 	.word	0x08006c05
 8006900:	08006c27 	.word	0x08006c27
 8006904:	08006c5f 	.word	0x08006c5f
 8006908:	08006c83 	.word	0x08006c83
 800690c:	20025cc4 	.word	0x20025cc4

08006910 <stdio_exit_handler>:
 8006910:	4a02      	ldr	r2, [pc, #8]	@ (800691c <stdio_exit_handler+0xc>)
 8006912:	4903      	ldr	r1, [pc, #12]	@ (8006920 <stdio_exit_handler+0x10>)
 8006914:	4803      	ldr	r0, [pc, #12]	@ (8006924 <stdio_exit_handler+0x14>)
 8006916:	f000 b869 	b.w	80069ec <_fwalk_sglue>
 800691a:	bf00      	nop
 800691c:	20000024 	.word	0x20000024
 8006920:	08006b9d 	.word	0x08006b9d
 8006924:	20000034 	.word	0x20000034

08006928 <cleanup_stdio>:
 8006928:	6841      	ldr	r1, [r0, #4]
 800692a:	4b0c      	ldr	r3, [pc, #48]	@ (800695c <cleanup_stdio+0x34>)
 800692c:	4299      	cmp	r1, r3
 800692e:	b510      	push	{r4, lr}
 8006930:	4604      	mov	r4, r0
 8006932:	d001      	beq.n	8006938 <cleanup_stdio+0x10>
 8006934:	f000 f932 	bl	8006b9c <_fflush_r>
 8006938:	68a1      	ldr	r1, [r4, #8]
 800693a:	4b09      	ldr	r3, [pc, #36]	@ (8006960 <cleanup_stdio+0x38>)
 800693c:	4299      	cmp	r1, r3
 800693e:	d002      	beq.n	8006946 <cleanup_stdio+0x1e>
 8006940:	4620      	mov	r0, r4
 8006942:	f000 f92b 	bl	8006b9c <_fflush_r>
 8006946:	68e1      	ldr	r1, [r4, #12]
 8006948:	4b06      	ldr	r3, [pc, #24]	@ (8006964 <cleanup_stdio+0x3c>)
 800694a:	4299      	cmp	r1, r3
 800694c:	d004      	beq.n	8006958 <cleanup_stdio+0x30>
 800694e:	4620      	mov	r0, r4
 8006950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006954:	f000 b922 	b.w	8006b9c <_fflush_r>
 8006958:	bd10      	pop	{r4, pc}
 800695a:	bf00      	nop
 800695c:	20025cc4 	.word	0x20025cc4
 8006960:	20025d2c 	.word	0x20025d2c
 8006964:	20025d94 	.word	0x20025d94

08006968 <global_stdio_init.part.0>:
 8006968:	b510      	push	{r4, lr}
 800696a:	4b0b      	ldr	r3, [pc, #44]	@ (8006998 <global_stdio_init.part.0+0x30>)
 800696c:	4c0b      	ldr	r4, [pc, #44]	@ (800699c <global_stdio_init.part.0+0x34>)
 800696e:	4a0c      	ldr	r2, [pc, #48]	@ (80069a0 <global_stdio_init.part.0+0x38>)
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	4620      	mov	r0, r4
 8006974:	2200      	movs	r2, #0
 8006976:	2104      	movs	r1, #4
 8006978:	f7ff ff94 	bl	80068a4 <std>
 800697c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006980:	2201      	movs	r2, #1
 8006982:	2109      	movs	r1, #9
 8006984:	f7ff ff8e 	bl	80068a4 <std>
 8006988:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800698c:	2202      	movs	r2, #2
 800698e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006992:	2112      	movs	r1, #18
 8006994:	f7ff bf86 	b.w	80068a4 <std>
 8006998:	20025dfc 	.word	0x20025dfc
 800699c:	20025cc4 	.word	0x20025cc4
 80069a0:	08006911 	.word	0x08006911

080069a4 <__sfp_lock_acquire>:
 80069a4:	4801      	ldr	r0, [pc, #4]	@ (80069ac <__sfp_lock_acquire+0x8>)
 80069a6:	f000 b872 	b.w	8006a8e <__retarget_lock_acquire_recursive>
 80069aa:	bf00      	nop
 80069ac:	20025e01 	.word	0x20025e01

080069b0 <__sfp_lock_release>:
 80069b0:	4801      	ldr	r0, [pc, #4]	@ (80069b8 <__sfp_lock_release+0x8>)
 80069b2:	f000 b86d 	b.w	8006a90 <__retarget_lock_release_recursive>
 80069b6:	bf00      	nop
 80069b8:	20025e01 	.word	0x20025e01

080069bc <__sinit>:
 80069bc:	b510      	push	{r4, lr}
 80069be:	4604      	mov	r4, r0
 80069c0:	f7ff fff0 	bl	80069a4 <__sfp_lock_acquire>
 80069c4:	6a23      	ldr	r3, [r4, #32]
 80069c6:	b11b      	cbz	r3, 80069d0 <__sinit+0x14>
 80069c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069cc:	f7ff bff0 	b.w	80069b0 <__sfp_lock_release>
 80069d0:	4b04      	ldr	r3, [pc, #16]	@ (80069e4 <__sinit+0x28>)
 80069d2:	6223      	str	r3, [r4, #32]
 80069d4:	4b04      	ldr	r3, [pc, #16]	@ (80069e8 <__sinit+0x2c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1f5      	bne.n	80069c8 <__sinit+0xc>
 80069dc:	f7ff ffc4 	bl	8006968 <global_stdio_init.part.0>
 80069e0:	e7f2      	b.n	80069c8 <__sinit+0xc>
 80069e2:	bf00      	nop
 80069e4:	08006929 	.word	0x08006929
 80069e8:	20025dfc 	.word	0x20025dfc

080069ec <_fwalk_sglue>:
 80069ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069f0:	4607      	mov	r7, r0
 80069f2:	4688      	mov	r8, r1
 80069f4:	4614      	mov	r4, r2
 80069f6:	2600      	movs	r6, #0
 80069f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069fc:	f1b9 0901 	subs.w	r9, r9, #1
 8006a00:	d505      	bpl.n	8006a0e <_fwalk_sglue+0x22>
 8006a02:	6824      	ldr	r4, [r4, #0]
 8006a04:	2c00      	cmp	r4, #0
 8006a06:	d1f7      	bne.n	80069f8 <_fwalk_sglue+0xc>
 8006a08:	4630      	mov	r0, r6
 8006a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a0e:	89ab      	ldrh	r3, [r5, #12]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d907      	bls.n	8006a24 <_fwalk_sglue+0x38>
 8006a14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	d003      	beq.n	8006a24 <_fwalk_sglue+0x38>
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	4638      	mov	r0, r7
 8006a20:	47c0      	blx	r8
 8006a22:	4306      	orrs	r6, r0
 8006a24:	3568      	adds	r5, #104	@ 0x68
 8006a26:	e7e9      	b.n	80069fc <_fwalk_sglue+0x10>

08006a28 <memset>:
 8006a28:	4402      	add	r2, r0
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d100      	bne.n	8006a32 <memset+0xa>
 8006a30:	4770      	bx	lr
 8006a32:	f803 1b01 	strb.w	r1, [r3], #1
 8006a36:	e7f9      	b.n	8006a2c <memset+0x4>

08006a38 <__errno>:
 8006a38:	4b01      	ldr	r3, [pc, #4]	@ (8006a40 <__errno+0x8>)
 8006a3a:	6818      	ldr	r0, [r3, #0]
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	20000030 	.word	0x20000030

08006a44 <__libc_init_array>:
 8006a44:	b570      	push	{r4, r5, r6, lr}
 8006a46:	4d0d      	ldr	r5, [pc, #52]	@ (8006a7c <__libc_init_array+0x38>)
 8006a48:	4c0d      	ldr	r4, [pc, #52]	@ (8006a80 <__libc_init_array+0x3c>)
 8006a4a:	1b64      	subs	r4, r4, r5
 8006a4c:	10a4      	asrs	r4, r4, #2
 8006a4e:	2600      	movs	r6, #0
 8006a50:	42a6      	cmp	r6, r4
 8006a52:	d109      	bne.n	8006a68 <__libc_init_array+0x24>
 8006a54:	4d0b      	ldr	r5, [pc, #44]	@ (8006a84 <__libc_init_array+0x40>)
 8006a56:	4c0c      	ldr	r4, [pc, #48]	@ (8006a88 <__libc_init_array+0x44>)
 8006a58:	f000 f9a8 	bl	8006dac <_init>
 8006a5c:	1b64      	subs	r4, r4, r5
 8006a5e:	10a4      	asrs	r4, r4, #2
 8006a60:	2600      	movs	r6, #0
 8006a62:	42a6      	cmp	r6, r4
 8006a64:	d105      	bne.n	8006a72 <__libc_init_array+0x2e>
 8006a66:	bd70      	pop	{r4, r5, r6, pc}
 8006a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a6c:	4798      	blx	r3
 8006a6e:	3601      	adds	r6, #1
 8006a70:	e7ee      	b.n	8006a50 <__libc_init_array+0xc>
 8006a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a76:	4798      	blx	r3
 8006a78:	3601      	adds	r6, #1
 8006a7a:	e7f2      	b.n	8006a62 <__libc_init_array+0x1e>
 8006a7c:	08007fd0 	.word	0x08007fd0
 8006a80:	08007fd0 	.word	0x08007fd0
 8006a84:	08007fd0 	.word	0x08007fd0
 8006a88:	08007fd4 	.word	0x08007fd4

08006a8c <__retarget_lock_init_recursive>:
 8006a8c:	4770      	bx	lr

08006a8e <__retarget_lock_acquire_recursive>:
 8006a8e:	4770      	bx	lr

08006a90 <__retarget_lock_release_recursive>:
 8006a90:	4770      	bx	lr
	...

08006a94 <__sflush_r>:
 8006a94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9c:	0716      	lsls	r6, r2, #28
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	d454      	bmi.n	8006b4e <__sflush_r+0xba>
 8006aa4:	684b      	ldr	r3, [r1, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	dc02      	bgt.n	8006ab0 <__sflush_r+0x1c>
 8006aaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	dd48      	ble.n	8006b42 <__sflush_r+0xae>
 8006ab0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ab2:	2e00      	cmp	r6, #0
 8006ab4:	d045      	beq.n	8006b42 <__sflush_r+0xae>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006abc:	682f      	ldr	r7, [r5, #0]
 8006abe:	6a21      	ldr	r1, [r4, #32]
 8006ac0:	602b      	str	r3, [r5, #0]
 8006ac2:	d030      	beq.n	8006b26 <__sflush_r+0x92>
 8006ac4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ac6:	89a3      	ldrh	r3, [r4, #12]
 8006ac8:	0759      	lsls	r1, r3, #29
 8006aca:	d505      	bpl.n	8006ad8 <__sflush_r+0x44>
 8006acc:	6863      	ldr	r3, [r4, #4]
 8006ace:	1ad2      	subs	r2, r2, r3
 8006ad0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ad2:	b10b      	cbz	r3, 8006ad8 <__sflush_r+0x44>
 8006ad4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ad6:	1ad2      	subs	r2, r2, r3
 8006ad8:	2300      	movs	r3, #0
 8006ada:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006adc:	6a21      	ldr	r1, [r4, #32]
 8006ade:	4628      	mov	r0, r5
 8006ae0:	47b0      	blx	r6
 8006ae2:	1c43      	adds	r3, r0, #1
 8006ae4:	89a3      	ldrh	r3, [r4, #12]
 8006ae6:	d106      	bne.n	8006af6 <__sflush_r+0x62>
 8006ae8:	6829      	ldr	r1, [r5, #0]
 8006aea:	291d      	cmp	r1, #29
 8006aec:	d82b      	bhi.n	8006b46 <__sflush_r+0xb2>
 8006aee:	4a2a      	ldr	r2, [pc, #168]	@ (8006b98 <__sflush_r+0x104>)
 8006af0:	40ca      	lsrs	r2, r1
 8006af2:	07d6      	lsls	r6, r2, #31
 8006af4:	d527      	bpl.n	8006b46 <__sflush_r+0xb2>
 8006af6:	2200      	movs	r2, #0
 8006af8:	6062      	str	r2, [r4, #4]
 8006afa:	04d9      	lsls	r1, r3, #19
 8006afc:	6922      	ldr	r2, [r4, #16]
 8006afe:	6022      	str	r2, [r4, #0]
 8006b00:	d504      	bpl.n	8006b0c <__sflush_r+0x78>
 8006b02:	1c42      	adds	r2, r0, #1
 8006b04:	d101      	bne.n	8006b0a <__sflush_r+0x76>
 8006b06:	682b      	ldr	r3, [r5, #0]
 8006b08:	b903      	cbnz	r3, 8006b0c <__sflush_r+0x78>
 8006b0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b0e:	602f      	str	r7, [r5, #0]
 8006b10:	b1b9      	cbz	r1, 8006b42 <__sflush_r+0xae>
 8006b12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b16:	4299      	cmp	r1, r3
 8006b18:	d002      	beq.n	8006b20 <__sflush_r+0x8c>
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	f000 f8fc 	bl	8006d18 <_free_r>
 8006b20:	2300      	movs	r3, #0
 8006b22:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b24:	e00d      	b.n	8006b42 <__sflush_r+0xae>
 8006b26:	2301      	movs	r3, #1
 8006b28:	4628      	mov	r0, r5
 8006b2a:	47b0      	blx	r6
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	1c50      	adds	r0, r2, #1
 8006b30:	d1c9      	bne.n	8006ac6 <__sflush_r+0x32>
 8006b32:	682b      	ldr	r3, [r5, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d0c6      	beq.n	8006ac6 <__sflush_r+0x32>
 8006b38:	2b1d      	cmp	r3, #29
 8006b3a:	d001      	beq.n	8006b40 <__sflush_r+0xac>
 8006b3c:	2b16      	cmp	r3, #22
 8006b3e:	d11e      	bne.n	8006b7e <__sflush_r+0xea>
 8006b40:	602f      	str	r7, [r5, #0]
 8006b42:	2000      	movs	r0, #0
 8006b44:	e022      	b.n	8006b8c <__sflush_r+0xf8>
 8006b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b4a:	b21b      	sxth	r3, r3
 8006b4c:	e01b      	b.n	8006b86 <__sflush_r+0xf2>
 8006b4e:	690f      	ldr	r7, [r1, #16]
 8006b50:	2f00      	cmp	r7, #0
 8006b52:	d0f6      	beq.n	8006b42 <__sflush_r+0xae>
 8006b54:	0793      	lsls	r3, r2, #30
 8006b56:	680e      	ldr	r6, [r1, #0]
 8006b58:	bf08      	it	eq
 8006b5a:	694b      	ldreq	r3, [r1, #20]
 8006b5c:	600f      	str	r7, [r1, #0]
 8006b5e:	bf18      	it	ne
 8006b60:	2300      	movne	r3, #0
 8006b62:	eba6 0807 	sub.w	r8, r6, r7
 8006b66:	608b      	str	r3, [r1, #8]
 8006b68:	f1b8 0f00 	cmp.w	r8, #0
 8006b6c:	dde9      	ble.n	8006b42 <__sflush_r+0xae>
 8006b6e:	6a21      	ldr	r1, [r4, #32]
 8006b70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006b72:	4643      	mov	r3, r8
 8006b74:	463a      	mov	r2, r7
 8006b76:	4628      	mov	r0, r5
 8006b78:	47b0      	blx	r6
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	dc08      	bgt.n	8006b90 <__sflush_r+0xfc>
 8006b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b86:	81a3      	strh	r3, [r4, #12]
 8006b88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b90:	4407      	add	r7, r0
 8006b92:	eba8 0800 	sub.w	r8, r8, r0
 8006b96:	e7e7      	b.n	8006b68 <__sflush_r+0xd4>
 8006b98:	20400001 	.word	0x20400001

08006b9c <_fflush_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	690b      	ldr	r3, [r1, #16]
 8006ba0:	4605      	mov	r5, r0
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	b913      	cbnz	r3, 8006bac <_fflush_r+0x10>
 8006ba6:	2500      	movs	r5, #0
 8006ba8:	4628      	mov	r0, r5
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
 8006bac:	b118      	cbz	r0, 8006bb6 <_fflush_r+0x1a>
 8006bae:	6a03      	ldr	r3, [r0, #32]
 8006bb0:	b90b      	cbnz	r3, 8006bb6 <_fflush_r+0x1a>
 8006bb2:	f7ff ff03 	bl	80069bc <__sinit>
 8006bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0f3      	beq.n	8006ba6 <_fflush_r+0xa>
 8006bbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006bc0:	07d0      	lsls	r0, r2, #31
 8006bc2:	d404      	bmi.n	8006bce <_fflush_r+0x32>
 8006bc4:	0599      	lsls	r1, r3, #22
 8006bc6:	d402      	bmi.n	8006bce <_fflush_r+0x32>
 8006bc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bca:	f7ff ff60 	bl	8006a8e <__retarget_lock_acquire_recursive>
 8006bce:	4628      	mov	r0, r5
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	f7ff ff5f 	bl	8006a94 <__sflush_r>
 8006bd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bd8:	07da      	lsls	r2, r3, #31
 8006bda:	4605      	mov	r5, r0
 8006bdc:	d4e4      	bmi.n	8006ba8 <_fflush_r+0xc>
 8006bde:	89a3      	ldrh	r3, [r4, #12]
 8006be0:	059b      	lsls	r3, r3, #22
 8006be2:	d4e1      	bmi.n	8006ba8 <_fflush_r+0xc>
 8006be4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006be6:	f7ff ff53 	bl	8006a90 <__retarget_lock_release_recursive>
 8006bea:	e7dd      	b.n	8006ba8 <_fflush_r+0xc>

08006bec <__malloc_lock>:
 8006bec:	4801      	ldr	r0, [pc, #4]	@ (8006bf4 <__malloc_lock+0x8>)
 8006bee:	f7ff bf4e 	b.w	8006a8e <__retarget_lock_acquire_recursive>
 8006bf2:	bf00      	nop
 8006bf4:	20025e00 	.word	0x20025e00

08006bf8 <__malloc_unlock>:
 8006bf8:	4801      	ldr	r0, [pc, #4]	@ (8006c00 <__malloc_unlock+0x8>)
 8006bfa:	f7ff bf49 	b.w	8006a90 <__retarget_lock_release_recursive>
 8006bfe:	bf00      	nop
 8006c00:	20025e00 	.word	0x20025e00

08006c04 <__sread>:
 8006c04:	b510      	push	{r4, lr}
 8006c06:	460c      	mov	r4, r1
 8006c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c0c:	f000 f850 	bl	8006cb0 <_read_r>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	bfab      	itete	ge
 8006c14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c16:	89a3      	ldrhlt	r3, [r4, #12]
 8006c18:	181b      	addge	r3, r3, r0
 8006c1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c1e:	bfac      	ite	ge
 8006c20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c22:	81a3      	strhlt	r3, [r4, #12]
 8006c24:	bd10      	pop	{r4, pc}

08006c26 <__swrite>:
 8006c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c2a:	461f      	mov	r7, r3
 8006c2c:	898b      	ldrh	r3, [r1, #12]
 8006c2e:	05db      	lsls	r3, r3, #23
 8006c30:	4605      	mov	r5, r0
 8006c32:	460c      	mov	r4, r1
 8006c34:	4616      	mov	r6, r2
 8006c36:	d505      	bpl.n	8006c44 <__swrite+0x1e>
 8006c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f000 f824 	bl	8006c8c <_lseek_r>
 8006c44:	89a3      	ldrh	r3, [r4, #12]
 8006c46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c4e:	81a3      	strh	r3, [r4, #12]
 8006c50:	4632      	mov	r2, r6
 8006c52:	463b      	mov	r3, r7
 8006c54:	4628      	mov	r0, r5
 8006c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c5a:	f000 b83b 	b.w	8006cd4 <_write_r>

08006c5e <__sseek>:
 8006c5e:	b510      	push	{r4, lr}
 8006c60:	460c      	mov	r4, r1
 8006c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c66:	f000 f811 	bl	8006c8c <_lseek_r>
 8006c6a:	1c43      	adds	r3, r0, #1
 8006c6c:	89a3      	ldrh	r3, [r4, #12]
 8006c6e:	bf15      	itete	ne
 8006c70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c7a:	81a3      	strheq	r3, [r4, #12]
 8006c7c:	bf18      	it	ne
 8006c7e:	81a3      	strhne	r3, [r4, #12]
 8006c80:	bd10      	pop	{r4, pc}

08006c82 <__sclose>:
 8006c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c86:	f000 b837 	b.w	8006cf8 <_close_r>
	...

08006c8c <_lseek_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	4d07      	ldr	r5, [pc, #28]	@ (8006cac <_lseek_r+0x20>)
 8006c90:	4604      	mov	r4, r0
 8006c92:	4608      	mov	r0, r1
 8006c94:	4611      	mov	r1, r2
 8006c96:	2200      	movs	r2, #0
 8006c98:	602a      	str	r2, [r5, #0]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	f7ff fc25 	bl	80064ea <_lseek>
 8006ca0:	1c43      	adds	r3, r0, #1
 8006ca2:	d102      	bne.n	8006caa <_lseek_r+0x1e>
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	b103      	cbz	r3, 8006caa <_lseek_r+0x1e>
 8006ca8:	6023      	str	r3, [r4, #0]
 8006caa:	bd38      	pop	{r3, r4, r5, pc}
 8006cac:	20025e08 	.word	0x20025e08

08006cb0 <_read_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	4d07      	ldr	r5, [pc, #28]	@ (8006cd0 <_read_r+0x20>)
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	4608      	mov	r0, r1
 8006cb8:	4611      	mov	r1, r2
 8006cba:	2200      	movs	r2, #0
 8006cbc:	602a      	str	r2, [r5, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	f7ff fbbd 	bl	800643e <_read>
 8006cc4:	1c43      	adds	r3, r0, #1
 8006cc6:	d102      	bne.n	8006cce <_read_r+0x1e>
 8006cc8:	682b      	ldr	r3, [r5, #0]
 8006cca:	b103      	cbz	r3, 8006cce <_read_r+0x1e>
 8006ccc:	6023      	str	r3, [r4, #0]
 8006cce:	bd38      	pop	{r3, r4, r5, pc}
 8006cd0:	20025e08 	.word	0x20025e08

08006cd4 <_write_r>:
 8006cd4:	b538      	push	{r3, r4, r5, lr}
 8006cd6:	4d07      	ldr	r5, [pc, #28]	@ (8006cf4 <_write_r+0x20>)
 8006cd8:	4604      	mov	r4, r0
 8006cda:	4608      	mov	r0, r1
 8006cdc:	4611      	mov	r1, r2
 8006cde:	2200      	movs	r2, #0
 8006ce0:	602a      	str	r2, [r5, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	f7ff fc13 	bl	800650e <_write>
 8006ce8:	1c43      	adds	r3, r0, #1
 8006cea:	d102      	bne.n	8006cf2 <_write_r+0x1e>
 8006cec:	682b      	ldr	r3, [r5, #0]
 8006cee:	b103      	cbz	r3, 8006cf2 <_write_r+0x1e>
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	bd38      	pop	{r3, r4, r5, pc}
 8006cf4:	20025e08 	.word	0x20025e08

08006cf8 <_close_r>:
 8006cf8:	b538      	push	{r3, r4, r5, lr}
 8006cfa:	4d06      	ldr	r5, [pc, #24]	@ (8006d14 <_close_r+0x1c>)
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	4604      	mov	r4, r0
 8006d00:	4608      	mov	r0, r1
 8006d02:	602b      	str	r3, [r5, #0]
 8006d04:	f7ff fc30 	bl	8006568 <_close>
 8006d08:	1c43      	adds	r3, r0, #1
 8006d0a:	d102      	bne.n	8006d12 <_close_r+0x1a>
 8006d0c:	682b      	ldr	r3, [r5, #0]
 8006d0e:	b103      	cbz	r3, 8006d12 <_close_r+0x1a>
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	bd38      	pop	{r3, r4, r5, pc}
 8006d14:	20025e08 	.word	0x20025e08

08006d18 <_free_r>:
 8006d18:	b538      	push	{r3, r4, r5, lr}
 8006d1a:	4605      	mov	r5, r0
 8006d1c:	2900      	cmp	r1, #0
 8006d1e:	d041      	beq.n	8006da4 <_free_r+0x8c>
 8006d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d24:	1f0c      	subs	r4, r1, #4
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	bfb8      	it	lt
 8006d2a:	18e4      	addlt	r4, r4, r3
 8006d2c:	f7ff ff5e 	bl	8006bec <__malloc_lock>
 8006d30:	4a1d      	ldr	r2, [pc, #116]	@ (8006da8 <_free_r+0x90>)
 8006d32:	6813      	ldr	r3, [r2, #0]
 8006d34:	b933      	cbnz	r3, 8006d44 <_free_r+0x2c>
 8006d36:	6063      	str	r3, [r4, #4]
 8006d38:	6014      	str	r4, [r2, #0]
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d40:	f7ff bf5a 	b.w	8006bf8 <__malloc_unlock>
 8006d44:	42a3      	cmp	r3, r4
 8006d46:	d908      	bls.n	8006d5a <_free_r+0x42>
 8006d48:	6820      	ldr	r0, [r4, #0]
 8006d4a:	1821      	adds	r1, r4, r0
 8006d4c:	428b      	cmp	r3, r1
 8006d4e:	bf01      	itttt	eq
 8006d50:	6819      	ldreq	r1, [r3, #0]
 8006d52:	685b      	ldreq	r3, [r3, #4]
 8006d54:	1809      	addeq	r1, r1, r0
 8006d56:	6021      	streq	r1, [r4, #0]
 8006d58:	e7ed      	b.n	8006d36 <_free_r+0x1e>
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	b10b      	cbz	r3, 8006d64 <_free_r+0x4c>
 8006d60:	42a3      	cmp	r3, r4
 8006d62:	d9fa      	bls.n	8006d5a <_free_r+0x42>
 8006d64:	6811      	ldr	r1, [r2, #0]
 8006d66:	1850      	adds	r0, r2, r1
 8006d68:	42a0      	cmp	r0, r4
 8006d6a:	d10b      	bne.n	8006d84 <_free_r+0x6c>
 8006d6c:	6820      	ldr	r0, [r4, #0]
 8006d6e:	4401      	add	r1, r0
 8006d70:	1850      	adds	r0, r2, r1
 8006d72:	4283      	cmp	r3, r0
 8006d74:	6011      	str	r1, [r2, #0]
 8006d76:	d1e0      	bne.n	8006d3a <_free_r+0x22>
 8006d78:	6818      	ldr	r0, [r3, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	6053      	str	r3, [r2, #4]
 8006d7e:	4408      	add	r0, r1
 8006d80:	6010      	str	r0, [r2, #0]
 8006d82:	e7da      	b.n	8006d3a <_free_r+0x22>
 8006d84:	d902      	bls.n	8006d8c <_free_r+0x74>
 8006d86:	230c      	movs	r3, #12
 8006d88:	602b      	str	r3, [r5, #0]
 8006d8a:	e7d6      	b.n	8006d3a <_free_r+0x22>
 8006d8c:	6820      	ldr	r0, [r4, #0]
 8006d8e:	1821      	adds	r1, r4, r0
 8006d90:	428b      	cmp	r3, r1
 8006d92:	bf04      	itt	eq
 8006d94:	6819      	ldreq	r1, [r3, #0]
 8006d96:	685b      	ldreq	r3, [r3, #4]
 8006d98:	6063      	str	r3, [r4, #4]
 8006d9a:	bf04      	itt	eq
 8006d9c:	1809      	addeq	r1, r1, r0
 8006d9e:	6021      	streq	r1, [r4, #0]
 8006da0:	6054      	str	r4, [r2, #4]
 8006da2:	e7ca      	b.n	8006d3a <_free_r+0x22>
 8006da4:	bd38      	pop	{r3, r4, r5, pc}
 8006da6:	bf00      	nop
 8006da8:	20025e04 	.word	0x20025e04

08006dac <_init>:
 8006dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dae:	bf00      	nop
 8006db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006db2:	bc08      	pop	{r3}
 8006db4:	469e      	mov	lr, r3
 8006db6:	4770      	bx	lr

08006db8 <_fini>:
 8006db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dba:	bf00      	nop
 8006dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dbe:	bc08      	pop	{r3}
 8006dc0:	469e      	mov	lr, r3
 8006dc2:	4770      	bx	lr
