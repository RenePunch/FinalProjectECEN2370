
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d60  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001230  08006f0c  08006f0c  00007f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800813c  0800813c  0000a080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800813c  0800813c  0000913c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008144  08008144  0000a080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008144  08008144  00009144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008148  08008148  00009148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800814c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a080  2**0
                  CONTENTS
 10 .bss          00025d8c  20000080  20000080  0000a080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025e0c  20025e0c  0000a080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012e80  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f19  00000000  00000000  0001cf30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001330  00000000  00000000  0001fe50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000edb  00000000  00000000  00021180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263d5  00000000  00000000  0002205b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ed3  00000000  00000000  00048430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0c21  00000000  00000000  0005f303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013ff24  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058e0  00000000  00000000  0013ff68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a3  00000000  00000000  00145848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000080 	.word	0x20000080
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006ef4 	.word	0x08006ef4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000084 	.word	0x20000084
 80001e8:	08006ef4 	.word	0x08006ef4

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b988 	b.w	8000524 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	468e      	mov	lr, r1
 8000234:	4604      	mov	r4, r0
 8000236:	4688      	mov	r8, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d962      	bls.n	8000308 <__udivmoddi4+0xdc>
 8000242:	fab2 f682 	clz	r6, r2
 8000246:	b14e      	cbz	r6, 800025c <__udivmoddi4+0x30>
 8000248:	f1c6 0320 	rsb	r3, r6, #32
 800024c:	fa01 f806 	lsl.w	r8, r1, r6
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	40b7      	lsls	r7, r6
 8000256:	ea43 0808 	orr.w	r8, r3, r8
 800025a:	40b4      	lsls	r4, r6
 800025c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000260:	fa1f fc87 	uxth.w	ip, r7
 8000264:	fbb8 f1fe 	udiv	r1, r8, lr
 8000268:	0c23      	lsrs	r3, r4, #16
 800026a:	fb0e 8811 	mls	r8, lr, r1, r8
 800026e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000272:	fb01 f20c 	mul.w	r2, r1, ip
 8000276:	429a      	cmp	r2, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x62>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000280:	f080 80ea 	bcs.w	8000458 <__udivmoddi4+0x22c>
 8000284:	429a      	cmp	r2, r3
 8000286:	f240 80e7 	bls.w	8000458 <__udivmoddi4+0x22c>
 800028a:	3902      	subs	r1, #2
 800028c:	443b      	add	r3, r7
 800028e:	1a9a      	subs	r2, r3, r2
 8000290:	b2a3      	uxth	r3, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800029e:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a2:	459c      	cmp	ip, r3
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0x8e>
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002ac:	f080 80d6 	bcs.w	800045c <__udivmoddi4+0x230>
 80002b0:	459c      	cmp	ip, r3
 80002b2:	f240 80d3 	bls.w	800045c <__udivmoddi4+0x230>
 80002b6:	443b      	add	r3, r7
 80002b8:	3802      	subs	r0, #2
 80002ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002be:	eba3 030c 	sub.w	r3, r3, ip
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40f3      	lsrs	r3, r6
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xb6>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb0>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa2>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x14c>
 80002ea:	4573      	cmp	r3, lr
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xc8>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 8105 	bhi.w	80004fe <__udivmoddi4+0x2d2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4690      	mov	r8, r2
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e5      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000302:	e9c5 4800 	strd	r4, r8, [r5]
 8000306:	e7e2      	b.n	80002ce <__udivmoddi4+0xa2>
 8000308:	2a00      	cmp	r2, #0
 800030a:	f000 8090 	beq.w	800042e <__udivmoddi4+0x202>
 800030e:	fab2 f682 	clz	r6, r2
 8000312:	2e00      	cmp	r6, #0
 8000314:	f040 80a4 	bne.w	8000460 <__udivmoddi4+0x234>
 8000318:	1a8a      	subs	r2, r1, r2
 800031a:	0c03      	lsrs	r3, r0, #16
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	b280      	uxth	r0, r0
 8000322:	b2bc      	uxth	r4, r7
 8000324:	2101      	movs	r1, #1
 8000326:	fbb2 fcfe 	udiv	ip, r2, lr
 800032a:	fb0e 221c 	mls	r2, lr, ip, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb04 f20c 	mul.w	r2, r4, ip
 8000336:	429a      	cmp	r2, r3
 8000338:	d907      	bls.n	800034a <__udivmoddi4+0x11e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x11c>
 8000342:	429a      	cmp	r2, r3
 8000344:	f200 80e0 	bhi.w	8000508 <__udivmoddi4+0x2dc>
 8000348:	46c4      	mov	ip, r8
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000350:	fb0e 3312 	mls	r3, lr, r2, r3
 8000354:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000358:	fb02 f404 	mul.w	r4, r2, r4
 800035c:	429c      	cmp	r4, r3
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x144>
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x142>
 8000368:	429c      	cmp	r4, r3
 800036a:	f200 80ca 	bhi.w	8000502 <__udivmoddi4+0x2d6>
 800036e:	4602      	mov	r2, r0
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x98>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa0e f401 	lsl.w	r4, lr, r1
 8000388:	fa20 f306 	lsr.w	r3, r0, r6
 800038c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000390:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	fa1f fc87 	uxth.w	ip, r7
 800039e:	fbbe f0f9 	udiv	r0, lr, r9
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80003a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1a0>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003be:	f080 809c 	bcs.w	80004fa <__udivmoddi4+0x2ce>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8099 	bls.w	80004fa <__udivmoddi4+0x2ce>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	fa1f fe83 	uxth.w	lr, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e4:	45a4      	cmp	ip, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1ce>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ee:	f080 8082 	bcs.w	80004f6 <__udivmoddi4+0x2ca>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d97f      	bls.n	80004f6 <__udivmoddi4+0x2ca>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	fba0 ec02 	umull	lr, ip, r0, r2
 8000406:	4564      	cmp	r4, ip
 8000408:	4673      	mov	r3, lr
 800040a:	46e1      	mov	r9, ip
 800040c:	d362      	bcc.n	80004d4 <__udivmoddi4+0x2a8>
 800040e:	d05f      	beq.n	80004d0 <__udivmoddi4+0x2a4>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x1fe>
 8000412:	ebb8 0203 	subs.w	r2, r8, r3
 8000416:	eb64 0409 	sbc.w	r4, r4, r9
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431e      	orrs	r6, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c5 6400 	strd	r6, r4, [r5]
 800042a:	2100      	movs	r1, #0
 800042c:	e74f      	b.n	80002ce <__udivmoddi4+0xa2>
 800042e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000432:	0c01      	lsrs	r1, r0, #16
 8000434:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000438:	b280      	uxth	r0, r0
 800043a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800043e:	463b      	mov	r3, r7
 8000440:	4638      	mov	r0, r7
 8000442:	463c      	mov	r4, r7
 8000444:	46b8      	mov	r8, r7
 8000446:	46be      	mov	lr, r7
 8000448:	2620      	movs	r6, #32
 800044a:	fbb1 f1f7 	udiv	r1, r1, r7
 800044e:	eba2 0208 	sub.w	r2, r2, r8
 8000452:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000456:	e766      	b.n	8000326 <__udivmoddi4+0xfa>
 8000458:	4601      	mov	r1, r0
 800045a:	e718      	b.n	800028e <__udivmoddi4+0x62>
 800045c:	4610      	mov	r0, r2
 800045e:	e72c      	b.n	80002ba <__udivmoddi4+0x8e>
 8000460:	f1c6 0220 	rsb	r2, r6, #32
 8000464:	fa2e f302 	lsr.w	r3, lr, r2
 8000468:	40b7      	lsls	r7, r6
 800046a:	40b1      	lsls	r1, r6
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	430a      	orrs	r2, r1
 8000476:	fbb3 f8fe 	udiv	r8, r3, lr
 800047a:	b2bc      	uxth	r4, r7
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	0c11      	lsrs	r1, r2, #16
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb08 f904 	mul.w	r9, r8, r4
 800048a:	40b0      	lsls	r0, r6
 800048c:	4589      	cmp	r9, r1
 800048e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000492:	b280      	uxth	r0, r0
 8000494:	d93e      	bls.n	8000514 <__udivmoddi4+0x2e8>
 8000496:	1879      	adds	r1, r7, r1
 8000498:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x276>
 800049e:	4589      	cmp	r9, r1
 80004a0:	d81f      	bhi.n	80004e2 <__udivmoddi4+0x2b6>
 80004a2:	eba1 0109 	sub.w	r1, r1, r9
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fb09 f804 	mul.w	r8, r9, r4
 80004ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b2:	b292      	uxth	r2, r2
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d229      	bcs.n	8000510 <__udivmoddi4+0x2e4>
 80004bc:	18ba      	adds	r2, r7, r2
 80004be:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004c2:	d2c4      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d2c2      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c8:	f1a9 0102 	sub.w	r1, r9, #2
 80004cc:	443a      	add	r2, r7
 80004ce:	e7be      	b.n	800044e <__udivmoddi4+0x222>
 80004d0:	45f0      	cmp	r8, lr
 80004d2:	d29d      	bcs.n	8000410 <__udivmoddi4+0x1e4>
 80004d4:	ebbe 0302 	subs.w	r3, lr, r2
 80004d8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004dc:	3801      	subs	r0, #1
 80004de:	46e1      	mov	r9, ip
 80004e0:	e796      	b.n	8000410 <__udivmoddi4+0x1e4>
 80004e2:	eba7 0909 	sub.w	r9, r7, r9
 80004e6:	4449      	add	r1, r9
 80004e8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004ec:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f0:	fb09 f804 	mul.w	r8, r9, r4
 80004f4:	e7db      	b.n	80004ae <__udivmoddi4+0x282>
 80004f6:	4673      	mov	r3, lr
 80004f8:	e77f      	b.n	80003fa <__udivmoddi4+0x1ce>
 80004fa:	4650      	mov	r0, sl
 80004fc:	e766      	b.n	80003cc <__udivmoddi4+0x1a0>
 80004fe:	4608      	mov	r0, r1
 8000500:	e6fd      	b.n	80002fe <__udivmoddi4+0xd2>
 8000502:	443b      	add	r3, r7
 8000504:	3a02      	subs	r2, #2
 8000506:	e733      	b.n	8000370 <__udivmoddi4+0x144>
 8000508:	f1ac 0c02 	sub.w	ip, ip, #2
 800050c:	443b      	add	r3, r7
 800050e:	e71c      	b.n	800034a <__udivmoddi4+0x11e>
 8000510:	4649      	mov	r1, r9
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x222>
 8000514:	eba1 0109 	sub.w	r1, r1, r9
 8000518:	46c4      	mov	ip, r8
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	e7c4      	b.n	80004ae <__udivmoddi4+0x282>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 800052c:	f006 f9fe 	bl	800692c <initialise_monitor_handles>
    LTCD__Init();
 8000530:	f000 fd78 	bl	8001024 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000534:	2000      	movs	r0, #0
 8000536:	f000 fd35 	bl	8000fa4 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 800053a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800053e:	2000      	movs	r0, #0
 8000540:	f000 fe40 	bl	80011c4 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 8000544:	f000 ff16 	bl	8001374 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 8000548:	4b02      	ldr	r3, [pc, #8]	@ (8000554 <ApplicationInit+0x2c>)
 800054a:	2201      	movs	r2, #1
 800054c:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	2000009c 	.word	0x2000009c

08000558 <ApplicationFirstScreen>:
void ApplicationFirstScreen(){
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	firstScreen();
 800055c:	f000 f858 	bl	8000610 <firstScreen>
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}

08000564 <ApplicationEndScreen>:

void ApplicationEndScreen(char winner)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
    endScreen(winner);
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	4618      	mov	r0, r3
 8000572:	f000 f8d5 	bl	8000720 <endScreen>
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <LCD_Touch_Polling_Demo>:
// 	visualDemo();
// }

#if COMPILE_TOUCH_FUNCTIONS == 1
void LCD_Touch_Polling_Demo(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 
    ApplicationFirstScreen();
 8000586:	f7ff ffe7 	bl	8000558 <ApplicationFirstScreen>

    while (1)
    {

        if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed)
 800058a:	4820      	ldr	r0, [pc, #128]	@ (800060c <LCD_Touch_Polling_Demo+0x8c>)
 800058c:	f000 fefd 	bl	800138a <returnTouchStateAndLocation>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d136      	bne.n	8000604 <LCD_Touch_Polling_Demo+0x84>
        {
            char winner = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	71fb      	strb	r3, [r7, #7]

      
            if (StaticTouchData.x <= 120)
 800059a:	4b1c      	ldr	r3, [pc, #112]	@ (800060c <LCD_Touch_Polling_Demo+0x8c>)
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	2b78      	cmp	r3, #120	@ 0x78
 80005a0:	d813      	bhi.n	80005ca <LCD_Touch_Polling_Demo+0x4a>
            {
            
                PlayOnePlayer();
 80005a2:	f000 fb01 	bl	8000ba8 <PlayOnePlayer>
                
                if      (checkWin('X')) winner = 'X';
 80005a6:	2058      	movs	r0, #88	@ 0x58
 80005a8:	f000 fa78 	bl	8000a9c <checkWin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d002      	beq.n	80005b8 <LCD_Touch_Polling_Demo+0x38>
 80005b2:	2358      	movs	r3, #88	@ 0x58
 80005b4:	71fb      	strb	r3, [r7, #7]
 80005b6:	e01b      	b.n	80005f0 <LCD_Touch_Polling_Demo+0x70>
                else if (checkWin('O')) winner = 'O';
 80005b8:	204f      	movs	r0, #79	@ 0x4f
 80005ba:	f000 fa6f 	bl	8000a9c <checkWin>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d015      	beq.n	80005f0 <LCD_Touch_Polling_Demo+0x70>
 80005c4:	234f      	movs	r3, #79	@ 0x4f
 80005c6:	71fb      	strb	r3, [r7, #7]
 80005c8:	e012      	b.n	80005f0 <LCD_Touch_Polling_Demo+0x70>
            }
            else
            {
          
                PlayTwoPlayer();
 80005ca:	f000 fbb5 	bl	8000d38 <PlayTwoPlayer>
                if      (checkWin('X')) winner = 'X';
 80005ce:	2058      	movs	r0, #88	@ 0x58
 80005d0:	f000 fa64 	bl	8000a9c <checkWin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d002      	beq.n	80005e0 <LCD_Touch_Polling_Demo+0x60>
 80005da:	2358      	movs	r3, #88	@ 0x58
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	e007      	b.n	80005f0 <LCD_Touch_Polling_Demo+0x70>
                else if (checkWin('O')) winner = 'O';
 80005e0:	204f      	movs	r0, #79	@ 0x4f
 80005e2:	f000 fa5b 	bl	8000a9c <checkWin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <LCD_Touch_Polling_Demo+0x70>
 80005ec:	234f      	movs	r3, #79	@ 0x4f
 80005ee:	71fb      	strb	r3, [r7, #7]
            }

     
            ApplicationEndScreen(winner);
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ffb6 	bl	8000564 <ApplicationEndScreen>

         
            HAL_Delay(10000);
 80005f8:	f242 7010 	movw	r0, #10000	@ 0x2710
 80005fc:	f002 fbe8 	bl	8002dd0 <HAL_Delay>


            ApplicationFirstScreen();
 8000600:	f7ff ffaa 	bl	8000558 <ApplicationFirstScreen>
        }

        HAL_Delay(50);
 8000604:	2032      	movs	r0, #50	@ 0x32
 8000606:	f002 fbe3 	bl	8002dd0 <HAL_Delay>
        if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed)
 800060a:	e7be      	b.n	800058a <LCD_Touch_Polling_Demo+0xa>
 800060c:	2000009c 	.word	0x2000009c

08000610 <firstScreen>:





void firstScreen(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	touchData.orientation = STMPE811_Orientation_Portrait_2;
 8000614:	4b40      	ldr	r3, [pc, #256]	@ (8000718 <firstScreen+0x108>)
 8000616:	2201      	movs	r2, #1
 8000618:	719a      	strb	r2, [r3, #6]
    LCD_Clear(0,LCD_COLOR_BLUE);
 800061a:	211f      	movs	r1, #31
 800061c:	2000      	movs	r0, #0
 800061e:	f000 fdd1 	bl	80011c4 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000622:	2000      	movs	r0, #0
 8000624:	f000 fdf0 	bl	8001208 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000628:	483c      	ldr	r0, [pc, #240]	@ (800071c <firstScreen+0x10c>)
 800062a:	f000 fdfd 	bl	8001228 <LCD_SetFont>
	LCD_DisplayChar(60,140,'C');
 800062e:	2243      	movs	r2, #67	@ 0x43
 8000630:	218c      	movs	r1, #140	@ 0x8c
 8000632:	203c      	movs	r0, #60	@ 0x3c
 8000634:	f000 fe76 	bl	8001324 <LCD_DisplayChar>
	LCD_DisplayChar(75,140,'o');
 8000638:	226f      	movs	r2, #111	@ 0x6f
 800063a:	218c      	movs	r1, #140	@ 0x8c
 800063c:	204b      	movs	r0, #75	@ 0x4b
 800063e:	f000 fe71 	bl	8001324 <LCD_DisplayChar>
	LCD_DisplayChar(90,140,'n');
 8000642:	226e      	movs	r2, #110	@ 0x6e
 8000644:	218c      	movs	r1, #140	@ 0x8c
 8000646:	205a      	movs	r0, #90	@ 0x5a
 8000648:	f000 fe6c 	bl	8001324 <LCD_DisplayChar>
	LCD_DisplayChar(105,140,'n');
 800064c:	226e      	movs	r2, #110	@ 0x6e
 800064e:	218c      	movs	r1, #140	@ 0x8c
 8000650:	2069      	movs	r0, #105	@ 0x69
 8000652:	f000 fe67 	bl	8001324 <LCD_DisplayChar>
	LCD_DisplayChar(120,140,'e');
 8000656:	2265      	movs	r2, #101	@ 0x65
 8000658:	218c      	movs	r1, #140	@ 0x8c
 800065a:	2078      	movs	r0, #120	@ 0x78
 800065c:	f000 fe62 	bl	8001324 <LCD_DisplayChar>
	LCD_DisplayChar(135,140,'c');
 8000660:	2263      	movs	r2, #99	@ 0x63
 8000662:	218c      	movs	r1, #140	@ 0x8c
 8000664:	2087      	movs	r0, #135	@ 0x87
 8000666:	f000 fe5d 	bl	8001324 <LCD_DisplayChar>
	LCD_DisplayChar(150,140,'t');
 800066a:	2274      	movs	r2, #116	@ 0x74
 800066c:	218c      	movs	r1, #140	@ 0x8c
 800066e:	2096      	movs	r0, #150	@ 0x96
 8000670:	f000 fe58 	bl	8001324 <LCD_DisplayChar>
	LCD_DisplayChar(180,140,'4');
 8000674:	2234      	movs	r2, #52	@ 0x34
 8000676:	218c      	movs	r1, #140	@ 0x8c
 8000678:	20b4      	movs	r0, #180	@ 0xb4
 800067a:	f000 fe53 	bl	8001324 <LCD_DisplayChar>

    LCD_DisplayChar(10,190,'1');
 800067e:	2231      	movs	r2, #49	@ 0x31
 8000680:	21be      	movs	r1, #190	@ 0xbe
 8000682:	200a      	movs	r0, #10
 8000684:	f000 fe4e 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(20,190,'P');
 8000688:	2250      	movs	r2, #80	@ 0x50
 800068a:	21be      	movs	r1, #190	@ 0xbe
 800068c:	2014      	movs	r0, #20
 800068e:	f000 fe49 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(30,190,'L');
 8000692:	224c      	movs	r2, #76	@ 0x4c
 8000694:	21be      	movs	r1, #190	@ 0xbe
 8000696:	201e      	movs	r0, #30
 8000698:	f000 fe44 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(40,190,'A');
 800069c:	2241      	movs	r2, #65	@ 0x41
 800069e:	21be      	movs	r1, #190	@ 0xbe
 80006a0:	2028      	movs	r0, #40	@ 0x28
 80006a2:	f000 fe3f 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(55,190,'Y');
 80006a6:	2259      	movs	r2, #89	@ 0x59
 80006a8:	21be      	movs	r1, #190	@ 0xbe
 80006aa:	2037      	movs	r0, #55	@ 0x37
 80006ac:	f000 fe3a 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(70,190,'E');
 80006b0:	2245      	movs	r2, #69	@ 0x45
 80006b2:	21be      	movs	r1, #190	@ 0xbe
 80006b4:	2046      	movs	r0, #70	@ 0x46
 80006b6:	f000 fe35 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(85,190,'R');
 80006ba:	2252      	movs	r2, #82	@ 0x52
 80006bc:	21be      	movs	r1, #190	@ 0xbe
 80006be:	2055      	movs	r0, #85	@ 0x55
 80006c0:	f000 fe30 	bl	8001324 <LCD_DisplayChar>
    

    LCD_DisplayChar(115,190,'2');
 80006c4:	2232      	movs	r2, #50	@ 0x32
 80006c6:	21be      	movs	r1, #190	@ 0xbe
 80006c8:	2073      	movs	r0, #115	@ 0x73
 80006ca:	f000 fe2b 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(135,190,'P');
 80006ce:	2250      	movs	r2, #80	@ 0x50
 80006d0:	21be      	movs	r1, #190	@ 0xbe
 80006d2:	2087      	movs	r0, #135	@ 0x87
 80006d4:	f000 fe26 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(145,190,'L');
 80006d8:	224c      	movs	r2, #76	@ 0x4c
 80006da:	21be      	movs	r1, #190	@ 0xbe
 80006dc:	2091      	movs	r0, #145	@ 0x91
 80006de:	f000 fe21 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(155,190,'A');
 80006e2:	2241      	movs	r2, #65	@ 0x41
 80006e4:	21be      	movs	r1, #190	@ 0xbe
 80006e6:	209b      	movs	r0, #155	@ 0x9b
 80006e8:	f000 fe1c 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(170,190,'Y');
 80006ec:	2259      	movs	r2, #89	@ 0x59
 80006ee:	21be      	movs	r1, #190	@ 0xbe
 80006f0:	20aa      	movs	r0, #170	@ 0xaa
 80006f2:	f000 fe17 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(185,190,'E');
 80006f6:	2245      	movs	r2, #69	@ 0x45
 80006f8:	21be      	movs	r1, #190	@ 0xbe
 80006fa:	20b9      	movs	r0, #185	@ 0xb9
 80006fc:	f000 fe12 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(200,190,'R');
 8000700:	2252      	movs	r2, #82	@ 0x52
 8000702:	21be      	movs	r1, #190	@ 0xbe
 8000704:	20c8      	movs	r0, #200	@ 0xc8
 8000706:	f000 fe0d 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(215,190,'S');
 800070a:	2253      	movs	r2, #83	@ 0x53
 800070c:	21be      	movs	r1, #190	@ 0xbe
 800070e:	20d7      	movs	r0, #215	@ 0xd7
 8000710:	f000 fe08 	bl	8001324 <LCD_DisplayChar>
    
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200000d0 	.word	0x200000d0
 800071c:	20000004 	.word	0x20000004

08000720 <endScreen>:

void endScreen(char winner) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
    touchData.orientation = STMPE811_Orientation_Portrait_2;
 800072a:	4b4f      	ldr	r3, [pc, #316]	@ (8000868 <endScreen+0x148>)
 800072c:	2201      	movs	r2, #1
 800072e:	719a      	strb	r2, [r3, #6]
    LCD_Clear(0, LCD_COLOR_BLUE);
 8000730:	211f      	movs	r1, #31
 8000732:	2000      	movs	r0, #0
 8000734:	f000 fd46 	bl	80011c4 <LCD_Clear>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000738:	2000      	movs	r0, #0
 800073a:	f000 fd65 	bl	8001208 <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 800073e:	484b      	ldr	r0, [pc, #300]	@ (800086c <endScreen+0x14c>)
 8000740:	f000 fd72 	bl	8001228 <LCD_SetFont>


    LCD_DisplayChar(60,140,'G');
 8000744:	2247      	movs	r2, #71	@ 0x47
 8000746:	218c      	movs	r1, #140	@ 0x8c
 8000748:	203c      	movs	r0, #60	@ 0x3c
 800074a:	f000 fdeb 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(75,140,'A');
 800074e:	2241      	movs	r2, #65	@ 0x41
 8000750:	218c      	movs	r1, #140	@ 0x8c
 8000752:	204b      	movs	r0, #75	@ 0x4b
 8000754:	f000 fde6 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(90,140,'M');
 8000758:	224d      	movs	r2, #77	@ 0x4d
 800075a:	218c      	movs	r1, #140	@ 0x8c
 800075c:	205a      	movs	r0, #90	@ 0x5a
 800075e:	f000 fde1 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(105,140,'E');
 8000762:	2245      	movs	r2, #69	@ 0x45
 8000764:	218c      	movs	r1, #140	@ 0x8c
 8000766:	2069      	movs	r0, #105	@ 0x69
 8000768:	f000 fddc 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(135,140,'O');
 800076c:	224f      	movs	r2, #79	@ 0x4f
 800076e:	218c      	movs	r1, #140	@ 0x8c
 8000770:	2087      	movs	r0, #135	@ 0x87
 8000772:	f000 fdd7 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(150,140,'V');
 8000776:	2256      	movs	r2, #86	@ 0x56
 8000778:	218c      	movs	r1, #140	@ 0x8c
 800077a:	2096      	movs	r0, #150	@ 0x96
 800077c:	f000 fdd2 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(165,140,'E');
 8000780:	2245      	movs	r2, #69	@ 0x45
 8000782:	218c      	movs	r1, #140	@ 0x8c
 8000784:	20a5      	movs	r0, #165	@ 0xa5
 8000786:	f000 fdcd 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(180,140,'R');
 800078a:	2252      	movs	r2, #82	@ 0x52
 800078c:	218c      	movs	r1, #140	@ 0x8c
 800078e:	20b4      	movs	r0, #180	@ 0xb4
 8000790:	f000 fdc8 	bl	8001324 <LCD_DisplayChar>

  
    if (winner == 'X') {
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	2b58      	cmp	r3, #88	@ 0x58
 8000798:	d11f      	bne.n	80007da <endScreen+0xba>
   
        const char *msg = "PLAYER 1 WINS";
 800079a:	4b35      	ldr	r3, [pc, #212]	@ (8000870 <endScreen+0x150>)
 800079c:	60bb      	str	r3, [r7, #8]
        for (int i = 0; msg[i]; ++i) {
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
 80007a2:	e013      	b.n	80007cc <endScreen+0xac>
            LCD_DisplayChar(50 + 12*i, 180, msg[i]);
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	461a      	mov	r2, r3
 80007aa:	0052      	lsls	r2, r2, #1
 80007ac:	4413      	add	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	3332      	adds	r3, #50	@ 0x32
 80007b4:	b298      	uxth	r0, r3
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	68ba      	ldr	r2, [r7, #8]
 80007ba:	4413      	add	r3, r2
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	461a      	mov	r2, r3
 80007c0:	21b4      	movs	r1, #180	@ 0xb4
 80007c2:	f000 fdaf 	bl	8001324 <LCD_DisplayChar>
        for (int i = 0; msg[i]; ++i) {
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3301      	adds	r3, #1
 80007ca:	61fb      	str	r3, [r7, #28]
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	68ba      	ldr	r2, [r7, #8]
 80007d0:	4413      	add	r3, r2
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d1e5      	bne.n	80007a4 <endScreen+0x84>
        const char *msg = "TIE GAME";
        for (int i = 0; msg[i]; ++i) {
            LCD_DisplayChar(70 + 12*i, 180, msg[i]);
        }
    }
}
 80007d8:	e041      	b.n	800085e <endScreen+0x13e>
    else if (winner == 'O') {
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b4f      	cmp	r3, #79	@ 0x4f
 80007de:	d11f      	bne.n	8000820 <endScreen+0x100>
        const char *msg = "PLAYER 2 WINS";
 80007e0:	4b24      	ldr	r3, [pc, #144]	@ (8000874 <endScreen+0x154>)
 80007e2:	60fb      	str	r3, [r7, #12]
        for (int i = 0; msg[i]; ++i) {
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
 80007e8:	e013      	b.n	8000812 <endScreen+0xf2>
            LCD_DisplayChar(50 + 12*i, 180, msg[i]);
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	461a      	mov	r2, r3
 80007f0:	0052      	lsls	r2, r2, #1
 80007f2:	4413      	add	r3, r2
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	3332      	adds	r3, #50	@ 0x32
 80007fa:	b298      	uxth	r0, r3
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	4413      	add	r3, r2
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	21b4      	movs	r1, #180	@ 0xb4
 8000808:	f000 fd8c 	bl	8001324 <LCD_DisplayChar>
        for (int i = 0; msg[i]; ++i) {
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	3301      	adds	r3, #1
 8000810:	61bb      	str	r3, [r7, #24]
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	4413      	add	r3, r2
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1e5      	bne.n	80007ea <endScreen+0xca>
}
 800081e:	e01e      	b.n	800085e <endScreen+0x13e>
        const char *msg = "TIE GAME";
 8000820:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <endScreen+0x158>)
 8000822:	613b      	str	r3, [r7, #16]
        for (int i = 0; msg[i]; ++i) {
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	e013      	b.n	8000852 <endScreen+0x132>
            LCD_DisplayChar(70 + 12*i, 180, msg[i]);
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	b29b      	uxth	r3, r3
 800082e:	461a      	mov	r2, r3
 8000830:	0052      	lsls	r2, r2, #1
 8000832:	4413      	add	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	b29b      	uxth	r3, r3
 8000838:	3346      	adds	r3, #70	@ 0x46
 800083a:	b298      	uxth	r0, r3
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	4413      	add	r3, r2
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	21b4      	movs	r1, #180	@ 0xb4
 8000848:	f000 fd6c 	bl	8001324 <LCD_DisplayChar>
        for (int i = 0; msg[i]; ++i) {
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	3301      	adds	r3, #1
 8000850:	617b      	str	r3, [r7, #20]
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	4413      	add	r3, r2
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d1e5      	bne.n	800082a <endScreen+0x10a>
}
 800085e:	bf00      	nop
 8000860:	3720      	adds	r7, #32
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000d0 	.word	0x200000d0
 800086c:	20000004 	.word	0x20000004
 8000870:	08006f0c 	.word	0x08006f0c
 8000874:	08006f1c 	.word	0x08006f1c
 8000878:	08006f2c 	.word	0x08006f2c

0800087c <initBoard>:


void initBoard(void) {
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
    for (int r = 0; r < ROWS; r++) {
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	e015      	b.n	80008b4 <initBoard+0x38>
        for (int c = 0; c < COLS; c++) {
 8000888:	2300      	movs	r3, #0
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	e00c      	b.n	80008a8 <initBoard+0x2c>
            board[r][c] = ' ';
 800088e:	490e      	ldr	r1, [pc, #56]	@ (80008c8 <initBoard+0x4c>)
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	4613      	mov	r3, r2
 8000894:	00db      	lsls	r3, r3, #3
 8000896:	1a9b      	subs	r3, r3, r2
 8000898:	18ca      	adds	r2, r1, r3
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	4413      	add	r3, r2
 800089e:	2220      	movs	r2, #32
 80008a0:	701a      	strb	r2, [r3, #0]
        for (int c = 0; c < COLS; c++) {
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	2b06      	cmp	r3, #6
 80008ac:	ddef      	ble.n	800088e <initBoard+0x12>
    for (int r = 0; r < ROWS; r++) {
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3301      	adds	r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b05      	cmp	r3, #5
 80008b8:	dde6      	ble.n	8000888 <initBoard+0xc>
        }
    }
}
 80008ba:	bf00      	nop
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	200000a4 	.word	0x200000a4

080008cc <GameScreen_Init>:


void GameScreen_Init(void) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0

    LCD_Clear(0, BOARD_BG_COLOR);
 80008d2:	211f      	movs	r1, #31
 80008d4:	2000      	movs	r0, #0
 80008d6:	f000 fc75 	bl	80011c4 <LCD_Clear>
    for (int r = 0; r < ROWS; r++) {
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	e021      	b.n	8000924 <GameScreen_Init+0x58>
        for (int c = 0; c < COLS; c++) {
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	e018      	b.n	8000918 <GameScreen_Init+0x4c>
            uint16_t x = ORIGIN_X + c * CELL_SPACING_X;
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	015b      	lsls	r3, r3, #5
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	3314      	adds	r3, #20
 80008f0:	80fb      	strh	r3, [r7, #6]
            uint16_t y = ORIGIN_Y + r * CELL_SPACING_Y;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	461a      	mov	r2, r3
 80008f8:	0092      	lsls	r2, r2, #2
 80008fa:	4413      	add	r3, r2
 80008fc:	00db      	lsls	r3, r3, #3
 80008fe:	b29b      	uxth	r3, r3
 8000900:	333c      	adds	r3, #60	@ 0x3c
 8000902:	80bb      	strh	r3, [r7, #4]
            LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, EMPTY_HOLE_COLOR);
 8000904:	88b9      	ldrh	r1, [r7, #4]
 8000906:	88f8      	ldrh	r0, [r7, #6]
 8000908:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800090c:	220d      	movs	r2, #13
 800090e:	f000 fc05 	bl	800111c <LCD_Draw_Circle_Fill>
        for (int c = 0; c < COLS; c++) {
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	3301      	adds	r3, #1
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	2b06      	cmp	r3, #6
 800091c:	dde3      	ble.n	80008e6 <GameScreen_Init+0x1a>
    for (int r = 0; r < ROWS; r++) {
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	3301      	adds	r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b05      	cmp	r3, #5
 8000928:	ddda      	ble.n	80008e0 <GameScreen_Init+0x14>
        }
    }
}
 800092a:	bf00      	nop
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <PollTouchColumn>:
        }
    }
}


static int PollTouchColumn(char currentPlayer) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
    while (1) {
        if (returnTouchStateAndLocation(&touchData) == STMPE811_State_Pressed) {
 800093e:	4834      	ldr	r0, [pc, #208]	@ (8000a10 <PollTouchColumn+0xdc>)
 8000940:	f000 fd23 	bl	800138a <returnTouchStateAndLocation>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d159      	bne.n	80009fe <PollTouchColumn+0xca>
            //DetermineTouchPosition(&touchData);
            int tx = touchData.x;
 800094a:	4b31      	ldr	r3, [pc, #196]	@ (8000a10 <PollTouchColumn+0xdc>)
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	617b      	str	r3, [r7, #20]


            if (tx >= ORIGIN_X - CELL_SPACING_X/2 &&
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	2b03      	cmp	r3, #3
 8000954:	d953      	bls.n	80009fe <PollTouchColumn+0xca>
                tx <= ORIGIN_X + (COLS-1)*CELL_SPACING_X + CELL_SPACING_X/2) {
 8000956:	697b      	ldr	r3, [r7, #20]
            if (tx >= ORIGIN_X - CELL_SPACING_X/2 &&
 8000958:	2be4      	cmp	r3, #228	@ 0xe4
 800095a:	d850      	bhi.n	80009fe <PollTouchColumn+0xca>

                int col = (tx - (ORIGIN_X - CELL_SPACING_X/2)) / CELL_SPACING_X;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	3b04      	subs	r3, #4
 8000960:	095b      	lsrs	r3, r3, #5
 8000962:	613b      	str	r3, [r7, #16]
                if (col >= 0 && col < COLS) {
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	2b00      	cmp	r3, #0
 8000968:	db49      	blt.n	80009fe <PollTouchColumn+0xca>
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	2b06      	cmp	r3, #6
 800096e:	dc46      	bgt.n	80009fe <PollTouchColumn+0xca>

                    int rowIndex = -1;
 8000970:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000974:	61fb      	str	r3, [r7, #28]
                    for (int r = ROWS - 1; r >= 0; r--) {
 8000976:	2305      	movs	r3, #5
 8000978:	61bb      	str	r3, [r7, #24]
 800097a:	e01a      	b.n	80009b2 <PollTouchColumn+0x7e>
                        if (board[r][col] == ' ') {
 800097c:	4925      	ldr	r1, [pc, #148]	@ (8000a14 <PollTouchColumn+0xe0>)
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	4613      	mov	r3, r2
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	1a9b      	subs	r3, r3, r2
 8000986:	18ca      	adds	r2, r1, r3
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	4413      	add	r3, r2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b20      	cmp	r3, #32
 8000990:	d10c      	bne.n	80009ac <PollTouchColumn+0x78>
                            rowIndex = r;
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	61fb      	str	r3, [r7, #28]
                            board[r][col] = currentPlayer;
 8000996:	491f      	ldr	r1, [pc, #124]	@ (8000a14 <PollTouchColumn+0xe0>)
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	4613      	mov	r3, r2
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	1a9b      	subs	r3, r3, r2
 80009a0:	18ca      	adds	r2, r1, r3
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	4413      	add	r3, r2
 80009a6:	79fa      	ldrb	r2, [r7, #7]
 80009a8:	701a      	strb	r2, [r3, #0]
                            break;
 80009aa:	e005      	b.n	80009b8 <PollTouchColumn+0x84>
                    for (int r = ROWS - 1; r >= 0; r--) {
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	61bb      	str	r3, [r7, #24]
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	dae1      	bge.n	800097c <PollTouchColumn+0x48>
                        }
                    }
                    if (rowIndex != -1) {
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80009be:	d01e      	beq.n	80009fe <PollTouchColumn+0xca>

                        uint16_t color = (currentPlayer == 'X')
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	2b58      	cmp	r3, #88	@ 0x58
 80009c4:	d102      	bne.n	80009cc <PollTouchColumn+0x98>
 80009c6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80009ca:	e000      	b.n	80009ce <PollTouchColumn+0x9a>
 80009cc:	2300      	movs	r3, #0
 80009ce:	81fb      	strh	r3, [r7, #14]
                            ? LCD_COLOR_RED
                            : LCD_COLOR_BLACK;

                        uint16_t x = ORIGIN_X + col * CELL_SPACING_X;
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	015b      	lsls	r3, r3, #5
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	3314      	adds	r3, #20
 80009da:	81bb      	strh	r3, [r7, #12]
                        uint16_t y = ORIGIN_Y + rowIndex * CELL_SPACING_Y;
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	461a      	mov	r2, r3
 80009e2:	0092      	lsls	r2, r2, #2
 80009e4:	4413      	add	r3, r2
 80009e6:	00db      	lsls	r3, r3, #3
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	333c      	adds	r3, #60	@ 0x3c
 80009ec:	817b      	strh	r3, [r7, #10]

                        LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, color);
 80009ee:	89fb      	ldrh	r3, [r7, #14]
 80009f0:	8979      	ldrh	r1, [r7, #10]
 80009f2:	89b8      	ldrh	r0, [r7, #12]
 80009f4:	220d      	movs	r2, #13
 80009f6:	f000 fb91 	bl	800111c <LCD_Draw_Circle_Fill>
                        return col;
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	e003      	b.n	8000a06 <PollTouchColumn+0xd2>
                    }
                }
            }
        }
        HAL_Delay(200);
 80009fe:	20c8      	movs	r0, #200	@ 0xc8
 8000a00:	f002 f9e6 	bl	8002dd0 <HAL_Delay>
        if (returnTouchStateAndLocation(&touchData) == STMPE811_State_Pressed) {
 8000a04:	e79b      	b.n	800093e <PollTouchColumn+0xa>
    }
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3720      	adds	r7, #32
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000d0 	.word	0x200000d0
 8000a14:	200000a4 	.word	0x200000a4

08000a18 <checkDirection>:
        }
    }
    return -1;
}

int checkDirection(int startR, int startC, int dR, int dC, char piece) {
 8000a18:	b480      	push	{r7}
 8000a1a:	b089      	sub	sp, #36	@ 0x24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
 8000a24:	603b      	str	r3, [r7, #0]
    for (int i = 1; i < 4; i++) {
 8000a26:	2301      	movs	r3, #1
 8000a28:	61fb      	str	r3, [r7, #28]
 8000a2a:	e02b      	b.n	8000a84 <checkDirection+0x6c>
        int rr = startR + dR * i;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	69fa      	ldr	r2, [r7, #28]
 8000a30:	fb02 f303 	mul.w	r3, r2, r3
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	61bb      	str	r3, [r7, #24]
        int cc = startC + dC * i;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	69fa      	ldr	r2, [r7, #28]
 8000a3e:	fb02 f303 	mul.w	r3, r2, r3
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	4413      	add	r3, r2
 8000a46:	617b      	str	r3, [r7, #20]
        if (rr < 0 || rr >= ROWS || cc < 0 || cc >= COLS || board[rr][cc] != piece)
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	db15      	blt.n	8000a7a <checkDirection+0x62>
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	2b05      	cmp	r3, #5
 8000a52:	dc12      	bgt.n	8000a7a <checkDirection+0x62>
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	db0f      	blt.n	8000a7a <checkDirection+0x62>
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	2b06      	cmp	r3, #6
 8000a5e:	dc0c      	bgt.n	8000a7a <checkDirection+0x62>
 8000a60:	490d      	ldr	r1, [pc, #52]	@ (8000a98 <checkDirection+0x80>)
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	4613      	mov	r3, r2
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	1a9b      	subs	r3, r3, r2
 8000a6a:	18ca      	adds	r2, r1, r3
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	4413      	add	r3, r2
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d001      	beq.n	8000a7e <checkDirection+0x66>
            return 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e006      	b.n	8000a8c <checkDirection+0x74>
    for (int i = 1; i < 4; i++) {
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3301      	adds	r3, #1
 8000a82:	61fb      	str	r3, [r7, #28]
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	ddd0      	ble.n	8000a2c <checkDirection+0x14>
    }
    return 1;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3724      	adds	r7, #36	@ 0x24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	200000a4 	.word	0x200000a4

08000a9c <checkWin>:

int checkWin(char piece) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af02      	add	r7, sp, #8
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
    for (int r = 0; r < ROWS; r++) {
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	e047      	b.n	8000b3c <checkWin+0xa0>
        for (int c = 0; c < COLS; c++) {
 8000aac:	2300      	movs	r3, #0
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	e03e      	b.n	8000b30 <checkWin+0x94>
            if (board[r][c] != piece) continue;
 8000ab2:	4926      	ldr	r1, [pc, #152]	@ (8000b4c <checkWin+0xb0>)
 8000ab4:	68fa      	ldr	r2, [r7, #12]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	1a9b      	subs	r3, r3, r2
 8000abc:	18ca      	adds	r2, r1, r3
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	79fa      	ldrb	r2, [r7, #7]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d12e      	bne.n	8000b28 <checkWin+0x8c>
            if (checkDirection(r, c, 0, 1, piece)  ||
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	2301      	movs	r3, #1
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	68b9      	ldr	r1, [r7, #8]
 8000ad4:	68f8      	ldr	r0, [r7, #12]
 8000ad6:	f7ff ff9f 	bl	8000a18 <checkDirection>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d121      	bne.n	8000b24 <checkWin+0x88>
                checkDirection(r, c, 1, 0, piece)  ||
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	68b9      	ldr	r1, [r7, #8]
 8000aea:	68f8      	ldr	r0, [r7, #12]
 8000aec:	f7ff ff94 	bl	8000a18 <checkDirection>
 8000af0:	4603      	mov	r3, r0
            if (checkDirection(r, c, 0, 1, piece)  ||
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d116      	bne.n	8000b24 <checkWin+0x88>
                checkDirection(r, c, 1, 1, piece)  ||
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2301      	movs	r3, #1
 8000afc:	2201      	movs	r2, #1
 8000afe:	68b9      	ldr	r1, [r7, #8]
 8000b00:	68f8      	ldr	r0, [r7, #12]
 8000b02:	f7ff ff89 	bl	8000a18 <checkDirection>
 8000b06:	4603      	mov	r3, r0
                checkDirection(r, c, 1, 0, piece)  ||
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d10b      	bne.n	8000b24 <checkWin+0x88>
                checkDirection(r, c, -1, 1, piece)) {
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2301      	movs	r3, #1
 8000b12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b16:	68b9      	ldr	r1, [r7, #8]
 8000b18:	68f8      	ldr	r0, [r7, #12]
 8000b1a:	f7ff ff7d 	bl	8000a18 <checkDirection>
 8000b1e:	4603      	mov	r3, r0
                checkDirection(r, c, 1, 1, piece)  ||
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <checkWin+0x8e>
                return 1;
 8000b24:	2301      	movs	r3, #1
 8000b26:	e00d      	b.n	8000b44 <checkWin+0xa8>
            if (board[r][c] != piece) continue;
 8000b28:	bf00      	nop
        for (int c = 0; c < COLS; c++) {
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	2b06      	cmp	r3, #6
 8000b34:	ddbd      	ble.n	8000ab2 <checkWin+0x16>
    for (int r = 0; r < ROWS; r++) {
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	2b05      	cmp	r3, #5
 8000b40:	ddb4      	ble.n	8000aac <checkWin+0x10>
            }
        }
    }
    return 0;
 8000b42:	2300      	movs	r3, #0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200000a4 	.word	0x200000a4

08000b50 <isBoardFull>:

int isBoardFull(void) {
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
    for (int r = 0; r < ROWS; r++) {
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	e018      	b.n	8000b8e <isBoardFull+0x3e>
        for (int c = 0; c < COLS; c++) {
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	e00f      	b.n	8000b82 <isBoardFull+0x32>
            if (board[r][c] == ' ') return 0;
 8000b62:	4910      	ldr	r1, [pc, #64]	@ (8000ba4 <isBoardFull+0x54>)
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	1a9b      	subs	r3, r3, r2
 8000b6c:	18ca      	adds	r2, r1, r3
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	4413      	add	r3, r2
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b20      	cmp	r3, #32
 8000b76:	d101      	bne.n	8000b7c <isBoardFull+0x2c>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e00c      	b.n	8000b96 <isBoardFull+0x46>
        for (int c = 0; c < COLS; c++) {
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	2b06      	cmp	r3, #6
 8000b86:	ddec      	ble.n	8000b62 <isBoardFull+0x12>
    for (int r = 0; r < ROWS; r++) {
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b05      	cmp	r3, #5
 8000b92:	dde3      	ble.n	8000b5c <isBoardFull+0xc>
        }
    }
    return 1;
 8000b94:	2301      	movs	r3, #1
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200000a4 	.word	0x200000a4

08000ba8 <PlayOnePlayer>:

enum {
    HUMAN = 'X', BOT = 'O'
};

void PlayOnePlayer(void) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
    initBoard();
 8000bae:	f7ff fe65 	bl	800087c <initBoard>
    GameScreen_Init();
 8000bb2:	f7ff fe8b 	bl	80008cc <GameScreen_Init>

    LCD_SetTextColor(LCD_COLOR_WHITE);
 8000bb6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000bba:	f000 fb25 	bl	8001208 <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 8000bbe:	485a      	ldr	r0, [pc, #360]	@ (8000d28 <PlayOnePlayer+0x180>)
 8000bc0:	f000 fb32 	bl	8001228 <LCD_SetFont>
    LCD_DisplayChar(20,20,'S');
 8000bc4:	2253      	movs	r2, #83	@ 0x53
 8000bc6:	2114      	movs	r1, #20
 8000bc8:	2014      	movs	r0, #20
 8000bca:	f000 fbab 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(35,20,'I');
 8000bce:	2249      	movs	r2, #73	@ 0x49
 8000bd0:	2114      	movs	r1, #20
 8000bd2:	2023      	movs	r0, #35	@ 0x23
 8000bd4:	f000 fba6 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(50,20,'N');
 8000bd8:	224e      	movs	r2, #78	@ 0x4e
 8000bda:	2114      	movs	r1, #20
 8000bdc:	2032      	movs	r0, #50	@ 0x32
 8000bde:	f000 fba1 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(65,20,'G');
 8000be2:	2247      	movs	r2, #71	@ 0x47
 8000be4:	2114      	movs	r1, #20
 8000be6:	2041      	movs	r0, #65	@ 0x41
 8000be8:	f000 fb9c 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(80,20,'L');
 8000bec:	224c      	movs	r2, #76	@ 0x4c
 8000bee:	2114      	movs	r1, #20
 8000bf0:	2050      	movs	r0, #80	@ 0x50
 8000bf2:	f000 fb97 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(95,20,'E');
 8000bf6:	2245      	movs	r2, #69	@ 0x45
 8000bf8:	2114      	movs	r1, #20
 8000bfa:	205f      	movs	r0, #95	@ 0x5f
 8000bfc:	f000 fb92 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(125,20,'P');
 8000c00:	2250      	movs	r2, #80	@ 0x50
 8000c02:	2114      	movs	r1, #20
 8000c04:	207d      	movs	r0, #125	@ 0x7d
 8000c06:	f000 fb8d 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(140,20,'L');
 8000c0a:	224c      	movs	r2, #76	@ 0x4c
 8000c0c:	2114      	movs	r1, #20
 8000c0e:	208c      	movs	r0, #140	@ 0x8c
 8000c10:	f000 fb88 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(155,20,'A');
 8000c14:	2241      	movs	r2, #65	@ 0x41
 8000c16:	2114      	movs	r1, #20
 8000c18:	209b      	movs	r0, #155	@ 0x9b
 8000c1a:	f000 fb83 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(170,20,'Y');
 8000c1e:	2259      	movs	r2, #89	@ 0x59
 8000c20:	2114      	movs	r1, #20
 8000c22:	20aa      	movs	r0, #170	@ 0xaa
 8000c24:	f000 fb7e 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(185,20,'E');
 8000c28:	2245      	movs	r2, #69	@ 0x45
 8000c2a:	2114      	movs	r1, #20
 8000c2c:	20b9      	movs	r0, #185	@ 0xb9
 8000c2e:	f000 fb79 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(200,20,'R');
 8000c32:	2252      	movs	r2, #82	@ 0x52
 8000c34:	2114      	movs	r1, #20
 8000c36:	20c8      	movs	r0, #200	@ 0xc8
 8000c38:	f000 fb74 	bl	8001324 <LCD_DisplayChar>

    char current = HUMAN;
 8000c3c:	2358      	movs	r3, #88	@ 0x58
 8000c3e:	75fb      	strb	r3, [r7, #23]
    while (1) {
        int col;
        if (current == HUMAN) {
 8000c40:	7dfb      	ldrb	r3, [r7, #23]
 8000c42:	2b58      	cmp	r3, #88	@ 0x58
 8000c44:	d107      	bne.n	8000c56 <PlayOnePlayer+0xae>
            col = PollTouchColumn(HUMAN);
 8000c46:	2058      	movs	r0, #88	@ 0x58
 8000c48:	f7ff fe74 	bl	8000934 <PollTouchColumn>
 8000c4c:	60f8      	str	r0, [r7, #12]
            HAL_Delay(200);
 8000c4e:	20c8      	movs	r0, #200	@ 0xc8
 8000c50:	f002 f8be 	bl	8002dd0 <HAL_Delay>
 8000c54:	e050      	b.n	8000cf8 <PlayOnePlayer+0x150>
        } else {

        	HAL_Delay(2000);
 8000c56:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c5a:	f002 f8b9 	bl	8002dd0 <HAL_Delay>
            
            uint32_t rnd;
            do {
                HAL_RNG_GenerateRandomNumber(&hrng, &rnd);
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	4619      	mov	r1, r3
 8000c62:	4832      	ldr	r0, [pc, #200]	@ (8000d2c <PlayOnePlayer+0x184>)
 8000c64:	f004 fe44 	bl	80058f0 <HAL_RNG_GenerateRandomNumber>
                col = rnd % COLS;
 8000c68:	6879      	ldr	r1, [r7, #4]
 8000c6a:	4b31      	ldr	r3, [pc, #196]	@ (8000d30 <PlayOnePlayer+0x188>)
 8000c6c:	fba3 2301 	umull	r2, r3, r3, r1
 8000c70:	1aca      	subs	r2, r1, r3
 8000c72:	0852      	lsrs	r2, r2, #1
 8000c74:	4413      	add	r3, r2
 8000c76:	089a      	lsrs	r2, r3, #2
 8000c78:	4613      	mov	r3, r2
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	1a9b      	subs	r3, r3, r2
 8000c7e:	1aca      	subs	r2, r1, r3
 8000c80:	60fa      	str	r2, [r7, #12]
            } while (board[0][col] != ' ');
 8000c82:	4a2c      	ldr	r2, [pc, #176]	@ (8000d34 <PlayOnePlayer+0x18c>)
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4413      	add	r3, r2
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b20      	cmp	r3, #32
 8000c8c:	d1e7      	bne.n	8000c5e <PlayOnePlayer+0xb6>
          
            for (int r = ROWS - 1; r >= 0; r--) {
 8000c8e:	2305      	movs	r3, #5
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	e02e      	b.n	8000cf2 <PlayOnePlayer+0x14a>
                if (board[r][col] == ' ') {
 8000c94:	4927      	ldr	r1, [pc, #156]	@ (8000d34 <PlayOnePlayer+0x18c>)
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	1a9b      	subs	r3, r3, r2
 8000c9e:	18ca      	adds	r2, r1, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b20      	cmp	r3, #32
 8000ca8:	d120      	bne.n	8000cec <PlayOnePlayer+0x144>
                    board[r][col] = BOT;
 8000caa:	4922      	ldr	r1, [pc, #136]	@ (8000d34 <PlayOnePlayer+0x18c>)
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	1a9b      	subs	r3, r3, r2
 8000cb4:	18ca      	adds	r2, r1, r3
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4413      	add	r3, r2
 8000cba:	224f      	movs	r2, #79	@ 0x4f
 8000cbc:	701a      	strb	r2, [r3, #0]
                    uint16_t x = ORIGIN_X + col * CELL_SPACING_X;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	015b      	lsls	r3, r3, #5
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	3314      	adds	r3, #20
 8000cc8:	817b      	strh	r3, [r7, #10]
                    uint16_t y = ORIGIN_Y + r * CELL_SPACING_Y;
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	461a      	mov	r2, r3
 8000cd0:	0092      	lsls	r2, r2, #2
 8000cd2:	4413      	add	r3, r2
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	333c      	adds	r3, #60	@ 0x3c
 8000cda:	813b      	strh	r3, [r7, #8]
                    LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, PLAYER2_COLOR);
 8000cdc:	8939      	ldrh	r1, [r7, #8]
 8000cde:	8978      	ldrh	r0, [r7, #10]
 8000ce0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000ce4:	220d      	movs	r2, #13
 8000ce6:	f000 fa19 	bl	800111c <LCD_Draw_Circle_Fill>
                    break;
 8000cea:	e005      	b.n	8000cf8 <PlayOnePlayer+0x150>
            for (int r = ROWS - 1; r >= 0; r--) {
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	dacd      	bge.n	8000c94 <PlayOnePlayer+0xec>
                }
            }
        }
        if (checkWin(current) || isBoardFull()) break;
 8000cf8:	7dfb      	ldrb	r3, [r7, #23]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fece 	bl	8000a9c <checkWin>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d10c      	bne.n	8000d20 <PlayOnePlayer+0x178>
 8000d06:	f7ff ff23 	bl	8000b50 <isBoardFull>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d107      	bne.n	8000d20 <PlayOnePlayer+0x178>
        current = (current == HUMAN) ? BOT : HUMAN;
 8000d10:	7dfb      	ldrb	r3, [r7, #23]
 8000d12:	2b58      	cmp	r3, #88	@ 0x58
 8000d14:	d101      	bne.n	8000d1a <PlayOnePlayer+0x172>
 8000d16:	234f      	movs	r3, #79	@ 0x4f
 8000d18:	e000      	b.n	8000d1c <PlayOnePlayer+0x174>
 8000d1a:	2358      	movs	r3, #88	@ 0x58
 8000d1c:	75fb      	strb	r3, [r7, #23]
    while (1) {
 8000d1e:	e78f      	b.n	8000c40 <PlayOnePlayer+0x98>
    }
}
 8000d20:	bf00      	nop
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000004 	.word	0x20000004
 8000d2c:	20025b0c 	.word	0x20025b0c
 8000d30:	24924925 	.word	0x24924925
 8000d34:	200000a4 	.word	0x200000a4

08000d38 <PlayTwoPlayer>:



void PlayTwoPlayer(void) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
    initBoard();
 8000d3e:	f7ff fd9d 	bl	800087c <initBoard>
    GameScreen_Init();
 8000d42:	f7ff fdc3 	bl	80008cc <GameScreen_Init>

    LCD_SetTextColor(LCD_COLOR_WHITE);
 8000d46:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000d4a:	f000 fa5d 	bl	8001208 <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 8000d4e:	4830      	ldr	r0, [pc, #192]	@ (8000e10 <PlayTwoPlayer+0xd8>)
 8000d50:	f000 fa6a 	bl	8001228 <LCD_SetFont>
    LCD_DisplayChar(20,20,'2');
 8000d54:	2232      	movs	r2, #50	@ 0x32
 8000d56:	2114      	movs	r1, #20
 8000d58:	2014      	movs	r0, #20
 8000d5a:	f000 fae3 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(35,20,'-');
 8000d5e:	222d      	movs	r2, #45	@ 0x2d
 8000d60:	2114      	movs	r1, #20
 8000d62:	2023      	movs	r0, #35	@ 0x23
 8000d64:	f000 fade 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(50,20,'P');
 8000d68:	2250      	movs	r2, #80	@ 0x50
 8000d6a:	2114      	movs	r1, #20
 8000d6c:	2032      	movs	r0, #50	@ 0x32
 8000d6e:	f000 fad9 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(65,20,'L');
 8000d72:	224c      	movs	r2, #76	@ 0x4c
 8000d74:	2114      	movs	r1, #20
 8000d76:	2041      	movs	r0, #65	@ 0x41
 8000d78:	f000 fad4 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(80,20,'A');
 8000d7c:	2241      	movs	r2, #65	@ 0x41
 8000d7e:	2114      	movs	r1, #20
 8000d80:	2050      	movs	r0, #80	@ 0x50
 8000d82:	f000 facf 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(95,20,'Y');
 8000d86:	2259      	movs	r2, #89	@ 0x59
 8000d88:	2114      	movs	r1, #20
 8000d8a:	205f      	movs	r0, #95	@ 0x5f
 8000d8c:	f000 faca 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(110,20,'E');
 8000d90:	2245      	movs	r2, #69	@ 0x45
 8000d92:	2114      	movs	r1, #20
 8000d94:	206e      	movs	r0, #110	@ 0x6e
 8000d96:	f000 fac5 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(125,20,'R');
 8000d9a:	2252      	movs	r2, #82	@ 0x52
 8000d9c:	2114      	movs	r1, #20
 8000d9e:	207d      	movs	r0, #125	@ 0x7d
 8000da0:	f000 fac0 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(155,20,'M');
 8000da4:	224d      	movs	r2, #77	@ 0x4d
 8000da6:	2114      	movs	r1, #20
 8000da8:	209b      	movs	r0, #155	@ 0x9b
 8000daa:	f000 fabb 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(170,20,'O');
 8000dae:	224f      	movs	r2, #79	@ 0x4f
 8000db0:	2114      	movs	r1, #20
 8000db2:	20aa      	movs	r0, #170	@ 0xaa
 8000db4:	f000 fab6 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(185,20,'D');
 8000db8:	2244      	movs	r2, #68	@ 0x44
 8000dba:	2114      	movs	r1, #20
 8000dbc:	20b9      	movs	r0, #185	@ 0xb9
 8000dbe:	f000 fab1 	bl	8001324 <LCD_DisplayChar>
    LCD_DisplayChar(200,20,'E');
 8000dc2:	2245      	movs	r2, #69	@ 0x45
 8000dc4:	2114      	movs	r1, #20
 8000dc6:	20c8      	movs	r0, #200	@ 0xc8
 8000dc8:	f000 faac 	bl	8001324 <LCD_DisplayChar>

    char current = HUMAN;
 8000dcc:	2358      	movs	r3, #88	@ 0x58
 8000dce:	71fb      	strb	r3, [r7, #7]
    while (1) {
      
        PollTouchColumn(current);
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fdae 	bl	8000934 <PollTouchColumn>
        HAL_Delay(200);
 8000dd8:	20c8      	movs	r0, #200	@ 0xc8
 8000dda:	f001 fff9 	bl	8002dd0 <HAL_Delay>
        if (checkWin(current) || isBoardFull()) break;
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fe5b 	bl	8000a9c <checkWin>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d10c      	bne.n	8000e06 <PlayTwoPlayer+0xce>
 8000dec:	f7ff feb0 	bl	8000b50 <isBoardFull>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d107      	bne.n	8000e06 <PlayTwoPlayer+0xce>
        current = (current == HUMAN) ? BOT : HUMAN;
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b58      	cmp	r3, #88	@ 0x58
 8000dfa:	d101      	bne.n	8000e00 <PlayTwoPlayer+0xc8>
 8000dfc:	234f      	movs	r3, #79	@ 0x4f
 8000dfe:	e000      	b.n	8000e02 <PlayTwoPlayer+0xca>
 8000e00:	2358      	movs	r3, #88	@ 0x58
 8000e02:	71fb      	strb	r3, [r7, #7]
        PollTouchColumn(current);
 8000e04:	e7e4      	b.n	8000dd0 <PlayTwoPlayer+0x98>
    }

}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000004 	.word	0x20000004

08000e14 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08c      	sub	sp, #48	@ 0x30
 8000e18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
 8000e1e:	4b5a      	ldr	r3, [pc, #360]	@ (8000f88 <LCD_GPIO_Init+0x174>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e22:	4a59      	ldr	r2, [pc, #356]	@ (8000f88 <LCD_GPIO_Init+0x174>)
 8000e24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e2a:	4b57      	ldr	r3, [pc, #348]	@ (8000f88 <LCD_GPIO_Init+0x174>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e32:	61bb      	str	r3, [r7, #24]
 8000e34:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	4b53      	ldr	r3, [pc, #332]	@ (8000f88 <LCD_GPIO_Init+0x174>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	4a52      	ldr	r2, [pc, #328]	@ (8000f88 <LCD_GPIO_Init+0x174>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e46:	4b50      	ldr	r3, [pc, #320]	@ (8000f88 <LCD_GPIO_Init+0x174>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b4c      	ldr	r3, [pc, #304]	@ (8000f88 <LCD_GPIO_Init+0x174>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	4a4b      	ldr	r2, [pc, #300]	@ (8000f88 <LCD_GPIO_Init+0x174>)
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e62:	4b49      	ldr	r3, [pc, #292]	@ (8000f88 <LCD_GPIO_Init+0x174>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b45      	ldr	r3, [pc, #276]	@ (8000f88 <LCD_GPIO_Init+0x174>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	4a44      	ldr	r2, [pc, #272]	@ (8000f88 <LCD_GPIO_Init+0x174>)
 8000e78:	f043 0304 	orr.w	r3, r3, #4
 8000e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7e:	4b42      	ldr	r3, [pc, #264]	@ (8000f88 <LCD_GPIO_Init+0x174>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f88 <LCD_GPIO_Init+0x174>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	4a3d      	ldr	r2, [pc, #244]	@ (8000f88 <LCD_GPIO_Init+0x174>)
 8000e94:	f043 0308 	orr.w	r3, r3, #8
 8000e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f88 <LCD_GPIO_Init+0x174>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	f003 0308 	and.w	r3, r3, #8
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b37      	ldr	r3, [pc, #220]	@ (8000f88 <LCD_GPIO_Init+0x174>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a36      	ldr	r2, [pc, #216]	@ (8000f88 <LCD_GPIO_Init+0x174>)
 8000eb0:	f043 0320 	orr.w	r3, r3, #32
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b34      	ldr	r3, [pc, #208]	@ (8000f88 <LCD_GPIO_Init+0x174>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f003 0320 	and.w	r3, r3, #32
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	4b30      	ldr	r3, [pc, #192]	@ (8000f88 <LCD_GPIO_Init+0x174>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	4a2f      	ldr	r2, [pc, #188]	@ (8000f88 <LCD_GPIO_Init+0x174>)
 8000ecc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f88 <LCD_GPIO_Init+0x174>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000ede:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000ee2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000eec:	2302      	movs	r3, #2
 8000eee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000ef0:	230e      	movs	r3, #14
 8000ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4824      	ldr	r0, [pc, #144]	@ (8000f8c <LCD_GPIO_Init+0x178>)
 8000efc:	f002 f872 	bl	8002fe4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000f00:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000f04:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4820      	ldr	r0, [pc, #128]	@ (8000f90 <LCD_GPIO_Init+0x17c>)
 8000f0e:	f002 f869 	bl	8002fe4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000f12:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000f16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	481d      	ldr	r0, [pc, #116]	@ (8000f94 <LCD_GPIO_Init+0x180>)
 8000f20:	f002 f860 	bl	8002fe4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000f24:	2348      	movs	r3, #72	@ 0x48
 8000f26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	481a      	ldr	r0, [pc, #104]	@ (8000f98 <LCD_GPIO_Init+0x184>)
 8000f30:	f002 f858 	bl	8002fe4 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000f34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4816      	ldr	r0, [pc, #88]	@ (8000f9c <LCD_GPIO_Init+0x188>)
 8000f42:	f002 f84f 	bl	8002fe4 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000f46:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000f4a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	4619      	mov	r1, r3
 8000f52:	4813      	ldr	r0, [pc, #76]	@ (8000fa0 <LCD_GPIO_Init+0x18c>)
 8000f54:	f002 f846 	bl	8002fe4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000f5c:	2309      	movs	r3, #9
 8000f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	480a      	ldr	r0, [pc, #40]	@ (8000f90 <LCD_GPIO_Init+0x17c>)
 8000f68:	f002 f83c 	bl	8002fe4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000f6c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	4619      	mov	r1, r3
 8000f78:	4809      	ldr	r0, [pc, #36]	@ (8000fa0 <LCD_GPIO_Init+0x18c>)
 8000f7a:	f002 f833 	bl	8002fe4 <HAL_GPIO_Init>
}
 8000f7e:	bf00      	nop
 8000f80:	3730      	adds	r7, #48	@ 0x30
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	40020400 	.word	0x40020400
 8000f94:	40020800 	.word	0x40020800
 8000f98:	40020c00 	.word	0x40020c00
 8000f9c:	40021400 	.word	0x40021400
 8000fa0:	40021800 	.word	0x40021800

08000fa4 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b090      	sub	sp, #64	@ 0x40
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000fb2:	23f0      	movs	r3, #240	@ 0xf0
 8000fb4:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000fba:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000fbe:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000fc4:	23ff      	movs	r3, #255	@ 0xff
 8000fc6:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000fcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000fd2:	2305      	movs	r3, #5
 8000fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d101      	bne.n	8000fe0 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <LTCD_Layer_Init+0x78>)
 8000fde:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000fe0:	23f0      	movs	r3, #240	@ 0xf0
 8000fe2:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000fe4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000ffc:	79fa      	ldrb	r2, [r7, #7]
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	4619      	mov	r1, r3
 8001004:	4806      	ldr	r0, [pc, #24]	@ (8001020 <LTCD_Layer_Init+0x7c>)
 8001006:	f003 fc2f 	bl	8004868 <HAL_LTDC_ConfigLayer>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001010:	f000 f9aa 	bl	8001368 <LCD_Error_Handler>
	}
}
 8001014:	bf00      	nop
 8001016:	3740      	adds	r7, #64	@ 0x40
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200001b4 	.word	0x200001b4
 8001020:	200000d8 	.word	0x200000d8

08001024 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001028:	4b2a      	ldr	r3, [pc, #168]	@ (80010d4 <LTCD__Init+0xb0>)
 800102a:	4a2b      	ldr	r2, [pc, #172]	@ (80010d8 <LTCD__Init+0xb4>)
 800102c:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800102e:	4b29      	ldr	r3, [pc, #164]	@ (80010d4 <LTCD__Init+0xb0>)
 8001030:	2209      	movs	r2, #9
 8001032:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001034:	4b27      	ldr	r3, [pc, #156]	@ (80010d4 <LTCD__Init+0xb0>)
 8001036:	2201      	movs	r2, #1
 8001038:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800103a:	4b26      	ldr	r3, [pc, #152]	@ (80010d4 <LTCD__Init+0xb0>)
 800103c:	221d      	movs	r2, #29
 800103e:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001040:	4b24      	ldr	r3, [pc, #144]	@ (80010d4 <LTCD__Init+0xb0>)
 8001042:	2203      	movs	r2, #3
 8001044:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8001046:	4b23      	ldr	r3, [pc, #140]	@ (80010d4 <LTCD__Init+0xb0>)
 8001048:	f240 120d 	movw	r2, #269	@ 0x10d
 800104c:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800104e:	4b21      	ldr	r3, [pc, #132]	@ (80010d4 <LTCD__Init+0xb0>)
 8001050:	f240 1243 	movw	r2, #323	@ 0x143
 8001054:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8001056:	4b1f      	ldr	r3, [pc, #124]	@ (80010d4 <LTCD__Init+0xb0>)
 8001058:	f240 1217 	movw	r2, #279	@ 0x117
 800105c:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800105e:	4b1d      	ldr	r3, [pc, #116]	@ (80010d4 <LTCD__Init+0xb0>)
 8001060:	f240 1247 	movw	r2, #327	@ 0x147
 8001064:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8001066:	4b1b      	ldr	r3, [pc, #108]	@ (80010d4 <LTCD__Init+0xb0>)
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800106e:	4b19      	ldr	r3, [pc, #100]	@ (80010d4 <LTCD__Init+0xb0>)
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001076:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <LTCD__Init+0xb0>)
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800107e:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <LTCD__Init+0xb8>)
 8001080:	2208      	movs	r2, #8
 8001082:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001084:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <LTCD__Init+0xb8>)
 8001086:	22c0      	movs	r2, #192	@ 0xc0
 8001088:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800108a:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <LTCD__Init+0xb8>)
 800108c:	2204      	movs	r2, #4
 800108e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <LTCD__Init+0xb8>)
 8001092:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001096:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001098:	4810      	ldr	r0, [pc, #64]	@ (80010dc <LTCD__Init+0xb8>)
 800109a:	f004 fa3f 	bl	800551c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800109e:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <LTCD__Init+0xb0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <LTCD__Init+0xb0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80010aa:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <LTCD__Init+0xb0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80010b0:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <LTCD__Init+0xb0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80010b6:	f7ff fead 	bl	8000e14 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80010ba:	4806      	ldr	r0, [pc, #24]	@ (80010d4 <LTCD__Init+0xb0>)
 80010bc:	f003 fb04 	bl	80046c8 <HAL_LTDC_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80010c6:	f000 f94f 	bl	8001368 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80010ca:	f000 f96a 	bl	80013a2 <ili9341_Init>
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200000d8 	.word	0x200000d8
 80010d8:	40016800 	.word	0x40016800
 80010dc:	20000180 	.word	0x20000180

080010e0 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
 80010ea:	460b      	mov	r3, r1
 80010ec:	80bb      	strh	r3, [r7, #4]
 80010ee:	4613      	mov	r3, r2
 80010f0:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80010f2:	88ba      	ldrh	r2, [r7, #4]
 80010f4:	4613      	mov	r3, r2
 80010f6:	011b      	lsls	r3, r3, #4
 80010f8:	1a9b      	subs	r3, r3, r2
 80010fa:	011b      	lsls	r3, r3, #4
 80010fc:	461a      	mov	r2, r3
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	4413      	add	r3, r2
 8001102:	4905      	ldr	r1, [pc, #20]	@ (8001118 <LCD_Draw_Pixel+0x38>)
 8001104:	887a      	ldrh	r2, [r7, #2]
 8001106:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	200001b4 	.word	0x200001b4

0800111c <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	4604      	mov	r4, r0
 8001124:	4608      	mov	r0, r1
 8001126:	4611      	mov	r1, r2
 8001128:	461a      	mov	r2, r3
 800112a:	4623      	mov	r3, r4
 800112c:	80fb      	strh	r3, [r7, #6]
 800112e:	4603      	mov	r3, r0
 8001130:	80bb      	strh	r3, [r7, #4]
 8001132:	460b      	mov	r3, r1
 8001134:	807b      	strh	r3, [r7, #2]
 8001136:	4613      	mov	r3, r2
 8001138:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 800113a:	887b      	ldrh	r3, [r7, #2]
 800113c:	425b      	negs	r3, r3
 800113e:	b29b      	uxth	r3, r3
 8001140:	81fb      	strh	r3, [r7, #14]
 8001142:	e034      	b.n	80011ae <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8001144:	887b      	ldrh	r3, [r7, #2]
 8001146:	425b      	negs	r3, r3
 8001148:	b29b      	uxth	r3, r3
 800114a:	81bb      	strh	r3, [r7, #12]
 800114c:	e024      	b.n	8001198 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 800114e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001152:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001156:	fb03 f202 	mul.w	r2, r3, r2
 800115a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800115e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001162:	fb01 f303 	mul.w	r3, r1, r3
 8001166:	441a      	add	r2, r3
 8001168:	887b      	ldrh	r3, [r7, #2]
 800116a:	8879      	ldrh	r1, [r7, #2]
 800116c:	fb01 f303 	mul.w	r3, r1, r3
 8001170:	429a      	cmp	r2, r3
 8001172:	dc0b      	bgt.n	800118c <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8001174:	89ba      	ldrh	r2, [r7, #12]
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	4413      	add	r3, r2
 800117a:	b298      	uxth	r0, r3
 800117c:	89fa      	ldrh	r2, [r7, #14]
 800117e:	88bb      	ldrh	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	b29b      	uxth	r3, r3
 8001184:	883a      	ldrh	r2, [r7, #0]
 8001186:	4619      	mov	r1, r3
 8001188:	f7ff ffaa 	bl	80010e0 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 800118c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001190:	b29b      	uxth	r3, r3
 8001192:	3301      	adds	r3, #1
 8001194:	b29b      	uxth	r3, r3
 8001196:	81bb      	strh	r3, [r7, #12]
 8001198:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800119c:	887b      	ldrh	r3, [r7, #2]
 800119e:	429a      	cmp	r2, r3
 80011a0:	ddd5      	ble.n	800114e <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 80011a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	3301      	adds	r3, #1
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	81fb      	strh	r3, [r7, #14]
 80011ae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	ddc5      	ble.n	8001144 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd90      	pop	{r4, r7, pc}
	...

080011c4 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	460a      	mov	r2, r1
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	4613      	mov	r3, r2
 80011d2:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10e      	bne.n	80011f8 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	e007      	b.n	80011f0 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80011e0:	4908      	ldr	r1, [pc, #32]	@ (8001204 <LCD_Clear+0x40>)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	88ba      	ldrh	r2, [r7, #4]
 80011e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3301      	adds	r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80011f6:	d3f3      	bcc.n	80011e0 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	200001b4 	.word	0x200001b4

08001208 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8001212:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <LCD_SetTextColor+0x1c>)
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	8013      	strh	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	20000000 	.word	0x20000000

08001228 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001230:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <LCD_SetFont+0x1c>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	200001b0 	.word	0x200001b0

08001248 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	603a      	str	r2, [r7, #0]
 8001252:	80fb      	strh	r3, [r7, #6]
 8001254:	460b      	mov	r3, r1
 8001256:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	e04c      	b.n	8001300 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	e03f      	b.n	80012ec <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	4413      	add	r3, r2
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	4619      	mov	r1, r3
 8001278:	4b27      	ldr	r3, [pc, #156]	@ (8001318 <LCD_Draw_Char+0xd0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	889b      	ldrh	r3, [r3, #4]
 800127e:	4a27      	ldr	r2, [pc, #156]	@ (800131c <LCD_Draw_Char+0xd4>)
 8001280:	fba2 2303 	umull	r2, r3, r2, r3
 8001284:	08db      	lsrs	r3, r3, #3
 8001286:	b29b      	uxth	r3, r3
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	2280      	movs	r2, #128	@ 0x80
 800128c:	409a      	lsls	r2, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	fa42 f303 	asr.w	r3, r2, r3
 8001294:	400b      	ands	r3, r1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d104      	bne.n	80012a4 <LCD_Draw_Char+0x5c>
 800129a:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <LCD_Draw_Char+0xd0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	889b      	ldrh	r3, [r3, #4]
 80012a0:	2b0c      	cmp	r3, #12
 80012a2:	d920      	bls.n	80012e6 <LCD_Draw_Char+0x9e>
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	fa42 f303 	asr.w	r3, r2, r3
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d104      	bne.n	80012c8 <LCD_Draw_Char+0x80>
 80012be:	4b16      	ldr	r3, [pc, #88]	@ (8001318 <LCD_Draw_Char+0xd0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	889b      	ldrh	r3, [r3, #4]
 80012c4:	2b0c      	cmp	r3, #12
 80012c6:	d80e      	bhi.n	80012e6 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	4413      	add	r3, r2
 80012d0:	b298      	uxth	r0, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	88bb      	ldrh	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4a10      	ldr	r2, [pc, #64]	@ (8001320 <LCD_Draw_Char+0xd8>)
 80012de:	8812      	ldrh	r2, [r2, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fefd 	bl	80010e0 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	3301      	adds	r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001318 <LCD_Draw_Char+0xd0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	889b      	ldrh	r3, [r3, #4]
 80012f2:	461a      	mov	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d3b8      	bcc.n	800126c <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3301      	adds	r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <LCD_Draw_Char+0xd0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	88db      	ldrh	r3, [r3, #6]
 8001306:	461a      	mov	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4293      	cmp	r3, r2
 800130c:	d3ab      	bcc.n	8001266 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 800130e:	bf00      	nop
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200001b0 	.word	0x200001b0
 800131c:	aaaaaaab 	.word	0xaaaaaaab
 8001320:	20000000 	.word	0x20000000

08001324 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]
 800132e:	460b      	mov	r3, r1
 8001330:	80bb      	strh	r3, [r7, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001336:	78fb      	ldrb	r3, [r7, #3]
 8001338:	3b20      	subs	r3, #32
 800133a:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 800133c:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <LCD_DisplayChar+0x40>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	78fb      	ldrb	r3, [r7, #3]
 8001344:	4907      	ldr	r1, [pc, #28]	@ (8001364 <LCD_DisplayChar+0x40>)
 8001346:	6809      	ldr	r1, [r1, #0]
 8001348:	88c9      	ldrh	r1, [r1, #6]
 800134a:	fb01 f303 	mul.w	r3, r1, r3
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	441a      	add	r2, r3
 8001352:	88b9      	ldrh	r1, [r7, #4]
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff76 	bl	8001248 <LCD_Draw_Char>
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200001b0 	.word	0x200001b0

08001368 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800136c:	b672      	cpsid	i
}
 800136e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <LCD_Error_Handler+0x8>

08001374 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001378:	f001 f931 	bl	80025de <STMPE811_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b02      	cmp	r3, #2
 8001380:	d001      	beq.n	8001386 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001382:	bf00      	nop
 8001384:	e7fd      	b.n	8001382 <InitializeLCDTouch+0xe>
  }
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}

0800138a <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f001 f9db 	bl	800274e <STMPE811_ReadTouch>
 8001398:	4603      	mov	r3, r0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80013a6:	f000 f9ff 	bl	80017a8 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80013aa:	20ca      	movs	r0, #202	@ 0xca
 80013ac:	f000 f943 	bl	8001636 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80013b0:	20c3      	movs	r0, #195	@ 0xc3
 80013b2:	f000 f94d 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80013b6:	2008      	movs	r0, #8
 80013b8:	f000 f94a 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80013bc:	2050      	movs	r0, #80	@ 0x50
 80013be:	f000 f947 	bl	8001650 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80013c2:	20cf      	movs	r0, #207	@ 0xcf
 80013c4:	f000 f937 	bl	8001636 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80013c8:	2000      	movs	r0, #0
 80013ca:	f000 f941 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80013ce:	20c1      	movs	r0, #193	@ 0xc1
 80013d0:	f000 f93e 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80013d4:	2030      	movs	r0, #48	@ 0x30
 80013d6:	f000 f93b 	bl	8001650 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80013da:	20ed      	movs	r0, #237	@ 0xed
 80013dc:	f000 f92b 	bl	8001636 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80013e0:	2064      	movs	r0, #100	@ 0x64
 80013e2:	f000 f935 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80013e6:	2003      	movs	r0, #3
 80013e8:	f000 f932 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80013ec:	2012      	movs	r0, #18
 80013ee:	f000 f92f 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80013f2:	2081      	movs	r0, #129	@ 0x81
 80013f4:	f000 f92c 	bl	8001650 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80013f8:	20e8      	movs	r0, #232	@ 0xe8
 80013fa:	f000 f91c 	bl	8001636 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80013fe:	2085      	movs	r0, #133	@ 0x85
 8001400:	f000 f926 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001404:	2000      	movs	r0, #0
 8001406:	f000 f923 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800140a:	2078      	movs	r0, #120	@ 0x78
 800140c:	f000 f920 	bl	8001650 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001410:	20cb      	movs	r0, #203	@ 0xcb
 8001412:	f000 f910 	bl	8001636 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001416:	2039      	movs	r0, #57	@ 0x39
 8001418:	f000 f91a 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800141c:	202c      	movs	r0, #44	@ 0x2c
 800141e:	f000 f917 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001422:	2000      	movs	r0, #0
 8001424:	f000 f914 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001428:	2034      	movs	r0, #52	@ 0x34
 800142a:	f000 f911 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 800142e:	2002      	movs	r0, #2
 8001430:	f000 f90e 	bl	8001650 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001434:	20f7      	movs	r0, #247	@ 0xf7
 8001436:	f000 f8fe 	bl	8001636 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 800143a:	2020      	movs	r0, #32
 800143c:	f000 f908 	bl	8001650 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001440:	20ea      	movs	r0, #234	@ 0xea
 8001442:	f000 f8f8 	bl	8001636 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001446:	2000      	movs	r0, #0
 8001448:	f000 f902 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800144c:	2000      	movs	r0, #0
 800144e:	f000 f8ff 	bl	8001650 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001452:	20b1      	movs	r0, #177	@ 0xb1
 8001454:	f000 f8ef 	bl	8001636 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001458:	2000      	movs	r0, #0
 800145a:	f000 f8f9 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800145e:	201b      	movs	r0, #27
 8001460:	f000 f8f6 	bl	8001650 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001464:	20b6      	movs	r0, #182	@ 0xb6
 8001466:	f000 f8e6 	bl	8001636 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800146a:	200a      	movs	r0, #10
 800146c:	f000 f8f0 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001470:	20a2      	movs	r0, #162	@ 0xa2
 8001472:	f000 f8ed 	bl	8001650 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001476:	20c0      	movs	r0, #192	@ 0xc0
 8001478:	f000 f8dd 	bl	8001636 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800147c:	2010      	movs	r0, #16
 800147e:	f000 f8e7 	bl	8001650 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001482:	20c1      	movs	r0, #193	@ 0xc1
 8001484:	f000 f8d7 	bl	8001636 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001488:	2010      	movs	r0, #16
 800148a:	f000 f8e1 	bl	8001650 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 800148e:	20c5      	movs	r0, #197	@ 0xc5
 8001490:	f000 f8d1 	bl	8001636 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001494:	2045      	movs	r0, #69	@ 0x45
 8001496:	f000 f8db 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 800149a:	2015      	movs	r0, #21
 800149c:	f000 f8d8 	bl	8001650 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80014a0:	20c7      	movs	r0, #199	@ 0xc7
 80014a2:	f000 f8c8 	bl	8001636 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80014a6:	2090      	movs	r0, #144	@ 0x90
 80014a8:	f000 f8d2 	bl	8001650 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80014ac:	2036      	movs	r0, #54	@ 0x36
 80014ae:	f000 f8c2 	bl	8001636 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80014b2:	20c8      	movs	r0, #200	@ 0xc8
 80014b4:	f000 f8cc 	bl	8001650 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80014b8:	20f2      	movs	r0, #242	@ 0xf2
 80014ba:	f000 f8bc 	bl	8001636 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80014be:	2000      	movs	r0, #0
 80014c0:	f000 f8c6 	bl	8001650 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80014c4:	20b0      	movs	r0, #176	@ 0xb0
 80014c6:	f000 f8b6 	bl	8001636 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80014ca:	20c2      	movs	r0, #194	@ 0xc2
 80014cc:	f000 f8c0 	bl	8001650 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80014d0:	20b6      	movs	r0, #182	@ 0xb6
 80014d2:	f000 f8b0 	bl	8001636 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80014d6:	200a      	movs	r0, #10
 80014d8:	f000 f8ba 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80014dc:	20a7      	movs	r0, #167	@ 0xa7
 80014de:	f000 f8b7 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80014e2:	2027      	movs	r0, #39	@ 0x27
 80014e4:	f000 f8b4 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80014e8:	2004      	movs	r0, #4
 80014ea:	f000 f8b1 	bl	8001650 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80014ee:	202a      	movs	r0, #42	@ 0x2a
 80014f0:	f000 f8a1 	bl	8001636 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f000 f8ab 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80014fa:	2000      	movs	r0, #0
 80014fc:	f000 f8a8 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001500:	2000      	movs	r0, #0
 8001502:	f000 f8a5 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001506:	20ef      	movs	r0, #239	@ 0xef
 8001508:	f000 f8a2 	bl	8001650 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800150c:	202b      	movs	r0, #43	@ 0x2b
 800150e:	f000 f892 	bl	8001636 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001512:	2000      	movs	r0, #0
 8001514:	f000 f89c 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001518:	2000      	movs	r0, #0
 800151a:	f000 f899 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 800151e:	2001      	movs	r0, #1
 8001520:	f000 f896 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001524:	203f      	movs	r0, #63	@ 0x3f
 8001526:	f000 f893 	bl	8001650 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 800152a:	20f6      	movs	r0, #246	@ 0xf6
 800152c:	f000 f883 	bl	8001636 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001530:	2001      	movs	r0, #1
 8001532:	f000 f88d 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001536:	2000      	movs	r0, #0
 8001538:	f000 f88a 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800153c:	2006      	movs	r0, #6
 800153e:	f000 f887 	bl	8001650 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001542:	202c      	movs	r0, #44	@ 0x2c
 8001544:	f000 f877 	bl	8001636 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001548:	20c8      	movs	r0, #200	@ 0xc8
 800154a:	f000 f9e9 	bl	8001920 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 800154e:	2026      	movs	r0, #38	@ 0x26
 8001550:	f000 f871 	bl	8001636 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001554:	2001      	movs	r0, #1
 8001556:	f000 f87b 	bl	8001650 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 800155a:	20e0      	movs	r0, #224	@ 0xe0
 800155c:	f000 f86b 	bl	8001636 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001560:	200f      	movs	r0, #15
 8001562:	f000 f875 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001566:	2029      	movs	r0, #41	@ 0x29
 8001568:	f000 f872 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 800156c:	2024      	movs	r0, #36	@ 0x24
 800156e:	f000 f86f 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001572:	200c      	movs	r0, #12
 8001574:	f000 f86c 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001578:	200e      	movs	r0, #14
 800157a:	f000 f869 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800157e:	2009      	movs	r0, #9
 8001580:	f000 f866 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001584:	204e      	movs	r0, #78	@ 0x4e
 8001586:	f000 f863 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800158a:	2078      	movs	r0, #120	@ 0x78
 800158c:	f000 f860 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001590:	203c      	movs	r0, #60	@ 0x3c
 8001592:	f000 f85d 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001596:	2009      	movs	r0, #9
 8001598:	f000 f85a 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 800159c:	2013      	movs	r0, #19
 800159e:	f000 f857 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80015a2:	2005      	movs	r0, #5
 80015a4:	f000 f854 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80015a8:	2017      	movs	r0, #23
 80015aa:	f000 f851 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80015ae:	2011      	movs	r0, #17
 80015b0:	f000 f84e 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80015b4:	2000      	movs	r0, #0
 80015b6:	f000 f84b 	bl	8001650 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80015ba:	20e1      	movs	r0, #225	@ 0xe1
 80015bc:	f000 f83b 	bl	8001636 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80015c0:	2000      	movs	r0, #0
 80015c2:	f000 f845 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80015c6:	2016      	movs	r0, #22
 80015c8:	f000 f842 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80015cc:	201b      	movs	r0, #27
 80015ce:	f000 f83f 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80015d2:	2004      	movs	r0, #4
 80015d4:	f000 f83c 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80015d8:	2011      	movs	r0, #17
 80015da:	f000 f839 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80015de:	2007      	movs	r0, #7
 80015e0:	f000 f836 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80015e4:	2031      	movs	r0, #49	@ 0x31
 80015e6:	f000 f833 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80015ea:	2033      	movs	r0, #51	@ 0x33
 80015ec:	f000 f830 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80015f0:	2042      	movs	r0, #66	@ 0x42
 80015f2:	f000 f82d 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80015f6:	2005      	movs	r0, #5
 80015f8:	f000 f82a 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80015fc:	200c      	movs	r0, #12
 80015fe:	f000 f827 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001602:	200a      	movs	r0, #10
 8001604:	f000 f824 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001608:	2028      	movs	r0, #40	@ 0x28
 800160a:	f000 f821 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 800160e:	202f      	movs	r0, #47	@ 0x2f
 8001610:	f000 f81e 	bl	8001650 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001614:	200f      	movs	r0, #15
 8001616:	f000 f81b 	bl	8001650 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 800161a:	2011      	movs	r0, #17
 800161c:	f000 f80b 	bl	8001636 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001620:	20c8      	movs	r0, #200	@ 0xc8
 8001622:	f000 f97d 	bl	8001920 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001626:	2029      	movs	r0, #41	@ 0x29
 8001628:	f000 f805 	bl	8001636 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800162c:	202c      	movs	r0, #44	@ 0x2c
 800162e:	f000 f802 	bl	8001636 <ili9341_Write_Reg>
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}

08001636 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	4618      	mov	r0, r3
 8001644:	f000 f94a 	bl	80018dc <LCD_IO_WriteReg>
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	4618      	mov	r0, r3
 800165e:	f000 f91b 	bl	8001898 <LCD_IO_WriteData>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001670:	4819      	ldr	r0, [pc, #100]	@ (80016d8 <SPI_Init+0x6c>)
 8001672:	f004 fb88 	bl	8005d86 <HAL_SPI_GetState>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d12b      	bne.n	80016d4 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 800167c:	4b16      	ldr	r3, [pc, #88]	@ (80016d8 <SPI_Init+0x6c>)
 800167e:	4a17      	ldr	r2, [pc, #92]	@ (80016dc <SPI_Init+0x70>)
 8001680:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001682:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <SPI_Init+0x6c>)
 8001684:	2218      	movs	r2, #24
 8001686:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001688:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <SPI_Init+0x6c>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800168e:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <SPI_Init+0x6c>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001694:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <SPI_Init+0x6c>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800169a:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <SPI_Init+0x6c>)
 800169c:	2200      	movs	r2, #0
 800169e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80016a0:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <SPI_Init+0x6c>)
 80016a2:	2207      	movs	r2, #7
 80016a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80016a6:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <SPI_Init+0x6c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80016ac:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <SPI_Init+0x6c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80016b2:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <SPI_Init+0x6c>)
 80016b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016b8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80016ba:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <SPI_Init+0x6c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80016c0:	4b05      	ldr	r3, [pc, #20]	@ (80016d8 <SPI_Init+0x6c>)
 80016c2:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016c6:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80016c8:	4803      	ldr	r0, [pc, #12]	@ (80016d8 <SPI_Init+0x6c>)
 80016ca:	f000 f833 	bl	8001734 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80016ce:	4802      	ldr	r0, [pc, #8]	@ (80016d8 <SPI_Init+0x6c>)
 80016d0:	f004 f964 	bl	800599c <HAL_SPI_Init>
  }
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200259b4 	.word	0x200259b4
 80016dc:	40015000 	.word	0x40015000

080016e0 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80016ee:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <SPI_Write+0x34>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	1db9      	adds	r1, r7, #6
 80016f4:	2201      	movs	r2, #1
 80016f6:	4808      	ldr	r0, [pc, #32]	@ (8001718 <SPI_Write+0x38>)
 80016f8:	f004 fa01 	bl	8005afe <HAL_SPI_Transmit>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001706:	f000 f809 	bl	800171c <SPI_Error>
  }
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	2000000c 	.word	0x2000000c
 8001718:	200259b4 	.word	0x200259b4

0800171c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001720:	4803      	ldr	r0, [pc, #12]	@ (8001730 <SPI_Error+0x14>)
 8001722:	f004 f9c4 	bl	8005aae <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001726:	f7ff ffa1 	bl	800166c <SPI_Init>
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200259b4 	.word	0x200259b4

08001734 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	@ 0x28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	4b17      	ldr	r3, [pc, #92]	@ (80017a0 <SPI_MspInit+0x6c>)
 8001742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001744:	4a16      	ldr	r2, [pc, #88]	@ (80017a0 <SPI_MspInit+0x6c>)
 8001746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800174a:	6453      	str	r3, [r2, #68]	@ 0x44
 800174c:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <SPI_MspInit+0x6c>)
 800174e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001750:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <SPI_MspInit+0x6c>)
 800175e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001760:	4a0f      	ldr	r2, [pc, #60]	@ (80017a0 <SPI_MspInit+0x6c>)
 8001762:	f043 0320 	orr.w	r3, r3, #32
 8001766:	6313      	str	r3, [r2, #48]	@ 0x30
 8001768:	4b0d      	ldr	r3, [pc, #52]	@ (80017a0 <SPI_MspInit+0x6c>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176c:	f003 0320 	and.w	r3, r3, #32
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001774:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001778:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800177e:	2302      	movs	r3, #2
 8001780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001782:	2301      	movs	r3, #1
 8001784:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001786:	2305      	movs	r3, #5
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	4804      	ldr	r0, [pc, #16]	@ (80017a4 <SPI_MspInit+0x70>)
 8001792:	f001 fc27 	bl	8002fe4 <HAL_GPIO_Init>
}
 8001796:	bf00      	nop
 8001798:	3728      	adds	r7, #40	@ 0x28
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40021400 	.word	0x40021400

080017a8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80017ae:	4b36      	ldr	r3, [pc, #216]	@ (8001888 <LCD_IO_Init+0xe0>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d164      	bne.n	8001880 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80017b6:	4b34      	ldr	r3, [pc, #208]	@ (8001888 <LCD_IO_Init+0xe0>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	4b32      	ldr	r3, [pc, #200]	@ (800188c <LCD_IO_Init+0xe4>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c4:	4a31      	ldr	r2, [pc, #196]	@ (800188c <LCD_IO_Init+0xe4>)
 80017c6:	f043 0308 	orr.w	r3, r3, #8
 80017ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80017cc:	4b2f      	ldr	r3, [pc, #188]	@ (800188c <LCD_IO_Init+0xe4>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80017d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80017de:	2301      	movs	r3, #1
 80017e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	4619      	mov	r1, r3
 80017f0:	4827      	ldr	r0, [pc, #156]	@ (8001890 <LCD_IO_Init+0xe8>)
 80017f2:	f001 fbf7 	bl	8002fe4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	4b24      	ldr	r3, [pc, #144]	@ (800188c <LCD_IO_Init+0xe4>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a23      	ldr	r2, [pc, #140]	@ (800188c <LCD_IO_Init+0xe4>)
 8001800:	f043 0308 	orr.w	r3, r3, #8
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b21      	ldr	r3, [pc, #132]	@ (800188c <LCD_IO_Init+0xe4>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001812:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001816:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001820:	2302      	movs	r3, #2
 8001822:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	4619      	mov	r1, r3
 800182a:	4819      	ldr	r0, [pc, #100]	@ (8001890 <LCD_IO_Init+0xe8>)
 800182c:	f001 fbda 	bl	8002fe4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001830:	2300      	movs	r3, #0
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	4b15      	ldr	r3, [pc, #84]	@ (800188c <LCD_IO_Init+0xe4>)
 8001836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001838:	4a14      	ldr	r2, [pc, #80]	@ (800188c <LCD_IO_Init+0xe4>)
 800183a:	f043 0304 	orr.w	r3, r3, #4
 800183e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <LCD_IO_Init+0xe4>)
 8001842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800184c:	2304      	movs	r3, #4
 800184e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001850:	2301      	movs	r3, #1
 8001852:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001858:	2302      	movs	r3, #2
 800185a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	4619      	mov	r1, r3
 8001862:	480c      	ldr	r0, [pc, #48]	@ (8001894 <LCD_IO_Init+0xec>)
 8001864:	f001 fbbe 	bl	8002fe4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001868:	2200      	movs	r2, #0
 800186a:	2104      	movs	r1, #4
 800186c:	4809      	ldr	r0, [pc, #36]	@ (8001894 <LCD_IO_Init+0xec>)
 800186e:	f001 fe71 	bl	8003554 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001872:	2201      	movs	r2, #1
 8001874:	2104      	movs	r1, #4
 8001876:	4807      	ldr	r0, [pc, #28]	@ (8001894 <LCD_IO_Init+0xec>)
 8001878:	f001 fe6c 	bl	8003554 <HAL_GPIO_WritePin>

    SPI_Init();
 800187c:	f7ff fef6 	bl	800166c <SPI_Init>
  }
}
 8001880:	bf00      	nop
 8001882:	3720      	adds	r7, #32
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20025a0c 	.word	0x20025a0c
 800188c:	40023800 	.word	0x40023800
 8001890:	40020c00 	.word	0x40020c00
 8001894:	40020800 	.word	0x40020800

08001898 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80018a2:	2201      	movs	r2, #1
 80018a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018a8:	480a      	ldr	r0, [pc, #40]	@ (80018d4 <LCD_IO_WriteData+0x3c>)
 80018aa:	f001 fe53 	bl	8003554 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80018ae:	2200      	movs	r2, #0
 80018b0:	2104      	movs	r1, #4
 80018b2:	4809      	ldr	r0, [pc, #36]	@ (80018d8 <LCD_IO_WriteData+0x40>)
 80018b4:	f001 fe4e 	bl	8003554 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ff10 	bl	80016e0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80018c0:	2201      	movs	r2, #1
 80018c2:	2104      	movs	r1, #4
 80018c4:	4804      	ldr	r0, [pc, #16]	@ (80018d8 <LCD_IO_WriteData+0x40>)
 80018c6:	f001 fe45 	bl	8003554 <HAL_GPIO_WritePin>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40020c00 	.word	0x40020c00
 80018d8:	40020800 	.word	0x40020800

080018dc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80018e6:	2200      	movs	r2, #0
 80018e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018ec:	480a      	ldr	r0, [pc, #40]	@ (8001918 <LCD_IO_WriteReg+0x3c>)
 80018ee:	f001 fe31 	bl	8003554 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80018f2:	2200      	movs	r2, #0
 80018f4:	2104      	movs	r1, #4
 80018f6:	4809      	ldr	r0, [pc, #36]	@ (800191c <LCD_IO_WriteReg+0x40>)
 80018f8:	f001 fe2c 	bl	8003554 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff feed 	bl	80016e0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001906:	2201      	movs	r2, #1
 8001908:	2104      	movs	r1, #4
 800190a:	4804      	ldr	r0, [pc, #16]	@ (800191c <LCD_IO_WriteReg+0x40>)
 800190c:	f001 fe22 	bl	8003554 <HAL_GPIO_WritePin>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40020c00 	.word	0x40020c00
 800191c:	40020800 	.word	0x40020800

08001920 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f001 fa51 	bl	8002dd0 <HAL_Delay>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800193a:	f001 f9d7 	bl	8002cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800193e:	f000 f817 	bl	8001970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001942:	f000 fa07 	bl	8001d54 <MX_GPIO_Init>
  MX_LTDC_Init();
 8001946:	f000 f8bd 	bl	8001ac4 <MX_LTDC_Init>
  MX_RNG_Init();
 800194a:	f000 f96d 	bl	8001c28 <MX_RNG_Init>
  MX_TIM2_Init();
 800194e:	f000 f9b5 	bl	8001cbc <MX_TIM2_Init>
  MX_SPI5_Init();
 8001952:	f000 f97d 	bl	8001c50 <MX_SPI5_Init>
  MX_I2C3_Init();
 8001956:	f000 f875 	bl	8001a44 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 800195a:	f7fe fde5 	bl	8000528 <ApplicationInit>
  ApplicationFirstScreen();
 800195e:	f7fe fdfb 	bl	8000558 <ApplicationFirstScreen>

  //LCD_Visual_Demo();
  HAL_Delay(5000);
 8001962:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001966:	f001 fa33 	bl	8002dd0 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  LCD_Touch_Polling_Demo();
 800196a:	f7fe fe09 	bl	8000580 <LCD_Touch_Polling_Demo>
 800196e:	e7fc      	b.n	800196a <main+0x34>

08001970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b094      	sub	sp, #80	@ 0x50
 8001974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001976:	f107 0320 	add.w	r3, r7, #32
 800197a:	2230      	movs	r2, #48	@ 0x30
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f005 f8f6 	bl	8006b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001994:	2300      	movs	r3, #0
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	4b28      	ldr	r3, [pc, #160]	@ (8001a3c <SystemClock_Config+0xcc>)
 800199a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199c:	4a27      	ldr	r2, [pc, #156]	@ (8001a3c <SystemClock_Config+0xcc>)
 800199e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a4:	4b25      	ldr	r3, [pc, #148]	@ (8001a3c <SystemClock_Config+0xcc>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b0:	2300      	movs	r3, #0
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	4b22      	ldr	r3, [pc, #136]	@ (8001a40 <SystemClock_Config+0xd0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a21      	ldr	r2, [pc, #132]	@ (8001a40 <SystemClock_Config+0xd0>)
 80019ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a40 <SystemClock_Config+0xd0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019cc:	2301      	movs	r3, #1
 80019ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d6:	2302      	movs	r3, #2
 80019d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019e0:	2308      	movs	r3, #8
 80019e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80019e4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80019e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019ea:	2302      	movs	r3, #2
 80019ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019ee:	2307      	movs	r3, #7
 80019f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f2:	f107 0320 	add.w	r3, r7, #32
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 f90c 	bl	8004c14 <HAL_RCC_OscConfig>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a02:	f000 fb55 	bl	80020b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a06:	230f      	movs	r3, #15
 8001a08:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a12:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a1e:	f107 030c 	add.w	r3, r7, #12
 8001a22:	2105      	movs	r1, #5
 8001a24:	4618      	mov	r0, r3
 8001a26:	f003 fb6d 	bl	8005104 <HAL_RCC_ClockConfig>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a30:	f000 fb3e 	bl	80020b0 <Error_Handler>
  }
}
 8001a34:	bf00      	nop
 8001a36:	3750      	adds	r7, #80	@ 0x50
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40007000 	.word	0x40007000

08001a44 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <MX_I2C3_Init+0x74>)
 8001a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001abc <MX_I2C3_Init+0x78>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <MX_I2C3_Init+0x74>)
 8001a50:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac0 <MX_I2C3_Init+0x7c>)
 8001a52:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a54:	4b18      	ldr	r3, [pc, #96]	@ (8001ab8 <MX_I2C3_Init+0x74>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a5a:	4b17      	ldr	r3, [pc, #92]	@ (8001ab8 <MX_I2C3_Init+0x74>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a60:	4b15      	ldr	r3, [pc, #84]	@ (8001ab8 <MX_I2C3_Init+0x74>)
 8001a62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a66:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a68:	4b13      	ldr	r3, [pc, #76]	@ (8001ab8 <MX_I2C3_Init+0x74>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a6e:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <MX_I2C3_Init+0x74>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a74:	4b10      	ldr	r3, [pc, #64]	@ (8001ab8 <MX_I2C3_Init+0x74>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab8 <MX_I2C3_Init+0x74>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a80:	480d      	ldr	r0, [pc, #52]	@ (8001ab8 <MX_I2C3_Init+0x74>)
 8001a82:	f001 fd81 	bl	8003588 <HAL_I2C_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a8c:	f000 fb10 	bl	80020b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a90:	2100      	movs	r1, #0
 8001a92:	4809      	ldr	r0, [pc, #36]	@ (8001ab8 <MX_I2C3_Init+0x74>)
 8001a94:	f002 fd9c 	bl	80045d0 <HAL_I2CEx_ConfigAnalogFilter>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001a9e:	f000 fb07 	bl	80020b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4804      	ldr	r0, [pc, #16]	@ (8001ab8 <MX_I2C3_Init+0x74>)
 8001aa6:	f002 fdcf 	bl	8004648 <HAL_I2CEx_ConfigDigitalFilter>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001ab0:	f000 fafe 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20025a10 	.word	0x20025a10
 8001abc:	40005c00 	.word	0x40005c00
 8001ac0:	000186a0 	.word	0x000186a0

08001ac4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b09a      	sub	sp, #104	@ 0x68
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001aca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ace:	2234      	movs	r2, #52	@ 0x34
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f005 f84c 	bl	8006b70 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001ad8:	463b      	mov	r3, r7
 8001ada:	2234      	movs	r2, #52	@ 0x34
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f005 f846 	bl	8006b70 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001ae4:	4b4e      	ldr	r3, [pc, #312]	@ (8001c20 <MX_LTDC_Init+0x15c>)
 8001ae6:	4a4f      	ldr	r2, [pc, #316]	@ (8001c24 <MX_LTDC_Init+0x160>)
 8001ae8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001aea:	4b4d      	ldr	r3, [pc, #308]	@ (8001c20 <MX_LTDC_Init+0x15c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001af0:	4b4b      	ldr	r3, [pc, #300]	@ (8001c20 <MX_LTDC_Init+0x15c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001af6:	4b4a      	ldr	r3, [pc, #296]	@ (8001c20 <MX_LTDC_Init+0x15c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001afc:	4b48      	ldr	r3, [pc, #288]	@ (8001c20 <MX_LTDC_Init+0x15c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001b02:	4b47      	ldr	r3, [pc, #284]	@ (8001c20 <MX_LTDC_Init+0x15c>)
 8001b04:	2207      	movs	r2, #7
 8001b06:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001b08:	4b45      	ldr	r3, [pc, #276]	@ (8001c20 <MX_LTDC_Init+0x15c>)
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001b0e:	4b44      	ldr	r3, [pc, #272]	@ (8001c20 <MX_LTDC_Init+0x15c>)
 8001b10:	220e      	movs	r2, #14
 8001b12:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001b14:	4b42      	ldr	r3, [pc, #264]	@ (8001c20 <MX_LTDC_Init+0x15c>)
 8001b16:	2205      	movs	r2, #5
 8001b18:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001b1a:	4b41      	ldr	r3, [pc, #260]	@ (8001c20 <MX_LTDC_Init+0x15c>)
 8001b1c:	f240 228e 	movw	r2, #654	@ 0x28e
 8001b20:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001b22:	4b3f      	ldr	r3, [pc, #252]	@ (8001c20 <MX_LTDC_Init+0x15c>)
 8001b24:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001b28:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c20 <MX_LTDC_Init+0x15c>)
 8001b2c:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001b30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001b32:	4b3b      	ldr	r3, [pc, #236]	@ (8001c20 <MX_LTDC_Init+0x15c>)
 8001b34:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001b38:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001b3a:	4b39      	ldr	r3, [pc, #228]	@ (8001c20 <MX_LTDC_Init+0x15c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001b42:	4b37      	ldr	r3, [pc, #220]	@ (8001c20 <MX_LTDC_Init+0x15c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001b4a:	4b35      	ldr	r3, [pc, #212]	@ (8001c20 <MX_LTDC_Init+0x15c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001b52:	4833      	ldr	r0, [pc, #204]	@ (8001c20 <MX_LTDC_Init+0x15c>)
 8001b54:	f002 fdb8 	bl	80046c8 <HAL_LTDC_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001b5e:	f000 faa7 	bl	80020b0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001b72:	2300      	movs	r3, #0
 8001b74:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001b7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b82:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001b84:	2305      	movs	r3, #5
 8001b86:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001ba6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001baa:	2200      	movs	r2, #0
 8001bac:	4619      	mov	r1, r3
 8001bae:	481c      	ldr	r0, [pc, #112]	@ (8001c20 <MX_LTDC_Init+0x15c>)
 8001bb0:	f002 fe5a 	bl	8004868 <HAL_LTDC_ConfigLayer>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001bba:	f000 fa79 	bl	80020b0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001bda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bde:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001be0:	2305      	movs	r3, #5
 8001be2:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001c02:	463b      	mov	r3, r7
 8001c04:	2201      	movs	r2, #1
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	@ (8001c20 <MX_LTDC_Init+0x15c>)
 8001c0a:	f002 fe2d 	bl	8004868 <HAL_LTDC_ConfigLayer>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001c14:	f000 fa4c 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	3768      	adds	r7, #104	@ 0x68
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20025a64 	.word	0x20025a64
 8001c24:	40016800 	.word	0x40016800

08001c28 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <MX_RNG_Init+0x20>)
 8001c2e:	4a07      	ldr	r2, [pc, #28]	@ (8001c4c <MX_RNG_Init+0x24>)
 8001c30:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001c32:	4805      	ldr	r0, [pc, #20]	@ (8001c48 <MX_RNG_Init+0x20>)
 8001c34:	f003 fe32 	bl	800589c <HAL_RNG_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001c3e:	f000 fa37 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20025b0c 	.word	0x20025b0c
 8001c4c:	50060800 	.word	0x50060800

08001c50 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001c54:	4b17      	ldr	r3, [pc, #92]	@ (8001cb4 <MX_SPI5_Init+0x64>)
 8001c56:	4a18      	ldr	r2, [pc, #96]	@ (8001cb8 <MX_SPI5_Init+0x68>)
 8001c58:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c5a:	4b16      	ldr	r3, [pc, #88]	@ (8001cb4 <MX_SPI5_Init+0x64>)
 8001c5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c60:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001c62:	4b14      	ldr	r3, [pc, #80]	@ (8001cb4 <MX_SPI5_Init+0x64>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c68:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <MX_SPI5_Init+0x64>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c6e:	4b11      	ldr	r3, [pc, #68]	@ (8001cb4 <MX_SPI5_Init+0x64>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c74:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb4 <MX_SPI5_Init+0x64>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <MX_SPI5_Init+0x64>)
 8001c7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c80:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c82:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb4 <MX_SPI5_Init+0x64>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c88:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb4 <MX_SPI5_Init+0x64>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c8e:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <MX_SPI5_Init+0x64>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c94:	4b07      	ldr	r3, [pc, #28]	@ (8001cb4 <MX_SPI5_Init+0x64>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001c9a:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <MX_SPI5_Init+0x64>)
 8001c9c:	220a      	movs	r2, #10
 8001c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001ca0:	4804      	ldr	r0, [pc, #16]	@ (8001cb4 <MX_SPI5_Init+0x64>)
 8001ca2:	f003 fe7b 	bl	800599c <HAL_SPI_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001cac:	f000 fa00 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20025b1c 	.word	0x20025b1c
 8001cb8:	40015000 	.word	0x40015000

08001cbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc2:	f107 0308 	add.w	r3, r7, #8
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd0:	463b      	mov	r3, r7
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d50 <MX_TIM2_Init+0x94>)
 8001cda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <MX_TIM2_Init+0x94>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <MX_TIM2_Init+0x94>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001cec:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <MX_TIM2_Init+0x94>)
 8001cee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cf2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf4:	4b16      	ldr	r3, [pc, #88]	@ (8001d50 <MX_TIM2_Init+0x94>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfa:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <MX_TIM2_Init+0x94>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d00:	4813      	ldr	r0, [pc, #76]	@ (8001d50 <MX_TIM2_Init+0x94>)
 8001d02:	f004 f92b 	bl	8005f5c <HAL_TIM_Base_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d0c:	f000 f9d0 	bl	80020b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d16:	f107 0308 	add.w	r3, r7, #8
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480c      	ldr	r0, [pc, #48]	@ (8001d50 <MX_TIM2_Init+0x94>)
 8001d1e:	f004 f96c 	bl	8005ffa <HAL_TIM_ConfigClockSource>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d28:	f000 f9c2 	bl	80020b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d34:	463b      	mov	r3, r7
 8001d36:	4619      	mov	r1, r3
 8001d38:	4805      	ldr	r0, [pc, #20]	@ (8001d50 <MX_TIM2_Init+0x94>)
 8001d3a:	f004 fb6b 	bl	8006414 <HAL_TIMEx_MasterConfigSynchronization>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d44:	f000 f9b4 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d48:	bf00      	nop
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20025b74 	.word	0x20025b74

08001d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08e      	sub	sp, #56	@ 0x38
 8001d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	623b      	str	r3, [r7, #32]
 8001d6e:	4bb2      	ldr	r3, [pc, #712]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4ab1      	ldr	r2, [pc, #708]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001d74:	f043 0304 	orr.w	r3, r3, #4
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4baf      	ldr	r3, [pc, #700]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	623b      	str	r3, [r7, #32]
 8001d84:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
 8001d8a:	4bab      	ldr	r3, [pc, #684]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	4aaa      	ldr	r2, [pc, #680]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001d90:	f043 0320 	orr.w	r3, r3, #32
 8001d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d96:	4ba8      	ldr	r3, [pc, #672]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	61bb      	str	r3, [r7, #24]
 8001da6:	4ba4      	ldr	r3, [pc, #656]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	4aa3      	ldr	r2, [pc, #652]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001dac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db2:	4ba1      	ldr	r3, [pc, #644]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dba:	61bb      	str	r3, [r7, #24]
 8001dbc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	4b9d      	ldr	r3, [pc, #628]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	4a9c      	ldr	r2, [pc, #624]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dce:	4b9a      	ldr	r3, [pc, #616]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	4b96      	ldr	r3, [pc, #600]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	4a95      	ldr	r2, [pc, #596]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dea:	4b93      	ldr	r3, [pc, #588]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	4b8f      	ldr	r3, [pc, #572]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	4a8e      	ldr	r2, [pc, #568]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001e00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e06:	4b8c      	ldr	r3, [pc, #560]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	4b88      	ldr	r3, [pc, #544]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	4a87      	ldr	r2, [pc, #540]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001e1c:	f043 0310 	orr.w	r3, r3, #16
 8001e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e22:	4b85      	ldr	r3, [pc, #532]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	4b81      	ldr	r3, [pc, #516]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	4a80      	ldr	r2, [pc, #512]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001e38:	f043 0308 	orr.w	r3, r3, #8
 8001e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3e:	4b7e      	ldr	r3, [pc, #504]	@ (8002038 <MX_GPIO_Init+0x2e4>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	607b      	str	r3, [r7, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2116      	movs	r1, #22
 8001e4e:	487b      	ldr	r0, [pc, #492]	@ (800203c <MX_GPIO_Init+0x2e8>)
 8001e50:	f001 fb80 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001e54:	2200      	movs	r2, #0
 8001e56:	2180      	movs	r1, #128	@ 0x80
 8001e58:	4879      	ldr	r0, [pc, #484]	@ (8002040 <MX_GPIO_Init+0x2ec>)
 8001e5a:	f001 fb7b 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001e64:	4877      	ldr	r0, [pc, #476]	@ (8002044 <MX_GPIO_Init+0x2f0>)
 8001e66:	f001 fb75 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001e70:	4875      	ldr	r0, [pc, #468]	@ (8002048 <MX_GPIO_Init+0x2f4>)
 8001e72:	f001 fb6f 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001e76:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001e7a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e84:	2303      	movs	r3, #3
 8001e86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e88:	230c      	movs	r3, #12
 8001e8a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e90:	4619      	mov	r1, r3
 8001e92:	486e      	ldr	r0, [pc, #440]	@ (800204c <MX_GPIO_Init+0x2f8>)
 8001e94:	f001 f8a6 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ea8:	230c      	movs	r3, #12
 8001eaa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001eac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4862      	ldr	r0, [pc, #392]	@ (800203c <MX_GPIO_Init+0x2e8>)
 8001eb4:	f001 f896 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001eb8:	2316      	movs	r3, #22
 8001eba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ecc:	4619      	mov	r1, r3
 8001ece:	485b      	ldr	r0, [pc, #364]	@ (800203c <MX_GPIO_Init+0x2e8>)
 8001ed0:	f001 f888 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001ed4:	f248 0307 	movw	r3, #32775	@ 0x8007
 8001ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001eda:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001ede:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4855      	ldr	r0, [pc, #340]	@ (8002040 <MX_GPIO_Init+0x2ec>)
 8001eec:	f001 f87a 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001ef0:	2380      	movs	r3, #128	@ 0x80
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001f00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f04:	4619      	mov	r1, r3
 8001f06:	484e      	ldr	r0, [pc, #312]	@ (8002040 <MX_GPIO_Init+0x2ec>)
 8001f08:	f001 f86c 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001f0c:	2320      	movs	r3, #32
 8001f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f10:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001f14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001f1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4846      	ldr	r0, [pc, #280]	@ (800203c <MX_GPIO_Init+0x2e8>)
 8001f22:	f001 f85f 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001f26:	2304      	movs	r3, #4
 8001f28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001f32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f36:	4619      	mov	r1, r3
 8001f38:	4845      	ldr	r0, [pc, #276]	@ (8002050 <MX_GPIO_Init+0x2fc>)
 8001f3a:	f001 f853 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001f3e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f50:	230c      	movs	r3, #12
 8001f52:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f58:	4619      	mov	r1, r3
 8001f5a:	483b      	ldr	r0, [pc, #236]	@ (8002048 <MX_GPIO_Init+0x2f4>)
 8001f5c:	f001 f842 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001f60:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001f64:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f72:	230c      	movs	r3, #12
 8001f74:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4835      	ldr	r0, [pc, #212]	@ (8002054 <MX_GPIO_Init+0x300>)
 8001f7e:	f001 f831 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001f82:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001f86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001f94:	230c      	movs	r3, #12
 8001f96:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	482c      	ldr	r0, [pc, #176]	@ (8002050 <MX_GPIO_Init+0x2fc>)
 8001fa0:	f001 f820 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001fa4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001fb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4825      	ldr	r0, [pc, #148]	@ (8002050 <MX_GPIO_Init+0x2fc>)
 8001fba:	f001 f813 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001fbe:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fd0:	230c      	movs	r3, #12
 8001fd2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fd8:	4619      	mov	r1, r3
 8001fda:	481a      	ldr	r0, [pc, #104]	@ (8002044 <MX_GPIO_Init+0x2f0>)
 8001fdc:	f001 f802 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001fe0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001fee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4813      	ldr	r0, [pc, #76]	@ (8002044 <MX_GPIO_Init+0x2f0>)
 8001ff6:	f000 fff5 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001ffa:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002000:	2301      	movs	r3, #1
 8002002:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800200c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002010:	4619      	mov	r1, r3
 8002012:	480c      	ldr	r0, [pc, #48]	@ (8002044 <MX_GPIO_Init+0x2f0>)
 8002014:	f000 ffe6 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002018:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002026:	2303      	movs	r3, #3
 8002028:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800202a:	2307      	movs	r3, #7
 800202c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002032:	4619      	mov	r1, r3
 8002034:	e010      	b.n	8002058 <MX_GPIO_Init+0x304>
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800
 800203c:	40020800 	.word	0x40020800
 8002040:	40020000 	.word	0x40020000
 8002044:	40020c00 	.word	0x40020c00
 8002048:	40021800 	.word	0x40021800
 800204c:	40021400 	.word	0x40021400
 8002050:	40020400 	.word	0x40020400
 8002054:	40021000 	.word	0x40021000
 8002058:	4812      	ldr	r0, [pc, #72]	@ (80020a4 <MX_GPIO_Init+0x350>)
 800205a:	f000 ffc3 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800205e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002064:	2301      	movs	r3, #1
 8002066:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206c:	2300      	movs	r3, #0
 800206e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002070:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002074:	4619      	mov	r1, r3
 8002076:	480c      	ldr	r0, [pc, #48]	@ (80020a8 <MX_GPIO_Init+0x354>)
 8002078:	f000 ffb4 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800207c:	2360      	movs	r3, #96	@ 0x60
 800207e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800208c:	230c      	movs	r3, #12
 800208e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002090:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002094:	4619      	mov	r1, r3
 8002096:	4805      	ldr	r0, [pc, #20]	@ (80020ac <MX_GPIO_Init+0x358>)
 8002098:	f000 ffa4 	bl	8002fe4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800209c:	bf00      	nop
 800209e:	3738      	adds	r7, #56	@ 0x38
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40020000 	.word	0x40020000
 80020a8:	40021800 	.word	0x40021800
 80020ac:	40020400 	.word	0x40020400

080020b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020b4:	b672      	cpsid	i
}
 80020b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <Error_Handler+0x8>

080020bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	4b10      	ldr	r3, [pc, #64]	@ (8002108 <HAL_MspInit+0x4c>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002108 <HAL_MspInit+0x4c>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002108 <HAL_MspInit+0x4c>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	4b09      	ldr	r3, [pc, #36]	@ (8002108 <HAL_MspInit+0x4c>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	4a08      	ldr	r2, [pc, #32]	@ (8002108 <HAL_MspInit+0x4c>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ee:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <HAL_MspInit+0x4c>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020fa:	2007      	movs	r0, #7
 80020fc:	f000 ff3e 	bl	8002f7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40023800 	.word	0x40023800

0800210c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	@ 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a29      	ldr	r2, [pc, #164]	@ (80021d0 <HAL_I2C_MspInit+0xc4>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d14b      	bne.n	80021c6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	4b28      	ldr	r3, [pc, #160]	@ (80021d4 <HAL_I2C_MspInit+0xc8>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	4a27      	ldr	r2, [pc, #156]	@ (80021d4 <HAL_I2C_MspInit+0xc8>)
 8002138:	f043 0304 	orr.w	r3, r3, #4
 800213c:	6313      	str	r3, [r2, #48]	@ 0x30
 800213e:	4b25      	ldr	r3, [pc, #148]	@ (80021d4 <HAL_I2C_MspInit+0xc8>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	4b21      	ldr	r3, [pc, #132]	@ (80021d4 <HAL_I2C_MspInit+0xc8>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	4a20      	ldr	r2, [pc, #128]	@ (80021d4 <HAL_I2C_MspInit+0xc8>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6313      	str	r3, [r2, #48]	@ 0x30
 800215a:	4b1e      	ldr	r3, [pc, #120]	@ (80021d4 <HAL_I2C_MspInit+0xc8>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002166:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800216a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800216c:	2312      	movs	r3, #18
 800216e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002178:	2304      	movs	r3, #4
 800217a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4619      	mov	r1, r3
 8002182:	4815      	ldr	r0, [pc, #84]	@ (80021d8 <HAL_I2C_MspInit+0xcc>)
 8002184:	f000 ff2e 	bl	8002fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002188:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800218c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800218e:	2312      	movs	r3, #18
 8002190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800219a:	2304      	movs	r3, #4
 800219c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4619      	mov	r1, r3
 80021a4:	480d      	ldr	r0, [pc, #52]	@ (80021dc <HAL_I2C_MspInit+0xd0>)
 80021a6:	f000 ff1d 	bl	8002fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <HAL_I2C_MspInit+0xc8>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	4a08      	ldr	r2, [pc, #32]	@ (80021d4 <HAL_I2C_MspInit+0xc8>)
 80021b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ba:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <HAL_I2C_MspInit+0xc8>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80021c6:	bf00      	nop
 80021c8:	3728      	adds	r7, #40	@ 0x28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40005c00 	.word	0x40005c00
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40020800 	.word	0x40020800
 80021dc:	40020000 	.word	0x40020000

080021e0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b09a      	sub	sp, #104	@ 0x68
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021fc:	2230      	movs	r2, #48	@ 0x30
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f004 fcb5 	bl	8006b70 <memset>
  if(hltdc->Instance==LTDC)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a81      	ldr	r2, [pc, #516]	@ (8002410 <HAL_LTDC_MspInit+0x230>)
 800220c:	4293      	cmp	r3, r2
 800220e:	f040 80fb 	bne.w	8002408 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002212:	2308      	movs	r3, #8
 8002214:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8002216:	23c8      	movs	r3, #200	@ 0xc8
 8002218:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800221a:	2302      	movs	r3, #2
 800221c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 800221e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002222:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002224:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002228:	4618      	mov	r0, r3
 800222a:	f003 f977 	bl	800551c <HAL_RCCEx_PeriphCLKConfig>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002234:	f7ff ff3c 	bl	80020b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002238:	2300      	movs	r3, #0
 800223a:	623b      	str	r3, [r7, #32]
 800223c:	4b75      	ldr	r3, [pc, #468]	@ (8002414 <HAL_LTDC_MspInit+0x234>)
 800223e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002240:	4a74      	ldr	r2, [pc, #464]	@ (8002414 <HAL_LTDC_MspInit+0x234>)
 8002242:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002246:	6453      	str	r3, [r2, #68]	@ 0x44
 8002248:	4b72      	ldr	r3, [pc, #456]	@ (8002414 <HAL_LTDC_MspInit+0x234>)
 800224a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002250:	623b      	str	r3, [r7, #32]
 8002252:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002254:	2300      	movs	r3, #0
 8002256:	61fb      	str	r3, [r7, #28]
 8002258:	4b6e      	ldr	r3, [pc, #440]	@ (8002414 <HAL_LTDC_MspInit+0x234>)
 800225a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225c:	4a6d      	ldr	r2, [pc, #436]	@ (8002414 <HAL_LTDC_MspInit+0x234>)
 800225e:	f043 0320 	orr.w	r3, r3, #32
 8002262:	6313      	str	r3, [r2, #48]	@ 0x30
 8002264:	4b6b      	ldr	r3, [pc, #428]	@ (8002414 <HAL_LTDC_MspInit+0x234>)
 8002266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002268:	f003 0320 	and.w	r3, r3, #32
 800226c:	61fb      	str	r3, [r7, #28]
 800226e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002270:	2300      	movs	r3, #0
 8002272:	61bb      	str	r3, [r7, #24]
 8002274:	4b67      	ldr	r3, [pc, #412]	@ (8002414 <HAL_LTDC_MspInit+0x234>)
 8002276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002278:	4a66      	ldr	r2, [pc, #408]	@ (8002414 <HAL_LTDC_MspInit+0x234>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002280:	4b64      	ldr	r3, [pc, #400]	@ (8002414 <HAL_LTDC_MspInit+0x234>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	61bb      	str	r3, [r7, #24]
 800228a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	4b60      	ldr	r3, [pc, #384]	@ (8002414 <HAL_LTDC_MspInit+0x234>)
 8002292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002294:	4a5f      	ldr	r2, [pc, #380]	@ (8002414 <HAL_LTDC_MspInit+0x234>)
 8002296:	f043 0302 	orr.w	r3, r3, #2
 800229a:	6313      	str	r3, [r2, #48]	@ 0x30
 800229c:	4b5d      	ldr	r3, [pc, #372]	@ (8002414 <HAL_LTDC_MspInit+0x234>)
 800229e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022a8:	2300      	movs	r3, #0
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	4b59      	ldr	r3, [pc, #356]	@ (8002414 <HAL_LTDC_MspInit+0x234>)
 80022ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b0:	4a58      	ldr	r2, [pc, #352]	@ (8002414 <HAL_LTDC_MspInit+0x234>)
 80022b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b8:	4b56      	ldr	r3, [pc, #344]	@ (8002414 <HAL_LTDC_MspInit+0x234>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	4b52      	ldr	r3, [pc, #328]	@ (8002414 <HAL_LTDC_MspInit+0x234>)
 80022ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022cc:	4a51      	ldr	r2, [pc, #324]	@ (8002414 <HAL_LTDC_MspInit+0x234>)
 80022ce:	f043 0304 	orr.w	r3, r3, #4
 80022d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002414 <HAL_LTDC_MspInit+0x234>)
 80022d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022e0:	2300      	movs	r3, #0
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002414 <HAL_LTDC_MspInit+0x234>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002414 <HAL_LTDC_MspInit+0x234>)
 80022ea:	f043 0308 	orr.w	r3, r3, #8
 80022ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80022f0:	4b48      	ldr	r3, [pc, #288]	@ (8002414 <HAL_LTDC_MspInit+0x234>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80022fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002300:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800230e:	230e      	movs	r3, #14
 8002310:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002312:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002316:	4619      	mov	r1, r3
 8002318:	483f      	ldr	r0, [pc, #252]	@ (8002418 <HAL_LTDC_MspInit+0x238>)
 800231a:	f000 fe63 	bl	8002fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800231e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002322:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	2300      	movs	r3, #0
 800232e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002330:	230e      	movs	r3, #14
 8002332:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002334:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002338:	4619      	mov	r1, r3
 800233a:	4838      	ldr	r0, [pc, #224]	@ (800241c <HAL_LTDC_MspInit+0x23c>)
 800233c:	f000 fe52 	bl	8002fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002340:	2303      	movs	r3, #3
 8002342:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002350:	2309      	movs	r3, #9
 8002352:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002354:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002358:	4619      	mov	r1, r3
 800235a:	4831      	ldr	r0, [pc, #196]	@ (8002420 <HAL_LTDC_MspInit+0x240>)
 800235c:	f000 fe42 	bl	8002fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002360:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002364:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236e:	2300      	movs	r3, #0
 8002370:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002372:	230e      	movs	r3, #14
 8002374:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002376:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800237a:	4619      	mov	r1, r3
 800237c:	4828      	ldr	r0, [pc, #160]	@ (8002420 <HAL_LTDC_MspInit+0x240>)
 800237e:	f000 fe31 	bl	8002fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002382:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002386:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2302      	movs	r3, #2
 800238a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002390:	2300      	movs	r3, #0
 8002392:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002394:	230e      	movs	r3, #14
 8002396:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002398:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800239c:	4619      	mov	r1, r3
 800239e:	4821      	ldr	r0, [pc, #132]	@ (8002424 <HAL_LTDC_MspInit+0x244>)
 80023a0:	f000 fe20 	bl	8002fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80023a4:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80023a8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023b6:	230e      	movs	r3, #14
 80023b8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023be:	4619      	mov	r1, r3
 80023c0:	4819      	ldr	r0, [pc, #100]	@ (8002428 <HAL_LTDC_MspInit+0x248>)
 80023c2:	f000 fe0f 	bl	8002fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80023c6:	2348      	movs	r3, #72	@ 0x48
 80023c8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	2300      	movs	r3, #0
 80023d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023d6:	230e      	movs	r3, #14
 80023d8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023de:	4619      	mov	r1, r3
 80023e0:	4812      	ldr	r0, [pc, #72]	@ (800242c <HAL_LTDC_MspInit+0x24c>)
 80023e2:	f000 fdff 	bl	8002fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80023e6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80023ea:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ec:	2302      	movs	r3, #2
 80023ee:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f4:	2300      	movs	r3, #0
 80023f6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80023f8:	2309      	movs	r3, #9
 80023fa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002400:	4619      	mov	r1, r3
 8002402:	4808      	ldr	r0, [pc, #32]	@ (8002424 <HAL_LTDC_MspInit+0x244>)
 8002404:	f000 fdee 	bl	8002fe4 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002408:	bf00      	nop
 800240a:	3768      	adds	r7, #104	@ 0x68
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40016800 	.word	0x40016800
 8002414:	40023800 	.word	0x40023800
 8002418:	40021400 	.word	0x40021400
 800241c:	40020000 	.word	0x40020000
 8002420:	40020400 	.word	0x40020400
 8002424:	40021800 	.word	0x40021800
 8002428:	40020800 	.word	0x40020800
 800242c:	40020c00 	.word	0x40020c00

08002430 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0b      	ldr	r2, [pc, #44]	@ (800246c <HAL_RNG_MspInit+0x3c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d10d      	bne.n	800245e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	4b0a      	ldr	r3, [pc, #40]	@ (8002470 <HAL_RNG_MspInit+0x40>)
 8002448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800244a:	4a09      	ldr	r2, [pc, #36]	@ (8002470 <HAL_RNG_MspInit+0x40>)
 800244c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002450:	6353      	str	r3, [r2, #52]	@ 0x34
 8002452:	4b07      	ldr	r3, [pc, #28]	@ (8002470 <HAL_RNG_MspInit+0x40>)
 8002454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800245e:	bf00      	nop
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	50060800 	.word	0x50060800
 8002470:	40023800 	.word	0x40023800

08002474 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08a      	sub	sp, #40	@ 0x28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247c:	f107 0314 	add.w	r3, r7, #20
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a19      	ldr	r2, [pc, #100]	@ (80024f8 <HAL_SPI_MspInit+0x84>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d12c      	bne.n	80024f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	4b18      	ldr	r3, [pc, #96]	@ (80024fc <HAL_SPI_MspInit+0x88>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249e:	4a17      	ldr	r2, [pc, #92]	@ (80024fc <HAL_SPI_MspInit+0x88>)
 80024a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80024a6:	4b15      	ldr	r3, [pc, #84]	@ (80024fc <HAL_SPI_MspInit+0x88>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ae:	613b      	str	r3, [r7, #16]
 80024b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	4b11      	ldr	r3, [pc, #68]	@ (80024fc <HAL_SPI_MspInit+0x88>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ba:	4a10      	ldr	r2, [pc, #64]	@ (80024fc <HAL_SPI_MspInit+0x88>)
 80024bc:	f043 0320 	orr.w	r3, r3, #32
 80024c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024c2:	4b0e      	ldr	r3, [pc, #56]	@ (80024fc <HAL_SPI_MspInit+0x88>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	f003 0320 	and.w	r3, r3, #32
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80024ce:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80024d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d4:	2302      	movs	r3, #2
 80024d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80024e0:	2305      	movs	r3, #5
 80024e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	4619      	mov	r1, r3
 80024ea:	4805      	ldr	r0, [pc, #20]	@ (8002500 <HAL_SPI_MspInit+0x8c>)
 80024ec:	f000 fd7a 	bl	8002fe4 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80024f0:	bf00      	nop
 80024f2:	3728      	adds	r7, #40	@ 0x28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40015000 	.word	0x40015000
 80024fc:	40023800 	.word	0x40023800
 8002500:	40021400 	.word	0x40021400

08002504 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a08      	ldr	r2, [pc, #32]	@ (8002534 <HAL_SPI_MspDeInit+0x30>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d10a      	bne.n	800252c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002516:	4b08      	ldr	r3, [pc, #32]	@ (8002538 <HAL_SPI_MspDeInit+0x34>)
 8002518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251a:	4a07      	ldr	r2, [pc, #28]	@ (8002538 <HAL_SPI_MspDeInit+0x34>)
 800251c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002520:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002522:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002526:	4805      	ldr	r0, [pc, #20]	@ (800253c <HAL_SPI_MspDeInit+0x38>)
 8002528:	f000 ff08 	bl	800333c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40015000 	.word	0x40015000
 8002538:	40023800 	.word	0x40023800
 800253c:	40021400 	.word	0x40021400

08002540 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002550:	d10d      	bne.n	800256e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b09      	ldr	r3, [pc, #36]	@ (800257c <HAL_TIM_Base_MspInit+0x3c>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	4a08      	ldr	r2, [pc, #32]	@ (800257c <HAL_TIM_Base_MspInit+0x3c>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6413      	str	r3, [r2, #64]	@ 0x40
 8002562:	4b06      	ldr	r3, [pc, #24]	@ (800257c <HAL_TIM_Base_MspInit+0x3c>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800256e:	bf00      	nop
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800

08002580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002584:	bf00      	nop
 8002586:	e7fd      	b.n	8002584 <NMI_Handler+0x4>

08002588 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800258c:	bf00      	nop
 800258e:	e7fd      	b.n	800258c <HardFault_Handler+0x4>

08002590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002594:	bf00      	nop
 8002596:	e7fd      	b.n	8002594 <MemManage_Handler+0x4>

08002598 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800259c:	bf00      	nop
 800259e:	e7fd      	b.n	800259c <BusFault_Handler+0x4>

080025a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025a4:	bf00      	nop
 80025a6:	e7fd      	b.n	80025a4 <UsageFault_Handler+0x4>

080025a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025d6:	f000 fbdb 	bl	8002d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}

080025de <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80025e4:	f000 f9ce 	bl	8002984 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80025e8:	f000 f98e 	bl	8002908 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80025ec:	2202      	movs	r2, #2
 80025ee:	2103      	movs	r1, #3
 80025f0:	2082      	movs	r0, #130	@ 0x82
 80025f2:	f000 fa1b 	bl	8002a2c <I2C3_Write>
    HAL_Delay(5);
 80025f6:	2005      	movs	r0, #5
 80025f8:	f000 fbea 	bl	8002dd0 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80025fc:	2200      	movs	r2, #0
 80025fe:	2103      	movs	r1, #3
 8002600:	2082      	movs	r0, #130	@ 0x82
 8002602:	f000 fa13 	bl	8002a2c <I2C3_Write>
    HAL_Delay(2);
 8002606:	2002      	movs	r0, #2
 8002608:	f000 fbe2 	bl	8002dd0 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 800260c:	1cba      	adds	r2, r7, #2
 800260e:	2302      	movs	r3, #2
 8002610:	2100      	movs	r1, #0
 8002612:	2082      	movs	r0, #130	@ 0x82
 8002614:	f000 fa5a 	bl	8002acc <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002618:	887b      	ldrh	r3, [r7, #2]
 800261a:	021b      	lsls	r3, r3, #8
 800261c:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 800261e:	887b      	ldrh	r3, [r7, #2]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	b29a      	uxth	r2, r3
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	4313      	orrs	r3, r2
 8002628:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800262a:	88fb      	ldrh	r3, [r7, #6]
 800262c:	f640 0211 	movw	r2, #2065	@ 0x811
 8002630:	4293      	cmp	r3, r2
 8002632:	d001      	beq.n	8002638 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002634:	2303      	movs	r3, #3
 8002636:	e075      	b.n	8002724 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002638:	2202      	movs	r2, #2
 800263a:	2103      	movs	r1, #3
 800263c:	2082      	movs	r0, #130	@ 0x82
 800263e:	f000 f9f5 	bl	8002a2c <I2C3_Write>
    HAL_Delay(5);
 8002642:	2005      	movs	r0, #5
 8002644:	f000 fbc4 	bl	8002dd0 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002648:	2200      	movs	r2, #0
 800264a:	2103      	movs	r1, #3
 800264c:	2082      	movs	r0, #130	@ 0x82
 800264e:	f000 f9ed 	bl	8002a2c <I2C3_Write>
    HAL_Delay(2);
 8002652:	2002      	movs	r0, #2
 8002654:	f000 fbbc 	bl	8002dd0 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002658:	2004      	movs	r0, #4
 800265a:	f000 f867 	bl	800272c <STMPE811_Read>
 800265e:	4603      	mov	r3, r0
 8002660:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002662:	797b      	ldrb	r3, [r7, #5]
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800266a:	797b      	ldrb	r3, [r7, #5]
 800266c:	461a      	mov	r2, r3
 800266e:	2104      	movs	r1, #4
 8002670:	2082      	movs	r0, #130	@ 0x82
 8002672:	f000 f9db 	bl	8002a2c <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002676:	2004      	movs	r0, #4
 8002678:	f000 f858 	bl	800272c <STMPE811_Read>
 800267c:	4603      	mov	r3, r0
 800267e:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002680:	797b      	ldrb	r3, [r7, #5]
 8002682:	f023 0302 	bic.w	r3, r3, #2
 8002686:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002688:	797b      	ldrb	r3, [r7, #5]
 800268a:	461a      	mov	r2, r3
 800268c:	2104      	movs	r1, #4
 800268e:	2082      	movs	r0, #130	@ 0x82
 8002690:	f000 f9cc 	bl	8002a2c <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002694:	2249      	movs	r2, #73	@ 0x49
 8002696:	2120      	movs	r1, #32
 8002698:	2082      	movs	r0, #130	@ 0x82
 800269a:	f000 f9c7 	bl	8002a2c <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 800269e:	2002      	movs	r0, #2
 80026a0:	f000 fb96 	bl	8002dd0 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80026a4:	2201      	movs	r2, #1
 80026a6:	2121      	movs	r1, #33	@ 0x21
 80026a8:	2082      	movs	r0, #130	@ 0x82
 80026aa:	f000 f9bf 	bl	8002a2c <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80026ae:	2017      	movs	r0, #23
 80026b0:	f000 f83c 	bl	800272c <STMPE811_Read>
 80026b4:	4603      	mov	r3, r0
 80026b6:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80026b8:	797b      	ldrb	r3, [r7, #5]
 80026ba:	f043 031e 	orr.w	r3, r3, #30
 80026be:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80026c0:	797b      	ldrb	r3, [r7, #5]
 80026c2:	461a      	mov	r2, r3
 80026c4:	2117      	movs	r1, #23
 80026c6:	2082      	movs	r0, #130	@ 0x82
 80026c8:	f000 f9b0 	bl	8002a2c <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80026cc:	229a      	movs	r2, #154	@ 0x9a
 80026ce:	2141      	movs	r1, #65	@ 0x41
 80026d0:	2082      	movs	r0, #130	@ 0x82
 80026d2:	f000 f9ab 	bl	8002a2c <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80026d6:	2201      	movs	r2, #1
 80026d8:	214a      	movs	r1, #74	@ 0x4a
 80026da:	2082      	movs	r0, #130	@ 0x82
 80026dc:	f000 f9a6 	bl	8002a2c <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80026e0:	2201      	movs	r2, #1
 80026e2:	214b      	movs	r1, #75	@ 0x4b
 80026e4:	2082      	movs	r0, #130	@ 0x82
 80026e6:	f000 f9a1 	bl	8002a2c <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80026ea:	2200      	movs	r2, #0
 80026ec:	214b      	movs	r1, #75	@ 0x4b
 80026ee:	2082      	movs	r0, #130	@ 0x82
 80026f0:	f000 f99c 	bl	8002a2c <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80026f4:	2201      	movs	r2, #1
 80026f6:	2156      	movs	r1, #86	@ 0x56
 80026f8:	2082      	movs	r0, #130	@ 0x82
 80026fa:	f000 f997 	bl	8002a2c <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80026fe:	2201      	movs	r2, #1
 8002700:	2158      	movs	r1, #88	@ 0x58
 8002702:	2082      	movs	r0, #130	@ 0x82
 8002704:	f000 f992 	bl	8002a2c <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002708:	2203      	movs	r2, #3
 800270a:	2140      	movs	r1, #64	@ 0x40
 800270c:	2082      	movs	r0, #130	@ 0x82
 800270e:	f000 f98d 	bl	8002a2c <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002712:	22ff      	movs	r2, #255	@ 0xff
 8002714:	210b      	movs	r1, #11
 8002716:	2082      	movs	r0, #130	@ 0x82
 8002718:	f000 f988 	bl	8002a2c <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 800271c:	20c8      	movs	r0, #200	@ 0xc8
 800271e:	f000 fb57 	bl	8002dd0 <HAL_Delay>

    return STMPE811_State_Ok;
 8002722:	2302      	movs	r3, #2

}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002736:	f107 020f 	add.w	r2, r7, #15
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	4619      	mov	r1, r3
 800273e:	2082      	movs	r0, #130	@ 0x82
 8002740:	f000 f99e 	bl	8002a80 <I2C3_Read>

    return readData;
 8002744:	7bfb      	ldrb	r3, [r7, #15]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	791a      	ldrb	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 800275e:	2040      	movs	r0, #64	@ 0x40
 8002760:	f7ff ffe4 	bl	800272c <STMPE811_Read>
 8002764:	4603      	mov	r3, r0
 8002766:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800276c:	2b00      	cmp	r3, #0
 800276e:	db0e      	blt.n	800278e <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002776:	2201      	movs	r2, #1
 8002778:	214b      	movs	r1, #75	@ 0x4b
 800277a:	2082      	movs	r0, #130	@ 0x82
 800277c:	f000 f956 	bl	8002a2c <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002780:	2200      	movs	r2, #0
 8002782:	214b      	movs	r1, #75	@ 0x4b
 8002784:	2082      	movs	r0, #130	@ 0x82
 8002786:	f000 f951 	bl	8002a2c <I2C3_Write>

        return STMPE811_State_Released;
 800278a:	2301      	movs	r3, #1
 800278c:	e0a7      	b.n	80028de <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	799b      	ldrb	r3, [r3, #6]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d117      	bne.n	80027c6 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f9b8 	bl	8002b10 <TM_STMPE811_ReadX>
 80027a0:	4603      	mov	r3, r0
 80027a2:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	885b      	ldrh	r3, [r3, #2]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 fa0d 	bl	8002bd0 <TM_STMPE811_ReadY>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80027bc:	3301      	adds	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	805a      	strh	r2, [r3, #2]
 80027c4:	e048      	b.n	8002858 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	799b      	ldrb	r3, [r3, #6]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d112      	bne.n	80027f4 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 f99c 	bl	8002b10 <TM_STMPE811_ReadX>
 80027d8:	4603      	mov	r3, r0
 80027da:	461a      	mov	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	885b      	ldrh	r3, [r3, #2]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 f9f3 	bl	8002bd0 <TM_STMPE811_ReadY>
 80027ea:	4603      	mov	r3, r0
 80027ec:	461a      	mov	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	805a      	strh	r2, [r3, #2]
 80027f2:	e031      	b.n	8002858 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	799b      	ldrb	r3, [r3, #6]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d115      	bne.n	8002828 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	885b      	ldrh	r3, [r3, #2]
 8002800:	4618      	mov	r0, r3
 8002802:	f000 f985 	bl	8002b10 <TM_STMPE811_ReadX>
 8002806:	4603      	mov	r3, r0
 8002808:	461a      	mov	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f000 f9dc 	bl	8002bd0 <TM_STMPE811_ReadY>
 8002818:	4603      	mov	r3, r0
 800281a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800281e:	3301      	adds	r3, #1
 8002820:	b29a      	uxth	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	801a      	strh	r2, [r3, #0]
 8002826:	e017      	b.n	8002858 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	799b      	ldrb	r3, [r3, #6]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d113      	bne.n	8002858 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f000 f96b 	bl	8002b10 <TM_STMPE811_ReadX>
 800283a:	4603      	mov	r3, r0
 800283c:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002840:	b29a      	uxth	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f000 f9c0 	bl	8002bd0 <TM_STMPE811_ReadY>
 8002850:	4603      	mov	r3, r0
 8002852:	461a      	mov	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002858:	2201      	movs	r2, #1
 800285a:	214b      	movs	r1, #75	@ 0x4b
 800285c:	2082      	movs	r0, #130	@ 0x82
 800285e:	f000 f8e5 	bl	8002a2c <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002862:	2200      	movs	r2, #0
 8002864:	214b      	movs	r1, #75	@ 0x4b
 8002866:	2082      	movs	r0, #130	@ 0x82
 8002868:	f000 f8e0 	bl	8002a2c <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	799b      	ldrb	r3, [r3, #6]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <STMPE811_ReadTouch+0x12e>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	799b      	ldrb	r3, [r3, #6]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d115      	bne.n	80028a8 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d027      	beq.n	80028d4 <STMPE811_ReadTouch+0x186>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	2bee      	cmp	r3, #238	@ 0xee
 800288a:	d823      	bhi.n	80028d4 <STMPE811_ReadTouch+0x186>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	885b      	ldrh	r3, [r3, #2]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d01f      	beq.n	80028d4 <STMPE811_ReadTouch+0x186>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	885b      	ldrh	r3, [r3, #2]
 8002898:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 800289c:	d81a      	bhi.n	80028d4 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80028a4:	2300      	movs	r3, #0
 80028a6:	e01a      	b.n	80028de <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d012      	beq.n	80028d6 <STMPE811_ReadTouch+0x188>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80028b8:	d80d      	bhi.n	80028d6 <STMPE811_ReadTouch+0x188>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	885b      	ldrh	r3, [r3, #2]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d009      	beq.n	80028d6 <STMPE811_ReadTouch+0x188>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	885b      	ldrh	r3, [r3, #2]
 80028c6:	2bee      	cmp	r3, #238	@ 0xee
 80028c8:	d805      	bhi.n	80028d6 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80028d0:	2300      	movs	r3, #0
 80028d2:	e004      	b.n	80028de <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80028d4:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 80028dc:	2301      	movs	r3, #1
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80028ec:	4b05      	ldr	r3, [pc, #20]	@ (8002904 <verifyHAL_I2C_IS_OKAY+0x1c>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80028f4:	bf00      	nop
 80028f6:	e7fd      	b.n	80028f4 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20025c10 	.word	0x20025c10

08002908 <I2C3_Init>:

static void I2C3_Init()
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	603b      	str	r3, [r7, #0]
 8002912:	4b18      	ldr	r3, [pc, #96]	@ (8002974 <I2C3_Init+0x6c>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	4a17      	ldr	r2, [pc, #92]	@ (8002974 <I2C3_Init+0x6c>)
 8002918:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800291c:	6413      	str	r3, [r2, #64]	@ 0x40
 800291e:	4b15      	ldr	r3, [pc, #84]	@ (8002974 <I2C3_Init+0x6c>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002922:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800292a:	4b13      	ldr	r3, [pc, #76]	@ (8002978 <I2C3_Init+0x70>)
 800292c:	4a13      	ldr	r2, [pc, #76]	@ (800297c <I2C3_Init+0x74>)
 800292e:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002930:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <I2C3_Init+0x70>)
 8002932:	4a13      	ldr	r2, [pc, #76]	@ (8002980 <I2C3_Init+0x78>)
 8002934:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002936:	4b10      	ldr	r3, [pc, #64]	@ (8002978 <I2C3_Init+0x70>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 800293c:	4b0e      	ldr	r3, [pc, #56]	@ (8002978 <I2C3_Init+0x70>)
 800293e:	2200      	movs	r2, #0
 8002940:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002942:	4b0d      	ldr	r3, [pc, #52]	@ (8002978 <I2C3_Init+0x70>)
 8002944:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002948:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800294a:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <I2C3_Init+0x70>)
 800294c:	2200      	movs	r2, #0
 800294e:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002950:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <I2C3_Init+0x70>)
 8002952:	2200      	movs	r2, #0
 8002954:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002956:	4808      	ldr	r0, [pc, #32]	@ (8002978 <I2C3_Init+0x70>)
 8002958:	f000 fe16 	bl	8003588 <HAL_I2C_Init>
 800295c:	4603      	mov	r3, r0
 800295e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002966:	bf00      	nop
 8002968:	e7fd      	b.n	8002966 <I2C3_Init+0x5e>
    }
    return;
 800296a:	bf00      	nop
}
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800
 8002978:	20025bbc 	.word	0x20025bbc
 800297c:	40005c00 	.word	0x40005c00
 8002980:	000186a0 	.word	0x000186a0

08002984 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298a:	f107 030c 	add.w	r3, r7, #12
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	609a      	str	r2, [r3, #8]
 8002996:	60da      	str	r2, [r3, #12]
 8002998:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	4b20      	ldr	r3, [pc, #128]	@ (8002a20 <I2C3_MspInit+0x9c>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002a20 <I2C3_MspInit+0x9c>)
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002a20 <I2C3_MspInit+0x9c>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
 80029ba:	4b19      	ldr	r3, [pc, #100]	@ (8002a20 <I2C3_MspInit+0x9c>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	4a18      	ldr	r2, [pc, #96]	@ (8002a20 <I2C3_MspInit+0x9c>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c6:	4b16      	ldr	r3, [pc, #88]	@ (8002a20 <I2C3_MspInit+0x9c>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	607b      	str	r3, [r7, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80029d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029d8:	2312      	movs	r3, #18
 80029da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029e4:	2304      	movs	r3, #4
 80029e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80029e8:	f107 030c 	add.w	r3, r7, #12
 80029ec:	4619      	mov	r1, r3
 80029ee:	480d      	ldr	r0, [pc, #52]	@ (8002a24 <I2C3_MspInit+0xa0>)
 80029f0:	f000 faf8 	bl	8002fe4 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80029f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029fa:	2312      	movs	r3, #18
 80029fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a06:	2304      	movs	r3, #4
 8002a08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002a0a:	f107 030c 	add.w	r3, r7, #12
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4805      	ldr	r0, [pc, #20]	@ (8002a28 <I2C3_MspInit+0xa4>)
 8002a12:	f000 fae7 	bl	8002fe4 <HAL_GPIO_Init>
    
}
 8002a16:	bf00      	nop
 8002a18:	3720      	adds	r7, #32
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40020800 	.word	0x40020800
 8002a28:	40020000 	.word	0x40020000

08002a2c <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af04      	add	r7, sp, #16
 8002a32:	4603      	mov	r3, r0
 8002a34:	80fb      	strh	r3, [r7, #6]
 8002a36:	460b      	mov	r3, r1
 8002a38:	717b      	strb	r3, [r7, #5]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002a3e:	793b      	ldrb	r3, [r7, #4]
 8002a40:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002a42:	797b      	ldrb	r3, [r7, #5]
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	88f9      	ldrh	r1, [r7, #6]
 8002a48:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <I2C3_Write+0x48>)
 8002a4a:	9302      	str	r3, [sp, #8]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	9301      	str	r3, [sp, #4]
 8002a50:	f107 030f 	add.w	r3, r7, #15
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	2301      	movs	r3, #1
 8002a58:	4807      	ldr	r0, [pc, #28]	@ (8002a78 <I2C3_Write+0x4c>)
 8002a5a:	f000 fed9 	bl	8003810 <HAL_I2C_Mem_Write>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	461a      	mov	r2, r3
 8002a62:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <I2C3_Write+0x50>)
 8002a64:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002a66:	f7ff ff3f 	bl	80028e8 <verifyHAL_I2C_IS_OKAY>
}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	0003d090 	.word	0x0003d090
 8002a78:	20025bbc 	.word	0x20025bbc
 8002a7c:	20025c10 	.word	0x20025c10

08002a80 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af04      	add	r7, sp, #16
 8002a86:	4603      	mov	r3, r0
 8002a88:	603a      	str	r2, [r7, #0]
 8002a8a:	71fb      	strb	r3, [r7, #7]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	b299      	uxth	r1, r3
 8002a94:	79bb      	ldrb	r3, [r7, #6]
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	4b09      	ldr	r3, [pc, #36]	@ (8002ac0 <I2C3_Read+0x40>)
 8002a9a:	9302      	str	r3, [sp, #8]
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	4807      	ldr	r0, [pc, #28]	@ (8002ac4 <I2C3_Read+0x44>)
 8002aa8:	f000 ffac 	bl	8003a04 <HAL_I2C_Mem_Read>
 8002aac:	4603      	mov	r3, r0
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <I2C3_Read+0x48>)
 8002ab2:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002ab4:	f7ff ff18 	bl	80028e8 <verifyHAL_I2C_IS_OKAY>
}
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	0003d090 	.word	0x0003d090
 8002ac4:	20025bbc 	.word	0x20025bbc
 8002ac8:	20025c10 	.word	0x20025c10

08002acc <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af04      	add	r7, sp, #16
 8002ad2:	603a      	str	r2, [r7, #0]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71fb      	strb	r3, [r7, #7]
 8002ada:	460b      	mov	r3, r1
 8002adc:	71bb      	strb	r3, [r7, #6]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	b299      	uxth	r1, r3
 8002ae6:	79bb      	ldrb	r3, [r7, #6]
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	4b07      	ldr	r3, [pc, #28]	@ (8002b08 <I2C3_MulitByteRead+0x3c>)
 8002aec:	9302      	str	r3, [sp, #8]
 8002aee:	88bb      	ldrh	r3, [r7, #4]
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	2301      	movs	r3, #1
 8002af8:	4804      	ldr	r0, [pc, #16]	@ (8002b0c <I2C3_MulitByteRead+0x40>)
 8002afa:	f000 ff83 	bl	8003a04 <HAL_I2C_Mem_Read>
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	0003d090 	.word	0x0003d090
 8002b0c:	20025bbc 	.word	0x20025bbc

08002b10 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002b1a:	204d      	movs	r0, #77	@ 0x4d
 8002b1c:	f7ff fe06 	bl	800272c <STMPE811_Read>
 8002b20:	4603      	mov	r3, r0
 8002b22:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002b24:	204e      	movs	r0, #78	@ 0x4e
 8002b26:	f7ff fe01 	bl	800272c <STMPE811_Read>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002b2e:	7a7b      	ldrb	r3, [r7, #9]
 8002b30:	b21b      	sxth	r3, r3
 8002b32:	021b      	lsls	r3, r3, #8
 8002b34:	b21a      	sxth	r2, r3
 8002b36:	7a3b      	ldrb	r3, [r7, #8]
 8002b38:	b21b      	sxth	r3, r3
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002b3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b42:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002b46:	4293      	cmp	r3, r2
 8002b48:	dc06      	bgt.n	8002b58 <TM_STMPE811_ReadX+0x48>
        val = 3900 - val;
 8002b4a:	89fb      	ldrh	r3, [r7, #14]
 8002b4c:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002b50:	330c      	adds	r3, #12
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	81fb      	strh	r3, [r7, #14]
 8002b56:	e005      	b.n	8002b64 <TM_STMPE811_ReadX+0x54>
    } else {
        val = 3800 - val;
 8002b58:	89fb      	ldrh	r3, [r7, #14]
 8002b5a:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002b5e:	3308      	adds	r3, #8
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002b64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b68:	4a18      	ldr	r2, [pc, #96]	@ (8002bcc <TM_STMPE811_ReadX+0xbc>)
 8002b6a:	fb82 1203 	smull	r1, r2, r2, r3
 8002b6e:	441a      	add	r2, r3
 8002b70:	10d2      	asrs	r2, r2, #3
 8002b72:	17db      	asrs	r3, r3, #31
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002b78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b7c:	2bef      	cmp	r3, #239	@ 0xef
 8002b7e:	dd02      	ble.n	8002b86 <TM_STMPE811_ReadX+0x76>
        val = 239;
 8002b80:	23ef      	movs	r3, #239	@ 0xef
 8002b82:	81fb      	strh	r3, [r7, #14]
 8002b84:	e005      	b.n	8002b92 <TM_STMPE811_ReadX+0x82>
    } else if (val < 0) {
 8002b86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	da01      	bge.n	8002b92 <TM_STMPE811_ReadX+0x82>
        val = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002b92:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	dd05      	ble.n	8002ba8 <TM_STMPE811_ReadX+0x98>
 8002b9c:	89fa      	ldrh	r2, [r7, #14]
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	b21b      	sxth	r3, r3
 8002ba6:	e004      	b.n	8002bb2 <TM_STMPE811_ReadX+0xa2>
 8002ba8:	89fb      	ldrh	r3, [r7, #14]
 8002baa:	88fa      	ldrh	r2, [r7, #6]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	b21b      	sxth	r3, r3
 8002bb2:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002bb4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	dd01      	ble.n	8002bc0 <TM_STMPE811_ReadX+0xb0>
        return val;
 8002bbc:	89fb      	ldrh	r3, [r7, #14]
 8002bbe:	e000      	b.n	8002bc2 <TM_STMPE811_ReadX+0xb2>
    }
    return x;
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	88888889 	.word	0x88888889

08002bd0 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002bda:	204f      	movs	r0, #79	@ 0x4f
 8002bdc:	f7ff fda6 	bl	800272c <STMPE811_Read>
 8002be0:	4603      	mov	r3, r0
 8002be2:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002be4:	2050      	movs	r0, #80	@ 0x50
 8002be6:	f7ff fda1 	bl	800272c <STMPE811_Read>
 8002bea:	4603      	mov	r3, r0
 8002bec:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002bee:	7a7b      	ldrb	r3, [r7, #9]
 8002bf0:	b21b      	sxth	r3, r3
 8002bf2:	021b      	lsls	r3, r3, #8
 8002bf4:	b21a      	sxth	r2, r3
 8002bf6:	7a3b      	ldrb	r3, [r7, #8]
 8002bf8:	b21b      	sxth	r3, r3
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002bfe:	89fb      	ldrh	r3, [r7, #14]
 8002c00:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002c08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c0c:	4a18      	ldr	r2, [pc, #96]	@ (8002c70 <TM_STMPE811_ReadY+0xa0>)
 8002c0e:	fb82 1203 	smull	r1, r2, r2, r3
 8002c12:	1052      	asrs	r2, r2, #1
 8002c14:	17db      	asrs	r3, r3, #31
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002c1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	dc02      	bgt.n	8002c28 <TM_STMPE811_ReadY+0x58>
        val = 0;
 8002c22:	2300      	movs	r3, #0
 8002c24:	81fb      	strh	r3, [r7, #14]
 8002c26:	e007      	b.n	8002c38 <TM_STMPE811_ReadY+0x68>
    } else if (val >= 320) {
 8002c28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c2c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002c30:	db02      	blt.n	8002c38 <TM_STMPE811_ReadY+0x68>
        val = 319;
 8002c32:	f240 133f 	movw	r3, #319	@ 0x13f
 8002c36:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002c38:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	dd05      	ble.n	8002c4e <TM_STMPE811_ReadY+0x7e>
 8002c42:	89fa      	ldrh	r2, [r7, #14]
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	b21b      	sxth	r3, r3
 8002c4c:	e004      	b.n	8002c58 <TM_STMPE811_ReadY+0x88>
 8002c4e:	89fb      	ldrh	r3, [r7, #14]
 8002c50:	88fa      	ldrh	r2, [r7, #6]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	b21b      	sxth	r3, r3
 8002c58:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002c5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	dd01      	ble.n	8002c66 <TM_STMPE811_ReadY+0x96>
        return val;
 8002c62:	89fb      	ldrh	r3, [r7, #14]
 8002c64:	e000      	b.n	8002c68 <TM_STMPE811_ReadY+0x98>
    }
    return y;
 8002c66:	88fb      	ldrh	r3, [r7, #6]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	2e8ba2e9 	.word	0x2e8ba2e9

08002c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c78:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <SystemInit+0x20>)
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7e:	4a05      	ldr	r2, [pc, #20]	@ (8002c94 <SystemInit+0x20>)
 8002c80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002c98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c9c:	f7ff ffea 	bl	8002c74 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ca0:	480c      	ldr	r0, [pc, #48]	@ (8002cd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ca2:	490d      	ldr	r1, [pc, #52]	@ (8002cd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8002cdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ca8:	e002      	b.n	8002cb0 <LoopCopyDataInit>

08002caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cae:	3304      	adds	r3, #4

08002cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb4:	d3f9      	bcc.n	8002caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8002ce4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cbc:	e001      	b.n	8002cc2 <LoopFillZerobss>

08002cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc0:	3204      	adds	r2, #4

08002cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc4:	d3fb      	bcc.n	8002cbe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002cc6:	f003 ff61 	bl	8006b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cca:	f7fe fe34 	bl	8001936 <main>
  bx  lr    
 8002cce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002cd0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cd8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002cdc:	0800814c 	.word	0x0800814c
  ldr r2, =_sbss
 8002ce0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002ce4:	20025e0c 	.word	0x20025e0c

08002ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ce8:	e7fe      	b.n	8002ce8 <ADC_IRQHandler>
	...

08002cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8002d2c <HAL_Init+0x40>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8002d2c <HAL_Init+0x40>)
 8002cf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d2c <HAL_Init+0x40>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0a      	ldr	r2, [pc, #40]	@ (8002d2c <HAL_Init+0x40>)
 8002d02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d08:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <HAL_Init+0x40>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a07      	ldr	r2, [pc, #28]	@ (8002d2c <HAL_Init+0x40>)
 8002d0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d14:	2003      	movs	r0, #3
 8002d16:	f000 f931 	bl	8002f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f000 f808 	bl	8002d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d20:	f7ff f9cc 	bl	80020bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40023c00 	.word	0x40023c00

08002d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d38:	4b12      	ldr	r3, [pc, #72]	@ (8002d84 <HAL_InitTick+0x54>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	4b12      	ldr	r3, [pc, #72]	@ (8002d88 <HAL_InitTick+0x58>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4619      	mov	r1, r3
 8002d42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f93b 	bl	8002fca <HAL_SYSTICK_Config>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e00e      	b.n	8002d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b0f      	cmp	r3, #15
 8002d62:	d80a      	bhi.n	8002d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d64:	2200      	movs	r2, #0
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d6c:	f000 f911 	bl	8002f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d70:	4a06      	ldr	r2, [pc, #24]	@ (8002d8c <HAL_InitTick+0x5c>)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	e000      	b.n	8002d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20000010 	.word	0x20000010
 8002d88:	20000018 	.word	0x20000018
 8002d8c:	20000014 	.word	0x20000014

08002d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d94:	4b06      	ldr	r3, [pc, #24]	@ (8002db0 <HAL_IncTick+0x20>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <HAL_IncTick+0x24>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4413      	add	r3, r2
 8002da0:	4a04      	ldr	r2, [pc, #16]	@ (8002db4 <HAL_IncTick+0x24>)
 8002da2:	6013      	str	r3, [r2, #0]
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000018 	.word	0x20000018
 8002db4:	20025c14 	.word	0x20025c14

08002db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return uwTick;
 8002dbc:	4b03      	ldr	r3, [pc, #12]	@ (8002dcc <HAL_GetTick+0x14>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20025c14 	.word	0x20025c14

08002dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dd8:	f7ff ffee 	bl	8002db8 <HAL_GetTick>
 8002ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002de8:	d005      	beq.n	8002df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dea:	4b0a      	ldr	r3, [pc, #40]	@ (8002e14 <HAL_Delay+0x44>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4413      	add	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002df6:	bf00      	nop
 8002df8:	f7ff ffde 	bl	8002db8 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d8f7      	bhi.n	8002df8 <HAL_Delay+0x28>
  {
  }
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000018 	.word	0x20000018

08002e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e28:	4b0c      	ldr	r3, [pc, #48]	@ (8002e5c <__NVIC_SetPriorityGrouping+0x44>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e34:	4013      	ands	r3, r2
 8002e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e4a:	4a04      	ldr	r2, [pc, #16]	@ (8002e5c <__NVIC_SetPriorityGrouping+0x44>)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	60d3      	str	r3, [r2, #12]
}
 8002e50:	bf00      	nop
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e64:	4b04      	ldr	r3, [pc, #16]	@ (8002e78 <__NVIC_GetPriorityGrouping+0x18>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	0a1b      	lsrs	r3, r3, #8
 8002e6a:	f003 0307 	and.w	r3, r3, #7
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	6039      	str	r1, [r7, #0]
 8002e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	db0a      	blt.n	8002ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	490c      	ldr	r1, [pc, #48]	@ (8002ec8 <__NVIC_SetPriority+0x4c>)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	0112      	lsls	r2, r2, #4
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ea4:	e00a      	b.n	8002ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	4908      	ldr	r1, [pc, #32]	@ (8002ecc <__NVIC_SetPriority+0x50>)
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	3b04      	subs	r3, #4
 8002eb4:	0112      	lsls	r2, r2, #4
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	440b      	add	r3, r1
 8002eba:	761a      	strb	r2, [r3, #24]
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000e100 	.word	0xe000e100
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b089      	sub	sp, #36	@ 0x24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f1c3 0307 	rsb	r3, r3, #7
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	bf28      	it	cs
 8002eee:	2304      	movcs	r3, #4
 8002ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	2b06      	cmp	r3, #6
 8002ef8:	d902      	bls.n	8002f00 <NVIC_EncodePriority+0x30>
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3b03      	subs	r3, #3
 8002efe:	e000      	b.n	8002f02 <NVIC_EncodePriority+0x32>
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43da      	mvns	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	401a      	ands	r2, r3
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f22:	43d9      	mvns	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f28:	4313      	orrs	r3, r2
         );
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3724      	adds	r7, #36	@ 0x24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f48:	d301      	bcc.n	8002f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e00f      	b.n	8002f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f78 <SysTick_Config+0x40>)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f56:	210f      	movs	r1, #15
 8002f58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f5c:	f7ff ff8e 	bl	8002e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f60:	4b05      	ldr	r3, [pc, #20]	@ (8002f78 <SysTick_Config+0x40>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f66:	4b04      	ldr	r3, [pc, #16]	@ (8002f78 <SysTick_Config+0x40>)
 8002f68:	2207      	movs	r2, #7
 8002f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	e000e010 	.word	0xe000e010

08002f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7ff ff47 	bl	8002e18 <__NVIC_SetPriorityGrouping>
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b086      	sub	sp, #24
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	4603      	mov	r3, r0
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fa4:	f7ff ff5c 	bl	8002e60 <__NVIC_GetPriorityGrouping>
 8002fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	6978      	ldr	r0, [r7, #20]
 8002fb0:	f7ff ff8e 	bl	8002ed0 <NVIC_EncodePriority>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fba:	4611      	mov	r1, r2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff ff5d 	bl	8002e7c <__NVIC_SetPriority>
}
 8002fc2:	bf00      	nop
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff ffb0 	bl	8002f38 <SysTick_Config>
 8002fd8:	4603      	mov	r3, r0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b089      	sub	sp, #36	@ 0x24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	e177      	b.n	80032f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003000:	2201      	movs	r2, #1
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4013      	ands	r3, r2
 8003012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	429a      	cmp	r2, r3
 800301a:	f040 8166 	bne.w	80032ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	2b01      	cmp	r3, #1
 8003028:	d005      	beq.n	8003036 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003032:	2b02      	cmp	r3, #2
 8003034:	d130      	bne.n	8003098 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	2203      	movs	r2, #3
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4013      	ands	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4313      	orrs	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800306c:	2201      	movs	r2, #1
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	f003 0201 	and.w	r2, r3, #1
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d017      	beq.n	80030d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	2203      	movs	r2, #3
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4013      	ands	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d123      	bne.n	8003128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	08da      	lsrs	r2, r3, #3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3208      	adds	r2, #8
 80030e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	220f      	movs	r2, #15
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	08da      	lsrs	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3208      	adds	r2, #8
 8003122:	69b9      	ldr	r1, [r7, #24]
 8003124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	2203      	movs	r2, #3
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4013      	ands	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 0203 	and.w	r2, r3, #3
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4313      	orrs	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 80c0 	beq.w	80032ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	4b66      	ldr	r3, [pc, #408]	@ (8003308 <HAL_GPIO_Init+0x324>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003172:	4a65      	ldr	r2, [pc, #404]	@ (8003308 <HAL_GPIO_Init+0x324>)
 8003174:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003178:	6453      	str	r3, [r2, #68]	@ 0x44
 800317a:	4b63      	ldr	r3, [pc, #396]	@ (8003308 <HAL_GPIO_Init+0x324>)
 800317c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003186:	4a61      	ldr	r2, [pc, #388]	@ (800330c <HAL_GPIO_Init+0x328>)
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	089b      	lsrs	r3, r3, #2
 800318c:	3302      	adds	r3, #2
 800318e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	220f      	movs	r2, #15
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4013      	ands	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a58      	ldr	r2, [pc, #352]	@ (8003310 <HAL_GPIO_Init+0x32c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d037      	beq.n	8003222 <HAL_GPIO_Init+0x23e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a57      	ldr	r2, [pc, #348]	@ (8003314 <HAL_GPIO_Init+0x330>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d031      	beq.n	800321e <HAL_GPIO_Init+0x23a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a56      	ldr	r2, [pc, #344]	@ (8003318 <HAL_GPIO_Init+0x334>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d02b      	beq.n	800321a <HAL_GPIO_Init+0x236>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a55      	ldr	r2, [pc, #340]	@ (800331c <HAL_GPIO_Init+0x338>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d025      	beq.n	8003216 <HAL_GPIO_Init+0x232>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a54      	ldr	r2, [pc, #336]	@ (8003320 <HAL_GPIO_Init+0x33c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01f      	beq.n	8003212 <HAL_GPIO_Init+0x22e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a53      	ldr	r2, [pc, #332]	@ (8003324 <HAL_GPIO_Init+0x340>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d019      	beq.n	800320e <HAL_GPIO_Init+0x22a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a52      	ldr	r2, [pc, #328]	@ (8003328 <HAL_GPIO_Init+0x344>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <HAL_GPIO_Init+0x226>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a51      	ldr	r2, [pc, #324]	@ (800332c <HAL_GPIO_Init+0x348>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00d      	beq.n	8003206 <HAL_GPIO_Init+0x222>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a50      	ldr	r2, [pc, #320]	@ (8003330 <HAL_GPIO_Init+0x34c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d007      	beq.n	8003202 <HAL_GPIO_Init+0x21e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4f      	ldr	r2, [pc, #316]	@ (8003334 <HAL_GPIO_Init+0x350>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <HAL_GPIO_Init+0x21a>
 80031fa:	2309      	movs	r3, #9
 80031fc:	e012      	b.n	8003224 <HAL_GPIO_Init+0x240>
 80031fe:	230a      	movs	r3, #10
 8003200:	e010      	b.n	8003224 <HAL_GPIO_Init+0x240>
 8003202:	2308      	movs	r3, #8
 8003204:	e00e      	b.n	8003224 <HAL_GPIO_Init+0x240>
 8003206:	2307      	movs	r3, #7
 8003208:	e00c      	b.n	8003224 <HAL_GPIO_Init+0x240>
 800320a:	2306      	movs	r3, #6
 800320c:	e00a      	b.n	8003224 <HAL_GPIO_Init+0x240>
 800320e:	2305      	movs	r3, #5
 8003210:	e008      	b.n	8003224 <HAL_GPIO_Init+0x240>
 8003212:	2304      	movs	r3, #4
 8003214:	e006      	b.n	8003224 <HAL_GPIO_Init+0x240>
 8003216:	2303      	movs	r3, #3
 8003218:	e004      	b.n	8003224 <HAL_GPIO_Init+0x240>
 800321a:	2302      	movs	r3, #2
 800321c:	e002      	b.n	8003224 <HAL_GPIO_Init+0x240>
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <HAL_GPIO_Init+0x240>
 8003222:	2300      	movs	r3, #0
 8003224:	69fa      	ldr	r2, [r7, #28]
 8003226:	f002 0203 	and.w	r2, r2, #3
 800322a:	0092      	lsls	r2, r2, #2
 800322c:	4093      	lsls	r3, r2
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003234:	4935      	ldr	r1, [pc, #212]	@ (800330c <HAL_GPIO_Init+0x328>)
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	089b      	lsrs	r3, r3, #2
 800323a:	3302      	adds	r3, #2
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003242:	4b3d      	ldr	r3, [pc, #244]	@ (8003338 <HAL_GPIO_Init+0x354>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003266:	4a34      	ldr	r2, [pc, #208]	@ (8003338 <HAL_GPIO_Init+0x354>)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800326c:	4b32      	ldr	r3, [pc, #200]	@ (8003338 <HAL_GPIO_Init+0x354>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003290:	4a29      	ldr	r2, [pc, #164]	@ (8003338 <HAL_GPIO_Init+0x354>)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003296:	4b28      	ldr	r3, [pc, #160]	@ (8003338 <HAL_GPIO_Init+0x354>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003338 <HAL_GPIO_Init+0x354>)
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003338 <HAL_GPIO_Init+0x354>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032e4:	4a14      	ldr	r2, [pc, #80]	@ (8003338 <HAL_GPIO_Init+0x354>)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3301      	adds	r3, #1
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	2b0f      	cmp	r3, #15
 80032f4:	f67f ae84 	bls.w	8003000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032f8:	bf00      	nop
 80032fa:	bf00      	nop
 80032fc:	3724      	adds	r7, #36	@ 0x24
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40023800 	.word	0x40023800
 800330c:	40013800 	.word	0x40013800
 8003310:	40020000 	.word	0x40020000
 8003314:	40020400 	.word	0x40020400
 8003318:	40020800 	.word	0x40020800
 800331c:	40020c00 	.word	0x40020c00
 8003320:	40021000 	.word	0x40021000
 8003324:	40021400 	.word	0x40021400
 8003328:	40021800 	.word	0x40021800
 800332c:	40021c00 	.word	0x40021c00
 8003330:	40022000 	.word	0x40022000
 8003334:	40022400 	.word	0x40022400
 8003338:	40013c00 	.word	0x40013c00

0800333c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800334e:	2300      	movs	r3, #0
 8003350:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]
 8003356:	e0d9      	b.n	800350c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003358:	2201      	movs	r2, #1
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4013      	ands	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	429a      	cmp	r2, r3
 8003370:	f040 80c9 	bne.w	8003506 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003374:	4a6b      	ldr	r2, [pc, #428]	@ (8003524 <HAL_GPIO_DeInit+0x1e8>)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	089b      	lsrs	r3, r3, #2
 800337a:	3302      	adds	r3, #2
 800337c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003380:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	220f      	movs	r2, #15
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	4013      	ands	r3, r2
 8003394:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a63      	ldr	r2, [pc, #396]	@ (8003528 <HAL_GPIO_DeInit+0x1ec>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d037      	beq.n	800340e <HAL_GPIO_DeInit+0xd2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a62      	ldr	r2, [pc, #392]	@ (800352c <HAL_GPIO_DeInit+0x1f0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d031      	beq.n	800340a <HAL_GPIO_DeInit+0xce>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a61      	ldr	r2, [pc, #388]	@ (8003530 <HAL_GPIO_DeInit+0x1f4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d02b      	beq.n	8003406 <HAL_GPIO_DeInit+0xca>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a60      	ldr	r2, [pc, #384]	@ (8003534 <HAL_GPIO_DeInit+0x1f8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d025      	beq.n	8003402 <HAL_GPIO_DeInit+0xc6>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a5f      	ldr	r2, [pc, #380]	@ (8003538 <HAL_GPIO_DeInit+0x1fc>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d01f      	beq.n	80033fe <HAL_GPIO_DeInit+0xc2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a5e      	ldr	r2, [pc, #376]	@ (800353c <HAL_GPIO_DeInit+0x200>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d019      	beq.n	80033fa <HAL_GPIO_DeInit+0xbe>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a5d      	ldr	r2, [pc, #372]	@ (8003540 <HAL_GPIO_DeInit+0x204>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d013      	beq.n	80033f6 <HAL_GPIO_DeInit+0xba>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a5c      	ldr	r2, [pc, #368]	@ (8003544 <HAL_GPIO_DeInit+0x208>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00d      	beq.n	80033f2 <HAL_GPIO_DeInit+0xb6>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a5b      	ldr	r2, [pc, #364]	@ (8003548 <HAL_GPIO_DeInit+0x20c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d007      	beq.n	80033ee <HAL_GPIO_DeInit+0xb2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a5a      	ldr	r2, [pc, #360]	@ (800354c <HAL_GPIO_DeInit+0x210>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d101      	bne.n	80033ea <HAL_GPIO_DeInit+0xae>
 80033e6:	2309      	movs	r3, #9
 80033e8:	e012      	b.n	8003410 <HAL_GPIO_DeInit+0xd4>
 80033ea:	230a      	movs	r3, #10
 80033ec:	e010      	b.n	8003410 <HAL_GPIO_DeInit+0xd4>
 80033ee:	2308      	movs	r3, #8
 80033f0:	e00e      	b.n	8003410 <HAL_GPIO_DeInit+0xd4>
 80033f2:	2307      	movs	r3, #7
 80033f4:	e00c      	b.n	8003410 <HAL_GPIO_DeInit+0xd4>
 80033f6:	2306      	movs	r3, #6
 80033f8:	e00a      	b.n	8003410 <HAL_GPIO_DeInit+0xd4>
 80033fa:	2305      	movs	r3, #5
 80033fc:	e008      	b.n	8003410 <HAL_GPIO_DeInit+0xd4>
 80033fe:	2304      	movs	r3, #4
 8003400:	e006      	b.n	8003410 <HAL_GPIO_DeInit+0xd4>
 8003402:	2303      	movs	r3, #3
 8003404:	e004      	b.n	8003410 <HAL_GPIO_DeInit+0xd4>
 8003406:	2302      	movs	r3, #2
 8003408:	e002      	b.n	8003410 <HAL_GPIO_DeInit+0xd4>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <HAL_GPIO_DeInit+0xd4>
 800340e:	2300      	movs	r3, #0
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	f002 0203 	and.w	r2, r2, #3
 8003416:	0092      	lsls	r2, r2, #2
 8003418:	4093      	lsls	r3, r2
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	429a      	cmp	r2, r3
 800341e:	d132      	bne.n	8003486 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003420:	4b4b      	ldr	r3, [pc, #300]	@ (8003550 <HAL_GPIO_DeInit+0x214>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	43db      	mvns	r3, r3
 8003428:	4949      	ldr	r1, [pc, #292]	@ (8003550 <HAL_GPIO_DeInit+0x214>)
 800342a:	4013      	ands	r3, r2
 800342c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800342e:	4b48      	ldr	r3, [pc, #288]	@ (8003550 <HAL_GPIO_DeInit+0x214>)
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	43db      	mvns	r3, r3
 8003436:	4946      	ldr	r1, [pc, #280]	@ (8003550 <HAL_GPIO_DeInit+0x214>)
 8003438:	4013      	ands	r3, r2
 800343a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800343c:	4b44      	ldr	r3, [pc, #272]	@ (8003550 <HAL_GPIO_DeInit+0x214>)
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	43db      	mvns	r3, r3
 8003444:	4942      	ldr	r1, [pc, #264]	@ (8003550 <HAL_GPIO_DeInit+0x214>)
 8003446:	4013      	ands	r3, r2
 8003448:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800344a:	4b41      	ldr	r3, [pc, #260]	@ (8003550 <HAL_GPIO_DeInit+0x214>)
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	43db      	mvns	r3, r3
 8003452:	493f      	ldr	r1, [pc, #252]	@ (8003550 <HAL_GPIO_DeInit+0x214>)
 8003454:	4013      	ands	r3, r2
 8003456:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	220f      	movs	r2, #15
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003468:	4a2e      	ldr	r2, [pc, #184]	@ (8003524 <HAL_GPIO_DeInit+0x1e8>)
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	089b      	lsrs	r3, r3, #2
 800346e:	3302      	adds	r3, #2
 8003470:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	43da      	mvns	r2, r3
 8003478:	482a      	ldr	r0, [pc, #168]	@ (8003524 <HAL_GPIO_DeInit+0x1e8>)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	089b      	lsrs	r3, r3, #2
 800347e:	400a      	ands	r2, r1
 8003480:	3302      	adds	r3, #2
 8003482:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	2103      	movs	r1, #3
 8003490:	fa01 f303 	lsl.w	r3, r1, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	401a      	ands	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	08da      	lsrs	r2, r3, #3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3208      	adds	r2, #8
 80034a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	220f      	movs	r2, #15
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	08d2      	lsrs	r2, r2, #3
 80034bc:	4019      	ands	r1, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3208      	adds	r2, #8
 80034c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	2103      	movs	r1, #3
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	401a      	ands	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	2101      	movs	r1, #1
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	fa01 f303 	lsl.w	r3, r1, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	401a      	ands	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	2103      	movs	r1, #3
 80034fa:	fa01 f303 	lsl.w	r3, r1, r3
 80034fe:	43db      	mvns	r3, r3
 8003500:	401a      	ands	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	3301      	adds	r3, #1
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2b0f      	cmp	r3, #15
 8003510:	f67f af22 	bls.w	8003358 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003514:	bf00      	nop
 8003516:	bf00      	nop
 8003518:	371c      	adds	r7, #28
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40013800 	.word	0x40013800
 8003528:	40020000 	.word	0x40020000
 800352c:	40020400 	.word	0x40020400
 8003530:	40020800 	.word	0x40020800
 8003534:	40020c00 	.word	0x40020c00
 8003538:	40021000 	.word	0x40021000
 800353c:	40021400 	.word	0x40021400
 8003540:	40021800 	.word	0x40021800
 8003544:	40021c00 	.word	0x40021c00
 8003548:	40022000 	.word	0x40022000
 800354c:	40022400 	.word	0x40022400
 8003550:	40013c00 	.word	0x40013c00

08003554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	807b      	strh	r3, [r7, #2]
 8003560:	4613      	mov	r3, r2
 8003562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003564:	787b      	ldrb	r3, [r7, #1]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800356a:	887a      	ldrh	r2, [r7, #2]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003570:	e003      	b.n	800357a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003572:	887b      	ldrh	r3, [r7, #2]
 8003574:	041a      	lsls	r2, r3, #16
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	619a      	str	r2, [r3, #24]
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
	...

08003588 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e12b      	b.n	80037f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fe fdac 	bl	800210c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2224      	movs	r2, #36	@ 0x24
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035ec:	f001 ff82 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 80035f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	4a81      	ldr	r2, [pc, #516]	@ (80037fc <HAL_I2C_Init+0x274>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d807      	bhi.n	800360c <HAL_I2C_Init+0x84>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4a80      	ldr	r2, [pc, #512]	@ (8003800 <HAL_I2C_Init+0x278>)
 8003600:	4293      	cmp	r3, r2
 8003602:	bf94      	ite	ls
 8003604:	2301      	movls	r3, #1
 8003606:	2300      	movhi	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	e006      	b.n	800361a <HAL_I2C_Init+0x92>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4a7d      	ldr	r2, [pc, #500]	@ (8003804 <HAL_I2C_Init+0x27c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	bf94      	ite	ls
 8003614:	2301      	movls	r3, #1
 8003616:	2300      	movhi	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e0e7      	b.n	80037f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4a78      	ldr	r2, [pc, #480]	@ (8003808 <HAL_I2C_Init+0x280>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	0c9b      	lsrs	r3, r3, #18
 800362c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	4a6a      	ldr	r2, [pc, #424]	@ (80037fc <HAL_I2C_Init+0x274>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d802      	bhi.n	800365c <HAL_I2C_Init+0xd4>
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	3301      	adds	r3, #1
 800365a:	e009      	b.n	8003670 <HAL_I2C_Init+0xe8>
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003662:	fb02 f303 	mul.w	r3, r2, r3
 8003666:	4a69      	ldr	r2, [pc, #420]	@ (800380c <HAL_I2C_Init+0x284>)
 8003668:	fba2 2303 	umull	r2, r3, r2, r3
 800366c:	099b      	lsrs	r3, r3, #6
 800366e:	3301      	adds	r3, #1
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	430b      	orrs	r3, r1
 8003676:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003682:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	495c      	ldr	r1, [pc, #368]	@ (80037fc <HAL_I2C_Init+0x274>)
 800368c:	428b      	cmp	r3, r1
 800368e:	d819      	bhi.n	80036c4 <HAL_I2C_Init+0x13c>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	1e59      	subs	r1, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	fbb1 f3f3 	udiv	r3, r1, r3
 800369e:	1c59      	adds	r1, r3, #1
 80036a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80036a4:	400b      	ands	r3, r1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_I2C_Init+0x138>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1e59      	subs	r1, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80036b8:	3301      	adds	r3, #1
 80036ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036be:	e051      	b.n	8003764 <HAL_I2C_Init+0x1dc>
 80036c0:	2304      	movs	r3, #4
 80036c2:	e04f      	b.n	8003764 <HAL_I2C_Init+0x1dc>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d111      	bne.n	80036f0 <HAL_I2C_Init+0x168>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	1e58      	subs	r0, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6859      	ldr	r1, [r3, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	440b      	add	r3, r1
 80036da:	fbb0 f3f3 	udiv	r3, r0, r3
 80036de:	3301      	adds	r3, #1
 80036e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf0c      	ite	eq
 80036e8:	2301      	moveq	r3, #1
 80036ea:	2300      	movne	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	e012      	b.n	8003716 <HAL_I2C_Init+0x18e>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	1e58      	subs	r0, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6859      	ldr	r1, [r3, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	0099      	lsls	r1, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	fbb0 f3f3 	udiv	r3, r0, r3
 8003706:	3301      	adds	r3, #1
 8003708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800370c:	2b00      	cmp	r3, #0
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_I2C_Init+0x196>
 800371a:	2301      	movs	r3, #1
 800371c:	e022      	b.n	8003764 <HAL_I2C_Init+0x1dc>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10e      	bne.n	8003744 <HAL_I2C_Init+0x1bc>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1e58      	subs	r0, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6859      	ldr	r1, [r3, #4]
 800372e:	460b      	mov	r3, r1
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	440b      	add	r3, r1
 8003734:	fbb0 f3f3 	udiv	r3, r0, r3
 8003738:	3301      	adds	r3, #1
 800373a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003742:	e00f      	b.n	8003764 <HAL_I2C_Init+0x1dc>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	1e58      	subs	r0, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6859      	ldr	r1, [r3, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	0099      	lsls	r1, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	fbb0 f3f3 	udiv	r3, r0, r3
 800375a:	3301      	adds	r3, #1
 800375c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003760:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	6809      	ldr	r1, [r1, #0]
 8003768:	4313      	orrs	r3, r2
 800376a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69da      	ldr	r2, [r3, #28]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003792:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6911      	ldr	r1, [r2, #16]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68d2      	ldr	r2, [r2, #12]
 800379e:	4311      	orrs	r1, r2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	430b      	orrs	r3, r1
 80037a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	000186a0 	.word	0x000186a0
 8003800:	001e847f 	.word	0x001e847f
 8003804:	003d08ff 	.word	0x003d08ff
 8003808:	431bde83 	.word	0x431bde83
 800380c:	10624dd3 	.word	0x10624dd3

08003810 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af02      	add	r7, sp, #8
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	4608      	mov	r0, r1
 800381a:	4611      	mov	r1, r2
 800381c:	461a      	mov	r2, r3
 800381e:	4603      	mov	r3, r0
 8003820:	817b      	strh	r3, [r7, #10]
 8003822:	460b      	mov	r3, r1
 8003824:	813b      	strh	r3, [r7, #8]
 8003826:	4613      	mov	r3, r2
 8003828:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800382a:	f7ff fac5 	bl	8002db8 <HAL_GetTick>
 800382e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b20      	cmp	r3, #32
 800383a:	f040 80d9 	bne.w	80039f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	2319      	movs	r3, #25
 8003844:	2201      	movs	r2, #1
 8003846:	496d      	ldr	r1, [pc, #436]	@ (80039fc <HAL_I2C_Mem_Write+0x1ec>)
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 fc8b 	bl	8004164 <I2C_WaitOnFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003854:	2302      	movs	r3, #2
 8003856:	e0cc      	b.n	80039f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_I2C_Mem_Write+0x56>
 8003862:	2302      	movs	r3, #2
 8003864:	e0c5      	b.n	80039f2 <HAL_I2C_Mem_Write+0x1e2>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b01      	cmp	r3, #1
 800387a:	d007      	beq.n	800388c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0201 	orr.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800389a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2221      	movs	r2, #33	@ 0x21
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2240      	movs	r2, #64	@ 0x40
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a3a      	ldr	r2, [r7, #32]
 80038b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80038bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4a4d      	ldr	r2, [pc, #308]	@ (8003a00 <HAL_I2C_Mem_Write+0x1f0>)
 80038cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038ce:	88f8      	ldrh	r0, [r7, #6]
 80038d0:	893a      	ldrh	r2, [r7, #8]
 80038d2:	8979      	ldrh	r1, [r7, #10]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	9301      	str	r3, [sp, #4]
 80038d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	4603      	mov	r3, r0
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 fac2 	bl	8003e68 <I2C_RequestMemoryWrite>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d052      	beq.n	8003990 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e081      	b.n	80039f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 fd50 	bl	8004398 <I2C_WaitOnTXEFlagUntilTimeout>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00d      	beq.n	800391a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003902:	2b04      	cmp	r3, #4
 8003904:	d107      	bne.n	8003916 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003914:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e06b      	b.n	80039f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391e:	781a      	ldrb	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b04      	cmp	r3, #4
 8003956:	d11b      	bne.n	8003990 <HAL_I2C_Mem_Write+0x180>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800395c:	2b00      	cmp	r3, #0
 800395e:	d017      	beq.n	8003990 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003964:	781a      	ldrb	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1aa      	bne.n	80038ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fd43 	bl	8004428 <I2C_WaitOnBTFFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00d      	beq.n	80039c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d107      	bne.n	80039c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e016      	b.n	80039f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	e000      	b.n	80039f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80039f0:	2302      	movs	r3, #2
  }
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	00100002 	.word	0x00100002
 8003a00:	ffff0000 	.word	0xffff0000

08003a04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08c      	sub	sp, #48	@ 0x30
 8003a08:	af02      	add	r7, sp, #8
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	4608      	mov	r0, r1
 8003a0e:	4611      	mov	r1, r2
 8003a10:	461a      	mov	r2, r3
 8003a12:	4603      	mov	r3, r0
 8003a14:	817b      	strh	r3, [r7, #10]
 8003a16:	460b      	mov	r3, r1
 8003a18:	813b      	strh	r3, [r7, #8]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a1e:	f7ff f9cb 	bl	8002db8 <HAL_GetTick>
 8003a22:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b20      	cmp	r3, #32
 8003a2e:	f040 8214 	bne.w	8003e5a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	2319      	movs	r3, #25
 8003a38:	2201      	movs	r2, #1
 8003a3a:	497b      	ldr	r1, [pc, #492]	@ (8003c28 <HAL_I2C_Mem_Read+0x224>)
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 fb91 	bl	8004164 <I2C_WaitOnFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e207      	b.n	8003e5c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_I2C_Mem_Read+0x56>
 8003a56:	2302      	movs	r3, #2
 8003a58:	e200      	b.n	8003e5c <HAL_I2C_Mem_Read+0x458>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d007      	beq.n	8003a80 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2222      	movs	r2, #34	@ 0x22
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2240      	movs	r2, #64	@ 0x40
 8003a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aaa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003ab0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4a5b      	ldr	r2, [pc, #364]	@ (8003c2c <HAL_I2C_Mem_Read+0x228>)
 8003ac0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ac2:	88f8      	ldrh	r0, [r7, #6]
 8003ac4:	893a      	ldrh	r2, [r7, #8]
 8003ac6:	8979      	ldrh	r1, [r7, #10]
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aca:	9301      	str	r3, [sp, #4]
 8003acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fa5e 	bl	8003f94 <I2C_RequestMemoryRead>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e1bc      	b.n	8003e5c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d113      	bne.n	8003b12 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aea:	2300      	movs	r3, #0
 8003aec:	623b      	str	r3, [r7, #32]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	623b      	str	r3, [r7, #32]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	623b      	str	r3, [r7, #32]
 8003afe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	e190      	b.n	8003e34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d11b      	bne.n	8003b52 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	61fb      	str	r3, [r7, #28]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	e170      	b.n	8003e34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d11b      	bne.n	8003b92 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61bb      	str	r3, [r7, #24]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	61bb      	str	r3, [r7, #24]
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	e150      	b.n	8003e34 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ba8:	e144      	b.n	8003e34 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	f200 80f1 	bhi.w	8003d96 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d123      	bne.n	8003c04 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bbe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 fc79 	bl	80044b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e145      	b.n	8003e5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691a      	ldr	r2, [r3, #16]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c02:	e117      	b.n	8003e34 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d14e      	bne.n	8003caa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c12:	2200      	movs	r2, #0
 8003c14:	4906      	ldr	r1, [pc, #24]	@ (8003c30 <HAL_I2C_Mem_Read+0x22c>)
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 faa4 	bl	8004164 <I2C_WaitOnFlagUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d008      	beq.n	8003c34 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e11a      	b.n	8003e5c <HAL_I2C_Mem_Read+0x458>
 8003c26:	bf00      	nop
 8003c28:	00100002 	.word	0x00100002
 8003c2c:	ffff0000 	.word	0xffff0000
 8003c30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691a      	ldr	r2, [r3, #16]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ca8:	e0c4      	b.n	8003e34 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	496c      	ldr	r1, [pc, #432]	@ (8003e64 <HAL_I2C_Mem_Read+0x460>)
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 fa55 	bl	8004164 <I2C_WaitOnFlagUntilTimeout>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0cb      	b.n	8003e5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691a      	ldr	r2, [r3, #16]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	4955      	ldr	r1, [pc, #340]	@ (8003e64 <HAL_I2C_Mem_Read+0x460>)
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 fa27 	bl	8004164 <I2C_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e09d      	b.n	8003e5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d94:	e04e      	b.n	8003e34 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d98:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 fb8c 	bl	80044b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e058      	b.n	8003e5c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d124      	bne.n	8003e34 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	d107      	bne.n	8003e02 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e00:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f47f aeb6 	bne.w	8003baa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	e000      	b.n	8003e5c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003e5a:	2302      	movs	r3, #2
  }
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3728      	adds	r7, #40	@ 0x28
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	00010004 	.word	0x00010004

08003e68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af02      	add	r7, sp, #8
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	4608      	mov	r0, r1
 8003e72:	4611      	mov	r1, r2
 8003e74:	461a      	mov	r2, r3
 8003e76:	4603      	mov	r3, r0
 8003e78:	817b      	strh	r3, [r7, #10]
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	813b      	strh	r3, [r7, #8]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f960 	bl	8004164 <I2C_WaitOnFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00d      	beq.n	8003ec6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eb8:	d103      	bne.n	8003ec2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ec0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e05f      	b.n	8003f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ec6:	897b      	ldrh	r3, [r7, #10]
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ed4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed8:	6a3a      	ldr	r2, [r7, #32]
 8003eda:	492d      	ldr	r1, [pc, #180]	@ (8003f90 <I2C_RequestMemoryWrite+0x128>)
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f9bb 	bl	8004258 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e04c      	b.n	8003f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eec:	2300      	movs	r3, #0
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f04:	6a39      	ldr	r1, [r7, #32]
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 fa46 	bl	8004398 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00d      	beq.n	8003f2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d107      	bne.n	8003f2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e02b      	b.n	8003f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d105      	bne.n	8003f40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f34:	893b      	ldrh	r3, [r7, #8]
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	611a      	str	r2, [r3, #16]
 8003f3e:	e021      	b.n	8003f84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f40:	893b      	ldrh	r3, [r7, #8]
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f50:	6a39      	ldr	r1, [r7, #32]
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fa20 	bl	8004398 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00d      	beq.n	8003f7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d107      	bne.n	8003f76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e005      	b.n	8003f86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f7a:	893b      	ldrh	r3, [r7, #8]
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	00010002 	.word	0x00010002

08003f94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	4608      	mov	r0, r1
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	817b      	strh	r3, [r7, #10]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	813b      	strh	r3, [r7, #8]
 8003faa:	4613      	mov	r3, r2
 8003fac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fbc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 f8c2 	bl	8004164 <I2C_WaitOnFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00d      	beq.n	8004002 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ff4:	d103      	bne.n	8003ffe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ffc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e0aa      	b.n	8004158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004002:	897b      	ldrh	r3, [r7, #10]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004010:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004014:	6a3a      	ldr	r2, [r7, #32]
 8004016:	4952      	ldr	r1, [pc, #328]	@ (8004160 <I2C_RequestMemoryRead+0x1cc>)
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 f91d 	bl	8004258 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e097      	b.n	8004158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800403e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004040:	6a39      	ldr	r1, [r7, #32]
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 f9a8 	bl	8004398 <I2C_WaitOnTXEFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00d      	beq.n	800406a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004052:	2b04      	cmp	r3, #4
 8004054:	d107      	bne.n	8004066 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004064:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e076      	b.n	8004158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800406a:	88fb      	ldrh	r3, [r7, #6]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d105      	bne.n	800407c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004070:	893b      	ldrh	r3, [r7, #8]
 8004072:	b2da      	uxtb	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	611a      	str	r2, [r3, #16]
 800407a:	e021      	b.n	80040c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800407c:	893b      	ldrh	r3, [r7, #8]
 800407e:	0a1b      	lsrs	r3, r3, #8
 8004080:	b29b      	uxth	r3, r3
 8004082:	b2da      	uxtb	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800408a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800408c:	6a39      	ldr	r1, [r7, #32]
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 f982 	bl	8004398 <I2C_WaitOnTXEFlagUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00d      	beq.n	80040b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d107      	bne.n	80040b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e050      	b.n	8004158 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040b6:	893b      	ldrh	r3, [r7, #8]
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040c2:	6a39      	ldr	r1, [r7, #32]
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f967 	bl	8004398 <I2C_WaitOnTXEFlagUntilTimeout>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00d      	beq.n	80040ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d107      	bne.n	80040e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e035      	b.n	8004158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	2200      	movs	r2, #0
 8004104:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 f82b 	bl	8004164 <I2C_WaitOnFlagUntilTimeout>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00d      	beq.n	8004130 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004122:	d103      	bne.n	800412c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800412a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e013      	b.n	8004158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004130:	897b      	ldrh	r3, [r7, #10]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	b2da      	uxtb	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004142:	6a3a      	ldr	r2, [r7, #32]
 8004144:	4906      	ldr	r1, [pc, #24]	@ (8004160 <I2C_RequestMemoryRead+0x1cc>)
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 f886 	bl	8004258 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	00010002 	.word	0x00010002

08004164 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	4613      	mov	r3, r2
 8004172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004174:	e048      	b.n	8004208 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800417c:	d044      	beq.n	8004208 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417e:	f7fe fe1b 	bl	8002db8 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d302      	bcc.n	8004194 <I2C_WaitOnFlagUntilTimeout+0x30>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d139      	bne.n	8004208 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	0c1b      	lsrs	r3, r3, #16
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b01      	cmp	r3, #1
 800419c:	d10d      	bne.n	80041ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	43da      	mvns	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	4013      	ands	r3, r2
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	bf0c      	ite	eq
 80041b0:	2301      	moveq	r3, #1
 80041b2:	2300      	movne	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	461a      	mov	r2, r3
 80041b8:	e00c      	b.n	80041d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	43da      	mvns	r2, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4013      	ands	r3, r2
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	bf0c      	ite	eq
 80041cc:	2301      	moveq	r3, #1
 80041ce:	2300      	movne	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	461a      	mov	r2, r3
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d116      	bne.n	8004208 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f4:	f043 0220 	orr.w	r2, r3, #32
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e023      	b.n	8004250 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	0c1b      	lsrs	r3, r3, #16
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b01      	cmp	r3, #1
 8004210:	d10d      	bne.n	800422e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	43da      	mvns	r2, r3
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	4013      	ands	r3, r2
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	bf0c      	ite	eq
 8004224:	2301      	moveq	r3, #1
 8004226:	2300      	movne	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	461a      	mov	r2, r3
 800422c:	e00c      	b.n	8004248 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	43da      	mvns	r2, r3
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	4013      	ands	r3, r2
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	bf0c      	ite	eq
 8004240:	2301      	moveq	r3, #1
 8004242:	2300      	movne	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	461a      	mov	r2, r3
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	429a      	cmp	r2, r3
 800424c:	d093      	beq.n	8004176 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004266:	e071      	b.n	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004276:	d123      	bne.n	80042c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004286:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004290:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ac:	f043 0204 	orr.w	r2, r3, #4
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e067      	b.n	8004390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042c6:	d041      	beq.n	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c8:	f7fe fd76 	bl	8002db8 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d302      	bcc.n	80042de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d136      	bne.n	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	0c1b      	lsrs	r3, r3, #16
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d10c      	bne.n	8004302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	43da      	mvns	r2, r3
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4013      	ands	r3, r2
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	bf14      	ite	ne
 80042fa:	2301      	movne	r3, #1
 80042fc:	2300      	moveq	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	e00b      	b.n	800431a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	43da      	mvns	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	4013      	ands	r3, r2
 800430e:	b29b      	uxth	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	bf14      	ite	ne
 8004314:	2301      	movne	r3, #1
 8004316:	2300      	moveq	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d016      	beq.n	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004338:	f043 0220 	orr.w	r2, r3, #32
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e021      	b.n	8004390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	0c1b      	lsrs	r3, r3, #16
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b01      	cmp	r3, #1
 8004354:	d10c      	bne.n	8004370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	43da      	mvns	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4013      	ands	r3, r2
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	bf14      	ite	ne
 8004368:	2301      	movne	r3, #1
 800436a:	2300      	moveq	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	e00b      	b.n	8004388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	43da      	mvns	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4013      	ands	r3, r2
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	bf14      	ite	ne
 8004382:	2301      	movne	r3, #1
 8004384:	2300      	moveq	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	f47f af6d 	bne.w	8004268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043a4:	e034      	b.n	8004410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 f8e3 	bl	8004572 <I2C_IsAcknowledgeFailed>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e034      	b.n	8004420 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043bc:	d028      	beq.n	8004410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043be:	f7fe fcfb 	bl	8002db8 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d302      	bcc.n	80043d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d11d      	bne.n	8004410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043de:	2b80      	cmp	r3, #128	@ 0x80
 80043e0:	d016      	beq.n	8004410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fc:	f043 0220 	orr.w	r2, r3, #32
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e007      	b.n	8004420 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800441a:	2b80      	cmp	r3, #128	@ 0x80
 800441c:	d1c3      	bne.n	80043a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004434:	e034      	b.n	80044a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 f89b 	bl	8004572 <I2C_IsAcknowledgeFailed>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e034      	b.n	80044b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800444c:	d028      	beq.n	80044a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444e:	f7fe fcb3 	bl	8002db8 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	429a      	cmp	r2, r3
 800445c:	d302      	bcc.n	8004464 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d11d      	bne.n	80044a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b04      	cmp	r3, #4
 8004470:	d016      	beq.n	80044a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448c:	f043 0220 	orr.w	r2, r3, #32
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e007      	b.n	80044b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d1c3      	bne.n	8004436 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044c4:	e049      	b.n	800455a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	f003 0310 	and.w	r3, r3, #16
 80044d0:	2b10      	cmp	r3, #16
 80044d2:	d119      	bne.n	8004508 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f06f 0210 	mvn.w	r2, #16
 80044dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e030      	b.n	800456a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004508:	f7fe fc56 	bl	8002db8 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	429a      	cmp	r2, r3
 8004516:	d302      	bcc.n	800451e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d11d      	bne.n	800455a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004528:	2b40      	cmp	r3, #64	@ 0x40
 800452a:	d016      	beq.n	800455a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2220      	movs	r2, #32
 8004536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004546:	f043 0220 	orr.w	r2, r3, #32
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e007      	b.n	800456a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004564:	2b40      	cmp	r3, #64	@ 0x40
 8004566:	d1ae      	bne.n	80044c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004584:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004588:	d11b      	bne.n	80045c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004592:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2220      	movs	r2, #32
 800459e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ae:	f043 0204 	orr.w	r2, r3, #4
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e000      	b.n	80045c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b20      	cmp	r3, #32
 80045e4:	d129      	bne.n	800463a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2224      	movs	r2, #36	@ 0x24
 80045ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0201 	bic.w	r2, r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0210 	bic.w	r2, r2, #16
 800460c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f042 0201 	orr.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	e000      	b.n	800463c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800463a:	2302      	movs	r3, #2
  }
}
 800463c:	4618      	mov	r0, r3
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004652:	2300      	movs	r3, #0
 8004654:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b20      	cmp	r3, #32
 8004660:	d12a      	bne.n	80046b8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2224      	movs	r2, #36	@ 0x24
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0201 	bic.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004680:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004682:	89fb      	ldrh	r3, [r7, #14]
 8004684:	f023 030f 	bic.w	r3, r3, #15
 8004688:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	b29a      	uxth	r2, r3
 800468e:	89fb      	ldrh	r3, [r7, #14]
 8004690:	4313      	orrs	r3, r2
 8004692:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	89fa      	ldrh	r2, [r7, #14]
 800469a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0201 	orr.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	e000      	b.n	80046ba <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80046b8:	2302      	movs	r3, #2
  }
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
	...

080046c8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e0bf      	b.n	800485a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d106      	bne.n	80046f4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fd fd76 	bl	80021e0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699a      	ldr	r2, [r3, #24]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800470a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6999      	ldr	r1, [r3, #24]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004720:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6899      	ldr	r1, [r3, #8]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	4b4a      	ldr	r3, [pc, #296]	@ (8004864 <HAL_LTDC_Init+0x19c>)
 800473c:	400b      	ands	r3, r1
 800473e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	041b      	lsls	r3, r3, #16
 8004746:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6899      	ldr	r1, [r3, #8]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699a      	ldr	r2, [r3, #24]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	431a      	orrs	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68d9      	ldr	r1, [r3, #12]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	4b3e      	ldr	r3, [pc, #248]	@ (8004864 <HAL_LTDC_Init+0x19c>)
 800476a:	400b      	ands	r3, r1
 800476c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	041b      	lsls	r3, r3, #16
 8004774:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68d9      	ldr	r1, [r3, #12]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a1a      	ldr	r2, [r3, #32]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6919      	ldr	r1, [r3, #16]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	4b33      	ldr	r3, [pc, #204]	@ (8004864 <HAL_LTDC_Init+0x19c>)
 8004798:	400b      	ands	r3, r1
 800479a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a0:	041b      	lsls	r3, r3, #16
 80047a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6919      	ldr	r1, [r3, #16]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6959      	ldr	r1, [r3, #20]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	4b27      	ldr	r3, [pc, #156]	@ (8004864 <HAL_LTDC_Init+0x19c>)
 80047c6:	400b      	ands	r3, r1
 80047c8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ce:	041b      	lsls	r3, r3, #16
 80047d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6959      	ldr	r1, [r3, #20]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047ee:	021b      	lsls	r3, r3, #8
 80047f0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80047f8:	041b      	lsls	r3, r3, #16
 80047fa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800480a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0206 	orr.w	r2, r2, #6
 8004836:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699a      	ldr	r2, [r3, #24]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0201 	orr.w	r2, r2, #1
 8004846:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	f000f800 	.word	0xf000f800

08004868 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004868:	b5b0      	push	{r4, r5, r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800487a:	2b01      	cmp	r3, #1
 800487c:	d101      	bne.n	8004882 <HAL_LTDC_ConfigLayer+0x1a>
 800487e:	2302      	movs	r3, #2
 8004880:	e02c      	b.n	80048dc <HAL_LTDC_ConfigLayer+0x74>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2202      	movs	r2, #2
 800488e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2134      	movs	r1, #52	@ 0x34
 8004898:	fb01 f303 	mul.w	r3, r1, r3
 800489c:	4413      	add	r3, r2
 800489e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	4614      	mov	r4, r2
 80048a6:	461d      	mov	r5, r3
 80048a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048b4:	682b      	ldr	r3, [r5, #0]
 80048b6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f811 	bl	80048e4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2201      	movs	r2, #1
 80048c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bdb0      	pop	{r4, r5, r7, pc}

080048e4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b089      	sub	sp, #36	@ 0x24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	0c1b      	lsrs	r3, r3, #16
 80048fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004900:	4413      	add	r3, r2
 8004902:	041b      	lsls	r3, r3, #16
 8004904:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	01db      	lsls	r3, r3, #7
 8004910:	4413      	add	r3, r2
 8004912:	3384      	adds	r3, #132	@ 0x84
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	4611      	mov	r1, r2
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	01d2      	lsls	r2, r2, #7
 8004920:	440a      	add	r2, r1
 8004922:	3284      	adds	r2, #132	@ 0x84
 8004924:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004928:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	0c1b      	lsrs	r3, r3, #16
 8004936:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800493a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800493c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4619      	mov	r1, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	01db      	lsls	r3, r3, #7
 8004948:	440b      	add	r3, r1
 800494a:	3384      	adds	r3, #132	@ 0x84
 800494c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004952:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004962:	4413      	add	r3, r2
 8004964:	041b      	lsls	r3, r3, #16
 8004966:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	461a      	mov	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	01db      	lsls	r3, r3, #7
 8004972:	4413      	add	r3, r2
 8004974:	3384      	adds	r3, #132	@ 0x84
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	6812      	ldr	r2, [r2, #0]
 800497c:	4611      	mov	r1, r2
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	01d2      	lsls	r2, r2, #7
 8004982:	440a      	add	r2, r1
 8004984:	3284      	adds	r2, #132	@ 0x84
 8004986:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800498a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800499a:	4413      	add	r3, r2
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4619      	mov	r1, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	01db      	lsls	r3, r3, #7
 80049a8:	440b      	add	r3, r1
 80049aa:	3384      	adds	r3, #132	@ 0x84
 80049ac:	4619      	mov	r1, r3
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	461a      	mov	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	01db      	lsls	r3, r3, #7
 80049be:	4413      	add	r3, r2
 80049c0:	3384      	adds	r3, #132	@ 0x84
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	6812      	ldr	r2, [r2, #0]
 80049c8:	4611      	mov	r1, r2
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	01d2      	lsls	r2, r2, #7
 80049ce:	440a      	add	r2, r1
 80049d0:	3284      	adds	r2, #132	@ 0x84
 80049d2:	f023 0307 	bic.w	r3, r3, #7
 80049d6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	461a      	mov	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	01db      	lsls	r3, r3, #7
 80049e2:	4413      	add	r3, r2
 80049e4:	3384      	adds	r3, #132	@ 0x84
 80049e6:	461a      	mov	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80049f4:	021b      	lsls	r3, r3, #8
 80049f6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80049fe:	041b      	lsls	r3, r3, #16
 8004a00:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	061b      	lsls	r3, r3, #24
 8004a08:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	01db      	lsls	r3, r3, #7
 8004a14:	4413      	add	r3, r2
 8004a16:	3384      	adds	r3, #132	@ 0x84
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	01db      	lsls	r3, r3, #7
 8004a24:	4413      	add	r3, r2
 8004a26:	3384      	adds	r3, #132	@ 0x84
 8004a28:	461a      	mov	r2, r3
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a34:	461a      	mov	r2, r3
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4619      	mov	r1, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	01db      	lsls	r3, r3, #7
 8004a48:	440b      	add	r3, r1
 8004a4a:	3384      	adds	r3, #132	@ 0x84
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	01db      	lsls	r3, r3, #7
 8004a5e:	4413      	add	r3, r2
 8004a60:	3384      	adds	r3, #132	@ 0x84
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	6812      	ldr	r2, [r2, #0]
 8004a68:	4611      	mov	r1, r2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	01d2      	lsls	r2, r2, #7
 8004a6e:	440a      	add	r2, r1
 8004a70:	3284      	adds	r2, #132	@ 0x84
 8004a72:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004a76:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	01db      	lsls	r3, r3, #7
 8004a82:	4413      	add	r3, r2
 8004a84:	3384      	adds	r3, #132	@ 0x84
 8004a86:	461a      	mov	r2, r3
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	01db      	lsls	r3, r3, #7
 8004a98:	4413      	add	r3, r2
 8004a9a:	3384      	adds	r3, #132	@ 0x84
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	6812      	ldr	r2, [r2, #0]
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	01d2      	lsls	r2, r2, #7
 8004aa8:	440a      	add	r2, r1
 8004aaa:	3284      	adds	r2, #132	@ 0x84
 8004aac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004ab0:	f023 0307 	bic.w	r3, r3, #7
 8004ab4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	69da      	ldr	r2, [r3, #28]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	68f9      	ldr	r1, [r7, #12]
 8004ac0:	6809      	ldr	r1, [r1, #0]
 8004ac2:	4608      	mov	r0, r1
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	01c9      	lsls	r1, r1, #7
 8004ac8:	4401      	add	r1, r0
 8004aca:	3184      	adds	r1, #132	@ 0x84
 8004acc:	4313      	orrs	r3, r2
 8004ace:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	01db      	lsls	r3, r3, #7
 8004ada:	4413      	add	r3, r2
 8004adc:	3384      	adds	r3, #132	@ 0x84
 8004ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	01db      	lsls	r3, r3, #7
 8004aea:	4413      	add	r3, r2
 8004aec:	3384      	adds	r3, #132	@ 0x84
 8004aee:	461a      	mov	r2, r3
 8004af0:	2300      	movs	r3, #0
 8004af2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	01db      	lsls	r3, r3, #7
 8004afe:	4413      	add	r3, r2
 8004b00:	3384      	adds	r3, #132	@ 0x84
 8004b02:	461a      	mov	r2, r3
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b08:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d102      	bne.n	8004b18 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004b12:	2304      	movs	r3, #4
 8004b14:	61fb      	str	r3, [r7, #28]
 8004b16:	e01b      	b.n	8004b50 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d102      	bne.n	8004b26 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004b20:	2303      	movs	r3, #3
 8004b22:	61fb      	str	r3, [r7, #28]
 8004b24:	e014      	b.n	8004b50 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d00b      	beq.n	8004b46 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d007      	beq.n	8004b46 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d003      	beq.n	8004b46 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004b42:	2b07      	cmp	r3, #7
 8004b44:	d102      	bne.n	8004b4c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004b46:	2302      	movs	r3, #2
 8004b48:	61fb      	str	r3, [r7, #28]
 8004b4a:	e001      	b.n	8004b50 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	461a      	mov	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	01db      	lsls	r3, r3, #7
 8004b5a:	4413      	add	r3, r2
 8004b5c:	3384      	adds	r3, #132	@ 0x84
 8004b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	6812      	ldr	r2, [r2, #0]
 8004b64:	4611      	mov	r1, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	01d2      	lsls	r2, r2, #7
 8004b6a:	440a      	add	r2, r1
 8004b6c:	3284      	adds	r2, #132	@ 0x84
 8004b6e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004b72:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b78:	69fa      	ldr	r2, [r7, #28]
 8004b7a:	fb02 f303 	mul.w	r3, r2, r3
 8004b7e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	6859      	ldr	r1, [r3, #4]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	1acb      	subs	r3, r1, r3
 8004b8a:	69f9      	ldr	r1, [r7, #28]
 8004b8c:	fb01 f303 	mul.w	r3, r1, r3
 8004b90:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004b92:	68f9      	ldr	r1, [r7, #12]
 8004b94:	6809      	ldr	r1, [r1, #0]
 8004b96:	4608      	mov	r0, r1
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	01c9      	lsls	r1, r1, #7
 8004b9c:	4401      	add	r1, r0
 8004b9e:	3184      	adds	r1, #132	@ 0x84
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	01db      	lsls	r3, r3, #7
 8004bae:	4413      	add	r3, r2
 8004bb0:	3384      	adds	r3, #132	@ 0x84
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	6812      	ldr	r2, [r2, #0]
 8004bb8:	4611      	mov	r1, r2
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	01d2      	lsls	r2, r2, #7
 8004bbe:	440a      	add	r2, r1
 8004bc0:	3284      	adds	r2, #132	@ 0x84
 8004bc2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004bc6:	f023 0307 	bic.w	r3, r3, #7
 8004bca:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	01db      	lsls	r3, r3, #7
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3384      	adds	r3, #132	@ 0x84
 8004bda:	461a      	mov	r2, r3
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	01db      	lsls	r3, r3, #7
 8004bec:	4413      	add	r3, r2
 8004bee:	3384      	adds	r3, #132	@ 0x84
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	6812      	ldr	r2, [r2, #0]
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	01d2      	lsls	r2, r2, #7
 8004bfc:	440a      	add	r2, r1
 8004bfe:	3284      	adds	r2, #132	@ 0x84
 8004c00:	f043 0301 	orr.w	r3, r3, #1
 8004c04:	6013      	str	r3, [r2, #0]
}
 8004c06:	bf00      	nop
 8004c08:	3724      	adds	r7, #36	@ 0x24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
	...

08004c14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e267      	b.n	80050f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d075      	beq.n	8004d1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c32:	4b88      	ldr	r3, [pc, #544]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 030c 	and.w	r3, r3, #12
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	d00c      	beq.n	8004c58 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c3e:	4b85      	ldr	r3, [pc, #532]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d112      	bne.n	8004c70 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c4a:	4b82      	ldr	r3, [pc, #520]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c56:	d10b      	bne.n	8004c70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c58:	4b7e      	ldr	r3, [pc, #504]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d05b      	beq.n	8004d1c <HAL_RCC_OscConfig+0x108>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d157      	bne.n	8004d1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e242      	b.n	80050f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c78:	d106      	bne.n	8004c88 <HAL_RCC_OscConfig+0x74>
 8004c7a:	4b76      	ldr	r3, [pc, #472]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a75      	ldr	r2, [pc, #468]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	e01d      	b.n	8004cc4 <HAL_RCC_OscConfig+0xb0>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c90:	d10c      	bne.n	8004cac <HAL_RCC_OscConfig+0x98>
 8004c92:	4b70      	ldr	r3, [pc, #448]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a6f      	ldr	r2, [pc, #444]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004c98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	4b6d      	ldr	r3, [pc, #436]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a6c      	ldr	r2, [pc, #432]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	e00b      	b.n	8004cc4 <HAL_RCC_OscConfig+0xb0>
 8004cac:	4b69      	ldr	r3, [pc, #420]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a68      	ldr	r2, [pc, #416]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004cb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	4b66      	ldr	r3, [pc, #408]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a65      	ldr	r2, [pc, #404]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004cbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d013      	beq.n	8004cf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ccc:	f7fe f874 	bl	8002db8 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cd4:	f7fe f870 	bl	8002db8 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b64      	cmp	r3, #100	@ 0x64
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e207      	b.n	80050f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce6:	4b5b      	ldr	r3, [pc, #364]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0f0      	beq.n	8004cd4 <HAL_RCC_OscConfig+0xc0>
 8004cf2:	e014      	b.n	8004d1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf4:	f7fe f860 	bl	8002db8 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cfc:	f7fe f85c 	bl	8002db8 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b64      	cmp	r3, #100	@ 0x64
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e1f3      	b.n	80050f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d0e:	4b51      	ldr	r3, [pc, #324]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1f0      	bne.n	8004cfc <HAL_RCC_OscConfig+0xe8>
 8004d1a:	e000      	b.n	8004d1e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d063      	beq.n	8004df2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d2a:	4b4a      	ldr	r3, [pc, #296]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 030c 	and.w	r3, r3, #12
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00b      	beq.n	8004d4e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d36:	4b47      	ldr	r3, [pc, #284]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d11c      	bne.n	8004d7c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d42:	4b44      	ldr	r3, [pc, #272]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d116      	bne.n	8004d7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d4e:	4b41      	ldr	r3, [pc, #260]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d005      	beq.n	8004d66 <HAL_RCC_OscConfig+0x152>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d001      	beq.n	8004d66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e1c7      	b.n	80050f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d66:	4b3b      	ldr	r3, [pc, #236]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	4937      	ldr	r1, [pc, #220]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d7a:	e03a      	b.n	8004df2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d020      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d84:	4b34      	ldr	r3, [pc, #208]	@ (8004e58 <HAL_RCC_OscConfig+0x244>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8a:	f7fe f815 	bl	8002db8 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d90:	e008      	b.n	8004da4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d92:	f7fe f811 	bl	8002db8 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e1a8      	b.n	80050f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da4:	4b2b      	ldr	r3, [pc, #172]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0f0      	beq.n	8004d92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db0:	4b28      	ldr	r3, [pc, #160]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	4925      	ldr	r1, [pc, #148]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	600b      	str	r3, [r1, #0]
 8004dc4:	e015      	b.n	8004df2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dc6:	4b24      	ldr	r3, [pc, #144]	@ (8004e58 <HAL_RCC_OscConfig+0x244>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dcc:	f7fd fff4 	bl	8002db8 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dd4:	f7fd fff0 	bl	8002db8 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e187      	b.n	80050f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004de6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1f0      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d036      	beq.n	8004e6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d016      	beq.n	8004e34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e06:	4b15      	ldr	r3, [pc, #84]	@ (8004e5c <HAL_RCC_OscConfig+0x248>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e0c:	f7fd ffd4 	bl	8002db8 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e14:	f7fd ffd0 	bl	8002db8 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e167      	b.n	80050f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e26:	4b0b      	ldr	r3, [pc, #44]	@ (8004e54 <HAL_RCC_OscConfig+0x240>)
 8004e28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f0      	beq.n	8004e14 <HAL_RCC_OscConfig+0x200>
 8004e32:	e01b      	b.n	8004e6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e34:	4b09      	ldr	r3, [pc, #36]	@ (8004e5c <HAL_RCC_OscConfig+0x248>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e3a:	f7fd ffbd 	bl	8002db8 <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e40:	e00e      	b.n	8004e60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e42:	f7fd ffb9 	bl	8002db8 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d907      	bls.n	8004e60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e150      	b.n	80050f6 <HAL_RCC_OscConfig+0x4e2>
 8004e54:	40023800 	.word	0x40023800
 8004e58:	42470000 	.word	0x42470000
 8004e5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e60:	4b88      	ldr	r3, [pc, #544]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 8004e62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1ea      	bne.n	8004e42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 8097 	beq.w	8004fa8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e7e:	4b81      	ldr	r3, [pc, #516]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10f      	bne.n	8004eaa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60bb      	str	r3, [r7, #8]
 8004e8e:	4b7d      	ldr	r3, [pc, #500]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 8004e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e92:	4a7c      	ldr	r2, [pc, #496]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 8004e94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e9a:	4b7a      	ldr	r3, [pc, #488]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ea2:	60bb      	str	r3, [r7, #8]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eaa:	4b77      	ldr	r3, [pc, #476]	@ (8005088 <HAL_RCC_OscConfig+0x474>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d118      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eb6:	4b74      	ldr	r3, [pc, #464]	@ (8005088 <HAL_RCC_OscConfig+0x474>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a73      	ldr	r2, [pc, #460]	@ (8005088 <HAL_RCC_OscConfig+0x474>)
 8004ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ec2:	f7fd ff79 	bl	8002db8 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eca:	f7fd ff75 	bl	8002db8 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e10c      	b.n	80050f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004edc:	4b6a      	ldr	r3, [pc, #424]	@ (8005088 <HAL_RCC_OscConfig+0x474>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0f0      	beq.n	8004eca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d106      	bne.n	8004efe <HAL_RCC_OscConfig+0x2ea>
 8004ef0:	4b64      	ldr	r3, [pc, #400]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 8004ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef4:	4a63      	ldr	r2, [pc, #396]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004efc:	e01c      	b.n	8004f38 <HAL_RCC_OscConfig+0x324>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	2b05      	cmp	r3, #5
 8004f04:	d10c      	bne.n	8004f20 <HAL_RCC_OscConfig+0x30c>
 8004f06:	4b5f      	ldr	r3, [pc, #380]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 8004f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0a:	4a5e      	ldr	r2, [pc, #376]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 8004f0c:	f043 0304 	orr.w	r3, r3, #4
 8004f10:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f12:	4b5c      	ldr	r3, [pc, #368]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 8004f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f16:	4a5b      	ldr	r2, [pc, #364]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 8004f18:	f043 0301 	orr.w	r3, r3, #1
 8004f1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f1e:	e00b      	b.n	8004f38 <HAL_RCC_OscConfig+0x324>
 8004f20:	4b58      	ldr	r3, [pc, #352]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 8004f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f24:	4a57      	ldr	r2, [pc, #348]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 8004f26:	f023 0301 	bic.w	r3, r3, #1
 8004f2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f2c:	4b55      	ldr	r3, [pc, #340]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 8004f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f30:	4a54      	ldr	r2, [pc, #336]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 8004f32:	f023 0304 	bic.w	r3, r3, #4
 8004f36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d015      	beq.n	8004f6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f40:	f7fd ff3a 	bl	8002db8 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f46:	e00a      	b.n	8004f5e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f48:	f7fd ff36 	bl	8002db8 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e0cb      	b.n	80050f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f5e:	4b49      	ldr	r3, [pc, #292]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 8004f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0ee      	beq.n	8004f48 <HAL_RCC_OscConfig+0x334>
 8004f6a:	e014      	b.n	8004f96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f6c:	f7fd ff24 	bl	8002db8 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f72:	e00a      	b.n	8004f8a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f74:	f7fd ff20 	bl	8002db8 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e0b5      	b.n	80050f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f8a:	4b3e      	ldr	r3, [pc, #248]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1ee      	bne.n	8004f74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d105      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f9c:	4b39      	ldr	r3, [pc, #228]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa0:	4a38      	ldr	r2, [pc, #224]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 8004fa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fa6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 80a1 	beq.w	80050f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fb2:	4b34      	ldr	r3, [pc, #208]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d05c      	beq.n	8005078 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d141      	bne.n	800504a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc6:	4b31      	ldr	r3, [pc, #196]	@ (800508c <HAL_RCC_OscConfig+0x478>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fcc:	f7fd fef4 	bl	8002db8 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd4:	f7fd fef0 	bl	8002db8 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e087      	b.n	80050f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe6:	4b27      	ldr	r3, [pc, #156]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69da      	ldr	r2, [r3, #28]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005000:	019b      	lsls	r3, r3, #6
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005008:	085b      	lsrs	r3, r3, #1
 800500a:	3b01      	subs	r3, #1
 800500c:	041b      	lsls	r3, r3, #16
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005014:	061b      	lsls	r3, r3, #24
 8005016:	491b      	ldr	r1, [pc, #108]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 8005018:	4313      	orrs	r3, r2
 800501a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800501c:	4b1b      	ldr	r3, [pc, #108]	@ (800508c <HAL_RCC_OscConfig+0x478>)
 800501e:	2201      	movs	r2, #1
 8005020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005022:	f7fd fec9 	bl	8002db8 <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005028:	e008      	b.n	800503c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800502a:	f7fd fec5 	bl	8002db8 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e05c      	b.n	80050f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800503c:	4b11      	ldr	r3, [pc, #68]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0f0      	beq.n	800502a <HAL_RCC_OscConfig+0x416>
 8005048:	e054      	b.n	80050f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800504a:	4b10      	ldr	r3, [pc, #64]	@ (800508c <HAL_RCC_OscConfig+0x478>)
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005050:	f7fd feb2 	bl	8002db8 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005058:	f7fd feae 	bl	8002db8 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e045      	b.n	80050f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800506a:	4b06      	ldr	r3, [pc, #24]	@ (8005084 <HAL_RCC_OscConfig+0x470>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1f0      	bne.n	8005058 <HAL_RCC_OscConfig+0x444>
 8005076:	e03d      	b.n	80050f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d107      	bne.n	8005090 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e038      	b.n	80050f6 <HAL_RCC_OscConfig+0x4e2>
 8005084:	40023800 	.word	0x40023800
 8005088:	40007000 	.word	0x40007000
 800508c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005090:	4b1b      	ldr	r3, [pc, #108]	@ (8005100 <HAL_RCC_OscConfig+0x4ec>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d028      	beq.n	80050f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d121      	bne.n	80050f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d11a      	bne.n	80050f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050c0:	4013      	ands	r3, r2
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d111      	bne.n	80050f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d6:	085b      	lsrs	r3, r3, #1
 80050d8:	3b01      	subs	r3, #1
 80050da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050dc:	429a      	cmp	r2, r3
 80050de:	d107      	bne.n	80050f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d001      	beq.n	80050f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e000      	b.n	80050f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	40023800 	.word	0x40023800

08005104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e0cc      	b.n	80052b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005118:	4b68      	ldr	r3, [pc, #416]	@ (80052bc <HAL_RCC_ClockConfig+0x1b8>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 030f 	and.w	r3, r3, #15
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d90c      	bls.n	8005140 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005126:	4b65      	ldr	r3, [pc, #404]	@ (80052bc <HAL_RCC_ClockConfig+0x1b8>)
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800512e:	4b63      	ldr	r3, [pc, #396]	@ (80052bc <HAL_RCC_ClockConfig+0x1b8>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	429a      	cmp	r2, r3
 800513a:	d001      	beq.n	8005140 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e0b8      	b.n	80052b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d020      	beq.n	800518e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	d005      	beq.n	8005164 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005158:	4b59      	ldr	r3, [pc, #356]	@ (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	4a58      	ldr	r2, [pc, #352]	@ (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005162:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0308 	and.w	r3, r3, #8
 800516c:	2b00      	cmp	r3, #0
 800516e:	d005      	beq.n	800517c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005170:	4b53      	ldr	r3, [pc, #332]	@ (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	4a52      	ldr	r2, [pc, #328]	@ (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005176:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800517a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800517c:	4b50      	ldr	r3, [pc, #320]	@ (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	494d      	ldr	r1, [pc, #308]	@ (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	4313      	orrs	r3, r2
 800518c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d044      	beq.n	8005224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d107      	bne.n	80051b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051a2:	4b47      	ldr	r3, [pc, #284]	@ (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d119      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e07f      	b.n	80052b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d003      	beq.n	80051c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051be:	2b03      	cmp	r3, #3
 80051c0:	d107      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051c2:	4b3f      	ldr	r3, [pc, #252]	@ (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d109      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e06f      	b.n	80052b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051d2:	4b3b      	ldr	r3, [pc, #236]	@ (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e067      	b.n	80052b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051e2:	4b37      	ldr	r3, [pc, #220]	@ (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f023 0203 	bic.w	r2, r3, #3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	4934      	ldr	r1, [pc, #208]	@ (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051f4:	f7fd fde0 	bl	8002db8 <HAL_GetTick>
 80051f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051fa:	e00a      	b.n	8005212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051fc:	f7fd fddc 	bl	8002db8 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800520a:	4293      	cmp	r3, r2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e04f      	b.n	80052b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005212:	4b2b      	ldr	r3, [pc, #172]	@ (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 020c 	and.w	r2, r3, #12
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	429a      	cmp	r2, r3
 8005222:	d1eb      	bne.n	80051fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005224:	4b25      	ldr	r3, [pc, #148]	@ (80052bc <HAL_RCC_ClockConfig+0x1b8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 030f 	and.w	r3, r3, #15
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d20c      	bcs.n	800524c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005232:	4b22      	ldr	r3, [pc, #136]	@ (80052bc <HAL_RCC_ClockConfig+0x1b8>)
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800523a:	4b20      	ldr	r3, [pc, #128]	@ (80052bc <HAL_RCC_ClockConfig+0x1b8>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 030f 	and.w	r3, r3, #15
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d001      	beq.n	800524c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e032      	b.n	80052b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b00      	cmp	r3, #0
 8005256:	d008      	beq.n	800526a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005258:	4b19      	ldr	r3, [pc, #100]	@ (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	4916      	ldr	r1, [pc, #88]	@ (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005266:	4313      	orrs	r3, r2
 8005268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0308 	and.w	r3, r3, #8
 8005272:	2b00      	cmp	r3, #0
 8005274:	d009      	beq.n	800528a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005276:	4b12      	ldr	r3, [pc, #72]	@ (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	490e      	ldr	r1, [pc, #56]	@ (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005286:	4313      	orrs	r3, r2
 8005288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800528a:	f000 f821 	bl	80052d0 <HAL_RCC_GetSysClockFreq>
 800528e:	4602      	mov	r2, r0
 8005290:	4b0b      	ldr	r3, [pc, #44]	@ (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	091b      	lsrs	r3, r3, #4
 8005296:	f003 030f 	and.w	r3, r3, #15
 800529a:	490a      	ldr	r1, [pc, #40]	@ (80052c4 <HAL_RCC_ClockConfig+0x1c0>)
 800529c:	5ccb      	ldrb	r3, [r1, r3]
 800529e:	fa22 f303 	lsr.w	r3, r2, r3
 80052a2:	4a09      	ldr	r2, [pc, #36]	@ (80052c8 <HAL_RCC_ClockConfig+0x1c4>)
 80052a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80052a6:	4b09      	ldr	r3, [pc, #36]	@ (80052cc <HAL_RCC_ClockConfig+0x1c8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fd fd40 	bl	8002d30 <HAL_InitTick>

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	40023c00 	.word	0x40023c00
 80052c0:	40023800 	.word	0x40023800
 80052c4:	08008108 	.word	0x08008108
 80052c8:	20000010 	.word	0x20000010
 80052cc:	20000014 	.word	0x20000014

080052d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052d4:	b094      	sub	sp, #80	@ 0x50
 80052d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052e8:	4b79      	ldr	r3, [pc, #484]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f003 030c 	and.w	r3, r3, #12
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d00d      	beq.n	8005310 <HAL_RCC_GetSysClockFreq+0x40>
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	f200 80e1 	bhi.w	80054bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <HAL_RCC_GetSysClockFreq+0x34>
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d003      	beq.n	800530a <HAL_RCC_GetSysClockFreq+0x3a>
 8005302:	e0db      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005304:	4b73      	ldr	r3, [pc, #460]	@ (80054d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005306:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005308:	e0db      	b.n	80054c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800530a:	4b73      	ldr	r3, [pc, #460]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800530c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800530e:	e0d8      	b.n	80054c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005310:	4b6f      	ldr	r3, [pc, #444]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005318:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800531a:	4b6d      	ldr	r3, [pc, #436]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d063      	beq.n	80053ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005326:	4b6a      	ldr	r3, [pc, #424]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	099b      	lsrs	r3, r3, #6
 800532c:	2200      	movs	r2, #0
 800532e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005330:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005338:	633b      	str	r3, [r7, #48]	@ 0x30
 800533a:	2300      	movs	r3, #0
 800533c:	637b      	str	r3, [r7, #52]	@ 0x34
 800533e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005342:	4622      	mov	r2, r4
 8005344:	462b      	mov	r3, r5
 8005346:	f04f 0000 	mov.w	r0, #0
 800534a:	f04f 0100 	mov.w	r1, #0
 800534e:	0159      	lsls	r1, r3, #5
 8005350:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005354:	0150      	lsls	r0, r2, #5
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	4621      	mov	r1, r4
 800535c:	1a51      	subs	r1, r2, r1
 800535e:	6139      	str	r1, [r7, #16]
 8005360:	4629      	mov	r1, r5
 8005362:	eb63 0301 	sbc.w	r3, r3, r1
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005374:	4659      	mov	r1, fp
 8005376:	018b      	lsls	r3, r1, #6
 8005378:	4651      	mov	r1, sl
 800537a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800537e:	4651      	mov	r1, sl
 8005380:	018a      	lsls	r2, r1, #6
 8005382:	4651      	mov	r1, sl
 8005384:	ebb2 0801 	subs.w	r8, r2, r1
 8005388:	4659      	mov	r1, fp
 800538a:	eb63 0901 	sbc.w	r9, r3, r1
 800538e:	f04f 0200 	mov.w	r2, #0
 8005392:	f04f 0300 	mov.w	r3, #0
 8005396:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800539a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800539e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053a2:	4690      	mov	r8, r2
 80053a4:	4699      	mov	r9, r3
 80053a6:	4623      	mov	r3, r4
 80053a8:	eb18 0303 	adds.w	r3, r8, r3
 80053ac:	60bb      	str	r3, [r7, #8]
 80053ae:	462b      	mov	r3, r5
 80053b0:	eb49 0303 	adc.w	r3, r9, r3
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	f04f 0200 	mov.w	r2, #0
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053c2:	4629      	mov	r1, r5
 80053c4:	024b      	lsls	r3, r1, #9
 80053c6:	4621      	mov	r1, r4
 80053c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053cc:	4621      	mov	r1, r4
 80053ce:	024a      	lsls	r2, r1, #9
 80053d0:	4610      	mov	r0, r2
 80053d2:	4619      	mov	r1, r3
 80053d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053d6:	2200      	movs	r2, #0
 80053d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053e0:	f7fa ff0c 	bl	80001fc <__aeabi_uldivmod>
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4613      	mov	r3, r2
 80053ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053ec:	e058      	b.n	80054a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ee:	4b38      	ldr	r3, [pc, #224]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	099b      	lsrs	r3, r3, #6
 80053f4:	2200      	movs	r2, #0
 80053f6:	4618      	mov	r0, r3
 80053f8:	4611      	mov	r1, r2
 80053fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053fe:	623b      	str	r3, [r7, #32]
 8005400:	2300      	movs	r3, #0
 8005402:	627b      	str	r3, [r7, #36]	@ 0x24
 8005404:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005408:	4642      	mov	r2, r8
 800540a:	464b      	mov	r3, r9
 800540c:	f04f 0000 	mov.w	r0, #0
 8005410:	f04f 0100 	mov.w	r1, #0
 8005414:	0159      	lsls	r1, r3, #5
 8005416:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800541a:	0150      	lsls	r0, r2, #5
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	4641      	mov	r1, r8
 8005422:	ebb2 0a01 	subs.w	sl, r2, r1
 8005426:	4649      	mov	r1, r9
 8005428:	eb63 0b01 	sbc.w	fp, r3, r1
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	f04f 0300 	mov.w	r3, #0
 8005434:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005438:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800543c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005440:	ebb2 040a 	subs.w	r4, r2, sl
 8005444:	eb63 050b 	sbc.w	r5, r3, fp
 8005448:	f04f 0200 	mov.w	r2, #0
 800544c:	f04f 0300 	mov.w	r3, #0
 8005450:	00eb      	lsls	r3, r5, #3
 8005452:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005456:	00e2      	lsls	r2, r4, #3
 8005458:	4614      	mov	r4, r2
 800545a:	461d      	mov	r5, r3
 800545c:	4643      	mov	r3, r8
 800545e:	18e3      	adds	r3, r4, r3
 8005460:	603b      	str	r3, [r7, #0]
 8005462:	464b      	mov	r3, r9
 8005464:	eb45 0303 	adc.w	r3, r5, r3
 8005468:	607b      	str	r3, [r7, #4]
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	f04f 0300 	mov.w	r3, #0
 8005472:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005476:	4629      	mov	r1, r5
 8005478:	028b      	lsls	r3, r1, #10
 800547a:	4621      	mov	r1, r4
 800547c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005480:	4621      	mov	r1, r4
 8005482:	028a      	lsls	r2, r1, #10
 8005484:	4610      	mov	r0, r2
 8005486:	4619      	mov	r1, r3
 8005488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800548a:	2200      	movs	r2, #0
 800548c:	61bb      	str	r3, [r7, #24]
 800548e:	61fa      	str	r2, [r7, #28]
 8005490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005494:	f7fa feb2 	bl	80001fc <__aeabi_uldivmod>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4613      	mov	r3, r2
 800549e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80054a0:	4b0b      	ldr	r3, [pc, #44]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	0c1b      	lsrs	r3, r3, #16
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	3301      	adds	r3, #1
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80054b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054ba:	e002      	b.n	80054c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054bc:	4b05      	ldr	r3, [pc, #20]	@ (80054d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80054be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3750      	adds	r7, #80	@ 0x50
 80054c8:	46bd      	mov	sp, r7
 80054ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054ce:	bf00      	nop
 80054d0:	40023800 	.word	0x40023800
 80054d4:	00f42400 	.word	0x00f42400
 80054d8:	007a1200 	.word	0x007a1200

080054dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054e0:	4b03      	ldr	r3, [pc, #12]	@ (80054f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80054e2:	681b      	ldr	r3, [r3, #0]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	20000010 	.word	0x20000010

080054f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054f8:	f7ff fff0 	bl	80054dc <HAL_RCC_GetHCLKFreq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4b05      	ldr	r3, [pc, #20]	@ (8005514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	0a9b      	lsrs	r3, r3, #10
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	4903      	ldr	r1, [pc, #12]	@ (8005518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800550a:	5ccb      	ldrb	r3, [r1, r3]
 800550c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005510:	4618      	mov	r0, r3
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40023800 	.word	0x40023800
 8005518:	08008118 	.word	0x08008118

0800551c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10b      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005540:	2b00      	cmp	r3, #0
 8005542:	d105      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800554c:	2b00      	cmp	r3, #0
 800554e:	d075      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005550:	4b91      	ldr	r3, [pc, #580]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005556:	f7fd fc2f 	bl	8002db8 <HAL_GetTick>
 800555a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800555c:	e008      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800555e:	f7fd fc2b 	bl	8002db8 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e189      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005570:	4b8a      	ldr	r3, [pc, #552]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1f0      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d009      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	019a      	lsls	r2, r3, #6
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	071b      	lsls	r3, r3, #28
 8005594:	4981      	ldr	r1, [pc, #516]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005596:	4313      	orrs	r3, r2
 8005598:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d01f      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055a8:	4b7c      	ldr	r3, [pc, #496]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055ae:	0f1b      	lsrs	r3, r3, #28
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	019a      	lsls	r2, r3, #6
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	061b      	lsls	r3, r3, #24
 80055c2:	431a      	orrs	r2, r3
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	071b      	lsls	r3, r3, #28
 80055c8:	4974      	ldr	r1, [pc, #464]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80055d0:	4b72      	ldr	r3, [pc, #456]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055d6:	f023 021f 	bic.w	r2, r3, #31
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	3b01      	subs	r3, #1
 80055e0:	496e      	ldr	r1, [pc, #440]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00d      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	019a      	lsls	r2, r3, #6
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	061b      	lsls	r3, r3, #24
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	071b      	lsls	r3, r3, #28
 8005608:	4964      	ldr	r1, [pc, #400]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005610:	4b61      	ldr	r3, [pc, #388]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005612:	2201      	movs	r2, #1
 8005614:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005616:	f7fd fbcf 	bl	8002db8 <HAL_GetTick>
 800561a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800561c:	e008      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800561e:	f7fd fbcb 	bl	8002db8 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d901      	bls.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e129      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005630:	4b5a      	ldr	r3, [pc, #360]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0f0      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b00      	cmp	r3, #0
 8005646:	d105      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005650:	2b00      	cmp	r3, #0
 8005652:	d079      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005654:	4b52      	ldr	r3, [pc, #328]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800565a:	f7fd fbad 	bl	8002db8 <HAL_GetTick>
 800565e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005660:	e008      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005662:	f7fd fba9 	bl	8002db8 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d901      	bls.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e107      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005674:	4b49      	ldr	r3, [pc, #292]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800567c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005680:	d0ef      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	2b00      	cmp	r3, #0
 800568c:	d020      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800568e:	4b43      	ldr	r3, [pc, #268]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005694:	0f1b      	lsrs	r3, r3, #28
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	019a      	lsls	r2, r3, #6
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	061b      	lsls	r3, r3, #24
 80056a8:	431a      	orrs	r2, r3
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	071b      	lsls	r3, r3, #28
 80056ae:	493b      	ldr	r1, [pc, #236]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80056b6:	4b39      	ldr	r3, [pc, #228]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056bc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	3b01      	subs	r3, #1
 80056c6:	021b      	lsls	r3, r3, #8
 80056c8:	4934      	ldr	r1, [pc, #208]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01e      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056dc:	4b2f      	ldr	r3, [pc, #188]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e2:	0e1b      	lsrs	r3, r3, #24
 80056e4:	f003 030f 	and.w	r3, r3, #15
 80056e8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	019a      	lsls	r2, r3, #6
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	061b      	lsls	r3, r3, #24
 80056f4:	431a      	orrs	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	071b      	lsls	r3, r3, #28
 80056fc:	4927      	ldr	r1, [pc, #156]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005704:	4b25      	ldr	r3, [pc, #148]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800570a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005712:	4922      	ldr	r1, [pc, #136]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800571a:	4b21      	ldr	r3, [pc, #132]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800571c:	2201      	movs	r2, #1
 800571e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005720:	f7fd fb4a 	bl	8002db8 <HAL_GetTick>
 8005724:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005726:	e008      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005728:	f7fd fb46 	bl	8002db8 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e0a4      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800573a:	4b18      	ldr	r3, [pc, #96]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005746:	d1ef      	bne.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0320 	and.w	r3, r3, #32
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 808b 	beq.w	800586c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	4b10      	ldr	r3, [pc, #64]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800575c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575e:	4a0f      	ldr	r2, [pc, #60]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005764:	6413      	str	r3, [r2, #64]	@ 0x40
 8005766:	4b0d      	ldr	r3, [pc, #52]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005772:	4b0c      	ldr	r3, [pc, #48]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a0b      	ldr	r2, [pc, #44]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800577c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800577e:	f7fd fb1b 	bl	8002db8 <HAL_GetTick>
 8005782:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005784:	e010      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005786:	f7fd fb17 	bl	8002db8 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d909      	bls.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e075      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005798:	42470068 	.word	0x42470068
 800579c:	40023800 	.word	0x40023800
 80057a0:	42470070 	.word	0x42470070
 80057a4:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80057a8:	4b38      	ldr	r3, [pc, #224]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0e8      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057b4:	4b36      	ldr	r3, [pc, #216]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057bc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d02f      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d028      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057d2:	4b2f      	ldr	r3, [pc, #188]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057da:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057dc:	4b2d      	ldr	r3, [pc, #180]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80057de:	2201      	movs	r2, #1
 80057e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057e2:	4b2c      	ldr	r3, [pc, #176]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80057e8:	4a29      	ldr	r2, [pc, #164]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057ee:	4b28      	ldr	r3, [pc, #160]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d114      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80057fa:	f7fd fadd 	bl	8002db8 <HAL_GetTick>
 80057fe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005800:	e00a      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005802:	f7fd fad9 	bl	8002db8 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005810:	4293      	cmp	r3, r2
 8005812:	d901      	bls.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e035      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005818:	4b1d      	ldr	r3, [pc, #116]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800581a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0ee      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005828:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800582c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005830:	d10d      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005832:	4b17      	ldr	r3, [pc, #92]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005842:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005846:	4912      	ldr	r1, [pc, #72]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005848:	4313      	orrs	r3, r2
 800584a:	608b      	str	r3, [r1, #8]
 800584c:	e005      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800584e:	4b10      	ldr	r3, [pc, #64]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	4a0f      	ldr	r2, [pc, #60]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005854:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005858:	6093      	str	r3, [r2, #8]
 800585a:	4b0d      	ldr	r3, [pc, #52]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800585c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005866:	490a      	ldr	r1, [pc, #40]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005868:	4313      	orrs	r3, r2
 800586a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b00      	cmp	r3, #0
 8005876:	d004      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800587e:	4b06      	ldr	r3, [pc, #24]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005880:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3718      	adds	r7, #24
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	40007000 	.word	0x40007000
 8005890:	40023800 	.word	0x40023800
 8005894:	42470e40 	.word	0x42470e40
 8005898:	424711e0 	.word	0x424711e0

0800589c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e01c      	b.n	80058e8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	795b      	ldrb	r3, [r3, #5]
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d105      	bne.n	80058c4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fc fdb6 	bl	8002430 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0204 	orr.w	r2, r2, #4
 80058d8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	791b      	ldrb	r3, [r3, #4]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d101      	bne.n	800590a <HAL_RNG_GenerateRandomNumber+0x1a>
 8005906:	2302      	movs	r3, #2
 8005908:	e044      	b.n	8005994 <HAL_RNG_GenerateRandomNumber+0xa4>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	795b      	ldrb	r3, [r3, #5]
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b01      	cmp	r3, #1
 8005918:	d133      	bne.n	8005982 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2202      	movs	r2, #2
 800591e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005920:	f7fd fa4a 	bl	8002db8 <HAL_GetTick>
 8005924:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005926:	e018      	b.n	800595a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005928:	f7fd fa46 	bl	8002db8 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d911      	bls.n	800595a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b01      	cmp	r3, #1
 8005942:	d00a      	beq.n	800595a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2202      	movs	r2, #2
 800594e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e01c      	b.n	8005994 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	2b01      	cmp	r3, #1
 8005966:	d1df      	bne.n	8005928 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	715a      	strb	r2, [r3, #5]
 8005980:	e004      	b.n	800598c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2204      	movs	r2, #4
 8005986:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	711a      	strb	r2, [r3, #4]

  return status;
 8005992:	7bfb      	ldrb	r3, [r7, #15]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e07b      	b.n	8005aa6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d108      	bne.n	80059c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059be:	d009      	beq.n	80059d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	61da      	str	r2, [r3, #28]
 80059c6:	e005      	b.n	80059d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7fc fd40 	bl	8002474 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	f003 0302 	and.w	r3, r3, #2
 8005a30:	431a      	orrs	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a44:	431a      	orrs	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a58:	ea42 0103 	orr.w	r1, r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a60:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	0c1b      	lsrs	r3, r3, #16
 8005a72:	f003 0104 	and.w	r1, r3, #4
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7a:	f003 0210 	and.w	r2, r3, #16
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	69da      	ldr	r2, [r3, #28]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b082      	sub	sp, #8
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e01a      	b.n	8005af6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ad6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7fc fd13 	bl	8002504 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b088      	sub	sp, #32
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	60f8      	str	r0, [r7, #12]
 8005b06:	60b9      	str	r1, [r7, #8]
 8005b08:	603b      	str	r3, [r7, #0]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b0e:	f7fd f953 	bl	8002db8 <HAL_GetTick>
 8005b12:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005b14:	88fb      	ldrh	r3, [r7, #6]
 8005b16:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d001      	beq.n	8005b28 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005b24:	2302      	movs	r3, #2
 8005b26:	e12a      	b.n	8005d7e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d002      	beq.n	8005b34 <HAL_SPI_Transmit+0x36>
 8005b2e:	88fb      	ldrh	r3, [r7, #6]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e122      	b.n	8005d7e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d101      	bne.n	8005b46 <HAL_SPI_Transmit+0x48>
 8005b42:	2302      	movs	r3, #2
 8005b44:	e11b      	b.n	8005d7e <HAL_SPI_Transmit+0x280>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2203      	movs	r2, #3
 8005b52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	88fa      	ldrh	r2, [r7, #6]
 8005b66:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	88fa      	ldrh	r2, [r7, #6]
 8005b6c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b94:	d10f      	bne.n	8005bb6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ba4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bb4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc0:	2b40      	cmp	r3, #64	@ 0x40
 8005bc2:	d007      	beq.n	8005bd4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bdc:	d152      	bne.n	8005c84 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <HAL_SPI_Transmit+0xee>
 8005be6:	8b7b      	ldrh	r3, [r7, #26]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d145      	bne.n	8005c78 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf0:	881a      	ldrh	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfc:	1c9a      	adds	r2, r3, #2
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c10:	e032      	b.n	8005c78 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d112      	bne.n	8005c46 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c24:	881a      	ldrh	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c30:	1c9a      	adds	r2, r3, #2
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005c44:	e018      	b.n	8005c78 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c46:	f7fd f8b7 	bl	8002db8 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d803      	bhi.n	8005c5e <HAL_SPI_Transmit+0x160>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c5c:	d102      	bne.n	8005c64 <HAL_SPI_Transmit+0x166>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d109      	bne.n	8005c78 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e082      	b.n	8005d7e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1c7      	bne.n	8005c12 <HAL_SPI_Transmit+0x114>
 8005c82:	e053      	b.n	8005d2c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <HAL_SPI_Transmit+0x194>
 8005c8c:	8b7b      	ldrh	r3, [r7, #26]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d147      	bne.n	8005d22 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	330c      	adds	r3, #12
 8005c9c:	7812      	ldrb	r2, [r2, #0]
 8005c9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005cb8:	e033      	b.n	8005d22 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d113      	bne.n	8005cf0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	330c      	adds	r3, #12
 8005cd2:	7812      	ldrb	r2, [r2, #0]
 8005cd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005cee:	e018      	b.n	8005d22 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cf0:	f7fd f862 	bl	8002db8 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d803      	bhi.n	8005d08 <HAL_SPI_Transmit+0x20a>
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d06:	d102      	bne.n	8005d0e <HAL_SPI_Transmit+0x210>
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d109      	bne.n	8005d22 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e02d      	b.n	8005d7e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1c6      	bne.n	8005cba <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d2c:	69fa      	ldr	r2, [r7, #28]
 8005d2e:	6839      	ldr	r1, [r7, #0]
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f8bf 	bl	8005eb4 <SPI_EndRxTxTransaction>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10a      	bne.n	8005d60 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	617b      	str	r3, [r7, #20]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	617b      	str	r3, [r7, #20]
 8005d5e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e000      	b.n	8005d7e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
  }
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3720      	adds	r7, #32
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d94:	b2db      	uxtb	r3, r3
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
	...

08005da4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	603b      	str	r3, [r7, #0]
 8005db0:	4613      	mov	r3, r2
 8005db2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005db4:	f7fd f800 	bl	8002db8 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dbc:	1a9b      	subs	r3, r3, r2
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005dc4:	f7fc fff8 	bl	8002db8 <HAL_GetTick>
 8005dc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005dca:	4b39      	ldr	r3, [pc, #228]	@ (8005eb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	015b      	lsls	r3, r3, #5
 8005dd0:	0d1b      	lsrs	r3, r3, #20
 8005dd2:	69fa      	ldr	r2, [r7, #28]
 8005dd4:	fb02 f303 	mul.w	r3, r2, r3
 8005dd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dda:	e054      	b.n	8005e86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005de2:	d050      	beq.n	8005e86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005de4:	f7fc ffe8 	bl	8002db8 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	69fa      	ldr	r2, [r7, #28]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d902      	bls.n	8005dfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d13d      	bne.n	8005e76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e12:	d111      	bne.n	8005e38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e1c:	d004      	beq.n	8005e28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e26:	d107      	bne.n	8005e38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e40:	d10f      	bne.n	8005e62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e017      	b.n	8005ea6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	bf0c      	ite	eq
 8005e96:	2301      	moveq	r3, #1
 8005e98:	2300      	movne	r3, #0
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	79fb      	ldrb	r3, [r7, #7]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d19b      	bne.n	8005ddc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3720      	adds	r7, #32
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20000010 	.word	0x20000010

08005eb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b088      	sub	sp, #32
 8005eb8:	af02      	add	r7, sp, #8
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	2102      	movs	r1, #2
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f7ff ff6a 	bl	8005da4 <SPI_WaitFlagStateUntilTimeout>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d007      	beq.n	8005ee6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eda:	f043 0220 	orr.w	r2, r3, #32
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e032      	b.n	8005f4c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8005f54 <SPI_EndRxTxTransaction+0xa0>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a1b      	ldr	r2, [pc, #108]	@ (8005f58 <SPI_EndRxTxTransaction+0xa4>)
 8005eec:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef0:	0d5b      	lsrs	r3, r3, #21
 8005ef2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005ef6:	fb02 f303 	mul.w	r3, r2, r3
 8005efa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f04:	d112      	bne.n	8005f2c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	2180      	movs	r1, #128	@ 0x80
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f7ff ff47 	bl	8005da4 <SPI_WaitFlagStateUntilTimeout>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d016      	beq.n	8005f4a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f20:	f043 0220 	orr.w	r2, r3, #32
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e00f      	b.n	8005f4c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00a      	beq.n	8005f48 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	3b01      	subs	r3, #1
 8005f36:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f42:	2b80      	cmp	r3, #128	@ 0x80
 8005f44:	d0f2      	beq.n	8005f2c <SPI_EndRxTxTransaction+0x78>
 8005f46:	e000      	b.n	8005f4a <SPI_EndRxTxTransaction+0x96>
        break;
 8005f48:	bf00      	nop
  }

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	20000010 	.word	0x20000010
 8005f58:	165e9f81 	.word	0x165e9f81

08005f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e041      	b.n	8005ff2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d106      	bne.n	8005f88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7fc fadc 	bl	8002540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3304      	adds	r3, #4
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4610      	mov	r0, r2
 8005f9c:	f000 f8f4 	bl	8006188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800600e:	2b01      	cmp	r3, #1
 8006010:	d101      	bne.n	8006016 <HAL_TIM_ConfigClockSource+0x1c>
 8006012:	2302      	movs	r3, #2
 8006014:	e0b4      	b.n	8006180 <HAL_TIM_ConfigClockSource+0x186>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2202      	movs	r2, #2
 8006022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006034:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800603c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800604e:	d03e      	beq.n	80060ce <HAL_TIM_ConfigClockSource+0xd4>
 8006050:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006054:	f200 8087 	bhi.w	8006166 <HAL_TIM_ConfigClockSource+0x16c>
 8006058:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800605c:	f000 8086 	beq.w	800616c <HAL_TIM_ConfigClockSource+0x172>
 8006060:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006064:	d87f      	bhi.n	8006166 <HAL_TIM_ConfigClockSource+0x16c>
 8006066:	2b70      	cmp	r3, #112	@ 0x70
 8006068:	d01a      	beq.n	80060a0 <HAL_TIM_ConfigClockSource+0xa6>
 800606a:	2b70      	cmp	r3, #112	@ 0x70
 800606c:	d87b      	bhi.n	8006166 <HAL_TIM_ConfigClockSource+0x16c>
 800606e:	2b60      	cmp	r3, #96	@ 0x60
 8006070:	d050      	beq.n	8006114 <HAL_TIM_ConfigClockSource+0x11a>
 8006072:	2b60      	cmp	r3, #96	@ 0x60
 8006074:	d877      	bhi.n	8006166 <HAL_TIM_ConfigClockSource+0x16c>
 8006076:	2b50      	cmp	r3, #80	@ 0x50
 8006078:	d03c      	beq.n	80060f4 <HAL_TIM_ConfigClockSource+0xfa>
 800607a:	2b50      	cmp	r3, #80	@ 0x50
 800607c:	d873      	bhi.n	8006166 <HAL_TIM_ConfigClockSource+0x16c>
 800607e:	2b40      	cmp	r3, #64	@ 0x40
 8006080:	d058      	beq.n	8006134 <HAL_TIM_ConfigClockSource+0x13a>
 8006082:	2b40      	cmp	r3, #64	@ 0x40
 8006084:	d86f      	bhi.n	8006166 <HAL_TIM_ConfigClockSource+0x16c>
 8006086:	2b30      	cmp	r3, #48	@ 0x30
 8006088:	d064      	beq.n	8006154 <HAL_TIM_ConfigClockSource+0x15a>
 800608a:	2b30      	cmp	r3, #48	@ 0x30
 800608c:	d86b      	bhi.n	8006166 <HAL_TIM_ConfigClockSource+0x16c>
 800608e:	2b20      	cmp	r3, #32
 8006090:	d060      	beq.n	8006154 <HAL_TIM_ConfigClockSource+0x15a>
 8006092:	2b20      	cmp	r3, #32
 8006094:	d867      	bhi.n	8006166 <HAL_TIM_ConfigClockSource+0x16c>
 8006096:	2b00      	cmp	r3, #0
 8006098:	d05c      	beq.n	8006154 <HAL_TIM_ConfigClockSource+0x15a>
 800609a:	2b10      	cmp	r3, #16
 800609c:	d05a      	beq.n	8006154 <HAL_TIM_ConfigClockSource+0x15a>
 800609e:	e062      	b.n	8006166 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060b0:	f000 f990 	bl	80063d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80060c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	609a      	str	r2, [r3, #8]
      break;
 80060cc:	e04f      	b.n	800616e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060de:	f000 f979 	bl	80063d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060f0:	609a      	str	r2, [r3, #8]
      break;
 80060f2:	e03c      	b.n	800616e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006100:	461a      	mov	r2, r3
 8006102:	f000 f8ed 	bl	80062e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2150      	movs	r1, #80	@ 0x50
 800610c:	4618      	mov	r0, r3
 800610e:	f000 f946 	bl	800639e <TIM_ITRx_SetConfig>
      break;
 8006112:	e02c      	b.n	800616e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006120:	461a      	mov	r2, r3
 8006122:	f000 f90c 	bl	800633e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2160      	movs	r1, #96	@ 0x60
 800612c:	4618      	mov	r0, r3
 800612e:	f000 f936 	bl	800639e <TIM_ITRx_SetConfig>
      break;
 8006132:	e01c      	b.n	800616e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006140:	461a      	mov	r2, r3
 8006142:	f000 f8cd 	bl	80062e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2140      	movs	r1, #64	@ 0x40
 800614c:	4618      	mov	r0, r3
 800614e:	f000 f926 	bl	800639e <TIM_ITRx_SetConfig>
      break;
 8006152:	e00c      	b.n	800616e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4619      	mov	r1, r3
 800615e:	4610      	mov	r0, r2
 8006160:	f000 f91d 	bl	800639e <TIM_ITRx_SetConfig>
      break;
 8006164:	e003      	b.n	800616e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	73fb      	strb	r3, [r7, #15]
      break;
 800616a:	e000      	b.n	800616e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800616c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800617e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a46      	ldr	r2, [pc, #280]	@ (80062b4 <TIM_Base_SetConfig+0x12c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d013      	beq.n	80061c8 <TIM_Base_SetConfig+0x40>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a6:	d00f      	beq.n	80061c8 <TIM_Base_SetConfig+0x40>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a43      	ldr	r2, [pc, #268]	@ (80062b8 <TIM_Base_SetConfig+0x130>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d00b      	beq.n	80061c8 <TIM_Base_SetConfig+0x40>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a42      	ldr	r2, [pc, #264]	@ (80062bc <TIM_Base_SetConfig+0x134>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d007      	beq.n	80061c8 <TIM_Base_SetConfig+0x40>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a41      	ldr	r2, [pc, #260]	@ (80062c0 <TIM_Base_SetConfig+0x138>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d003      	beq.n	80061c8 <TIM_Base_SetConfig+0x40>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a40      	ldr	r2, [pc, #256]	@ (80062c4 <TIM_Base_SetConfig+0x13c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d108      	bne.n	80061da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a35      	ldr	r2, [pc, #212]	@ (80062b4 <TIM_Base_SetConfig+0x12c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d02b      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061e8:	d027      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a32      	ldr	r2, [pc, #200]	@ (80062b8 <TIM_Base_SetConfig+0x130>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d023      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a31      	ldr	r2, [pc, #196]	@ (80062bc <TIM_Base_SetConfig+0x134>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d01f      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a30      	ldr	r2, [pc, #192]	@ (80062c0 <TIM_Base_SetConfig+0x138>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d01b      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a2f      	ldr	r2, [pc, #188]	@ (80062c4 <TIM_Base_SetConfig+0x13c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d017      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a2e      	ldr	r2, [pc, #184]	@ (80062c8 <TIM_Base_SetConfig+0x140>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d013      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a2d      	ldr	r2, [pc, #180]	@ (80062cc <TIM_Base_SetConfig+0x144>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d00f      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a2c      	ldr	r2, [pc, #176]	@ (80062d0 <TIM_Base_SetConfig+0x148>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d00b      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a2b      	ldr	r2, [pc, #172]	@ (80062d4 <TIM_Base_SetConfig+0x14c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d007      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a2a      	ldr	r2, [pc, #168]	@ (80062d8 <TIM_Base_SetConfig+0x150>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d003      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a29      	ldr	r2, [pc, #164]	@ (80062dc <TIM_Base_SetConfig+0x154>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d108      	bne.n	800624c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	4313      	orrs	r3, r2
 800624a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	4313      	orrs	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a10      	ldr	r2, [pc, #64]	@ (80062b4 <TIM_Base_SetConfig+0x12c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d003      	beq.n	8006280 <TIM_Base_SetConfig+0xf8>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a12      	ldr	r2, [pc, #72]	@ (80062c4 <TIM_Base_SetConfig+0x13c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d103      	bne.n	8006288 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	691a      	ldr	r2, [r3, #16]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b01      	cmp	r3, #1
 8006298:	d105      	bne.n	80062a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f023 0201 	bic.w	r2, r3, #1
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	611a      	str	r2, [r3, #16]
  }
}
 80062a6:	bf00      	nop
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	40010000 	.word	0x40010000
 80062b8:	40000400 	.word	0x40000400
 80062bc:	40000800 	.word	0x40000800
 80062c0:	40000c00 	.word	0x40000c00
 80062c4:	40010400 	.word	0x40010400
 80062c8:	40014000 	.word	0x40014000
 80062cc:	40014400 	.word	0x40014400
 80062d0:	40014800 	.word	0x40014800
 80062d4:	40001800 	.word	0x40001800
 80062d8:	40001c00 	.word	0x40001c00
 80062dc:	40002000 	.word	0x40002000

080062e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	f023 0201 	bic.w	r2, r3, #1
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800630a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	011b      	lsls	r3, r3, #4
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f023 030a 	bic.w	r3, r3, #10
 800631c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4313      	orrs	r3, r2
 8006324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	621a      	str	r2, [r3, #32]
}
 8006332:	bf00      	nop
 8006334:	371c      	adds	r7, #28
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800633e:	b480      	push	{r7}
 8006340:	b087      	sub	sp, #28
 8006342:	af00      	add	r7, sp, #0
 8006344:	60f8      	str	r0, [r7, #12]
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	f023 0210 	bic.w	r2, r3, #16
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006368:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	031b      	lsls	r3, r3, #12
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	4313      	orrs	r3, r2
 8006372:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800637a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	4313      	orrs	r3, r2
 8006384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	621a      	str	r2, [r3, #32]
}
 8006392:	bf00      	nop
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800639e:	b480      	push	{r7}
 80063a0:	b085      	sub	sp, #20
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	f043 0307 	orr.w	r3, r3, #7
 80063c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	609a      	str	r2, [r3, #8]
}
 80063c8:	bf00      	nop
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
 80063e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	021a      	lsls	r2, r3, #8
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	431a      	orrs	r2, r3
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	609a      	str	r2, [r3, #8]
}
 8006408:	bf00      	nop
 800640a:	371c      	adds	r7, #28
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006428:	2302      	movs	r3, #2
 800642a:	e05a      	b.n	80064e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006452:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a21      	ldr	r2, [pc, #132]	@ (80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d022      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006478:	d01d      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1d      	ldr	r2, [pc, #116]	@ (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d018      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a1b      	ldr	r2, [pc, #108]	@ (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d013      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1a      	ldr	r2, [pc, #104]	@ (80064fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00e      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a18      	ldr	r2, [pc, #96]	@ (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d009      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a17      	ldr	r2, [pc, #92]	@ (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d004      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a15      	ldr	r2, [pc, #84]	@ (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d10c      	bne.n	80064d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	40010000 	.word	0x40010000
 80064f4:	40000400 	.word	0x40000400
 80064f8:	40000800 	.word	0x40000800
 80064fc:	40000c00 	.word	0x40000c00
 8006500:	40010400 	.word	0x40010400
 8006504:	40014000 	.word	0x40014000
 8006508:	40001800 	.word	0x40001800

0800650c <findslot>:
 800650c:	4b0a      	ldr	r3, [pc, #40]	@ (8006538 <findslot+0x2c>)
 800650e:	b510      	push	{r4, lr}
 8006510:	4604      	mov	r4, r0
 8006512:	6818      	ldr	r0, [r3, #0]
 8006514:	b118      	cbz	r0, 800651e <findslot+0x12>
 8006516:	6a03      	ldr	r3, [r0, #32]
 8006518:	b90b      	cbnz	r3, 800651e <findslot+0x12>
 800651a:	f000 faf3 	bl	8006b04 <__sinit>
 800651e:	2c13      	cmp	r4, #19
 8006520:	d807      	bhi.n	8006532 <findslot+0x26>
 8006522:	4806      	ldr	r0, [pc, #24]	@ (800653c <findslot+0x30>)
 8006524:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8006528:	3201      	adds	r2, #1
 800652a:	d002      	beq.n	8006532 <findslot+0x26>
 800652c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8006530:	bd10      	pop	{r4, pc}
 8006532:	2000      	movs	r0, #0
 8006534:	e7fc      	b.n	8006530 <findslot+0x24>
 8006536:	bf00      	nop
 8006538:	20000030 	.word	0x20000030
 800653c:	20025c24 	.word	0x20025c24

08006540 <error>:
 8006540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006542:	4604      	mov	r4, r0
 8006544:	f000 fb1c 	bl	8006b80 <__errno>
 8006548:	2613      	movs	r6, #19
 800654a:	4605      	mov	r5, r0
 800654c:	2700      	movs	r7, #0
 800654e:	4630      	mov	r0, r6
 8006550:	4639      	mov	r1, r7
 8006552:	beab      	bkpt	0x00ab
 8006554:	4606      	mov	r6, r0
 8006556:	602e      	str	r6, [r5, #0]
 8006558:	4620      	mov	r0, r4
 800655a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800655c <checkerror>:
 800655c:	1c43      	adds	r3, r0, #1
 800655e:	d101      	bne.n	8006564 <checkerror+0x8>
 8006560:	f7ff bfee 	b.w	8006540 <error>
 8006564:	4770      	bx	lr

08006566 <_swiread>:
 8006566:	b530      	push	{r4, r5, lr}
 8006568:	b085      	sub	sp, #20
 800656a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800656e:	9203      	str	r2, [sp, #12]
 8006570:	2406      	movs	r4, #6
 8006572:	ad01      	add	r5, sp, #4
 8006574:	4620      	mov	r0, r4
 8006576:	4629      	mov	r1, r5
 8006578:	beab      	bkpt	0x00ab
 800657a:	4604      	mov	r4, r0
 800657c:	4620      	mov	r0, r4
 800657e:	f7ff ffed 	bl	800655c <checkerror>
 8006582:	b005      	add	sp, #20
 8006584:	bd30      	pop	{r4, r5, pc}

08006586 <_read>:
 8006586:	b570      	push	{r4, r5, r6, lr}
 8006588:	460e      	mov	r6, r1
 800658a:	4614      	mov	r4, r2
 800658c:	f7ff ffbe 	bl	800650c <findslot>
 8006590:	4605      	mov	r5, r0
 8006592:	b930      	cbnz	r0, 80065a2 <_read+0x1c>
 8006594:	f000 faf4 	bl	8006b80 <__errno>
 8006598:	2309      	movs	r3, #9
 800659a:	6003      	str	r3, [r0, #0]
 800659c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065a0:	bd70      	pop	{r4, r5, r6, pc}
 80065a2:	6800      	ldr	r0, [r0, #0]
 80065a4:	4622      	mov	r2, r4
 80065a6:	4631      	mov	r1, r6
 80065a8:	f7ff ffdd 	bl	8006566 <_swiread>
 80065ac:	1c43      	adds	r3, r0, #1
 80065ae:	d0f5      	beq.n	800659c <_read+0x16>
 80065b0:	686b      	ldr	r3, [r5, #4]
 80065b2:	1a20      	subs	r0, r4, r0
 80065b4:	4403      	add	r3, r0
 80065b6:	606b      	str	r3, [r5, #4]
 80065b8:	e7f2      	b.n	80065a0 <_read+0x1a>

080065ba <_swilseek>:
 80065ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065bc:	460c      	mov	r4, r1
 80065be:	4616      	mov	r6, r2
 80065c0:	f7ff ffa4 	bl	800650c <findslot>
 80065c4:	4605      	mov	r5, r0
 80065c6:	b940      	cbnz	r0, 80065da <_swilseek+0x20>
 80065c8:	f000 fada 	bl	8006b80 <__errno>
 80065cc:	2309      	movs	r3, #9
 80065ce:	6003      	str	r3, [r0, #0]
 80065d0:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80065d4:	4620      	mov	r0, r4
 80065d6:	b003      	add	sp, #12
 80065d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065da:	2e02      	cmp	r6, #2
 80065dc:	d903      	bls.n	80065e6 <_swilseek+0x2c>
 80065de:	f000 facf 	bl	8006b80 <__errno>
 80065e2:	2316      	movs	r3, #22
 80065e4:	e7f3      	b.n	80065ce <_swilseek+0x14>
 80065e6:	2e01      	cmp	r6, #1
 80065e8:	d112      	bne.n	8006610 <_swilseek+0x56>
 80065ea:	6843      	ldr	r3, [r0, #4]
 80065ec:	18e4      	adds	r4, r4, r3
 80065ee:	d4f6      	bmi.n	80065de <_swilseek+0x24>
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	260a      	movs	r6, #10
 80065f4:	e9cd 3400 	strd	r3, r4, [sp]
 80065f8:	466f      	mov	r7, sp
 80065fa:	4630      	mov	r0, r6
 80065fc:	4639      	mov	r1, r7
 80065fe:	beab      	bkpt	0x00ab
 8006600:	4606      	mov	r6, r0
 8006602:	4630      	mov	r0, r6
 8006604:	f7ff ffaa 	bl	800655c <checkerror>
 8006608:	2800      	cmp	r0, #0
 800660a:	dbe1      	blt.n	80065d0 <_swilseek+0x16>
 800660c:	606c      	str	r4, [r5, #4]
 800660e:	e7e1      	b.n	80065d4 <_swilseek+0x1a>
 8006610:	2e02      	cmp	r6, #2
 8006612:	6803      	ldr	r3, [r0, #0]
 8006614:	d1ec      	bne.n	80065f0 <_swilseek+0x36>
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	260c      	movs	r6, #12
 800661a:	466f      	mov	r7, sp
 800661c:	4630      	mov	r0, r6
 800661e:	4639      	mov	r1, r7
 8006620:	beab      	bkpt	0x00ab
 8006622:	4606      	mov	r6, r0
 8006624:	4630      	mov	r0, r6
 8006626:	f7ff ff99 	bl	800655c <checkerror>
 800662a:	1c43      	adds	r3, r0, #1
 800662c:	d0d0      	beq.n	80065d0 <_swilseek+0x16>
 800662e:	4404      	add	r4, r0
 8006630:	e7de      	b.n	80065f0 <_swilseek+0x36>

08006632 <_lseek>:
 8006632:	f7ff bfc2 	b.w	80065ba <_swilseek>

08006636 <_swiwrite>:
 8006636:	b530      	push	{r4, r5, lr}
 8006638:	b085      	sub	sp, #20
 800663a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800663e:	9203      	str	r2, [sp, #12]
 8006640:	2405      	movs	r4, #5
 8006642:	ad01      	add	r5, sp, #4
 8006644:	4620      	mov	r0, r4
 8006646:	4629      	mov	r1, r5
 8006648:	beab      	bkpt	0x00ab
 800664a:	4604      	mov	r4, r0
 800664c:	4620      	mov	r0, r4
 800664e:	f7ff ff85 	bl	800655c <checkerror>
 8006652:	b005      	add	sp, #20
 8006654:	bd30      	pop	{r4, r5, pc}

08006656 <_write>:
 8006656:	b570      	push	{r4, r5, r6, lr}
 8006658:	460e      	mov	r6, r1
 800665a:	4615      	mov	r5, r2
 800665c:	f7ff ff56 	bl	800650c <findslot>
 8006660:	4604      	mov	r4, r0
 8006662:	b930      	cbnz	r0, 8006672 <_write+0x1c>
 8006664:	f000 fa8c 	bl	8006b80 <__errno>
 8006668:	2309      	movs	r3, #9
 800666a:	6003      	str	r3, [r0, #0]
 800666c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006670:	bd70      	pop	{r4, r5, r6, pc}
 8006672:	6800      	ldr	r0, [r0, #0]
 8006674:	462a      	mov	r2, r5
 8006676:	4631      	mov	r1, r6
 8006678:	f7ff ffdd 	bl	8006636 <_swiwrite>
 800667c:	1e03      	subs	r3, r0, #0
 800667e:	dbf5      	blt.n	800666c <_write+0x16>
 8006680:	6862      	ldr	r2, [r4, #4]
 8006682:	1ae8      	subs	r0, r5, r3
 8006684:	4402      	add	r2, r0
 8006686:	42ab      	cmp	r3, r5
 8006688:	6062      	str	r2, [r4, #4]
 800668a:	d1f1      	bne.n	8006670 <_write+0x1a>
 800668c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006690:	2000      	movs	r0, #0
 8006692:	f7ff bf55 	b.w	8006540 <error>

08006696 <_swiclose>:
 8006696:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006698:	2402      	movs	r4, #2
 800669a:	9001      	str	r0, [sp, #4]
 800669c:	ad01      	add	r5, sp, #4
 800669e:	4620      	mov	r0, r4
 80066a0:	4629      	mov	r1, r5
 80066a2:	beab      	bkpt	0x00ab
 80066a4:	4604      	mov	r4, r0
 80066a6:	4620      	mov	r0, r4
 80066a8:	f7ff ff58 	bl	800655c <checkerror>
 80066ac:	b003      	add	sp, #12
 80066ae:	bd30      	pop	{r4, r5, pc}

080066b0 <_close>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	4605      	mov	r5, r0
 80066b4:	f7ff ff2a 	bl	800650c <findslot>
 80066b8:	4604      	mov	r4, r0
 80066ba:	b930      	cbnz	r0, 80066ca <_close+0x1a>
 80066bc:	f000 fa60 	bl	8006b80 <__errno>
 80066c0:	2309      	movs	r3, #9
 80066c2:	6003      	str	r3, [r0, #0]
 80066c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066c8:	bd38      	pop	{r3, r4, r5, pc}
 80066ca:	3d01      	subs	r5, #1
 80066cc:	2d01      	cmp	r5, #1
 80066ce:	d809      	bhi.n	80066e4 <_close+0x34>
 80066d0:	4b09      	ldr	r3, [pc, #36]	@ (80066f8 <_close+0x48>)
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d104      	bne.n	80066e4 <_close+0x34>
 80066da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80066de:	6003      	str	r3, [r0, #0]
 80066e0:	2000      	movs	r0, #0
 80066e2:	e7f1      	b.n	80066c8 <_close+0x18>
 80066e4:	6820      	ldr	r0, [r4, #0]
 80066e6:	f7ff ffd6 	bl	8006696 <_swiclose>
 80066ea:	2800      	cmp	r0, #0
 80066ec:	d1ec      	bne.n	80066c8 <_close+0x18>
 80066ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80066f2:	6023      	str	r3, [r4, #0]
 80066f4:	e7e8      	b.n	80066c8 <_close+0x18>
 80066f6:	bf00      	nop
 80066f8:	20025c24 	.word	0x20025c24

080066fc <_swistat>:
 80066fc:	b570      	push	{r4, r5, r6, lr}
 80066fe:	460c      	mov	r4, r1
 8006700:	f7ff ff04 	bl	800650c <findslot>
 8006704:	4605      	mov	r5, r0
 8006706:	b930      	cbnz	r0, 8006716 <_swistat+0x1a>
 8006708:	f000 fa3a 	bl	8006b80 <__errno>
 800670c:	2309      	movs	r3, #9
 800670e:	6003      	str	r3, [r0, #0]
 8006710:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006714:	bd70      	pop	{r4, r5, r6, pc}
 8006716:	6863      	ldr	r3, [r4, #4]
 8006718:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800671c:	6063      	str	r3, [r4, #4]
 800671e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006722:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006724:	260c      	movs	r6, #12
 8006726:	4630      	mov	r0, r6
 8006728:	4629      	mov	r1, r5
 800672a:	beab      	bkpt	0x00ab
 800672c:	4605      	mov	r5, r0
 800672e:	4628      	mov	r0, r5
 8006730:	f7ff ff14 	bl	800655c <checkerror>
 8006734:	1c43      	adds	r3, r0, #1
 8006736:	d0eb      	beq.n	8006710 <_swistat+0x14>
 8006738:	6120      	str	r0, [r4, #16]
 800673a:	2000      	movs	r0, #0
 800673c:	e7ea      	b.n	8006714 <_swistat+0x18>

0800673e <_stat>:
 800673e:	b538      	push	{r3, r4, r5, lr}
 8006740:	460d      	mov	r5, r1
 8006742:	4604      	mov	r4, r0
 8006744:	2258      	movs	r2, #88	@ 0x58
 8006746:	2100      	movs	r1, #0
 8006748:	4628      	mov	r0, r5
 800674a:	f000 fa11 	bl	8006b70 <memset>
 800674e:	4620      	mov	r0, r4
 8006750:	2100      	movs	r1, #0
 8006752:	f000 f811 	bl	8006778 <_swiopen>
 8006756:	1c43      	adds	r3, r0, #1
 8006758:	4604      	mov	r4, r0
 800675a:	d00b      	beq.n	8006774 <_stat+0x36>
 800675c:	686b      	ldr	r3, [r5, #4]
 800675e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006762:	606b      	str	r3, [r5, #4]
 8006764:	4629      	mov	r1, r5
 8006766:	f7ff ffc9 	bl	80066fc <_swistat>
 800676a:	4605      	mov	r5, r0
 800676c:	4620      	mov	r0, r4
 800676e:	f7ff ff9f 	bl	80066b0 <_close>
 8006772:	462c      	mov	r4, r5
 8006774:	4620      	mov	r0, r4
 8006776:	bd38      	pop	{r3, r4, r5, pc}

08006778 <_swiopen>:
 8006778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800677c:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8006828 <_swiopen+0xb0>
 8006780:	b096      	sub	sp, #88	@ 0x58
 8006782:	4607      	mov	r7, r0
 8006784:	460e      	mov	r6, r1
 8006786:	2400      	movs	r4, #0
 8006788:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 800678c:	3301      	adds	r3, #1
 800678e:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8006792:	d032      	beq.n	80067fa <_swiopen+0x82>
 8006794:	3401      	adds	r4, #1
 8006796:	2c14      	cmp	r4, #20
 8006798:	d1f6      	bne.n	8006788 <_swiopen+0x10>
 800679a:	f000 f9f1 	bl	8006b80 <__errno>
 800679e:	2318      	movs	r3, #24
 80067a0:	e03a      	b.n	8006818 <_swiopen+0xa0>
 80067a2:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80067a6:	f240 6301 	movw	r3, #1537	@ 0x601
 80067aa:	07b2      	lsls	r2, r6, #30
 80067ac:	bf48      	it	mi
 80067ae:	f045 0502 	orrmi.w	r5, r5, #2
 80067b2:	421e      	tst	r6, r3
 80067b4:	bf18      	it	ne
 80067b6:	f045 0504 	orrne.w	r5, r5, #4
 80067ba:	0733      	lsls	r3, r6, #28
 80067bc:	bf48      	it	mi
 80067be:	f025 0504 	bicmi.w	r5, r5, #4
 80067c2:	4638      	mov	r0, r7
 80067c4:	bf48      	it	mi
 80067c6:	f045 0508 	orrmi.w	r5, r5, #8
 80067ca:	9700      	str	r7, [sp, #0]
 80067cc:	f7f9 fd0e 	bl	80001ec <strlen>
 80067d0:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80067d4:	2501      	movs	r5, #1
 80067d6:	4628      	mov	r0, r5
 80067d8:	4651      	mov	r1, sl
 80067da:	beab      	bkpt	0x00ab
 80067dc:	4605      	mov	r5, r0
 80067de:	2d00      	cmp	r5, #0
 80067e0:	db06      	blt.n	80067f0 <_swiopen+0x78>
 80067e2:	44c8      	add	r8, r9
 80067e4:	2300      	movs	r3, #0
 80067e6:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 80067ea:	f8c8 3004 	str.w	r3, [r8, #4]
 80067ee:	e016      	b.n	800681e <_swiopen+0xa6>
 80067f0:	4628      	mov	r0, r5
 80067f2:	f7ff fea5 	bl	8006540 <error>
 80067f6:	4604      	mov	r4, r0
 80067f8:	e011      	b.n	800681e <_swiopen+0xa6>
 80067fa:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80067fe:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006802:	46ea      	mov	sl, sp
 8006804:	d1cd      	bne.n	80067a2 <_swiopen+0x2a>
 8006806:	4651      	mov	r1, sl
 8006808:	4638      	mov	r0, r7
 800680a:	f7ff ff98 	bl	800673e <_stat>
 800680e:	3001      	adds	r0, #1
 8006810:	d0c7      	beq.n	80067a2 <_swiopen+0x2a>
 8006812:	f000 f9b5 	bl	8006b80 <__errno>
 8006816:	2311      	movs	r3, #17
 8006818:	6003      	str	r3, [r0, #0]
 800681a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800681e:	4620      	mov	r0, r4
 8006820:	b016      	add	sp, #88	@ 0x58
 8006822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006826:	bf00      	nop
 8006828:	20025c24 	.word	0x20025c24

0800682c <_get_semihosting_exts>:
 800682c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006830:	4606      	mov	r6, r0
 8006832:	460f      	mov	r7, r1
 8006834:	4829      	ldr	r0, [pc, #164]	@ (80068dc <_get_semihosting_exts+0xb0>)
 8006836:	2100      	movs	r1, #0
 8006838:	4615      	mov	r5, r2
 800683a:	f7ff ff9d 	bl	8006778 <_swiopen>
 800683e:	462a      	mov	r2, r5
 8006840:	4604      	mov	r4, r0
 8006842:	2100      	movs	r1, #0
 8006844:	4630      	mov	r0, r6
 8006846:	f000 f993 	bl	8006b70 <memset>
 800684a:	1c63      	adds	r3, r4, #1
 800684c:	d014      	beq.n	8006878 <_get_semihosting_exts+0x4c>
 800684e:	4620      	mov	r0, r4
 8006850:	f7ff fe5c 	bl	800650c <findslot>
 8006854:	f04f 080c 	mov.w	r8, #12
 8006858:	4681      	mov	r9, r0
 800685a:	4640      	mov	r0, r8
 800685c:	4649      	mov	r1, r9
 800685e:	beab      	bkpt	0x00ab
 8006860:	4680      	mov	r8, r0
 8006862:	4640      	mov	r0, r8
 8006864:	f7ff fe7a 	bl	800655c <checkerror>
 8006868:	2803      	cmp	r0, #3
 800686a:	dd02      	ble.n	8006872 <_get_semihosting_exts+0x46>
 800686c:	1ec3      	subs	r3, r0, #3
 800686e:	42ab      	cmp	r3, r5
 8006870:	dc07      	bgt.n	8006882 <_get_semihosting_exts+0x56>
 8006872:	4620      	mov	r0, r4
 8006874:	f7ff ff1c 	bl	80066b0 <_close>
 8006878:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800687c:	b003      	add	sp, #12
 800687e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006882:	2204      	movs	r2, #4
 8006884:	eb0d 0102 	add.w	r1, sp, r2
 8006888:	4620      	mov	r0, r4
 800688a:	f7ff fe7c 	bl	8006586 <_read>
 800688e:	2803      	cmp	r0, #3
 8006890:	ddef      	ble.n	8006872 <_get_semihosting_exts+0x46>
 8006892:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006896:	2b53      	cmp	r3, #83	@ 0x53
 8006898:	d1eb      	bne.n	8006872 <_get_semihosting_exts+0x46>
 800689a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800689e:	2b48      	cmp	r3, #72	@ 0x48
 80068a0:	d1e7      	bne.n	8006872 <_get_semihosting_exts+0x46>
 80068a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80068a6:	2b46      	cmp	r3, #70	@ 0x46
 80068a8:	d1e3      	bne.n	8006872 <_get_semihosting_exts+0x46>
 80068aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80068ae:	2b42      	cmp	r3, #66	@ 0x42
 80068b0:	d1df      	bne.n	8006872 <_get_semihosting_exts+0x46>
 80068b2:	2201      	movs	r2, #1
 80068b4:	4639      	mov	r1, r7
 80068b6:	4620      	mov	r0, r4
 80068b8:	f7ff fe7f 	bl	80065ba <_swilseek>
 80068bc:	2800      	cmp	r0, #0
 80068be:	dbd8      	blt.n	8006872 <_get_semihosting_exts+0x46>
 80068c0:	462a      	mov	r2, r5
 80068c2:	4631      	mov	r1, r6
 80068c4:	4620      	mov	r0, r4
 80068c6:	f7ff fe5e 	bl	8006586 <_read>
 80068ca:	4605      	mov	r5, r0
 80068cc:	4620      	mov	r0, r4
 80068ce:	f7ff feef 	bl	80066b0 <_close>
 80068d2:	4628      	mov	r0, r5
 80068d4:	f7ff fe42 	bl	800655c <checkerror>
 80068d8:	e7d0      	b.n	800687c <_get_semihosting_exts+0x50>
 80068da:	bf00      	nop
 80068dc:	08008120 	.word	0x08008120

080068e0 <initialise_semihosting_exts>:
 80068e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068e2:	4d0a      	ldr	r5, [pc, #40]	@ (800690c <initialise_semihosting_exts+0x2c>)
 80068e4:	4c0a      	ldr	r4, [pc, #40]	@ (8006910 <initialise_semihosting_exts+0x30>)
 80068e6:	2100      	movs	r1, #0
 80068e8:	2201      	movs	r2, #1
 80068ea:	a801      	add	r0, sp, #4
 80068ec:	6029      	str	r1, [r5, #0]
 80068ee:	6022      	str	r2, [r4, #0]
 80068f0:	f7ff ff9c 	bl	800682c <_get_semihosting_exts>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	dd07      	ble.n	8006908 <initialise_semihosting_exts+0x28>
 80068f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80068fc:	f003 0201 	and.w	r2, r3, #1
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	602a      	str	r2, [r5, #0]
 8006906:	6023      	str	r3, [r4, #0]
 8006908:	b003      	add	sp, #12
 800690a:	bd30      	pop	{r4, r5, pc}
 800690c:	20000020 	.word	0x20000020
 8006910:	2000001c 	.word	0x2000001c

08006914 <_has_ext_stdout_stderr>:
 8006914:	b510      	push	{r4, lr}
 8006916:	4c04      	ldr	r4, [pc, #16]	@ (8006928 <_has_ext_stdout_stderr+0x14>)
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	da01      	bge.n	8006922 <_has_ext_stdout_stderr+0xe>
 800691e:	f7ff ffdf 	bl	80068e0 <initialise_semihosting_exts>
 8006922:	6820      	ldr	r0, [r4, #0]
 8006924:	bd10      	pop	{r4, pc}
 8006926:	bf00      	nop
 8006928:	2000001c 	.word	0x2000001c

0800692c <initialise_monitor_handles>:
 800692c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006930:	b085      	sub	sp, #20
 8006932:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80069e4 <initialise_monitor_handles+0xb8>
 8006936:	f8cd 9004 	str.w	r9, [sp, #4]
 800693a:	2303      	movs	r3, #3
 800693c:	2400      	movs	r4, #0
 800693e:	9303      	str	r3, [sp, #12]
 8006940:	af01      	add	r7, sp, #4
 8006942:	9402      	str	r4, [sp, #8]
 8006944:	2501      	movs	r5, #1
 8006946:	4628      	mov	r0, r5
 8006948:	4639      	mov	r1, r7
 800694a:	beab      	bkpt	0x00ab
 800694c:	4605      	mov	r5, r0
 800694e:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80069e8 <initialise_monitor_handles+0xbc>
 8006952:	4623      	mov	r3, r4
 8006954:	4c20      	ldr	r4, [pc, #128]	@ (80069d8 <initialise_monitor_handles+0xac>)
 8006956:	f8c8 5000 	str.w	r5, [r8]
 800695a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800695e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8006962:	3301      	adds	r3, #1
 8006964:	2b14      	cmp	r3, #20
 8006966:	d1fa      	bne.n	800695e <initialise_monitor_handles+0x32>
 8006968:	f7ff ffd4 	bl	8006914 <_has_ext_stdout_stderr>
 800696c:	4d1b      	ldr	r5, [pc, #108]	@ (80069dc <initialise_monitor_handles+0xb0>)
 800696e:	b1d0      	cbz	r0, 80069a6 <initialise_monitor_handles+0x7a>
 8006970:	f04f 0a03 	mov.w	sl, #3
 8006974:	2304      	movs	r3, #4
 8006976:	f8cd 9004 	str.w	r9, [sp, #4]
 800697a:	2601      	movs	r6, #1
 800697c:	f8cd a00c 	str.w	sl, [sp, #12]
 8006980:	9302      	str	r3, [sp, #8]
 8006982:	4630      	mov	r0, r6
 8006984:	4639      	mov	r1, r7
 8006986:	beab      	bkpt	0x00ab
 8006988:	4683      	mov	fp, r0
 800698a:	4b15      	ldr	r3, [pc, #84]	@ (80069e0 <initialise_monitor_handles+0xb4>)
 800698c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006990:	f8c3 b000 	str.w	fp, [r3]
 8006994:	2308      	movs	r3, #8
 8006996:	f8cd a00c 	str.w	sl, [sp, #12]
 800699a:	9302      	str	r3, [sp, #8]
 800699c:	4630      	mov	r0, r6
 800699e:	4639      	mov	r1, r7
 80069a0:	beab      	bkpt	0x00ab
 80069a2:	4606      	mov	r6, r0
 80069a4:	602e      	str	r6, [r5, #0]
 80069a6:	682b      	ldr	r3, [r5, #0]
 80069a8:	3301      	adds	r3, #1
 80069aa:	bf02      	ittt	eq
 80069ac:	4b0c      	ldreq	r3, [pc, #48]	@ (80069e0 <initialise_monitor_handles+0xb4>)
 80069ae:	681b      	ldreq	r3, [r3, #0]
 80069b0:	602b      	streq	r3, [r5, #0]
 80069b2:	2600      	movs	r6, #0
 80069b4:	f8d8 3000 	ldr.w	r3, [r8]
 80069b8:	6023      	str	r3, [r4, #0]
 80069ba:	6066      	str	r6, [r4, #4]
 80069bc:	f7ff ffaa 	bl	8006914 <_has_ext_stdout_stderr>
 80069c0:	b130      	cbz	r0, 80069d0 <initialise_monitor_handles+0xa4>
 80069c2:	4b07      	ldr	r3, [pc, #28]	@ (80069e0 <initialise_monitor_handles+0xb4>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80069ca:	682b      	ldr	r3, [r5, #0]
 80069cc:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80069d0:	b005      	add	sp, #20
 80069d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d6:	bf00      	nop
 80069d8:	20025c24 	.word	0x20025c24
 80069dc:	20025c18 	.word	0x20025c18
 80069e0:	20025c1c 	.word	0x20025c1c
 80069e4:	08008136 	.word	0x08008136
 80069e8:	20025c20 	.word	0x20025c20

080069ec <std>:
 80069ec:	2300      	movs	r3, #0
 80069ee:	b510      	push	{r4, lr}
 80069f0:	4604      	mov	r4, r0
 80069f2:	e9c0 3300 	strd	r3, r3, [r0]
 80069f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069fa:	6083      	str	r3, [r0, #8]
 80069fc:	8181      	strh	r1, [r0, #12]
 80069fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a00:	81c2      	strh	r2, [r0, #14]
 8006a02:	6183      	str	r3, [r0, #24]
 8006a04:	4619      	mov	r1, r3
 8006a06:	2208      	movs	r2, #8
 8006a08:	305c      	adds	r0, #92	@ 0x5c
 8006a0a:	f000 f8b1 	bl	8006b70 <memset>
 8006a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a44 <std+0x58>)
 8006a10:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a12:	4b0d      	ldr	r3, [pc, #52]	@ (8006a48 <std+0x5c>)
 8006a14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a16:	4b0d      	ldr	r3, [pc, #52]	@ (8006a4c <std+0x60>)
 8006a18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a50 <std+0x64>)
 8006a1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a54 <std+0x68>)
 8006a20:	6224      	str	r4, [r4, #32]
 8006a22:	429c      	cmp	r4, r3
 8006a24:	d006      	beq.n	8006a34 <std+0x48>
 8006a26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a2a:	4294      	cmp	r4, r2
 8006a2c:	d002      	beq.n	8006a34 <std+0x48>
 8006a2e:	33d0      	adds	r3, #208	@ 0xd0
 8006a30:	429c      	cmp	r4, r3
 8006a32:	d105      	bne.n	8006a40 <std+0x54>
 8006a34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a3c:	f000 b8ca 	b.w	8006bd4 <__retarget_lock_init_recursive>
 8006a40:	bd10      	pop	{r4, pc}
 8006a42:	bf00      	nop
 8006a44:	08006d4d 	.word	0x08006d4d
 8006a48:	08006d6f 	.word	0x08006d6f
 8006a4c:	08006da7 	.word	0x08006da7
 8006a50:	08006dcb 	.word	0x08006dcb
 8006a54:	20025cc4 	.word	0x20025cc4

08006a58 <stdio_exit_handler>:
 8006a58:	4a02      	ldr	r2, [pc, #8]	@ (8006a64 <stdio_exit_handler+0xc>)
 8006a5a:	4903      	ldr	r1, [pc, #12]	@ (8006a68 <stdio_exit_handler+0x10>)
 8006a5c:	4803      	ldr	r0, [pc, #12]	@ (8006a6c <stdio_exit_handler+0x14>)
 8006a5e:	f000 b869 	b.w	8006b34 <_fwalk_sglue>
 8006a62:	bf00      	nop
 8006a64:	20000024 	.word	0x20000024
 8006a68:	08006ce5 	.word	0x08006ce5
 8006a6c:	20000034 	.word	0x20000034

08006a70 <cleanup_stdio>:
 8006a70:	6841      	ldr	r1, [r0, #4]
 8006a72:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa4 <cleanup_stdio+0x34>)
 8006a74:	4299      	cmp	r1, r3
 8006a76:	b510      	push	{r4, lr}
 8006a78:	4604      	mov	r4, r0
 8006a7a:	d001      	beq.n	8006a80 <cleanup_stdio+0x10>
 8006a7c:	f000 f932 	bl	8006ce4 <_fflush_r>
 8006a80:	68a1      	ldr	r1, [r4, #8]
 8006a82:	4b09      	ldr	r3, [pc, #36]	@ (8006aa8 <cleanup_stdio+0x38>)
 8006a84:	4299      	cmp	r1, r3
 8006a86:	d002      	beq.n	8006a8e <cleanup_stdio+0x1e>
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f000 f92b 	bl	8006ce4 <_fflush_r>
 8006a8e:	68e1      	ldr	r1, [r4, #12]
 8006a90:	4b06      	ldr	r3, [pc, #24]	@ (8006aac <cleanup_stdio+0x3c>)
 8006a92:	4299      	cmp	r1, r3
 8006a94:	d004      	beq.n	8006aa0 <cleanup_stdio+0x30>
 8006a96:	4620      	mov	r0, r4
 8006a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a9c:	f000 b922 	b.w	8006ce4 <_fflush_r>
 8006aa0:	bd10      	pop	{r4, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20025cc4 	.word	0x20025cc4
 8006aa8:	20025d2c 	.word	0x20025d2c
 8006aac:	20025d94 	.word	0x20025d94

08006ab0 <global_stdio_init.part.0>:
 8006ab0:	b510      	push	{r4, lr}
 8006ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae0 <global_stdio_init.part.0+0x30>)
 8006ab4:	4c0b      	ldr	r4, [pc, #44]	@ (8006ae4 <global_stdio_init.part.0+0x34>)
 8006ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8006ae8 <global_stdio_init.part.0+0x38>)
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	4620      	mov	r0, r4
 8006abc:	2200      	movs	r2, #0
 8006abe:	2104      	movs	r1, #4
 8006ac0:	f7ff ff94 	bl	80069ec <std>
 8006ac4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ac8:	2201      	movs	r2, #1
 8006aca:	2109      	movs	r1, #9
 8006acc:	f7ff ff8e 	bl	80069ec <std>
 8006ad0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ada:	2112      	movs	r1, #18
 8006adc:	f7ff bf86 	b.w	80069ec <std>
 8006ae0:	20025dfc 	.word	0x20025dfc
 8006ae4:	20025cc4 	.word	0x20025cc4
 8006ae8:	08006a59 	.word	0x08006a59

08006aec <__sfp_lock_acquire>:
 8006aec:	4801      	ldr	r0, [pc, #4]	@ (8006af4 <__sfp_lock_acquire+0x8>)
 8006aee:	f000 b872 	b.w	8006bd6 <__retarget_lock_acquire_recursive>
 8006af2:	bf00      	nop
 8006af4:	20025e01 	.word	0x20025e01

08006af8 <__sfp_lock_release>:
 8006af8:	4801      	ldr	r0, [pc, #4]	@ (8006b00 <__sfp_lock_release+0x8>)
 8006afa:	f000 b86d 	b.w	8006bd8 <__retarget_lock_release_recursive>
 8006afe:	bf00      	nop
 8006b00:	20025e01 	.word	0x20025e01

08006b04 <__sinit>:
 8006b04:	b510      	push	{r4, lr}
 8006b06:	4604      	mov	r4, r0
 8006b08:	f7ff fff0 	bl	8006aec <__sfp_lock_acquire>
 8006b0c:	6a23      	ldr	r3, [r4, #32]
 8006b0e:	b11b      	cbz	r3, 8006b18 <__sinit+0x14>
 8006b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b14:	f7ff bff0 	b.w	8006af8 <__sfp_lock_release>
 8006b18:	4b04      	ldr	r3, [pc, #16]	@ (8006b2c <__sinit+0x28>)
 8006b1a:	6223      	str	r3, [r4, #32]
 8006b1c:	4b04      	ldr	r3, [pc, #16]	@ (8006b30 <__sinit+0x2c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1f5      	bne.n	8006b10 <__sinit+0xc>
 8006b24:	f7ff ffc4 	bl	8006ab0 <global_stdio_init.part.0>
 8006b28:	e7f2      	b.n	8006b10 <__sinit+0xc>
 8006b2a:	bf00      	nop
 8006b2c:	08006a71 	.word	0x08006a71
 8006b30:	20025dfc 	.word	0x20025dfc

08006b34 <_fwalk_sglue>:
 8006b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b38:	4607      	mov	r7, r0
 8006b3a:	4688      	mov	r8, r1
 8006b3c:	4614      	mov	r4, r2
 8006b3e:	2600      	movs	r6, #0
 8006b40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b44:	f1b9 0901 	subs.w	r9, r9, #1
 8006b48:	d505      	bpl.n	8006b56 <_fwalk_sglue+0x22>
 8006b4a:	6824      	ldr	r4, [r4, #0]
 8006b4c:	2c00      	cmp	r4, #0
 8006b4e:	d1f7      	bne.n	8006b40 <_fwalk_sglue+0xc>
 8006b50:	4630      	mov	r0, r6
 8006b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b56:	89ab      	ldrh	r3, [r5, #12]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d907      	bls.n	8006b6c <_fwalk_sglue+0x38>
 8006b5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b60:	3301      	adds	r3, #1
 8006b62:	d003      	beq.n	8006b6c <_fwalk_sglue+0x38>
 8006b64:	4629      	mov	r1, r5
 8006b66:	4638      	mov	r0, r7
 8006b68:	47c0      	blx	r8
 8006b6a:	4306      	orrs	r6, r0
 8006b6c:	3568      	adds	r5, #104	@ 0x68
 8006b6e:	e7e9      	b.n	8006b44 <_fwalk_sglue+0x10>

08006b70 <memset>:
 8006b70:	4402      	add	r2, r0
 8006b72:	4603      	mov	r3, r0
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d100      	bne.n	8006b7a <memset+0xa>
 8006b78:	4770      	bx	lr
 8006b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b7e:	e7f9      	b.n	8006b74 <memset+0x4>

08006b80 <__errno>:
 8006b80:	4b01      	ldr	r3, [pc, #4]	@ (8006b88 <__errno+0x8>)
 8006b82:	6818      	ldr	r0, [r3, #0]
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	20000030 	.word	0x20000030

08006b8c <__libc_init_array>:
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	4d0d      	ldr	r5, [pc, #52]	@ (8006bc4 <__libc_init_array+0x38>)
 8006b90:	4c0d      	ldr	r4, [pc, #52]	@ (8006bc8 <__libc_init_array+0x3c>)
 8006b92:	1b64      	subs	r4, r4, r5
 8006b94:	10a4      	asrs	r4, r4, #2
 8006b96:	2600      	movs	r6, #0
 8006b98:	42a6      	cmp	r6, r4
 8006b9a:	d109      	bne.n	8006bb0 <__libc_init_array+0x24>
 8006b9c:	4d0b      	ldr	r5, [pc, #44]	@ (8006bcc <__libc_init_array+0x40>)
 8006b9e:	4c0c      	ldr	r4, [pc, #48]	@ (8006bd0 <__libc_init_array+0x44>)
 8006ba0:	f000 f9a8 	bl	8006ef4 <_init>
 8006ba4:	1b64      	subs	r4, r4, r5
 8006ba6:	10a4      	asrs	r4, r4, #2
 8006ba8:	2600      	movs	r6, #0
 8006baa:	42a6      	cmp	r6, r4
 8006bac:	d105      	bne.n	8006bba <__libc_init_array+0x2e>
 8006bae:	bd70      	pop	{r4, r5, r6, pc}
 8006bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bb4:	4798      	blx	r3
 8006bb6:	3601      	adds	r6, #1
 8006bb8:	e7ee      	b.n	8006b98 <__libc_init_array+0xc>
 8006bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bbe:	4798      	blx	r3
 8006bc0:	3601      	adds	r6, #1
 8006bc2:	e7f2      	b.n	8006baa <__libc_init_array+0x1e>
 8006bc4:	08008144 	.word	0x08008144
 8006bc8:	08008144 	.word	0x08008144
 8006bcc:	08008144 	.word	0x08008144
 8006bd0:	08008148 	.word	0x08008148

08006bd4 <__retarget_lock_init_recursive>:
 8006bd4:	4770      	bx	lr

08006bd6 <__retarget_lock_acquire_recursive>:
 8006bd6:	4770      	bx	lr

08006bd8 <__retarget_lock_release_recursive>:
 8006bd8:	4770      	bx	lr
	...

08006bdc <__sflush_r>:
 8006bdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be4:	0716      	lsls	r6, r2, #28
 8006be6:	4605      	mov	r5, r0
 8006be8:	460c      	mov	r4, r1
 8006bea:	d454      	bmi.n	8006c96 <__sflush_r+0xba>
 8006bec:	684b      	ldr	r3, [r1, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	dc02      	bgt.n	8006bf8 <__sflush_r+0x1c>
 8006bf2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	dd48      	ble.n	8006c8a <__sflush_r+0xae>
 8006bf8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006bfa:	2e00      	cmp	r6, #0
 8006bfc:	d045      	beq.n	8006c8a <__sflush_r+0xae>
 8006bfe:	2300      	movs	r3, #0
 8006c00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006c04:	682f      	ldr	r7, [r5, #0]
 8006c06:	6a21      	ldr	r1, [r4, #32]
 8006c08:	602b      	str	r3, [r5, #0]
 8006c0a:	d030      	beq.n	8006c6e <__sflush_r+0x92>
 8006c0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	0759      	lsls	r1, r3, #29
 8006c12:	d505      	bpl.n	8006c20 <__sflush_r+0x44>
 8006c14:	6863      	ldr	r3, [r4, #4]
 8006c16:	1ad2      	subs	r2, r2, r3
 8006c18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c1a:	b10b      	cbz	r3, 8006c20 <__sflush_r+0x44>
 8006c1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c1e:	1ad2      	subs	r2, r2, r3
 8006c20:	2300      	movs	r3, #0
 8006c22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c24:	6a21      	ldr	r1, [r4, #32]
 8006c26:	4628      	mov	r0, r5
 8006c28:	47b0      	blx	r6
 8006c2a:	1c43      	adds	r3, r0, #1
 8006c2c:	89a3      	ldrh	r3, [r4, #12]
 8006c2e:	d106      	bne.n	8006c3e <__sflush_r+0x62>
 8006c30:	6829      	ldr	r1, [r5, #0]
 8006c32:	291d      	cmp	r1, #29
 8006c34:	d82b      	bhi.n	8006c8e <__sflush_r+0xb2>
 8006c36:	4a2a      	ldr	r2, [pc, #168]	@ (8006ce0 <__sflush_r+0x104>)
 8006c38:	40ca      	lsrs	r2, r1
 8006c3a:	07d6      	lsls	r6, r2, #31
 8006c3c:	d527      	bpl.n	8006c8e <__sflush_r+0xb2>
 8006c3e:	2200      	movs	r2, #0
 8006c40:	6062      	str	r2, [r4, #4]
 8006c42:	04d9      	lsls	r1, r3, #19
 8006c44:	6922      	ldr	r2, [r4, #16]
 8006c46:	6022      	str	r2, [r4, #0]
 8006c48:	d504      	bpl.n	8006c54 <__sflush_r+0x78>
 8006c4a:	1c42      	adds	r2, r0, #1
 8006c4c:	d101      	bne.n	8006c52 <__sflush_r+0x76>
 8006c4e:	682b      	ldr	r3, [r5, #0]
 8006c50:	b903      	cbnz	r3, 8006c54 <__sflush_r+0x78>
 8006c52:	6560      	str	r0, [r4, #84]	@ 0x54
 8006c54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c56:	602f      	str	r7, [r5, #0]
 8006c58:	b1b9      	cbz	r1, 8006c8a <__sflush_r+0xae>
 8006c5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c5e:	4299      	cmp	r1, r3
 8006c60:	d002      	beq.n	8006c68 <__sflush_r+0x8c>
 8006c62:	4628      	mov	r0, r5
 8006c64:	f000 f8fc 	bl	8006e60 <_free_r>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c6c:	e00d      	b.n	8006c8a <__sflush_r+0xae>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	4628      	mov	r0, r5
 8006c72:	47b0      	blx	r6
 8006c74:	4602      	mov	r2, r0
 8006c76:	1c50      	adds	r0, r2, #1
 8006c78:	d1c9      	bne.n	8006c0e <__sflush_r+0x32>
 8006c7a:	682b      	ldr	r3, [r5, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d0c6      	beq.n	8006c0e <__sflush_r+0x32>
 8006c80:	2b1d      	cmp	r3, #29
 8006c82:	d001      	beq.n	8006c88 <__sflush_r+0xac>
 8006c84:	2b16      	cmp	r3, #22
 8006c86:	d11e      	bne.n	8006cc6 <__sflush_r+0xea>
 8006c88:	602f      	str	r7, [r5, #0]
 8006c8a:	2000      	movs	r0, #0
 8006c8c:	e022      	b.n	8006cd4 <__sflush_r+0xf8>
 8006c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c92:	b21b      	sxth	r3, r3
 8006c94:	e01b      	b.n	8006cce <__sflush_r+0xf2>
 8006c96:	690f      	ldr	r7, [r1, #16]
 8006c98:	2f00      	cmp	r7, #0
 8006c9a:	d0f6      	beq.n	8006c8a <__sflush_r+0xae>
 8006c9c:	0793      	lsls	r3, r2, #30
 8006c9e:	680e      	ldr	r6, [r1, #0]
 8006ca0:	bf08      	it	eq
 8006ca2:	694b      	ldreq	r3, [r1, #20]
 8006ca4:	600f      	str	r7, [r1, #0]
 8006ca6:	bf18      	it	ne
 8006ca8:	2300      	movne	r3, #0
 8006caa:	eba6 0807 	sub.w	r8, r6, r7
 8006cae:	608b      	str	r3, [r1, #8]
 8006cb0:	f1b8 0f00 	cmp.w	r8, #0
 8006cb4:	dde9      	ble.n	8006c8a <__sflush_r+0xae>
 8006cb6:	6a21      	ldr	r1, [r4, #32]
 8006cb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006cba:	4643      	mov	r3, r8
 8006cbc:	463a      	mov	r2, r7
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	47b0      	blx	r6
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	dc08      	bgt.n	8006cd8 <__sflush_r+0xfc>
 8006cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cce:	81a3      	strh	r3, [r4, #12]
 8006cd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd8:	4407      	add	r7, r0
 8006cda:	eba8 0800 	sub.w	r8, r8, r0
 8006cde:	e7e7      	b.n	8006cb0 <__sflush_r+0xd4>
 8006ce0:	20400001 	.word	0x20400001

08006ce4 <_fflush_r>:
 8006ce4:	b538      	push	{r3, r4, r5, lr}
 8006ce6:	690b      	ldr	r3, [r1, #16]
 8006ce8:	4605      	mov	r5, r0
 8006cea:	460c      	mov	r4, r1
 8006cec:	b913      	cbnz	r3, 8006cf4 <_fflush_r+0x10>
 8006cee:	2500      	movs	r5, #0
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	bd38      	pop	{r3, r4, r5, pc}
 8006cf4:	b118      	cbz	r0, 8006cfe <_fflush_r+0x1a>
 8006cf6:	6a03      	ldr	r3, [r0, #32]
 8006cf8:	b90b      	cbnz	r3, 8006cfe <_fflush_r+0x1a>
 8006cfa:	f7ff ff03 	bl	8006b04 <__sinit>
 8006cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d0f3      	beq.n	8006cee <_fflush_r+0xa>
 8006d06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d08:	07d0      	lsls	r0, r2, #31
 8006d0a:	d404      	bmi.n	8006d16 <_fflush_r+0x32>
 8006d0c:	0599      	lsls	r1, r3, #22
 8006d0e:	d402      	bmi.n	8006d16 <_fflush_r+0x32>
 8006d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d12:	f7ff ff60 	bl	8006bd6 <__retarget_lock_acquire_recursive>
 8006d16:	4628      	mov	r0, r5
 8006d18:	4621      	mov	r1, r4
 8006d1a:	f7ff ff5f 	bl	8006bdc <__sflush_r>
 8006d1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d20:	07da      	lsls	r2, r3, #31
 8006d22:	4605      	mov	r5, r0
 8006d24:	d4e4      	bmi.n	8006cf0 <_fflush_r+0xc>
 8006d26:	89a3      	ldrh	r3, [r4, #12]
 8006d28:	059b      	lsls	r3, r3, #22
 8006d2a:	d4e1      	bmi.n	8006cf0 <_fflush_r+0xc>
 8006d2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d2e:	f7ff ff53 	bl	8006bd8 <__retarget_lock_release_recursive>
 8006d32:	e7dd      	b.n	8006cf0 <_fflush_r+0xc>

08006d34 <__malloc_lock>:
 8006d34:	4801      	ldr	r0, [pc, #4]	@ (8006d3c <__malloc_lock+0x8>)
 8006d36:	f7ff bf4e 	b.w	8006bd6 <__retarget_lock_acquire_recursive>
 8006d3a:	bf00      	nop
 8006d3c:	20025e00 	.word	0x20025e00

08006d40 <__malloc_unlock>:
 8006d40:	4801      	ldr	r0, [pc, #4]	@ (8006d48 <__malloc_unlock+0x8>)
 8006d42:	f7ff bf49 	b.w	8006bd8 <__retarget_lock_release_recursive>
 8006d46:	bf00      	nop
 8006d48:	20025e00 	.word	0x20025e00

08006d4c <__sread>:
 8006d4c:	b510      	push	{r4, lr}
 8006d4e:	460c      	mov	r4, r1
 8006d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d54:	f000 f850 	bl	8006df8 <_read_r>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	bfab      	itete	ge
 8006d5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d5e:	89a3      	ldrhlt	r3, [r4, #12]
 8006d60:	181b      	addge	r3, r3, r0
 8006d62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d66:	bfac      	ite	ge
 8006d68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d6a:	81a3      	strhlt	r3, [r4, #12]
 8006d6c:	bd10      	pop	{r4, pc}

08006d6e <__swrite>:
 8006d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d72:	461f      	mov	r7, r3
 8006d74:	898b      	ldrh	r3, [r1, #12]
 8006d76:	05db      	lsls	r3, r3, #23
 8006d78:	4605      	mov	r5, r0
 8006d7a:	460c      	mov	r4, r1
 8006d7c:	4616      	mov	r6, r2
 8006d7e:	d505      	bpl.n	8006d8c <__swrite+0x1e>
 8006d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d84:	2302      	movs	r3, #2
 8006d86:	2200      	movs	r2, #0
 8006d88:	f000 f824 	bl	8006dd4 <_lseek_r>
 8006d8c:	89a3      	ldrh	r3, [r4, #12]
 8006d8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d96:	81a3      	strh	r3, [r4, #12]
 8006d98:	4632      	mov	r2, r6
 8006d9a:	463b      	mov	r3, r7
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006da2:	f000 b83b 	b.w	8006e1c <_write_r>

08006da6 <__sseek>:
 8006da6:	b510      	push	{r4, lr}
 8006da8:	460c      	mov	r4, r1
 8006daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dae:	f000 f811 	bl	8006dd4 <_lseek_r>
 8006db2:	1c43      	adds	r3, r0, #1
 8006db4:	89a3      	ldrh	r3, [r4, #12]
 8006db6:	bf15      	itete	ne
 8006db8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006dba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006dbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006dc2:	81a3      	strheq	r3, [r4, #12]
 8006dc4:	bf18      	it	ne
 8006dc6:	81a3      	strhne	r3, [r4, #12]
 8006dc8:	bd10      	pop	{r4, pc}

08006dca <__sclose>:
 8006dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dce:	f000 b837 	b.w	8006e40 <_close_r>
	...

08006dd4 <_lseek_r>:
 8006dd4:	b538      	push	{r3, r4, r5, lr}
 8006dd6:	4d07      	ldr	r5, [pc, #28]	@ (8006df4 <_lseek_r+0x20>)
 8006dd8:	4604      	mov	r4, r0
 8006dda:	4608      	mov	r0, r1
 8006ddc:	4611      	mov	r1, r2
 8006dde:	2200      	movs	r2, #0
 8006de0:	602a      	str	r2, [r5, #0]
 8006de2:	461a      	mov	r2, r3
 8006de4:	f7ff fc25 	bl	8006632 <_lseek>
 8006de8:	1c43      	adds	r3, r0, #1
 8006dea:	d102      	bne.n	8006df2 <_lseek_r+0x1e>
 8006dec:	682b      	ldr	r3, [r5, #0]
 8006dee:	b103      	cbz	r3, 8006df2 <_lseek_r+0x1e>
 8006df0:	6023      	str	r3, [r4, #0]
 8006df2:	bd38      	pop	{r3, r4, r5, pc}
 8006df4:	20025e08 	.word	0x20025e08

08006df8 <_read_r>:
 8006df8:	b538      	push	{r3, r4, r5, lr}
 8006dfa:	4d07      	ldr	r5, [pc, #28]	@ (8006e18 <_read_r+0x20>)
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	4608      	mov	r0, r1
 8006e00:	4611      	mov	r1, r2
 8006e02:	2200      	movs	r2, #0
 8006e04:	602a      	str	r2, [r5, #0]
 8006e06:	461a      	mov	r2, r3
 8006e08:	f7ff fbbd 	bl	8006586 <_read>
 8006e0c:	1c43      	adds	r3, r0, #1
 8006e0e:	d102      	bne.n	8006e16 <_read_r+0x1e>
 8006e10:	682b      	ldr	r3, [r5, #0]
 8006e12:	b103      	cbz	r3, 8006e16 <_read_r+0x1e>
 8006e14:	6023      	str	r3, [r4, #0]
 8006e16:	bd38      	pop	{r3, r4, r5, pc}
 8006e18:	20025e08 	.word	0x20025e08

08006e1c <_write_r>:
 8006e1c:	b538      	push	{r3, r4, r5, lr}
 8006e1e:	4d07      	ldr	r5, [pc, #28]	@ (8006e3c <_write_r+0x20>)
 8006e20:	4604      	mov	r4, r0
 8006e22:	4608      	mov	r0, r1
 8006e24:	4611      	mov	r1, r2
 8006e26:	2200      	movs	r2, #0
 8006e28:	602a      	str	r2, [r5, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	f7ff fc13 	bl	8006656 <_write>
 8006e30:	1c43      	adds	r3, r0, #1
 8006e32:	d102      	bne.n	8006e3a <_write_r+0x1e>
 8006e34:	682b      	ldr	r3, [r5, #0]
 8006e36:	b103      	cbz	r3, 8006e3a <_write_r+0x1e>
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	bd38      	pop	{r3, r4, r5, pc}
 8006e3c:	20025e08 	.word	0x20025e08

08006e40 <_close_r>:
 8006e40:	b538      	push	{r3, r4, r5, lr}
 8006e42:	4d06      	ldr	r5, [pc, #24]	@ (8006e5c <_close_r+0x1c>)
 8006e44:	2300      	movs	r3, #0
 8006e46:	4604      	mov	r4, r0
 8006e48:	4608      	mov	r0, r1
 8006e4a:	602b      	str	r3, [r5, #0]
 8006e4c:	f7ff fc30 	bl	80066b0 <_close>
 8006e50:	1c43      	adds	r3, r0, #1
 8006e52:	d102      	bne.n	8006e5a <_close_r+0x1a>
 8006e54:	682b      	ldr	r3, [r5, #0]
 8006e56:	b103      	cbz	r3, 8006e5a <_close_r+0x1a>
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	bd38      	pop	{r3, r4, r5, pc}
 8006e5c:	20025e08 	.word	0x20025e08

08006e60 <_free_r>:
 8006e60:	b538      	push	{r3, r4, r5, lr}
 8006e62:	4605      	mov	r5, r0
 8006e64:	2900      	cmp	r1, #0
 8006e66:	d041      	beq.n	8006eec <_free_r+0x8c>
 8006e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e6c:	1f0c      	subs	r4, r1, #4
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	bfb8      	it	lt
 8006e72:	18e4      	addlt	r4, r4, r3
 8006e74:	f7ff ff5e 	bl	8006d34 <__malloc_lock>
 8006e78:	4a1d      	ldr	r2, [pc, #116]	@ (8006ef0 <_free_r+0x90>)
 8006e7a:	6813      	ldr	r3, [r2, #0]
 8006e7c:	b933      	cbnz	r3, 8006e8c <_free_r+0x2c>
 8006e7e:	6063      	str	r3, [r4, #4]
 8006e80:	6014      	str	r4, [r2, #0]
 8006e82:	4628      	mov	r0, r5
 8006e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e88:	f7ff bf5a 	b.w	8006d40 <__malloc_unlock>
 8006e8c:	42a3      	cmp	r3, r4
 8006e8e:	d908      	bls.n	8006ea2 <_free_r+0x42>
 8006e90:	6820      	ldr	r0, [r4, #0]
 8006e92:	1821      	adds	r1, r4, r0
 8006e94:	428b      	cmp	r3, r1
 8006e96:	bf01      	itttt	eq
 8006e98:	6819      	ldreq	r1, [r3, #0]
 8006e9a:	685b      	ldreq	r3, [r3, #4]
 8006e9c:	1809      	addeq	r1, r1, r0
 8006e9e:	6021      	streq	r1, [r4, #0]
 8006ea0:	e7ed      	b.n	8006e7e <_free_r+0x1e>
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	b10b      	cbz	r3, 8006eac <_free_r+0x4c>
 8006ea8:	42a3      	cmp	r3, r4
 8006eaa:	d9fa      	bls.n	8006ea2 <_free_r+0x42>
 8006eac:	6811      	ldr	r1, [r2, #0]
 8006eae:	1850      	adds	r0, r2, r1
 8006eb0:	42a0      	cmp	r0, r4
 8006eb2:	d10b      	bne.n	8006ecc <_free_r+0x6c>
 8006eb4:	6820      	ldr	r0, [r4, #0]
 8006eb6:	4401      	add	r1, r0
 8006eb8:	1850      	adds	r0, r2, r1
 8006eba:	4283      	cmp	r3, r0
 8006ebc:	6011      	str	r1, [r2, #0]
 8006ebe:	d1e0      	bne.n	8006e82 <_free_r+0x22>
 8006ec0:	6818      	ldr	r0, [r3, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	6053      	str	r3, [r2, #4]
 8006ec6:	4408      	add	r0, r1
 8006ec8:	6010      	str	r0, [r2, #0]
 8006eca:	e7da      	b.n	8006e82 <_free_r+0x22>
 8006ecc:	d902      	bls.n	8006ed4 <_free_r+0x74>
 8006ece:	230c      	movs	r3, #12
 8006ed0:	602b      	str	r3, [r5, #0]
 8006ed2:	e7d6      	b.n	8006e82 <_free_r+0x22>
 8006ed4:	6820      	ldr	r0, [r4, #0]
 8006ed6:	1821      	adds	r1, r4, r0
 8006ed8:	428b      	cmp	r3, r1
 8006eda:	bf04      	itt	eq
 8006edc:	6819      	ldreq	r1, [r3, #0]
 8006ede:	685b      	ldreq	r3, [r3, #4]
 8006ee0:	6063      	str	r3, [r4, #4]
 8006ee2:	bf04      	itt	eq
 8006ee4:	1809      	addeq	r1, r1, r0
 8006ee6:	6021      	streq	r1, [r4, #0]
 8006ee8:	6054      	str	r4, [r2, #4]
 8006eea:	e7ca      	b.n	8006e82 <_free_r+0x22>
 8006eec:	bd38      	pop	{r3, r4, r5, pc}
 8006eee:	bf00      	nop
 8006ef0:	20025e04 	.word	0x20025e04

08006ef4 <_init>:
 8006ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef6:	bf00      	nop
 8006ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efa:	bc08      	pop	{r3}
 8006efc:	469e      	mov	lr, r3
 8006efe:	4770      	bx	lr

08006f00 <_fini>:
 8006f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f02:	bf00      	nop
 8006f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f06:	bc08      	pop	{r3}
 8006f08:	469e      	mov	lr, r3
 8006f0a:	4770      	bx	lr
