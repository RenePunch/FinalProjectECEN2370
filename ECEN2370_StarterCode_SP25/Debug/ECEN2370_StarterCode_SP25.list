
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057b4  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e8  08005960  08005960  00006960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b48  08006b48  0000801c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006b48  08006b48  00007b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b50  08006b50  0000801c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b50  08006b50  00007b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b54  08006b54  00007b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08006b58  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000801c  2**0
                  CONTENTS
 10 .bss          00025b64  2000001c  2000001c  0000801c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025b80  20025b80  0000801c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000801c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f55  00000000  00000000  0000804c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fc9  00000000  00000000  0001afa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  0001df70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f2a  00000000  00000000  0001f318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026ebe  00000000  00000000  00020242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000173e6  00000000  00000000  00047100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2a84  00000000  00000000  0005e4e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00140f6a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005248  00000000  00000000  00140fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a3  00000000  00000000  001461f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005948 	.word	0x08005948

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	08005948 	.word	0x08005948

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 800051c:	f001 fdea 	bl	80020f4 <initialise_monitor_handles>
    LTCD__Init();
 8000520:	f000 f99e 	bl	8000860 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000524:	2000      	movs	r0, #0
 8000526:	f000 f95b 	bl	80007e0 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 800052a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800052e:	2000      	movs	r0, #0
 8000530:	f000 fa12 	bl	8000958 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 8000534:	f000 fae8 	bl	8000b08 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 8000538:	4b02      	ldr	r3, [pc, #8]	@ (8000544 <ApplicationInit+0x2c>)
 800053a:	2201      	movs	r2, #1
 800053c:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000038 	.word	0x20000038

08000548 <ApplicationFirstScreen>:
void ApplicationFirstScreen(){
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	firstScreen();
 800054c:	f000 f802 	bl	8000554 <firstScreen>
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}

08000554 <firstScreen>:
#define ROWS 6
#define COLS 7

char board[ROWS][COLS];

void firstScreen(void){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLUE);
 8000558:	211f      	movs	r1, #31
 800055a:	2000      	movs	r0, #0
 800055c:	f000 f9fc 	bl	8000958 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000560:	2000      	movs	r0, #0
 8000562:	f000 fa1b 	bl	800099c <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000566:	4839      	ldr	r0, [pc, #228]	@ (800064c <firstScreen+0xf8>)
 8000568:	f000 fa28 	bl	80009bc <LCD_SetFont>
	LCD_DisplayChar(60,140,'C');
 800056c:	2243      	movs	r2, #67	@ 0x43
 800056e:	218c      	movs	r1, #140	@ 0x8c
 8000570:	203c      	movs	r0, #60	@ 0x3c
 8000572:	f000 faa1 	bl	8000ab8 <LCD_DisplayChar>
	LCD_DisplayChar(75,140,'o');
 8000576:	226f      	movs	r2, #111	@ 0x6f
 8000578:	218c      	movs	r1, #140	@ 0x8c
 800057a:	204b      	movs	r0, #75	@ 0x4b
 800057c:	f000 fa9c 	bl	8000ab8 <LCD_DisplayChar>
	LCD_DisplayChar(90,140,'n');
 8000580:	226e      	movs	r2, #110	@ 0x6e
 8000582:	218c      	movs	r1, #140	@ 0x8c
 8000584:	205a      	movs	r0, #90	@ 0x5a
 8000586:	f000 fa97 	bl	8000ab8 <LCD_DisplayChar>
	LCD_DisplayChar(105,140,'n');
 800058a:	226e      	movs	r2, #110	@ 0x6e
 800058c:	218c      	movs	r1, #140	@ 0x8c
 800058e:	2069      	movs	r0, #105	@ 0x69
 8000590:	f000 fa92 	bl	8000ab8 <LCD_DisplayChar>
	LCD_DisplayChar(120,140,'e');
 8000594:	2265      	movs	r2, #101	@ 0x65
 8000596:	218c      	movs	r1, #140	@ 0x8c
 8000598:	2078      	movs	r0, #120	@ 0x78
 800059a:	f000 fa8d 	bl	8000ab8 <LCD_DisplayChar>
	LCD_DisplayChar(135,140,'c');
 800059e:	2263      	movs	r2, #99	@ 0x63
 80005a0:	218c      	movs	r1, #140	@ 0x8c
 80005a2:	2087      	movs	r0, #135	@ 0x87
 80005a4:	f000 fa88 	bl	8000ab8 <LCD_DisplayChar>
	LCD_DisplayChar(150,140,'t');
 80005a8:	2274      	movs	r2, #116	@ 0x74
 80005aa:	218c      	movs	r1, #140	@ 0x8c
 80005ac:	2096      	movs	r0, #150	@ 0x96
 80005ae:	f000 fa83 	bl	8000ab8 <LCD_DisplayChar>
	LCD_DisplayChar(180,140,'4');
 80005b2:	2234      	movs	r2, #52	@ 0x34
 80005b4:	218c      	movs	r1, #140	@ 0x8c
 80005b6:	20b4      	movs	r0, #180	@ 0xb4
 80005b8:	f000 fa7e 	bl	8000ab8 <LCD_DisplayChar>

    LCD_DisplayChar(10,190,'P');
 80005bc:	2250      	movs	r2, #80	@ 0x50
 80005be:	21be      	movs	r1, #190	@ 0xbe
 80005c0:	200a      	movs	r0, #10
 80005c2:	f000 fa79 	bl	8000ab8 <LCD_DisplayChar>
    LCD_DisplayChar(20,190,'L');
 80005c6:	224c      	movs	r2, #76	@ 0x4c
 80005c8:	21be      	movs	r1, #190	@ 0xbe
 80005ca:	2014      	movs	r0, #20
 80005cc:	f000 fa74 	bl	8000ab8 <LCD_DisplayChar>
    LCD_DisplayChar(30,190,'A');
 80005d0:	2241      	movs	r2, #65	@ 0x41
 80005d2:	21be      	movs	r1, #190	@ 0xbe
 80005d4:	201e      	movs	r0, #30
 80005d6:	f000 fa6f 	bl	8000ab8 <LCD_DisplayChar>
    LCD_DisplayChar(45,190,'Y');
 80005da:	2259      	movs	r2, #89	@ 0x59
 80005dc:	21be      	movs	r1, #190	@ 0xbe
 80005de:	202d      	movs	r0, #45	@ 0x2d
 80005e0:	f000 fa6a 	bl	8000ab8 <LCD_DisplayChar>
    LCD_DisplayChar(60,190,'E');
 80005e4:	2245      	movs	r2, #69	@ 0x45
 80005e6:	21be      	movs	r1, #190	@ 0xbe
 80005e8:	203c      	movs	r0, #60	@ 0x3c
 80005ea:	f000 fa65 	bl	8000ab8 <LCD_DisplayChar>
    LCD_DisplayChar(75,190,'R');
 80005ee:	2252      	movs	r2, #82	@ 0x52
 80005f0:	21be      	movs	r1, #190	@ 0xbe
 80005f2:	204b      	movs	r0, #75	@ 0x4b
 80005f4:	f000 fa60 	bl	8000ab8 <LCD_DisplayChar>
    LCD_DisplayChar(95,190,'1');
 80005f8:	2231      	movs	r2, #49	@ 0x31
 80005fa:	21be      	movs	r1, #190	@ 0xbe
 80005fc:	205f      	movs	r0, #95	@ 0x5f
 80005fe:	f000 fa5b 	bl	8000ab8 <LCD_DisplayChar>

    LCD_DisplayChar(120,190,'P');
 8000602:	2250      	movs	r2, #80	@ 0x50
 8000604:	21be      	movs	r1, #190	@ 0xbe
 8000606:	2078      	movs	r0, #120	@ 0x78
 8000608:	f000 fa56 	bl	8000ab8 <LCD_DisplayChar>
    LCD_DisplayChar(130,190,'L');
 800060c:	224c      	movs	r2, #76	@ 0x4c
 800060e:	21be      	movs	r1, #190	@ 0xbe
 8000610:	2082      	movs	r0, #130	@ 0x82
 8000612:	f000 fa51 	bl	8000ab8 <LCD_DisplayChar>
    LCD_DisplayChar(140,190,'A');
 8000616:	2241      	movs	r2, #65	@ 0x41
 8000618:	21be      	movs	r1, #190	@ 0xbe
 800061a:	208c      	movs	r0, #140	@ 0x8c
 800061c:	f000 fa4c 	bl	8000ab8 <LCD_DisplayChar>
    LCD_DisplayChar(155,190,'Y');
 8000620:	2259      	movs	r2, #89	@ 0x59
 8000622:	21be      	movs	r1, #190	@ 0xbe
 8000624:	209b      	movs	r0, #155	@ 0x9b
 8000626:	f000 fa47 	bl	8000ab8 <LCD_DisplayChar>
    LCD_DisplayChar(170,190,'E');
 800062a:	2245      	movs	r2, #69	@ 0x45
 800062c:	21be      	movs	r1, #190	@ 0xbe
 800062e:	20aa      	movs	r0, #170	@ 0xaa
 8000630:	f000 fa42 	bl	8000ab8 <LCD_DisplayChar>
    LCD_DisplayChar(185,190,'R');
 8000634:	2252      	movs	r2, #82	@ 0x52
 8000636:	21be      	movs	r1, #190	@ 0xbe
 8000638:	20b9      	movs	r0, #185	@ 0xb9
 800063a:	f000 fa3d 	bl	8000ab8 <LCD_DisplayChar>
    LCD_DisplayChar(205,190,'2');
 800063e:	2232      	movs	r2, #50	@ 0x32
 8000640:	21be      	movs	r1, #190	@ 0xbe
 8000642:	20cd      	movs	r0, #205	@ 0xcd
 8000644:	f000 fa38 	bl	8000ab8 <LCD_DisplayChar>

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000004 	.word	0x20000004

08000650 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08c      	sub	sp, #48	@ 0x30
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
 800065a:	4b5a      	ldr	r3, [pc, #360]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 800065c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800065e:	4a59      	ldr	r2, [pc, #356]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000660:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000664:	6453      	str	r3, [r2, #68]	@ 0x44
 8000666:	4b57      	ldr	r3, [pc, #348]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800066a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800066e:	61bb      	str	r3, [r7, #24]
 8000670:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
 8000676:	4b53      	ldr	r3, [pc, #332]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	4a52      	ldr	r2, [pc, #328]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6313      	str	r3, [r2, #48]	@ 0x30
 8000682:	4b50      	ldr	r3, [pc, #320]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	4b4c      	ldr	r3, [pc, #304]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a4b      	ldr	r2, [pc, #300]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000698:	f043 0302 	orr.w	r3, r3, #2
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
 800069e:	4b49      	ldr	r3, [pc, #292]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	f003 0302 	and.w	r3, r3, #2
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	4b45      	ldr	r3, [pc, #276]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a44      	ldr	r2, [pc, #272]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b42      	ldr	r3, [pc, #264]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	4b3e      	ldr	r3, [pc, #248]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a3d      	ldr	r2, [pc, #244]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006d0:	f043 0308 	orr.w	r3, r3, #8
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b3b      	ldr	r3, [pc, #236]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b37      	ldr	r3, [pc, #220]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a36      	ldr	r2, [pc, #216]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006ec:	f043 0320 	orr.w	r3, r3, #32
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b34      	ldr	r3, [pc, #208]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0320 	and.w	r3, r3, #32
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b30      	ldr	r3, [pc, #192]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a2f      	ldr	r2, [pc, #188]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b2d      	ldr	r3, [pc, #180]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800071a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800071e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000728:	2302      	movs	r3, #2
 800072a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800072c:	230e      	movs	r3, #14
 800072e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4619      	mov	r1, r3
 8000736:	4824      	ldr	r0, [pc, #144]	@ (80007c8 <LCD_GPIO_Init+0x178>)
 8000738:	f001 fe9c 	bl	8002474 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800073c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000740:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	4820      	ldr	r0, [pc, #128]	@ (80007cc <LCD_GPIO_Init+0x17c>)
 800074a:	f001 fe93 	bl	8002474 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800074e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000752:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4619      	mov	r1, r3
 800075a:	481d      	ldr	r0, [pc, #116]	@ (80007d0 <LCD_GPIO_Init+0x180>)
 800075c:	f001 fe8a 	bl	8002474 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000760:	2348      	movs	r3, #72	@ 0x48
 8000762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4619      	mov	r1, r3
 800076a:	481a      	ldr	r0, [pc, #104]	@ (80007d4 <LCD_GPIO_Init+0x184>)
 800076c:	f001 fe82 	bl	8002474 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000770:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	4619      	mov	r1, r3
 800077c:	4816      	ldr	r0, [pc, #88]	@ (80007d8 <LCD_GPIO_Init+0x188>)
 800077e:	f001 fe79 	bl	8002474 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000782:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000786:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	4813      	ldr	r0, [pc, #76]	@ (80007dc <LCD_GPIO_Init+0x18c>)
 8000790:	f001 fe70 	bl	8002474 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000794:	2303      	movs	r3, #3
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000798:	2309      	movs	r3, #9
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	480a      	ldr	r0, [pc, #40]	@ (80007cc <LCD_GPIO_Init+0x17c>)
 80007a4:	f001 fe66 	bl	8002474 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80007a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4619      	mov	r1, r3
 80007b4:	4809      	ldr	r0, [pc, #36]	@ (80007dc <LCD_GPIO_Init+0x18c>)
 80007b6:	f001 fe5d 	bl	8002474 <HAL_GPIO_Init>
}
 80007ba:	bf00      	nop
 80007bc:	3730      	adds	r7, #48	@ 0x30
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020000 	.word	0x40020000
 80007cc:	40020400 	.word	0x40020400
 80007d0:	40020800 	.word	0x40020800
 80007d4:	40020c00 	.word	0x40020c00
 80007d8:	40021400 	.word	0x40021400
 80007dc:	40021800 	.word	0x40021800

080007e0 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b090      	sub	sp, #64	@ 0x40
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80007ee:	23f0      	movs	r3, #240	@ 0xf0
 80007f0:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80007f6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80007fa:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80007fc:	2302      	movs	r3, #2
 80007fe:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000800:	23ff      	movs	r3, #255	@ 0xff
 8000802:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000808:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800080c:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800080e:	2305      	movs	r3, #5
 8000810:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d101      	bne.n	800081c <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <LTCD_Layer_Init+0x78>)
 800081a:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 800081c:	23f0      	movs	r3, #240	@ 0xf0
 800081e:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000820:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000824:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000838:	79fa      	ldrb	r2, [r7, #7]
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	4619      	mov	r1, r3
 8000840:	4806      	ldr	r0, [pc, #24]	@ (800085c <LTCD_Layer_Init+0x7c>)
 8000842:	f003 fa59 	bl	8003cf8 <HAL_LTDC_ConfigLayer>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 800084c:	f000 f956 	bl	8000afc <LCD_Error_Handler>
	}
}
 8000850:	bf00      	nop
 8000852:	3740      	adds	r7, #64	@ 0x40
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2000011c 	.word	0x2000011c
 800085c:	20000040 	.word	0x20000040

08000860 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000864:	4b2a      	ldr	r3, [pc, #168]	@ (8000910 <LTCD__Init+0xb0>)
 8000866:	4a2b      	ldr	r2, [pc, #172]	@ (8000914 <LTCD__Init+0xb4>)
 8000868:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800086a:	4b29      	ldr	r3, [pc, #164]	@ (8000910 <LTCD__Init+0xb0>)
 800086c:	2209      	movs	r2, #9
 800086e:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000870:	4b27      	ldr	r3, [pc, #156]	@ (8000910 <LTCD__Init+0xb0>)
 8000872:	2201      	movs	r2, #1
 8000874:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000876:	4b26      	ldr	r3, [pc, #152]	@ (8000910 <LTCD__Init+0xb0>)
 8000878:	221d      	movs	r2, #29
 800087a:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 800087c:	4b24      	ldr	r3, [pc, #144]	@ (8000910 <LTCD__Init+0xb0>)
 800087e:	2203      	movs	r2, #3
 8000880:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000882:	4b23      	ldr	r3, [pc, #140]	@ (8000910 <LTCD__Init+0xb0>)
 8000884:	f240 120d 	movw	r2, #269	@ 0x10d
 8000888:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800088a:	4b21      	ldr	r3, [pc, #132]	@ (8000910 <LTCD__Init+0xb0>)
 800088c:	f240 1243 	movw	r2, #323	@ 0x143
 8000890:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000892:	4b1f      	ldr	r3, [pc, #124]	@ (8000910 <LTCD__Init+0xb0>)
 8000894:	f240 1217 	movw	r2, #279	@ 0x117
 8000898:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800089a:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <LTCD__Init+0xb0>)
 800089c:	f240 1247 	movw	r2, #327	@ 0x147
 80008a0:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80008a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000910 <LTCD__Init+0xb0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80008aa:	4b19      	ldr	r3, [pc, #100]	@ (8000910 <LTCD__Init+0xb0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80008b2:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <LTCD__Init+0xb0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80008ba:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <LTCD__Init+0xb8>)
 80008bc:	2208      	movs	r2, #8
 80008be:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80008c0:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <LTCD__Init+0xb8>)
 80008c2:	22c0      	movs	r2, #192	@ 0xc0
 80008c4:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80008c6:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <LTCD__Init+0xb8>)
 80008c8:	2204      	movs	r2, #4
 80008ca:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80008cc:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <LTCD__Init+0xb8>)
 80008ce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80008d2:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80008d4:	4810      	ldr	r0, [pc, #64]	@ (8000918 <LTCD__Init+0xb8>)
 80008d6:	f004 f869 	bl	80049ac <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80008da:	4b0d      	ldr	r3, [pc, #52]	@ (8000910 <LTCD__Init+0xb0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <LTCD__Init+0xb0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000910 <LTCD__Init+0xb0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008ec:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <LTCD__Init+0xb0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80008f2:	f7ff fead 	bl	8000650 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008f6:	4806      	ldr	r0, [pc, #24]	@ (8000910 <LTCD__Init+0xb0>)
 80008f8:	f003 f92e 	bl	8003b58 <HAL_LTDC_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000902:	f000 f8fb 	bl	8000afc <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000906:	f000 f90a 	bl	8000b1e <ili9341_Init>
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000040 	.word	0x20000040
 8000914:	40016800 	.word	0x40016800
 8000918:	200000e8 	.word	0x200000e8

0800091c <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
 8000926:	460b      	mov	r3, r1
 8000928:	80bb      	strh	r3, [r7, #4]
 800092a:	4613      	mov	r3, r2
 800092c:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 800092e:	88ba      	ldrh	r2, [r7, #4]
 8000930:	4613      	mov	r3, r2
 8000932:	011b      	lsls	r3, r3, #4
 8000934:	1a9b      	subs	r3, r3, r2
 8000936:	011b      	lsls	r3, r3, #4
 8000938:	461a      	mov	r2, r3
 800093a:	88fb      	ldrh	r3, [r7, #6]
 800093c:	4413      	add	r3, r2
 800093e:	4905      	ldr	r1, [pc, #20]	@ (8000954 <LCD_Draw_Pixel+0x38>)
 8000940:	887a      	ldrh	r2, [r7, #2]
 8000942:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	2000011c 	.word	0x2000011c

08000958 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	460a      	mov	r2, r1
 8000962:	71fb      	strb	r3, [r7, #7]
 8000964:	4613      	mov	r3, r2
 8000966:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d10e      	bne.n	800098c <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	e007      	b.n	8000984 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000974:	4908      	ldr	r1, [pc, #32]	@ (8000998 <LCD_Clear+0x40>)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	88ba      	ldrh	r2, [r7, #4]
 800097a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	3301      	adds	r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 800098a:	d3f3      	bcc.n	8000974 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	2000011c 	.word	0x2000011c

0800099c <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80009a6:	4a04      	ldr	r2, [pc, #16]	@ (80009b8 <LCD_SetTextColor+0x1c>)
 80009a8:	88fb      	ldrh	r3, [r7, #6]
 80009aa:	8013      	strh	r3, [r2, #0]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	20000000 	.word	0x20000000

080009bc <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80009c4:	4a04      	ldr	r2, [pc, #16]	@ (80009d8 <LCD_SetFont+0x1c>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6013      	str	r3, [r2, #0]
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000118 	.word	0x20000118

080009dc <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	603a      	str	r2, [r7, #0]
 80009e6:	80fb      	strh	r3, [r7, #6]
 80009e8:	460b      	mov	r3, r1
 80009ea:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	e04c      	b.n	8000a94 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	e03f      	b.n	8000a80 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	683a      	ldr	r2, [r7, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4b27      	ldr	r3, [pc, #156]	@ (8000aac <LCD_Draw_Char+0xd0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	889b      	ldrh	r3, [r3, #4]
 8000a12:	4a27      	ldr	r2, [pc, #156]	@ (8000ab0 <LCD_Draw_Char+0xd4>)
 8000a14:	fba2 2303 	umull	r2, r3, r2, r3
 8000a18:	08db      	lsrs	r3, r3, #3
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	409a      	lsls	r2, r3
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	fa42 f303 	asr.w	r3, r2, r3
 8000a28:	400b      	ands	r3, r1
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d104      	bne.n	8000a38 <LCD_Draw_Char+0x5c>
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000aac <LCD_Draw_Char+0xd0>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	889b      	ldrh	r3, [r3, #4]
 8000a34:	2b0c      	cmp	r3, #12
 8000a36:	d920      	bls.n	8000a7a <LCD_Draw_Char+0x9e>
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	fa42 f303 	asr.w	r3, r2, r3
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d104      	bne.n	8000a5c <LCD_Draw_Char+0x80>
 8000a52:	4b16      	ldr	r3, [pc, #88]	@ (8000aac <LCD_Draw_Char+0xd0>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	889b      	ldrh	r3, [r3, #4]
 8000a58:	2b0c      	cmp	r3, #12
 8000a5a:	d80e      	bhi.n	8000a7a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	88fb      	ldrh	r3, [r7, #6]
 8000a62:	4413      	add	r3, r2
 8000a64:	b298      	uxth	r0, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	88bb      	ldrh	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	4a10      	ldr	r2, [pc, #64]	@ (8000ab4 <LCD_Draw_Char+0xd8>)
 8000a72:	8812      	ldrh	r2, [r2, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	f7ff ff51 	bl	800091c <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <LCD_Draw_Char+0xd0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	889b      	ldrh	r3, [r3, #4]
 8000a86:	461a      	mov	r2, r3
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d3b8      	bcc.n	8000a00 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	3301      	adds	r3, #1
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	4b05      	ldr	r3, [pc, #20]	@ (8000aac <LCD_Draw_Char+0xd0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	88db      	ldrh	r3, [r3, #6]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d3ab      	bcc.n	80009fa <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	bf00      	nop
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000118 	.word	0x20000118
 8000ab0:	aaaaaaab 	.word	0xaaaaaaab
 8000ab4:	20000000 	.word	0x20000000

08000ab8 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	80fb      	strh	r3, [r7, #6]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	80bb      	strh	r3, [r7, #4]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000aca:	78fb      	ldrb	r3, [r7, #3]
 8000acc:	3b20      	subs	r3, #32
 8000ace:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000ad0:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <LCD_DisplayChar+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	78fb      	ldrb	r3, [r7, #3]
 8000ad8:	4907      	ldr	r1, [pc, #28]	@ (8000af8 <LCD_DisplayChar+0x40>)
 8000ada:	6809      	ldr	r1, [r1, #0]
 8000adc:	88c9      	ldrh	r1, [r1, #6]
 8000ade:	fb01 f303 	mul.w	r3, r1, r3
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	441a      	add	r2, r3
 8000ae6:	88b9      	ldrh	r1, [r7, #4]
 8000ae8:	88fb      	ldrh	r3, [r7, #6]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff ff76 	bl	80009dc <LCD_Draw_Char>
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000118 	.word	0x20000118

08000afc <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <LCD_Error_Handler+0x8>

08000b08 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000b0c:	f001 f925 	bl	8001d5a <STMPE811_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d001      	beq.n	8000b1a <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000b16:	bf00      	nop
 8000b18:	e7fd      	b.n	8000b16 <InitializeLCDTouch+0xe>
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000b22:	f000 f9ff 	bl	8000f24 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000b26:	20ca      	movs	r0, #202	@ 0xca
 8000b28:	f000 f943 	bl	8000db2 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000b2c:	20c3      	movs	r0, #195	@ 0xc3
 8000b2e:	f000 f94d 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000b32:	2008      	movs	r0, #8
 8000b34:	f000 f94a 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000b38:	2050      	movs	r0, #80	@ 0x50
 8000b3a:	f000 f947 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000b3e:	20cf      	movs	r0, #207	@ 0xcf
 8000b40:	f000 f937 	bl	8000db2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000b44:	2000      	movs	r0, #0
 8000b46:	f000 f941 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000b4a:	20c1      	movs	r0, #193	@ 0xc1
 8000b4c:	f000 f93e 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000b50:	2030      	movs	r0, #48	@ 0x30
 8000b52:	f000 f93b 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000b56:	20ed      	movs	r0, #237	@ 0xed
 8000b58:	f000 f92b 	bl	8000db2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000b5c:	2064      	movs	r0, #100	@ 0x64
 8000b5e:	f000 f935 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000b62:	2003      	movs	r0, #3
 8000b64:	f000 f932 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000b68:	2012      	movs	r0, #18
 8000b6a:	f000 f92f 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000b6e:	2081      	movs	r0, #129	@ 0x81
 8000b70:	f000 f92c 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000b74:	20e8      	movs	r0, #232	@ 0xe8
 8000b76:	f000 f91c 	bl	8000db2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000b7a:	2085      	movs	r0, #133	@ 0x85
 8000b7c:	f000 f926 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000b80:	2000      	movs	r0, #0
 8000b82:	f000 f923 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000b86:	2078      	movs	r0, #120	@ 0x78
 8000b88:	f000 f920 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000b8c:	20cb      	movs	r0, #203	@ 0xcb
 8000b8e:	f000 f910 	bl	8000db2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000b92:	2039      	movs	r0, #57	@ 0x39
 8000b94:	f000 f91a 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000b98:	202c      	movs	r0, #44	@ 0x2c
 8000b9a:	f000 f917 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f000 f914 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000ba4:	2034      	movs	r0, #52	@ 0x34
 8000ba6:	f000 f911 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000baa:	2002      	movs	r0, #2
 8000bac:	f000 f90e 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000bb0:	20f7      	movs	r0, #247	@ 0xf7
 8000bb2:	f000 f8fe 	bl	8000db2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000bb6:	2020      	movs	r0, #32
 8000bb8:	f000 f908 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000bbc:	20ea      	movs	r0, #234	@ 0xea
 8000bbe:	f000 f8f8 	bl	8000db2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f000 f902 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f000 f8ff 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000bce:	20b1      	movs	r0, #177	@ 0xb1
 8000bd0:	f000 f8ef 	bl	8000db2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f000 f8f9 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000bda:	201b      	movs	r0, #27
 8000bdc:	f000 f8f6 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000be0:	20b6      	movs	r0, #182	@ 0xb6
 8000be2:	f000 f8e6 	bl	8000db2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000be6:	200a      	movs	r0, #10
 8000be8:	f000 f8f0 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8000bec:	20a2      	movs	r0, #162	@ 0xa2
 8000bee:	f000 f8ed 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8000bf2:	20c0      	movs	r0, #192	@ 0xc0
 8000bf4:	f000 f8dd 	bl	8000db2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000bf8:	2010      	movs	r0, #16
 8000bfa:	f000 f8e7 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8000bfe:	20c1      	movs	r0, #193	@ 0xc1
 8000c00:	f000 f8d7 	bl	8000db2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000c04:	2010      	movs	r0, #16
 8000c06:	f000 f8e1 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8000c0a:	20c5      	movs	r0, #197	@ 0xc5
 8000c0c:	f000 f8d1 	bl	8000db2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8000c10:	2045      	movs	r0, #69	@ 0x45
 8000c12:	f000 f8db 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8000c16:	2015      	movs	r0, #21
 8000c18:	f000 f8d8 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8000c1c:	20c7      	movs	r0, #199	@ 0xc7
 8000c1e:	f000 f8c8 	bl	8000db2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8000c22:	2090      	movs	r0, #144	@ 0x90
 8000c24:	f000 f8d2 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8000c28:	2036      	movs	r0, #54	@ 0x36
 8000c2a:	f000 f8c2 	bl	8000db2 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8000c2e:	20c8      	movs	r0, #200	@ 0xc8
 8000c30:	f000 f8cc 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8000c34:	20f2      	movs	r0, #242	@ 0xf2
 8000c36:	f000 f8bc 	bl	8000db2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f000 f8c6 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8000c40:	20b0      	movs	r0, #176	@ 0xb0
 8000c42:	f000 f8b6 	bl	8000db2 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8000c46:	20c2      	movs	r0, #194	@ 0xc2
 8000c48:	f000 f8c0 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000c4c:	20b6      	movs	r0, #182	@ 0xb6
 8000c4e:	f000 f8b0 	bl	8000db2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000c52:	200a      	movs	r0, #10
 8000c54:	f000 f8ba 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8000c58:	20a7      	movs	r0, #167	@ 0xa7
 8000c5a:	f000 f8b7 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8000c5e:	2027      	movs	r0, #39	@ 0x27
 8000c60:	f000 f8b4 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000c64:	2004      	movs	r0, #4
 8000c66:	f000 f8b1 	bl	8000dcc <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8000c6a:	202a      	movs	r0, #42	@ 0x2a
 8000c6c:	f000 f8a1 	bl	8000db2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 f8ab 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000c76:	2000      	movs	r0, #0
 8000c78:	f000 f8a8 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f000 f8a5 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8000c82:	20ef      	movs	r0, #239	@ 0xef
 8000c84:	f000 f8a2 	bl	8000dcc <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8000c88:	202b      	movs	r0, #43	@ 0x2b
 8000c8a:	f000 f892 	bl	8000db2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f000 f89c 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000c94:	2000      	movs	r0, #0
 8000c96:	f000 f899 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f000 f896 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8000ca0:	203f      	movs	r0, #63	@ 0x3f
 8000ca2:	f000 f893 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8000ca6:	20f6      	movs	r0, #246	@ 0xf6
 8000ca8:	f000 f883 	bl	8000db2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000cac:	2001      	movs	r0, #1
 8000cae:	f000 f88d 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 f88a 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8000cb8:	2006      	movs	r0, #6
 8000cba:	f000 f887 	bl	8000dcc <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8000cbe:	202c      	movs	r0, #44	@ 0x2c
 8000cc0:	f000 f877 	bl	8000db2 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000cc4:	20c8      	movs	r0, #200	@ 0xc8
 8000cc6:	f000 f9e9 	bl	800109c <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8000cca:	2026      	movs	r0, #38	@ 0x26
 8000ccc:	f000 f871 	bl	8000db2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f000 f87b 	bl	8000dcc <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8000cd6:	20e0      	movs	r0, #224	@ 0xe0
 8000cd8:	f000 f86b 	bl	8000db2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8000cdc:	200f      	movs	r0, #15
 8000cde:	f000 f875 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8000ce2:	2029      	movs	r0, #41	@ 0x29
 8000ce4:	f000 f872 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8000ce8:	2024      	movs	r0, #36	@ 0x24
 8000cea:	f000 f86f 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000cee:	200c      	movs	r0, #12
 8000cf0:	f000 f86c 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8000cf4:	200e      	movs	r0, #14
 8000cf6:	f000 f869 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000cfa:	2009      	movs	r0, #9
 8000cfc:	f000 f866 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8000d00:	204e      	movs	r0, #78	@ 0x4e
 8000d02:	f000 f863 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000d06:	2078      	movs	r0, #120	@ 0x78
 8000d08:	f000 f860 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8000d0c:	203c      	movs	r0, #60	@ 0x3c
 8000d0e:	f000 f85d 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000d12:	2009      	movs	r0, #9
 8000d14:	f000 f85a 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8000d18:	2013      	movs	r0, #19
 8000d1a:	f000 f857 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000d1e:	2005      	movs	r0, #5
 8000d20:	f000 f854 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8000d24:	2017      	movs	r0, #23
 8000d26:	f000 f851 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000d2a:	2011      	movs	r0, #17
 8000d2c:	f000 f84e 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d30:	2000      	movs	r0, #0
 8000d32:	f000 f84b 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8000d36:	20e1      	movs	r0, #225	@ 0xe1
 8000d38:	f000 f83b 	bl	8000db2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f000 f845 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8000d42:	2016      	movs	r0, #22
 8000d44:	f000 f842 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000d48:	201b      	movs	r0, #27
 8000d4a:	f000 f83f 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000d4e:	2004      	movs	r0, #4
 8000d50:	f000 f83c 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000d54:	2011      	movs	r0, #17
 8000d56:	f000 f839 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8000d5a:	2007      	movs	r0, #7
 8000d5c:	f000 f836 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8000d60:	2031      	movs	r0, #49	@ 0x31
 8000d62:	f000 f833 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8000d66:	2033      	movs	r0, #51	@ 0x33
 8000d68:	f000 f830 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8000d6c:	2042      	movs	r0, #66	@ 0x42
 8000d6e:	f000 f82d 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000d72:	2005      	movs	r0, #5
 8000d74:	f000 f82a 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000d78:	200c      	movs	r0, #12
 8000d7a:	f000 f827 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8000d7e:	200a      	movs	r0, #10
 8000d80:	f000 f824 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8000d84:	2028      	movs	r0, #40	@ 0x28
 8000d86:	f000 f821 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8000d8a:	202f      	movs	r0, #47	@ 0x2f
 8000d8c:	f000 f81e 	bl	8000dcc <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8000d90:	200f      	movs	r0, #15
 8000d92:	f000 f81b 	bl	8000dcc <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8000d96:	2011      	movs	r0, #17
 8000d98:	f000 f80b 	bl	8000db2 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000d9c:	20c8      	movs	r0, #200	@ 0xc8
 8000d9e:	f000 f97d 	bl	800109c <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8000da2:	2029      	movs	r0, #41	@ 0x29
 8000da4:	f000 f805 	bl	8000db2 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8000da8:	202c      	movs	r0, #44	@ 0x2c
 8000daa:	f000 f802 	bl	8000db2 <ili9341_Write_Reg>
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 f94a 	bl	8001058 <LCD_IO_WriteReg>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 f91b 	bl	8001014 <LCD_IO_WriteData>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000dec:	4819      	ldr	r0, [pc, #100]	@ (8000e54 <SPI_Init+0x6c>)
 8000dee:	f004 f9bc 	bl	800516a <HAL_SPI_GetState>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d12b      	bne.n	8000e50 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8000df8:	4b16      	ldr	r3, [pc, #88]	@ (8000e54 <SPI_Init+0x6c>)
 8000dfa:	4a17      	ldr	r2, [pc, #92]	@ (8000e58 <SPI_Init+0x70>)
 8000dfc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000dfe:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <SPI_Init+0x6c>)
 8000e00:	2218      	movs	r2, #24
 8000e02:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000e04:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <SPI_Init+0x6c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000e0a:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <SPI_Init+0x6c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000e10:	4b10      	ldr	r3, [pc, #64]	@ (8000e54 <SPI_Init+0x6c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000e16:	4b0f      	ldr	r3, [pc, #60]	@ (8000e54 <SPI_Init+0x6c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e54 <SPI_Init+0x6c>)
 8000e1e:	2207      	movs	r2, #7
 8000e20:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000e22:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <SPI_Init+0x6c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000e28:	4b0a      	ldr	r3, [pc, #40]	@ (8000e54 <SPI_Init+0x6c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000e2e:	4b09      	ldr	r3, [pc, #36]	@ (8000e54 <SPI_Init+0x6c>)
 8000e30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e34:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000e36:	4b07      	ldr	r3, [pc, #28]	@ (8000e54 <SPI_Init+0x6c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000e3c:	4b05      	ldr	r3, [pc, #20]	@ (8000e54 <SPI_Init+0x6c>)
 8000e3e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e42:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8000e44:	4803      	ldr	r0, [pc, #12]	@ (8000e54 <SPI_Init+0x6c>)
 8000e46:	f000 f833 	bl	8000eb0 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000e4a:	4802      	ldr	r0, [pc, #8]	@ (8000e54 <SPI_Init+0x6c>)
 8000e4c:	f003 ff98 	bl	8004d80 <HAL_SPI_Init>
  }
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2002591c 	.word	0x2002591c
 8000e58:	40015000 	.word	0x40015000

08000e5c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8000e6a:	4b09      	ldr	r3, [pc, #36]	@ (8000e90 <SPI_Write+0x34>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	1db9      	adds	r1, r7, #6
 8000e70:	2201      	movs	r2, #1
 8000e72:	4808      	ldr	r0, [pc, #32]	@ (8000e94 <SPI_Write+0x38>)
 8000e74:	f004 f835 	bl	8004ee2 <HAL_SPI_Transmit>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8000e82:	f000 f809 	bl	8000e98 <SPI_Error>
  }
}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	2000000c 	.word	0x2000000c
 8000e94:	2002591c 	.word	0x2002591c

08000e98 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000e9c:	4803      	ldr	r0, [pc, #12]	@ (8000eac <SPI_Error+0x14>)
 8000e9e:	f003 fff8 	bl	8004e92 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8000ea2:	f7ff ffa1 	bl	8000de8 <SPI_Init>
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	2002591c 	.word	0x2002591c

08000eb0 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	@ 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <SPI_MspInit+0x6c>)
 8000ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec0:	4a16      	ldr	r2, [pc, #88]	@ (8000f1c <SPI_MspInit+0x6c>)
 8000ec2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ec6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ec8:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <SPI_MspInit+0x6c>)
 8000eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ecc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <SPI_MspInit+0x6c>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000edc:	4a0f      	ldr	r2, [pc, #60]	@ (8000f1c <SPI_MspInit+0x6c>)
 8000ede:	f043 0320 	orr.w	r3, r3, #32
 8000ee2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f1c <SPI_MspInit+0x6c>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee8:	f003 0320 	and.w	r3, r3, #32
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8000ef0:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000efa:	2302      	movs	r3, #2
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000efe:	2301      	movs	r3, #1
 8000f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8000f02:	2305      	movs	r3, #5
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4804      	ldr	r0, [pc, #16]	@ (8000f20 <SPI_MspInit+0x70>)
 8000f0e:	f001 fab1 	bl	8002474 <HAL_GPIO_Init>
}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	@ 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40021400 	.word	0x40021400

08000f24 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8000f2a:	4b36      	ldr	r3, [pc, #216]	@ (8001004 <LCD_IO_Init+0xe0>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d164      	bne.n	8000ffc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8000f32:	4b34      	ldr	r3, [pc, #208]	@ (8001004 <LCD_IO_Init+0xe0>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	4b32      	ldr	r3, [pc, #200]	@ (8001008 <LCD_IO_Init+0xe4>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f40:	4a31      	ldr	r2, [pc, #196]	@ (8001008 <LCD_IO_Init+0xe4>)
 8000f42:	f043 0308 	orr.w	r3, r3, #8
 8000f46:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f48:	4b2f      	ldr	r3, [pc, #188]	@ (8001008 <LCD_IO_Init+0xe4>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4c:	f003 0308 	and.w	r3, r3, #8
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000f54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000f62:	2302      	movs	r3, #2
 8000f64:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4827      	ldr	r0, [pc, #156]	@ (800100c <LCD_IO_Init+0xe8>)
 8000f6e:	f001 fa81 	bl	8002474 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	4b24      	ldr	r3, [pc, #144]	@ (8001008 <LCD_IO_Init+0xe4>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	4a23      	ldr	r2, [pc, #140]	@ (8001008 <LCD_IO_Init+0xe4>)
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f82:	4b21      	ldr	r3, [pc, #132]	@ (8001008 <LCD_IO_Init+0xe4>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8000f8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4819      	ldr	r0, [pc, #100]	@ (800100c <LCD_IO_Init+0xe8>)
 8000fa8:	f001 fa64 	bl	8002474 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <LCD_IO_Init+0xe4>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb4:	4a14      	ldr	r2, [pc, #80]	@ (8001008 <LCD_IO_Init+0xe4>)
 8000fb6:	f043 0304 	orr.w	r3, r3, #4
 8000fba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbc:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <LCD_IO_Init+0xe4>)
 8000fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480c      	ldr	r0, [pc, #48]	@ (8001010 <LCD_IO_Init+0xec>)
 8000fe0:	f001 fa48 	bl	8002474 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2104      	movs	r1, #4
 8000fe8:	4809      	ldr	r0, [pc, #36]	@ (8001010 <LCD_IO_Init+0xec>)
 8000fea:	f001 fcfb 	bl	80029e4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2104      	movs	r1, #4
 8000ff2:	4807      	ldr	r0, [pc, #28]	@ (8001010 <LCD_IO_Init+0xec>)
 8000ff4:	f001 fcf6 	bl	80029e4 <HAL_GPIO_WritePin>

    SPI_Init();
 8000ff8:	f7ff fef6 	bl	8000de8 <SPI_Init>
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	3720      	adds	r7, #32
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20025974 	.word	0x20025974
 8001008:	40023800 	.word	0x40023800
 800100c:	40020c00 	.word	0x40020c00
 8001010:	40020800 	.word	0x40020800

08001014 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800101e:	2201      	movs	r2, #1
 8001020:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001024:	480a      	ldr	r0, [pc, #40]	@ (8001050 <LCD_IO_WriteData+0x3c>)
 8001026:	f001 fcdd 	bl	80029e4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800102a:	2200      	movs	r2, #0
 800102c:	2104      	movs	r1, #4
 800102e:	4809      	ldr	r0, [pc, #36]	@ (8001054 <LCD_IO_WriteData+0x40>)
 8001030:	f001 fcd8 	bl	80029e4 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff10 	bl	8000e5c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800103c:	2201      	movs	r2, #1
 800103e:	2104      	movs	r1, #4
 8001040:	4804      	ldr	r0, [pc, #16]	@ (8001054 <LCD_IO_WriteData+0x40>)
 8001042:	f001 fccf 	bl	80029e4 <HAL_GPIO_WritePin>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40020c00 	.word	0x40020c00
 8001054:	40020800 	.word	0x40020800

08001058 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001068:	480a      	ldr	r0, [pc, #40]	@ (8001094 <LCD_IO_WriteReg+0x3c>)
 800106a:	f001 fcbb 	bl	80029e4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800106e:	2200      	movs	r2, #0
 8001070:	2104      	movs	r1, #4
 8001072:	4809      	ldr	r0, [pc, #36]	@ (8001098 <LCD_IO_WriteReg+0x40>)
 8001074:	f001 fcb6 	bl	80029e4 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	b29b      	uxth	r3, r3
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff feed 	bl	8000e5c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001082:	2201      	movs	r2, #1
 8001084:	2104      	movs	r1, #4
 8001086:	4804      	ldr	r0, [pc, #16]	@ (8001098 <LCD_IO_WriteReg+0x40>)
 8001088:	f001 fcac 	bl	80029e4 <HAL_GPIO_WritePin>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40020c00 	.word	0x40020c00
 8001098:	40020800 	.word	0x40020800

0800109c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f001 f8db 	bl	8002260 <HAL_Delay>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b6:	f001 f861 	bl	800217c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ba:	f000 f817 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010be:	f000 fa07 	bl	80014d0 <MX_GPIO_Init>
  MX_LTDC_Init();
 80010c2:	f000 f8bd 	bl	8001240 <MX_LTDC_Init>
  MX_RNG_Init();
 80010c6:	f000 f96d 	bl	80013a4 <MX_RNG_Init>
  MX_TIM2_Init();
 80010ca:	f000 f9b5 	bl	8001438 <MX_TIM2_Init>
  MX_SPI5_Init();
 80010ce:	f000 f97d 	bl	80013cc <MX_SPI5_Init>
  MX_I2C3_Init();
 80010d2:	f000 f875 	bl	80011c0 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 80010d6:	f7ff fa1f 	bl	8000518 <ApplicationInit>
  ApplicationFirstScreen();
 80010da:	f7ff fa35 	bl	8000548 <ApplicationFirstScreen>
  //LCD_Visual_Demo();
  HAL_Delay(5000);
 80010de:	f241 3088 	movw	r0, #5000	@ 0x1388
 80010e2:	f001 f8bd 	bl	8002260 <HAL_Delay>
//#if COMPILE_TOUCH_FUNCTIONS == 1 // This block will need to be deleted
//  LCD_Touch_Polling_Demo(); // This function Will not return
//#endif
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e6:	bf00      	nop
 80010e8:	e7fd      	b.n	80010e6 <main+0x34>
	...

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b094      	sub	sp, #80	@ 0x50
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	2230      	movs	r2, #48	@ 0x30
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f004 fbf8 	bl	80058f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	4b28      	ldr	r3, [pc, #160]	@ (80011b8 <SystemClock_Config+0xcc>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001118:	4a27      	ldr	r2, [pc, #156]	@ (80011b8 <SystemClock_Config+0xcc>)
 800111a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800111e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001120:	4b25      	ldr	r3, [pc, #148]	@ (80011b8 <SystemClock_Config+0xcc>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	4b22      	ldr	r3, [pc, #136]	@ (80011bc <SystemClock_Config+0xd0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a21      	ldr	r2, [pc, #132]	@ (80011bc <SystemClock_Config+0xd0>)
 8001136:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b1f      	ldr	r3, [pc, #124]	@ (80011bc <SystemClock_Config+0xd0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001148:	2301      	movs	r3, #1
 800114a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800114c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001150:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001152:	2302      	movs	r3, #2
 8001154:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001156:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800115a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800115c:	2308      	movs	r3, #8
 800115e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001160:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001164:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001166:	2302      	movs	r3, #2
 8001168:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800116a:	2307      	movs	r3, #7
 800116c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116e:	f107 0320 	add.w	r3, r7, #32
 8001172:	4618      	mov	r0, r3
 8001174:	f002 ff96 	bl	80040a4 <HAL_RCC_OscConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800117e:	f000 fb55 	bl	800182c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001182:	230f      	movs	r3, #15
 8001184:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001186:	2302      	movs	r3, #2
 8001188:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800118e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001192:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001194:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001198:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	2105      	movs	r1, #5
 80011a0:	4618      	mov	r0, r3
 80011a2:	f003 f9f7 	bl	8004594 <HAL_RCC_ClockConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011ac:	f000 fb3e 	bl	800182c <Error_Handler>
  }
}
 80011b0:	bf00      	nop
 80011b2:	3750      	adds	r7, #80	@ 0x50
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40007000 	.word	0x40007000

080011c0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <MX_I2C3_Init+0x74>)
 80011c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001238 <MX_I2C3_Init+0x78>)
 80011c8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80011ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001234 <MX_I2C3_Init+0x74>)
 80011cc:	4a1b      	ldr	r2, [pc, #108]	@ (800123c <MX_I2C3_Init+0x7c>)
 80011ce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d0:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <MX_I2C3_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80011d6:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <MX_I2C3_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011dc:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <MX_I2C3_Init+0x74>)
 80011de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011e2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e4:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <MX_I2C3_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80011ea:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <MX_I2C3_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f0:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <MX_I2C3_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <MX_I2C3_Init+0x74>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011fc:	480d      	ldr	r0, [pc, #52]	@ (8001234 <MX_I2C3_Init+0x74>)
 80011fe:	f001 fc0b 	bl	8002a18 <HAL_I2C_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001208:	f000 fb10 	bl	800182c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800120c:	2100      	movs	r1, #0
 800120e:	4809      	ldr	r0, [pc, #36]	@ (8001234 <MX_I2C3_Init+0x74>)
 8001210:	f002 fc26 	bl	8003a60 <HAL_I2CEx_ConfigAnalogFilter>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800121a:	f000 fb07 	bl	800182c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800121e:	2100      	movs	r1, #0
 8001220:	4804      	ldr	r0, [pc, #16]	@ (8001234 <MX_I2C3_Init+0x74>)
 8001222:	f002 fc59 	bl	8003ad8 <HAL_I2CEx_ConfigDigitalFilter>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800122c:	f000 fafe 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20025978 	.word	0x20025978
 8001238:	40005c00 	.word	0x40005c00
 800123c:	000186a0 	.word	0x000186a0

08001240 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b09a      	sub	sp, #104	@ 0x68
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001246:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800124a:	2234      	movs	r2, #52	@ 0x34
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f004 fb4e 	bl	80058f0 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001254:	463b      	mov	r3, r7
 8001256:	2234      	movs	r2, #52	@ 0x34
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f004 fb48 	bl	80058f0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001260:	4b4e      	ldr	r3, [pc, #312]	@ (800139c <MX_LTDC_Init+0x15c>)
 8001262:	4a4f      	ldr	r2, [pc, #316]	@ (80013a0 <MX_LTDC_Init+0x160>)
 8001264:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001266:	4b4d      	ldr	r3, [pc, #308]	@ (800139c <MX_LTDC_Init+0x15c>)
 8001268:	2200      	movs	r2, #0
 800126a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800126c:	4b4b      	ldr	r3, [pc, #300]	@ (800139c <MX_LTDC_Init+0x15c>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001272:	4b4a      	ldr	r3, [pc, #296]	@ (800139c <MX_LTDC_Init+0x15c>)
 8001274:	2200      	movs	r2, #0
 8001276:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001278:	4b48      	ldr	r3, [pc, #288]	@ (800139c <MX_LTDC_Init+0x15c>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800127e:	4b47      	ldr	r3, [pc, #284]	@ (800139c <MX_LTDC_Init+0x15c>)
 8001280:	2207      	movs	r2, #7
 8001282:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001284:	4b45      	ldr	r3, [pc, #276]	@ (800139c <MX_LTDC_Init+0x15c>)
 8001286:	2203      	movs	r2, #3
 8001288:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800128a:	4b44      	ldr	r3, [pc, #272]	@ (800139c <MX_LTDC_Init+0x15c>)
 800128c:	220e      	movs	r2, #14
 800128e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001290:	4b42      	ldr	r3, [pc, #264]	@ (800139c <MX_LTDC_Init+0x15c>)
 8001292:	2205      	movs	r2, #5
 8001294:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001296:	4b41      	ldr	r3, [pc, #260]	@ (800139c <MX_LTDC_Init+0x15c>)
 8001298:	f240 228e 	movw	r2, #654	@ 0x28e
 800129c:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800129e:	4b3f      	ldr	r3, [pc, #252]	@ (800139c <MX_LTDC_Init+0x15c>)
 80012a0:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80012a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80012a6:	4b3d      	ldr	r3, [pc, #244]	@ (800139c <MX_LTDC_Init+0x15c>)
 80012a8:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80012ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80012ae:	4b3b      	ldr	r3, [pc, #236]	@ (800139c <MX_LTDC_Init+0x15c>)
 80012b0:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80012b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80012b6:	4b39      	ldr	r3, [pc, #228]	@ (800139c <MX_LTDC_Init+0x15c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80012be:	4b37      	ldr	r3, [pc, #220]	@ (800139c <MX_LTDC_Init+0x15c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80012c6:	4b35      	ldr	r3, [pc, #212]	@ (800139c <MX_LTDC_Init+0x15c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80012ce:	4833      	ldr	r0, [pc, #204]	@ (800139c <MX_LTDC_Init+0x15c>)
 80012d0:	f002 fc42 	bl	8003b58 <HAL_LTDC_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80012da:	f000 faa7 	bl	800182c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80012ee:	2300      	movs	r3, #0
 80012f0:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80012fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012fe:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001300:	2305      	movs	r3, #5
 8001302:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001322:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001326:	2200      	movs	r2, #0
 8001328:	4619      	mov	r1, r3
 800132a:	481c      	ldr	r0, [pc, #112]	@ (800139c <MX_LTDC_Init+0x15c>)
 800132c:	f002 fce4 	bl	8003cf8 <HAL_LTDC_ConfigLayer>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001336:	f000 fa79 	bl	800182c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001356:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800135a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800135c:	2305      	movs	r3, #5
 800135e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800137e:	463b      	mov	r3, r7
 8001380:	2201      	movs	r2, #1
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	@ (800139c <MX_LTDC_Init+0x15c>)
 8001386:	f002 fcb7 	bl	8003cf8 <HAL_LTDC_ConfigLayer>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001390:	f000 fa4c 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3768      	adds	r7, #104	@ 0x68
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200259cc 	.word	0x200259cc
 80013a0:	40016800 	.word	0x40016800

080013a4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <MX_RNG_Init+0x20>)
 80013aa:	4a07      	ldr	r2, [pc, #28]	@ (80013c8 <MX_RNG_Init+0x24>)
 80013ac:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <MX_RNG_Init+0x20>)
 80013b0:	f003 fcbc 	bl	8004d2c <HAL_RNG_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80013ba:	f000 fa37 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20025a74 	.word	0x20025a74
 80013c8:	50060800 	.word	0x50060800

080013cc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80013d0:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <MX_SPI5_Init+0x64>)
 80013d2:	4a18      	ldr	r2, [pc, #96]	@ (8001434 <MX_SPI5_Init+0x68>)
 80013d4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80013d6:	4b16      	ldr	r3, [pc, #88]	@ (8001430 <MX_SPI5_Init+0x64>)
 80013d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013dc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80013de:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <MX_SPI5_Init+0x64>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <MX_SPI5_Init+0x64>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <MX_SPI5_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <MX_SPI5_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <MX_SPI5_Init+0x64>)
 80013f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013fc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <MX_SPI5_Init+0x64>)
 8001400:	2200      	movs	r2, #0
 8001402:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001404:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <MX_SPI5_Init+0x64>)
 8001406:	2200      	movs	r2, #0
 8001408:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_SPI5_Init+0x64>)
 800140c:	2200      	movs	r2, #0
 800140e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001410:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <MX_SPI5_Init+0x64>)
 8001412:	2200      	movs	r2, #0
 8001414:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <MX_SPI5_Init+0x64>)
 8001418:	220a      	movs	r2, #10
 800141a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	@ (8001430 <MX_SPI5_Init+0x64>)
 800141e:	f003 fcaf 	bl	8004d80 <HAL_SPI_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001428:	f000 fa00 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20025a84 	.word	0x20025a84
 8001434:	40015000 	.word	0x40015000

08001438 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144c:	463b      	mov	r3, r7
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001454:	4b1d      	ldr	r3, [pc, #116]	@ (80014cc <MX_TIM2_Init+0x94>)
 8001456:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800145a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800145c:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <MX_TIM2_Init+0x94>)
 800145e:	2200      	movs	r2, #0
 8001460:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001462:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <MX_TIM2_Init+0x94>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001468:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <MX_TIM2_Init+0x94>)
 800146a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800146e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001470:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <MX_TIM2_Init+0x94>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <MX_TIM2_Init+0x94>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800147c:	4813      	ldr	r0, [pc, #76]	@ (80014cc <MX_TIM2_Init+0x94>)
 800147e:	f003 ff5f 	bl	8005340 <HAL_TIM_Base_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001488:	f000 f9d0 	bl	800182c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001490:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	4619      	mov	r1, r3
 8001498:	480c      	ldr	r0, [pc, #48]	@ (80014cc <MX_TIM2_Init+0x94>)
 800149a:	f003 ffa0 	bl	80053de <HAL_TIM_ConfigClockSource>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014a4:	f000 f9c2 	bl	800182c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	@ (80014cc <MX_TIM2_Init+0x94>)
 80014b6:	f004 f99f 	bl	80057f8 <HAL_TIMEx_MasterConfigSynchronization>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014c0:	f000 f9b4 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20025adc 	.word	0x20025adc

080014d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08e      	sub	sp, #56	@ 0x38
 80014d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
 80014ea:	4bb2      	ldr	r3, [pc, #712]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4ab1      	ldr	r2, [pc, #708]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4baf      	ldr	r3, [pc, #700]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	623b      	str	r3, [r7, #32]
 8001500:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
 8001506:	4bab      	ldr	r3, [pc, #684]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4aaa      	ldr	r2, [pc, #680]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 800150c:	f043 0320 	orr.w	r3, r3, #32
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4ba8      	ldr	r3, [pc, #672]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f003 0320 	and.w	r3, r3, #32
 800151a:	61fb      	str	r3, [r7, #28]
 800151c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
 8001522:	4ba4      	ldr	r3, [pc, #656]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	4aa3      	ldr	r2, [pc, #652]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 8001528:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800152c:	6313      	str	r3, [r2, #48]	@ 0x30
 800152e:	4ba1      	ldr	r3, [pc, #644]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001536:	61bb      	str	r3, [r7, #24]
 8001538:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	4b9d      	ldr	r3, [pc, #628]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	4a9c      	ldr	r2, [pc, #624]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	@ 0x30
 800154a:	4b9a      	ldr	r3, [pc, #616]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	4b96      	ldr	r3, [pc, #600]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	4a95      	ldr	r2, [pc, #596]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	6313      	str	r3, [r2, #48]	@ 0x30
 8001566:	4b93      	ldr	r3, [pc, #588]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	4b8f      	ldr	r3, [pc, #572]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	4a8e      	ldr	r2, [pc, #568]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 800157c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001580:	6313      	str	r3, [r2, #48]	@ 0x30
 8001582:	4b8c      	ldr	r3, [pc, #560]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	4b88      	ldr	r3, [pc, #544]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	4a87      	ldr	r2, [pc, #540]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 8001598:	f043 0310 	orr.w	r3, r3, #16
 800159c:	6313      	str	r3, [r2, #48]	@ 0x30
 800159e:	4b85      	ldr	r3, [pc, #532]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	4b81      	ldr	r3, [pc, #516]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	4a80      	ldr	r2, [pc, #512]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 80015b4:	f043 0308 	orr.w	r3, r3, #8
 80015b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ba:	4b7e      	ldr	r3, [pc, #504]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2116      	movs	r1, #22
 80015ca:	487b      	ldr	r0, [pc, #492]	@ (80017b8 <MX_GPIO_Init+0x2e8>)
 80015cc:	f001 fa0a 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2180      	movs	r1, #128	@ 0x80
 80015d4:	4879      	ldr	r0, [pc, #484]	@ (80017bc <MX_GPIO_Init+0x2ec>)
 80015d6:	f001 fa05 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80015e0:	4877      	ldr	r0, [pc, #476]	@ (80017c0 <MX_GPIO_Init+0x2f0>)
 80015e2:	f001 f9ff 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80015ec:	4875      	ldr	r0, [pc, #468]	@ (80017c4 <MX_GPIO_Init+0x2f4>)
 80015ee:	f001 f9f9 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80015f2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001604:	230c      	movs	r3, #12
 8001606:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160c:	4619      	mov	r1, r3
 800160e:	486e      	ldr	r0, [pc, #440]	@ (80017c8 <MX_GPIO_Init+0x2f8>)
 8001610:	f000 ff30 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001614:	2301      	movs	r3, #1
 8001616:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001624:	230c      	movs	r3, #12
 8001626:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001628:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162c:	4619      	mov	r1, r3
 800162e:	4862      	ldr	r0, [pc, #392]	@ (80017b8 <MX_GPIO_Init+0x2e8>)
 8001630:	f000 ff20 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001634:	2316      	movs	r3, #22
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001648:	4619      	mov	r1, r3
 800164a:	485b      	ldr	r0, [pc, #364]	@ (80017b8 <MX_GPIO_Init+0x2e8>)
 800164c:	f000 ff12 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001650:	f248 0307 	movw	r3, #32775	@ 0x8007
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001656:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800165a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001660:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001664:	4619      	mov	r1, r3
 8001666:	4855      	ldr	r0, [pc, #340]	@ (80017bc <MX_GPIO_Init+0x2ec>)
 8001668:	f000 ff04 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800166c:	2380      	movs	r3, #128	@ 0x80
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001670:	2301      	movs	r3, #1
 8001672:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001680:	4619      	mov	r1, r3
 8001682:	484e      	ldr	r0, [pc, #312]	@ (80017bc <MX_GPIO_Init+0x2ec>)
 8001684:	f000 fef6 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001688:	2320      	movs	r3, #32
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800168c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001690:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001696:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800169a:	4619      	mov	r1, r3
 800169c:	4846      	ldr	r0, [pc, #280]	@ (80017b8 <MX_GPIO_Init+0x2e8>)
 800169e:	f000 fee9 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80016a2:	2304      	movs	r3, #4
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b2:	4619      	mov	r1, r3
 80016b4:	4845      	ldr	r0, [pc, #276]	@ (80017cc <MX_GPIO_Init+0x2fc>)
 80016b6:	f000 fedd 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80016ba:	f248 1333 	movw	r3, #33075	@ 0x8133
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016cc:	230c      	movs	r3, #12
 80016ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016d4:	4619      	mov	r1, r3
 80016d6:	483b      	ldr	r0, [pc, #236]	@ (80017c4 <MX_GPIO_Init+0x2f4>)
 80016d8:	f000 fecc 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80016dc:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80016e0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016ee:	230c      	movs	r3, #12
 80016f0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016f6:	4619      	mov	r1, r3
 80016f8:	4835      	ldr	r0, [pc, #212]	@ (80017d0 <MX_GPIO_Init+0x300>)
 80016fa:	f000 febb 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80016fe:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001702:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001710:	230c      	movs	r3, #12
 8001712:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001714:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001718:	4619      	mov	r1, r3
 800171a:	482c      	ldr	r0, [pc, #176]	@ (80017cc <MX_GPIO_Init+0x2fc>)
 800171c:	f000 feaa 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001720:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001726:	2300      	movs	r3, #0
 8001728:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800172e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001732:	4619      	mov	r1, r3
 8001734:	4825      	ldr	r0, [pc, #148]	@ (80017cc <MX_GPIO_Init+0x2fc>)
 8001736:	f000 fe9d 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800173a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800174c:	230c      	movs	r3, #12
 800174e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001754:	4619      	mov	r1, r3
 8001756:	481a      	ldr	r0, [pc, #104]	@ (80017c0 <MX_GPIO_Init+0x2f0>)
 8001758:	f000 fe8c 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800175c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001762:	2300      	movs	r3, #0
 8001764:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800176a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800176e:	4619      	mov	r1, r3
 8001770:	4813      	ldr	r0, [pc, #76]	@ (80017c0 <MX_GPIO_Init+0x2f0>)
 8001772:	f000 fe7f 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001776:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001788:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800178c:	4619      	mov	r1, r3
 800178e:	480c      	ldr	r0, [pc, #48]	@ (80017c0 <MX_GPIO_Init+0x2f0>)
 8001790:	f000 fe70 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001794:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017a6:	2307      	movs	r3, #7
 80017a8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ae:	4619      	mov	r1, r3
 80017b0:	e010      	b.n	80017d4 <MX_GPIO_Init+0x304>
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020800 	.word	0x40020800
 80017bc:	40020000 	.word	0x40020000
 80017c0:	40020c00 	.word	0x40020c00
 80017c4:	40021800 	.word	0x40021800
 80017c8:	40021400 	.word	0x40021400
 80017cc:	40020400 	.word	0x40020400
 80017d0:	40021000 	.word	0x40021000
 80017d4:	4812      	ldr	r0, [pc, #72]	@ (8001820 <MX_GPIO_Init+0x350>)
 80017d6:	f000 fe4d 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80017da:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f0:	4619      	mov	r1, r3
 80017f2:	480c      	ldr	r0, [pc, #48]	@ (8001824 <MX_GPIO_Init+0x354>)
 80017f4:	f000 fe3e 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80017f8:	2360      	movs	r3, #96	@ 0x60
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001808:	230c      	movs	r3, #12
 800180a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001810:	4619      	mov	r1, r3
 8001812:	4805      	ldr	r0, [pc, #20]	@ (8001828 <MX_GPIO_Init+0x358>)
 8001814:	f000 fe2e 	bl	8002474 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001818:	bf00      	nop
 800181a:	3738      	adds	r7, #56	@ 0x38
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40020000 	.word	0x40020000
 8001824:	40021800 	.word	0x40021800
 8001828:	40020400 	.word	0x40020400

0800182c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001830:	b672      	cpsid	i
}
 8001832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <Error_Handler+0x8>

08001838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	4b10      	ldr	r3, [pc, #64]	@ (8001884 <HAL_MspInit+0x4c>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001846:	4a0f      	ldr	r2, [pc, #60]	@ (8001884 <HAL_MspInit+0x4c>)
 8001848:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800184c:	6453      	str	r3, [r2, #68]	@ 0x44
 800184e:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <HAL_MspInit+0x4c>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	603b      	str	r3, [r7, #0]
 800185e:	4b09      	ldr	r3, [pc, #36]	@ (8001884 <HAL_MspInit+0x4c>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	4a08      	ldr	r2, [pc, #32]	@ (8001884 <HAL_MspInit+0x4c>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001868:	6413      	str	r3, [r2, #64]	@ 0x40
 800186a:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <HAL_MspInit+0x4c>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001876:	2007      	movs	r0, #7
 8001878:	f000 fdc8 	bl	800240c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40023800 	.word	0x40023800

08001888 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	@ 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a29      	ldr	r2, [pc, #164]	@ (800194c <HAL_I2C_MspInit+0xc4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d14b      	bne.n	8001942 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b28      	ldr	r3, [pc, #160]	@ (8001950 <HAL_I2C_MspInit+0xc8>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a27      	ldr	r2, [pc, #156]	@ (8001950 <HAL_I2C_MspInit+0xc8>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b25      	ldr	r3, [pc, #148]	@ (8001950 <HAL_I2C_MspInit+0xc8>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b21      	ldr	r3, [pc, #132]	@ (8001950 <HAL_I2C_MspInit+0xc8>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	4a20      	ldr	r2, [pc, #128]	@ (8001950 <HAL_I2C_MspInit+0xc8>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001950 <HAL_I2C_MspInit+0xc8>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80018e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e8:	2312      	movs	r3, #18
 80018ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018f4:	2304      	movs	r3, #4
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	4815      	ldr	r0, [pc, #84]	@ (8001954 <HAL_I2C_MspInit+0xcc>)
 8001900:	f000 fdb8 	bl	8002474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001904:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800190a:	2312      	movs	r3, #18
 800190c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001916:	2304      	movs	r3, #4
 8001918:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	480d      	ldr	r0, [pc, #52]	@ (8001958 <HAL_I2C_MspInit+0xd0>)
 8001922:	f000 fda7 	bl	8002474 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <HAL_I2C_MspInit+0xc8>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	4a08      	ldr	r2, [pc, #32]	@ (8001950 <HAL_I2C_MspInit+0xc8>)
 8001930:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001934:	6413      	str	r3, [r2, #64]	@ 0x40
 8001936:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <HAL_I2C_MspInit+0xc8>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	@ 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40005c00 	.word	0x40005c00
 8001950:	40023800 	.word	0x40023800
 8001954:	40020800 	.word	0x40020800
 8001958:	40020000 	.word	0x40020000

0800195c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b09a      	sub	sp, #104	@ 0x68
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001978:	2230      	movs	r2, #48	@ 0x30
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f003 ffb7 	bl	80058f0 <memset>
  if(hltdc->Instance==LTDC)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a81      	ldr	r2, [pc, #516]	@ (8001b8c <HAL_LTDC_MspInit+0x230>)
 8001988:	4293      	cmp	r3, r2
 800198a:	f040 80fb 	bne.w	8001b84 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800198e:	2308      	movs	r3, #8
 8001990:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8001992:	23c8      	movs	r3, #200	@ 0xc8
 8001994:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001996:	2302      	movs	r3, #2
 8001998:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 800199a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800199e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019a4:	4618      	mov	r0, r3
 80019a6:	f003 f801 	bl	80049ac <HAL_RCCEx_PeriphCLKConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 80019b0:	f7ff ff3c 	bl	800182c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
 80019b8:	4b75      	ldr	r3, [pc, #468]	@ (8001b90 <HAL_LTDC_MspInit+0x234>)
 80019ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019bc:	4a74      	ldr	r2, [pc, #464]	@ (8001b90 <HAL_LTDC_MspInit+0x234>)
 80019be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80019c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80019c4:	4b72      	ldr	r3, [pc, #456]	@ (8001b90 <HAL_LTDC_MspInit+0x234>)
 80019c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019cc:	623b      	str	r3, [r7, #32]
 80019ce:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
 80019d4:	4b6e      	ldr	r3, [pc, #440]	@ (8001b90 <HAL_LTDC_MspInit+0x234>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d8:	4a6d      	ldr	r2, [pc, #436]	@ (8001b90 <HAL_LTDC_MspInit+0x234>)
 80019da:	f043 0320 	orr.w	r3, r3, #32
 80019de:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e0:	4b6b      	ldr	r3, [pc, #428]	@ (8001b90 <HAL_LTDC_MspInit+0x234>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e4:	f003 0320 	and.w	r3, r3, #32
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ec:	2300      	movs	r3, #0
 80019ee:	61bb      	str	r3, [r7, #24]
 80019f0:	4b67      	ldr	r3, [pc, #412]	@ (8001b90 <HAL_LTDC_MspInit+0x234>)
 80019f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f4:	4a66      	ldr	r2, [pc, #408]	@ (8001b90 <HAL_LTDC_MspInit+0x234>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fc:	4b64      	ldr	r3, [pc, #400]	@ (8001b90 <HAL_LTDC_MspInit+0x234>)
 80019fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	61bb      	str	r3, [r7, #24]
 8001a06:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	4b60      	ldr	r3, [pc, #384]	@ (8001b90 <HAL_LTDC_MspInit+0x234>)
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a10:	4a5f      	ldr	r2, [pc, #380]	@ (8001b90 <HAL_LTDC_MspInit+0x234>)
 8001a12:	f043 0302 	orr.w	r3, r3, #2
 8001a16:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a18:	4b5d      	ldr	r3, [pc, #372]	@ (8001b90 <HAL_LTDC_MspInit+0x234>)
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	4b59      	ldr	r3, [pc, #356]	@ (8001b90 <HAL_LTDC_MspInit+0x234>)
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2c:	4a58      	ldr	r2, [pc, #352]	@ (8001b90 <HAL_LTDC_MspInit+0x234>)
 8001a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a32:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a34:	4b56      	ldr	r3, [pc, #344]	@ (8001b90 <HAL_LTDC_MspInit+0x234>)
 8001a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	4b52      	ldr	r3, [pc, #328]	@ (8001b90 <HAL_LTDC_MspInit+0x234>)
 8001a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a48:	4a51      	ldr	r2, [pc, #324]	@ (8001b90 <HAL_LTDC_MspInit+0x234>)
 8001a4a:	f043 0304 	orr.w	r3, r3, #4
 8001a4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a50:	4b4f      	ldr	r3, [pc, #316]	@ (8001b90 <HAL_LTDC_MspInit+0x234>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	4b4b      	ldr	r3, [pc, #300]	@ (8001b90 <HAL_LTDC_MspInit+0x234>)
 8001a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a64:	4a4a      	ldr	r2, [pc, #296]	@ (8001b90 <HAL_LTDC_MspInit+0x234>)
 8001a66:	f043 0308 	orr.w	r3, r3, #8
 8001a6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6c:	4b48      	ldr	r3, [pc, #288]	@ (8001b90 <HAL_LTDC_MspInit+0x234>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001a78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a7c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a8a:	230e      	movs	r3, #14
 8001a8c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a92:	4619      	mov	r1, r3
 8001a94:	483f      	ldr	r0, [pc, #252]	@ (8001b94 <HAL_LTDC_MspInit+0x238>)
 8001a96:	f000 fced 	bl	8002474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001a9a:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001a9e:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001aac:	230e      	movs	r3, #14
 8001aae:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4838      	ldr	r0, [pc, #224]	@ (8001b98 <HAL_LTDC_MspInit+0x23c>)
 8001ab8:	f000 fcdc 	bl	8002474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001abc:	2303      	movs	r3, #3
 8001abe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001acc:	2309      	movs	r3, #9
 8001ace:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4831      	ldr	r0, [pc, #196]	@ (8001b9c <HAL_LTDC_MspInit+0x240>)
 8001ad8:	f000 fccc 	bl	8002474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001adc:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001ae0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001aee:	230e      	movs	r3, #14
 8001af0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001af6:	4619      	mov	r1, r3
 8001af8:	4828      	ldr	r0, [pc, #160]	@ (8001b9c <HAL_LTDC_MspInit+0x240>)
 8001afa:	f000 fcbb 	bl	8002474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001afe:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001b02:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b10:	230e      	movs	r3, #14
 8001b12:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b14:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4821      	ldr	r0, [pc, #132]	@ (8001ba0 <HAL_LTDC_MspInit+0x244>)
 8001b1c:	f000 fcaa 	bl	8002474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001b20:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001b24:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b32:	230e      	movs	r3, #14
 8001b34:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b36:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4819      	ldr	r0, [pc, #100]	@ (8001ba4 <HAL_LTDC_MspInit+0x248>)
 8001b3e:	f000 fc99 	bl	8002474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001b42:	2348      	movs	r3, #72	@ 0x48
 8001b44:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b52:	230e      	movs	r3, #14
 8001b54:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b56:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4812      	ldr	r0, [pc, #72]	@ (8001ba8 <HAL_LTDC_MspInit+0x24c>)
 8001b5e:	f000 fc89 	bl	8002474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001b62:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b66:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b74:	2309      	movs	r3, #9
 8001b76:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b78:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4808      	ldr	r0, [pc, #32]	@ (8001ba0 <HAL_LTDC_MspInit+0x244>)
 8001b80:	f000 fc78 	bl	8002474 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001b84:	bf00      	nop
 8001b86:	3768      	adds	r7, #104	@ 0x68
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40016800 	.word	0x40016800
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40021400 	.word	0x40021400
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	40021800 	.word	0x40021800
 8001ba4:	40020800 	.word	0x40020800
 8001ba8:	40020c00 	.word	0x40020c00

08001bac <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0b      	ldr	r2, [pc, #44]	@ (8001be8 <HAL_RNG_MspInit+0x3c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d10d      	bne.n	8001bda <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bec <HAL_RNG_MspInit+0x40>)
 8001bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bc6:	4a09      	ldr	r2, [pc, #36]	@ (8001bec <HAL_RNG_MspInit+0x40>)
 8001bc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bcc:	6353      	str	r3, [r2, #52]	@ 0x34
 8001bce:	4b07      	ldr	r3, [pc, #28]	@ (8001bec <HAL_RNG_MspInit+0x40>)
 8001bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	50060800 	.word	0x50060800
 8001bec:	40023800 	.word	0x40023800

08001bf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	@ 0x28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a19      	ldr	r2, [pc, #100]	@ (8001c74 <HAL_SPI_MspInit+0x84>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d12c      	bne.n	8001c6c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	4b18      	ldr	r3, [pc, #96]	@ (8001c78 <HAL_SPI_MspInit+0x88>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	4a17      	ldr	r2, [pc, #92]	@ (8001c78 <HAL_SPI_MspInit+0x88>)
 8001c1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c22:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <HAL_SPI_MspInit+0x88>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	4b11      	ldr	r3, [pc, #68]	@ (8001c78 <HAL_SPI_MspInit+0x88>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	4a10      	ldr	r2, [pc, #64]	@ (8001c78 <HAL_SPI_MspInit+0x88>)
 8001c38:	f043 0320 	orr.w	r3, r3, #32
 8001c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c78 <HAL_SPI_MspInit+0x88>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	f003 0320 	and.w	r3, r3, #32
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001c4a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001c5c:	2305      	movs	r3, #5
 8001c5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4619      	mov	r1, r3
 8001c66:	4805      	ldr	r0, [pc, #20]	@ (8001c7c <HAL_SPI_MspInit+0x8c>)
 8001c68:	f000 fc04 	bl	8002474 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001c6c:	bf00      	nop
 8001c6e:	3728      	adds	r7, #40	@ 0x28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40015000 	.word	0x40015000
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40021400 	.word	0x40021400

08001c80 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a08      	ldr	r2, [pc, #32]	@ (8001cb0 <HAL_SPI_MspDeInit+0x30>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d10a      	bne.n	8001ca8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001c92:	4b08      	ldr	r3, [pc, #32]	@ (8001cb4 <HAL_SPI_MspDeInit+0x34>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c96:	4a07      	ldr	r2, [pc, #28]	@ (8001cb4 <HAL_SPI_MspDeInit+0x34>)
 8001c98:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001c9c:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001c9e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001ca2:	4805      	ldr	r0, [pc, #20]	@ (8001cb8 <HAL_SPI_MspDeInit+0x38>)
 8001ca4:	f000 fd92 	bl	80027cc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40015000 	.word	0x40015000
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40021400 	.word	0x40021400

08001cbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ccc:	d10d      	bne.n	8001cea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b09      	ldr	r3, [pc, #36]	@ (8001cf8 <HAL_TIM_Base_MspInit+0x3c>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	4a08      	ldr	r2, [pc, #32]	@ (8001cf8 <HAL_TIM_Base_MspInit+0x3c>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_TIM_Base_MspInit+0x3c>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800

08001cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d00:	bf00      	nop
 8001d02:	e7fd      	b.n	8001d00 <NMI_Handler+0x4>

08001d04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d08:	bf00      	nop
 8001d0a:	e7fd      	b.n	8001d08 <HardFault_Handler+0x4>

08001d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d10:	bf00      	nop
 8001d12:	e7fd      	b.n	8001d10 <MemManage_Handler+0x4>

08001d14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d18:	bf00      	nop
 8001d1a:	e7fd      	b.n	8001d18 <BusFault_Handler+0x4>

08001d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <UsageFault_Handler+0x4>

08001d24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d52:	f000 fa65 	bl	8002220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8001d60:	f000 f902 	bl	8001f68 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8001d64:	f000 f8c2 	bl	8001eec <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8001d68:	2202      	movs	r2, #2
 8001d6a:	2103      	movs	r1, #3
 8001d6c:	2082      	movs	r0, #130	@ 0x82
 8001d6e:	f000 f94f 	bl	8002010 <I2C3_Write>
    HAL_Delay(5);
 8001d72:	2005      	movs	r0, #5
 8001d74:	f000 fa74 	bl	8002260 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2103      	movs	r1, #3
 8001d7c:	2082      	movs	r0, #130	@ 0x82
 8001d7e:	f000 f947 	bl	8002010 <I2C3_Write>
    HAL_Delay(2);
 8001d82:	2002      	movs	r0, #2
 8001d84:	f000 fa6c 	bl	8002260 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8001d88:	1cba      	adds	r2, r7, #2
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	2082      	movs	r0, #130	@ 0x82
 8001d90:	f000 f98e 	bl	80020b0 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8001d94:	887b      	ldrh	r3, [r7, #2]
 8001d96:	021b      	lsls	r3, r3, #8
 8001d98:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8001d9a:	887b      	ldrh	r3, [r7, #2]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	f640 0211 	movw	r2, #2065	@ 0x811
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d001      	beq.n	8001db4 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e075      	b.n	8001ea0 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8001db4:	2202      	movs	r2, #2
 8001db6:	2103      	movs	r1, #3
 8001db8:	2082      	movs	r0, #130	@ 0x82
 8001dba:	f000 f929 	bl	8002010 <I2C3_Write>
    HAL_Delay(5);
 8001dbe:	2005      	movs	r0, #5
 8001dc0:	f000 fa4e 	bl	8002260 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2103      	movs	r1, #3
 8001dc8:	2082      	movs	r0, #130	@ 0x82
 8001dca:	f000 f921 	bl	8002010 <I2C3_Write>
    HAL_Delay(2);
 8001dce:	2002      	movs	r0, #2
 8001dd0:	f000 fa46 	bl	8002260 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8001dd4:	2004      	movs	r0, #4
 8001dd6:	f000 f867 	bl	8001ea8 <STMPE811_Read>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8001dde:	797b      	ldrb	r3, [r7, #5]
 8001de0:	f023 0301 	bic.w	r3, r3, #1
 8001de4:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8001de6:	797b      	ldrb	r3, [r7, #5]
 8001de8:	461a      	mov	r2, r3
 8001dea:	2104      	movs	r1, #4
 8001dec:	2082      	movs	r0, #130	@ 0x82
 8001dee:	f000 f90f 	bl	8002010 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8001df2:	2004      	movs	r0, #4
 8001df4:	f000 f858 	bl	8001ea8 <STMPE811_Read>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8001dfc:	797b      	ldrb	r3, [r7, #5]
 8001dfe:	f023 0302 	bic.w	r3, r3, #2
 8001e02:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8001e04:	797b      	ldrb	r3, [r7, #5]
 8001e06:	461a      	mov	r2, r3
 8001e08:	2104      	movs	r1, #4
 8001e0a:	2082      	movs	r0, #130	@ 0x82
 8001e0c:	f000 f900 	bl	8002010 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8001e10:	2249      	movs	r2, #73	@ 0x49
 8001e12:	2120      	movs	r1, #32
 8001e14:	2082      	movs	r0, #130	@ 0x82
 8001e16:	f000 f8fb 	bl	8002010 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8001e1a:	2002      	movs	r0, #2
 8001e1c:	f000 fa20 	bl	8002260 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8001e20:	2201      	movs	r2, #1
 8001e22:	2121      	movs	r1, #33	@ 0x21
 8001e24:	2082      	movs	r0, #130	@ 0x82
 8001e26:	f000 f8f3 	bl	8002010 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8001e2a:	2017      	movs	r0, #23
 8001e2c:	f000 f83c 	bl	8001ea8 <STMPE811_Read>
 8001e30:	4603      	mov	r3, r0
 8001e32:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8001e34:	797b      	ldrb	r3, [r7, #5]
 8001e36:	f043 031e 	orr.w	r3, r3, #30
 8001e3a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8001e3c:	797b      	ldrb	r3, [r7, #5]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	2117      	movs	r1, #23
 8001e42:	2082      	movs	r0, #130	@ 0x82
 8001e44:	f000 f8e4 	bl	8002010 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8001e48:	229a      	movs	r2, #154	@ 0x9a
 8001e4a:	2141      	movs	r1, #65	@ 0x41
 8001e4c:	2082      	movs	r0, #130	@ 0x82
 8001e4e:	f000 f8df 	bl	8002010 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8001e52:	2201      	movs	r2, #1
 8001e54:	214a      	movs	r1, #74	@ 0x4a
 8001e56:	2082      	movs	r0, #130	@ 0x82
 8001e58:	f000 f8da 	bl	8002010 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	214b      	movs	r1, #75	@ 0x4b
 8001e60:	2082      	movs	r0, #130	@ 0x82
 8001e62:	f000 f8d5 	bl	8002010 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8001e66:	2200      	movs	r2, #0
 8001e68:	214b      	movs	r1, #75	@ 0x4b
 8001e6a:	2082      	movs	r0, #130	@ 0x82
 8001e6c:	f000 f8d0 	bl	8002010 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8001e70:	2201      	movs	r2, #1
 8001e72:	2156      	movs	r1, #86	@ 0x56
 8001e74:	2082      	movs	r0, #130	@ 0x82
 8001e76:	f000 f8cb 	bl	8002010 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	2158      	movs	r1, #88	@ 0x58
 8001e7e:	2082      	movs	r0, #130	@ 0x82
 8001e80:	f000 f8c6 	bl	8002010 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8001e84:	2203      	movs	r2, #3
 8001e86:	2140      	movs	r1, #64	@ 0x40
 8001e88:	2082      	movs	r0, #130	@ 0x82
 8001e8a:	f000 f8c1 	bl	8002010 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8001e8e:	22ff      	movs	r2, #255	@ 0xff
 8001e90:	210b      	movs	r1, #11
 8001e92:	2082      	movs	r0, #130	@ 0x82
 8001e94:	f000 f8bc 	bl	8002010 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8001e98:	20c8      	movs	r0, #200	@ 0xc8
 8001e9a:	f000 f9e1 	bl	8002260 <HAL_Delay>

    return STMPE811_State_Ok;
 8001e9e:	2302      	movs	r3, #2

}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8001eb2:	f107 020f 	add.w	r2, r7, #15
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	2082      	movs	r0, #130	@ 0x82
 8001ebc:	f000 f8d2 	bl	8002064 <I2C3_Read>

    return readData;
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8001ed0:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20025b78 	.word	0x20025b78

08001eec <I2C3_Init>:

static void I2C3_Init()
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	603b      	str	r3, [r7, #0]
 8001ef6:	4b18      	ldr	r3, [pc, #96]	@ (8001f58 <I2C3_Init+0x6c>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	4a17      	ldr	r2, [pc, #92]	@ (8001f58 <I2C3_Init+0x6c>)
 8001efc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f02:	4b15      	ldr	r3, [pc, #84]	@ (8001f58 <I2C3_Init+0x6c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8001f0e:	4b13      	ldr	r3, [pc, #76]	@ (8001f5c <I2C3_Init+0x70>)
 8001f10:	4a13      	ldr	r2, [pc, #76]	@ (8001f60 <I2C3_Init+0x74>)
 8001f12:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8001f14:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <I2C3_Init+0x70>)
 8001f16:	4a13      	ldr	r2, [pc, #76]	@ (8001f64 <I2C3_Init+0x78>)
 8001f18:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f1a:	4b10      	ldr	r3, [pc, #64]	@ (8001f5c <I2C3_Init+0x70>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8001f20:	4b0e      	ldr	r3, [pc, #56]	@ (8001f5c <I2C3_Init+0x70>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f26:	4b0d      	ldr	r3, [pc, #52]	@ (8001f5c <I2C3_Init+0x70>)
 8001f28:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f2c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <I2C3_Init+0x70>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f34:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <I2C3_Init+0x70>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8001f3a:	4808      	ldr	r0, [pc, #32]	@ (8001f5c <I2C3_Init+0x70>)
 8001f3c:	f000 fd6c 	bl	8002a18 <HAL_I2C_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8001f4a:	bf00      	nop
 8001f4c:	e7fd      	b.n	8001f4a <I2C3_Init+0x5e>
    }
    return;
 8001f4e:	bf00      	nop
}
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	20025b24 	.word	0x20025b24
 8001f60:	40005c00 	.word	0x40005c00
 8001f64:	000186a0 	.word	0x000186a0

08001f68 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6e:	f107 030c 	add.w	r3, r7, #12
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	60da      	str	r2, [r3, #12]
 8001f7c:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	4b20      	ldr	r3, [pc, #128]	@ (8002004 <I2C3_MspInit+0x9c>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f86:	4a1f      	ldr	r2, [pc, #124]	@ (8002004 <I2C3_MspInit+0x9c>)
 8001f88:	f043 0304 	orr.w	r3, r3, #4
 8001f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002004 <I2C3_MspInit+0x9c>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	4b19      	ldr	r3, [pc, #100]	@ (8002004 <I2C3_MspInit+0x9c>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	4a18      	ldr	r2, [pc, #96]	@ (8002004 <I2C3_MspInit+0x9c>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001faa:	4b16      	ldr	r3, [pc, #88]	@ (8002004 <I2C3_MspInit+0x9c>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001fb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fbc:	2312      	movs	r3, #18
 8001fbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fc8:	2304      	movs	r3, #4
 8001fca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001fcc:	f107 030c 	add.w	r3, r7, #12
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	480d      	ldr	r0, [pc, #52]	@ (8002008 <I2C3_MspInit+0xa0>)
 8001fd4:	f000 fa4e 	bl	8002474 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001fd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fdc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fde:	2312      	movs	r3, #18
 8001fe0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fea:	2304      	movs	r3, #4
 8001fec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001fee:	f107 030c 	add.w	r3, r7, #12
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4805      	ldr	r0, [pc, #20]	@ (800200c <I2C3_MspInit+0xa4>)
 8001ff6:	f000 fa3d 	bl	8002474 <HAL_GPIO_Init>
    
}
 8001ffa:	bf00      	nop
 8001ffc:	3720      	adds	r7, #32
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	40020800 	.word	0x40020800
 800200c:	40020000 	.word	0x40020000

08002010 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af04      	add	r7, sp, #16
 8002016:	4603      	mov	r3, r0
 8002018:	80fb      	strh	r3, [r7, #6]
 800201a:	460b      	mov	r3, r1
 800201c:	717b      	strb	r3, [r7, #5]
 800201e:	4613      	mov	r3, r2
 8002020:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002022:	793b      	ldrb	r3, [r7, #4]
 8002024:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002026:	797b      	ldrb	r3, [r7, #5]
 8002028:	b29a      	uxth	r2, r3
 800202a:	88f9      	ldrh	r1, [r7, #6]
 800202c:	4b0a      	ldr	r3, [pc, #40]	@ (8002058 <I2C3_Write+0x48>)
 800202e:	9302      	str	r3, [sp, #8]
 8002030:	2301      	movs	r3, #1
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	f107 030f 	add.w	r3, r7, #15
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2301      	movs	r3, #1
 800203c:	4807      	ldr	r0, [pc, #28]	@ (800205c <I2C3_Write+0x4c>)
 800203e:	f000 fe2f 	bl	8002ca0 <HAL_I2C_Mem_Write>
 8002042:	4603      	mov	r3, r0
 8002044:	461a      	mov	r2, r3
 8002046:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <I2C3_Write+0x50>)
 8002048:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800204a:	f7ff ff3f 	bl	8001ecc <verifyHAL_I2C_IS_OKAY>
}
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	0003d090 	.word	0x0003d090
 800205c:	20025b24 	.word	0x20025b24
 8002060:	20025b78 	.word	0x20025b78

08002064 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af04      	add	r7, sp, #16
 800206a:	4603      	mov	r3, r0
 800206c:	603a      	str	r2, [r7, #0]
 800206e:	71fb      	strb	r3, [r7, #7]
 8002070:	460b      	mov	r3, r1
 8002072:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	b299      	uxth	r1, r3
 8002078:	79bb      	ldrb	r3, [r7, #6]
 800207a:	b29a      	uxth	r2, r3
 800207c:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <I2C3_Read+0x40>)
 800207e:	9302      	str	r3, [sp, #8]
 8002080:	2301      	movs	r3, #1
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	2301      	movs	r3, #1
 800208a:	4807      	ldr	r0, [pc, #28]	@ (80020a8 <I2C3_Read+0x44>)
 800208c:	f000 ff02 	bl	8002e94 <HAL_I2C_Mem_Read>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	4b05      	ldr	r3, [pc, #20]	@ (80020ac <I2C3_Read+0x48>)
 8002096:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002098:	f7ff ff18 	bl	8001ecc <verifyHAL_I2C_IS_OKAY>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	0003d090 	.word	0x0003d090
 80020a8:	20025b24 	.word	0x20025b24
 80020ac:	20025b78 	.word	0x20025b78

080020b0 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af04      	add	r7, sp, #16
 80020b6:	603a      	str	r2, [r7, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	4603      	mov	r3, r0
 80020bc:	71fb      	strb	r3, [r7, #7]
 80020be:	460b      	mov	r3, r1
 80020c0:	71bb      	strb	r3, [r7, #6]
 80020c2:	4613      	mov	r3, r2
 80020c4:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	b299      	uxth	r1, r3
 80020ca:	79bb      	ldrb	r3, [r7, #6]
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	4b07      	ldr	r3, [pc, #28]	@ (80020ec <I2C3_MulitByteRead+0x3c>)
 80020d0:	9302      	str	r3, [sp, #8]
 80020d2:	88bb      	ldrh	r3, [r7, #4]
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2301      	movs	r3, #1
 80020dc:	4804      	ldr	r0, [pc, #16]	@ (80020f0 <I2C3_MulitByteRead+0x40>)
 80020de:	f000 fed9 	bl	8002e94 <HAL_I2C_Mem_Read>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	0003d090 	.word	0x0003d090
 80020f0:	20025b24 	.word	0x20025b24

080020f4 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002108:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <SystemInit+0x20>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210e:	4a05      	ldr	r2, [pc, #20]	@ (8002124 <SystemInit+0x20>)
 8002110:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002114:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002128:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002160 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800212c:	f7ff ffea 	bl	8002104 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002130:	480c      	ldr	r0, [pc, #48]	@ (8002164 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002132:	490d      	ldr	r1, [pc, #52]	@ (8002168 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002134:	4a0d      	ldr	r2, [pc, #52]	@ (800216c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002138:	e002      	b.n	8002140 <LoopCopyDataInit>

0800213a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800213c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800213e:	3304      	adds	r3, #4

08002140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002144:	d3f9      	bcc.n	800213a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002146:	4a0a      	ldr	r2, [pc, #40]	@ (8002170 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002148:	4c0a      	ldr	r4, [pc, #40]	@ (8002174 <LoopFillZerobss+0x22>)
  movs r3, #0
 800214a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800214c:	e001      	b.n	8002152 <LoopFillZerobss>

0800214e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800214e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002150:	3204      	adds	r2, #4

08002152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002154:	d3fb      	bcc.n	800214e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002156:	f003 fbd3 	bl	8005900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800215a:	f7fe ffaa 	bl	80010b2 <main>
  bx  lr    
 800215e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002160:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002168:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800216c:	08006b58 	.word	0x08006b58
  ldr r2, =_sbss
 8002170:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002174:	20025b80 	.word	0x20025b80

08002178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002178:	e7fe      	b.n	8002178 <ADC_IRQHandler>
	...

0800217c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002180:	4b0e      	ldr	r3, [pc, #56]	@ (80021bc <HAL_Init+0x40>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0d      	ldr	r2, [pc, #52]	@ (80021bc <HAL_Init+0x40>)
 8002186:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800218a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800218c:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <HAL_Init+0x40>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0a      	ldr	r2, [pc, #40]	@ (80021bc <HAL_Init+0x40>)
 8002192:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002196:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002198:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <HAL_Init+0x40>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a07      	ldr	r2, [pc, #28]	@ (80021bc <HAL_Init+0x40>)
 800219e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a4:	2003      	movs	r0, #3
 80021a6:	f000 f931 	bl	800240c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021aa:	2000      	movs	r0, #0
 80021ac:	f000 f808 	bl	80021c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021b0:	f7ff fb42 	bl	8001838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023c00 	.word	0x40023c00

080021c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c8:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <HAL_InitTick+0x54>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <HAL_InitTick+0x58>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4619      	mov	r1, r3
 80021d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021da:	fbb2 f3f3 	udiv	r3, r2, r3
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f93b 	bl	800245a <HAL_SYSTICK_Config>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00e      	b.n	800220c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b0f      	cmp	r3, #15
 80021f2:	d80a      	bhi.n	800220a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f4:	2200      	movs	r2, #0
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021fc:	f000 f911 	bl	8002422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002200:	4a06      	ldr	r2, [pc, #24]	@ (800221c <HAL_InitTick+0x5c>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	e000      	b.n	800220c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000010 	.word	0x20000010
 8002218:	20000018 	.word	0x20000018
 800221c:	20000014 	.word	0x20000014

08002220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002224:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <HAL_IncTick+0x20>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	4b06      	ldr	r3, [pc, #24]	@ (8002244 <HAL_IncTick+0x24>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4413      	add	r3, r2
 8002230:	4a04      	ldr	r2, [pc, #16]	@ (8002244 <HAL_IncTick+0x24>)
 8002232:	6013      	str	r3, [r2, #0]
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000018 	.word	0x20000018
 8002244:	20025b7c 	.word	0x20025b7c

08002248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return uwTick;
 800224c:	4b03      	ldr	r3, [pc, #12]	@ (800225c <HAL_GetTick+0x14>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20025b7c 	.word	0x20025b7c

08002260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002268:	f7ff ffee 	bl	8002248 <HAL_GetTick>
 800226c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002278:	d005      	beq.n	8002286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800227a:	4b0a      	ldr	r3, [pc, #40]	@ (80022a4 <HAL_Delay+0x44>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4413      	add	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002286:	bf00      	nop
 8002288:	f7ff ffde 	bl	8002248 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	429a      	cmp	r2, r3
 8002296:	d8f7      	bhi.n	8002288 <HAL_Delay+0x28>
  {
  }
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000018 	.word	0x20000018

080022a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b8:	4b0c      	ldr	r3, [pc, #48]	@ (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022c4:	4013      	ands	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022da:	4a04      	ldr	r2, [pc, #16]	@ (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	60d3      	str	r3, [r2, #12]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f4:	4b04      	ldr	r3, [pc, #16]	@ (8002308 <__NVIC_GetPriorityGrouping+0x18>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	f003 0307 	and.w	r3, r3, #7
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	6039      	str	r1, [r7, #0]
 8002316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231c:	2b00      	cmp	r3, #0
 800231e:	db0a      	blt.n	8002336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	490c      	ldr	r1, [pc, #48]	@ (8002358 <__NVIC_SetPriority+0x4c>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	0112      	lsls	r2, r2, #4
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	440b      	add	r3, r1
 8002330:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002334:	e00a      	b.n	800234c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4908      	ldr	r1, [pc, #32]	@ (800235c <__NVIC_SetPriority+0x50>)
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3b04      	subs	r3, #4
 8002344:	0112      	lsls	r2, r2, #4
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	440b      	add	r3, r1
 800234a:	761a      	strb	r2, [r3, #24]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000e100 	.word	0xe000e100
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	@ 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f1c3 0307 	rsb	r3, r3, #7
 800237a:	2b04      	cmp	r3, #4
 800237c:	bf28      	it	cs
 800237e:	2304      	movcs	r3, #4
 8002380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3304      	adds	r3, #4
 8002386:	2b06      	cmp	r3, #6
 8002388:	d902      	bls.n	8002390 <NVIC_EncodePriority+0x30>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3b03      	subs	r3, #3
 800238e:	e000      	b.n	8002392 <NVIC_EncodePriority+0x32>
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43da      	mvns	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	401a      	ands	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	43d9      	mvns	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	4313      	orrs	r3, r2
         );
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3724      	adds	r7, #36	@ 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023d8:	d301      	bcc.n	80023de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023da:	2301      	movs	r3, #1
 80023dc:	e00f      	b.n	80023fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023de:	4a0a      	ldr	r2, [pc, #40]	@ (8002408 <SysTick_Config+0x40>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e6:	210f      	movs	r1, #15
 80023e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023ec:	f7ff ff8e 	bl	800230c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f0:	4b05      	ldr	r3, [pc, #20]	@ (8002408 <SysTick_Config+0x40>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f6:	4b04      	ldr	r3, [pc, #16]	@ (8002408 <SysTick_Config+0x40>)
 80023f8:	2207      	movs	r2, #7
 80023fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	e000e010 	.word	0xe000e010

0800240c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff ff47 	bl	80022a8 <__NVIC_SetPriorityGrouping>
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002422:	b580      	push	{r7, lr}
 8002424:	b086      	sub	sp, #24
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002434:	f7ff ff5c 	bl	80022f0 <__NVIC_GetPriorityGrouping>
 8002438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	6978      	ldr	r0, [r7, #20]
 8002440:	f7ff ff8e 	bl	8002360 <NVIC_EncodePriority>
 8002444:	4602      	mov	r2, r0
 8002446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff5d 	bl	800230c <__NVIC_SetPriority>
}
 8002452:	bf00      	nop
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff ffb0 	bl	80023c8 <SysTick_Config>
 8002468:	4603      	mov	r3, r0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	@ 0x24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002486:	2300      	movs	r3, #0
 8002488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248a:	2300      	movs	r3, #0
 800248c:	61fb      	str	r3, [r7, #28]
 800248e:	e177      	b.n	8002780 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002490:	2201      	movs	r2, #1
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	f040 8166 	bne.w	800277a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d005      	beq.n	80024c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d130      	bne.n	8002528 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	2203      	movs	r2, #3
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024fc:	2201      	movs	r2, #1
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	f003 0201 	and.w	r2, r3, #1
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	2b03      	cmp	r3, #3
 8002532:	d017      	beq.n	8002564 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	2203      	movs	r2, #3
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d123      	bne.n	80025b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	08da      	lsrs	r2, r3, #3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3208      	adds	r2, #8
 8002578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800257c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	220f      	movs	r2, #15
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	08da      	lsrs	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3208      	adds	r2, #8
 80025b2:	69b9      	ldr	r1, [r7, #24]
 80025b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	2203      	movs	r2, #3
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0203 	and.w	r2, r3, #3
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 80c0 	beq.w	800277a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	4b66      	ldr	r3, [pc, #408]	@ (8002798 <HAL_GPIO_Init+0x324>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002602:	4a65      	ldr	r2, [pc, #404]	@ (8002798 <HAL_GPIO_Init+0x324>)
 8002604:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002608:	6453      	str	r3, [r2, #68]	@ 0x44
 800260a:	4b63      	ldr	r3, [pc, #396]	@ (8002798 <HAL_GPIO_Init+0x324>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002616:	4a61      	ldr	r2, [pc, #388]	@ (800279c <HAL_GPIO_Init+0x328>)
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	089b      	lsrs	r3, r3, #2
 800261c:	3302      	adds	r3, #2
 800261e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	220f      	movs	r2, #15
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a58      	ldr	r2, [pc, #352]	@ (80027a0 <HAL_GPIO_Init+0x32c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d037      	beq.n	80026b2 <HAL_GPIO_Init+0x23e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a57      	ldr	r2, [pc, #348]	@ (80027a4 <HAL_GPIO_Init+0x330>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d031      	beq.n	80026ae <HAL_GPIO_Init+0x23a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a56      	ldr	r2, [pc, #344]	@ (80027a8 <HAL_GPIO_Init+0x334>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d02b      	beq.n	80026aa <HAL_GPIO_Init+0x236>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a55      	ldr	r2, [pc, #340]	@ (80027ac <HAL_GPIO_Init+0x338>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d025      	beq.n	80026a6 <HAL_GPIO_Init+0x232>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a54      	ldr	r2, [pc, #336]	@ (80027b0 <HAL_GPIO_Init+0x33c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d01f      	beq.n	80026a2 <HAL_GPIO_Init+0x22e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a53      	ldr	r2, [pc, #332]	@ (80027b4 <HAL_GPIO_Init+0x340>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d019      	beq.n	800269e <HAL_GPIO_Init+0x22a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a52      	ldr	r2, [pc, #328]	@ (80027b8 <HAL_GPIO_Init+0x344>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d013      	beq.n	800269a <HAL_GPIO_Init+0x226>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a51      	ldr	r2, [pc, #324]	@ (80027bc <HAL_GPIO_Init+0x348>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00d      	beq.n	8002696 <HAL_GPIO_Init+0x222>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a50      	ldr	r2, [pc, #320]	@ (80027c0 <HAL_GPIO_Init+0x34c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d007      	beq.n	8002692 <HAL_GPIO_Init+0x21e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a4f      	ldr	r2, [pc, #316]	@ (80027c4 <HAL_GPIO_Init+0x350>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d101      	bne.n	800268e <HAL_GPIO_Init+0x21a>
 800268a:	2309      	movs	r3, #9
 800268c:	e012      	b.n	80026b4 <HAL_GPIO_Init+0x240>
 800268e:	230a      	movs	r3, #10
 8002690:	e010      	b.n	80026b4 <HAL_GPIO_Init+0x240>
 8002692:	2308      	movs	r3, #8
 8002694:	e00e      	b.n	80026b4 <HAL_GPIO_Init+0x240>
 8002696:	2307      	movs	r3, #7
 8002698:	e00c      	b.n	80026b4 <HAL_GPIO_Init+0x240>
 800269a:	2306      	movs	r3, #6
 800269c:	e00a      	b.n	80026b4 <HAL_GPIO_Init+0x240>
 800269e:	2305      	movs	r3, #5
 80026a0:	e008      	b.n	80026b4 <HAL_GPIO_Init+0x240>
 80026a2:	2304      	movs	r3, #4
 80026a4:	e006      	b.n	80026b4 <HAL_GPIO_Init+0x240>
 80026a6:	2303      	movs	r3, #3
 80026a8:	e004      	b.n	80026b4 <HAL_GPIO_Init+0x240>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e002      	b.n	80026b4 <HAL_GPIO_Init+0x240>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_GPIO_Init+0x240>
 80026b2:	2300      	movs	r3, #0
 80026b4:	69fa      	ldr	r2, [r7, #28]
 80026b6:	f002 0203 	and.w	r2, r2, #3
 80026ba:	0092      	lsls	r2, r2, #2
 80026bc:	4093      	lsls	r3, r2
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026c4:	4935      	ldr	r1, [pc, #212]	@ (800279c <HAL_GPIO_Init+0x328>)
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	089b      	lsrs	r3, r3, #2
 80026ca:	3302      	adds	r3, #2
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026d2:	4b3d      	ldr	r3, [pc, #244]	@ (80027c8 <HAL_GPIO_Init+0x354>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026f6:	4a34      	ldr	r2, [pc, #208]	@ (80027c8 <HAL_GPIO_Init+0x354>)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026fc:	4b32      	ldr	r3, [pc, #200]	@ (80027c8 <HAL_GPIO_Init+0x354>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002720:	4a29      	ldr	r2, [pc, #164]	@ (80027c8 <HAL_GPIO_Init+0x354>)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002726:	4b28      	ldr	r3, [pc, #160]	@ (80027c8 <HAL_GPIO_Init+0x354>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800274a:	4a1f      	ldr	r2, [pc, #124]	@ (80027c8 <HAL_GPIO_Init+0x354>)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002750:	4b1d      	ldr	r3, [pc, #116]	@ (80027c8 <HAL_GPIO_Init+0x354>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002774:	4a14      	ldr	r2, [pc, #80]	@ (80027c8 <HAL_GPIO_Init+0x354>)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3301      	adds	r3, #1
 800277e:	61fb      	str	r3, [r7, #28]
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	2b0f      	cmp	r3, #15
 8002784:	f67f ae84 	bls.w	8002490 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	3724      	adds	r7, #36	@ 0x24
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40023800 	.word	0x40023800
 800279c:	40013800 	.word	0x40013800
 80027a0:	40020000 	.word	0x40020000
 80027a4:	40020400 	.word	0x40020400
 80027a8:	40020800 	.word	0x40020800
 80027ac:	40020c00 	.word	0x40020c00
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40021400 	.word	0x40021400
 80027b8:	40021800 	.word	0x40021800
 80027bc:	40021c00 	.word	0x40021c00
 80027c0:	40022000 	.word	0x40022000
 80027c4:	40022400 	.word	0x40022400
 80027c8:	40013c00 	.word	0x40013c00

080027cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	e0d9      	b.n	800299c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027e8:	2201      	movs	r2, #1
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4013      	ands	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	429a      	cmp	r2, r3
 8002800:	f040 80c9 	bne.w	8002996 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002804:	4a6b      	ldr	r2, [pc, #428]	@ (80029b4 <HAL_GPIO_DeInit+0x1e8>)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	089b      	lsrs	r3, r3, #2
 800280a:	3302      	adds	r3, #2
 800280c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002810:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	220f      	movs	r2, #15
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	4013      	ands	r3, r2
 8002824:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a63      	ldr	r2, [pc, #396]	@ (80029b8 <HAL_GPIO_DeInit+0x1ec>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d037      	beq.n	800289e <HAL_GPIO_DeInit+0xd2>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a62      	ldr	r2, [pc, #392]	@ (80029bc <HAL_GPIO_DeInit+0x1f0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d031      	beq.n	800289a <HAL_GPIO_DeInit+0xce>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a61      	ldr	r2, [pc, #388]	@ (80029c0 <HAL_GPIO_DeInit+0x1f4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d02b      	beq.n	8002896 <HAL_GPIO_DeInit+0xca>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a60      	ldr	r2, [pc, #384]	@ (80029c4 <HAL_GPIO_DeInit+0x1f8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d025      	beq.n	8002892 <HAL_GPIO_DeInit+0xc6>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a5f      	ldr	r2, [pc, #380]	@ (80029c8 <HAL_GPIO_DeInit+0x1fc>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d01f      	beq.n	800288e <HAL_GPIO_DeInit+0xc2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a5e      	ldr	r2, [pc, #376]	@ (80029cc <HAL_GPIO_DeInit+0x200>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d019      	beq.n	800288a <HAL_GPIO_DeInit+0xbe>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a5d      	ldr	r2, [pc, #372]	@ (80029d0 <HAL_GPIO_DeInit+0x204>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d013      	beq.n	8002886 <HAL_GPIO_DeInit+0xba>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a5c      	ldr	r2, [pc, #368]	@ (80029d4 <HAL_GPIO_DeInit+0x208>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00d      	beq.n	8002882 <HAL_GPIO_DeInit+0xb6>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a5b      	ldr	r2, [pc, #364]	@ (80029d8 <HAL_GPIO_DeInit+0x20c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <HAL_GPIO_DeInit+0xb2>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a5a      	ldr	r2, [pc, #360]	@ (80029dc <HAL_GPIO_DeInit+0x210>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_GPIO_DeInit+0xae>
 8002876:	2309      	movs	r3, #9
 8002878:	e012      	b.n	80028a0 <HAL_GPIO_DeInit+0xd4>
 800287a:	230a      	movs	r3, #10
 800287c:	e010      	b.n	80028a0 <HAL_GPIO_DeInit+0xd4>
 800287e:	2308      	movs	r3, #8
 8002880:	e00e      	b.n	80028a0 <HAL_GPIO_DeInit+0xd4>
 8002882:	2307      	movs	r3, #7
 8002884:	e00c      	b.n	80028a0 <HAL_GPIO_DeInit+0xd4>
 8002886:	2306      	movs	r3, #6
 8002888:	e00a      	b.n	80028a0 <HAL_GPIO_DeInit+0xd4>
 800288a:	2305      	movs	r3, #5
 800288c:	e008      	b.n	80028a0 <HAL_GPIO_DeInit+0xd4>
 800288e:	2304      	movs	r3, #4
 8002890:	e006      	b.n	80028a0 <HAL_GPIO_DeInit+0xd4>
 8002892:	2303      	movs	r3, #3
 8002894:	e004      	b.n	80028a0 <HAL_GPIO_DeInit+0xd4>
 8002896:	2302      	movs	r3, #2
 8002898:	e002      	b.n	80028a0 <HAL_GPIO_DeInit+0xd4>
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <HAL_GPIO_DeInit+0xd4>
 800289e:	2300      	movs	r3, #0
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	f002 0203 	and.w	r2, r2, #3
 80028a6:	0092      	lsls	r2, r2, #2
 80028a8:	4093      	lsls	r3, r2
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d132      	bne.n	8002916 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80028b0:	4b4b      	ldr	r3, [pc, #300]	@ (80029e0 <HAL_GPIO_DeInit+0x214>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	4949      	ldr	r1, [pc, #292]	@ (80029e0 <HAL_GPIO_DeInit+0x214>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80028be:	4b48      	ldr	r3, [pc, #288]	@ (80029e0 <HAL_GPIO_DeInit+0x214>)
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	4946      	ldr	r1, [pc, #280]	@ (80029e0 <HAL_GPIO_DeInit+0x214>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80028cc:	4b44      	ldr	r3, [pc, #272]	@ (80029e0 <HAL_GPIO_DeInit+0x214>)
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	4942      	ldr	r1, [pc, #264]	@ (80029e0 <HAL_GPIO_DeInit+0x214>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80028da:	4b41      	ldr	r3, [pc, #260]	@ (80029e0 <HAL_GPIO_DeInit+0x214>)
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	493f      	ldr	r1, [pc, #252]	@ (80029e0 <HAL_GPIO_DeInit+0x214>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	220f      	movs	r2, #15
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80028f8:	4a2e      	ldr	r2, [pc, #184]	@ (80029b4 <HAL_GPIO_DeInit+0x1e8>)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	089b      	lsrs	r3, r3, #2
 80028fe:	3302      	adds	r3, #2
 8002900:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	43da      	mvns	r2, r3
 8002908:	482a      	ldr	r0, [pc, #168]	@ (80029b4 <HAL_GPIO_DeInit+0x1e8>)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	089b      	lsrs	r3, r3, #2
 800290e:	400a      	ands	r2, r1
 8002910:	3302      	adds	r3, #2
 8002912:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	2103      	movs	r1, #3
 8002920:	fa01 f303 	lsl.w	r3, r1, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	401a      	ands	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	08da      	lsrs	r2, r3, #3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3208      	adds	r2, #8
 8002934:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	220f      	movs	r2, #15
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	08d2      	lsrs	r2, r2, #3
 800294c:	4019      	ands	r1, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3208      	adds	r2, #8
 8002952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	2103      	movs	r1, #3
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	401a      	ands	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	2101      	movs	r1, #1
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	fa01 f303 	lsl.w	r3, r1, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	401a      	ands	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	2103      	movs	r1, #3
 800298a:	fa01 f303 	lsl.w	r3, r1, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	401a      	ands	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	3301      	adds	r3, #1
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2b0f      	cmp	r3, #15
 80029a0:	f67f af22 	bls.w	80027e8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40013800 	.word	0x40013800
 80029b8:	40020000 	.word	0x40020000
 80029bc:	40020400 	.word	0x40020400
 80029c0:	40020800 	.word	0x40020800
 80029c4:	40020c00 	.word	0x40020c00
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40021400 	.word	0x40021400
 80029d0:	40021800 	.word	0x40021800
 80029d4:	40021c00 	.word	0x40021c00
 80029d8:	40022000 	.word	0x40022000
 80029dc:	40022400 	.word	0x40022400
 80029e0:	40013c00 	.word	0x40013c00

080029e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	807b      	strh	r3, [r7, #2]
 80029f0:	4613      	mov	r3, r2
 80029f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029f4:	787b      	ldrb	r3, [r7, #1]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029fa:	887a      	ldrh	r2, [r7, #2]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a00:	e003      	b.n	8002a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a02:	887b      	ldrh	r3, [r7, #2]
 8002a04:	041a      	lsls	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	619a      	str	r2, [r3, #24]
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e12b      	b.n	8002c82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fe ff22 	bl	8001888 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2224      	movs	r2, #36	@ 0x24
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0201 	bic.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a7c:	f001 ff82 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 8002a80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	4a81      	ldr	r2, [pc, #516]	@ (8002c8c <HAL_I2C_Init+0x274>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d807      	bhi.n	8002a9c <HAL_I2C_Init+0x84>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4a80      	ldr	r2, [pc, #512]	@ (8002c90 <HAL_I2C_Init+0x278>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	bf94      	ite	ls
 8002a94:	2301      	movls	r3, #1
 8002a96:	2300      	movhi	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	e006      	b.n	8002aaa <HAL_I2C_Init+0x92>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4a7d      	ldr	r2, [pc, #500]	@ (8002c94 <HAL_I2C_Init+0x27c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	bf94      	ite	ls
 8002aa4:	2301      	movls	r3, #1
 8002aa6:	2300      	movhi	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e0e7      	b.n	8002c82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4a78      	ldr	r2, [pc, #480]	@ (8002c98 <HAL_I2C_Init+0x280>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	0c9b      	lsrs	r3, r3, #18
 8002abc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4a6a      	ldr	r2, [pc, #424]	@ (8002c8c <HAL_I2C_Init+0x274>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d802      	bhi.n	8002aec <HAL_I2C_Init+0xd4>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	e009      	b.n	8002b00 <HAL_I2C_Init+0xe8>
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002af2:	fb02 f303 	mul.w	r3, r2, r3
 8002af6:	4a69      	ldr	r2, [pc, #420]	@ (8002c9c <HAL_I2C_Init+0x284>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	099b      	lsrs	r3, r3, #6
 8002afe:	3301      	adds	r3, #1
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	430b      	orrs	r3, r1
 8002b06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b12:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	495c      	ldr	r1, [pc, #368]	@ (8002c8c <HAL_I2C_Init+0x274>)
 8002b1c:	428b      	cmp	r3, r1
 8002b1e:	d819      	bhi.n	8002b54 <HAL_I2C_Init+0x13c>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1e59      	subs	r1, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b2e:	1c59      	adds	r1, r3, #1
 8002b30:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b34:	400b      	ands	r3, r1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <HAL_I2C_Init+0x138>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1e59      	subs	r1, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b48:	3301      	adds	r3, #1
 8002b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b4e:	e051      	b.n	8002bf4 <HAL_I2C_Init+0x1dc>
 8002b50:	2304      	movs	r3, #4
 8002b52:	e04f      	b.n	8002bf4 <HAL_I2C_Init+0x1dc>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d111      	bne.n	8002b80 <HAL_I2C_Init+0x168>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1e58      	subs	r0, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	440b      	add	r3, r1
 8002b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bf0c      	ite	eq
 8002b78:	2301      	moveq	r3, #1
 8002b7a:	2300      	movne	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	e012      	b.n	8002ba6 <HAL_I2C_Init+0x18e>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1e58      	subs	r0, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6859      	ldr	r1, [r3, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	0099      	lsls	r1, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b96:	3301      	adds	r3, #1
 8002b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_I2C_Init+0x196>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e022      	b.n	8002bf4 <HAL_I2C_Init+0x1dc>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10e      	bne.n	8002bd4 <HAL_I2C_Init+0x1bc>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1e58      	subs	r0, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6859      	ldr	r1, [r3, #4]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	440b      	add	r3, r1
 8002bc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bc8:	3301      	adds	r3, #1
 8002bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bd2:	e00f      	b.n	8002bf4 <HAL_I2C_Init+0x1dc>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1e58      	subs	r0, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	0099      	lsls	r1, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bea:	3301      	adds	r3, #1
 8002bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	6809      	ldr	r1, [r1, #0]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69da      	ldr	r2, [r3, #28]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6911      	ldr	r1, [r2, #16]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	68d2      	ldr	r2, [r2, #12]
 8002c2e:	4311      	orrs	r1, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	430b      	orrs	r3, r1
 8002c36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	000186a0 	.word	0x000186a0
 8002c90:	001e847f 	.word	0x001e847f
 8002c94:	003d08ff 	.word	0x003d08ff
 8002c98:	431bde83 	.word	0x431bde83
 8002c9c:	10624dd3 	.word	0x10624dd3

08002ca0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	4608      	mov	r0, r1
 8002caa:	4611      	mov	r1, r2
 8002cac:	461a      	mov	r2, r3
 8002cae:	4603      	mov	r3, r0
 8002cb0:	817b      	strh	r3, [r7, #10]
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	813b      	strh	r3, [r7, #8]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cba:	f7ff fac5 	bl	8002248 <HAL_GetTick>
 8002cbe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b20      	cmp	r3, #32
 8002cca:	f040 80d9 	bne.w	8002e80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	2319      	movs	r3, #25
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	496d      	ldr	r1, [pc, #436]	@ (8002e8c <HAL_I2C_Mem_Write+0x1ec>)
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 fc8b 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e0cc      	b.n	8002e82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_I2C_Mem_Write+0x56>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e0c5      	b.n	8002e82 <HAL_I2C_Mem_Write+0x1e2>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d007      	beq.n	8002d1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0201 	orr.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2221      	movs	r2, #33	@ 0x21
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2240      	movs	r2, #64	@ 0x40
 8002d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a3a      	ldr	r2, [r7, #32]
 8002d46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4a4d      	ldr	r2, [pc, #308]	@ (8002e90 <HAL_I2C_Mem_Write+0x1f0>)
 8002d5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d5e:	88f8      	ldrh	r0, [r7, #6]
 8002d60:	893a      	ldrh	r2, [r7, #8]
 8002d62:	8979      	ldrh	r1, [r7, #10]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fac2 	bl	80032f8 <I2C_RequestMemoryWrite>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d052      	beq.n	8002e20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e081      	b.n	8002e82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 fd50 	bl	8003828 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00d      	beq.n	8002daa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d107      	bne.n	8002da6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002da4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e06b      	b.n	8002e82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dae:	781a      	ldrb	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dba:	1c5a      	adds	r2, r3, #1
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d11b      	bne.n	8002e20 <HAL_I2C_Mem_Write+0x180>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d017      	beq.n	8002e20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df4:	781a      	ldrb	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1aa      	bne.n	8002d7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 fd43 	bl	80038b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00d      	beq.n	8002e54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d107      	bne.n	8002e50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e016      	b.n	8002e82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e000      	b.n	8002e82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e80:	2302      	movs	r3, #2
  }
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	00100002 	.word	0x00100002
 8002e90:	ffff0000 	.word	0xffff0000

08002e94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08c      	sub	sp, #48	@ 0x30
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	4608      	mov	r0, r1
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	817b      	strh	r3, [r7, #10]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	813b      	strh	r3, [r7, #8]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eae:	f7ff f9cb 	bl	8002248 <HAL_GetTick>
 8002eb2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b20      	cmp	r3, #32
 8002ebe:	f040 8214 	bne.w	80032ea <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	2319      	movs	r3, #25
 8002ec8:	2201      	movs	r2, #1
 8002eca:	497b      	ldr	r1, [pc, #492]	@ (80030b8 <HAL_I2C_Mem_Read+0x224>)
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 fb91 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e207      	b.n	80032ec <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_I2C_Mem_Read+0x56>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e200      	b.n	80032ec <HAL_I2C_Mem_Read+0x458>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d007      	beq.n	8002f10 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2222      	movs	r2, #34	@ 0x22
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2240      	movs	r2, #64	@ 0x40
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002f40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4a5b      	ldr	r2, [pc, #364]	@ (80030bc <HAL_I2C_Mem_Read+0x228>)
 8002f50:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f52:	88f8      	ldrh	r0, [r7, #6]
 8002f54:	893a      	ldrh	r2, [r7, #8]
 8002f56:	8979      	ldrh	r1, [r7, #10]
 8002f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	4603      	mov	r3, r0
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 fa5e 	bl	8003424 <I2C_RequestMemoryRead>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e1bc      	b.n	80032ec <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d113      	bne.n	8002fa2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	623b      	str	r3, [r7, #32]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	623b      	str	r3, [r7, #32]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	623b      	str	r3, [r7, #32]
 8002f8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	e190      	b.n	80032c4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d11b      	bne.n	8002fe2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	61fb      	str	r3, [r7, #28]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	61fb      	str	r3, [r7, #28]
 8002fce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	e170      	b.n	80032c4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d11b      	bne.n	8003022 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ff8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003008:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300a:	2300      	movs	r3, #0
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	61bb      	str	r3, [r7, #24]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	e150      	b.n	80032c4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003038:	e144      	b.n	80032c4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800303e:	2b03      	cmp	r3, #3
 8003040:	f200 80f1 	bhi.w	8003226 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003048:	2b01      	cmp	r3, #1
 800304a:	d123      	bne.n	8003094 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800304c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800304e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 fc79 	bl	8003948 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e145      	b.n	80032ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691a      	ldr	r2, [r3, #16]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003072:	1c5a      	adds	r2, r3, #1
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003088:	b29b      	uxth	r3, r3
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003092:	e117      	b.n	80032c4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003098:	2b02      	cmp	r3, #2
 800309a:	d14e      	bne.n	800313a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800309c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030a2:	2200      	movs	r2, #0
 80030a4:	4906      	ldr	r1, [pc, #24]	@ (80030c0 <HAL_I2C_Mem_Read+0x22c>)
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 faa4 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d008      	beq.n	80030c4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e11a      	b.n	80032ec <HAL_I2C_Mem_Read+0x458>
 80030b6:	bf00      	nop
 80030b8:	00100002 	.word	0x00100002
 80030bc:	ffff0000 	.word	0xffff0000
 80030c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003138:	e0c4      	b.n	80032c4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003140:	2200      	movs	r2, #0
 8003142:	496c      	ldr	r1, [pc, #432]	@ (80032f4 <HAL_I2C_Mem_Read+0x460>)
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 fa55 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0cb      	b.n	80032ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003162:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800319c:	2200      	movs	r2, #0
 800319e:	4955      	ldr	r1, [pc, #340]	@ (80032f4 <HAL_I2C_Mem_Read+0x460>)
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 fa27 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e09d      	b.n	80032ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691a      	ldr	r2, [r3, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003224:	e04e      	b.n	80032c4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003228:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 fb8c 	bl	8003948 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e058      	b.n	80032ec <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003262:	b29b      	uxth	r3, r3
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b04      	cmp	r3, #4
 8003278:	d124      	bne.n	80032c4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800327e:	2b03      	cmp	r3, #3
 8003280:	d107      	bne.n	8003292 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003290:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f47f aeb6 	bne.w	800303a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e000      	b.n	80032ec <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80032ea:	2302      	movs	r3, #2
  }
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3728      	adds	r7, #40	@ 0x28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	00010004 	.word	0x00010004

080032f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	4608      	mov	r0, r1
 8003302:	4611      	mov	r1, r2
 8003304:	461a      	mov	r2, r3
 8003306:	4603      	mov	r3, r0
 8003308:	817b      	strh	r3, [r7, #10]
 800330a:	460b      	mov	r3, r1
 800330c:	813b      	strh	r3, [r7, #8]
 800330e:	4613      	mov	r3, r2
 8003310:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003320:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	2200      	movs	r2, #0
 800332a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 f960 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00d      	beq.n	8003356 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003344:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003348:	d103      	bne.n	8003352 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003350:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e05f      	b.n	8003416 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003356:	897b      	ldrh	r3, [r7, #10]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003364:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003368:	6a3a      	ldr	r2, [r7, #32]
 800336a:	492d      	ldr	r1, [pc, #180]	@ (8003420 <I2C_RequestMemoryWrite+0x128>)
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 f9bb 	bl	80036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e04c      	b.n	8003416 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003394:	6a39      	ldr	r1, [r7, #32]
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 fa46 	bl	8003828 <I2C_WaitOnTXEFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00d      	beq.n	80033be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d107      	bne.n	80033ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e02b      	b.n	8003416 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033be:	88fb      	ldrh	r3, [r7, #6]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d105      	bne.n	80033d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033c4:	893b      	ldrh	r3, [r7, #8]
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	611a      	str	r2, [r3, #16]
 80033ce:	e021      	b.n	8003414 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033d0:	893b      	ldrh	r3, [r7, #8]
 80033d2:	0a1b      	lsrs	r3, r3, #8
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033e0:	6a39      	ldr	r1, [r7, #32]
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 fa20 	bl	8003828 <I2C_WaitOnTXEFlagUntilTimeout>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00d      	beq.n	800340a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d107      	bne.n	8003406 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003404:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e005      	b.n	8003416 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800340a:	893b      	ldrh	r3, [r7, #8]
 800340c:	b2da      	uxtb	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	00010002 	.word	0x00010002

08003424 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af02      	add	r7, sp, #8
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	4608      	mov	r0, r1
 800342e:	4611      	mov	r1, r2
 8003430:	461a      	mov	r2, r3
 8003432:	4603      	mov	r3, r0
 8003434:	817b      	strh	r3, [r7, #10]
 8003436:	460b      	mov	r3, r1
 8003438:	813b      	strh	r3, [r7, #8]
 800343a:	4613      	mov	r3, r2
 800343c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800344c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800345c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	2200      	movs	r2, #0
 8003466:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f8c2 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00d      	beq.n	8003492 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003480:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003484:	d103      	bne.n	800348e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800348c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e0aa      	b.n	80035e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003492:	897b      	ldrh	r3, [r7, #10]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	461a      	mov	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a4:	6a3a      	ldr	r2, [r7, #32]
 80034a6:	4952      	ldr	r1, [pc, #328]	@ (80035f0 <I2C_RequestMemoryRead+0x1cc>)
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f91d 	bl	80036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e097      	b.n	80035e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d0:	6a39      	ldr	r1, [r7, #32]
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 f9a8 	bl	8003828 <I2C_WaitOnTXEFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00d      	beq.n	80034fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d107      	bne.n	80034f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e076      	b.n	80035e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d105      	bne.n	800350c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003500:	893b      	ldrh	r3, [r7, #8]
 8003502:	b2da      	uxtb	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	611a      	str	r2, [r3, #16]
 800350a:	e021      	b.n	8003550 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800350c:	893b      	ldrh	r3, [r7, #8]
 800350e:	0a1b      	lsrs	r3, r3, #8
 8003510:	b29b      	uxth	r3, r3
 8003512:	b2da      	uxtb	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800351a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800351c:	6a39      	ldr	r1, [r7, #32]
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f982 	bl	8003828 <I2C_WaitOnTXEFlagUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00d      	beq.n	8003546 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352e:	2b04      	cmp	r3, #4
 8003530:	d107      	bne.n	8003542 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003540:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e050      	b.n	80035e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003546:	893b      	ldrh	r3, [r7, #8]
 8003548:	b2da      	uxtb	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003552:	6a39      	ldr	r1, [r7, #32]
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 f967 	bl	8003828 <I2C_WaitOnTXEFlagUntilTimeout>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00d      	beq.n	800357c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003564:	2b04      	cmp	r3, #4
 8003566:	d107      	bne.n	8003578 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003576:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e035      	b.n	80035e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800358a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800358c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	2200      	movs	r2, #0
 8003594:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f82b 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00d      	beq.n	80035c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035b2:	d103      	bne.n	80035bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e013      	b.n	80035e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035c0:	897b      	ldrh	r3, [r7, #10]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d2:	6a3a      	ldr	r2, [r7, #32]
 80035d4:	4906      	ldr	r1, [pc, #24]	@ (80035f0 <I2C_RequestMemoryRead+0x1cc>)
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f886 	bl	80036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	00010002 	.word	0x00010002

080035f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003604:	e048      	b.n	8003698 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800360c:	d044      	beq.n	8003698 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360e:	f7fe fe1b 	bl	8002248 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <I2C_WaitOnFlagUntilTimeout+0x30>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d139      	bne.n	8003698 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	0c1b      	lsrs	r3, r3, #16
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b01      	cmp	r3, #1
 800362c:	d10d      	bne.n	800364a <I2C_WaitOnFlagUntilTimeout+0x56>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	43da      	mvns	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	4013      	ands	r3, r2
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf0c      	ite	eq
 8003640:	2301      	moveq	r3, #1
 8003642:	2300      	movne	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	461a      	mov	r2, r3
 8003648:	e00c      	b.n	8003664 <I2C_WaitOnFlagUntilTimeout+0x70>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	43da      	mvns	r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4013      	ands	r3, r2
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf0c      	ite	eq
 800365c:	2301      	moveq	r3, #1
 800365e:	2300      	movne	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	461a      	mov	r2, r3
 8003664:	79fb      	ldrb	r3, [r7, #7]
 8003666:	429a      	cmp	r2, r3
 8003668:	d116      	bne.n	8003698 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003684:	f043 0220 	orr.w	r2, r3, #32
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e023      	b.n	80036e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	0c1b      	lsrs	r3, r3, #16
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d10d      	bne.n	80036be <I2C_WaitOnFlagUntilTimeout+0xca>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	43da      	mvns	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	4013      	ands	r3, r2
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	bf0c      	ite	eq
 80036b4:	2301      	moveq	r3, #1
 80036b6:	2300      	movne	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	e00c      	b.n	80036d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	43da      	mvns	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	4013      	ands	r3, r2
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	bf0c      	ite	eq
 80036d0:	2301      	moveq	r3, #1
 80036d2:	2300      	movne	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d093      	beq.n	8003606 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036f6:	e071      	b.n	80037dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003702:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003706:	d123      	bne.n	8003750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003716:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003720:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373c:	f043 0204 	orr.w	r2, r3, #4
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e067      	b.n	8003820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003756:	d041      	beq.n	80037dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003758:	f7fe fd76 	bl	8002248 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	429a      	cmp	r2, r3
 8003766:	d302      	bcc.n	800376e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d136      	bne.n	80037dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	0c1b      	lsrs	r3, r3, #16
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b01      	cmp	r3, #1
 8003776:	d10c      	bne.n	8003792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	43da      	mvns	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4013      	ands	r3, r2
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	bf14      	ite	ne
 800378a:	2301      	movne	r3, #1
 800378c:	2300      	moveq	r3, #0
 800378e:	b2db      	uxtb	r3, r3
 8003790:	e00b      	b.n	80037aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	43da      	mvns	r2, r3
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	4013      	ands	r3, r2
 800379e:	b29b      	uxth	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d016      	beq.n	80037dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c8:	f043 0220 	orr.w	r2, r3, #32
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e021      	b.n	8003820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	0c1b      	lsrs	r3, r3, #16
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d10c      	bne.n	8003800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	43da      	mvns	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	4013      	ands	r3, r2
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bf14      	ite	ne
 80037f8:	2301      	movne	r3, #1
 80037fa:	2300      	moveq	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	e00b      	b.n	8003818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	43da      	mvns	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	4013      	ands	r3, r2
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	bf14      	ite	ne
 8003812:	2301      	movne	r3, #1
 8003814:	2300      	moveq	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	f47f af6d 	bne.w	80036f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003834:	e034      	b.n	80038a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f8e3 	bl	8003a02 <I2C_IsAcknowledgeFailed>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e034      	b.n	80038b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800384c:	d028      	beq.n	80038a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384e:	f7fe fcfb 	bl	8002248 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	429a      	cmp	r2, r3
 800385c:	d302      	bcc.n	8003864 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d11d      	bne.n	80038a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800386e:	2b80      	cmp	r3, #128	@ 0x80
 8003870:	d016      	beq.n	80038a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388c:	f043 0220 	orr.w	r2, r3, #32
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e007      	b.n	80038b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038aa:	2b80      	cmp	r3, #128	@ 0x80
 80038ac:	d1c3      	bne.n	8003836 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038c4:	e034      	b.n	8003930 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f89b 	bl	8003a02 <I2C_IsAcknowledgeFailed>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e034      	b.n	8003940 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038dc:	d028      	beq.n	8003930 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038de:	f7fe fcb3 	bl	8002248 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d302      	bcc.n	80038f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d11d      	bne.n	8003930 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d016      	beq.n	8003930 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391c:	f043 0220 	orr.w	r2, r3, #32
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e007      	b.n	8003940 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b04      	cmp	r3, #4
 800393c:	d1c3      	bne.n	80038c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003954:	e049      	b.n	80039ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b10      	cmp	r3, #16
 8003962:	d119      	bne.n	8003998 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0210 	mvn.w	r2, #16
 800396c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e030      	b.n	80039fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003998:	f7fe fc56 	bl	8002248 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d302      	bcc.n	80039ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d11d      	bne.n	80039ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b8:	2b40      	cmp	r3, #64	@ 0x40
 80039ba:	d016      	beq.n	80039ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	f043 0220 	orr.w	r2, r3, #32
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e007      	b.n	80039fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f4:	2b40      	cmp	r3, #64	@ 0x40
 80039f6:	d1ae      	bne.n	8003956 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a18:	d11b      	bne.n	8003a52 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a22:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3e:	f043 0204 	orr.w	r2, r3, #4
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b20      	cmp	r3, #32
 8003a74:	d129      	bne.n	8003aca <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2224      	movs	r2, #36	@ 0x24
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0201 	bic.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0210 	bic.w	r2, r2, #16
 8003a9c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0201 	orr.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	e000      	b.n	8003acc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003aca:	2302      	movs	r3, #2
  }
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	d12a      	bne.n	8003b48 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2224      	movs	r2, #36	@ 0x24
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0201 	bic.w	r2, r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003b12:	89fb      	ldrh	r3, [r7, #14]
 8003b14:	f023 030f 	bic.w	r3, r3, #15
 8003b18:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	89fb      	ldrh	r3, [r7, #14]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	89fa      	ldrh	r2, [r7, #14]
 8003b2a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	e000      	b.n	8003b4a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003b48:	2302      	movs	r3, #2
  }
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
	...

08003b58 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e0bf      	b.n	8003cea <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fd feec 	bl	800195c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699a      	ldr	r2, [r3, #24]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003b9a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6999      	ldr	r1, [r3, #24]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003bb0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6899      	ldr	r1, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	4b4a      	ldr	r3, [pc, #296]	@ (8003cf4 <HAL_LTDC_Init+0x19c>)
 8003bcc:	400b      	ands	r3, r1
 8003bce:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	041b      	lsls	r3, r3, #16
 8003bd6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6899      	ldr	r1, [r3, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68d9      	ldr	r1, [r3, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	4b3e      	ldr	r3, [pc, #248]	@ (8003cf4 <HAL_LTDC_Init+0x19c>)
 8003bfa:	400b      	ands	r3, r1
 8003bfc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	041b      	lsls	r3, r3, #16
 8003c04:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68d9      	ldr	r1, [r3, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1a      	ldr	r2, [r3, #32]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6919      	ldr	r1, [r3, #16]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	4b33      	ldr	r3, [pc, #204]	@ (8003cf4 <HAL_LTDC_Init+0x19c>)
 8003c28:	400b      	ands	r3, r1
 8003c2a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	041b      	lsls	r3, r3, #16
 8003c32:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6919      	ldr	r1, [r3, #16]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6959      	ldr	r1, [r3, #20]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	4b27      	ldr	r3, [pc, #156]	@ (8003cf4 <HAL_LTDC_Init+0x19c>)
 8003c56:	400b      	ands	r3, r1
 8003c58:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5e:	041b      	lsls	r3, r3, #16
 8003c60:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6959      	ldr	r1, [r3, #20]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c7e:	021b      	lsls	r3, r3, #8
 8003c80:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003c88:	041b      	lsls	r3, r3, #16
 8003c8a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0206 	orr.w	r2, r2, #6
 8003cc6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699a      	ldr	r2, [r3, #24]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	f000f800 	.word	0xf000f800

08003cf8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003cf8:	b5b0      	push	{r4, r5, r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_LTDC_ConfigLayer+0x1a>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e02c      	b.n	8003d6c <HAL_LTDC_ConfigLayer+0x74>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2134      	movs	r1, #52	@ 0x34
 8003d28:	fb01 f303 	mul.w	r3, r1, r3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	4614      	mov	r4, r2
 8003d36:	461d      	mov	r5, r3
 8003d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d44:	682b      	ldr	r3, [r5, #0]
 8003d46:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f811 	bl	8003d74 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2201      	movs	r2, #1
 8003d58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bdb0      	pop	{r4, r5, r7, pc}

08003d74 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b089      	sub	sp, #36	@ 0x24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	0c1b      	lsrs	r3, r3, #16
 8003d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d90:	4413      	add	r3, r2
 8003d92:	041b      	lsls	r3, r3, #16
 8003d94:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	01db      	lsls	r3, r3, #7
 8003da0:	4413      	add	r3, r2
 8003da2:	3384      	adds	r3, #132	@ 0x84
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	6812      	ldr	r2, [r2, #0]
 8003daa:	4611      	mov	r1, r2
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	01d2      	lsls	r2, r2, #7
 8003db0:	440a      	add	r2, r1
 8003db2:	3284      	adds	r2, #132	@ 0x84
 8003db4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003db8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	0c1b      	lsrs	r3, r3, #16
 8003dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003dca:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003dcc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	01db      	lsls	r3, r3, #7
 8003dd8:	440b      	add	r3, r1
 8003dda:	3384      	adds	r3, #132	@ 0x84
 8003ddc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003de2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003df2:	4413      	add	r3, r2
 8003df4:	041b      	lsls	r3, r3, #16
 8003df6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	01db      	lsls	r3, r3, #7
 8003e02:	4413      	add	r3, r2
 8003e04:	3384      	adds	r3, #132	@ 0x84
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	01d2      	lsls	r2, r2, #7
 8003e12:	440a      	add	r2, r1
 8003e14:	3284      	adds	r2, #132	@ 0x84
 8003e16:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003e1a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e2a:	4413      	add	r3, r2
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4619      	mov	r1, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	01db      	lsls	r3, r3, #7
 8003e38:	440b      	add	r3, r1
 8003e3a:	3384      	adds	r3, #132	@ 0x84
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	01db      	lsls	r3, r3, #7
 8003e4e:	4413      	add	r3, r2
 8003e50:	3384      	adds	r3, #132	@ 0x84
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	6812      	ldr	r2, [r2, #0]
 8003e58:	4611      	mov	r1, r2
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	01d2      	lsls	r2, r2, #7
 8003e5e:	440a      	add	r2, r1
 8003e60:	3284      	adds	r2, #132	@ 0x84
 8003e62:	f023 0307 	bic.w	r3, r3, #7
 8003e66:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	01db      	lsls	r3, r3, #7
 8003e72:	4413      	add	r3, r2
 8003e74:	3384      	adds	r3, #132	@ 0x84
 8003e76:	461a      	mov	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003e84:	021b      	lsls	r3, r3, #8
 8003e86:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003e8e:	041b      	lsls	r3, r3, #16
 8003e90:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	061b      	lsls	r3, r3, #24
 8003e98:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	01db      	lsls	r3, r3, #7
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3384      	adds	r3, #132	@ 0x84
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	01db      	lsls	r3, r3, #7
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3384      	adds	r3, #132	@ 0x84
 8003eb8:	461a      	mov	r2, r3
 8003eba:	2300      	movs	r3, #0
 8003ebc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	01db      	lsls	r3, r3, #7
 8003ed8:	440b      	add	r3, r1
 8003eda:	3384      	adds	r3, #132	@ 0x84
 8003edc:	4619      	mov	r1, r3
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	01db      	lsls	r3, r3, #7
 8003eee:	4413      	add	r3, r2
 8003ef0:	3384      	adds	r3, #132	@ 0x84
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	4611      	mov	r1, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	01d2      	lsls	r2, r2, #7
 8003efe:	440a      	add	r2, r1
 8003f00:	3284      	adds	r2, #132	@ 0x84
 8003f02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f06:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	01db      	lsls	r3, r3, #7
 8003f12:	4413      	add	r3, r2
 8003f14:	3384      	adds	r3, #132	@ 0x84
 8003f16:	461a      	mov	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	01db      	lsls	r3, r3, #7
 8003f28:	4413      	add	r3, r2
 8003f2a:	3384      	adds	r3, #132	@ 0x84
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	6812      	ldr	r2, [r2, #0]
 8003f32:	4611      	mov	r1, r2
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	01d2      	lsls	r2, r2, #7
 8003f38:	440a      	add	r2, r1
 8003f3a:	3284      	adds	r2, #132	@ 0x84
 8003f3c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003f40:	f023 0307 	bic.w	r3, r3, #7
 8003f44:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	69da      	ldr	r2, [r3, #28]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	68f9      	ldr	r1, [r7, #12]
 8003f50:	6809      	ldr	r1, [r1, #0]
 8003f52:	4608      	mov	r0, r1
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	01c9      	lsls	r1, r1, #7
 8003f58:	4401      	add	r1, r0
 8003f5a:	3184      	adds	r1, #132	@ 0x84
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	01db      	lsls	r3, r3, #7
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3384      	adds	r3, #132	@ 0x84
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	461a      	mov	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	01db      	lsls	r3, r3, #7
 8003f7a:	4413      	add	r3, r2
 8003f7c:	3384      	adds	r3, #132	@ 0x84
 8003f7e:	461a      	mov	r2, r3
 8003f80:	2300      	movs	r3, #0
 8003f82:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	01db      	lsls	r3, r3, #7
 8003f8e:	4413      	add	r3, r2
 8003f90:	3384      	adds	r3, #132	@ 0x84
 8003f92:	461a      	mov	r2, r3
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f98:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d102      	bne.n	8003fa8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003fa2:	2304      	movs	r3, #4
 8003fa4:	61fb      	str	r3, [r7, #28]
 8003fa6:	e01b      	b.n	8003fe0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d102      	bne.n	8003fb6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	61fb      	str	r3, [r7, #28]
 8003fb4:	e014      	b.n	8003fe0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d00b      	beq.n	8003fd6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d007      	beq.n	8003fd6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d003      	beq.n	8003fd6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003fd2:	2b07      	cmp	r3, #7
 8003fd4:	d102      	bne.n	8003fdc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	61fb      	str	r3, [r7, #28]
 8003fda:	e001      	b.n	8003fe0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	01db      	lsls	r3, r3, #7
 8003fea:	4413      	add	r3, r2
 8003fec:	3384      	adds	r3, #132	@ 0x84
 8003fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	01d2      	lsls	r2, r2, #7
 8003ffa:	440a      	add	r2, r1
 8003ffc:	3284      	adds	r2, #132	@ 0x84
 8003ffe:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004002:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	fb02 f303 	mul.w	r3, r2, r3
 800400e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	1acb      	subs	r3, r1, r3
 800401a:	69f9      	ldr	r1, [r7, #28]
 800401c:	fb01 f303 	mul.w	r3, r1, r3
 8004020:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004022:	68f9      	ldr	r1, [r7, #12]
 8004024:	6809      	ldr	r1, [r1, #0]
 8004026:	4608      	mov	r0, r1
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	01c9      	lsls	r1, r1, #7
 800402c:	4401      	add	r1, r0
 800402e:	3184      	adds	r1, #132	@ 0x84
 8004030:	4313      	orrs	r3, r2
 8004032:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	01db      	lsls	r3, r3, #7
 800403e:	4413      	add	r3, r2
 8004040:	3384      	adds	r3, #132	@ 0x84
 8004042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	4611      	mov	r1, r2
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	01d2      	lsls	r2, r2, #7
 800404e:	440a      	add	r2, r1
 8004050:	3284      	adds	r2, #132	@ 0x84
 8004052:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004056:	f023 0307 	bic.w	r3, r3, #7
 800405a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	01db      	lsls	r3, r3, #7
 8004066:	4413      	add	r3, r2
 8004068:	3384      	adds	r3, #132	@ 0x84
 800406a:	461a      	mov	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004070:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	461a      	mov	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	01db      	lsls	r3, r3, #7
 800407c:	4413      	add	r3, r2
 800407e:	3384      	adds	r3, #132	@ 0x84
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	6812      	ldr	r2, [r2, #0]
 8004086:	4611      	mov	r1, r2
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	01d2      	lsls	r2, r2, #7
 800408c:	440a      	add	r2, r1
 800408e:	3284      	adds	r2, #132	@ 0x84
 8004090:	f043 0301 	orr.w	r3, r3, #1
 8004094:	6013      	str	r3, [r2, #0]
}
 8004096:	bf00      	nop
 8004098:	3724      	adds	r7, #36	@ 0x24
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
	...

080040a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e267      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d075      	beq.n	80041ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040c2:	4b88      	ldr	r3, [pc, #544]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 030c 	and.w	r3, r3, #12
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d00c      	beq.n	80040e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ce:	4b85      	ldr	r3, [pc, #532]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d112      	bne.n	8004100 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040da:	4b82      	ldr	r3, [pc, #520]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040e6:	d10b      	bne.n	8004100 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e8:	4b7e      	ldr	r3, [pc, #504]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d05b      	beq.n	80041ac <HAL_RCC_OscConfig+0x108>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d157      	bne.n	80041ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e242      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004108:	d106      	bne.n	8004118 <HAL_RCC_OscConfig+0x74>
 800410a:	4b76      	ldr	r3, [pc, #472]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a75      	ldr	r2, [pc, #468]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e01d      	b.n	8004154 <HAL_RCC_OscConfig+0xb0>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004120:	d10c      	bne.n	800413c <HAL_RCC_OscConfig+0x98>
 8004122:	4b70      	ldr	r3, [pc, #448]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a6f      	ldr	r2, [pc, #444]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004128:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b6d      	ldr	r3, [pc, #436]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a6c      	ldr	r2, [pc, #432]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e00b      	b.n	8004154 <HAL_RCC_OscConfig+0xb0>
 800413c:	4b69      	ldr	r3, [pc, #420]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a68      	ldr	r2, [pc, #416]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	4b66      	ldr	r3, [pc, #408]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a65      	ldr	r2, [pc, #404]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 800414e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d013      	beq.n	8004184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415c:	f7fe f874 	bl	8002248 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004164:	f7fe f870 	bl	8002248 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	@ 0x64
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e207      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004176:	4b5b      	ldr	r3, [pc, #364]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCC_OscConfig+0xc0>
 8004182:	e014      	b.n	80041ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7fe f860 	bl	8002248 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800418c:	f7fe f85c 	bl	8002248 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b64      	cmp	r3, #100	@ 0x64
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e1f3      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800419e:	4b51      	ldr	r3, [pc, #324]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0xe8>
 80041aa:	e000      	b.n	80041ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d063      	beq.n	8004282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041ba:	4b4a      	ldr	r3, [pc, #296]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 030c 	and.w	r3, r3, #12
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00b      	beq.n	80041de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c6:	4b47      	ldr	r3, [pc, #284]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	d11c      	bne.n	800420c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041d2:	4b44      	ldr	r3, [pc, #272]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d116      	bne.n	800420c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041de:	4b41      	ldr	r3, [pc, #260]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d005      	beq.n	80041f6 <HAL_RCC_OscConfig+0x152>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d001      	beq.n	80041f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e1c7      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f6:	4b3b      	ldr	r3, [pc, #236]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4937      	ldr	r1, [pc, #220]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004206:	4313      	orrs	r3, r2
 8004208:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800420a:	e03a      	b.n	8004282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d020      	beq.n	8004256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004214:	4b34      	ldr	r3, [pc, #208]	@ (80042e8 <HAL_RCC_OscConfig+0x244>)
 8004216:	2201      	movs	r2, #1
 8004218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421a:	f7fe f815 	bl	8002248 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004222:	f7fe f811 	bl	8002248 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e1a8      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004234:	4b2b      	ldr	r3, [pc, #172]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0f0      	beq.n	8004222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004240:	4b28      	ldr	r3, [pc, #160]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	4925      	ldr	r1, [pc, #148]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004250:	4313      	orrs	r3, r2
 8004252:	600b      	str	r3, [r1, #0]
 8004254:	e015      	b.n	8004282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004256:	4b24      	ldr	r3, [pc, #144]	@ (80042e8 <HAL_RCC_OscConfig+0x244>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425c:	f7fd fff4 	bl	8002248 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004264:	f7fd fff0 	bl	8002248 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e187      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004276:	4b1b      	ldr	r3, [pc, #108]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d036      	beq.n	80042fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d016      	beq.n	80042c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004296:	4b15      	ldr	r3, [pc, #84]	@ (80042ec <HAL_RCC_OscConfig+0x248>)
 8004298:	2201      	movs	r2, #1
 800429a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429c:	f7fd ffd4 	bl	8002248 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a4:	f7fd ffd0 	bl	8002248 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e167      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b6:	4b0b      	ldr	r3, [pc, #44]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 80042b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0x200>
 80042c2:	e01b      	b.n	80042fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c4:	4b09      	ldr	r3, [pc, #36]	@ (80042ec <HAL_RCC_OscConfig+0x248>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ca:	f7fd ffbd 	bl	8002248 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d0:	e00e      	b.n	80042f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d2:	f7fd ffb9 	bl	8002248 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d907      	bls.n	80042f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e150      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
 80042e4:	40023800 	.word	0x40023800
 80042e8:	42470000 	.word	0x42470000
 80042ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f0:	4b88      	ldr	r3, [pc, #544]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 80042f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1ea      	bne.n	80042d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 8097 	beq.w	8004438 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800430a:	2300      	movs	r3, #0
 800430c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800430e:	4b81      	ldr	r3, [pc, #516]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10f      	bne.n	800433a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	4b7d      	ldr	r3, [pc, #500]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004322:	4a7c      	ldr	r2, [pc, #496]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 8004324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004328:	6413      	str	r3, [r2, #64]	@ 0x40
 800432a:	4b7a      	ldr	r3, [pc, #488]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004332:	60bb      	str	r3, [r7, #8]
 8004334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004336:	2301      	movs	r3, #1
 8004338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433a:	4b77      	ldr	r3, [pc, #476]	@ (8004518 <HAL_RCC_OscConfig+0x474>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004342:	2b00      	cmp	r3, #0
 8004344:	d118      	bne.n	8004378 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004346:	4b74      	ldr	r3, [pc, #464]	@ (8004518 <HAL_RCC_OscConfig+0x474>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a73      	ldr	r2, [pc, #460]	@ (8004518 <HAL_RCC_OscConfig+0x474>)
 800434c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004352:	f7fd ff79 	bl	8002248 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435a:	f7fd ff75 	bl	8002248 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e10c      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436c:	4b6a      	ldr	r3, [pc, #424]	@ (8004518 <HAL_RCC_OscConfig+0x474>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0f0      	beq.n	800435a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d106      	bne.n	800438e <HAL_RCC_OscConfig+0x2ea>
 8004380:	4b64      	ldr	r3, [pc, #400]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 8004382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004384:	4a63      	ldr	r2, [pc, #396]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	6713      	str	r3, [r2, #112]	@ 0x70
 800438c:	e01c      	b.n	80043c8 <HAL_RCC_OscConfig+0x324>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b05      	cmp	r3, #5
 8004394:	d10c      	bne.n	80043b0 <HAL_RCC_OscConfig+0x30c>
 8004396:	4b5f      	ldr	r3, [pc, #380]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439a:	4a5e      	ldr	r2, [pc, #376]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 800439c:	f043 0304 	orr.w	r3, r3, #4
 80043a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80043a2:	4b5c      	ldr	r3, [pc, #368]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a6:	4a5b      	ldr	r2, [pc, #364]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 80043a8:	f043 0301 	orr.w	r3, r3, #1
 80043ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ae:	e00b      	b.n	80043c8 <HAL_RCC_OscConfig+0x324>
 80043b0:	4b58      	ldr	r3, [pc, #352]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 80043b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b4:	4a57      	ldr	r2, [pc, #348]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 80043b6:	f023 0301 	bic.w	r3, r3, #1
 80043ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80043bc:	4b55      	ldr	r3, [pc, #340]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 80043be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c0:	4a54      	ldr	r2, [pc, #336]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 80043c2:	f023 0304 	bic.w	r3, r3, #4
 80043c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d015      	beq.n	80043fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d0:	f7fd ff3a 	bl	8002248 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d6:	e00a      	b.n	80043ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d8:	f7fd ff36 	bl	8002248 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e0cb      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ee:	4b49      	ldr	r3, [pc, #292]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0ee      	beq.n	80043d8 <HAL_RCC_OscConfig+0x334>
 80043fa:	e014      	b.n	8004426 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fc:	f7fd ff24 	bl	8002248 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004402:	e00a      	b.n	800441a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004404:	f7fd ff20 	bl	8002248 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e0b5      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800441a:	4b3e      	ldr	r3, [pc, #248]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1ee      	bne.n	8004404 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004426:	7dfb      	ldrb	r3, [r7, #23]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d105      	bne.n	8004438 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442c:	4b39      	ldr	r3, [pc, #228]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 800442e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004430:	4a38      	ldr	r2, [pc, #224]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 8004432:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004436:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 80a1 	beq.w	8004584 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004442:	4b34      	ldr	r3, [pc, #208]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	2b08      	cmp	r3, #8
 800444c:	d05c      	beq.n	8004508 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d141      	bne.n	80044da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004456:	4b31      	ldr	r3, [pc, #196]	@ (800451c <HAL_RCC_OscConfig+0x478>)
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445c:	f7fd fef4 	bl	8002248 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004464:	f7fd fef0 	bl	8002248 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e087      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004476:	4b27      	ldr	r3, [pc, #156]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f0      	bne.n	8004464 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69da      	ldr	r2, [r3, #28]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004490:	019b      	lsls	r3, r3, #6
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004498:	085b      	lsrs	r3, r3, #1
 800449a:	3b01      	subs	r3, #1
 800449c:	041b      	lsls	r3, r3, #16
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a4:	061b      	lsls	r3, r3, #24
 80044a6:	491b      	ldr	r1, [pc, #108]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ac:	4b1b      	ldr	r3, [pc, #108]	@ (800451c <HAL_RCC_OscConfig+0x478>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b2:	f7fd fec9 	bl	8002248 <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ba:	f7fd fec5 	bl	8002248 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e05c      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044cc:	4b11      	ldr	r3, [pc, #68]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f0      	beq.n	80044ba <HAL_RCC_OscConfig+0x416>
 80044d8:	e054      	b.n	8004584 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044da:	4b10      	ldr	r3, [pc, #64]	@ (800451c <HAL_RCC_OscConfig+0x478>)
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e0:	f7fd feb2 	bl	8002248 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e8:	f7fd feae 	bl	8002248 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e045      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fa:	4b06      	ldr	r3, [pc, #24]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f0      	bne.n	80044e8 <HAL_RCC_OscConfig+0x444>
 8004506:	e03d      	b.n	8004584 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d107      	bne.n	8004520 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e038      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
 8004514:	40023800 	.word	0x40023800
 8004518:	40007000 	.word	0x40007000
 800451c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004520:	4b1b      	ldr	r3, [pc, #108]	@ (8004590 <HAL_RCC_OscConfig+0x4ec>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d028      	beq.n	8004580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004538:	429a      	cmp	r2, r3
 800453a:	d121      	bne.n	8004580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004546:	429a      	cmp	r2, r3
 8004548:	d11a      	bne.n	8004580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004550:	4013      	ands	r3, r2
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004556:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004558:	4293      	cmp	r3, r2
 800455a:	d111      	bne.n	8004580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004566:	085b      	lsrs	r3, r3, #1
 8004568:	3b01      	subs	r3, #1
 800456a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800456c:	429a      	cmp	r2, r3
 800456e:	d107      	bne.n	8004580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800457c:	429a      	cmp	r2, r3
 800457e:	d001      	beq.n	8004584 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3718      	adds	r7, #24
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40023800 	.word	0x40023800

08004594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0cc      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045a8:	4b68      	ldr	r3, [pc, #416]	@ (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 030f 	and.w	r3, r3, #15
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d90c      	bls.n	80045d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b6:	4b65      	ldr	r3, [pc, #404]	@ (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045be:	4b63      	ldr	r3, [pc, #396]	@ (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d001      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0b8      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d020      	beq.n	800461e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045e8:	4b59      	ldr	r3, [pc, #356]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	4a58      	ldr	r2, [pc, #352]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80045f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004600:	4b53      	ldr	r3, [pc, #332]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	4a52      	ldr	r2, [pc, #328]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004606:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800460a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800460c:	4b50      	ldr	r3, [pc, #320]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	494d      	ldr	r1, [pc, #308]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	4313      	orrs	r3, r2
 800461c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d044      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d107      	bne.n	8004642 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004632:	4b47      	ldr	r3, [pc, #284]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d119      	bne.n	8004672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e07f      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2b02      	cmp	r3, #2
 8004648:	d003      	beq.n	8004652 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800464e:	2b03      	cmp	r3, #3
 8004650:	d107      	bne.n	8004662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004652:	4b3f      	ldr	r3, [pc, #252]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d109      	bne.n	8004672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e06f      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004662:	4b3b      	ldr	r3, [pc, #236]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e067      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004672:	4b37      	ldr	r3, [pc, #220]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f023 0203 	bic.w	r2, r3, #3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	4934      	ldr	r1, [pc, #208]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	4313      	orrs	r3, r2
 8004682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004684:	f7fd fde0 	bl	8002248 <HAL_GetTick>
 8004688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468a:	e00a      	b.n	80046a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800468c:	f7fd fddc 	bl	8002248 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800469a:	4293      	cmp	r3, r2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e04f      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a2:	4b2b      	ldr	r3, [pc, #172]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 020c 	and.w	r2, r3, #12
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d1eb      	bne.n	800468c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046b4:	4b25      	ldr	r3, [pc, #148]	@ (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d20c      	bcs.n	80046dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c2:	4b22      	ldr	r3, [pc, #136]	@ (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ca:	4b20      	ldr	r3, [pc, #128]	@ (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d001      	beq.n	80046dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e032      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d008      	beq.n	80046fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046e8:	4b19      	ldr	r3, [pc, #100]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	4916      	ldr	r1, [pc, #88]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d009      	beq.n	800471a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004706:	4b12      	ldr	r3, [pc, #72]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	490e      	ldr	r1, [pc, #56]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	4313      	orrs	r3, r2
 8004718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800471a:	f000 f821 	bl	8004760 <HAL_RCC_GetSysClockFreq>
 800471e:	4602      	mov	r2, r0
 8004720:	4b0b      	ldr	r3, [pc, #44]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	091b      	lsrs	r3, r3, #4
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	490a      	ldr	r1, [pc, #40]	@ (8004754 <HAL_RCC_ClockConfig+0x1c0>)
 800472c:	5ccb      	ldrb	r3, [r1, r3]
 800472e:	fa22 f303 	lsr.w	r3, r2, r3
 8004732:	4a09      	ldr	r2, [pc, #36]	@ (8004758 <HAL_RCC_ClockConfig+0x1c4>)
 8004734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004736:	4b09      	ldr	r3, [pc, #36]	@ (800475c <HAL_RCC_ClockConfig+0x1c8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f7fd fd40 	bl	80021c0 <HAL_InitTick>

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40023c00 	.word	0x40023c00
 8004750:	40023800 	.word	0x40023800
 8004754:	08006b30 	.word	0x08006b30
 8004758:	20000010 	.word	0x20000010
 800475c:	20000014 	.word	0x20000014

08004760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004764:	b094      	sub	sp, #80	@ 0x50
 8004766:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004778:	4b79      	ldr	r3, [pc, #484]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x200>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 030c 	and.w	r3, r3, #12
 8004780:	2b08      	cmp	r3, #8
 8004782:	d00d      	beq.n	80047a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004784:	2b08      	cmp	r3, #8
 8004786:	f200 80e1 	bhi.w	800494c <HAL_RCC_GetSysClockFreq+0x1ec>
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <HAL_RCC_GetSysClockFreq+0x34>
 800478e:	2b04      	cmp	r3, #4
 8004790:	d003      	beq.n	800479a <HAL_RCC_GetSysClockFreq+0x3a>
 8004792:	e0db      	b.n	800494c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004794:	4b73      	ldr	r3, [pc, #460]	@ (8004964 <HAL_RCC_GetSysClockFreq+0x204>)
 8004796:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004798:	e0db      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800479a:	4b73      	ldr	r3, [pc, #460]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x208>)
 800479c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800479e:	e0d8      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047a0:	4b6f      	ldr	r3, [pc, #444]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x200>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047aa:	4b6d      	ldr	r3, [pc, #436]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x200>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d063      	beq.n	800487e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047b6:	4b6a      	ldr	r3, [pc, #424]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x200>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	099b      	lsrs	r3, r3, #6
 80047bc:	2200      	movs	r2, #0
 80047be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80047c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80047ca:	2300      	movs	r3, #0
 80047cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80047d2:	4622      	mov	r2, r4
 80047d4:	462b      	mov	r3, r5
 80047d6:	f04f 0000 	mov.w	r0, #0
 80047da:	f04f 0100 	mov.w	r1, #0
 80047de:	0159      	lsls	r1, r3, #5
 80047e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047e4:	0150      	lsls	r0, r2, #5
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4621      	mov	r1, r4
 80047ec:	1a51      	subs	r1, r2, r1
 80047ee:	6139      	str	r1, [r7, #16]
 80047f0:	4629      	mov	r1, r5
 80047f2:	eb63 0301 	sbc.w	r3, r3, r1
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004804:	4659      	mov	r1, fp
 8004806:	018b      	lsls	r3, r1, #6
 8004808:	4651      	mov	r1, sl
 800480a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800480e:	4651      	mov	r1, sl
 8004810:	018a      	lsls	r2, r1, #6
 8004812:	4651      	mov	r1, sl
 8004814:	ebb2 0801 	subs.w	r8, r2, r1
 8004818:	4659      	mov	r1, fp
 800481a:	eb63 0901 	sbc.w	r9, r3, r1
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800482a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800482e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004832:	4690      	mov	r8, r2
 8004834:	4699      	mov	r9, r3
 8004836:	4623      	mov	r3, r4
 8004838:	eb18 0303 	adds.w	r3, r8, r3
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	462b      	mov	r3, r5
 8004840:	eb49 0303 	adc.w	r3, r9, r3
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	f04f 0200 	mov.w	r2, #0
 800484a:	f04f 0300 	mov.w	r3, #0
 800484e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004852:	4629      	mov	r1, r5
 8004854:	024b      	lsls	r3, r1, #9
 8004856:	4621      	mov	r1, r4
 8004858:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800485c:	4621      	mov	r1, r4
 800485e:	024a      	lsls	r2, r1, #9
 8004860:	4610      	mov	r0, r2
 8004862:	4619      	mov	r1, r3
 8004864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004866:	2200      	movs	r2, #0
 8004868:	62bb      	str	r3, [r7, #40]	@ 0x28
 800486a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800486c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004870:	f7fb fcbc 	bl	80001ec <__aeabi_uldivmod>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4613      	mov	r3, r2
 800487a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800487c:	e058      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800487e:	4b38      	ldr	r3, [pc, #224]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x200>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	099b      	lsrs	r3, r3, #6
 8004884:	2200      	movs	r2, #0
 8004886:	4618      	mov	r0, r3
 8004888:	4611      	mov	r1, r2
 800488a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800488e:	623b      	str	r3, [r7, #32]
 8004890:	2300      	movs	r3, #0
 8004892:	627b      	str	r3, [r7, #36]	@ 0x24
 8004894:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004898:	4642      	mov	r2, r8
 800489a:	464b      	mov	r3, r9
 800489c:	f04f 0000 	mov.w	r0, #0
 80048a0:	f04f 0100 	mov.w	r1, #0
 80048a4:	0159      	lsls	r1, r3, #5
 80048a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048aa:	0150      	lsls	r0, r2, #5
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4641      	mov	r1, r8
 80048b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80048b6:	4649      	mov	r1, r9
 80048b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80048bc:	f04f 0200 	mov.w	r2, #0
 80048c0:	f04f 0300 	mov.w	r3, #0
 80048c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048d0:	ebb2 040a 	subs.w	r4, r2, sl
 80048d4:	eb63 050b 	sbc.w	r5, r3, fp
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	00eb      	lsls	r3, r5, #3
 80048e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048e6:	00e2      	lsls	r2, r4, #3
 80048e8:	4614      	mov	r4, r2
 80048ea:	461d      	mov	r5, r3
 80048ec:	4643      	mov	r3, r8
 80048ee:	18e3      	adds	r3, r4, r3
 80048f0:	603b      	str	r3, [r7, #0]
 80048f2:	464b      	mov	r3, r9
 80048f4:	eb45 0303 	adc.w	r3, r5, r3
 80048f8:	607b      	str	r3, [r7, #4]
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004906:	4629      	mov	r1, r5
 8004908:	028b      	lsls	r3, r1, #10
 800490a:	4621      	mov	r1, r4
 800490c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004910:	4621      	mov	r1, r4
 8004912:	028a      	lsls	r2, r1, #10
 8004914:	4610      	mov	r0, r2
 8004916:	4619      	mov	r1, r3
 8004918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800491a:	2200      	movs	r2, #0
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	61fa      	str	r2, [r7, #28]
 8004920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004924:	f7fb fc62 	bl	80001ec <__aeabi_uldivmod>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4613      	mov	r3, r2
 800492e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004930:	4b0b      	ldr	r3, [pc, #44]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x200>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	0c1b      	lsrs	r3, r3, #16
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	3301      	adds	r3, #1
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004940:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004944:	fbb2 f3f3 	udiv	r3, r2, r3
 8004948:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800494a:	e002      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800494c:	4b05      	ldr	r3, [pc, #20]	@ (8004964 <HAL_RCC_GetSysClockFreq+0x204>)
 800494e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004954:	4618      	mov	r0, r3
 8004956:	3750      	adds	r7, #80	@ 0x50
 8004958:	46bd      	mov	sp, r7
 800495a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800495e:	bf00      	nop
 8004960:	40023800 	.word	0x40023800
 8004964:	00f42400 	.word	0x00f42400
 8004968:	007a1200 	.word	0x007a1200

0800496c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004970:	4b03      	ldr	r3, [pc, #12]	@ (8004980 <HAL_RCC_GetHCLKFreq+0x14>)
 8004972:	681b      	ldr	r3, [r3, #0]
}
 8004974:	4618      	mov	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	20000010 	.word	0x20000010

08004984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004988:	f7ff fff0 	bl	800496c <HAL_RCC_GetHCLKFreq>
 800498c:	4602      	mov	r2, r0
 800498e:	4b05      	ldr	r3, [pc, #20]	@ (80049a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	0a9b      	lsrs	r3, r3, #10
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	4903      	ldr	r1, [pc, #12]	@ (80049a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800499a:	5ccb      	ldrb	r3, [r1, r3]
 800499c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40023800 	.word	0x40023800
 80049a8:	08006b40 	.word	0x08006b40

080049ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10b      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d105      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d075      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049e0:	4b91      	ldr	r3, [pc, #580]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049e6:	f7fd fc2f 	bl	8002248 <HAL_GetTick>
 80049ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049ec:	e008      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049ee:	f7fd fc2b 	bl	8002248 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e189      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a00:	4b8a      	ldr	r3, [pc, #552]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1f0      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d009      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	019a      	lsls	r2, r3, #6
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	071b      	lsls	r3, r3, #28
 8004a24:	4981      	ldr	r1, [pc, #516]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d01f      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a38:	4b7c      	ldr	r3, [pc, #496]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a3e:	0f1b      	lsrs	r3, r3, #28
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	019a      	lsls	r2, r3, #6
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	061b      	lsls	r3, r3, #24
 8004a52:	431a      	orrs	r2, r3
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	071b      	lsls	r3, r3, #28
 8004a58:	4974      	ldr	r1, [pc, #464]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a60:	4b72      	ldr	r3, [pc, #456]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a66:	f023 021f 	bic.w	r2, r3, #31
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	496e      	ldr	r1, [pc, #440]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00d      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	019a      	lsls	r2, r3, #6
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	061b      	lsls	r3, r3, #24
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	071b      	lsls	r3, r3, #28
 8004a98:	4964      	ldr	r1, [pc, #400]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004aa0:	4b61      	ldr	r3, [pc, #388]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004aa6:	f7fd fbcf 	bl	8002248 <HAL_GetTick>
 8004aaa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004aae:	f7fd fbcb 	bl	8002248 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e129      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ac0:	4b5a      	ldr	r3, [pc, #360]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0f0      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d105      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d079      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ae4:	4b52      	ldr	r3, [pc, #328]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004aea:	f7fd fbad 	bl	8002248 <HAL_GetTick>
 8004aee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004af0:	e008      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004af2:	f7fd fba9 	bl	8002248 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e107      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b04:	4b49      	ldr	r3, [pc, #292]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b10:	d0ef      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0304 	and.w	r3, r3, #4
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d020      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b1e:	4b43      	ldr	r3, [pc, #268]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b24:	0f1b      	lsrs	r3, r3, #28
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	019a      	lsls	r2, r3, #6
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	061b      	lsls	r3, r3, #24
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	071b      	lsls	r3, r3, #28
 8004b3e:	493b      	ldr	r1, [pc, #236]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b46:	4b39      	ldr	r3, [pc, #228]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b4c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	4934      	ldr	r1, [pc, #208]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d01e      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b6c:	4b2f      	ldr	r3, [pc, #188]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b72:	0e1b      	lsrs	r3, r3, #24
 8004b74:	f003 030f 	and.w	r3, r3, #15
 8004b78:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	019a      	lsls	r2, r3, #6
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	061b      	lsls	r3, r3, #24
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	071b      	lsls	r3, r3, #28
 8004b8c:	4927      	ldr	r1, [pc, #156]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b94:	4b25      	ldr	r3, [pc, #148]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b9a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba2:	4922      	ldr	r1, [pc, #136]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004baa:	4b21      	ldr	r3, [pc, #132]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004bac:	2201      	movs	r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bb0:	f7fd fb4a 	bl	8002248 <HAL_GetTick>
 8004bb4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bb6:	e008      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bb8:	f7fd fb46 	bl	8002248 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e0a4      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bca:	4b18      	ldr	r3, [pc, #96]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bd6:	d1ef      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0320 	and.w	r3, r3, #32
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 808b 	beq.w	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	4b10      	ldr	r3, [pc, #64]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bee:	4a0f      	ldr	r2, [pc, #60]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c02:	4b0c      	ldr	r3, [pc, #48]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a0b      	ldr	r2, [pc, #44]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c0e:	f7fd fb1b 	bl	8002248 <HAL_GetTick>
 8004c12:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004c14:	e010      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c16:	f7fd fb17 	bl	8002248 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d909      	bls.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e075      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004c28:	42470068 	.word	0x42470068
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	42470070 	.word	0x42470070
 8004c34:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004c38:	4b38      	ldr	r3, [pc, #224]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0e8      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c44:	4b36      	ldr	r3, [pc, #216]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c4c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d02f      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d028      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c62:	4b2f      	ldr	r3, [pc, #188]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c6a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004c6e:	2201      	movs	r2, #1
 8004c70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c72:	4b2c      	ldr	r3, [pc, #176]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c78:	4a29      	ldr	r2, [pc, #164]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c7e:	4b28      	ldr	r3, [pc, #160]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d114      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c8a:	f7fd fadd 	bl	8002248 <HAL_GetTick>
 8004c8e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c90:	e00a      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c92:	f7fd fad9 	bl	8002248 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e035      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0ee      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cc0:	d10d      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004cc2:	4b17      	ldr	r3, [pc, #92]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cce:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004cd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cd6:	4912      	ldr	r1, [pc, #72]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	608b      	str	r3, [r1, #8]
 8004cdc:	e005      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004cde:	4b10      	ldr	r3, [pc, #64]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	4a0f      	ldr	r2, [pc, #60]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ce4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004ce8:	6093      	str	r3, [r2, #8]
 8004cea:	4b0d      	ldr	r3, [pc, #52]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf6:	490a      	ldr	r1, [pc, #40]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d004      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004d0e:	4b06      	ldr	r3, [pc, #24]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004d10:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40007000 	.word	0x40007000
 8004d20:	40023800 	.word	0x40023800
 8004d24:	42470e40 	.word	0x42470e40
 8004d28:	424711e0 	.word	0x424711e0

08004d2c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e01c      	b.n	8004d78 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	795b      	ldrb	r3, [r3, #5]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d105      	bne.n	8004d54 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fc ff2c 	bl	8001bac <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f042 0204 	orr.w	r2, r2, #4
 8004d68:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e07b      	b.n	8004e8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d108      	bne.n	8004dac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004da2:	d009      	beq.n	8004db8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	61da      	str	r2, [r3, #28]
 8004daa:	e005      	b.n	8004db8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7fc ff0c 	bl	8001bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e00:	431a      	orrs	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e3c:	ea42 0103 	orr.w	r1, r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e44:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	0c1b      	lsrs	r3, r3, #16
 8004e56:	f003 0104 	and.w	r1, r3, #4
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5e:	f003 0210 	and.w	r2, r3, #16
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69da      	ldr	r2, [r3, #28]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e01a      	b.n	8004eda <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eba:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7fc fedf 	bl	8001c80 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b088      	sub	sp, #32
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	60f8      	str	r0, [r7, #12]
 8004eea:	60b9      	str	r1, [r7, #8]
 8004eec:	603b      	str	r3, [r7, #0]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ef2:	f7fd f9a9 	bl	8002248 <HAL_GetTick>
 8004ef6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004ef8:	88fb      	ldrh	r3, [r7, #6]
 8004efa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d001      	beq.n	8004f0c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e12a      	b.n	8005162 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <HAL_SPI_Transmit+0x36>
 8004f12:	88fb      	ldrh	r3, [r7, #6]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e122      	b.n	8005162 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_SPI_Transmit+0x48>
 8004f26:	2302      	movs	r3, #2
 8004f28:	e11b      	b.n	8005162 <HAL_SPI_Transmit+0x280>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2203      	movs	r2, #3
 8004f36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	88fa      	ldrh	r2, [r7, #6]
 8004f4a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	88fa      	ldrh	r2, [r7, #6]
 8004f50:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f78:	d10f      	bne.n	8004f9a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa4:	2b40      	cmp	r3, #64	@ 0x40
 8004fa6:	d007      	beq.n	8004fb8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fc0:	d152      	bne.n	8005068 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <HAL_SPI_Transmit+0xee>
 8004fca:	8b7b      	ldrh	r3, [r7, #26]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d145      	bne.n	800505c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd4:	881a      	ldrh	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe0:	1c9a      	adds	r2, r3, #2
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ff4:	e032      	b.n	800505c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b02      	cmp	r3, #2
 8005002:	d112      	bne.n	800502a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005008:	881a      	ldrh	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005014:	1c9a      	adds	r2, r3, #2
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b01      	subs	r3, #1
 8005022:	b29a      	uxth	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005028:	e018      	b.n	800505c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800502a:	f7fd f90d 	bl	8002248 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d803      	bhi.n	8005042 <HAL_SPI_Transmit+0x160>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005040:	d102      	bne.n	8005048 <HAL_SPI_Transmit+0x166>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d109      	bne.n	800505c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e082      	b.n	8005162 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1c7      	bne.n	8004ff6 <HAL_SPI_Transmit+0x114>
 8005066:	e053      	b.n	8005110 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <HAL_SPI_Transmit+0x194>
 8005070:	8b7b      	ldrh	r3, [r7, #26]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d147      	bne.n	8005106 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	330c      	adds	r3, #12
 8005080:	7812      	ldrb	r2, [r2, #0]
 8005082:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005092:	b29b      	uxth	r3, r3
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800509c:	e033      	b.n	8005106 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d113      	bne.n	80050d4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	330c      	adds	r3, #12
 80050b6:	7812      	ldrb	r2, [r2, #0]
 80050b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80050d2:	e018      	b.n	8005106 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050d4:	f7fd f8b8 	bl	8002248 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d803      	bhi.n	80050ec <HAL_SPI_Transmit+0x20a>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050ea:	d102      	bne.n	80050f2 <HAL_SPI_Transmit+0x210>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d109      	bne.n	8005106 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e02d      	b.n	8005162 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800510a:	b29b      	uxth	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1c6      	bne.n	800509e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	6839      	ldr	r1, [r7, #0]
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 f8bf 	bl	8005298 <SPI_EndRxTxTransaction>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10a      	bne.n	8005144 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800512e:	2300      	movs	r3, #0
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	617b      	str	r3, [r7, #20]
 8005142:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e000      	b.n	8005162 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005160:	2300      	movs	r3, #0
  }
}
 8005162:	4618      	mov	r0, r3
 8005164:	3720      	adds	r7, #32
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005178:	b2db      	uxtb	r3, r3
}
 800517a:	4618      	mov	r0, r3
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
	...

08005188 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b088      	sub	sp, #32
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	4613      	mov	r3, r2
 8005196:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005198:	f7fd f856 	bl	8002248 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a0:	1a9b      	subs	r3, r3, r2
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	4413      	add	r3, r2
 80051a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051a8:	f7fd f84e 	bl	8002248 <HAL_GetTick>
 80051ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051ae:	4b39      	ldr	r3, [pc, #228]	@ (8005294 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	015b      	lsls	r3, r3, #5
 80051b4:	0d1b      	lsrs	r3, r3, #20
 80051b6:	69fa      	ldr	r2, [r7, #28]
 80051b8:	fb02 f303 	mul.w	r3, r2, r3
 80051bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051be:	e054      	b.n	800526a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051c6:	d050      	beq.n	800526a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051c8:	f7fd f83e 	bl	8002248 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d902      	bls.n	80051de <SPI_WaitFlagStateUntilTimeout+0x56>
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d13d      	bne.n	800525a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80051ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051f6:	d111      	bne.n	800521c <SPI_WaitFlagStateUntilTimeout+0x94>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005200:	d004      	beq.n	800520c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800520a:	d107      	bne.n	800521c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800521a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005220:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005224:	d10f      	bne.n	8005246 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005244:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e017      	b.n	800528a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	3b01      	subs	r3, #1
 8005268:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4013      	ands	r3, r2
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	429a      	cmp	r2, r3
 8005278:	bf0c      	ite	eq
 800527a:	2301      	moveq	r3, #1
 800527c:	2300      	movne	r3, #0
 800527e:	b2db      	uxtb	r3, r3
 8005280:	461a      	mov	r2, r3
 8005282:	79fb      	ldrb	r3, [r7, #7]
 8005284:	429a      	cmp	r2, r3
 8005286:	d19b      	bne.n	80051c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20000010 	.word	0x20000010

08005298 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af02      	add	r7, sp, #8
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2201      	movs	r2, #1
 80052ac:	2102      	movs	r1, #2
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f7ff ff6a 	bl	8005188 <SPI_WaitFlagStateUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d007      	beq.n	80052ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052be:	f043 0220 	orr.w	r2, r3, #32
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e032      	b.n	8005330 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005338 <SPI_EndRxTxTransaction+0xa0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a1b      	ldr	r2, [pc, #108]	@ (800533c <SPI_EndRxTxTransaction+0xa4>)
 80052d0:	fba2 2303 	umull	r2, r3, r2, r3
 80052d4:	0d5b      	lsrs	r3, r3, #21
 80052d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80052da:	fb02 f303 	mul.w	r3, r2, r3
 80052de:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052e8:	d112      	bne.n	8005310 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2200      	movs	r2, #0
 80052f2:	2180      	movs	r1, #128	@ 0x80
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f7ff ff47 	bl	8005188 <SPI_WaitFlagStateUntilTimeout>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d016      	beq.n	800532e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005304:	f043 0220 	orr.w	r2, r3, #32
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e00f      	b.n	8005330 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	3b01      	subs	r3, #1
 800531a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005326:	2b80      	cmp	r3, #128	@ 0x80
 8005328:	d0f2      	beq.n	8005310 <SPI_EndRxTxTransaction+0x78>
 800532a:	e000      	b.n	800532e <SPI_EndRxTxTransaction+0x96>
        break;
 800532c:	bf00      	nop
  }

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3718      	adds	r7, #24
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	20000010 	.word	0x20000010
 800533c:	165e9f81 	.word	0x165e9f81

08005340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e041      	b.n	80053d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fc fca8 	bl	8001cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3304      	adds	r3, #4
 800537c:	4619      	mov	r1, r3
 800537e:	4610      	mov	r0, r2
 8005380:	f000 f8f4 	bl	800556c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b084      	sub	sp, #16
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d101      	bne.n	80053fa <HAL_TIM_ConfigClockSource+0x1c>
 80053f6:	2302      	movs	r3, #2
 80053f8:	e0b4      	b.n	8005564 <HAL_TIM_ConfigClockSource+0x186>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2202      	movs	r2, #2
 8005406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005418:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005420:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005432:	d03e      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0xd4>
 8005434:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005438:	f200 8087 	bhi.w	800554a <HAL_TIM_ConfigClockSource+0x16c>
 800543c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005440:	f000 8086 	beq.w	8005550 <HAL_TIM_ConfigClockSource+0x172>
 8005444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005448:	d87f      	bhi.n	800554a <HAL_TIM_ConfigClockSource+0x16c>
 800544a:	2b70      	cmp	r3, #112	@ 0x70
 800544c:	d01a      	beq.n	8005484 <HAL_TIM_ConfigClockSource+0xa6>
 800544e:	2b70      	cmp	r3, #112	@ 0x70
 8005450:	d87b      	bhi.n	800554a <HAL_TIM_ConfigClockSource+0x16c>
 8005452:	2b60      	cmp	r3, #96	@ 0x60
 8005454:	d050      	beq.n	80054f8 <HAL_TIM_ConfigClockSource+0x11a>
 8005456:	2b60      	cmp	r3, #96	@ 0x60
 8005458:	d877      	bhi.n	800554a <HAL_TIM_ConfigClockSource+0x16c>
 800545a:	2b50      	cmp	r3, #80	@ 0x50
 800545c:	d03c      	beq.n	80054d8 <HAL_TIM_ConfigClockSource+0xfa>
 800545e:	2b50      	cmp	r3, #80	@ 0x50
 8005460:	d873      	bhi.n	800554a <HAL_TIM_ConfigClockSource+0x16c>
 8005462:	2b40      	cmp	r3, #64	@ 0x40
 8005464:	d058      	beq.n	8005518 <HAL_TIM_ConfigClockSource+0x13a>
 8005466:	2b40      	cmp	r3, #64	@ 0x40
 8005468:	d86f      	bhi.n	800554a <HAL_TIM_ConfigClockSource+0x16c>
 800546a:	2b30      	cmp	r3, #48	@ 0x30
 800546c:	d064      	beq.n	8005538 <HAL_TIM_ConfigClockSource+0x15a>
 800546e:	2b30      	cmp	r3, #48	@ 0x30
 8005470:	d86b      	bhi.n	800554a <HAL_TIM_ConfigClockSource+0x16c>
 8005472:	2b20      	cmp	r3, #32
 8005474:	d060      	beq.n	8005538 <HAL_TIM_ConfigClockSource+0x15a>
 8005476:	2b20      	cmp	r3, #32
 8005478:	d867      	bhi.n	800554a <HAL_TIM_ConfigClockSource+0x16c>
 800547a:	2b00      	cmp	r3, #0
 800547c:	d05c      	beq.n	8005538 <HAL_TIM_ConfigClockSource+0x15a>
 800547e:	2b10      	cmp	r3, #16
 8005480:	d05a      	beq.n	8005538 <HAL_TIM_ConfigClockSource+0x15a>
 8005482:	e062      	b.n	800554a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005494:	f000 f990 	bl	80057b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054a6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	609a      	str	r2, [r3, #8]
      break;
 80054b0:	e04f      	b.n	8005552 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054c2:	f000 f979 	bl	80057b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054d4:	609a      	str	r2, [r3, #8]
      break;
 80054d6:	e03c      	b.n	8005552 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054e4:	461a      	mov	r2, r3
 80054e6:	f000 f8ed 	bl	80056c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2150      	movs	r1, #80	@ 0x50
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 f946 	bl	8005782 <TIM_ITRx_SetConfig>
      break;
 80054f6:	e02c      	b.n	8005552 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005504:	461a      	mov	r2, r3
 8005506:	f000 f90c 	bl	8005722 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2160      	movs	r1, #96	@ 0x60
 8005510:	4618      	mov	r0, r3
 8005512:	f000 f936 	bl	8005782 <TIM_ITRx_SetConfig>
      break;
 8005516:	e01c      	b.n	8005552 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005524:	461a      	mov	r2, r3
 8005526:	f000 f8cd 	bl	80056c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2140      	movs	r1, #64	@ 0x40
 8005530:	4618      	mov	r0, r3
 8005532:	f000 f926 	bl	8005782 <TIM_ITRx_SetConfig>
      break;
 8005536:	e00c      	b.n	8005552 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4619      	mov	r1, r3
 8005542:	4610      	mov	r0, r2
 8005544:	f000 f91d 	bl	8005782 <TIM_ITRx_SetConfig>
      break;
 8005548:	e003      	b.n	8005552 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	73fb      	strb	r3, [r7, #15]
      break;
 800554e:	e000      	b.n	8005552 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005550:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005562:	7bfb      	ldrb	r3, [r7, #15]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a46      	ldr	r2, [pc, #280]	@ (8005698 <TIM_Base_SetConfig+0x12c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d013      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800558a:	d00f      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a43      	ldr	r2, [pc, #268]	@ (800569c <TIM_Base_SetConfig+0x130>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00b      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a42      	ldr	r2, [pc, #264]	@ (80056a0 <TIM_Base_SetConfig+0x134>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d007      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a41      	ldr	r2, [pc, #260]	@ (80056a4 <TIM_Base_SetConfig+0x138>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d003      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a40      	ldr	r2, [pc, #256]	@ (80056a8 <TIM_Base_SetConfig+0x13c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d108      	bne.n	80055be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a35      	ldr	r2, [pc, #212]	@ (8005698 <TIM_Base_SetConfig+0x12c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d02b      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055cc:	d027      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a32      	ldr	r2, [pc, #200]	@ (800569c <TIM_Base_SetConfig+0x130>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d023      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a31      	ldr	r2, [pc, #196]	@ (80056a0 <TIM_Base_SetConfig+0x134>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d01f      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a30      	ldr	r2, [pc, #192]	@ (80056a4 <TIM_Base_SetConfig+0x138>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d01b      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a2f      	ldr	r2, [pc, #188]	@ (80056a8 <TIM_Base_SetConfig+0x13c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d017      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a2e      	ldr	r2, [pc, #184]	@ (80056ac <TIM_Base_SetConfig+0x140>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d013      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a2d      	ldr	r2, [pc, #180]	@ (80056b0 <TIM_Base_SetConfig+0x144>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00f      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a2c      	ldr	r2, [pc, #176]	@ (80056b4 <TIM_Base_SetConfig+0x148>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00b      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a2b      	ldr	r2, [pc, #172]	@ (80056b8 <TIM_Base_SetConfig+0x14c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d007      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a2a      	ldr	r2, [pc, #168]	@ (80056bc <TIM_Base_SetConfig+0x150>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d003      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a29      	ldr	r2, [pc, #164]	@ (80056c0 <TIM_Base_SetConfig+0x154>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d108      	bne.n	8005630 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	4313      	orrs	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a10      	ldr	r2, [pc, #64]	@ (8005698 <TIM_Base_SetConfig+0x12c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d003      	beq.n	8005664 <TIM_Base_SetConfig+0xf8>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a12      	ldr	r2, [pc, #72]	@ (80056a8 <TIM_Base_SetConfig+0x13c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d103      	bne.n	800566c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b01      	cmp	r3, #1
 800567c:	d105      	bne.n	800568a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f023 0201 	bic.w	r2, r3, #1
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	611a      	str	r2, [r3, #16]
  }
}
 800568a:	bf00      	nop
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	40010000 	.word	0x40010000
 800569c:	40000400 	.word	0x40000400
 80056a0:	40000800 	.word	0x40000800
 80056a4:	40000c00 	.word	0x40000c00
 80056a8:	40010400 	.word	0x40010400
 80056ac:	40014000 	.word	0x40014000
 80056b0:	40014400 	.word	0x40014400
 80056b4:	40014800 	.word	0x40014800
 80056b8:	40001800 	.word	0x40001800
 80056bc:	40001c00 	.word	0x40001c00
 80056c0:	40002000 	.word	0x40002000

080056c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	f023 0201 	bic.w	r2, r3, #1
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f023 030a 	bic.w	r3, r3, #10
 8005700:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	4313      	orrs	r3, r2
 8005708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	621a      	str	r2, [r3, #32]
}
 8005716:	bf00      	nop
 8005718:	371c      	adds	r7, #28
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005722:	b480      	push	{r7}
 8005724:	b087      	sub	sp, #28
 8005726:	af00      	add	r7, sp, #0
 8005728:	60f8      	str	r0, [r7, #12]
 800572a:	60b9      	str	r1, [r7, #8]
 800572c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	f023 0210 	bic.w	r2, r3, #16
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800574c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	031b      	lsls	r3, r3, #12
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800575e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	4313      	orrs	r3, r2
 8005768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	621a      	str	r2, [r3, #32]
}
 8005776:	bf00      	nop
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005782:	b480      	push	{r7}
 8005784:	b085      	sub	sp, #20
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005798:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	f043 0307 	orr.w	r3, r3, #7
 80057a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	609a      	str	r2, [r3, #8]
}
 80057ac:	bf00      	nop
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	021a      	lsls	r2, r3, #8
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	431a      	orrs	r2, r3
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4313      	orrs	r3, r2
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	609a      	str	r2, [r3, #8]
}
 80057ec:	bf00      	nop
 80057ee:	371c      	adds	r7, #28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005808:	2b01      	cmp	r3, #1
 800580a:	d101      	bne.n	8005810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800580c:	2302      	movs	r3, #2
 800580e:	e05a      	b.n	80058c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005836:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a21      	ldr	r2, [pc, #132]	@ (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d022      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800585c:	d01d      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a1d      	ldr	r2, [pc, #116]	@ (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d018      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a1b      	ldr	r2, [pc, #108]	@ (80058dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d013      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a1a      	ldr	r2, [pc, #104]	@ (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d00e      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a18      	ldr	r2, [pc, #96]	@ (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d009      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a17      	ldr	r2, [pc, #92]	@ (80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d004      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a15      	ldr	r2, [pc, #84]	@ (80058ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d10c      	bne.n	80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40010000 	.word	0x40010000
 80058d8:	40000400 	.word	0x40000400
 80058dc:	40000800 	.word	0x40000800
 80058e0:	40000c00 	.word	0x40000c00
 80058e4:	40010400 	.word	0x40010400
 80058e8:	40014000 	.word	0x40014000
 80058ec:	40001800 	.word	0x40001800

080058f0 <memset>:
 80058f0:	4402      	add	r2, r0
 80058f2:	4603      	mov	r3, r0
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d100      	bne.n	80058fa <memset+0xa>
 80058f8:	4770      	bx	lr
 80058fa:	f803 1b01 	strb.w	r1, [r3], #1
 80058fe:	e7f9      	b.n	80058f4 <memset+0x4>

08005900 <__libc_init_array>:
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	4d0d      	ldr	r5, [pc, #52]	@ (8005938 <__libc_init_array+0x38>)
 8005904:	4c0d      	ldr	r4, [pc, #52]	@ (800593c <__libc_init_array+0x3c>)
 8005906:	1b64      	subs	r4, r4, r5
 8005908:	10a4      	asrs	r4, r4, #2
 800590a:	2600      	movs	r6, #0
 800590c:	42a6      	cmp	r6, r4
 800590e:	d109      	bne.n	8005924 <__libc_init_array+0x24>
 8005910:	4d0b      	ldr	r5, [pc, #44]	@ (8005940 <__libc_init_array+0x40>)
 8005912:	4c0c      	ldr	r4, [pc, #48]	@ (8005944 <__libc_init_array+0x44>)
 8005914:	f000 f818 	bl	8005948 <_init>
 8005918:	1b64      	subs	r4, r4, r5
 800591a:	10a4      	asrs	r4, r4, #2
 800591c:	2600      	movs	r6, #0
 800591e:	42a6      	cmp	r6, r4
 8005920:	d105      	bne.n	800592e <__libc_init_array+0x2e>
 8005922:	bd70      	pop	{r4, r5, r6, pc}
 8005924:	f855 3b04 	ldr.w	r3, [r5], #4
 8005928:	4798      	blx	r3
 800592a:	3601      	adds	r6, #1
 800592c:	e7ee      	b.n	800590c <__libc_init_array+0xc>
 800592e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005932:	4798      	blx	r3
 8005934:	3601      	adds	r6, #1
 8005936:	e7f2      	b.n	800591e <__libc_init_array+0x1e>
 8005938:	08006b50 	.word	0x08006b50
 800593c:	08006b50 	.word	0x08006b50
 8005940:	08006b50 	.word	0x08006b50
 8005944:	08006b54 	.word	0x08006b54

08005948 <_init>:
 8005948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594a:	bf00      	nop
 800594c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594e:	bc08      	pop	{r3}
 8005950:	469e      	mov	lr, r3
 8005952:	4770      	bx	lr

08005954 <_fini>:
 8005954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005956:	bf00      	nop
 8005958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800595a:	bc08      	pop	{r3}
 800595c:	469e      	mov	lr, r3
 800595e:	4770      	bx	lr
