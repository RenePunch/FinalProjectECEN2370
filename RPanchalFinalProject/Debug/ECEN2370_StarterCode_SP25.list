
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a54  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b70  08007c04  08007c04  00008c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009774  08009774  0000b088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009774  08009774  0000a774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800977c  0800977c  0000b088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800977c  0800977c  0000a77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009780  08009780  0000a780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08009784  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b088  2**0
                  CONTENTS
 10 .bss          00025da0  20000088  20000088  0000b088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025e28  20025e28  0000b088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013261  00000000  00000000  0000b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003036  00000000  00000000  0001e319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001358  00000000  00000000  00021350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f03  00000000  00000000  000226a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000267ff  00000000  00000000  000235ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001762c  00000000  00000000  00049daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e11f3  00000000  00000000  000613d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001425c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b80  00000000  00000000  0014260c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a3  00000000  00000000  0014818c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007bec 	.word	0x08007bec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08007bec 	.word	0x08007bec

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80005d0:	f006 fc00 	bl	8006dd4 <initialise_monitor_handles>
    LTCD__Init();
 80005d4:	f000 fec4 	bl	8001360 <LTCD__Init>
    LTCD_Layer_Init(0);
 80005d8:	2000      	movs	r0, #0
 80005da:	f000 fe81 	bl	80012e0 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80005de:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 ff8c 	bl	8001500 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005e8:	f001 f862 	bl	80016b0 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005ec:	4b02      	ldr	r3, [pc, #8]	@ (80005f8 <ApplicationInit+0x2c>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	200000a4 	.word	0x200000a4

080005fc <ApplicationFirstScreen>:
void ApplicationFirstScreen(){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	firstScreen();
 8000600:	f000 f858 	bl	80006b4 <firstScreen>
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}

08000608 <ApplicationEndScreen>:

void ApplicationEndScreen(char winner)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
    endScreen(winner);
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	4618      	mov	r0, r3
 8000616:	f000 f8f1 	bl	80007fc <endScreen>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <LCD_Touch_Polling_Demo>:
// 	visualDemo();
// }

#if COMPILE_TOUCH_FUNCTIONS == 1
void LCD_Touch_Polling_Demo(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 
    ApplicationFirstScreen();
 800062a:	f7ff ffe7 	bl	80005fc <ApplicationFirstScreen>

    while (1)
    {

        if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed)
 800062e:	4820      	ldr	r0, [pc, #128]	@ (80006b0 <LCD_Touch_Polling_Demo+0x8c>)
 8000630:	f001 f849 	bl	80016c6 <returnTouchStateAndLocation>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d136      	bne.n	80006a8 <LCD_Touch_Polling_Demo+0x84>
        {
            char winner = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	71fb      	strb	r3, [r7, #7]

      
            if (StaticTouchData.x <= 120)
 800063e:	4b1c      	ldr	r3, [pc, #112]	@ (80006b0 <LCD_Touch_Polling_Demo+0x8c>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	2b78      	cmp	r3, #120	@ 0x78
 8000644:	d813      	bhi.n	800066e <LCD_Touch_Polling_Demo+0x4a>
            {
            
                PlayOnePlayer();
 8000646:	f000 fc1f 	bl	8000e88 <PlayOnePlayer>
                
                if      (checkWin('X')) winner = 'X';
 800064a:	2058      	movs	r0, #88	@ 0x58
 800064c:	f000 fb96 	bl	8000d7c <checkWin>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d002      	beq.n	800065c <LCD_Touch_Polling_Demo+0x38>
 8000656:	2358      	movs	r3, #88	@ 0x58
 8000658:	71fb      	strb	r3, [r7, #7]
 800065a:	e01b      	b.n	8000694 <LCD_Touch_Polling_Demo+0x70>
                else if (checkWin('O')) winner = 'O';
 800065c:	204f      	movs	r0, #79	@ 0x4f
 800065e:	f000 fb8d 	bl	8000d7c <checkWin>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d015      	beq.n	8000694 <LCD_Touch_Polling_Demo+0x70>
 8000668:	234f      	movs	r3, #79	@ 0x4f
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	e012      	b.n	8000694 <LCD_Touch_Polling_Demo+0x70>
            }
            else
            {
          
                PlayTwoPlayer();
 800066e:	f000 fceb 	bl	8001048 <PlayTwoPlayer>
                if      (checkWin('X')) winner = 'X';
 8000672:	2058      	movs	r0, #88	@ 0x58
 8000674:	f000 fb82 	bl	8000d7c <checkWin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <LCD_Touch_Polling_Demo+0x60>
 800067e:	2358      	movs	r3, #88	@ 0x58
 8000680:	71fb      	strb	r3, [r7, #7]
 8000682:	e007      	b.n	8000694 <LCD_Touch_Polling_Demo+0x70>
                else if (checkWin('O')) winner = 'O';
 8000684:	204f      	movs	r0, #79	@ 0x4f
 8000686:	f000 fb79 	bl	8000d7c <checkWin>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <LCD_Touch_Polling_Demo+0x70>
 8000690:	234f      	movs	r3, #79	@ 0x4f
 8000692:	71fb      	strb	r3, [r7, #7]
            }

     
            ApplicationEndScreen(winner);
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ffb6 	bl	8000608 <ApplicationEndScreen>

         
            HAL_Delay(10000);
 800069c:	f242 7010 	movw	r0, #10000	@ 0x2710
 80006a0:	f002 fdea 	bl	8003278 <HAL_Delay>


            ApplicationFirstScreen();
 80006a4:	f7ff ffaa 	bl	80005fc <ApplicationFirstScreen>
        }

        HAL_Delay(50);
 80006a8:	2032      	movs	r0, #50	@ 0x32
 80006aa:	f002 fde5 	bl	8003278 <HAL_Delay>
        if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed)
 80006ae:	e7be      	b.n	800062e <LCD_Touch_Polling_Demo+0xa>
 80006b0:	200000a4 	.word	0x200000a4

080006b4 <firstScreen>:
char board[ROWS][COLS];
static STMPE811_TouchData touchData;



void firstScreen(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
    touchData.orientation = STMPE811_Orientation_Portrait_2;
 80006ba:	4b4e      	ldr	r3, [pc, #312]	@ (80007f4 <firstScreen+0x140>)
 80006bc:	2201      	movs	r2, #1
 80006be:	719a      	strb	r2, [r3, #6]
    LCD_Clear(0, LCD_COLOR_BLUE);
 80006c0:	211f      	movs	r1, #31
 80006c2:	2000      	movs	r0, #0
 80006c4:	f000 ff1c 	bl	8001500 <LCD_Clear>


    LCD_SetTextColor(LCD_COLOR_BLACK);
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 ff3b 	bl	8001544 <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 80006ce:	484a      	ldr	r0, [pc, #296]	@ (80007f8 <firstScreen+0x144>)
 80006d0:	f000 ff48 	bl	8001564 <LCD_SetFont>
    LCD_DisplayChar(60,140,'C');
 80006d4:	2243      	movs	r2, #67	@ 0x43
 80006d6:	218c      	movs	r1, #140	@ 0x8c
 80006d8:	203c      	movs	r0, #60	@ 0x3c
 80006da:	f000 ffc1 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(75,140,'o');
 80006de:	226f      	movs	r2, #111	@ 0x6f
 80006e0:	218c      	movs	r1, #140	@ 0x8c
 80006e2:	204b      	movs	r0, #75	@ 0x4b
 80006e4:	f000 ffbc 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(90,140,'n');
 80006e8:	226e      	movs	r2, #110	@ 0x6e
 80006ea:	218c      	movs	r1, #140	@ 0x8c
 80006ec:	205a      	movs	r0, #90	@ 0x5a
 80006ee:	f000 ffb7 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(105,140,'n');
 80006f2:	226e      	movs	r2, #110	@ 0x6e
 80006f4:	218c      	movs	r1, #140	@ 0x8c
 80006f6:	2069      	movs	r0, #105	@ 0x69
 80006f8:	f000 ffb2 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(120,140,'e');
 80006fc:	2265      	movs	r2, #101	@ 0x65
 80006fe:	218c      	movs	r1, #140	@ 0x8c
 8000700:	2078      	movs	r0, #120	@ 0x78
 8000702:	f000 ffad 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(135,140,'c');
 8000706:	2263      	movs	r2, #99	@ 0x63
 8000708:	218c      	movs	r1, #140	@ 0x8c
 800070a:	2087      	movs	r0, #135	@ 0x87
 800070c:	f000 ffa8 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(150,140,'t');
 8000710:	2274      	movs	r2, #116	@ 0x74
 8000712:	218c      	movs	r1, #140	@ 0x8c
 8000714:	2096      	movs	r0, #150	@ 0x96
 8000716:	f000 ffa3 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(180,140,'4');
 800071a:	2234      	movs	r2, #52	@ 0x34
 800071c:	218c      	movs	r1, #140	@ 0x8c
 800071e:	20b4      	movs	r0, #180	@ 0xb4
 8000720:	f000 ff9e 	bl	8001660 <LCD_DisplayChar>

    
    LCD_DisplayChar(10,190,'1');
 8000724:	2231      	movs	r2, #49	@ 0x31
 8000726:	21be      	movs	r1, #190	@ 0xbe
 8000728:	200a      	movs	r0, #10
 800072a:	f000 ff99 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(20,190,'P');
 800072e:	2250      	movs	r2, #80	@ 0x50
 8000730:	21be      	movs	r1, #190	@ 0xbe
 8000732:	2014      	movs	r0, #20
 8000734:	f000 ff94 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(30,190,'L');
 8000738:	224c      	movs	r2, #76	@ 0x4c
 800073a:	21be      	movs	r1, #190	@ 0xbe
 800073c:	201e      	movs	r0, #30
 800073e:	f000 ff8f 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(40,190,'A');
 8000742:	2241      	movs	r2, #65	@ 0x41
 8000744:	21be      	movs	r1, #190	@ 0xbe
 8000746:	2028      	movs	r0, #40	@ 0x28
 8000748:	f000 ff8a 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(55,190,'Y');
 800074c:	2259      	movs	r2, #89	@ 0x59
 800074e:	21be      	movs	r1, #190	@ 0xbe
 8000750:	2037      	movs	r0, #55	@ 0x37
 8000752:	f000 ff85 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(70,190,'E');
 8000756:	2245      	movs	r2, #69	@ 0x45
 8000758:	21be      	movs	r1, #190	@ 0xbe
 800075a:	2046      	movs	r0, #70	@ 0x46
 800075c:	f000 ff80 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(85,190,'R');
 8000760:	2252      	movs	r2, #82	@ 0x52
 8000762:	21be      	movs	r1, #190	@ 0xbe
 8000764:	2055      	movs	r0, #85	@ 0x55
 8000766:	f000 ff7b 	bl	8001660 <LCD_DisplayChar>

  
    LCD_DisplayChar(115,190,'2');
 800076a:	2232      	movs	r2, #50	@ 0x32
 800076c:	21be      	movs	r1, #190	@ 0xbe
 800076e:	2073      	movs	r0, #115	@ 0x73
 8000770:	f000 ff76 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(135,190,'P');
 8000774:	2250      	movs	r2, #80	@ 0x50
 8000776:	21be      	movs	r1, #190	@ 0xbe
 8000778:	2087      	movs	r0, #135	@ 0x87
 800077a:	f000 ff71 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(145,190,'L');
 800077e:	224c      	movs	r2, #76	@ 0x4c
 8000780:	21be      	movs	r1, #190	@ 0xbe
 8000782:	2091      	movs	r0, #145	@ 0x91
 8000784:	f000 ff6c 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(155,190,'A');
 8000788:	2241      	movs	r2, #65	@ 0x41
 800078a:	21be      	movs	r1, #190	@ 0xbe
 800078c:	209b      	movs	r0, #155	@ 0x9b
 800078e:	f000 ff67 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(170,190,'Y');
 8000792:	2259      	movs	r2, #89	@ 0x59
 8000794:	21be      	movs	r1, #190	@ 0xbe
 8000796:	20aa      	movs	r0, #170	@ 0xaa
 8000798:	f000 ff62 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(185,190,'E');
 800079c:	2245      	movs	r2, #69	@ 0x45
 800079e:	21be      	movs	r1, #190	@ 0xbe
 80007a0:	20b9      	movs	r0, #185	@ 0xb9
 80007a2:	f000 ff5d 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(200,190,'R');
 80007a6:	2252      	movs	r2, #82	@ 0x52
 80007a8:	21be      	movs	r1, #190	@ 0xbe
 80007aa:	20c8      	movs	r0, #200	@ 0xc8
 80007ac:	f000 ff58 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(215,190,'S');
 80007b0:	2253      	movs	r2, #83	@ 0x53
 80007b2:	21be      	movs	r1, #190	@ 0xbe
 80007b4:	20d7      	movs	r0, #215	@ 0xd7
 80007b6:	f000 ff53 	bl	8001660 <LCD_DisplayChar>

   
    uint16_t radius = 20;
 80007ba:	2314      	movs	r3, #20
 80007bc:	80fb      	strh	r3, [r7, #6]
    uint16_t yCircle = 190 + Font16x24.Height + 20; 
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <firstScreen+0x144>)
 80007c0:	88db      	ldrh	r3, [r3, #6]
 80007c2:	33d2      	adds	r3, #210	@ 0xd2
 80007c4:	80bb      	strh	r3, [r7, #4]


    uint16_t x1 = (10 + 85) / 2;
 80007c6:	232f      	movs	r3, #47	@ 0x2f
 80007c8:	807b      	strh	r3, [r7, #2]

    uint16_t x2 = (115 + 215) / 2;
 80007ca:	23a5      	movs	r3, #165	@ 0xa5
 80007cc:	803b      	strh	r3, [r7, #0]

    LCD_Draw_Circle_Fill(x1, yCircle, radius, LCD_COLOR_RED);
 80007ce:	88fa      	ldrh	r2, [r7, #6]
 80007d0:	88b9      	ldrh	r1, [r7, #4]
 80007d2:	8878      	ldrh	r0, [r7, #2]
 80007d4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80007d8:	f000 fe3e 	bl	8001458 <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(x2, yCircle, radius, LCD_COLOR_RED);
 80007dc:	88fa      	ldrh	r2, [r7, #6]
 80007de:	88b9      	ldrh	r1, [r7, #4]
 80007e0:	8838      	ldrh	r0, [r7, #0]
 80007e2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80007e6:	f000 fe37 	bl	8001458 <LCD_Draw_Circle_Fill>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000e4 	.word	0x200000e4
 80007f8:	20000004 	.word	0x20000004

080007fc <endScreen>:



void endScreen(char winner) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b0a2      	sub	sp, #136	@ 0x88
 8000800:	af02      	add	r7, sp, #8
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
    touchData.orientation = STMPE811_Orientation_Portrait_2;
 8000806:	4b9b      	ldr	r3, [pc, #620]	@ (8000a74 <endScreen+0x278>)
 8000808:	2201      	movs	r2, #1
 800080a:	719a      	strb	r2, [r3, #6]

    while (1) {
  
        LCD_Clear(0, LCD_COLOR_BLUE);
 800080c:	211f      	movs	r1, #31
 800080e:	2000      	movs	r0, #0
 8000810:	f000 fe76 	bl	8001500 <LCD_Clear>

     
        LCD_SetTextColor(LCD_COLOR_BLACK);
 8000814:	2000      	movs	r0, #0
 8000816:	f000 fe95 	bl	8001544 <LCD_SetTextColor>
        LCD_SetFont(&Font16x24);
 800081a:	4897      	ldr	r0, [pc, #604]	@ (8000a78 <endScreen+0x27c>)
 800081c:	f000 fea2 	bl	8001564 <LCD_SetFont>
        {
            const char *title = "GAME OVER";
 8000820:	4b96      	ldr	r3, [pc, #600]	@ (8000a7c <endScreen+0x280>)
 8000822:	66bb      	str	r3, [r7, #104]	@ 0x68
            uint16_t w  = Font16x24.Width + 2;
 8000824:	4b94      	ldr	r3, [pc, #592]	@ (8000a78 <endScreen+0x27c>)
 8000826:	889b      	ldrh	r3, [r3, #4]
 8000828:	3302      	adds	r3, #2
 800082a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
            uint16_t x0 = (LCD_PIXEL_WIDTH - strlen(title)*w) / 2;
 800082e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000830:	f7ff fcde 	bl	80001f0 <strlen>
 8000834:	4602      	mov	r2, r0
 8000836:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800083a:	fb02 f303 	mul.w	r3, r2, r3
 800083e:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000842:	085b      	lsrs	r3, r3, #1
 8000844:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
            uint16_t y0 = 60;
 8000848:	233c      	movs	r3, #60	@ 0x3c
 800084a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
            for (int i = 0; i < (int)strlen(title); ++i) {
 800084e:	2300      	movs	r3, #0
 8000850:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000852:	e016      	b.n	8000882 <endScreen+0x86>
                LCD_DisplayChar(x0 + i*w, y0, title[i]);
 8000854:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000856:	b29b      	uxth	r3, r3
 8000858:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 800085c:	fb12 f303 	smulbb	r3, r2, r3
 8000860:	b29a      	uxth	r2, r3
 8000862:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8000866:	4413      	add	r3, r2
 8000868:	b298      	uxth	r0, r3
 800086a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800086c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800086e:	4413      	add	r3, r2
 8000870:	781a      	ldrb	r2, [r3, #0]
 8000872:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8000876:	4619      	mov	r1, r3
 8000878:	f000 fef2 	bl	8001660 <LCD_DisplayChar>
            for (int i = 0; i < (int)strlen(title); ++i) {
 800087c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800087e:	3301      	adds	r3, #1
 8000880:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000882:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000884:	f7ff fcb4 	bl	80001f0 <strlen>
 8000888:	4603      	mov	r3, r0
 800088a:	461a      	mov	r2, r3
 800088c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800088e:	4293      	cmp	r3, r2
 8000890:	dbe0      	blt.n	8000854 <endScreen+0x58>
            }
        }


        if      (winner == 'X') ++scoreX;
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b58      	cmp	r3, #88	@ 0x58
 8000896:	d106      	bne.n	80008a6 <endScreen+0xaa>
 8000898:	4b79      	ldr	r3, [pc, #484]	@ (8000a80 <endScreen+0x284>)
 800089a:	881b      	ldrh	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	b29a      	uxth	r2, r3
 80008a0:	4b77      	ldr	r3, [pc, #476]	@ (8000a80 <endScreen+0x284>)
 80008a2:	801a      	strh	r2, [r3, #0]
 80008a4:	e008      	b.n	80008b8 <endScreen+0xbc>
        else if (winner == 'O') ++scoreO;
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b4f      	cmp	r3, #79	@ 0x4f
 80008aa:	d105      	bne.n	80008b8 <endScreen+0xbc>
 80008ac:	4b75      	ldr	r3, [pc, #468]	@ (8000a84 <endScreen+0x288>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	3301      	adds	r3, #1
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	4b73      	ldr	r3, [pc, #460]	@ (8000a84 <endScreen+0x288>)
 80008b6:	801a      	strh	r2, [r3, #0]


        LCD_SetFont(&Font12x12);
 80008b8:	4873      	ldr	r0, [pc, #460]	@ (8000a88 <endScreen+0x28c>)
 80008ba:	f000 fe53 	bl	8001564 <LCD_SetFont>
        uint16_t sw = Font12x12.Width + 1;
 80008be:	4b72      	ldr	r3, [pc, #456]	@ (8000a88 <endScreen+0x28c>)
 80008c0:	889b      	ldrh	r3, [r3, #4]
 80008c2:	3301      	adds	r3, #1
 80008c4:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
        uint16_t sh = Font12x12.Height;
 80008c8:	4b6f      	ldr	r3, [pc, #444]	@ (8000a88 <endScreen+0x28c>)
 80008ca:	88db      	ldrh	r3, [r3, #6]
 80008cc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        char buf[32];

    
        snprintf(buf, sizeof(buf), "P1:%u   P2:%u", scoreX, scoreO);
 80008d0:	4b6b      	ldr	r3, [pc, #428]	@ (8000a80 <endScreen+0x284>)
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	461a      	mov	r2, r3
 80008d6:	4b6b      	ldr	r3, [pc, #428]	@ (8000a84 <endScreen+0x288>)
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	f107 000c 	add.w	r0, r7, #12
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	4613      	mov	r3, r2
 80008e2:	4a6a      	ldr	r2, [pc, #424]	@ (8000a8c <endScreen+0x290>)
 80008e4:	2120      	movs	r1, #32
 80008e6:	f006 fad5 	bl	8006e94 <sniprintf>
        {
            int len = strlen(buf);
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fc7e 	bl	80001f0 <strlen>
 80008f4:	4603      	mov	r3, r0
 80008f6:	65bb      	str	r3, [r7, #88]	@ 0x58
            uint16_t sx = (LCD_PIXEL_WIDTH - len*sw) / 2;
 80008f8:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80008fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80008fe:	fb02 f303 	mul.w	r3, r2, r3
 8000902:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000906:	0fda      	lsrs	r2, r3, #31
 8000908:	4413      	add	r3, r2
 800090a:	105b      	asrs	r3, r3, #1
 800090c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
            uint16_t sy = 60 + Font16x24.Height + 20;
 8000910:	4b59      	ldr	r3, [pc, #356]	@ (8000a78 <endScreen+0x27c>)
 8000912:	88db      	ldrh	r3, [r3, #6]
 8000914:	3350      	adds	r3, #80	@ 0x50
 8000916:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
            for (int i = 0; i < len; ++i)
 800091a:	2300      	movs	r3, #0
 800091c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800091e:	e017      	b.n	8000950 <endScreen+0x154>
                LCD_DisplayChar(sx + i*sw, sy, buf[i]);
 8000920:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000922:	b29b      	uxth	r3, r3
 8000924:	f8b7 2060 	ldrh.w	r2, [r7, #96]	@ 0x60
 8000928:	fb12 f303 	smulbb	r3, r2, r3
 800092c:	b29a      	uxth	r2, r3
 800092e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000932:	4413      	add	r3, r2
 8000934:	b298      	uxth	r0, r3
 8000936:	f107 020c 	add.w	r2, r7, #12
 800093a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800093c:	4413      	add	r3, r2
 800093e:	781a      	ldrb	r2, [r3, #0]
 8000940:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000944:	4619      	mov	r1, r3
 8000946:	f000 fe8b 	bl	8001660 <LCD_DisplayChar>
            for (int i = 0; i < len; ++i)
 800094a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800094c:	3301      	adds	r3, #1
 800094e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000950:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000952:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000954:	429a      	cmp	r2, r3
 8000956:	dbe3      	blt.n	8000920 <endScreen+0x124>
        }

  
        snprintf(buf, sizeof(buf), "Time: %lus", lastRoundTimeSec);
 8000958:	4b4d      	ldr	r3, [pc, #308]	@ (8000a90 <endScreen+0x294>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f107 000c 	add.w	r0, r7, #12
 8000960:	4a4c      	ldr	r2, [pc, #304]	@ (8000a94 <endScreen+0x298>)
 8000962:	2120      	movs	r1, #32
 8000964:	f006 fa96 	bl	8006e94 <sniprintf>
        {
            int len = strlen(buf);
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fc3f 	bl	80001f0 <strlen>
 8000972:	4603      	mov	r3, r0
 8000974:	653b      	str	r3, [r7, #80]	@ 0x50
            uint16_t tx = (LCD_PIXEL_WIDTH - len*sw) / 2;
 8000976:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800097a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000984:	0fda      	lsrs	r2, r3, #31
 8000986:	4413      	add	r3, r2
 8000988:	105b      	asrs	r3, r3, #1
 800098a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
            uint16_t ty = 60 + Font16x24.Height + 20 + sh + 10;
 800098e:	4b3a      	ldr	r3, [pc, #232]	@ (8000a78 <endScreen+0x27c>)
 8000990:	88da      	ldrh	r2, [r3, #6]
 8000992:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8000996:	4413      	add	r3, r2
 8000998:	b29b      	uxth	r3, r3
 800099a:	335a      	adds	r3, #90	@ 0x5a
 800099c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
            for (int i = 0; i < len; ++i)
 80009a0:	2300      	movs	r3, #0
 80009a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80009a4:	e017      	b.n	80009d6 <endScreen+0x1da>
                LCD_DisplayChar(tx + i*sw, ty, buf[i]);
 80009a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	f8b7 2060 	ldrh.w	r2, [r7, #96]	@ 0x60
 80009ae:	fb12 f303 	smulbb	r3, r2, r3
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80009b8:	4413      	add	r3, r2
 80009ba:	b298      	uxth	r0, r3
 80009bc:	f107 020c 	add.w	r2, r7, #12
 80009c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80009c2:	4413      	add	r3, r2
 80009c4:	781a      	ldrb	r2, [r3, #0]
 80009c6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80009ca:	4619      	mov	r1, r3
 80009cc:	f000 fe48 	bl	8001660 <LCD_DisplayChar>
            for (int i = 0; i < len; ++i)
 80009d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80009d2:	3301      	adds	r3, #1
 80009d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80009d6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80009d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80009da:	429a      	cmp	r2, r3
 80009dc:	dbe3      	blt.n	80009a6 <endScreen+0x1aa>
        }

 
        const char *b1 = "RESTART", *b2 = " MENU ";
 80009de:	4b2e      	ldr	r3, [pc, #184]	@ (8000a98 <endScreen+0x29c>)
 80009e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80009e2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a9c <endScreen+0x2a0>)
 80009e4:	647b      	str	r3, [r7, #68]	@ 0x44
        int l1 = strlen(b1), l2 = strlen(b2);
 80009e6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80009e8:	f7ff fc02 	bl	80001f0 <strlen>
 80009ec:	4603      	mov	r3, r0
 80009ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80009f0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80009f2:	f7ff fbfd 	bl	80001f0 <strlen>
 80009f6:	4603      	mov	r3, r0
 80009f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint16_t yb = LCD_PIXEL_HEIGHT - sh - 20;
 80009fa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80009fe:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 8000a02:	877b      	strh	r3, [r7, #58]	@ 0x3a
        uint16_t x1 = (LCD_PIXEL_WIDTH/4)     - (l1*sw)/2;
 8000a04:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8000a08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000a0a:	fb02 f303 	mul.w	r3, r2, r3
 8000a0e:	0fda      	lsrs	r2, r3, #31
 8000a10:	4413      	add	r3, r2
 8000a12:	105b      	asrs	r3, r3, #1
 8000a14:	425b      	negs	r3, r3
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	333c      	adds	r3, #60	@ 0x3c
 8000a1a:	873b      	strh	r3, [r7, #56]	@ 0x38
        uint16_t x2 = (3*LCD_PIXEL_WIDTH/4) - (l2*sw)/2;
 8000a1c:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8000a20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a22:	fb02 f303 	mul.w	r3, r2, r3
 8000a26:	0fda      	lsrs	r2, r3, #31
 8000a28:	4413      	add	r3, r2
 8000a2a:	105b      	asrs	r3, r3, #1
 8000a2c:	425b      	negs	r3, r3
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	33b4      	adds	r3, #180	@ 0xb4
 8000a32:	86fb      	strh	r3, [r7, #54]	@ 0x36
        for (int i = 0; i < l1; ++i) LCD_DisplayChar(x1 + i*sw, yb, b1[i]);
 8000a34:	2300      	movs	r3, #0
 8000a36:	673b      	str	r3, [r7, #112]	@ 0x70
 8000a38:	e014      	b.n	8000a64 <endScreen+0x268>
 8000a3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	f8b7 2060 	ldrh.w	r2, [r7, #96]	@ 0x60
 8000a42:	fb12 f303 	smulbb	r3, r2, r3
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000a4a:	4413      	add	r3, r2
 8000a4c:	b298      	uxth	r0, r3
 8000a4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000a52:	4413      	add	r3, r2
 8000a54:	781a      	ldrb	r2, [r3, #0]
 8000a56:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f000 fe01 	bl	8001660 <LCD_DisplayChar>
 8000a5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a60:	3301      	adds	r3, #1
 8000a62:	673b      	str	r3, [r7, #112]	@ 0x70
 8000a64:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000a66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbe6      	blt.n	8000a3a <endScreen+0x23e>
        for (int i = 0; i < l2; ++i) LCD_DisplayChar(x2 + i*sw, yb, b2[i]);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000a70:	e02b      	b.n	8000aca <endScreen+0x2ce>
 8000a72:	bf00      	nop
 8000a74:	200000e4 	.word	0x200000e4
 8000a78:	20000004 	.word	0x20000004
 8000a7c:	08007c04 	.word	0x08007c04
 8000a80:	200000ac 	.word	0x200000ac
 8000a84:	200000ae 	.word	0x200000ae
 8000a88:	2000000c 	.word	0x2000000c
 8000a8c:	08007c10 	.word	0x08007c10
 8000a90:	200000b0 	.word	0x200000b0
 8000a94:	08007c20 	.word	0x08007c20
 8000a98:	08007c2c 	.word	0x08007c2c
 8000a9c:	08007c34 	.word	0x08007c34
 8000aa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	f8b7 2060 	ldrh.w	r2, [r7, #96]	@ 0x60
 8000aa8:	fb12 f303 	smulbb	r3, r2, r3
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000ab0:	4413      	add	r3, r2
 8000ab2:	b298      	uxth	r0, r3
 8000ab4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ab6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000ab8:	4413      	add	r3, r2
 8000aba:	781a      	ldrb	r2, [r3, #0]
 8000abc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f000 fdce 	bl	8001660 <LCD_DisplayChar>
 8000ac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000aca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000acc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	dbe6      	blt.n	8000aa0 <endScreen+0x2a4>

       
        STMPE811_TouchData td;
        do {
            HAL_Delay(50);
 8000ad2:	2032      	movs	r0, #50	@ 0x32
 8000ad4:	f002 fbd0 	bl	8003278 <HAL_Delay>
        } while (returnTouchStateAndLocation(&td) != STMPE811_State_Pressed);
 8000ad8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 fdf2 	bl	80016c6 <returnTouchStateAndLocation>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1f4      	bne.n	8000ad2 <endScreen+0x2d6>
        DetermineTouchPosition(&td);
 8000ae8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 fdf6 	bl	80016de <DetermineTouchPosition>

        
        if (td.x < (LCD_PIXEL_WIDTH/2)) {
 8000af2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000af4:	2b77      	cmp	r3, #119	@ 0x77
 8000af6:	d816      	bhi.n	8000b26 <endScreen+0x32a>
            restartGame();
 8000af8:	f000 f81c 	bl	8000b34 <restartGame>
           
            if      (checkWin('X')) winner = 'X';
 8000afc:	2058      	movs	r0, #88	@ 0x58
 8000afe:	f000 f93d 	bl	8000d7c <checkWin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d002      	beq.n	8000b0e <endScreen+0x312>
 8000b08:	2358      	movs	r3, #88	@ 0x58
 8000b0a:	71fb      	strb	r3, [r7, #7]
 8000b0c:	e67e      	b.n	800080c <endScreen+0x10>
            else if (checkWin('O')) winner = 'O';
 8000b0e:	204f      	movs	r0, #79	@ 0x4f
 8000b10:	f000 f934 	bl	8000d7c <checkWin>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d002      	beq.n	8000b20 <endScreen+0x324>
 8000b1a:	234f      	movs	r3, #79	@ 0x4f
 8000b1c:	71fb      	strb	r3, [r7, #7]
 8000b1e:	e675      	b.n	800080c <endScreen+0x10>
            else                    winner = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	71fb      	strb	r3, [r7, #7]
    while (1) {
 8000b24:	e672      	b.n	800080c <endScreen+0x10>
            continue;  
        } else {
          
            firstScreen();
 8000b26:	f7ff fdc5 	bl	80006b4 <firstScreen>
            return;
 8000b2a:	bf00      	nop
        }
    }
}
 8000b2c:	3780      	adds	r7, #128	@ 0x80
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop

08000b34 <restartGame>:
void restartGame(void) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
   
    if (lastMode == 1) {
 8000b38:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <restartGame+0x24>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d102      	bne.n	8000b46 <restartGame+0x12>
        PlayOnePlayer();
 8000b40:	f000 f9a2 	bl	8000e88 <PlayOnePlayer>
    }
    else if (lastMode == 2) {
        PlayTwoPlayer();
    }
 
}
 8000b44:	e005      	b.n	8000b52 <restartGame+0x1e>
    else if (lastMode == 2) {
 8000b46:	4b04      	ldr	r3, [pc, #16]	@ (8000b58 <restartGame+0x24>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d101      	bne.n	8000b52 <restartGame+0x1e>
        PlayTwoPlayer();
 8000b4e:	f000 fa7b 	bl	8001048 <PlayTwoPlayer>
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000b4 	.word	0x200000b4

08000b5c <initBoard>:




void initBoard(void) {
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
    for (int r = 0; r < ROWS; r++) {
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	e015      	b.n	8000b94 <initBoard+0x38>
        for (int c = 0; c < COLS; c++) {
 8000b68:	2300      	movs	r3, #0
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	e00c      	b.n	8000b88 <initBoard+0x2c>
            board[r][c] = ' ';
 8000b6e:	490e      	ldr	r1, [pc, #56]	@ (8000ba8 <initBoard+0x4c>)
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	4613      	mov	r3, r2
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	1a9b      	subs	r3, r3, r2
 8000b78:	18ca      	adds	r2, r1, r3
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	2220      	movs	r2, #32
 8000b80:	701a      	strb	r2, [r3, #0]
        for (int c = 0; c < COLS; c++) {
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	2b06      	cmp	r3, #6
 8000b8c:	ddef      	ble.n	8000b6e <initBoard+0x12>
    for (int r = 0; r < ROWS; r++) {
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3301      	adds	r3, #1
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b05      	cmp	r3, #5
 8000b98:	dde6      	ble.n	8000b68 <initBoard+0xc>
        }
    }
}
 8000b9a:	bf00      	nop
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	200000b8 	.word	0x200000b8

08000bac <GameScreen_Init>:


void GameScreen_Init(void) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0

    LCD_Clear(0, BOARD_BG_COLOR);
 8000bb2:	211f      	movs	r1, #31
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f000 fca3 	bl	8001500 <LCD_Clear>
    for (int r = 0; r < ROWS; r++) {
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	e021      	b.n	8000c04 <GameScreen_Init+0x58>
        for (int c = 0; c < COLS; c++) {
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	e018      	b.n	8000bf8 <GameScreen_Init+0x4c>
            uint16_t x = ORIGIN_X + c * CELL_SPACING_X;
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	015b      	lsls	r3, r3, #5
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	3314      	adds	r3, #20
 8000bd0:	80fb      	strh	r3, [r7, #6]
            uint16_t y = ORIGIN_Y + r * CELL_SPACING_Y;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	0092      	lsls	r2, r2, #2
 8000bda:	4413      	add	r3, r2
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	333c      	adds	r3, #60	@ 0x3c
 8000be2:	80bb      	strh	r3, [r7, #4]
            LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, EMPTY_HOLE_COLOR);
 8000be4:	88b9      	ldrh	r1, [r7, #4]
 8000be6:	88f8      	ldrh	r0, [r7, #6]
 8000be8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bec:	220d      	movs	r2, #13
 8000bee:	f000 fc33 	bl	8001458 <LCD_Draw_Circle_Fill>
        for (int c = 0; c < COLS; c++) {
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	dde3      	ble.n	8000bc6 <GameScreen_Init+0x1a>
    for (int r = 0; r < ROWS; r++) {
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	3301      	adds	r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b05      	cmp	r3, #5
 8000c08:	ddda      	ble.n	8000bc0 <GameScreen_Init+0x14>
        }
    }
}
 8000c0a:	bf00      	nop
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <PollTouchColumn>:
        }
    }
}


static int PollTouchColumn(char currentPlayer) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
    while (1) {
        if (returnTouchStateAndLocation(&touchData) == STMPE811_State_Pressed) {
 8000c1e:	4834      	ldr	r0, [pc, #208]	@ (8000cf0 <PollTouchColumn+0xdc>)
 8000c20:	f000 fd51 	bl	80016c6 <returnTouchStateAndLocation>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d159      	bne.n	8000cde <PollTouchColumn+0xca>
            //DetermineTouchPosition(&touchData);
            int tx = touchData.x;
 8000c2a:	4b31      	ldr	r3, [pc, #196]	@ (8000cf0 <PollTouchColumn+0xdc>)
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	617b      	str	r3, [r7, #20]


            if (tx >= ORIGIN_X - CELL_SPACING_X/2 &&
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d953      	bls.n	8000cde <PollTouchColumn+0xca>
                tx <= ORIGIN_X + (COLS-1)*CELL_SPACING_X + CELL_SPACING_X/2) {
 8000c36:	697b      	ldr	r3, [r7, #20]
            if (tx >= ORIGIN_X - CELL_SPACING_X/2 &&
 8000c38:	2be4      	cmp	r3, #228	@ 0xe4
 8000c3a:	d850      	bhi.n	8000cde <PollTouchColumn+0xca>

                int col = (tx - (ORIGIN_X - CELL_SPACING_X/2)) / CELL_SPACING_X;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	3b04      	subs	r3, #4
 8000c40:	095b      	lsrs	r3, r3, #5
 8000c42:	613b      	str	r3, [r7, #16]
                if (col >= 0 && col < COLS) {
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db49      	blt.n	8000cde <PollTouchColumn+0xca>
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	2b06      	cmp	r3, #6
 8000c4e:	dc46      	bgt.n	8000cde <PollTouchColumn+0xca>

                    int rowIndex = -1;
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c54:	61fb      	str	r3, [r7, #28]
                    for (int r = ROWS - 1; r >= 0; r--) {
 8000c56:	2305      	movs	r3, #5
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	e01a      	b.n	8000c92 <PollTouchColumn+0x7e>
                        if (board[r][col] == ' ') {
 8000c5c:	4925      	ldr	r1, [pc, #148]	@ (8000cf4 <PollTouchColumn+0xe0>)
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4613      	mov	r3, r2
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	1a9b      	subs	r3, r3, r2
 8000c66:	18ca      	adds	r2, r1, r3
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b20      	cmp	r3, #32
 8000c70:	d10c      	bne.n	8000c8c <PollTouchColumn+0x78>
                            rowIndex = r;
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	61fb      	str	r3, [r7, #28]
                            board[r][col] = currentPlayer;
 8000c76:	491f      	ldr	r1, [pc, #124]	@ (8000cf4 <PollTouchColumn+0xe0>)
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	1a9b      	subs	r3, r3, r2
 8000c80:	18ca      	adds	r2, r1, r3
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	4413      	add	r3, r2
 8000c86:	79fa      	ldrb	r2, [r7, #7]
 8000c88:	701a      	strb	r2, [r3, #0]
                            break;
 8000c8a:	e005      	b.n	8000c98 <PollTouchColumn+0x84>
                    for (int r = ROWS - 1; r >= 0; r--) {
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	61bb      	str	r3, [r7, #24]
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	dae1      	bge.n	8000c5c <PollTouchColumn+0x48>
                        }
                    }
                    if (rowIndex != -1) {
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c9e:	d01e      	beq.n	8000cde <PollTouchColumn+0xca>

                        uint16_t color = (currentPlayer == 'X')
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	2b58      	cmp	r3, #88	@ 0x58
 8000ca4:	d102      	bne.n	8000cac <PollTouchColumn+0x98>
 8000ca6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000caa:	e000      	b.n	8000cae <PollTouchColumn+0x9a>
 8000cac:	2300      	movs	r3, #0
 8000cae:	81fb      	strh	r3, [r7, #14]
                            ? LCD_COLOR_RED
                            : LCD_COLOR_BLACK;

                        uint16_t x = ORIGIN_X + col * CELL_SPACING_X;
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	015b      	lsls	r3, r3, #5
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	3314      	adds	r3, #20
 8000cba:	81bb      	strh	r3, [r7, #12]
                        uint16_t y = ORIGIN_Y + rowIndex * CELL_SPACING_Y;
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	0092      	lsls	r2, r2, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	333c      	adds	r3, #60	@ 0x3c
 8000ccc:	817b      	strh	r3, [r7, #10]

                        LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, color);
 8000cce:	89fb      	ldrh	r3, [r7, #14]
 8000cd0:	8979      	ldrh	r1, [r7, #10]
 8000cd2:	89b8      	ldrh	r0, [r7, #12]
 8000cd4:	220d      	movs	r2, #13
 8000cd6:	f000 fbbf 	bl	8001458 <LCD_Draw_Circle_Fill>
                        return col;
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	e003      	b.n	8000ce6 <PollTouchColumn+0xd2>
                    }
                }
            }
        }
        HAL_Delay(200);
 8000cde:	20c8      	movs	r0, #200	@ 0xc8
 8000ce0:	f002 faca 	bl	8003278 <HAL_Delay>
        if (returnTouchStateAndLocation(&touchData) == STMPE811_State_Pressed) {
 8000ce4:	e79b      	b.n	8000c1e <PollTouchColumn+0xa>
    }
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3720      	adds	r7, #32
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200000e4 	.word	0x200000e4
 8000cf4:	200000b8 	.word	0x200000b8

08000cf8 <checkDirection>:
        }
    }
    return -1;
}

int checkDirection(int startR, int startC, int dR, int dC, char piece) {
 8000cf8:	b480      	push	{r7}
 8000cfa:	b089      	sub	sp, #36	@ 0x24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
 8000d04:	603b      	str	r3, [r7, #0]
    for (int i = 1; i < 4; i++) {
 8000d06:	2301      	movs	r3, #1
 8000d08:	61fb      	str	r3, [r7, #28]
 8000d0a:	e02b      	b.n	8000d64 <checkDirection+0x6c>
        int rr = startR + dR * i;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	69fa      	ldr	r2, [r7, #28]
 8000d10:	fb02 f303 	mul.w	r3, r2, r3
 8000d14:	68fa      	ldr	r2, [r7, #12]
 8000d16:	4413      	add	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        int cc = startC + dC * i;
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	69fa      	ldr	r2, [r7, #28]
 8000d1e:	fb02 f303 	mul.w	r3, r2, r3
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	4413      	add	r3, r2
 8000d26:	617b      	str	r3, [r7, #20]
        if (rr < 0 || rr >= ROWS || cc < 0 || cc >= COLS || board[rr][cc] != piece)
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db15      	blt.n	8000d5a <checkDirection+0x62>
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	2b05      	cmp	r3, #5
 8000d32:	dc12      	bgt.n	8000d5a <checkDirection+0x62>
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	db0f      	blt.n	8000d5a <checkDirection+0x62>
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	2b06      	cmp	r3, #6
 8000d3e:	dc0c      	bgt.n	8000d5a <checkDirection+0x62>
 8000d40:	490d      	ldr	r1, [pc, #52]	@ (8000d78 <checkDirection+0x80>)
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4613      	mov	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	1a9b      	subs	r3, r3, r2
 8000d4a:	18ca      	adds	r2, r1, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	4413      	add	r3, r2
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d001      	beq.n	8000d5e <checkDirection+0x66>
            return 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e006      	b.n	8000d6c <checkDirection+0x74>
    for (int i = 1; i < 4; i++) {
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3301      	adds	r3, #1
 8000d62:	61fb      	str	r3, [r7, #28]
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	ddd0      	ble.n	8000d0c <checkDirection+0x14>
    }
    return 1;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3724      	adds	r7, #36	@ 0x24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	200000b8 	.word	0x200000b8

08000d7c <checkWin>:

int checkWin(char piece) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
    for (int r = 0; r < ROWS; r++) {
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	e047      	b.n	8000e1c <checkWin+0xa0>
        for (int c = 0; c < COLS; c++) {
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	e03e      	b.n	8000e10 <checkWin+0x94>
            if (board[r][c] != piece) continue;
 8000d92:	4926      	ldr	r1, [pc, #152]	@ (8000e2c <checkWin+0xb0>)
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	4613      	mov	r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	1a9b      	subs	r3, r3, r2
 8000d9c:	18ca      	adds	r2, r1, r3
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	4413      	add	r3, r2
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	79fa      	ldrb	r2, [r7, #7]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d12e      	bne.n	8000e08 <checkWin+0x8c>
            if (checkDirection(r, c, 0, 1, piece)  ||
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	2301      	movs	r3, #1
 8000db0:	2200      	movs	r2, #0
 8000db2:	68b9      	ldr	r1, [r7, #8]
 8000db4:	68f8      	ldr	r0, [r7, #12]
 8000db6:	f7ff ff9f 	bl	8000cf8 <checkDirection>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d121      	bne.n	8000e04 <checkWin+0x88>
                checkDirection(r, c, 1, 0, piece)  ||
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f7ff ff94 	bl	8000cf8 <checkDirection>
 8000dd0:	4603      	mov	r3, r0
            if (checkDirection(r, c, 0, 1, piece)  ||
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d116      	bne.n	8000e04 <checkWin+0x88>
                checkDirection(r, c, 1, 1, piece)  ||
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	2301      	movs	r3, #1
 8000ddc:	2201      	movs	r2, #1
 8000dde:	68b9      	ldr	r1, [r7, #8]
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f7ff ff89 	bl	8000cf8 <checkDirection>
 8000de6:	4603      	mov	r3, r0
                checkDirection(r, c, 1, 0, piece)  ||
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d10b      	bne.n	8000e04 <checkWin+0x88>
                checkDirection(r, c, -1, 1, piece)) {
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2301      	movs	r3, #1
 8000df2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000df6:	68b9      	ldr	r1, [r7, #8]
 8000df8:	68f8      	ldr	r0, [r7, #12]
 8000dfa:	f7ff ff7d 	bl	8000cf8 <checkDirection>
 8000dfe:	4603      	mov	r3, r0
                checkDirection(r, c, 1, 1, piece)  ||
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d002      	beq.n	8000e0a <checkWin+0x8e>
                return 1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e00d      	b.n	8000e24 <checkWin+0xa8>
            if (board[r][c] != piece) continue;
 8000e08:	bf00      	nop
        for (int c = 0; c < COLS; c++) {
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	ddbd      	ble.n	8000d92 <checkWin+0x16>
    for (int r = 0; r < ROWS; r++) {
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2b05      	cmp	r3, #5
 8000e20:	ddb4      	ble.n	8000d8c <checkWin+0x10>
            }
        }
    }
    return 0;
 8000e22:	2300      	movs	r3, #0
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200000b8 	.word	0x200000b8

08000e30 <isBoardFull>:

int isBoardFull(void) {
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
    for (int r = 0; r < ROWS; r++) {
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	e018      	b.n	8000e6e <isBoardFull+0x3e>
        for (int c = 0; c < COLS; c++) {
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	e00f      	b.n	8000e62 <isBoardFull+0x32>
            if (board[r][c] == ' ') return 0;
 8000e42:	4910      	ldr	r1, [pc, #64]	@ (8000e84 <isBoardFull+0x54>)
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	4613      	mov	r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	1a9b      	subs	r3, r3, r2
 8000e4c:	18ca      	adds	r2, r1, r3
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	4413      	add	r3, r2
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b20      	cmp	r3, #32
 8000e56:	d101      	bne.n	8000e5c <isBoardFull+0x2c>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e00c      	b.n	8000e76 <isBoardFull+0x46>
        for (int c = 0; c < COLS; c++) {
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	603b      	str	r3, [r7, #0]
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	2b06      	cmp	r3, #6
 8000e66:	ddec      	ble.n	8000e42 <isBoardFull+0x12>
    for (int r = 0; r < ROWS; r++) {
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b05      	cmp	r3, #5
 8000e72:	dde3      	ble.n	8000e3c <isBoardFull+0xc>
        }
    }
    return 1;
 8000e74:	2301      	movs	r3, #1
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	200000b8 	.word	0x200000b8

08000e88 <PlayOnePlayer>:

enum {
    HUMAN = 'X', BOT = 'O'
};

void PlayOnePlayer(void) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
    lastMode = 1;
 8000e8e:	4b67      	ldr	r3, [pc, #412]	@ (800102c <PlayOnePlayer+0x1a4>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	601a      	str	r2, [r3, #0]
    uint32_t startTick = HAL_GetTick();
 8000e94:	f002 f9e4 	bl	8003260 <HAL_GetTick>
 8000e98:	60f8      	str	r0, [r7, #12]
    initBoard();
 8000e9a:	f7ff fe5f 	bl	8000b5c <initBoard>
    GameScreen_Init();
 8000e9e:	f7ff fe85 	bl	8000bac <GameScreen_Init>

    LCD_SetTextColor(LCD_COLOR_WHITE);
 8000ea2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000ea6:	f000 fb4d 	bl	8001544 <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 8000eaa:	4861      	ldr	r0, [pc, #388]	@ (8001030 <PlayOnePlayer+0x1a8>)
 8000eac:	f000 fb5a 	bl	8001564 <LCD_SetFont>
    LCD_DisplayChar(20,20,'S');
 8000eb0:	2253      	movs	r2, #83	@ 0x53
 8000eb2:	2114      	movs	r1, #20
 8000eb4:	2014      	movs	r0, #20
 8000eb6:	f000 fbd3 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(35,20,'I');
 8000eba:	2249      	movs	r2, #73	@ 0x49
 8000ebc:	2114      	movs	r1, #20
 8000ebe:	2023      	movs	r0, #35	@ 0x23
 8000ec0:	f000 fbce 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(50,20,'N');
 8000ec4:	224e      	movs	r2, #78	@ 0x4e
 8000ec6:	2114      	movs	r1, #20
 8000ec8:	2032      	movs	r0, #50	@ 0x32
 8000eca:	f000 fbc9 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(65,20,'G');
 8000ece:	2247      	movs	r2, #71	@ 0x47
 8000ed0:	2114      	movs	r1, #20
 8000ed2:	2041      	movs	r0, #65	@ 0x41
 8000ed4:	f000 fbc4 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(80,20,'L');
 8000ed8:	224c      	movs	r2, #76	@ 0x4c
 8000eda:	2114      	movs	r1, #20
 8000edc:	2050      	movs	r0, #80	@ 0x50
 8000ede:	f000 fbbf 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(95,20,'E');
 8000ee2:	2245      	movs	r2, #69	@ 0x45
 8000ee4:	2114      	movs	r1, #20
 8000ee6:	205f      	movs	r0, #95	@ 0x5f
 8000ee8:	f000 fbba 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(125,20,'P');
 8000eec:	2250      	movs	r2, #80	@ 0x50
 8000eee:	2114      	movs	r1, #20
 8000ef0:	207d      	movs	r0, #125	@ 0x7d
 8000ef2:	f000 fbb5 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(140,20,'L');
 8000ef6:	224c      	movs	r2, #76	@ 0x4c
 8000ef8:	2114      	movs	r1, #20
 8000efa:	208c      	movs	r0, #140	@ 0x8c
 8000efc:	f000 fbb0 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(155,20,'A');
 8000f00:	2241      	movs	r2, #65	@ 0x41
 8000f02:	2114      	movs	r1, #20
 8000f04:	209b      	movs	r0, #155	@ 0x9b
 8000f06:	f000 fbab 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(170,20,'Y');
 8000f0a:	2259      	movs	r2, #89	@ 0x59
 8000f0c:	2114      	movs	r1, #20
 8000f0e:	20aa      	movs	r0, #170	@ 0xaa
 8000f10:	f000 fba6 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(185,20,'E');
 8000f14:	2245      	movs	r2, #69	@ 0x45
 8000f16:	2114      	movs	r1, #20
 8000f18:	20b9      	movs	r0, #185	@ 0xb9
 8000f1a:	f000 fba1 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(200,20,'R');
 8000f1e:	2252      	movs	r2, #82	@ 0x52
 8000f20:	2114      	movs	r1, #20
 8000f22:	20c8      	movs	r0, #200	@ 0xc8
 8000f24:	f000 fb9c 	bl	8001660 <LCD_DisplayChar>

    char current = HUMAN;
 8000f28:	2358      	movs	r3, #88	@ 0x58
 8000f2a:	75fb      	strb	r3, [r7, #23]
    while (1) {
        int col;
        if (current == HUMAN) {
 8000f2c:	7dfb      	ldrb	r3, [r7, #23]
 8000f2e:	2b58      	cmp	r3, #88	@ 0x58
 8000f30:	d107      	bne.n	8000f42 <PlayOnePlayer+0xba>
            col = PollTouchColumn(HUMAN);
 8000f32:	2058      	movs	r0, #88	@ 0x58
 8000f34:	f7ff fe6e 	bl	8000c14 <PollTouchColumn>
 8000f38:	60b8      	str	r0, [r7, #8]
            HAL_Delay(200);
 8000f3a:	20c8      	movs	r0, #200	@ 0xc8
 8000f3c:	f002 f99c 	bl	8003278 <HAL_Delay>
 8000f40:	e050      	b.n	8000fe4 <PlayOnePlayer+0x15c>
        } else {

        	HAL_Delay(2000);
 8000f42:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f46:	f002 f997 	bl	8003278 <HAL_Delay>
            
            uint32_t rnd;
            do {
                HAL_RNG_GenerateRandomNumber(&hrng, &rnd);
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4839      	ldr	r0, [pc, #228]	@ (8001034 <PlayOnePlayer+0x1ac>)
 8000f50:	f004 ff22 	bl	8005d98 <HAL_RNG_GenerateRandomNumber>
                col = rnd % COLS;
 8000f54:	6839      	ldr	r1, [r7, #0]
 8000f56:	4b38      	ldr	r3, [pc, #224]	@ (8001038 <PlayOnePlayer+0x1b0>)
 8000f58:	fba3 2301 	umull	r2, r3, r3, r1
 8000f5c:	1aca      	subs	r2, r1, r3
 8000f5e:	0852      	lsrs	r2, r2, #1
 8000f60:	4413      	add	r3, r2
 8000f62:	089a      	lsrs	r2, r3, #2
 8000f64:	4613      	mov	r3, r2
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	1a9b      	subs	r3, r3, r2
 8000f6a:	1aca      	subs	r2, r1, r3
 8000f6c:	60ba      	str	r2, [r7, #8]
            } while (board[0][col] != ' ');
 8000f6e:	4a33      	ldr	r2, [pc, #204]	@ (800103c <PlayOnePlayer+0x1b4>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	4413      	add	r3, r2
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b20      	cmp	r3, #32
 8000f78:	d1e7      	bne.n	8000f4a <PlayOnePlayer+0xc2>
          
            for (int r = ROWS - 1; r >= 0; r--) {
 8000f7a:	2305      	movs	r3, #5
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	e02e      	b.n	8000fde <PlayOnePlayer+0x156>
                if (board[r][col] == ' ') {
 8000f80:	492e      	ldr	r1, [pc, #184]	@ (800103c <PlayOnePlayer+0x1b4>)
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4613      	mov	r3, r2
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	1a9b      	subs	r3, r3, r2
 8000f8a:	18ca      	adds	r2, r1, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	4413      	add	r3, r2
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b20      	cmp	r3, #32
 8000f94:	d120      	bne.n	8000fd8 <PlayOnePlayer+0x150>
                    board[r][col] = BOT;
 8000f96:	4929      	ldr	r1, [pc, #164]	@ (800103c <PlayOnePlayer+0x1b4>)
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	1a9b      	subs	r3, r3, r2
 8000fa0:	18ca      	adds	r2, r1, r3
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	224f      	movs	r2, #79	@ 0x4f
 8000fa8:	701a      	strb	r2, [r3, #0]
                    uint16_t x = ORIGIN_X + col * CELL_SPACING_X;
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	015b      	lsls	r3, r3, #5
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	3314      	adds	r3, #20
 8000fb4:	80fb      	strh	r3, [r7, #6]
                    uint16_t y = ORIGIN_Y + r * CELL_SPACING_Y;
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	461a      	mov	r2, r3
 8000fbc:	0092      	lsls	r2, r2, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	333c      	adds	r3, #60	@ 0x3c
 8000fc6:	80bb      	strh	r3, [r7, #4]
                    LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, PLAYER2_COLOR);
 8000fc8:	88b9      	ldrh	r1, [r7, #4]
 8000fca:	88f8      	ldrh	r0, [r7, #6]
 8000fcc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000fd0:	220d      	movs	r2, #13
 8000fd2:	f000 fa41 	bl	8001458 <LCD_Draw_Circle_Fill>
                    break;
 8000fd6:	e005      	b.n	8000fe4 <PlayOnePlayer+0x15c>
            for (int r = ROWS - 1; r >= 0; r--) {
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	dacd      	bge.n	8000f80 <PlayOnePlayer+0xf8>
                }
            }
        }
        if (checkWin(current) || isBoardFull()) break;
 8000fe4:	7dfb      	ldrb	r3, [r7, #23]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fec8 	bl	8000d7c <checkWin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10c      	bne.n	800100c <PlayOnePlayer+0x184>
 8000ff2:	f7ff ff1d 	bl	8000e30 <isBoardFull>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d107      	bne.n	800100c <PlayOnePlayer+0x184>
        current = (current == HUMAN) ? BOT : HUMAN;
 8000ffc:	7dfb      	ldrb	r3, [r7, #23]
 8000ffe:	2b58      	cmp	r3, #88	@ 0x58
 8001000:	d101      	bne.n	8001006 <PlayOnePlayer+0x17e>
 8001002:	234f      	movs	r3, #79	@ 0x4f
 8001004:	e000      	b.n	8001008 <PlayOnePlayer+0x180>
 8001006:	2358      	movs	r3, #88	@ 0x58
 8001008:	75fb      	strb	r3, [r7, #23]
    while (1) {
 800100a:	e78f      	b.n	8000f2c <PlayOnePlayer+0xa4>
    }
    lastRoundTimeSec = (HAL_GetTick() - startTick) / 1000;
 800100c:	f002 f928 	bl	8003260 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	4a0a      	ldr	r2, [pc, #40]	@ (8001040 <PlayOnePlayer+0x1b8>)
 8001018:	fba2 2303 	umull	r2, r3, r2, r3
 800101c:	099b      	lsrs	r3, r3, #6
 800101e:	4a09      	ldr	r2, [pc, #36]	@ (8001044 <PlayOnePlayer+0x1bc>)
 8001020:	6013      	str	r3, [r2, #0]
}
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200000b4 	.word	0x200000b4
 8001030:	20000004 	.word	0x20000004
 8001034:	20025b20 	.word	0x20025b20
 8001038:	24924925 	.word	0x24924925
 800103c:	200000b8 	.word	0x200000b8
 8001040:	10624dd3 	.word	0x10624dd3
 8001044:	200000b0 	.word	0x200000b0

08001048 <PlayTwoPlayer>:



void PlayTwoPlayer(void) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
    lastMode = 2;
 800104e:	4b3c      	ldr	r3, [pc, #240]	@ (8001140 <PlayTwoPlayer+0xf8>)
 8001050:	2202      	movs	r2, #2
 8001052:	601a      	str	r2, [r3, #0]
    uint32_t startTick = HAL_GetTick();
 8001054:	f002 f904 	bl	8003260 <HAL_GetTick>
 8001058:	6038      	str	r0, [r7, #0]
    initBoard();
 800105a:	f7ff fd7f 	bl	8000b5c <initBoard>
    GameScreen_Init();
 800105e:	f7ff fda5 	bl	8000bac <GameScreen_Init>

    LCD_SetTextColor(LCD_COLOR_WHITE);
 8001062:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001066:	f000 fa6d 	bl	8001544 <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 800106a:	4836      	ldr	r0, [pc, #216]	@ (8001144 <PlayTwoPlayer+0xfc>)
 800106c:	f000 fa7a 	bl	8001564 <LCD_SetFont>
    LCD_DisplayChar(20,20,'2');
 8001070:	2232      	movs	r2, #50	@ 0x32
 8001072:	2114      	movs	r1, #20
 8001074:	2014      	movs	r0, #20
 8001076:	f000 faf3 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(35,20,'-');
 800107a:	222d      	movs	r2, #45	@ 0x2d
 800107c:	2114      	movs	r1, #20
 800107e:	2023      	movs	r0, #35	@ 0x23
 8001080:	f000 faee 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(50,20,'P');
 8001084:	2250      	movs	r2, #80	@ 0x50
 8001086:	2114      	movs	r1, #20
 8001088:	2032      	movs	r0, #50	@ 0x32
 800108a:	f000 fae9 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(65,20,'L');
 800108e:	224c      	movs	r2, #76	@ 0x4c
 8001090:	2114      	movs	r1, #20
 8001092:	2041      	movs	r0, #65	@ 0x41
 8001094:	f000 fae4 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(80,20,'A');
 8001098:	2241      	movs	r2, #65	@ 0x41
 800109a:	2114      	movs	r1, #20
 800109c:	2050      	movs	r0, #80	@ 0x50
 800109e:	f000 fadf 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(95,20,'Y');
 80010a2:	2259      	movs	r2, #89	@ 0x59
 80010a4:	2114      	movs	r1, #20
 80010a6:	205f      	movs	r0, #95	@ 0x5f
 80010a8:	f000 fada 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(110,20,'E');
 80010ac:	2245      	movs	r2, #69	@ 0x45
 80010ae:	2114      	movs	r1, #20
 80010b0:	206e      	movs	r0, #110	@ 0x6e
 80010b2:	f000 fad5 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(125,20,'R');
 80010b6:	2252      	movs	r2, #82	@ 0x52
 80010b8:	2114      	movs	r1, #20
 80010ba:	207d      	movs	r0, #125	@ 0x7d
 80010bc:	f000 fad0 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(155,20,'M');
 80010c0:	224d      	movs	r2, #77	@ 0x4d
 80010c2:	2114      	movs	r1, #20
 80010c4:	209b      	movs	r0, #155	@ 0x9b
 80010c6:	f000 facb 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(170,20,'O');
 80010ca:	224f      	movs	r2, #79	@ 0x4f
 80010cc:	2114      	movs	r1, #20
 80010ce:	20aa      	movs	r0, #170	@ 0xaa
 80010d0:	f000 fac6 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(185,20,'D');
 80010d4:	2244      	movs	r2, #68	@ 0x44
 80010d6:	2114      	movs	r1, #20
 80010d8:	20b9      	movs	r0, #185	@ 0xb9
 80010da:	f000 fac1 	bl	8001660 <LCD_DisplayChar>
    LCD_DisplayChar(200,20,'E');
 80010de:	2245      	movs	r2, #69	@ 0x45
 80010e0:	2114      	movs	r1, #20
 80010e2:	20c8      	movs	r0, #200	@ 0xc8
 80010e4:	f000 fabc 	bl	8001660 <LCD_DisplayChar>

    char current = HUMAN;
 80010e8:	2358      	movs	r3, #88	@ 0x58
 80010ea:	71fb      	strb	r3, [r7, #7]
    while (1) {
      
        PollTouchColumn(current);
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fd90 	bl	8000c14 <PollTouchColumn>
        HAL_Delay(200);
 80010f4:	20c8      	movs	r0, #200	@ 0xc8
 80010f6:	f002 f8bf 	bl	8003278 <HAL_Delay>
        if (checkWin(current) || isBoardFull()) break;
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fe3d 	bl	8000d7c <checkWin>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d10c      	bne.n	8001122 <PlayTwoPlayer+0xda>
 8001108:	f7ff fe92 	bl	8000e30 <isBoardFull>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d107      	bne.n	8001122 <PlayTwoPlayer+0xda>
        current = (current == HUMAN) ? BOT : HUMAN;
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2b58      	cmp	r3, #88	@ 0x58
 8001116:	d101      	bne.n	800111c <PlayTwoPlayer+0xd4>
 8001118:	234f      	movs	r3, #79	@ 0x4f
 800111a:	e000      	b.n	800111e <PlayTwoPlayer+0xd6>
 800111c:	2358      	movs	r3, #88	@ 0x58
 800111e:	71fb      	strb	r3, [r7, #7]
        PollTouchColumn(current);
 8001120:	e7e4      	b.n	80010ec <PlayTwoPlayer+0xa4>
    }
    lastRoundTimeSec = (HAL_GetTick() - startTick) / 1000;
 8001122:	f002 f89d 	bl	8003260 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	4a06      	ldr	r2, [pc, #24]	@ (8001148 <PlayTwoPlayer+0x100>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	4a05      	ldr	r2, [pc, #20]	@ (800114c <PlayTwoPlayer+0x104>)
 8001136:	6013      	str	r3, [r2, #0]

}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200000b4 	.word	0x200000b4
 8001144:	20000004 	.word	0x20000004
 8001148:	10624dd3 	.word	0x10624dd3
 800114c:	200000b0 	.word	0x200000b0

08001150 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08c      	sub	sp, #48	@ 0x30
 8001154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
 800115a:	4b5a      	ldr	r3, [pc, #360]	@ (80012c4 <LCD_GPIO_Init+0x174>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115e:	4a59      	ldr	r2, [pc, #356]	@ (80012c4 <LCD_GPIO_Init+0x174>)
 8001160:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001164:	6453      	str	r3, [r2, #68]	@ 0x44
 8001166:	4b57      	ldr	r3, [pc, #348]	@ (80012c4 <LCD_GPIO_Init+0x174>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800116e:	61bb      	str	r3, [r7, #24]
 8001170:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	4b53      	ldr	r3, [pc, #332]	@ (80012c4 <LCD_GPIO_Init+0x174>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a52      	ldr	r2, [pc, #328]	@ (80012c4 <LCD_GPIO_Init+0x174>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b50      	ldr	r3, [pc, #320]	@ (80012c4 <LCD_GPIO_Init+0x174>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b4c      	ldr	r3, [pc, #304]	@ (80012c4 <LCD_GPIO_Init+0x174>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a4b      	ldr	r2, [pc, #300]	@ (80012c4 <LCD_GPIO_Init+0x174>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b49      	ldr	r3, [pc, #292]	@ (80012c4 <LCD_GPIO_Init+0x174>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b45      	ldr	r3, [pc, #276]	@ (80012c4 <LCD_GPIO_Init+0x174>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a44      	ldr	r2, [pc, #272]	@ (80012c4 <LCD_GPIO_Init+0x174>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b42      	ldr	r3, [pc, #264]	@ (80012c4 <LCD_GPIO_Init+0x174>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	4b3e      	ldr	r3, [pc, #248]	@ (80012c4 <LCD_GPIO_Init+0x174>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a3d      	ldr	r2, [pc, #244]	@ (80012c4 <LCD_GPIO_Init+0x174>)
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b3b      	ldr	r3, [pc, #236]	@ (80012c4 <LCD_GPIO_Init+0x174>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b37      	ldr	r3, [pc, #220]	@ (80012c4 <LCD_GPIO_Init+0x174>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a36      	ldr	r2, [pc, #216]	@ (80012c4 <LCD_GPIO_Init+0x174>)
 80011ec:	f043 0320 	orr.w	r3, r3, #32
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b34      	ldr	r3, [pc, #208]	@ (80012c4 <LCD_GPIO_Init+0x174>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0320 	and.w	r3, r3, #32
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	4b30      	ldr	r3, [pc, #192]	@ (80012c4 <LCD_GPIO_Init+0x174>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a2f      	ldr	r2, [pc, #188]	@ (80012c4 <LCD_GPIO_Init+0x174>)
 8001208:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b2d      	ldr	r3, [pc, #180]	@ (80012c4 <LCD_GPIO_Init+0x174>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800121a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800121e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001228:	2302      	movs	r3, #2
 800122a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800122c:	230e      	movs	r3, #14
 800122e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	4824      	ldr	r0, [pc, #144]	@ (80012c8 <LCD_GPIO_Init+0x178>)
 8001238:	f002 f928 	bl	800348c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800123c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001240:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	4619      	mov	r1, r3
 8001248:	4820      	ldr	r0, [pc, #128]	@ (80012cc <LCD_GPIO_Init+0x17c>)
 800124a:	f002 f91f 	bl	800348c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800124e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	4619      	mov	r1, r3
 800125a:	481d      	ldr	r0, [pc, #116]	@ (80012d0 <LCD_GPIO_Init+0x180>)
 800125c:	f002 f916 	bl	800348c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001260:	2348      	movs	r3, #72	@ 0x48
 8001262:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	4619      	mov	r1, r3
 800126a:	481a      	ldr	r0, [pc, #104]	@ (80012d4 <LCD_GPIO_Init+0x184>)
 800126c:	f002 f90e 	bl	800348c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001270:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001274:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	4619      	mov	r1, r3
 800127c:	4816      	ldr	r0, [pc, #88]	@ (80012d8 <LCD_GPIO_Init+0x188>)
 800127e:	f002 f905 	bl	800348c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001282:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001286:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	4619      	mov	r1, r3
 800128e:	4813      	ldr	r0, [pc, #76]	@ (80012dc <LCD_GPIO_Init+0x18c>)
 8001290:	f002 f8fc 	bl	800348c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001294:	2303      	movs	r3, #3
 8001296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001298:	2309      	movs	r3, #9
 800129a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	4619      	mov	r1, r3
 80012a2:	480a      	ldr	r0, [pc, #40]	@ (80012cc <LCD_GPIO_Init+0x17c>)
 80012a4:	f002 f8f2 	bl	800348c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80012a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	4619      	mov	r1, r3
 80012b4:	4809      	ldr	r0, [pc, #36]	@ (80012dc <LCD_GPIO_Init+0x18c>)
 80012b6:	f002 f8e9 	bl	800348c <HAL_GPIO_Init>
}
 80012ba:	bf00      	nop
 80012bc:	3730      	adds	r7, #48	@ 0x30
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40020400 	.word	0x40020400
 80012d0:	40020800 	.word	0x40020800
 80012d4:	40020c00 	.word	0x40020c00
 80012d8:	40021400 	.word	0x40021400
 80012dc:	40021800 	.word	0x40021800

080012e0 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b090      	sub	sp, #64	@ 0x40
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80012ee:	23f0      	movs	r3, #240	@ 0xf0
 80012f0:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80012f6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80012fa:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80012fc:	2302      	movs	r3, #2
 80012fe:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001300:	23ff      	movs	r3, #255	@ 0xff
 8001302:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001308:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800130c:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800130e:	2305      	movs	r3, #5
 8001310:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001318:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <LTCD_Layer_Init+0x78>)
 800131a:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 800131c:	23f0      	movs	r3, #240	@ 0xf0
 800131e:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001320:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001324:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001338:	79fa      	ldrb	r2, [r7, #7]
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	4619      	mov	r1, r3
 8001340:	4806      	ldr	r0, [pc, #24]	@ (800135c <LTCD_Layer_Init+0x7c>)
 8001342:	f003 fce5 	bl	8004d10 <HAL_LTDC_ConfigLayer>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 800134c:	f000 f9aa 	bl	80016a4 <LCD_Error_Handler>
	}
}
 8001350:	bf00      	nop
 8001352:	3740      	adds	r7, #64	@ 0x40
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200001c8 	.word	0x200001c8
 800135c:	200000ec 	.word	0x200000ec

08001360 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001364:	4b2a      	ldr	r3, [pc, #168]	@ (8001410 <LTCD__Init+0xb0>)
 8001366:	4a2b      	ldr	r2, [pc, #172]	@ (8001414 <LTCD__Init+0xb4>)
 8001368:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800136a:	4b29      	ldr	r3, [pc, #164]	@ (8001410 <LTCD__Init+0xb0>)
 800136c:	2209      	movs	r2, #9
 800136e:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001370:	4b27      	ldr	r3, [pc, #156]	@ (8001410 <LTCD__Init+0xb0>)
 8001372:	2201      	movs	r2, #1
 8001374:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8001376:	4b26      	ldr	r3, [pc, #152]	@ (8001410 <LTCD__Init+0xb0>)
 8001378:	221d      	movs	r2, #29
 800137a:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 800137c:	4b24      	ldr	r3, [pc, #144]	@ (8001410 <LTCD__Init+0xb0>)
 800137e:	2203      	movs	r2, #3
 8001380:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8001382:	4b23      	ldr	r3, [pc, #140]	@ (8001410 <LTCD__Init+0xb0>)
 8001384:	f240 120d 	movw	r2, #269	@ 0x10d
 8001388:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800138a:	4b21      	ldr	r3, [pc, #132]	@ (8001410 <LTCD__Init+0xb0>)
 800138c:	f240 1243 	movw	r2, #323	@ 0x143
 8001390:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8001392:	4b1f      	ldr	r3, [pc, #124]	@ (8001410 <LTCD__Init+0xb0>)
 8001394:	f240 1217 	movw	r2, #279	@ 0x117
 8001398:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800139a:	4b1d      	ldr	r3, [pc, #116]	@ (8001410 <LTCD__Init+0xb0>)
 800139c:	f240 1247 	movw	r2, #327	@ 0x147
 80013a0:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80013a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001410 <LTCD__Init+0xb0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80013aa:	4b19      	ldr	r3, [pc, #100]	@ (8001410 <LTCD__Init+0xb0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80013b2:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <LTCD__Init+0xb0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80013ba:	4b17      	ldr	r3, [pc, #92]	@ (8001418 <LTCD__Init+0xb8>)
 80013bc:	2208      	movs	r2, #8
 80013be:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80013c0:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <LTCD__Init+0xb8>)
 80013c2:	22c0      	movs	r2, #192	@ 0xc0
 80013c4:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80013c6:	4b14      	ldr	r3, [pc, #80]	@ (8001418 <LTCD__Init+0xb8>)
 80013c8:	2204      	movs	r2, #4
 80013ca:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80013cc:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <LTCD__Init+0xb8>)
 80013ce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013d2:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80013d4:	4810      	ldr	r0, [pc, #64]	@ (8001418 <LTCD__Init+0xb8>)
 80013d6:	f004 faf5 	bl	80059c4 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80013da:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <LTCD__Init+0xb0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80013e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <LTCD__Init+0xb0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80013e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <LTCD__Init+0xb0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80013ec:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <LTCD__Init+0xb0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80013f2:	f7ff fead 	bl	8001150 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013f6:	4806      	ldr	r0, [pc, #24]	@ (8001410 <LTCD__Init+0xb0>)
 80013f8:	f003 fbba 	bl	8004b70 <HAL_LTDC_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8001402:	f000 f94f 	bl	80016a4 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8001406:	f000 f975 	bl	80016f4 <ili9341_Init>
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200000ec 	.word	0x200000ec
 8001414:	40016800 	.word	0x40016800
 8001418:	20000194 	.word	0x20000194

0800141c <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]
 8001426:	460b      	mov	r3, r1
 8001428:	80bb      	strh	r3, [r7, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 800142e:	88ba      	ldrh	r2, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	1a9b      	subs	r3, r3, r2
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	461a      	mov	r2, r3
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	4413      	add	r3, r2
 800143e:	4905      	ldr	r1, [pc, #20]	@ (8001454 <LCD_Draw_Pixel+0x38>)
 8001440:	887a      	ldrh	r2, [r7, #2]
 8001442:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	200001c8 	.word	0x200001c8

08001458 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	4604      	mov	r4, r0
 8001460:	4608      	mov	r0, r1
 8001462:	4611      	mov	r1, r2
 8001464:	461a      	mov	r2, r3
 8001466:	4623      	mov	r3, r4
 8001468:	80fb      	strh	r3, [r7, #6]
 800146a:	4603      	mov	r3, r0
 800146c:	80bb      	strh	r3, [r7, #4]
 800146e:	460b      	mov	r3, r1
 8001470:	807b      	strh	r3, [r7, #2]
 8001472:	4613      	mov	r3, r2
 8001474:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8001476:	887b      	ldrh	r3, [r7, #2]
 8001478:	425b      	negs	r3, r3
 800147a:	b29b      	uxth	r3, r3
 800147c:	81fb      	strh	r3, [r7, #14]
 800147e:	e034      	b.n	80014ea <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8001480:	887b      	ldrh	r3, [r7, #2]
 8001482:	425b      	negs	r3, r3
 8001484:	b29b      	uxth	r3, r3
 8001486:	81bb      	strh	r3, [r7, #12]
 8001488:	e024      	b.n	80014d4 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 800148a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800148e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001492:	fb03 f202 	mul.w	r2, r3, r2
 8001496:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800149a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800149e:	fb01 f303 	mul.w	r3, r1, r3
 80014a2:	441a      	add	r2, r3
 80014a4:	887b      	ldrh	r3, [r7, #2]
 80014a6:	8879      	ldrh	r1, [r7, #2]
 80014a8:	fb01 f303 	mul.w	r3, r1, r3
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dc0b      	bgt.n	80014c8 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 80014b0:	89ba      	ldrh	r2, [r7, #12]
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	4413      	add	r3, r2
 80014b6:	b298      	uxth	r0, r3
 80014b8:	89fa      	ldrh	r2, [r7, #14]
 80014ba:	88bb      	ldrh	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	b29b      	uxth	r3, r3
 80014c0:	883a      	ldrh	r2, [r7, #0]
 80014c2:	4619      	mov	r1, r3
 80014c4:	f7ff ffaa 	bl	800141c <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 80014c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	3301      	adds	r3, #1
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	81bb      	strh	r3, [r7, #12]
 80014d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	429a      	cmp	r2, r3
 80014dc:	ddd5      	ble.n	800148a <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 80014de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	3301      	adds	r3, #1
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	81fb      	strh	r3, [r7, #14]
 80014ea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014ee:	887b      	ldrh	r3, [r7, #2]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	ddc5      	ble.n	8001480 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd90      	pop	{r4, r7, pc}
	...

08001500 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	460a      	mov	r2, r1
 800150a:	71fb      	strb	r3, [r7, #7]
 800150c:	4613      	mov	r3, r2
 800150e:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10e      	bne.n	8001534 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	e007      	b.n	800152c <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 800151c:	4908      	ldr	r1, [pc, #32]	@ (8001540 <LCD_Clear+0x40>)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	88ba      	ldrh	r2, [r7, #4]
 8001522:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3301      	adds	r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001532:	d3f3      	bcc.n	800151c <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	200001c8 	.word	0x200001c8

08001544 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 800154e:	4a04      	ldr	r2, [pc, #16]	@ (8001560 <LCD_SetTextColor+0x1c>)
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	8013      	strh	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	20000000 	.word	0x20000000

08001564 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 800156c:	4a04      	ldr	r2, [pc, #16]	@ (8001580 <LCD_SetFont+0x1c>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6013      	str	r3, [r2, #0]
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	200001c4 	.word	0x200001c4

08001584 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	603a      	str	r2, [r7, #0]
 800158e:	80fb      	strh	r3, [r7, #6]
 8001590:	460b      	mov	r3, r1
 8001592:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	e04c      	b.n	800163c <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	e03f      	b.n	8001628 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	4619      	mov	r1, r3
 80015b4:	4b27      	ldr	r3, [pc, #156]	@ (8001654 <LCD_Draw_Char+0xd0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	889b      	ldrh	r3, [r3, #4]
 80015ba:	4a27      	ldr	r2, [pc, #156]	@ (8001658 <LCD_Draw_Char+0xd4>)
 80015bc:	fba2 2303 	umull	r2, r3, r2, r3
 80015c0:	08db      	lsrs	r3, r3, #3
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	2280      	movs	r2, #128	@ 0x80
 80015c8:	409a      	lsls	r2, r3
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	fa42 f303 	asr.w	r3, r2, r3
 80015d0:	400b      	ands	r3, r1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d104      	bne.n	80015e0 <LCD_Draw_Char+0x5c>
 80015d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001654 <LCD_Draw_Char+0xd0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	889b      	ldrh	r3, [r3, #4]
 80015dc:	2b0c      	cmp	r3, #12
 80015de:	d920      	bls.n	8001622 <LCD_Draw_Char+0x9e>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	fa42 f303 	asr.w	r3, r2, r3
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d104      	bne.n	8001604 <LCD_Draw_Char+0x80>
 80015fa:	4b16      	ldr	r3, [pc, #88]	@ (8001654 <LCD_Draw_Char+0xd0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	889b      	ldrh	r3, [r3, #4]
 8001600:	2b0c      	cmp	r3, #12
 8001602:	d80e      	bhi.n	8001622 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	b29a      	uxth	r2, r3
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	4413      	add	r3, r2
 800160c:	b298      	uxth	r0, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	b29a      	uxth	r2, r3
 8001612:	88bb      	ldrh	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	b29b      	uxth	r3, r3
 8001618:	4a10      	ldr	r2, [pc, #64]	@ (800165c <LCD_Draw_Char+0xd8>)
 800161a:	8812      	ldrh	r2, [r2, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	f7ff fefd 	bl	800141c <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	3301      	adds	r3, #1
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	4b0a      	ldr	r3, [pc, #40]	@ (8001654 <LCD_Draw_Char+0xd0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	889b      	ldrh	r3, [r3, #4]
 800162e:	461a      	mov	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4293      	cmp	r3, r2
 8001634:	d3b8      	bcc.n	80015a8 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3301      	adds	r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <LCD_Draw_Char+0xd0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	88db      	ldrh	r3, [r3, #6]
 8001642:	461a      	mov	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4293      	cmp	r3, r2
 8001648:	d3ab      	bcc.n	80015a2 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 800164a:	bf00      	nop
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200001c4 	.word	0x200001c4
 8001658:	aaaaaaab 	.word	0xaaaaaaab
 800165c:	20000000 	.word	0x20000000

08001660 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	80fb      	strh	r3, [r7, #6]
 800166a:	460b      	mov	r3, r1
 800166c:	80bb      	strh	r3, [r7, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	3b20      	subs	r3, #32
 8001676:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001678:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <LCD_DisplayChar+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	78fb      	ldrb	r3, [r7, #3]
 8001680:	4907      	ldr	r1, [pc, #28]	@ (80016a0 <LCD_DisplayChar+0x40>)
 8001682:	6809      	ldr	r1, [r1, #0]
 8001684:	88c9      	ldrh	r1, [r1, #6]
 8001686:	fb01 f303 	mul.w	r3, r1, r3
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	441a      	add	r2, r3
 800168e:	88b9      	ldrh	r1, [r7, #4]
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ff76 	bl	8001584 <LCD_Draw_Char>
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	200001c4 	.word	0x200001c4

080016a4 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a8:	b672      	cpsid	i
}
 80016aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <LCD_Error_Handler+0x8>

080016b0 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 80016b4:	f001 f93b 	bl	800292e <STMPE811_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d001      	beq.n	80016c2 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 80016be:	bf00      	nop
 80016c0:	e7fd      	b.n	80016be <InitializeLCDTouch+0xe>
  }
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f001 f9e5 	bl	8002a9e <STMPE811_ReadTouch>
 80016d4:	4603      	mov	r3, r0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <DetermineTouchPosition>:

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f001 faa5 	bl	8002c36 <STMPE811_DetermineTouchPosition>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80016f8:	f000 f9fe 	bl	8001af8 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80016fc:	20ca      	movs	r0, #202	@ 0xca
 80016fe:	f000 f943 	bl	8001988 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001702:	20c3      	movs	r0, #195	@ 0xc3
 8001704:	f000 f94d 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001708:	2008      	movs	r0, #8
 800170a:	f000 f94a 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 800170e:	2050      	movs	r0, #80	@ 0x50
 8001710:	f000 f947 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001714:	20cf      	movs	r0, #207	@ 0xcf
 8001716:	f000 f937 	bl	8001988 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800171a:	2000      	movs	r0, #0
 800171c:	f000 f941 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001720:	20c1      	movs	r0, #193	@ 0xc1
 8001722:	f000 f93e 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001726:	2030      	movs	r0, #48	@ 0x30
 8001728:	f000 f93b 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 800172c:	20ed      	movs	r0, #237	@ 0xed
 800172e:	f000 f92b 	bl	8001988 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001732:	2064      	movs	r0, #100	@ 0x64
 8001734:	f000 f935 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001738:	2003      	movs	r0, #3
 800173a:	f000 f932 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800173e:	2012      	movs	r0, #18
 8001740:	f000 f92f 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001744:	2081      	movs	r0, #129	@ 0x81
 8001746:	f000 f92c 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800174a:	20e8      	movs	r0, #232	@ 0xe8
 800174c:	f000 f91c 	bl	8001988 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001750:	2085      	movs	r0, #133	@ 0x85
 8001752:	f000 f926 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001756:	2000      	movs	r0, #0
 8001758:	f000 f923 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800175c:	2078      	movs	r0, #120	@ 0x78
 800175e:	f000 f920 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001762:	20cb      	movs	r0, #203	@ 0xcb
 8001764:	f000 f910 	bl	8001988 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001768:	2039      	movs	r0, #57	@ 0x39
 800176a:	f000 f91a 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800176e:	202c      	movs	r0, #44	@ 0x2c
 8001770:	f000 f917 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001774:	2000      	movs	r0, #0
 8001776:	f000 f914 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800177a:	2034      	movs	r0, #52	@ 0x34
 800177c:	f000 f911 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001780:	2002      	movs	r0, #2
 8001782:	f000 f90e 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001786:	20f7      	movs	r0, #247	@ 0xf7
 8001788:	f000 f8fe 	bl	8001988 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 800178c:	2020      	movs	r0, #32
 800178e:	f000 f908 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001792:	20ea      	movs	r0, #234	@ 0xea
 8001794:	f000 f8f8 	bl	8001988 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001798:	2000      	movs	r0, #0
 800179a:	f000 f902 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800179e:	2000      	movs	r0, #0
 80017a0:	f000 f8ff 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80017a4:	20b1      	movs	r0, #177	@ 0xb1
 80017a6:	f000 f8ef 	bl	8001988 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 f8f9 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80017b0:	201b      	movs	r0, #27
 80017b2:	f000 f8f6 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80017b6:	20b6      	movs	r0, #182	@ 0xb6
 80017b8:	f000 f8e6 	bl	8001988 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80017bc:	200a      	movs	r0, #10
 80017be:	f000 f8f0 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80017c2:	20a2      	movs	r0, #162	@ 0xa2
 80017c4:	f000 f8ed 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80017c8:	20c0      	movs	r0, #192	@ 0xc0
 80017ca:	f000 f8dd 	bl	8001988 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80017ce:	2010      	movs	r0, #16
 80017d0:	f000 f8e7 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80017d4:	20c1      	movs	r0, #193	@ 0xc1
 80017d6:	f000 f8d7 	bl	8001988 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80017da:	2010      	movs	r0, #16
 80017dc:	f000 f8e1 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80017e0:	20c5      	movs	r0, #197	@ 0xc5
 80017e2:	f000 f8d1 	bl	8001988 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80017e6:	2045      	movs	r0, #69	@ 0x45
 80017e8:	f000 f8db 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80017ec:	2015      	movs	r0, #21
 80017ee:	f000 f8d8 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80017f2:	20c7      	movs	r0, #199	@ 0xc7
 80017f4:	f000 f8c8 	bl	8001988 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80017f8:	2090      	movs	r0, #144	@ 0x90
 80017fa:	f000 f8d2 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80017fe:	2036      	movs	r0, #54	@ 0x36
 8001800:	f000 f8c2 	bl	8001988 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001804:	20c8      	movs	r0, #200	@ 0xc8
 8001806:	f000 f8cc 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800180a:	20f2      	movs	r0, #242	@ 0xf2
 800180c:	f000 f8bc 	bl	8001988 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001810:	2000      	movs	r0, #0
 8001812:	f000 f8c6 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001816:	20b0      	movs	r0, #176	@ 0xb0
 8001818:	f000 f8b6 	bl	8001988 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 800181c:	20c2      	movs	r0, #194	@ 0xc2
 800181e:	f000 f8c0 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001822:	20b6      	movs	r0, #182	@ 0xb6
 8001824:	f000 f8b0 	bl	8001988 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001828:	200a      	movs	r0, #10
 800182a:	f000 f8ba 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800182e:	20a7      	movs	r0, #167	@ 0xa7
 8001830:	f000 f8b7 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001834:	2027      	movs	r0, #39	@ 0x27
 8001836:	f000 f8b4 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800183a:	2004      	movs	r0, #4
 800183c:	f000 f8b1 	bl	80019a2 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001840:	202a      	movs	r0, #42	@ 0x2a
 8001842:	f000 f8a1 	bl	8001988 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001846:	2000      	movs	r0, #0
 8001848:	f000 f8ab 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800184c:	2000      	movs	r0, #0
 800184e:	f000 f8a8 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001852:	2000      	movs	r0, #0
 8001854:	f000 f8a5 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001858:	20ef      	movs	r0, #239	@ 0xef
 800185a:	f000 f8a2 	bl	80019a2 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800185e:	202b      	movs	r0, #43	@ 0x2b
 8001860:	f000 f892 	bl	8001988 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001864:	2000      	movs	r0, #0
 8001866:	f000 f89c 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800186a:	2000      	movs	r0, #0
 800186c:	f000 f899 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001870:	2001      	movs	r0, #1
 8001872:	f000 f896 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001876:	203f      	movs	r0, #63	@ 0x3f
 8001878:	f000 f893 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 800187c:	20f6      	movs	r0, #246	@ 0xf6
 800187e:	f000 f883 	bl	8001988 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001882:	2001      	movs	r0, #1
 8001884:	f000 f88d 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001888:	2000      	movs	r0, #0
 800188a:	f000 f88a 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800188e:	2006      	movs	r0, #6
 8001890:	f000 f887 	bl	80019a2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001894:	202c      	movs	r0, #44	@ 0x2c
 8001896:	f000 f877 	bl	8001988 <ili9341_Write_Reg>
  LCD_Delay(200);
 800189a:	20c8      	movs	r0, #200	@ 0xc8
 800189c:	f000 f9e8 	bl	8001c70 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80018a0:	2026      	movs	r0, #38	@ 0x26
 80018a2:	f000 f871 	bl	8001988 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80018a6:	2001      	movs	r0, #1
 80018a8:	f000 f87b 	bl	80019a2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80018ac:	20e0      	movs	r0, #224	@ 0xe0
 80018ae:	f000 f86b 	bl	8001988 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80018b2:	200f      	movs	r0, #15
 80018b4:	f000 f875 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80018b8:	2029      	movs	r0, #41	@ 0x29
 80018ba:	f000 f872 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80018be:	2024      	movs	r0, #36	@ 0x24
 80018c0:	f000 f86f 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80018c4:	200c      	movs	r0, #12
 80018c6:	f000 f86c 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80018ca:	200e      	movs	r0, #14
 80018cc:	f000 f869 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80018d0:	2009      	movs	r0, #9
 80018d2:	f000 f866 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80018d6:	204e      	movs	r0, #78	@ 0x4e
 80018d8:	f000 f863 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80018dc:	2078      	movs	r0, #120	@ 0x78
 80018de:	f000 f860 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80018e2:	203c      	movs	r0, #60	@ 0x3c
 80018e4:	f000 f85d 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80018e8:	2009      	movs	r0, #9
 80018ea:	f000 f85a 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80018ee:	2013      	movs	r0, #19
 80018f0:	f000 f857 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80018f4:	2005      	movs	r0, #5
 80018f6:	f000 f854 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80018fa:	2017      	movs	r0, #23
 80018fc:	f000 f851 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001900:	2011      	movs	r0, #17
 8001902:	f000 f84e 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001906:	2000      	movs	r0, #0
 8001908:	f000 f84b 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 800190c:	20e1      	movs	r0, #225	@ 0xe1
 800190e:	f000 f83b 	bl	8001988 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001912:	2000      	movs	r0, #0
 8001914:	f000 f845 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001918:	2016      	movs	r0, #22
 800191a:	f000 f842 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800191e:	201b      	movs	r0, #27
 8001920:	f000 f83f 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001924:	2004      	movs	r0, #4
 8001926:	f000 f83c 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800192a:	2011      	movs	r0, #17
 800192c:	f000 f839 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001930:	2007      	movs	r0, #7
 8001932:	f000 f836 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001936:	2031      	movs	r0, #49	@ 0x31
 8001938:	f000 f833 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 800193c:	2033      	movs	r0, #51	@ 0x33
 800193e:	f000 f830 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001942:	2042      	movs	r0, #66	@ 0x42
 8001944:	f000 f82d 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001948:	2005      	movs	r0, #5
 800194a:	f000 f82a 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800194e:	200c      	movs	r0, #12
 8001950:	f000 f827 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001954:	200a      	movs	r0, #10
 8001956:	f000 f824 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800195a:	2028      	movs	r0, #40	@ 0x28
 800195c:	f000 f821 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001960:	202f      	movs	r0, #47	@ 0x2f
 8001962:	f000 f81e 	bl	80019a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001966:	200f      	movs	r0, #15
 8001968:	f000 f81b 	bl	80019a2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 800196c:	2011      	movs	r0, #17
 800196e:	f000 f80b 	bl	8001988 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001972:	20c8      	movs	r0, #200	@ 0xc8
 8001974:	f000 f97c 	bl	8001c70 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001978:	2029      	movs	r0, #41	@ 0x29
 800197a:	f000 f805 	bl	8001988 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800197e:	202c      	movs	r0, #44	@ 0x2c
 8001980:	f000 f802 	bl	8001988 <ili9341_Write_Reg>
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}

08001988 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	4618      	mov	r0, r3
 8001996:	f000 f949 	bl	8001c2c <LCD_IO_WriteReg>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 f91a 	bl	8001be8 <LCD_IO_WriteData>
}
 80019b4:	bf00      	nop
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80019c0:	4819      	ldr	r0, [pc, #100]	@ (8001a28 <SPI_Init+0x6c>)
 80019c2:	f004 fc34 	bl	800622e <HAL_SPI_GetState>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d12b      	bne.n	8001a24 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80019cc:	4b16      	ldr	r3, [pc, #88]	@ (8001a28 <SPI_Init+0x6c>)
 80019ce:	4a17      	ldr	r2, [pc, #92]	@ (8001a2c <SPI_Init+0x70>)
 80019d0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <SPI_Init+0x6c>)
 80019d4:	2218      	movs	r2, #24
 80019d6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80019d8:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <SPI_Init+0x6c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80019de:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <SPI_Init+0x6c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80019e4:	4b10      	ldr	r3, [pc, #64]	@ (8001a28 <SPI_Init+0x6c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80019ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <SPI_Init+0x6c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80019f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a28 <SPI_Init+0x6c>)
 80019f2:	2207      	movs	r2, #7
 80019f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80019f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <SPI_Init+0x6c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80019fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <SPI_Init+0x6c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001a02:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <SPI_Init+0x6c>)
 8001a04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a08:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001a0a:	4b07      	ldr	r3, [pc, #28]	@ (8001a28 <SPI_Init+0x6c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001a10:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <SPI_Init+0x6c>)
 8001a12:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a16:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001a18:	4803      	ldr	r0, [pc, #12]	@ (8001a28 <SPI_Init+0x6c>)
 8001a1a:	f000 f833 	bl	8001a84 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001a1e:	4802      	ldr	r0, [pc, #8]	@ (8001a28 <SPI_Init+0x6c>)
 8001a20:	f004 fa10 	bl	8005e44 <HAL_SPI_Init>
  }
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	200259c8 	.word	0x200259c8
 8001a2c:	40015000 	.word	0x40015000

08001a30 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001a3e:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <SPI_Write+0x34>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	1db9      	adds	r1, r7, #6
 8001a44:	2201      	movs	r2, #1
 8001a46:	4808      	ldr	r0, [pc, #32]	@ (8001a68 <SPI_Write+0x38>)
 8001a48:	f004 faad 	bl	8005fa6 <HAL_SPI_Transmit>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001a56:	f000 f809 	bl	8001a6c <SPI_Error>
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000014 	.word	0x20000014
 8001a68:	200259c8 	.word	0x200259c8

08001a6c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001a70:	4803      	ldr	r0, [pc, #12]	@ (8001a80 <SPI_Error+0x14>)
 8001a72:	f004 fa70 	bl	8005f56 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001a76:	f7ff ffa1 	bl	80019bc <SPI_Init>
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200259c8 	.word	0x200259c8

08001a84 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	@ 0x28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	4b17      	ldr	r3, [pc, #92]	@ (8001af0 <SPI_MspInit+0x6c>)
 8001a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a94:	4a16      	ldr	r2, [pc, #88]	@ (8001af0 <SPI_MspInit+0x6c>)
 8001a96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a9a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a9c:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <SPI_MspInit+0x6c>)
 8001a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	4b10      	ldr	r3, [pc, #64]	@ (8001af0 <SPI_MspInit+0x6c>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8001af0 <SPI_MspInit+0x6c>)
 8001ab2:	f043 0320 	orr.w	r3, r3, #32
 8001ab6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8001af0 <SPI_MspInit+0x6c>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abc:	f003 0320 	and.w	r3, r3, #32
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001ac4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001ad6:	2305      	movs	r3, #5
 8001ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4804      	ldr	r0, [pc, #16]	@ (8001af4 <SPI_MspInit+0x70>)
 8001ae2:	f001 fcd3 	bl	800348c <HAL_GPIO_Init>
}
 8001ae6:	bf00      	nop
 8001ae8:	3728      	adds	r7, #40	@ 0x28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40021400 	.word	0x40021400

08001af8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001afe:	4b36      	ldr	r3, [pc, #216]	@ (8001bd8 <LCD_IO_Init+0xe0>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d164      	bne.n	8001bd0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001b06:	4b34      	ldr	r3, [pc, #208]	@ (8001bd8 <LCD_IO_Init+0xe0>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	4b32      	ldr	r3, [pc, #200]	@ (8001bdc <LCD_IO_Init+0xe4>)
 8001b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b14:	4a31      	ldr	r2, [pc, #196]	@ (8001bdc <LCD_IO_Init+0xe4>)
 8001b16:	f043 0308 	orr.w	r3, r3, #8
 8001b1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001bdc <LCD_IO_Init+0xe4>)
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001b28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001b36:	2302      	movs	r3, #2
 8001b38:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4827      	ldr	r0, [pc, #156]	@ (8001be0 <LCD_IO_Init+0xe8>)
 8001b42:	f001 fca3 	bl	800348c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	4b24      	ldr	r3, [pc, #144]	@ (8001bdc <LCD_IO_Init+0xe4>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	4a23      	ldr	r2, [pc, #140]	@ (8001bdc <LCD_IO_Init+0xe4>)
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b56:	4b21      	ldr	r3, [pc, #132]	@ (8001bdc <LCD_IO_Init+0xe4>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001b62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001b70:	2302      	movs	r3, #2
 8001b72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001b74:	f107 030c 	add.w	r3, r7, #12
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4819      	ldr	r0, [pc, #100]	@ (8001be0 <LCD_IO_Init+0xe8>)
 8001b7c:	f001 fc86 	bl	800348c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001b80:	2300      	movs	r3, #0
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <LCD_IO_Init+0xe4>)
 8001b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b88:	4a14      	ldr	r2, [pc, #80]	@ (8001bdc <LCD_IO_Init+0xe4>)
 8001b8a:	f043 0304 	orr.w	r3, r3, #4
 8001b8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b90:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <LCD_IO_Init+0xe4>)
 8001b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	480c      	ldr	r0, [pc, #48]	@ (8001be4 <LCD_IO_Init+0xec>)
 8001bb4:	f001 fc6a 	bl	800348c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2104      	movs	r1, #4
 8001bbc:	4809      	ldr	r0, [pc, #36]	@ (8001be4 <LCD_IO_Init+0xec>)
 8001bbe:	f001 ff1d 	bl	80039fc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	2104      	movs	r1, #4
 8001bc6:	4807      	ldr	r0, [pc, #28]	@ (8001be4 <LCD_IO_Init+0xec>)
 8001bc8:	f001 ff18 	bl	80039fc <HAL_GPIO_WritePin>

    SPI_Init();
 8001bcc:	f7ff fef6 	bl	80019bc <SPI_Init>
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20025a20 	.word	0x20025a20
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40020c00 	.word	0x40020c00
 8001be4:	40020800 	.word	0x40020800

08001be8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bf8:	480a      	ldr	r0, [pc, #40]	@ (8001c24 <LCD_IO_WriteData+0x3c>)
 8001bfa:	f001 feff 	bl	80039fc <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2104      	movs	r1, #4
 8001c02:	4809      	ldr	r0, [pc, #36]	@ (8001c28 <LCD_IO_WriteData+0x40>)
 8001c04:	f001 fefa 	bl	80039fc <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff ff10 	bl	8001a30 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001c10:	2201      	movs	r2, #1
 8001c12:	2104      	movs	r1, #4
 8001c14:	4804      	ldr	r0, [pc, #16]	@ (8001c28 <LCD_IO_WriteData+0x40>)
 8001c16:	f001 fef1 	bl	80039fc <HAL_GPIO_WritePin>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40020c00 	.word	0x40020c00
 8001c28:	40020800 	.word	0x40020800

08001c2c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001c36:	2200      	movs	r2, #0
 8001c38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c3c:	480a      	ldr	r0, [pc, #40]	@ (8001c68 <LCD_IO_WriteReg+0x3c>)
 8001c3e:	f001 fedd 	bl	80039fc <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001c42:	2200      	movs	r2, #0
 8001c44:	2104      	movs	r1, #4
 8001c46:	4809      	ldr	r0, [pc, #36]	@ (8001c6c <LCD_IO_WriteReg+0x40>)
 8001c48:	f001 fed8 	bl	80039fc <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff feed 	bl	8001a30 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001c56:	2201      	movs	r2, #1
 8001c58:	2104      	movs	r1, #4
 8001c5a:	4804      	ldr	r0, [pc, #16]	@ (8001c6c <LCD_IO_WriteReg+0x40>)
 8001c5c:	f001 fece 	bl	80039fc <HAL_GPIO_WritePin>
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40020c00 	.word	0x40020c00
 8001c6c:	40020800 	.word	0x40020800

08001c70 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f001 fafd 	bl	8003278 <HAL_Delay>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c8a:	f001 fa83 	bl	8003194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c8e:	f000 f817 	bl	8001cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c92:	f000 fa07 	bl	80020a4 <MX_GPIO_Init>
  MX_LTDC_Init();
 8001c96:	f000 f8bd 	bl	8001e14 <MX_LTDC_Init>
  MX_RNG_Init();
 8001c9a:	f000 f96d 	bl	8001f78 <MX_RNG_Init>
  MX_TIM2_Init();
 8001c9e:	f000 f9b5 	bl	800200c <MX_TIM2_Init>
  MX_SPI5_Init();
 8001ca2:	f000 f97d 	bl	8001fa0 <MX_SPI5_Init>
  MX_I2C3_Init();
 8001ca6:	f000 f875 	bl	8001d94 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8001caa:	f7fe fc8f 	bl	80005cc <ApplicationInit>
  ApplicationFirstScreen();
 8001cae:	f7fe fca5 	bl	80005fc <ApplicationFirstScreen>

  //LCD_Visual_Demo();
  HAL_Delay(5000);
 8001cb2:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001cb6:	f001 fadf 	bl	8003278 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  LCD_Touch_Polling_Demo();
 8001cba:	f7fe fcb3 	bl	8000624 <LCD_Touch_Polling_Demo>
 8001cbe:	e7fc      	b.n	8001cba <main+0x34>

08001cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b094      	sub	sp, #80	@ 0x50
 8001cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cc6:	f107 0320 	add.w	r3, r7, #32
 8001cca:	2230      	movs	r2, #48	@ 0x30
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f005 f9d8 	bl	8007084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	4b28      	ldr	r3, [pc, #160]	@ (8001d8c <SystemClock_Config+0xcc>)
 8001cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cec:	4a27      	ldr	r2, [pc, #156]	@ (8001d8c <SystemClock_Config+0xcc>)
 8001cee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf4:	4b25      	ldr	r3, [pc, #148]	@ (8001d8c <SystemClock_Config+0xcc>)
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d00:	2300      	movs	r3, #0
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	4b22      	ldr	r3, [pc, #136]	@ (8001d90 <SystemClock_Config+0xd0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a21      	ldr	r2, [pc, #132]	@ (8001d90 <SystemClock_Config+0xd0>)
 8001d0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	4b1f      	ldr	r3, [pc, #124]	@ (8001d90 <SystemClock_Config+0xd0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d26:	2302      	movs	r3, #2
 8001d28:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d2a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d30:	2308      	movs	r3, #8
 8001d32:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d34:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001d38:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d3e:	2307      	movs	r3, #7
 8001d40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d42:	f107 0320 	add.w	r3, r7, #32
 8001d46:	4618      	mov	r0, r3
 8001d48:	f003 f9b8 	bl	80050bc <HAL_RCC_OscConfig>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d52:	f000 fb55 	bl	8002400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d56:	230f      	movs	r3, #15
 8001d58:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d62:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d6c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	2105      	movs	r1, #5
 8001d74:	4618      	mov	r0, r3
 8001d76:	f003 fc19 	bl	80055ac <HAL_RCC_ClockConfig>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d80:	f000 fb3e 	bl	8002400 <Error_Handler>
  }
}
 8001d84:	bf00      	nop
 8001d86:	3750      	adds	r7, #80	@ 0x50
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40007000 	.word	0x40007000

08001d94 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001d98:	4b1b      	ldr	r3, [pc, #108]	@ (8001e08 <MX_I2C3_Init+0x74>)
 8001d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001e0c <MX_I2C3_Init+0x78>)
 8001d9c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e08 <MX_I2C3_Init+0x74>)
 8001da0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e10 <MX_I2C3_Init+0x7c>)
 8001da2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001da4:	4b18      	ldr	r3, [pc, #96]	@ (8001e08 <MX_I2C3_Init+0x74>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001daa:	4b17      	ldr	r3, [pc, #92]	@ (8001e08 <MX_I2C3_Init+0x74>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001db0:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <MX_I2C3_Init+0x74>)
 8001db2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001db6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001db8:	4b13      	ldr	r3, [pc, #76]	@ (8001e08 <MX_I2C3_Init+0x74>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001dbe:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <MX_I2C3_Init+0x74>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dc4:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <MX_I2C3_Init+0x74>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dca:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <MX_I2C3_Init+0x74>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001dd0:	480d      	ldr	r0, [pc, #52]	@ (8001e08 <MX_I2C3_Init+0x74>)
 8001dd2:	f001 fe2d 	bl	8003a30 <HAL_I2C_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001ddc:	f000 fb10 	bl	8002400 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001de0:	2100      	movs	r1, #0
 8001de2:	4809      	ldr	r0, [pc, #36]	@ (8001e08 <MX_I2C3_Init+0x74>)
 8001de4:	f002 fe48 	bl	8004a78 <HAL_I2CEx_ConfigAnalogFilter>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001dee:	f000 fb07 	bl	8002400 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001df2:	2100      	movs	r1, #0
 8001df4:	4804      	ldr	r0, [pc, #16]	@ (8001e08 <MX_I2C3_Init+0x74>)
 8001df6:	f002 fe7b 	bl	8004af0 <HAL_I2CEx_ConfigDigitalFilter>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001e00:	f000 fafe 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20025a24 	.word	0x20025a24
 8001e0c:	40005c00 	.word	0x40005c00
 8001e10:	000186a0 	.word	0x000186a0

08001e14 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b09a      	sub	sp, #104	@ 0x68
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001e1a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e1e:	2234      	movs	r2, #52	@ 0x34
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f005 f92e 	bl	8007084 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001e28:	463b      	mov	r3, r7
 8001e2a:	2234      	movs	r2, #52	@ 0x34
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f005 f928 	bl	8007084 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001e34:	4b4e      	ldr	r3, [pc, #312]	@ (8001f70 <MX_LTDC_Init+0x15c>)
 8001e36:	4a4f      	ldr	r2, [pc, #316]	@ (8001f74 <MX_LTDC_Init+0x160>)
 8001e38:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001e3a:	4b4d      	ldr	r3, [pc, #308]	@ (8001f70 <MX_LTDC_Init+0x15c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001e40:	4b4b      	ldr	r3, [pc, #300]	@ (8001f70 <MX_LTDC_Init+0x15c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001e46:	4b4a      	ldr	r3, [pc, #296]	@ (8001f70 <MX_LTDC_Init+0x15c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001e4c:	4b48      	ldr	r3, [pc, #288]	@ (8001f70 <MX_LTDC_Init+0x15c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001e52:	4b47      	ldr	r3, [pc, #284]	@ (8001f70 <MX_LTDC_Init+0x15c>)
 8001e54:	2207      	movs	r2, #7
 8001e56:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001e58:	4b45      	ldr	r3, [pc, #276]	@ (8001f70 <MX_LTDC_Init+0x15c>)
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001e5e:	4b44      	ldr	r3, [pc, #272]	@ (8001f70 <MX_LTDC_Init+0x15c>)
 8001e60:	220e      	movs	r2, #14
 8001e62:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001e64:	4b42      	ldr	r3, [pc, #264]	@ (8001f70 <MX_LTDC_Init+0x15c>)
 8001e66:	2205      	movs	r2, #5
 8001e68:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001e6a:	4b41      	ldr	r3, [pc, #260]	@ (8001f70 <MX_LTDC_Init+0x15c>)
 8001e6c:	f240 228e 	movw	r2, #654	@ 0x28e
 8001e70:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001e72:	4b3f      	ldr	r3, [pc, #252]	@ (8001f70 <MX_LTDC_Init+0x15c>)
 8001e74:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001e78:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8001e7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f70 <MX_LTDC_Init+0x15c>)
 8001e7c:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001e80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001e82:	4b3b      	ldr	r3, [pc, #236]	@ (8001f70 <MX_LTDC_Init+0x15c>)
 8001e84:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001e88:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001e8a:	4b39      	ldr	r3, [pc, #228]	@ (8001f70 <MX_LTDC_Init+0x15c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001e92:	4b37      	ldr	r3, [pc, #220]	@ (8001f70 <MX_LTDC_Init+0x15c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001e9a:	4b35      	ldr	r3, [pc, #212]	@ (8001f70 <MX_LTDC_Init+0x15c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001ea2:	4833      	ldr	r0, [pc, #204]	@ (8001f70 <MX_LTDC_Init+0x15c>)
 8001ea4:	f002 fe64 	bl	8004b70 <HAL_LTDC_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001eae:	f000 faa7 	bl	8002400 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001ece:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ed2:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001ed4:	2305      	movs	r3, #5
 8001ed6:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001ef6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001efa:	2200      	movs	r2, #0
 8001efc:	4619      	mov	r1, r3
 8001efe:	481c      	ldr	r0, [pc, #112]	@ (8001f70 <MX_LTDC_Init+0x15c>)
 8001f00:	f002 ff06 	bl	8004d10 <HAL_LTDC_ConfigLayer>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001f0a:	f000 fa79 	bl	8002400 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001f2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f2e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001f30:	2305      	movs	r3, #5
 8001f32:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001f52:	463b      	mov	r3, r7
 8001f54:	2201      	movs	r2, #1
 8001f56:	4619      	mov	r1, r3
 8001f58:	4805      	ldr	r0, [pc, #20]	@ (8001f70 <MX_LTDC_Init+0x15c>)
 8001f5a:	f002 fed9 	bl	8004d10 <HAL_LTDC_ConfigLayer>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001f64:	f000 fa4c 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001f68:	bf00      	nop
 8001f6a:	3768      	adds	r7, #104	@ 0x68
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20025a78 	.word	0x20025a78
 8001f74:	40016800 	.word	0x40016800

08001f78 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001f7c:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <MX_RNG_Init+0x20>)
 8001f7e:	4a07      	ldr	r2, [pc, #28]	@ (8001f9c <MX_RNG_Init+0x24>)
 8001f80:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001f82:	4805      	ldr	r0, [pc, #20]	@ (8001f98 <MX_RNG_Init+0x20>)
 8001f84:	f003 fede 	bl	8005d44 <HAL_RNG_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001f8e:	f000 fa37 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20025b20 	.word	0x20025b20
 8001f9c:	50060800 	.word	0x50060800

08001fa0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001fa4:	4b17      	ldr	r3, [pc, #92]	@ (8002004 <MX_SPI5_Init+0x64>)
 8001fa6:	4a18      	ldr	r2, [pc, #96]	@ (8002008 <MX_SPI5_Init+0x68>)
 8001fa8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001faa:	4b16      	ldr	r3, [pc, #88]	@ (8002004 <MX_SPI5_Init+0x64>)
 8001fac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fb0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001fb2:	4b14      	ldr	r3, [pc, #80]	@ (8002004 <MX_SPI5_Init+0x64>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fb8:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <MX_SPI5_Init+0x64>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fbe:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <MX_SPI5_Init+0x64>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <MX_SPI5_Init+0x64>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <MX_SPI5_Init+0x64>)
 8001fcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fd0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <MX_SPI5_Init+0x64>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8002004 <MX_SPI5_Init+0x64>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fde:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <MX_SPI5_Init+0x64>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe4:	4b07      	ldr	r3, [pc, #28]	@ (8002004 <MX_SPI5_Init+0x64>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001fea:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <MX_SPI5_Init+0x64>)
 8001fec:	220a      	movs	r2, #10
 8001fee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001ff0:	4804      	ldr	r0, [pc, #16]	@ (8002004 <MX_SPI5_Init+0x64>)
 8001ff2:	f003 ff27 	bl	8005e44 <HAL_SPI_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001ffc:	f000 fa00 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20025b30 	.word	0x20025b30
 8002008:	40015000 	.word	0x40015000

0800200c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002012:	f107 0308 	add.w	r3, r7, #8
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002020:	463b      	mov	r3, r7
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002028:	4b1d      	ldr	r3, [pc, #116]	@ (80020a0 <MX_TIM2_Init+0x94>)
 800202a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800202e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002030:	4b1b      	ldr	r3, [pc, #108]	@ (80020a0 <MX_TIM2_Init+0x94>)
 8002032:	2200      	movs	r2, #0
 8002034:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002036:	4b1a      	ldr	r3, [pc, #104]	@ (80020a0 <MX_TIM2_Init+0x94>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800203c:	4b18      	ldr	r3, [pc, #96]	@ (80020a0 <MX_TIM2_Init+0x94>)
 800203e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002042:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002044:	4b16      	ldr	r3, [pc, #88]	@ (80020a0 <MX_TIM2_Init+0x94>)
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204a:	4b15      	ldr	r3, [pc, #84]	@ (80020a0 <MX_TIM2_Init+0x94>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002050:	4813      	ldr	r0, [pc, #76]	@ (80020a0 <MX_TIM2_Init+0x94>)
 8002052:	f004 f9d7 	bl	8006404 <HAL_TIM_Base_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800205c:	f000 f9d0 	bl	8002400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002060:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002064:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002066:	f107 0308 	add.w	r3, r7, #8
 800206a:	4619      	mov	r1, r3
 800206c:	480c      	ldr	r0, [pc, #48]	@ (80020a0 <MX_TIM2_Init+0x94>)
 800206e:	f004 fa18 	bl	80064a2 <HAL_TIM_ConfigClockSource>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002078:	f000 f9c2 	bl	8002400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800207c:	2300      	movs	r3, #0
 800207e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002084:	463b      	mov	r3, r7
 8002086:	4619      	mov	r1, r3
 8002088:	4805      	ldr	r0, [pc, #20]	@ (80020a0 <MX_TIM2_Init+0x94>)
 800208a:	f004 fc17 	bl	80068bc <HAL_TIMEx_MasterConfigSynchronization>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002094:	f000 f9b4 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002098:	bf00      	nop
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20025b88 	.word	0x20025b88

080020a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08e      	sub	sp, #56	@ 0x38
 80020a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]
 80020b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
 80020be:	4bb2      	ldr	r3, [pc, #712]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	4ab1      	ldr	r2, [pc, #708]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ca:	4baf      	ldr	r3, [pc, #700]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	623b      	str	r3, [r7, #32]
 80020d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	4bab      	ldr	r3, [pc, #684]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	4aaa      	ldr	r2, [pc, #680]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 80020e0:	f043 0320 	orr.w	r3, r3, #32
 80020e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e6:	4ba8      	ldr	r3, [pc, #672]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	f003 0320 	and.w	r3, r3, #32
 80020ee:	61fb      	str	r3, [r7, #28]
 80020f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
 80020f6:	4ba4      	ldr	r3, [pc, #656]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	4aa3      	ldr	r2, [pc, #652]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 80020fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002100:	6313      	str	r3, [r2, #48]	@ 0x30
 8002102:	4ba1      	ldr	r3, [pc, #644]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800210a:	61bb      	str	r3, [r7, #24]
 800210c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	4b9d      	ldr	r3, [pc, #628]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	4a9c      	ldr	r2, [pc, #624]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6313      	str	r3, [r2, #48]	@ 0x30
 800211e:	4b9a      	ldr	r3, [pc, #616]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	4b96      	ldr	r3, [pc, #600]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	4a95      	ldr	r2, [pc, #596]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	6313      	str	r3, [r2, #48]	@ 0x30
 800213a:	4b93      	ldr	r3, [pc, #588]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	4b8f      	ldr	r3, [pc, #572]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	4a8e      	ldr	r2, [pc, #568]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 8002150:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002154:	6313      	str	r3, [r2, #48]	@ 0x30
 8002156:	4b8c      	ldr	r3, [pc, #560]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	4b88      	ldr	r3, [pc, #544]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	4a87      	ldr	r2, [pc, #540]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 800216c:	f043 0310 	orr.w	r3, r3, #16
 8002170:	6313      	str	r3, [r2, #48]	@ 0x30
 8002172:	4b85      	ldr	r3, [pc, #532]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	607b      	str	r3, [r7, #4]
 8002182:	4b81      	ldr	r3, [pc, #516]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	4a80      	ldr	r2, [pc, #512]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 8002188:	f043 0308 	orr.w	r3, r3, #8
 800218c:	6313      	str	r3, [r2, #48]	@ 0x30
 800218e:	4b7e      	ldr	r3, [pc, #504]	@ (8002388 <MX_GPIO_Init+0x2e4>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800219a:	2200      	movs	r2, #0
 800219c:	2116      	movs	r1, #22
 800219e:	487b      	ldr	r0, [pc, #492]	@ (800238c <MX_GPIO_Init+0x2e8>)
 80021a0:	f001 fc2c 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80021a4:	2200      	movs	r2, #0
 80021a6:	2180      	movs	r1, #128	@ 0x80
 80021a8:	4879      	ldr	r0, [pc, #484]	@ (8002390 <MX_GPIO_Init+0x2ec>)
 80021aa:	f001 fc27 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80021ae:	2200      	movs	r2, #0
 80021b0:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80021b4:	4877      	ldr	r0, [pc, #476]	@ (8002394 <MX_GPIO_Init+0x2f0>)
 80021b6:	f001 fc21 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80021ba:	2200      	movs	r2, #0
 80021bc:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80021c0:	4875      	ldr	r0, [pc, #468]	@ (8002398 <MX_GPIO_Init+0x2f4>)
 80021c2:	f001 fc1b 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80021c6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d4:	2303      	movs	r3, #3
 80021d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021d8:	230c      	movs	r3, #12
 80021da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021e0:	4619      	mov	r1, r3
 80021e2:	486e      	ldr	r0, [pc, #440]	@ (800239c <MX_GPIO_Init+0x2f8>)
 80021e4:	f001 f952 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80021e8:	2301      	movs	r3, #1
 80021ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f4:	2303      	movs	r3, #3
 80021f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021f8:	230c      	movs	r3, #12
 80021fa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80021fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002200:	4619      	mov	r1, r3
 8002202:	4862      	ldr	r0, [pc, #392]	@ (800238c <MX_GPIO_Init+0x2e8>)
 8002204:	f001 f942 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002208:	2316      	movs	r3, #22
 800220a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800220c:	2301      	movs	r3, #1
 800220e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002214:	2300      	movs	r3, #0
 8002216:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002218:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800221c:	4619      	mov	r1, r3
 800221e:	485b      	ldr	r0, [pc, #364]	@ (800238c <MX_GPIO_Init+0x2e8>)
 8002220:	f001 f934 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002224:	f248 0307 	movw	r3, #32775	@ 0x8007
 8002228:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800222a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800222e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002234:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002238:	4619      	mov	r1, r3
 800223a:	4855      	ldr	r0, [pc, #340]	@ (8002390 <MX_GPIO_Init+0x2ec>)
 800223c:	f001 f926 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002240:	2380      	movs	r3, #128	@ 0x80
 8002242:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002244:	2301      	movs	r3, #1
 8002246:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224c:	2300      	movs	r3, #0
 800224e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002250:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002254:	4619      	mov	r1, r3
 8002256:	484e      	ldr	r0, [pc, #312]	@ (8002390 <MX_GPIO_Init+0x2ec>)
 8002258:	f001 f918 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800225c:	2320      	movs	r3, #32
 800225e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002260:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002264:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800226a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800226e:	4619      	mov	r1, r3
 8002270:	4846      	ldr	r0, [pc, #280]	@ (800238c <MX_GPIO_Init+0x2e8>)
 8002272:	f001 f90b 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002276:	2304      	movs	r3, #4
 8002278:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227a:	2300      	movs	r3, #0
 800227c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002282:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002286:	4619      	mov	r1, r3
 8002288:	4845      	ldr	r0, [pc, #276]	@ (80023a0 <MX_GPIO_Init+0x2fc>)
 800228a:	f001 f8ff 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800228e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229c:	2303      	movs	r3, #3
 800229e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022a0:	230c      	movs	r3, #12
 80022a2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022a8:	4619      	mov	r1, r3
 80022aa:	483b      	ldr	r0, [pc, #236]	@ (8002398 <MX_GPIO_Init+0x2f4>)
 80022ac:	f001 f8ee 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80022b0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80022b4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022be:	2303      	movs	r3, #3
 80022c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022c2:	230c      	movs	r3, #12
 80022c4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022ca:	4619      	mov	r1, r3
 80022cc:	4835      	ldr	r0, [pc, #212]	@ (80023a4 <MX_GPIO_Init+0x300>)
 80022ce:	f001 f8dd 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80022d2:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80022d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e0:	2300      	movs	r3, #0
 80022e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80022e4:	230c      	movs	r3, #12
 80022e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022ec:	4619      	mov	r1, r3
 80022ee:	482c      	ldr	r0, [pc, #176]	@ (80023a0 <MX_GPIO_Init+0x2fc>)
 80022f0:	f001 f8cc 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80022f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fa:	2300      	movs	r3, #0
 80022fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002306:	4619      	mov	r1, r3
 8002308:	4825      	ldr	r0, [pc, #148]	@ (80023a0 <MX_GPIO_Init+0x2fc>)
 800230a:	f001 f8bf 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800230e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231c:	2303      	movs	r3, #3
 800231e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002320:	230c      	movs	r3, #12
 8002322:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002324:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002328:	4619      	mov	r1, r3
 800232a:	481a      	ldr	r0, [pc, #104]	@ (8002394 <MX_GPIO_Init+0x2f0>)
 800232c:	f001 f8ae 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002330:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002334:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002336:	2300      	movs	r3, #0
 8002338:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800233e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002342:	4619      	mov	r1, r3
 8002344:	4813      	ldr	r0, [pc, #76]	@ (8002394 <MX_GPIO_Init+0x2f0>)
 8002346:	f001 f8a1 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800234a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002350:	2301      	movs	r3, #1
 8002352:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002358:	2300      	movs	r3, #0
 800235a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800235c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002360:	4619      	mov	r1, r3
 8002362:	480c      	ldr	r0, [pc, #48]	@ (8002394 <MX_GPIO_Init+0x2f0>)
 8002364:	f001 f892 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002368:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800236c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236e:	2302      	movs	r3, #2
 8002370:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002376:	2303      	movs	r3, #3
 8002378:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800237a:	2307      	movs	r3, #7
 800237c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002382:	4619      	mov	r1, r3
 8002384:	e010      	b.n	80023a8 <MX_GPIO_Init+0x304>
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800
 800238c:	40020800 	.word	0x40020800
 8002390:	40020000 	.word	0x40020000
 8002394:	40020c00 	.word	0x40020c00
 8002398:	40021800 	.word	0x40021800
 800239c:	40021400 	.word	0x40021400
 80023a0:	40020400 	.word	0x40020400
 80023a4:	40021000 	.word	0x40021000
 80023a8:	4812      	ldr	r0, [pc, #72]	@ (80023f4 <MX_GPIO_Init+0x350>)
 80023aa:	f001 f86f 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80023ae:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80023b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b4:	2301      	movs	r3, #1
 80023b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023bc:	2300      	movs	r3, #0
 80023be:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023c4:	4619      	mov	r1, r3
 80023c6:	480c      	ldr	r0, [pc, #48]	@ (80023f8 <MX_GPIO_Init+0x354>)
 80023c8:	f001 f860 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80023cc:	2360      	movs	r3, #96	@ 0x60
 80023ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d8:	2303      	movs	r3, #3
 80023da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023dc:	230c      	movs	r3, #12
 80023de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023e4:	4619      	mov	r1, r3
 80023e6:	4805      	ldr	r0, [pc, #20]	@ (80023fc <MX_GPIO_Init+0x358>)
 80023e8:	f001 f850 	bl	800348c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023ec:	bf00      	nop
 80023ee:	3738      	adds	r7, #56	@ 0x38
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40020000 	.word	0x40020000
 80023f8:	40021800 	.word	0x40021800
 80023fc:	40020400 	.word	0x40020400

08002400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002404:	b672      	cpsid	i
}
 8002406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <Error_Handler+0x8>

0800240c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	607b      	str	r3, [r7, #4]
 8002416:	4b10      	ldr	r3, [pc, #64]	@ (8002458 <HAL_MspInit+0x4c>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241a:	4a0f      	ldr	r2, [pc, #60]	@ (8002458 <HAL_MspInit+0x4c>)
 800241c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002420:	6453      	str	r3, [r2, #68]	@ 0x44
 8002422:	4b0d      	ldr	r3, [pc, #52]	@ (8002458 <HAL_MspInit+0x4c>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002426:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800242a:	607b      	str	r3, [r7, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	603b      	str	r3, [r7, #0]
 8002432:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <HAL_MspInit+0x4c>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	4a08      	ldr	r2, [pc, #32]	@ (8002458 <HAL_MspInit+0x4c>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800243c:	6413      	str	r3, [r2, #64]	@ 0x40
 800243e:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <HAL_MspInit+0x4c>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800244a:	2007      	movs	r0, #7
 800244c:	f000 ffea 	bl	8003424 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800

0800245c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	@ 0x28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a29      	ldr	r2, [pc, #164]	@ (8002520 <HAL_I2C_MspInit+0xc4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d14b      	bne.n	8002516 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	4b28      	ldr	r3, [pc, #160]	@ (8002524 <HAL_I2C_MspInit+0xc8>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002486:	4a27      	ldr	r2, [pc, #156]	@ (8002524 <HAL_I2C_MspInit+0xc8>)
 8002488:	f043 0304 	orr.w	r3, r3, #4
 800248c:	6313      	str	r3, [r2, #48]	@ 0x30
 800248e:	4b25      	ldr	r3, [pc, #148]	@ (8002524 <HAL_I2C_MspInit+0xc8>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b21      	ldr	r3, [pc, #132]	@ (8002524 <HAL_I2C_MspInit+0xc8>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	4a20      	ldr	r2, [pc, #128]	@ (8002524 <HAL_I2C_MspInit+0xc8>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002524 <HAL_I2C_MspInit+0xc8>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80024b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024bc:	2312      	movs	r3, #18
 80024be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c4:	2300      	movs	r3, #0
 80024c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024c8:	2304      	movs	r3, #4
 80024ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	4619      	mov	r1, r3
 80024d2:	4815      	ldr	r0, [pc, #84]	@ (8002528 <HAL_I2C_MspInit+0xcc>)
 80024d4:	f000 ffda 	bl	800348c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80024d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024de:	2312      	movs	r3, #18
 80024e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e6:	2300      	movs	r3, #0
 80024e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024ea:	2304      	movs	r3, #4
 80024ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80024ee:	f107 0314 	add.w	r3, r7, #20
 80024f2:	4619      	mov	r1, r3
 80024f4:	480d      	ldr	r0, [pc, #52]	@ (800252c <HAL_I2C_MspInit+0xd0>)
 80024f6:	f000 ffc9 	bl	800348c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <HAL_I2C_MspInit+0xc8>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002502:	4a08      	ldr	r2, [pc, #32]	@ (8002524 <HAL_I2C_MspInit+0xc8>)
 8002504:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002508:	6413      	str	r3, [r2, #64]	@ 0x40
 800250a:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <HAL_I2C_MspInit+0xc8>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002516:	bf00      	nop
 8002518:	3728      	adds	r7, #40	@ 0x28
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40005c00 	.word	0x40005c00
 8002524:	40023800 	.word	0x40023800
 8002528:	40020800 	.word	0x40020800
 800252c:	40020000 	.word	0x40020000

08002530 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b09a      	sub	sp, #104	@ 0x68
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002548:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800254c:	2230      	movs	r2, #48	@ 0x30
 800254e:	2100      	movs	r1, #0
 8002550:	4618      	mov	r0, r3
 8002552:	f004 fd97 	bl	8007084 <memset>
  if(hltdc->Instance==LTDC)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a81      	ldr	r2, [pc, #516]	@ (8002760 <HAL_LTDC_MspInit+0x230>)
 800255c:	4293      	cmp	r3, r2
 800255e:	f040 80fb 	bne.w	8002758 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002562:	2308      	movs	r3, #8
 8002564:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8002566:	23c8      	movs	r3, #200	@ 0xc8
 8002568:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800256a:	2302      	movs	r3, #2
 800256c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 800256e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002572:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002574:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002578:	4618      	mov	r0, r3
 800257a:	f003 fa23 	bl	80059c4 <HAL_RCCEx_PeriphCLKConfig>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002584:	f7ff ff3c 	bl	8002400 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002588:	2300      	movs	r3, #0
 800258a:	623b      	str	r3, [r7, #32]
 800258c:	4b75      	ldr	r3, [pc, #468]	@ (8002764 <HAL_LTDC_MspInit+0x234>)
 800258e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002590:	4a74      	ldr	r2, [pc, #464]	@ (8002764 <HAL_LTDC_MspInit+0x234>)
 8002592:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002596:	6453      	str	r3, [r2, #68]	@ 0x44
 8002598:	4b72      	ldr	r3, [pc, #456]	@ (8002764 <HAL_LTDC_MspInit+0x234>)
 800259a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025a0:	623b      	str	r3, [r7, #32]
 80025a2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025a4:	2300      	movs	r3, #0
 80025a6:	61fb      	str	r3, [r7, #28]
 80025a8:	4b6e      	ldr	r3, [pc, #440]	@ (8002764 <HAL_LTDC_MspInit+0x234>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ac:	4a6d      	ldr	r2, [pc, #436]	@ (8002764 <HAL_LTDC_MspInit+0x234>)
 80025ae:	f043 0320 	orr.w	r3, r3, #32
 80025b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b4:	4b6b      	ldr	r3, [pc, #428]	@ (8002764 <HAL_LTDC_MspInit+0x234>)
 80025b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c0:	2300      	movs	r3, #0
 80025c2:	61bb      	str	r3, [r7, #24]
 80025c4:	4b67      	ldr	r3, [pc, #412]	@ (8002764 <HAL_LTDC_MspInit+0x234>)
 80025c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c8:	4a66      	ldr	r2, [pc, #408]	@ (8002764 <HAL_LTDC_MspInit+0x234>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d0:	4b64      	ldr	r3, [pc, #400]	@ (8002764 <HAL_LTDC_MspInit+0x234>)
 80025d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	61bb      	str	r3, [r7, #24]
 80025da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	4b60      	ldr	r3, [pc, #384]	@ (8002764 <HAL_LTDC_MspInit+0x234>)
 80025e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e4:	4a5f      	ldr	r2, [pc, #380]	@ (8002764 <HAL_LTDC_MspInit+0x234>)
 80025e6:	f043 0302 	orr.w	r3, r3, #2
 80025ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ec:	4b5d      	ldr	r3, [pc, #372]	@ (8002764 <HAL_LTDC_MspInit+0x234>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80025f8:	2300      	movs	r3, #0
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	4b59      	ldr	r3, [pc, #356]	@ (8002764 <HAL_LTDC_MspInit+0x234>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002600:	4a58      	ldr	r2, [pc, #352]	@ (8002764 <HAL_LTDC_MspInit+0x234>)
 8002602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002606:	6313      	str	r3, [r2, #48]	@ 0x30
 8002608:	4b56      	ldr	r3, [pc, #344]	@ (8002764 <HAL_LTDC_MspInit+0x234>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	4b52      	ldr	r3, [pc, #328]	@ (8002764 <HAL_LTDC_MspInit+0x234>)
 800261a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261c:	4a51      	ldr	r2, [pc, #324]	@ (8002764 <HAL_LTDC_MspInit+0x234>)
 800261e:	f043 0304 	orr.w	r3, r3, #4
 8002622:	6313      	str	r3, [r2, #48]	@ 0x30
 8002624:	4b4f      	ldr	r3, [pc, #316]	@ (8002764 <HAL_LTDC_MspInit+0x234>)
 8002626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002630:	2300      	movs	r3, #0
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	4b4b      	ldr	r3, [pc, #300]	@ (8002764 <HAL_LTDC_MspInit+0x234>)
 8002636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002638:	4a4a      	ldr	r2, [pc, #296]	@ (8002764 <HAL_LTDC_MspInit+0x234>)
 800263a:	f043 0308 	orr.w	r3, r3, #8
 800263e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002640:	4b48      	ldr	r3, [pc, #288]	@ (8002764 <HAL_LTDC_MspInit+0x234>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800264c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002650:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	2302      	movs	r3, #2
 8002654:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265a:	2300      	movs	r3, #0
 800265c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800265e:	230e      	movs	r3, #14
 8002660:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002662:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002666:	4619      	mov	r1, r3
 8002668:	483f      	ldr	r0, [pc, #252]	@ (8002768 <HAL_LTDC_MspInit+0x238>)
 800266a:	f000 ff0f 	bl	800348c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800266e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002672:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267c:	2300      	movs	r3, #0
 800267e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002680:	230e      	movs	r3, #14
 8002682:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002684:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002688:	4619      	mov	r1, r3
 800268a:	4838      	ldr	r0, [pc, #224]	@ (800276c <HAL_LTDC_MspInit+0x23c>)
 800268c:	f000 fefe 	bl	800348c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002690:	2303      	movs	r3, #3
 8002692:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002694:	2302      	movs	r3, #2
 8002696:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269c:	2300      	movs	r3, #0
 800269e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80026a0:	2309      	movs	r3, #9
 80026a2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026a8:	4619      	mov	r1, r3
 80026aa:	4831      	ldr	r0, [pc, #196]	@ (8002770 <HAL_LTDC_MspInit+0x240>)
 80026ac:	f000 feee 	bl	800348c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80026b0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80026b4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	2302      	movs	r3, #2
 80026b8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026be:	2300      	movs	r3, #0
 80026c0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026c2:	230e      	movs	r3, #14
 80026c4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026ca:	4619      	mov	r1, r3
 80026cc:	4828      	ldr	r0, [pc, #160]	@ (8002770 <HAL_LTDC_MspInit+0x240>)
 80026ce:	f000 fedd 	bl	800348c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80026d2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80026d6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d8:	2302      	movs	r3, #2
 80026da:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e0:	2300      	movs	r3, #0
 80026e2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026e4:	230e      	movs	r3, #14
 80026e6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026ec:	4619      	mov	r1, r3
 80026ee:	4821      	ldr	r0, [pc, #132]	@ (8002774 <HAL_LTDC_MspInit+0x244>)
 80026f0:	f000 fecc 	bl	800348c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80026f4:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80026f8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	2302      	movs	r3, #2
 80026fc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002702:	2300      	movs	r3, #0
 8002704:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002706:	230e      	movs	r3, #14
 8002708:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800270a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800270e:	4619      	mov	r1, r3
 8002710:	4819      	ldr	r0, [pc, #100]	@ (8002778 <HAL_LTDC_MspInit+0x248>)
 8002712:	f000 febb 	bl	800348c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002716:	2348      	movs	r3, #72	@ 0x48
 8002718:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271a:	2302      	movs	r3, #2
 800271c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002722:	2300      	movs	r3, #0
 8002724:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002726:	230e      	movs	r3, #14
 8002728:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800272a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800272e:	4619      	mov	r1, r3
 8002730:	4812      	ldr	r0, [pc, #72]	@ (800277c <HAL_LTDC_MspInit+0x24c>)
 8002732:	f000 feab 	bl	800348c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002736:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800273a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273c:	2302      	movs	r3, #2
 800273e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002744:	2300      	movs	r3, #0
 8002746:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002748:	2309      	movs	r3, #9
 800274a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800274c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002750:	4619      	mov	r1, r3
 8002752:	4808      	ldr	r0, [pc, #32]	@ (8002774 <HAL_LTDC_MspInit+0x244>)
 8002754:	f000 fe9a 	bl	800348c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002758:	bf00      	nop
 800275a:	3768      	adds	r7, #104	@ 0x68
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40016800 	.word	0x40016800
 8002764:	40023800 	.word	0x40023800
 8002768:	40021400 	.word	0x40021400
 800276c:	40020000 	.word	0x40020000
 8002770:	40020400 	.word	0x40020400
 8002774:	40021800 	.word	0x40021800
 8002778:	40020800 	.word	0x40020800
 800277c:	40020c00 	.word	0x40020c00

08002780 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0b      	ldr	r2, [pc, #44]	@ (80027bc <HAL_RNG_MspInit+0x3c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d10d      	bne.n	80027ae <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	4b0a      	ldr	r3, [pc, #40]	@ (80027c0 <HAL_RNG_MspInit+0x40>)
 8002798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800279a:	4a09      	ldr	r2, [pc, #36]	@ (80027c0 <HAL_RNG_MspInit+0x40>)
 800279c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027a0:	6353      	str	r3, [r2, #52]	@ 0x34
 80027a2:	4b07      	ldr	r3, [pc, #28]	@ (80027c0 <HAL_RNG_MspInit+0x40>)
 80027a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80027ae:	bf00      	nop
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	50060800 	.word	0x50060800
 80027c0:	40023800 	.word	0x40023800

080027c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08a      	sub	sp, #40	@ 0x28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a19      	ldr	r2, [pc, #100]	@ (8002848 <HAL_SPI_MspInit+0x84>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d12c      	bne.n	8002840 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	4b18      	ldr	r3, [pc, #96]	@ (800284c <HAL_SPI_MspInit+0x88>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ee:	4a17      	ldr	r2, [pc, #92]	@ (800284c <HAL_SPI_MspInit+0x88>)
 80027f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027f6:	4b15      	ldr	r3, [pc, #84]	@ (800284c <HAL_SPI_MspInit+0x88>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	4b11      	ldr	r3, [pc, #68]	@ (800284c <HAL_SPI_MspInit+0x88>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	4a10      	ldr	r2, [pc, #64]	@ (800284c <HAL_SPI_MspInit+0x88>)
 800280c:	f043 0320 	orr.w	r3, r3, #32
 8002810:	6313      	str	r3, [r2, #48]	@ 0x30
 8002812:	4b0e      	ldr	r3, [pc, #56]	@ (800284c <HAL_SPI_MspInit+0x88>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800281e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282c:	2300      	movs	r3, #0
 800282e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002830:	2305      	movs	r3, #5
 8002832:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	4619      	mov	r1, r3
 800283a:	4805      	ldr	r0, [pc, #20]	@ (8002850 <HAL_SPI_MspInit+0x8c>)
 800283c:	f000 fe26 	bl	800348c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002840:	bf00      	nop
 8002842:	3728      	adds	r7, #40	@ 0x28
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40015000 	.word	0x40015000
 800284c:	40023800 	.word	0x40023800
 8002850:	40021400 	.word	0x40021400

08002854 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a08      	ldr	r2, [pc, #32]	@ (8002884 <HAL_SPI_MspDeInit+0x30>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d10a      	bne.n	800287c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002866:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <HAL_SPI_MspDeInit+0x34>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	4a07      	ldr	r2, [pc, #28]	@ (8002888 <HAL_SPI_MspDeInit+0x34>)
 800286c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002870:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002872:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002876:	4805      	ldr	r0, [pc, #20]	@ (800288c <HAL_SPI_MspDeInit+0x38>)
 8002878:	f000 ffb4 	bl	80037e4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40015000 	.word	0x40015000
 8002888:	40023800 	.word	0x40023800
 800288c:	40021400 	.word	0x40021400

08002890 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a0:	d10d      	bne.n	80028be <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <HAL_TIM_Base_MspInit+0x3c>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	4a08      	ldr	r2, [pc, #32]	@ (80028cc <HAL_TIM_Base_MspInit+0x3c>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028b2:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <HAL_TIM_Base_MspInit+0x3c>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800

080028d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028d4:	bf00      	nop
 80028d6:	e7fd      	b.n	80028d4 <NMI_Handler+0x4>

080028d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028dc:	bf00      	nop
 80028de:	e7fd      	b.n	80028dc <HardFault_Handler+0x4>

080028e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028e4:	bf00      	nop
 80028e6:	e7fd      	b.n	80028e4 <MemManage_Handler+0x4>

080028e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ec:	bf00      	nop
 80028ee:	e7fd      	b.n	80028ec <BusFault_Handler+0x4>

080028f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f4:	bf00      	nop
 80028f6:	e7fd      	b.n	80028f4 <UsageFault_Handler+0x4>

080028f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002926:	f000 fc87 	bl	8003238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}

0800292e <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002934:	f000 fa44 	bl	8002dc0 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002938:	f000 fa04 	bl	8002d44 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800293c:	2202      	movs	r2, #2
 800293e:	2103      	movs	r1, #3
 8002940:	2082      	movs	r0, #130	@ 0x82
 8002942:	f000 fa91 	bl	8002e68 <I2C3_Write>
    HAL_Delay(5);
 8002946:	2005      	movs	r0, #5
 8002948:	f000 fc96 	bl	8003278 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800294c:	2200      	movs	r2, #0
 800294e:	2103      	movs	r1, #3
 8002950:	2082      	movs	r0, #130	@ 0x82
 8002952:	f000 fa89 	bl	8002e68 <I2C3_Write>
    HAL_Delay(2);
 8002956:	2002      	movs	r0, #2
 8002958:	f000 fc8e 	bl	8003278 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 800295c:	1cba      	adds	r2, r7, #2
 800295e:	2302      	movs	r3, #2
 8002960:	2100      	movs	r1, #0
 8002962:	2082      	movs	r0, #130	@ 0x82
 8002964:	f000 fad0 	bl	8002f08 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002968:	887b      	ldrh	r3, [r7, #2]
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 800296e:	887b      	ldrh	r3, [r7, #2]
 8002970:	0a1b      	lsrs	r3, r3, #8
 8002972:	b29a      	uxth	r2, r3
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	4313      	orrs	r3, r2
 8002978:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	f640 0211 	movw	r2, #2065	@ 0x811
 8002980:	4293      	cmp	r3, r2
 8002982:	d001      	beq.n	8002988 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002984:	2303      	movs	r3, #3
 8002986:	e075      	b.n	8002a74 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002988:	2202      	movs	r2, #2
 800298a:	2103      	movs	r1, #3
 800298c:	2082      	movs	r0, #130	@ 0x82
 800298e:	f000 fa6b 	bl	8002e68 <I2C3_Write>
    HAL_Delay(5);
 8002992:	2005      	movs	r0, #5
 8002994:	f000 fc70 	bl	8003278 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002998:	2200      	movs	r2, #0
 800299a:	2103      	movs	r1, #3
 800299c:	2082      	movs	r0, #130	@ 0x82
 800299e:	f000 fa63 	bl	8002e68 <I2C3_Write>
    HAL_Delay(2);
 80029a2:	2002      	movs	r0, #2
 80029a4:	f000 fc68 	bl	8003278 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80029a8:	2004      	movs	r0, #4
 80029aa:	f000 f867 	bl	8002a7c <STMPE811_Read>
 80029ae:	4603      	mov	r3, r0
 80029b0:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 80029b2:	797b      	ldrb	r3, [r7, #5]
 80029b4:	f023 0301 	bic.w	r3, r3, #1
 80029b8:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80029ba:	797b      	ldrb	r3, [r7, #5]
 80029bc:	461a      	mov	r2, r3
 80029be:	2104      	movs	r1, #4
 80029c0:	2082      	movs	r0, #130	@ 0x82
 80029c2:	f000 fa51 	bl	8002e68 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80029c6:	2004      	movs	r0, #4
 80029c8:	f000 f858 	bl	8002a7c <STMPE811_Read>
 80029cc:	4603      	mov	r3, r0
 80029ce:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80029d0:	797b      	ldrb	r3, [r7, #5]
 80029d2:	f023 0302 	bic.w	r3, r3, #2
 80029d6:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80029d8:	797b      	ldrb	r3, [r7, #5]
 80029da:	461a      	mov	r2, r3
 80029dc:	2104      	movs	r1, #4
 80029de:	2082      	movs	r0, #130	@ 0x82
 80029e0:	f000 fa42 	bl	8002e68 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80029e4:	2249      	movs	r2, #73	@ 0x49
 80029e6:	2120      	movs	r1, #32
 80029e8:	2082      	movs	r0, #130	@ 0x82
 80029ea:	f000 fa3d 	bl	8002e68 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80029ee:	2002      	movs	r0, #2
 80029f0:	f000 fc42 	bl	8003278 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80029f4:	2201      	movs	r2, #1
 80029f6:	2121      	movs	r1, #33	@ 0x21
 80029f8:	2082      	movs	r0, #130	@ 0x82
 80029fa:	f000 fa35 	bl	8002e68 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80029fe:	2017      	movs	r0, #23
 8002a00:	f000 f83c 	bl	8002a7c <STMPE811_Read>
 8002a04:	4603      	mov	r3, r0
 8002a06:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002a08:	797b      	ldrb	r3, [r7, #5]
 8002a0a:	f043 031e 	orr.w	r3, r3, #30
 8002a0e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002a10:	797b      	ldrb	r3, [r7, #5]
 8002a12:	461a      	mov	r2, r3
 8002a14:	2117      	movs	r1, #23
 8002a16:	2082      	movs	r0, #130	@ 0x82
 8002a18:	f000 fa26 	bl	8002e68 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002a1c:	229a      	movs	r2, #154	@ 0x9a
 8002a1e:	2141      	movs	r1, #65	@ 0x41
 8002a20:	2082      	movs	r0, #130	@ 0x82
 8002a22:	f000 fa21 	bl	8002e68 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002a26:	2201      	movs	r2, #1
 8002a28:	214a      	movs	r1, #74	@ 0x4a
 8002a2a:	2082      	movs	r0, #130	@ 0x82
 8002a2c:	f000 fa1c 	bl	8002e68 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002a30:	2201      	movs	r2, #1
 8002a32:	214b      	movs	r1, #75	@ 0x4b
 8002a34:	2082      	movs	r0, #130	@ 0x82
 8002a36:	f000 fa17 	bl	8002e68 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	214b      	movs	r1, #75	@ 0x4b
 8002a3e:	2082      	movs	r0, #130	@ 0x82
 8002a40:	f000 fa12 	bl	8002e68 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002a44:	2201      	movs	r2, #1
 8002a46:	2156      	movs	r1, #86	@ 0x56
 8002a48:	2082      	movs	r0, #130	@ 0x82
 8002a4a:	f000 fa0d 	bl	8002e68 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002a4e:	2201      	movs	r2, #1
 8002a50:	2158      	movs	r1, #88	@ 0x58
 8002a52:	2082      	movs	r0, #130	@ 0x82
 8002a54:	f000 fa08 	bl	8002e68 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002a58:	2203      	movs	r2, #3
 8002a5a:	2140      	movs	r1, #64	@ 0x40
 8002a5c:	2082      	movs	r0, #130	@ 0x82
 8002a5e:	f000 fa03 	bl	8002e68 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002a62:	22ff      	movs	r2, #255	@ 0xff
 8002a64:	210b      	movs	r1, #11
 8002a66:	2082      	movs	r0, #130	@ 0x82
 8002a68:	f000 f9fe 	bl	8002e68 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002a6c:	20c8      	movs	r0, #200	@ 0xc8
 8002a6e:	f000 fc03 	bl	8003278 <HAL_Delay>

    return STMPE811_State_Ok;
 8002a72:	2302      	movs	r3, #2

}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002a86:	f107 020f 	add.w	r2, r7, #15
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	2082      	movs	r0, #130	@ 0x82
 8002a90:	f000 fa14 	bl	8002ebc <I2C3_Read>

    return readData;
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	791a      	ldrb	r2, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002aae:	2040      	movs	r0, #64	@ 0x40
 8002ab0:	f7ff ffe4 	bl	8002a7c <STMPE811_Read>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	db0e      	blt.n	8002ade <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	214b      	movs	r1, #75	@ 0x4b
 8002aca:	2082      	movs	r0, #130	@ 0x82
 8002acc:	f000 f9cc 	bl	8002e68 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	214b      	movs	r1, #75	@ 0x4b
 8002ad4:	2082      	movs	r0, #130	@ 0x82
 8002ad6:	f000 f9c7 	bl	8002e68 <I2C3_Write>

        return STMPE811_State_Released;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e0a7      	b.n	8002c2e <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	799b      	ldrb	r3, [r3, #6]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d117      	bne.n	8002b16 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fa2e 	bl	8002f4c <TM_STMPE811_ReadX>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	885b      	ldrh	r3, [r3, #2]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fa83 	bl	800300c <TM_STMPE811_ReadY>
 8002b06:	4603      	mov	r3, r0
 8002b08:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	805a      	strh	r2, [r3, #2]
 8002b14:	e048      	b.n	8002ba8 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	799b      	ldrb	r3, [r3, #6]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d112      	bne.n	8002b44 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 fa12 	bl	8002f4c <TM_STMPE811_ReadX>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	885b      	ldrh	r3, [r3, #2]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 fa69 	bl	800300c <TM_STMPE811_ReadY>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	805a      	strh	r2, [r3, #2]
 8002b42:	e031      	b.n	8002ba8 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	799b      	ldrb	r3, [r3, #6]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d115      	bne.n	8002b78 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	885b      	ldrh	r3, [r3, #2]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 f9fb 	bl	8002f4c <TM_STMPE811_ReadX>
 8002b56:	4603      	mov	r3, r0
 8002b58:	461a      	mov	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 fa52 	bl	800300c <TM_STMPE811_ReadY>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002b6e:	3301      	adds	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	801a      	strh	r2, [r3, #0]
 8002b76:	e017      	b.n	8002ba8 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	799b      	ldrb	r3, [r3, #6]
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d113      	bne.n	8002ba8 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 f9e1 	bl	8002f4c <TM_STMPE811_ReadX>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 fa36 	bl	800300c <TM_STMPE811_ReadY>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002ba8:	2201      	movs	r2, #1
 8002baa:	214b      	movs	r1, #75	@ 0x4b
 8002bac:	2082      	movs	r0, #130	@ 0x82
 8002bae:	f000 f95b 	bl	8002e68 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	214b      	movs	r1, #75	@ 0x4b
 8002bb6:	2082      	movs	r0, #130	@ 0x82
 8002bb8:	f000 f956 	bl	8002e68 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	799b      	ldrb	r3, [r3, #6]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <STMPE811_ReadTouch+0x12e>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	799b      	ldrb	r3, [r3, #6]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d115      	bne.n	8002bf8 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d027      	beq.n	8002c24 <STMPE811_ReadTouch+0x186>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	2bee      	cmp	r3, #238	@ 0xee
 8002bda:	d823      	bhi.n	8002c24 <STMPE811_ReadTouch+0x186>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	885b      	ldrh	r3, [r3, #2]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01f      	beq.n	8002c24 <STMPE811_ReadTouch+0x186>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	885b      	ldrh	r3, [r3, #2]
 8002be8:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002bec:	d81a      	bhi.n	8002c24 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e01a      	b.n	8002c2e <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d012      	beq.n	8002c26 <STMPE811_ReadTouch+0x188>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002c08:	d80d      	bhi.n	8002c26 <STMPE811_ReadTouch+0x188>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	885b      	ldrh	r3, [r3, #2]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d009      	beq.n	8002c26 <STMPE811_ReadTouch+0x188>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	885b      	ldrh	r3, [r3, #2]
 8002c16:	2bee      	cmp	r3, #238	@ 0xee
 8002c18:	d805      	bhi.n	8002c26 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002c20:	2300      	movs	r3, #0
 8002c22:	e004      	b.n	8002c2e <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002c24:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002c2c:	2301      	movs	r3, #1
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <STMPE811_DetermineTouchPosition>:

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	799b      	ldrb	r3, [r3, #6]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d117      	bne.n	8002c76 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 f97e 	bl	8002f4c <TM_STMPE811_ReadX>
 8002c50:	4603      	mov	r3, r0
 8002c52:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	885b      	ldrh	r3, [r3, #2]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 f9d3 	bl	800300c <TM_STMPE811_ReadY>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	805a      	strh	r2, [r3, #2]
 8002c74:	e048      	b.n	8002d08 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	799b      	ldrb	r3, [r3, #6]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d112      	bne.n	8002ca4 <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 f962 	bl	8002f4c <TM_STMPE811_ReadX>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	885b      	ldrh	r3, [r3, #2]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 f9b9 	bl	800300c <TM_STMPE811_ReadY>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	805a      	strh	r2, [r3, #2]
 8002ca2:	e031      	b.n	8002d08 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	799b      	ldrb	r3, [r3, #6]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d115      	bne.n	8002cd8 <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	885b      	ldrh	r3, [r3, #2]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 f94b 	bl	8002f4c <TM_STMPE811_ReadX>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	461a      	mov	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 f9a2 	bl	800300c <TM_STMPE811_ReadY>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002cce:	3301      	adds	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	801a      	strh	r2, [r3, #0]
 8002cd6:	e017      	b.n	8002d08 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	799b      	ldrb	r3, [r3, #6]
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d113      	bne.n	8002d08 <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 f931 	bl	8002f4c <TM_STMPE811_ReadX>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 f986 	bl	800300c <TM_STMPE811_ReadY>
 8002d00:	4603      	mov	r3, r0
 8002d02:	461a      	mov	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002d08:	2201      	movs	r2, #1
 8002d0a:	214b      	movs	r1, #75	@ 0x4b
 8002d0c:	2082      	movs	r0, #130	@ 0x82
 8002d0e:	f000 f8ab 	bl	8002e68 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002d12:	2200      	movs	r2, #0
 8002d14:	214b      	movs	r1, #75	@ 0x4b
 8002d16:	2082      	movs	r0, #130	@ 0x82
 8002d18:	f000 f8a6 	bl	8002e68 <I2C3_Write>
}
 8002d1c:	bf00      	nop
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002d28:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002d30:	bf00      	nop
 8002d32:	e7fd      	b.n	8002d30 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	20025c24 	.word	0x20025c24

08002d44 <I2C3_Init>:

static void I2C3_Init()
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	603b      	str	r3, [r7, #0]
 8002d4e:	4b18      	ldr	r3, [pc, #96]	@ (8002db0 <I2C3_Init+0x6c>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	4a17      	ldr	r2, [pc, #92]	@ (8002db0 <I2C3_Init+0x6c>)
 8002d54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d5a:	4b15      	ldr	r3, [pc, #84]	@ (8002db0 <I2C3_Init+0x6c>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002d66:	4b13      	ldr	r3, [pc, #76]	@ (8002db4 <I2C3_Init+0x70>)
 8002d68:	4a13      	ldr	r2, [pc, #76]	@ (8002db8 <I2C3_Init+0x74>)
 8002d6a:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002d6c:	4b11      	ldr	r3, [pc, #68]	@ (8002db4 <I2C3_Init+0x70>)
 8002d6e:	4a13      	ldr	r2, [pc, #76]	@ (8002dbc <I2C3_Init+0x78>)
 8002d70:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d72:	4b10      	ldr	r3, [pc, #64]	@ (8002db4 <I2C3_Init+0x70>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002d78:	4b0e      	ldr	r3, [pc, #56]	@ (8002db4 <I2C3_Init+0x70>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002db4 <I2C3_Init+0x70>)
 8002d80:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d84:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002d86:	4b0b      	ldr	r3, [pc, #44]	@ (8002db4 <I2C3_Init+0x70>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d8c:	4b09      	ldr	r3, [pc, #36]	@ (8002db4 <I2C3_Init+0x70>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002d92:	4808      	ldr	r0, [pc, #32]	@ (8002db4 <I2C3_Init+0x70>)
 8002d94:	f000 fe4c 	bl	8003a30 <HAL_I2C_Init>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002da2:	bf00      	nop
 8002da4:	e7fd      	b.n	8002da2 <I2C3_Init+0x5e>
    }
    return;
 8002da6:	bf00      	nop
}
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800
 8002db4:	20025bd0 	.word	0x20025bd0
 8002db8:	40005c00 	.word	0x40005c00
 8002dbc:	000186a0 	.word	0x000186a0

08002dc0 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc6:	f107 030c 	add.w	r3, r7, #12
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	609a      	str	r2, [r3, #8]
 8002dd2:	60da      	str	r2, [r3, #12]
 8002dd4:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	4b20      	ldr	r3, [pc, #128]	@ (8002e5c <I2C3_MspInit+0x9c>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	4a1f      	ldr	r2, [pc, #124]	@ (8002e5c <I2C3_MspInit+0x9c>)
 8002de0:	f043 0304 	orr.w	r3, r3, #4
 8002de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002de6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e5c <I2C3_MspInit+0x9c>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	607b      	str	r3, [r7, #4]
 8002df6:	4b19      	ldr	r3, [pc, #100]	@ (8002e5c <I2C3_MspInit+0x9c>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfa:	4a18      	ldr	r2, [pc, #96]	@ (8002e5c <I2C3_MspInit+0x9c>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e02:	4b16      	ldr	r3, [pc, #88]	@ (8002e5c <I2C3_MspInit+0x9c>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	607b      	str	r3, [r7, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002e0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e14:	2312      	movs	r3, #18
 8002e16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e20:	2304      	movs	r3, #4
 8002e22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002e24:	f107 030c 	add.w	r3, r7, #12
 8002e28:	4619      	mov	r1, r3
 8002e2a:	480d      	ldr	r0, [pc, #52]	@ (8002e60 <I2C3_MspInit+0xa0>)
 8002e2c:	f000 fb2e 	bl	800348c <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002e30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e36:	2312      	movs	r3, #18
 8002e38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e42:	2304      	movs	r3, #4
 8002e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002e46:	f107 030c 	add.w	r3, r7, #12
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4805      	ldr	r0, [pc, #20]	@ (8002e64 <I2C3_MspInit+0xa4>)
 8002e4e:	f000 fb1d 	bl	800348c <HAL_GPIO_Init>
    
}
 8002e52:	bf00      	nop
 8002e54:	3720      	adds	r7, #32
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	40020800 	.word	0x40020800
 8002e64:	40020000 	.word	0x40020000

08002e68 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af04      	add	r7, sp, #16
 8002e6e:	4603      	mov	r3, r0
 8002e70:	80fb      	strh	r3, [r7, #6]
 8002e72:	460b      	mov	r3, r1
 8002e74:	717b      	strb	r3, [r7, #5]
 8002e76:	4613      	mov	r3, r2
 8002e78:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002e7a:	793b      	ldrb	r3, [r7, #4]
 8002e7c:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002e7e:	797b      	ldrb	r3, [r7, #5]
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	88f9      	ldrh	r1, [r7, #6]
 8002e84:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb0 <I2C3_Write+0x48>)
 8002e86:	9302      	str	r3, [sp, #8]
 8002e88:	2301      	movs	r3, #1
 8002e8a:	9301      	str	r3, [sp, #4]
 8002e8c:	f107 030f 	add.w	r3, r7, #15
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	2301      	movs	r3, #1
 8002e94:	4807      	ldr	r0, [pc, #28]	@ (8002eb4 <I2C3_Write+0x4c>)
 8002e96:	f000 ff0f 	bl	8003cb8 <HAL_I2C_Mem_Write>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <I2C3_Write+0x50>)
 8002ea0:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002ea2:	f7ff ff3f 	bl	8002d24 <verifyHAL_I2C_IS_OKAY>
}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	0003d090 	.word	0x0003d090
 8002eb4:	20025bd0 	.word	0x20025bd0
 8002eb8:	20025c24 	.word	0x20025c24

08002ebc <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af04      	add	r7, sp, #16
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	603a      	str	r2, [r7, #0]
 8002ec6:	71fb      	strb	r3, [r7, #7]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	b299      	uxth	r1, r3
 8002ed0:	79bb      	ldrb	r3, [r7, #6]
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	4b09      	ldr	r3, [pc, #36]	@ (8002efc <I2C3_Read+0x40>)
 8002ed6:	9302      	str	r3, [sp, #8]
 8002ed8:	2301      	movs	r3, #1
 8002eda:	9301      	str	r3, [sp, #4]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	4807      	ldr	r0, [pc, #28]	@ (8002f00 <I2C3_Read+0x44>)
 8002ee4:	f000 ffe2 	bl	8003eac <HAL_I2C_Mem_Read>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	461a      	mov	r2, r3
 8002eec:	4b05      	ldr	r3, [pc, #20]	@ (8002f04 <I2C3_Read+0x48>)
 8002eee:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002ef0:	f7ff ff18 	bl	8002d24 <verifyHAL_I2C_IS_OKAY>
}
 8002ef4:	bf00      	nop
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	0003d090 	.word	0x0003d090
 8002f00:	20025bd0 	.word	0x20025bd0
 8002f04:	20025c24 	.word	0x20025c24

08002f08 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af04      	add	r7, sp, #16
 8002f0e:	603a      	str	r2, [r7, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
 8002f16:	460b      	mov	r3, r1
 8002f18:	71bb      	strb	r3, [r7, #6]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	b299      	uxth	r1, r3
 8002f22:	79bb      	ldrb	r3, [r7, #6]
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	4b07      	ldr	r3, [pc, #28]	@ (8002f44 <I2C3_MulitByteRead+0x3c>)
 8002f28:	9302      	str	r3, [sp, #8]
 8002f2a:	88bb      	ldrh	r3, [r7, #4]
 8002f2c:	9301      	str	r3, [sp, #4]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	2301      	movs	r3, #1
 8002f34:	4804      	ldr	r0, [pc, #16]	@ (8002f48 <I2C3_MulitByteRead+0x40>)
 8002f36:	f000 ffb9 	bl	8003eac <HAL_I2C_Mem_Read>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	0003d090 	.word	0x0003d090
 8002f48:	20025bd0 	.word	0x20025bd0

08002f4c <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002f56:	204d      	movs	r0, #77	@ 0x4d
 8002f58:	f7ff fd90 	bl	8002a7c <STMPE811_Read>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002f60:	204e      	movs	r0, #78	@ 0x4e
 8002f62:	f7ff fd8b 	bl	8002a7c <STMPE811_Read>
 8002f66:	4603      	mov	r3, r0
 8002f68:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002f6a:	7a7b      	ldrb	r3, [r7, #9]
 8002f6c:	b21b      	sxth	r3, r3
 8002f6e:	021b      	lsls	r3, r3, #8
 8002f70:	b21a      	sxth	r2, r3
 8002f72:	7a3b      	ldrb	r3, [r7, #8]
 8002f74:	b21b      	sxth	r3, r3
 8002f76:	4313      	orrs	r3, r2
 8002f78:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002f7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f7e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002f82:	4293      	cmp	r3, r2
 8002f84:	dc06      	bgt.n	8002f94 <TM_STMPE811_ReadX+0x48>
        val = 3900 - val;
 8002f86:	89fb      	ldrh	r3, [r7, #14]
 8002f88:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002f8c:	330c      	adds	r3, #12
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	81fb      	strh	r3, [r7, #14]
 8002f92:	e005      	b.n	8002fa0 <TM_STMPE811_ReadX+0x54>
    } else {
        val = 3800 - val;
 8002f94:	89fb      	ldrh	r3, [r7, #14]
 8002f96:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002f9a:	3308      	adds	r3, #8
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002fa0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fa4:	4a18      	ldr	r2, [pc, #96]	@ (8003008 <TM_STMPE811_ReadX+0xbc>)
 8002fa6:	fb82 1203 	smull	r1, r2, r2, r3
 8002faa:	441a      	add	r2, r3
 8002fac:	10d2      	asrs	r2, r2, #3
 8002fae:	17db      	asrs	r3, r3, #31
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002fb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fb8:	2bef      	cmp	r3, #239	@ 0xef
 8002fba:	dd02      	ble.n	8002fc2 <TM_STMPE811_ReadX+0x76>
        val = 239;
 8002fbc:	23ef      	movs	r3, #239	@ 0xef
 8002fbe:	81fb      	strh	r3, [r7, #14]
 8002fc0:	e005      	b.n	8002fce <TM_STMPE811_ReadX+0x82>
    } else if (val < 0) {
 8002fc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	da01      	bge.n	8002fce <TM_STMPE811_ReadX+0x82>
        val = 0;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002fce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	dd05      	ble.n	8002fe4 <TM_STMPE811_ReadX+0x98>
 8002fd8:	89fa      	ldrh	r2, [r7, #14]
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	b21b      	sxth	r3, r3
 8002fe2:	e004      	b.n	8002fee <TM_STMPE811_ReadX+0xa2>
 8002fe4:	89fb      	ldrh	r3, [r7, #14]
 8002fe6:	88fa      	ldrh	r2, [r7, #6]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	b21b      	sxth	r3, r3
 8002fee:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002ff0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	dd01      	ble.n	8002ffc <TM_STMPE811_ReadX+0xb0>
        return val;
 8002ff8:	89fb      	ldrh	r3, [r7, #14]
 8002ffa:	e000      	b.n	8002ffe <TM_STMPE811_ReadX+0xb2>
    }
    return x;
 8002ffc:	88fb      	ldrh	r3, [r7, #6]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	88888889 	.word	0x88888889

0800300c <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8003016:	204f      	movs	r0, #79	@ 0x4f
 8003018:	f7ff fd30 	bl	8002a7c <STMPE811_Read>
 800301c:	4603      	mov	r3, r0
 800301e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003020:	2050      	movs	r0, #80	@ 0x50
 8003022:	f7ff fd2b 	bl	8002a7c <STMPE811_Read>
 8003026:	4603      	mov	r3, r0
 8003028:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800302a:	7a7b      	ldrb	r3, [r7, #9]
 800302c:	b21b      	sxth	r3, r3
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	b21a      	sxth	r2, r3
 8003032:	7a3b      	ldrb	r3, [r7, #8]
 8003034:	b21b      	sxth	r3, r3
 8003036:	4313      	orrs	r3, r2
 8003038:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 800303a:	89fb      	ldrh	r3, [r7, #14]
 800303c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003040:	b29b      	uxth	r3, r3
 8003042:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003044:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003048:	4a18      	ldr	r2, [pc, #96]	@ (80030ac <TM_STMPE811_ReadY+0xa0>)
 800304a:	fb82 1203 	smull	r1, r2, r2, r3
 800304e:	1052      	asrs	r2, r2, #1
 8003050:	17db      	asrs	r3, r3, #31
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003056:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800305a:	2b00      	cmp	r3, #0
 800305c:	dc02      	bgt.n	8003064 <TM_STMPE811_ReadY+0x58>
        val = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	81fb      	strh	r3, [r7, #14]
 8003062:	e007      	b.n	8003074 <TM_STMPE811_ReadY+0x68>
    } else if (val >= 320) {
 8003064:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003068:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800306c:	db02      	blt.n	8003074 <TM_STMPE811_ReadY+0x68>
        val = 319;
 800306e:	f240 133f 	movw	r3, #319	@ 0x13f
 8003072:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003074:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003078:	88fb      	ldrh	r3, [r7, #6]
 800307a:	429a      	cmp	r2, r3
 800307c:	dd05      	ble.n	800308a <TM_STMPE811_ReadY+0x7e>
 800307e:	89fa      	ldrh	r2, [r7, #14]
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	b29b      	uxth	r3, r3
 8003086:	b21b      	sxth	r3, r3
 8003088:	e004      	b.n	8003094 <TM_STMPE811_ReadY+0x88>
 800308a:	89fb      	ldrh	r3, [r7, #14]
 800308c:	88fa      	ldrh	r2, [r7, #6]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	b29b      	uxth	r3, r3
 8003092:	b21b      	sxth	r3, r3
 8003094:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003096:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800309a:	2b04      	cmp	r3, #4
 800309c:	dd01      	ble.n	80030a2 <TM_STMPE811_ReadY+0x96>
        return val;
 800309e:	89fb      	ldrh	r3, [r7, #14]
 80030a0:	e000      	b.n	80030a4 <TM_STMPE811_ReadY+0x98>
    }
    return y;
 80030a2:	88fb      	ldrh	r3, [r7, #6]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	2e8ba2e9 	.word	0x2e8ba2e9

080030b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030b8:	4a14      	ldr	r2, [pc, #80]	@ (800310c <_sbrk+0x5c>)
 80030ba:	4b15      	ldr	r3, [pc, #84]	@ (8003110 <_sbrk+0x60>)
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030c4:	4b13      	ldr	r3, [pc, #76]	@ (8003114 <_sbrk+0x64>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d102      	bne.n	80030d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030cc:	4b11      	ldr	r3, [pc, #68]	@ (8003114 <_sbrk+0x64>)
 80030ce:	4a12      	ldr	r2, [pc, #72]	@ (8003118 <_sbrk+0x68>)
 80030d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030d2:	4b10      	ldr	r3, [pc, #64]	@ (8003114 <_sbrk+0x64>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4413      	add	r3, r2
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d207      	bcs.n	80030f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030e0:	f003 ffd8 	bl	8007094 <__errno>
 80030e4:	4603      	mov	r3, r0
 80030e6:	220c      	movs	r2, #12
 80030e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80030ee:	e009      	b.n	8003104 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030f0:	4b08      	ldr	r3, [pc, #32]	@ (8003114 <_sbrk+0x64>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030f6:	4b07      	ldr	r3, [pc, #28]	@ (8003114 <_sbrk+0x64>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4413      	add	r3, r2
 80030fe:	4a05      	ldr	r2, [pc, #20]	@ (8003114 <_sbrk+0x64>)
 8003100:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003102:	68fb      	ldr	r3, [r7, #12]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20030000 	.word	0x20030000
 8003110:	00000400 	.word	0x00000400
 8003114:	20025c28 	.word	0x20025c28
 8003118:	20025e28 	.word	0x20025e28

0800311c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003120:	4b06      	ldr	r3, [pc, #24]	@ (800313c <SystemInit+0x20>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003126:	4a05      	ldr	r2, [pc, #20]	@ (800313c <SystemInit+0x20>)
 8003128:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800312c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	e000ed00 	.word	0xe000ed00

08003140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003140:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003178 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003144:	f7ff ffea 	bl	800311c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003148:	480c      	ldr	r0, [pc, #48]	@ (800317c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800314a:	490d      	ldr	r1, [pc, #52]	@ (8003180 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800314c:	4a0d      	ldr	r2, [pc, #52]	@ (8003184 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800314e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003150:	e002      	b.n	8003158 <LoopCopyDataInit>

08003152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003156:	3304      	adds	r3, #4

08003158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800315a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800315c:	d3f9      	bcc.n	8003152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800315e:	4a0a      	ldr	r2, [pc, #40]	@ (8003188 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003160:	4c0a      	ldr	r4, [pc, #40]	@ (800318c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003164:	e001      	b.n	800316a <LoopFillZerobss>

08003166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003168:	3204      	adds	r2, #4

0800316a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800316a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800316c:	d3fb      	bcc.n	8003166 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800316e:	f003 ff97 	bl	80070a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003172:	f7fe fd88 	bl	8001c86 <main>
  bx  lr    
 8003176:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003178:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800317c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003180:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003184:	08009784 	.word	0x08009784
  ldr r2, =_sbss
 8003188:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800318c:	20025e28 	.word	0x20025e28

08003190 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003190:	e7fe      	b.n	8003190 <ADC_IRQHandler>
	...

08003194 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003198:	4b0e      	ldr	r3, [pc, #56]	@ (80031d4 <HAL_Init+0x40>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a0d      	ldr	r2, [pc, #52]	@ (80031d4 <HAL_Init+0x40>)
 800319e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031a4:	4b0b      	ldr	r3, [pc, #44]	@ (80031d4 <HAL_Init+0x40>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a0a      	ldr	r2, [pc, #40]	@ (80031d4 <HAL_Init+0x40>)
 80031aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031b0:	4b08      	ldr	r3, [pc, #32]	@ (80031d4 <HAL_Init+0x40>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a07      	ldr	r2, [pc, #28]	@ (80031d4 <HAL_Init+0x40>)
 80031b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031bc:	2003      	movs	r0, #3
 80031be:	f000 f931 	bl	8003424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031c2:	2000      	movs	r0, #0
 80031c4:	f000 f808 	bl	80031d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031c8:	f7ff f920 	bl	800240c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40023c00 	.word	0x40023c00

080031d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031e0:	4b12      	ldr	r3, [pc, #72]	@ (800322c <HAL_InitTick+0x54>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4b12      	ldr	r3, [pc, #72]	@ (8003230 <HAL_InitTick+0x58>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	4619      	mov	r1, r3
 80031ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80031f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 f93b 	bl	8003472 <HAL_SYSTICK_Config>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e00e      	b.n	8003224 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b0f      	cmp	r3, #15
 800320a:	d80a      	bhi.n	8003222 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800320c:	2200      	movs	r2, #0
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003214:	f000 f911 	bl	800343a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003218:	4a06      	ldr	r2, [pc, #24]	@ (8003234 <HAL_InitTick+0x5c>)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	e000      	b.n	8003224 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20000018 	.word	0x20000018
 8003230:	20000020 	.word	0x20000020
 8003234:	2000001c 	.word	0x2000001c

08003238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800323c:	4b06      	ldr	r3, [pc, #24]	@ (8003258 <HAL_IncTick+0x20>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	461a      	mov	r2, r3
 8003242:	4b06      	ldr	r3, [pc, #24]	@ (800325c <HAL_IncTick+0x24>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4413      	add	r3, r2
 8003248:	4a04      	ldr	r2, [pc, #16]	@ (800325c <HAL_IncTick+0x24>)
 800324a:	6013      	str	r3, [r2, #0]
}
 800324c:	bf00      	nop
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	20000020 	.word	0x20000020
 800325c:	20025c2c 	.word	0x20025c2c

08003260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return uwTick;
 8003264:	4b03      	ldr	r3, [pc, #12]	@ (8003274 <HAL_GetTick+0x14>)
 8003266:	681b      	ldr	r3, [r3, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20025c2c 	.word	0x20025c2c

08003278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003280:	f7ff ffee 	bl	8003260 <HAL_GetTick>
 8003284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003290:	d005      	beq.n	800329e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003292:	4b0a      	ldr	r3, [pc, #40]	@ (80032bc <HAL_Delay+0x44>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800329e:	bf00      	nop
 80032a0:	f7ff ffde 	bl	8003260 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d8f7      	bhi.n	80032a0 <HAL_Delay+0x28>
  {
  }
}
 80032b0:	bf00      	nop
 80032b2:	bf00      	nop
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20000020 	.word	0x20000020

080032c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003304 <__NVIC_SetPriorityGrouping+0x44>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032dc:	4013      	ands	r3, r2
 80032de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032f2:	4a04      	ldr	r2, [pc, #16]	@ (8003304 <__NVIC_SetPriorityGrouping+0x44>)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	60d3      	str	r3, [r2, #12]
}
 80032f8:	bf00      	nop
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800330c:	4b04      	ldr	r3, [pc, #16]	@ (8003320 <__NVIC_GetPriorityGrouping+0x18>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	0a1b      	lsrs	r3, r3, #8
 8003312:	f003 0307 	and.w	r3, r3, #7
}
 8003316:	4618      	mov	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	e000ed00 	.word	0xe000ed00

08003324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	6039      	str	r1, [r7, #0]
 800332e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003334:	2b00      	cmp	r3, #0
 8003336:	db0a      	blt.n	800334e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	b2da      	uxtb	r2, r3
 800333c:	490c      	ldr	r1, [pc, #48]	@ (8003370 <__NVIC_SetPriority+0x4c>)
 800333e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003342:	0112      	lsls	r2, r2, #4
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	440b      	add	r3, r1
 8003348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800334c:	e00a      	b.n	8003364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	4908      	ldr	r1, [pc, #32]	@ (8003374 <__NVIC_SetPriority+0x50>)
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	3b04      	subs	r3, #4
 800335c:	0112      	lsls	r2, r2, #4
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	440b      	add	r3, r1
 8003362:	761a      	strb	r2, [r3, #24]
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	e000e100 	.word	0xe000e100
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003378:	b480      	push	{r7}
 800337a:	b089      	sub	sp, #36	@ 0x24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f1c3 0307 	rsb	r3, r3, #7
 8003392:	2b04      	cmp	r3, #4
 8003394:	bf28      	it	cs
 8003396:	2304      	movcs	r3, #4
 8003398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3304      	adds	r3, #4
 800339e:	2b06      	cmp	r3, #6
 80033a0:	d902      	bls.n	80033a8 <NVIC_EncodePriority+0x30>
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3b03      	subs	r3, #3
 80033a6:	e000      	b.n	80033aa <NVIC_EncodePriority+0x32>
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43da      	mvns	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	401a      	ands	r2, r3
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ca:	43d9      	mvns	r1, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d0:	4313      	orrs	r3, r2
         );
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3724      	adds	r7, #36	@ 0x24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
	...

080033e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033f0:	d301      	bcc.n	80033f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033f2:	2301      	movs	r3, #1
 80033f4:	e00f      	b.n	8003416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003420 <SysTick_Config+0x40>)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033fe:	210f      	movs	r1, #15
 8003400:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003404:	f7ff ff8e 	bl	8003324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003408:	4b05      	ldr	r3, [pc, #20]	@ (8003420 <SysTick_Config+0x40>)
 800340a:	2200      	movs	r2, #0
 800340c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800340e:	4b04      	ldr	r3, [pc, #16]	@ (8003420 <SysTick_Config+0x40>)
 8003410:	2207      	movs	r2, #7
 8003412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	e000e010 	.word	0xe000e010

08003424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7ff ff47 	bl	80032c0 <__NVIC_SetPriorityGrouping>
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800343a:	b580      	push	{r7, lr}
 800343c:	b086      	sub	sp, #24
 800343e:	af00      	add	r7, sp, #0
 8003440:	4603      	mov	r3, r0
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
 8003446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800344c:	f7ff ff5c 	bl	8003308 <__NVIC_GetPriorityGrouping>
 8003450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	6978      	ldr	r0, [r7, #20]
 8003458:	f7ff ff8e 	bl	8003378 <NVIC_EncodePriority>
 800345c:	4602      	mov	r2, r0
 800345e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003462:	4611      	mov	r1, r2
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff ff5d 	bl	8003324 <__NVIC_SetPriority>
}
 800346a:	bf00      	nop
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff ffb0 	bl	80033e0 <SysTick_Config>
 8003480:	4603      	mov	r3, r0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800348c:	b480      	push	{r7}
 800348e:	b089      	sub	sp, #36	@ 0x24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800349a:	2300      	movs	r3, #0
 800349c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800349e:	2300      	movs	r3, #0
 80034a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034a2:	2300      	movs	r3, #0
 80034a4:	61fb      	str	r3, [r7, #28]
 80034a6:	e177      	b.n	8003798 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034a8:	2201      	movs	r2, #1
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4013      	ands	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	f040 8166 	bne.w	8003792 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d005      	beq.n	80034de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d130      	bne.n	8003540 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	2203      	movs	r2, #3
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43db      	mvns	r3, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4313      	orrs	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003514:	2201      	movs	r2, #1
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	091b      	lsrs	r3, r3, #4
 800352a:	f003 0201 	and.w	r2, r3, #1
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4313      	orrs	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	2b03      	cmp	r3, #3
 800354a:	d017      	beq.n	800357c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	2203      	movs	r2, #3
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4013      	ands	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4313      	orrs	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 0303 	and.w	r3, r3, #3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d123      	bne.n	80035d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	08da      	lsrs	r2, r3, #3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3208      	adds	r2, #8
 8003590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003594:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	220f      	movs	r2, #15
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4013      	ands	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4313      	orrs	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	08da      	lsrs	r2, r3, #3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3208      	adds	r2, #8
 80035ca:	69b9      	ldr	r1, [r7, #24]
 80035cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	2203      	movs	r2, #3
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 0203 	and.w	r2, r3, #3
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80c0 	beq.w	8003792 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	4b66      	ldr	r3, [pc, #408]	@ (80037b0 <HAL_GPIO_Init+0x324>)
 8003618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361a:	4a65      	ldr	r2, [pc, #404]	@ (80037b0 <HAL_GPIO_Init+0x324>)
 800361c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003620:	6453      	str	r3, [r2, #68]	@ 0x44
 8003622:	4b63      	ldr	r3, [pc, #396]	@ (80037b0 <HAL_GPIO_Init+0x324>)
 8003624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003626:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800362e:	4a61      	ldr	r2, [pc, #388]	@ (80037b4 <HAL_GPIO_Init+0x328>)
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	089b      	lsrs	r3, r3, #2
 8003634:	3302      	adds	r3, #2
 8003636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800363a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	220f      	movs	r2, #15
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43db      	mvns	r3, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4013      	ands	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a58      	ldr	r2, [pc, #352]	@ (80037b8 <HAL_GPIO_Init+0x32c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d037      	beq.n	80036ca <HAL_GPIO_Init+0x23e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a57      	ldr	r2, [pc, #348]	@ (80037bc <HAL_GPIO_Init+0x330>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d031      	beq.n	80036c6 <HAL_GPIO_Init+0x23a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a56      	ldr	r2, [pc, #344]	@ (80037c0 <HAL_GPIO_Init+0x334>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d02b      	beq.n	80036c2 <HAL_GPIO_Init+0x236>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a55      	ldr	r2, [pc, #340]	@ (80037c4 <HAL_GPIO_Init+0x338>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d025      	beq.n	80036be <HAL_GPIO_Init+0x232>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a54      	ldr	r2, [pc, #336]	@ (80037c8 <HAL_GPIO_Init+0x33c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d01f      	beq.n	80036ba <HAL_GPIO_Init+0x22e>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a53      	ldr	r2, [pc, #332]	@ (80037cc <HAL_GPIO_Init+0x340>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d019      	beq.n	80036b6 <HAL_GPIO_Init+0x22a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a52      	ldr	r2, [pc, #328]	@ (80037d0 <HAL_GPIO_Init+0x344>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_GPIO_Init+0x226>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a51      	ldr	r2, [pc, #324]	@ (80037d4 <HAL_GPIO_Init+0x348>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00d      	beq.n	80036ae <HAL_GPIO_Init+0x222>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a50      	ldr	r2, [pc, #320]	@ (80037d8 <HAL_GPIO_Init+0x34c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d007      	beq.n	80036aa <HAL_GPIO_Init+0x21e>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a4f      	ldr	r2, [pc, #316]	@ (80037dc <HAL_GPIO_Init+0x350>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d101      	bne.n	80036a6 <HAL_GPIO_Init+0x21a>
 80036a2:	2309      	movs	r3, #9
 80036a4:	e012      	b.n	80036cc <HAL_GPIO_Init+0x240>
 80036a6:	230a      	movs	r3, #10
 80036a8:	e010      	b.n	80036cc <HAL_GPIO_Init+0x240>
 80036aa:	2308      	movs	r3, #8
 80036ac:	e00e      	b.n	80036cc <HAL_GPIO_Init+0x240>
 80036ae:	2307      	movs	r3, #7
 80036b0:	e00c      	b.n	80036cc <HAL_GPIO_Init+0x240>
 80036b2:	2306      	movs	r3, #6
 80036b4:	e00a      	b.n	80036cc <HAL_GPIO_Init+0x240>
 80036b6:	2305      	movs	r3, #5
 80036b8:	e008      	b.n	80036cc <HAL_GPIO_Init+0x240>
 80036ba:	2304      	movs	r3, #4
 80036bc:	e006      	b.n	80036cc <HAL_GPIO_Init+0x240>
 80036be:	2303      	movs	r3, #3
 80036c0:	e004      	b.n	80036cc <HAL_GPIO_Init+0x240>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e002      	b.n	80036cc <HAL_GPIO_Init+0x240>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <HAL_GPIO_Init+0x240>
 80036ca:	2300      	movs	r3, #0
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	f002 0203 	and.w	r2, r2, #3
 80036d2:	0092      	lsls	r2, r2, #2
 80036d4:	4093      	lsls	r3, r2
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4313      	orrs	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036dc:	4935      	ldr	r1, [pc, #212]	@ (80037b4 <HAL_GPIO_Init+0x328>)
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	089b      	lsrs	r3, r3, #2
 80036e2:	3302      	adds	r3, #2
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036ea:	4b3d      	ldr	r3, [pc, #244]	@ (80037e0 <HAL_GPIO_Init+0x354>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	43db      	mvns	r3, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4013      	ands	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800370e:	4a34      	ldr	r2, [pc, #208]	@ (80037e0 <HAL_GPIO_Init+0x354>)
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003714:	4b32      	ldr	r3, [pc, #200]	@ (80037e0 <HAL_GPIO_Init+0x354>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	43db      	mvns	r3, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003738:	4a29      	ldr	r2, [pc, #164]	@ (80037e0 <HAL_GPIO_Init+0x354>)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800373e:	4b28      	ldr	r3, [pc, #160]	@ (80037e0 <HAL_GPIO_Init+0x354>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003762:	4a1f      	ldr	r2, [pc, #124]	@ (80037e0 <HAL_GPIO_Init+0x354>)
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003768:	4b1d      	ldr	r3, [pc, #116]	@ (80037e0 <HAL_GPIO_Init+0x354>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	43db      	mvns	r3, r3
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4013      	ands	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800378c:	4a14      	ldr	r2, [pc, #80]	@ (80037e0 <HAL_GPIO_Init+0x354>)
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	3301      	adds	r3, #1
 8003796:	61fb      	str	r3, [r7, #28]
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	2b0f      	cmp	r3, #15
 800379c:	f67f ae84 	bls.w	80034a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037a0:	bf00      	nop
 80037a2:	bf00      	nop
 80037a4:	3724      	adds	r7, #36	@ 0x24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40023800 	.word	0x40023800
 80037b4:	40013800 	.word	0x40013800
 80037b8:	40020000 	.word	0x40020000
 80037bc:	40020400 	.word	0x40020400
 80037c0:	40020800 	.word	0x40020800
 80037c4:	40020c00 	.word	0x40020c00
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40021400 	.word	0x40021400
 80037d0:	40021800 	.word	0x40021800
 80037d4:	40021c00 	.word	0x40021c00
 80037d8:	40022000 	.word	0x40022000
 80037dc:	40022400 	.word	0x40022400
 80037e0:	40013c00 	.word	0x40013c00

080037e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	e0d9      	b.n	80039b4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003800:	2201      	movs	r2, #1
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4013      	ands	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	429a      	cmp	r2, r3
 8003818:	f040 80c9 	bne.w	80039ae <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800381c:	4a6b      	ldr	r2, [pc, #428]	@ (80039cc <HAL_GPIO_DeInit+0x1e8>)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	089b      	lsrs	r3, r3, #2
 8003822:	3302      	adds	r3, #2
 8003824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003828:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	220f      	movs	r2, #15
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	4013      	ands	r3, r2
 800383c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a63      	ldr	r2, [pc, #396]	@ (80039d0 <HAL_GPIO_DeInit+0x1ec>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d037      	beq.n	80038b6 <HAL_GPIO_DeInit+0xd2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a62      	ldr	r2, [pc, #392]	@ (80039d4 <HAL_GPIO_DeInit+0x1f0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d031      	beq.n	80038b2 <HAL_GPIO_DeInit+0xce>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a61      	ldr	r2, [pc, #388]	@ (80039d8 <HAL_GPIO_DeInit+0x1f4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d02b      	beq.n	80038ae <HAL_GPIO_DeInit+0xca>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a60      	ldr	r2, [pc, #384]	@ (80039dc <HAL_GPIO_DeInit+0x1f8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d025      	beq.n	80038aa <HAL_GPIO_DeInit+0xc6>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a5f      	ldr	r2, [pc, #380]	@ (80039e0 <HAL_GPIO_DeInit+0x1fc>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d01f      	beq.n	80038a6 <HAL_GPIO_DeInit+0xc2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a5e      	ldr	r2, [pc, #376]	@ (80039e4 <HAL_GPIO_DeInit+0x200>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d019      	beq.n	80038a2 <HAL_GPIO_DeInit+0xbe>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a5d      	ldr	r2, [pc, #372]	@ (80039e8 <HAL_GPIO_DeInit+0x204>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d013      	beq.n	800389e <HAL_GPIO_DeInit+0xba>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a5c      	ldr	r2, [pc, #368]	@ (80039ec <HAL_GPIO_DeInit+0x208>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00d      	beq.n	800389a <HAL_GPIO_DeInit+0xb6>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a5b      	ldr	r2, [pc, #364]	@ (80039f0 <HAL_GPIO_DeInit+0x20c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d007      	beq.n	8003896 <HAL_GPIO_DeInit+0xb2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a5a      	ldr	r2, [pc, #360]	@ (80039f4 <HAL_GPIO_DeInit+0x210>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d101      	bne.n	8003892 <HAL_GPIO_DeInit+0xae>
 800388e:	2309      	movs	r3, #9
 8003890:	e012      	b.n	80038b8 <HAL_GPIO_DeInit+0xd4>
 8003892:	230a      	movs	r3, #10
 8003894:	e010      	b.n	80038b8 <HAL_GPIO_DeInit+0xd4>
 8003896:	2308      	movs	r3, #8
 8003898:	e00e      	b.n	80038b8 <HAL_GPIO_DeInit+0xd4>
 800389a:	2307      	movs	r3, #7
 800389c:	e00c      	b.n	80038b8 <HAL_GPIO_DeInit+0xd4>
 800389e:	2306      	movs	r3, #6
 80038a0:	e00a      	b.n	80038b8 <HAL_GPIO_DeInit+0xd4>
 80038a2:	2305      	movs	r3, #5
 80038a4:	e008      	b.n	80038b8 <HAL_GPIO_DeInit+0xd4>
 80038a6:	2304      	movs	r3, #4
 80038a8:	e006      	b.n	80038b8 <HAL_GPIO_DeInit+0xd4>
 80038aa:	2303      	movs	r3, #3
 80038ac:	e004      	b.n	80038b8 <HAL_GPIO_DeInit+0xd4>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e002      	b.n	80038b8 <HAL_GPIO_DeInit+0xd4>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <HAL_GPIO_DeInit+0xd4>
 80038b6:	2300      	movs	r3, #0
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	f002 0203 	and.w	r2, r2, #3
 80038be:	0092      	lsls	r2, r2, #2
 80038c0:	4093      	lsls	r3, r2
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d132      	bne.n	800392e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80038c8:	4b4b      	ldr	r3, [pc, #300]	@ (80039f8 <HAL_GPIO_DeInit+0x214>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	43db      	mvns	r3, r3
 80038d0:	4949      	ldr	r1, [pc, #292]	@ (80039f8 <HAL_GPIO_DeInit+0x214>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80038d6:	4b48      	ldr	r3, [pc, #288]	@ (80039f8 <HAL_GPIO_DeInit+0x214>)
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	43db      	mvns	r3, r3
 80038de:	4946      	ldr	r1, [pc, #280]	@ (80039f8 <HAL_GPIO_DeInit+0x214>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80038e4:	4b44      	ldr	r3, [pc, #272]	@ (80039f8 <HAL_GPIO_DeInit+0x214>)
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	43db      	mvns	r3, r3
 80038ec:	4942      	ldr	r1, [pc, #264]	@ (80039f8 <HAL_GPIO_DeInit+0x214>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80038f2:	4b41      	ldr	r3, [pc, #260]	@ (80039f8 <HAL_GPIO_DeInit+0x214>)
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	43db      	mvns	r3, r3
 80038fa:	493f      	ldr	r1, [pc, #252]	@ (80039f8 <HAL_GPIO_DeInit+0x214>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	220f      	movs	r2, #15
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003910:	4a2e      	ldr	r2, [pc, #184]	@ (80039cc <HAL_GPIO_DeInit+0x1e8>)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	089b      	lsrs	r3, r3, #2
 8003916:	3302      	adds	r3, #2
 8003918:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	43da      	mvns	r2, r3
 8003920:	482a      	ldr	r0, [pc, #168]	@ (80039cc <HAL_GPIO_DeInit+0x1e8>)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	089b      	lsrs	r3, r3, #2
 8003926:	400a      	ands	r2, r1
 8003928:	3302      	adds	r3, #2
 800392a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	2103      	movs	r1, #3
 8003938:	fa01 f303 	lsl.w	r3, r1, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	401a      	ands	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	08da      	lsrs	r2, r3, #3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3208      	adds	r2, #8
 800394c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	220f      	movs	r2, #15
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	08d2      	lsrs	r2, r2, #3
 8003964:	4019      	ands	r1, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3208      	adds	r2, #8
 800396a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	2103      	movs	r1, #3
 8003978:	fa01 f303 	lsl.w	r3, r1, r3
 800397c:	43db      	mvns	r3, r3
 800397e:	401a      	ands	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	2101      	movs	r1, #1
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	fa01 f303 	lsl.w	r3, r1, r3
 8003990:	43db      	mvns	r3, r3
 8003992:	401a      	ands	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	2103      	movs	r1, #3
 80039a2:	fa01 f303 	lsl.w	r3, r1, r3
 80039a6:	43db      	mvns	r3, r3
 80039a8:	401a      	ands	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	3301      	adds	r3, #1
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2b0f      	cmp	r3, #15
 80039b8:	f67f af22 	bls.w	8003800 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	371c      	adds	r7, #28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40013800 	.word	0x40013800
 80039d0:	40020000 	.word	0x40020000
 80039d4:	40020400 	.word	0x40020400
 80039d8:	40020800 	.word	0x40020800
 80039dc:	40020c00 	.word	0x40020c00
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40021400 	.word	0x40021400
 80039e8:	40021800 	.word	0x40021800
 80039ec:	40021c00 	.word	0x40021c00
 80039f0:	40022000 	.word	0x40022000
 80039f4:	40022400 	.word	0x40022400
 80039f8:	40013c00 	.word	0x40013c00

080039fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a0c:	787b      	ldrb	r3, [r7, #1]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a12:	887a      	ldrh	r2, [r7, #2]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a18:	e003      	b.n	8003a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a1a:	887b      	ldrh	r3, [r7, #2]
 8003a1c:	041a      	lsls	r2, r3, #16
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	619a      	str	r2, [r3, #24]
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e12b      	b.n	8003c9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fe fd00 	bl	800245c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2224      	movs	r2, #36	@ 0x24
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a94:	f001 ff82 	bl	800599c <HAL_RCC_GetPCLK1Freq>
 8003a98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	4a81      	ldr	r2, [pc, #516]	@ (8003ca4 <HAL_I2C_Init+0x274>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d807      	bhi.n	8003ab4 <HAL_I2C_Init+0x84>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4a80      	ldr	r2, [pc, #512]	@ (8003ca8 <HAL_I2C_Init+0x278>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	bf94      	ite	ls
 8003aac:	2301      	movls	r3, #1
 8003aae:	2300      	movhi	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	e006      	b.n	8003ac2 <HAL_I2C_Init+0x92>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4a7d      	ldr	r2, [pc, #500]	@ (8003cac <HAL_I2C_Init+0x27c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	bf94      	ite	ls
 8003abc:	2301      	movls	r3, #1
 8003abe:	2300      	movhi	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e0e7      	b.n	8003c9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4a78      	ldr	r2, [pc, #480]	@ (8003cb0 <HAL_I2C_Init+0x280>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	0c9b      	lsrs	r3, r3, #18
 8003ad4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	4a6a      	ldr	r2, [pc, #424]	@ (8003ca4 <HAL_I2C_Init+0x274>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d802      	bhi.n	8003b04 <HAL_I2C_Init+0xd4>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	3301      	adds	r3, #1
 8003b02:	e009      	b.n	8003b18 <HAL_I2C_Init+0xe8>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b0a:	fb02 f303 	mul.w	r3, r2, r3
 8003b0e:	4a69      	ldr	r2, [pc, #420]	@ (8003cb4 <HAL_I2C_Init+0x284>)
 8003b10:	fba2 2303 	umull	r2, r3, r2, r3
 8003b14:	099b      	lsrs	r3, r3, #6
 8003b16:	3301      	adds	r3, #1
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b2a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	495c      	ldr	r1, [pc, #368]	@ (8003ca4 <HAL_I2C_Init+0x274>)
 8003b34:	428b      	cmp	r3, r1
 8003b36:	d819      	bhi.n	8003b6c <HAL_I2C_Init+0x13c>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1e59      	subs	r1, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b46:	1c59      	adds	r1, r3, #1
 8003b48:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b4c:	400b      	ands	r3, r1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <HAL_I2C_Init+0x138>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1e59      	subs	r1, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b60:	3301      	adds	r3, #1
 8003b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b66:	e051      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003b68:	2304      	movs	r3, #4
 8003b6a:	e04f      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d111      	bne.n	8003b98 <HAL_I2C_Init+0x168>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1e58      	subs	r0, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	440b      	add	r3, r1
 8003b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b86:	3301      	adds	r3, #1
 8003b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	bf0c      	ite	eq
 8003b90:	2301      	moveq	r3, #1
 8003b92:	2300      	movne	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	e012      	b.n	8003bbe <HAL_I2C_Init+0x18e>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1e58      	subs	r0, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6859      	ldr	r1, [r3, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	0099      	lsls	r1, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bae:	3301      	adds	r3, #1
 8003bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bf0c      	ite	eq
 8003bb8:	2301      	moveq	r3, #1
 8003bba:	2300      	movne	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_I2C_Init+0x196>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e022      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10e      	bne.n	8003bec <HAL_I2C_Init+0x1bc>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	1e58      	subs	r0, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6859      	ldr	r1, [r3, #4]
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	440b      	add	r3, r1
 8003bdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be0:	3301      	adds	r3, #1
 8003be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bea:	e00f      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1e58      	subs	r0, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6859      	ldr	r1, [r3, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	0099      	lsls	r1, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c02:	3301      	adds	r3, #1
 8003c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	6809      	ldr	r1, [r1, #0]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69da      	ldr	r2, [r3, #28]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c3a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6911      	ldr	r1, [r2, #16]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	68d2      	ldr	r2, [r2, #12]
 8003c46:	4311      	orrs	r1, r2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695a      	ldr	r2, [r3, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	000186a0 	.word	0x000186a0
 8003ca8:	001e847f 	.word	0x001e847f
 8003cac:	003d08ff 	.word	0x003d08ff
 8003cb0:	431bde83 	.word	0x431bde83
 8003cb4:	10624dd3 	.word	0x10624dd3

08003cb8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	4608      	mov	r0, r1
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	817b      	strh	r3, [r7, #10]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	813b      	strh	r3, [r7, #8]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cd2:	f7ff fac5 	bl	8003260 <HAL_GetTick>
 8003cd6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b20      	cmp	r3, #32
 8003ce2:	f040 80d9 	bne.w	8003e98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	2319      	movs	r3, #25
 8003cec:	2201      	movs	r2, #1
 8003cee:	496d      	ldr	r1, [pc, #436]	@ (8003ea4 <HAL_I2C_Mem_Write+0x1ec>)
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 fc8b 	bl	800460c <I2C_WaitOnFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e0cc      	b.n	8003e9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_I2C_Mem_Write+0x56>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e0c5      	b.n	8003e9a <HAL_I2C_Mem_Write+0x1e2>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d007      	beq.n	8003d34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2221      	movs	r2, #33	@ 0x21
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2240      	movs	r2, #64	@ 0x40
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a3a      	ldr	r2, [r7, #32]
 8003d5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4a4d      	ldr	r2, [pc, #308]	@ (8003ea8 <HAL_I2C_Mem_Write+0x1f0>)
 8003d74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d76:	88f8      	ldrh	r0, [r7, #6]
 8003d78:	893a      	ldrh	r2, [r7, #8]
 8003d7a:	8979      	ldrh	r1, [r7, #10]
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	9301      	str	r3, [sp, #4]
 8003d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	4603      	mov	r3, r0
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 fac2 	bl	8004310 <I2C_RequestMemoryWrite>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d052      	beq.n	8003e38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e081      	b.n	8003e9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 fd50 	bl	8004840 <I2C_WaitOnTXEFlagUntilTimeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00d      	beq.n	8003dc2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d107      	bne.n	8003dbe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e06b      	b.n	8003e9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc6:	781a      	ldrb	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d11b      	bne.n	8003e38 <HAL_I2C_Mem_Write+0x180>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d017      	beq.n	8003e38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	781a      	ldrb	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1aa      	bne.n	8003d96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 fd43 	bl	80048d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00d      	beq.n	8003e6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d107      	bne.n	8003e68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e016      	b.n	8003e9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e94:	2300      	movs	r3, #0
 8003e96:	e000      	b.n	8003e9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e98:	2302      	movs	r3, #2
  }
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	00100002 	.word	0x00100002
 8003ea8:	ffff0000 	.word	0xffff0000

08003eac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08c      	sub	sp, #48	@ 0x30
 8003eb0:	af02      	add	r7, sp, #8
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	4608      	mov	r0, r1
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4603      	mov	r3, r0
 8003ebc:	817b      	strh	r3, [r7, #10]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	813b      	strh	r3, [r7, #8]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ec6:	f7ff f9cb 	bl	8003260 <HAL_GetTick>
 8003eca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	f040 8214 	bne.w	8004302 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	2319      	movs	r3, #25
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	497b      	ldr	r1, [pc, #492]	@ (80040d0 <HAL_I2C_Mem_Read+0x224>)
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 fb91 	bl	800460c <I2C_WaitOnFlagUntilTimeout>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e207      	b.n	8004304 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_I2C_Mem_Read+0x56>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e200      	b.n	8004304 <HAL_I2C_Mem_Read+0x458>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d007      	beq.n	8003f28 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0201 	orr.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2222      	movs	r2, #34	@ 0x22
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2240      	movs	r2, #64	@ 0x40
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003f58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4a5b      	ldr	r2, [pc, #364]	@ (80040d4 <HAL_I2C_Mem_Read+0x228>)
 8003f68:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f6a:	88f8      	ldrh	r0, [r7, #6]
 8003f6c:	893a      	ldrh	r2, [r7, #8]
 8003f6e:	8979      	ldrh	r1, [r7, #10]
 8003f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	4603      	mov	r3, r0
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fa5e 	bl	800443c <I2C_RequestMemoryRead>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e1bc      	b.n	8004304 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d113      	bne.n	8003fba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f92:	2300      	movs	r3, #0
 8003f94:	623b      	str	r3, [r7, #32]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	623b      	str	r3, [r7, #32]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	623b      	str	r3, [r7, #32]
 8003fa6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	e190      	b.n	80042dc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d11b      	bne.n	8003ffa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	61fb      	str	r3, [r7, #28]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	61fb      	str	r3, [r7, #28]
 8003fe6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	e170      	b.n	80042dc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d11b      	bne.n	800403a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004010:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004020:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004022:	2300      	movs	r3, #0
 8004024:	61bb      	str	r3, [r7, #24]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	61bb      	str	r3, [r7, #24]
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	e150      	b.n	80042dc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004050:	e144      	b.n	80042dc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004056:	2b03      	cmp	r3, #3
 8004058:	f200 80f1 	bhi.w	800423e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004060:	2b01      	cmp	r3, #1
 8004062:	d123      	bne.n	80040ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004064:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004066:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 fc79 	bl	8004960 <I2C_WaitOnRXNEFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e145      	b.n	8004304 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040aa:	e117      	b.n	80042dc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d14e      	bne.n	8004152 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ba:	2200      	movs	r2, #0
 80040bc:	4906      	ldr	r1, [pc, #24]	@ (80040d8 <HAL_I2C_Mem_Read+0x22c>)
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 faa4 	bl	800460c <I2C_WaitOnFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d008      	beq.n	80040dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e11a      	b.n	8004304 <HAL_I2C_Mem_Read+0x458>
 80040ce:	bf00      	nop
 80040d0:	00100002 	.word	0x00100002
 80040d4:	ffff0000 	.word	0xffff0000
 80040d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	691a      	ldr	r2, [r3, #16]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004108:	3b01      	subs	r3, #1
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004114:	b29b      	uxth	r3, r3
 8004116:	3b01      	subs	r3, #1
 8004118:	b29a      	uxth	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004150:	e0c4      	b.n	80042dc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004158:	2200      	movs	r2, #0
 800415a:	496c      	ldr	r1, [pc, #432]	@ (800430c <HAL_I2C_Mem_Read+0x460>)
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 fa55 	bl	800460c <I2C_WaitOnFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0cb      	b.n	8004304 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800417a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691a      	ldr	r2, [r3, #16]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b4:	2200      	movs	r2, #0
 80041b6:	4955      	ldr	r1, [pc, #340]	@ (800430c <HAL_I2C_Mem_Read+0x460>)
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 fa27 	bl	800460c <I2C_WaitOnFlagUntilTimeout>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e09d      	b.n	8004304 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691a      	ldr	r2, [r3, #16]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004200:	b29b      	uxth	r3, r3
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800423c:	e04e      	b.n	80042dc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800423e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004240:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 fb8c 	bl	8004960 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e058      	b.n	8004304 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b04      	cmp	r3, #4
 8004290:	d124      	bne.n	80042dc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004296:	2b03      	cmp	r3, #3
 8004298:	d107      	bne.n	80042aa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042a8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f47f aeb6 	bne.w	8004052 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	e000      	b.n	8004304 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004302:	2302      	movs	r3, #2
  }
}
 8004304:	4618      	mov	r0, r3
 8004306:	3728      	adds	r7, #40	@ 0x28
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	00010004 	.word	0x00010004

08004310 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	4608      	mov	r0, r1
 800431a:	4611      	mov	r1, r2
 800431c:	461a      	mov	r2, r3
 800431e:	4603      	mov	r3, r0
 8004320:	817b      	strh	r3, [r7, #10]
 8004322:	460b      	mov	r3, r1
 8004324:	813b      	strh	r3, [r7, #8]
 8004326:	4613      	mov	r3, r2
 8004328:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004338:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	2200      	movs	r2, #0
 8004342:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 f960 	bl	800460c <I2C_WaitOnFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00d      	beq.n	800436e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004360:	d103      	bne.n	800436a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004368:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e05f      	b.n	800442e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800436e:	897b      	ldrh	r3, [r7, #10]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	461a      	mov	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800437c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004380:	6a3a      	ldr	r2, [r7, #32]
 8004382:	492d      	ldr	r1, [pc, #180]	@ (8004438 <I2C_RequestMemoryWrite+0x128>)
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 f9bb 	bl	8004700 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e04c      	b.n	800442e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004394:	2300      	movs	r3, #0
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ac:	6a39      	ldr	r1, [r7, #32]
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 fa46 	bl	8004840 <I2C_WaitOnTXEFlagUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00d      	beq.n	80043d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d107      	bne.n	80043d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e02b      	b.n	800442e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043d6:	88fb      	ldrh	r3, [r7, #6]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d105      	bne.n	80043e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043dc:	893b      	ldrh	r3, [r7, #8]
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	611a      	str	r2, [r3, #16]
 80043e6:	e021      	b.n	800442c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043e8:	893b      	ldrh	r3, [r7, #8]
 80043ea:	0a1b      	lsrs	r3, r3, #8
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f8:	6a39      	ldr	r1, [r7, #32]
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 fa20 	bl	8004840 <I2C_WaitOnTXEFlagUntilTimeout>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00d      	beq.n	8004422 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440a:	2b04      	cmp	r3, #4
 800440c:	d107      	bne.n	800441e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800441c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e005      	b.n	800442e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004422:	893b      	ldrh	r3, [r7, #8]
 8004424:	b2da      	uxtb	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	00010002 	.word	0x00010002

0800443c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af02      	add	r7, sp, #8
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	4608      	mov	r0, r1
 8004446:	4611      	mov	r1, r2
 8004448:	461a      	mov	r2, r3
 800444a:	4603      	mov	r3, r0
 800444c:	817b      	strh	r3, [r7, #10]
 800444e:	460b      	mov	r3, r1
 8004450:	813b      	strh	r3, [r7, #8]
 8004452:	4613      	mov	r3, r2
 8004454:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004464:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004474:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	6a3b      	ldr	r3, [r7, #32]
 800447c:	2200      	movs	r2, #0
 800447e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f8c2 	bl	800460c <I2C_WaitOnFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00d      	beq.n	80044aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004498:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800449c:	d103      	bne.n	80044a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e0aa      	b.n	8004600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044aa:	897b      	ldrh	r3, [r7, #10]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	461a      	mov	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044bc:	6a3a      	ldr	r2, [r7, #32]
 80044be:	4952      	ldr	r1, [pc, #328]	@ (8004608 <I2C_RequestMemoryRead+0x1cc>)
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f91d 	bl	8004700 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e097      	b.n	8004600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044e8:	6a39      	ldr	r1, [r7, #32]
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f9a8 	bl	8004840 <I2C_WaitOnTXEFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00d      	beq.n	8004512 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d107      	bne.n	800450e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800450c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e076      	b.n	8004600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004512:	88fb      	ldrh	r3, [r7, #6]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d105      	bne.n	8004524 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004518:	893b      	ldrh	r3, [r7, #8]
 800451a:	b2da      	uxtb	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	611a      	str	r2, [r3, #16]
 8004522:	e021      	b.n	8004568 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004524:	893b      	ldrh	r3, [r7, #8]
 8004526:	0a1b      	lsrs	r3, r3, #8
 8004528:	b29b      	uxth	r3, r3
 800452a:	b2da      	uxtb	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004534:	6a39      	ldr	r1, [r7, #32]
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 f982 	bl	8004840 <I2C_WaitOnTXEFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00d      	beq.n	800455e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004546:	2b04      	cmp	r3, #4
 8004548:	d107      	bne.n	800455a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004558:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e050      	b.n	8004600 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800455e:	893b      	ldrh	r3, [r7, #8]
 8004560:	b2da      	uxtb	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800456a:	6a39      	ldr	r1, [r7, #32]
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 f967 	bl	8004840 <I2C_WaitOnTXEFlagUntilTimeout>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00d      	beq.n	8004594 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457c:	2b04      	cmp	r3, #4
 800457e:	d107      	bne.n	8004590 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800458e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e035      	b.n	8004600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f82b 	bl	800460c <I2C_WaitOnFlagUntilTimeout>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00d      	beq.n	80045d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045ca:	d103      	bne.n	80045d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e013      	b.n	8004600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045d8:	897b      	ldrh	r3, [r7, #10]
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ea:	6a3a      	ldr	r2, [r7, #32]
 80045ec:	4906      	ldr	r1, [pc, #24]	@ (8004608 <I2C_RequestMemoryRead+0x1cc>)
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 f886 	bl	8004700 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	00010002 	.word	0x00010002

0800460c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	4613      	mov	r3, r2
 800461a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800461c:	e048      	b.n	80046b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004624:	d044      	beq.n	80046b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004626:	f7fe fe1b 	bl	8003260 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	429a      	cmp	r2, r3
 8004634:	d302      	bcc.n	800463c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d139      	bne.n	80046b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	0c1b      	lsrs	r3, r3, #16
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b01      	cmp	r3, #1
 8004644:	d10d      	bne.n	8004662 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	43da      	mvns	r2, r3
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	4013      	ands	r3, r2
 8004652:	b29b      	uxth	r3, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	bf0c      	ite	eq
 8004658:	2301      	moveq	r3, #1
 800465a:	2300      	movne	r3, #0
 800465c:	b2db      	uxtb	r3, r3
 800465e:	461a      	mov	r2, r3
 8004660:	e00c      	b.n	800467c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	43da      	mvns	r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	4013      	ands	r3, r2
 800466e:	b29b      	uxth	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	bf0c      	ite	eq
 8004674:	2301      	moveq	r3, #1
 8004676:	2300      	movne	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	461a      	mov	r2, r3
 800467c:	79fb      	ldrb	r3, [r7, #7]
 800467e:	429a      	cmp	r2, r3
 8004680:	d116      	bne.n	80046b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469c:	f043 0220 	orr.w	r2, r3, #32
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e023      	b.n	80046f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	0c1b      	lsrs	r3, r3, #16
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d10d      	bne.n	80046d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	43da      	mvns	r2, r3
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	4013      	ands	r3, r2
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	bf0c      	ite	eq
 80046cc:	2301      	moveq	r3, #1
 80046ce:	2300      	movne	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	461a      	mov	r2, r3
 80046d4:	e00c      	b.n	80046f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	43da      	mvns	r2, r3
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	4013      	ands	r3, r2
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	bf0c      	ite	eq
 80046e8:	2301      	moveq	r3, #1
 80046ea:	2300      	movne	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	461a      	mov	r2, r3
 80046f0:	79fb      	ldrb	r3, [r7, #7]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d093      	beq.n	800461e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800470e:	e071      	b.n	80047f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800471a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800471e:	d123      	bne.n	8004768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800472e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004738:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004754:	f043 0204 	orr.w	r2, r3, #4
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e067      	b.n	8004838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800476e:	d041      	beq.n	80047f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004770:	f7fe fd76 	bl	8003260 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	429a      	cmp	r2, r3
 800477e:	d302      	bcc.n	8004786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d136      	bne.n	80047f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	0c1b      	lsrs	r3, r3, #16
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b01      	cmp	r3, #1
 800478e:	d10c      	bne.n	80047aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	43da      	mvns	r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4013      	ands	r3, r2
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	bf14      	ite	ne
 80047a2:	2301      	movne	r3, #1
 80047a4:	2300      	moveq	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	e00b      	b.n	80047c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	43da      	mvns	r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	4013      	ands	r3, r2
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	bf14      	ite	ne
 80047bc:	2301      	movne	r3, #1
 80047be:	2300      	moveq	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d016      	beq.n	80047f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e0:	f043 0220 	orr.w	r2, r3, #32
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e021      	b.n	8004838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	0c1b      	lsrs	r3, r3, #16
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d10c      	bne.n	8004818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	43da      	mvns	r2, r3
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	4013      	ands	r3, r2
 800480a:	b29b      	uxth	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	bf14      	ite	ne
 8004810:	2301      	movne	r3, #1
 8004812:	2300      	moveq	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	e00b      	b.n	8004830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	43da      	mvns	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4013      	ands	r3, r2
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	bf14      	ite	ne
 800482a:	2301      	movne	r3, #1
 800482c:	2300      	moveq	r3, #0
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	f47f af6d 	bne.w	8004710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800484c:	e034      	b.n	80048b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 f8e3 	bl	8004a1a <I2C_IsAcknowledgeFailed>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e034      	b.n	80048c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004864:	d028      	beq.n	80048b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004866:	f7fe fcfb 	bl	8003260 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	429a      	cmp	r2, r3
 8004874:	d302      	bcc.n	800487c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d11d      	bne.n	80048b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004886:	2b80      	cmp	r3, #128	@ 0x80
 8004888:	d016      	beq.n	80048b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a4:	f043 0220 	orr.w	r2, r3, #32
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e007      	b.n	80048c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048c2:	2b80      	cmp	r3, #128	@ 0x80
 80048c4:	d1c3      	bne.n	800484e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048dc:	e034      	b.n	8004948 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 f89b 	bl	8004a1a <I2C_IsAcknowledgeFailed>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e034      	b.n	8004958 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048f4:	d028      	beq.n	8004948 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f6:	f7fe fcb3 	bl	8003260 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	429a      	cmp	r2, r3
 8004904:	d302      	bcc.n	800490c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d11d      	bne.n	8004948 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b04      	cmp	r3, #4
 8004918:	d016      	beq.n	8004948 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004934:	f043 0220 	orr.w	r2, r3, #32
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e007      	b.n	8004958 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	2b04      	cmp	r3, #4
 8004954:	d1c3      	bne.n	80048de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800496c:	e049      	b.n	8004a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	f003 0310 	and.w	r3, r3, #16
 8004978:	2b10      	cmp	r3, #16
 800497a:	d119      	bne.n	80049b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0210 	mvn.w	r2, #16
 8004984:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e030      	b.n	8004a12 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b0:	f7fe fc56 	bl	8003260 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d302      	bcc.n	80049c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d11d      	bne.n	8004a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d0:	2b40      	cmp	r3, #64	@ 0x40
 80049d2:	d016      	beq.n	8004a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ee:	f043 0220 	orr.w	r2, r3, #32
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e007      	b.n	8004a12 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0c:	2b40      	cmp	r3, #64	@ 0x40
 8004a0e:	d1ae      	bne.n	800496e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a30:	d11b      	bne.n	8004a6a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a3a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a56:	f043 0204 	orr.w	r2, r3, #4
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d129      	bne.n	8004ae2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2224      	movs	r2, #36	@ 0x24
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0201 	bic.w	r2, r2, #1
 8004aa4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0210 	bic.w	r2, r2, #16
 8004ab4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 0201 	orr.w	r2, r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	e000      	b.n	8004ae4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004ae2:	2302      	movs	r3, #2
  }
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004afa:	2300      	movs	r3, #0
 8004afc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	d12a      	bne.n	8004b60 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2224      	movs	r2, #36	@ 0x24
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0201 	bic.w	r2, r2, #1
 8004b20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b28:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004b2a:	89fb      	ldrh	r3, [r7, #14]
 8004b2c:	f023 030f 	bic.w	r3, r3, #15
 8004b30:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	89fb      	ldrh	r3, [r7, #14]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	89fa      	ldrh	r2, [r7, #14]
 8004b42:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0201 	orr.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	e000      	b.n	8004b62 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004b60:	2302      	movs	r3, #2
  }
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
	...

08004b70 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e0bf      	b.n	8004d02 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d106      	bne.n	8004b9c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7fd fcca 	bl	8002530 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699a      	ldr	r2, [r3, #24]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004bb2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6999      	ldr	r1, [r3, #24]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004bc8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6899      	ldr	r1, [r3, #8]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	4b4a      	ldr	r3, [pc, #296]	@ (8004d0c <HAL_LTDC_Init+0x19c>)
 8004be4:	400b      	ands	r3, r1
 8004be6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	041b      	lsls	r3, r3, #16
 8004bee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6899      	ldr	r1, [r3, #8]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699a      	ldr	r2, [r3, #24]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68d9      	ldr	r1, [r3, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	4b3e      	ldr	r3, [pc, #248]	@ (8004d0c <HAL_LTDC_Init+0x19c>)
 8004c12:	400b      	ands	r3, r1
 8004c14:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	041b      	lsls	r3, r3, #16
 8004c1c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68d9      	ldr	r1, [r3, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1a      	ldr	r2, [r3, #32]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6919      	ldr	r1, [r3, #16]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	4b33      	ldr	r3, [pc, #204]	@ (8004d0c <HAL_LTDC_Init+0x19c>)
 8004c40:	400b      	ands	r3, r1
 8004c42:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c48:	041b      	lsls	r3, r3, #16
 8004c4a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6919      	ldr	r1, [r3, #16]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6959      	ldr	r1, [r3, #20]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	4b27      	ldr	r3, [pc, #156]	@ (8004d0c <HAL_LTDC_Init+0x19c>)
 8004c6e:	400b      	ands	r3, r1
 8004c70:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c76:	041b      	lsls	r3, r3, #16
 8004c78:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6959      	ldr	r1, [r3, #20]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c96:	021b      	lsls	r3, r3, #8
 8004c98:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004ca0:	041b      	lsls	r3, r3, #16
 8004ca2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0206 	orr.w	r2, r2, #6
 8004cde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0201 	orr.w	r2, r2, #1
 8004cee:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	f000f800 	.word	0xf000f800

08004d10 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004d10:	b5b0      	push	{r4, r5, r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d101      	bne.n	8004d2a <HAL_LTDC_ConfigLayer+0x1a>
 8004d26:	2302      	movs	r3, #2
 8004d28:	e02c      	b.n	8004d84 <HAL_LTDC_ConfigLayer+0x74>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2202      	movs	r2, #2
 8004d36:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2134      	movs	r1, #52	@ 0x34
 8004d40:	fb01 f303 	mul.w	r3, r1, r3
 8004d44:	4413      	add	r3, r2
 8004d46:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	4614      	mov	r4, r2
 8004d4e:	461d      	mov	r5, r3
 8004d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d5c:	682b      	ldr	r3, [r5, #0]
 8004d5e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	68b9      	ldr	r1, [r7, #8]
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 f811 	bl	8004d8c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bdb0      	pop	{r4, r5, r7, pc}

08004d8c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b089      	sub	sp, #36	@ 0x24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	0c1b      	lsrs	r3, r3, #16
 8004da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004da8:	4413      	add	r3, r2
 8004daa:	041b      	lsls	r3, r3, #16
 8004dac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	01db      	lsls	r3, r3, #7
 8004db8:	4413      	add	r3, r2
 8004dba:	3384      	adds	r3, #132	@ 0x84
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	6812      	ldr	r2, [r2, #0]
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	01d2      	lsls	r2, r2, #7
 8004dc8:	440a      	add	r2, r1
 8004dca:	3284      	adds	r2, #132	@ 0x84
 8004dcc:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004dd0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	0c1b      	lsrs	r3, r3, #16
 8004dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004de2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004de4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4619      	mov	r1, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	01db      	lsls	r3, r3, #7
 8004df0:	440b      	add	r3, r1
 8004df2:	3384      	adds	r3, #132	@ 0x84
 8004df4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004dfa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e0a:	4413      	add	r3, r2
 8004e0c:	041b      	lsls	r3, r3, #16
 8004e0e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	01db      	lsls	r3, r3, #7
 8004e1a:	4413      	add	r3, r2
 8004e1c:	3384      	adds	r3, #132	@ 0x84
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	4611      	mov	r1, r2
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	01d2      	lsls	r2, r2, #7
 8004e2a:	440a      	add	r2, r1
 8004e2c:	3284      	adds	r2, #132	@ 0x84
 8004e2e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004e32:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e42:	4413      	add	r3, r2
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	01db      	lsls	r3, r3, #7
 8004e50:	440b      	add	r3, r1
 8004e52:	3384      	adds	r3, #132	@ 0x84
 8004e54:	4619      	mov	r1, r3
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	461a      	mov	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	01db      	lsls	r3, r3, #7
 8004e66:	4413      	add	r3, r2
 8004e68:	3384      	adds	r3, #132	@ 0x84
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	6812      	ldr	r2, [r2, #0]
 8004e70:	4611      	mov	r1, r2
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	01d2      	lsls	r2, r2, #7
 8004e76:	440a      	add	r2, r1
 8004e78:	3284      	adds	r2, #132	@ 0x84
 8004e7a:	f023 0307 	bic.w	r3, r3, #7
 8004e7e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	461a      	mov	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	01db      	lsls	r3, r3, #7
 8004e8a:	4413      	add	r3, r2
 8004e8c:	3384      	adds	r3, #132	@ 0x84
 8004e8e:	461a      	mov	r2, r3
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004e9c:	021b      	lsls	r3, r3, #8
 8004e9e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004ea6:	041b      	lsls	r3, r3, #16
 8004ea8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	061b      	lsls	r3, r3, #24
 8004eb0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	01db      	lsls	r3, r3, #7
 8004ebc:	4413      	add	r3, r2
 8004ebe:	3384      	adds	r3, #132	@ 0x84
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	01db      	lsls	r3, r3, #7
 8004ecc:	4413      	add	r3, r2
 8004ece:	3384      	adds	r3, #132	@ 0x84
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004edc:	461a      	mov	r2, r3
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4619      	mov	r1, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	01db      	lsls	r3, r3, #7
 8004ef0:	440b      	add	r3, r1
 8004ef2:	3384      	adds	r3, #132	@ 0x84
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	461a      	mov	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	01db      	lsls	r3, r3, #7
 8004f06:	4413      	add	r3, r2
 8004f08:	3384      	adds	r3, #132	@ 0x84
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	4611      	mov	r1, r2
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	01d2      	lsls	r2, r2, #7
 8004f16:	440a      	add	r2, r1
 8004f18:	3284      	adds	r2, #132	@ 0x84
 8004f1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004f1e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	461a      	mov	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	01db      	lsls	r3, r3, #7
 8004f2a:	4413      	add	r3, r2
 8004f2c:	3384      	adds	r3, #132	@ 0x84
 8004f2e:	461a      	mov	r2, r3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	01db      	lsls	r3, r3, #7
 8004f40:	4413      	add	r3, r2
 8004f42:	3384      	adds	r3, #132	@ 0x84
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	6812      	ldr	r2, [r2, #0]
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	01d2      	lsls	r2, r2, #7
 8004f50:	440a      	add	r2, r1
 8004f52:	3284      	adds	r2, #132	@ 0x84
 8004f54:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004f58:	f023 0307 	bic.w	r3, r3, #7
 8004f5c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	69da      	ldr	r2, [r3, #28]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	68f9      	ldr	r1, [r7, #12]
 8004f68:	6809      	ldr	r1, [r1, #0]
 8004f6a:	4608      	mov	r0, r1
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	01c9      	lsls	r1, r1, #7
 8004f70:	4401      	add	r1, r0
 8004f72:	3184      	adds	r1, #132	@ 0x84
 8004f74:	4313      	orrs	r3, r2
 8004f76:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	01db      	lsls	r3, r3, #7
 8004f82:	4413      	add	r3, r2
 8004f84:	3384      	adds	r3, #132	@ 0x84
 8004f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	01db      	lsls	r3, r3, #7
 8004f92:	4413      	add	r3, r2
 8004f94:	3384      	adds	r3, #132	@ 0x84
 8004f96:	461a      	mov	r2, r3
 8004f98:	2300      	movs	r3, #0
 8004f9a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	01db      	lsls	r3, r3, #7
 8004fa6:	4413      	add	r3, r2
 8004fa8:	3384      	adds	r3, #132	@ 0x84
 8004faa:	461a      	mov	r2, r3
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb0:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d102      	bne.n	8004fc0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004fba:	2304      	movs	r3, #4
 8004fbc:	61fb      	str	r3, [r7, #28]
 8004fbe:	e01b      	b.n	8004ff8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d102      	bne.n	8004fce <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	e014      	b.n	8004ff8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d00b      	beq.n	8004fee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d007      	beq.n	8004fee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004fe2:	2b03      	cmp	r3, #3
 8004fe4:	d003      	beq.n	8004fee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004fea:	2b07      	cmp	r3, #7
 8004fec:	d102      	bne.n	8004ff4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004fee:	2302      	movs	r3, #2
 8004ff0:	61fb      	str	r3, [r7, #28]
 8004ff2:	e001      	b.n	8004ff8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	01db      	lsls	r3, r3, #7
 8005002:	4413      	add	r3, r2
 8005004:	3384      	adds	r3, #132	@ 0x84
 8005006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	4611      	mov	r1, r2
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	01d2      	lsls	r2, r2, #7
 8005012:	440a      	add	r2, r1
 8005014:	3284      	adds	r2, #132	@ 0x84
 8005016:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800501a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005020:	69fa      	ldr	r2, [r7, #28]
 8005022:	fb02 f303 	mul.w	r3, r2, r3
 8005026:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	6859      	ldr	r1, [r3, #4]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	1acb      	subs	r3, r1, r3
 8005032:	69f9      	ldr	r1, [r7, #28]
 8005034:	fb01 f303 	mul.w	r3, r1, r3
 8005038:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800503a:	68f9      	ldr	r1, [r7, #12]
 800503c:	6809      	ldr	r1, [r1, #0]
 800503e:	4608      	mov	r0, r1
 8005040:	6879      	ldr	r1, [r7, #4]
 8005042:	01c9      	lsls	r1, r1, #7
 8005044:	4401      	add	r1, r0
 8005046:	3184      	adds	r1, #132	@ 0x84
 8005048:	4313      	orrs	r3, r2
 800504a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	461a      	mov	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	01db      	lsls	r3, r3, #7
 8005056:	4413      	add	r3, r2
 8005058:	3384      	adds	r3, #132	@ 0x84
 800505a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	6812      	ldr	r2, [r2, #0]
 8005060:	4611      	mov	r1, r2
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	01d2      	lsls	r2, r2, #7
 8005066:	440a      	add	r2, r1
 8005068:	3284      	adds	r2, #132	@ 0x84
 800506a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800506e:	f023 0307 	bic.w	r3, r3, #7
 8005072:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	461a      	mov	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	01db      	lsls	r3, r3, #7
 800507e:	4413      	add	r3, r2
 8005080:	3384      	adds	r3, #132	@ 0x84
 8005082:	461a      	mov	r2, r3
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005088:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	01db      	lsls	r3, r3, #7
 8005094:	4413      	add	r3, r2
 8005096:	3384      	adds	r3, #132	@ 0x84
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	6812      	ldr	r2, [r2, #0]
 800509e:	4611      	mov	r1, r2
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	01d2      	lsls	r2, r2, #7
 80050a4:	440a      	add	r2, r1
 80050a6:	3284      	adds	r2, #132	@ 0x84
 80050a8:	f043 0301 	orr.w	r3, r3, #1
 80050ac:	6013      	str	r3, [r2, #0]
}
 80050ae:	bf00      	nop
 80050b0:	3724      	adds	r7, #36	@ 0x24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
	...

080050bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e267      	b.n	800559e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d075      	beq.n	80051c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80050da:	4b88      	ldr	r3, [pc, #544]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 030c 	and.w	r3, r3, #12
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d00c      	beq.n	8005100 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050e6:	4b85      	ldr	r3, [pc, #532]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d112      	bne.n	8005118 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050f2:	4b82      	ldr	r3, [pc, #520]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050fe:	d10b      	bne.n	8005118 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005100:	4b7e      	ldr	r3, [pc, #504]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d05b      	beq.n	80051c4 <HAL_RCC_OscConfig+0x108>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d157      	bne.n	80051c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e242      	b.n	800559e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005120:	d106      	bne.n	8005130 <HAL_RCC_OscConfig+0x74>
 8005122:	4b76      	ldr	r3, [pc, #472]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a75      	ldr	r2, [pc, #468]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 8005128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	e01d      	b.n	800516c <HAL_RCC_OscConfig+0xb0>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005138:	d10c      	bne.n	8005154 <HAL_RCC_OscConfig+0x98>
 800513a:	4b70      	ldr	r3, [pc, #448]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a6f      	ldr	r2, [pc, #444]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 8005140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	4b6d      	ldr	r3, [pc, #436]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a6c      	ldr	r2, [pc, #432]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 800514c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	e00b      	b.n	800516c <HAL_RCC_OscConfig+0xb0>
 8005154:	4b69      	ldr	r3, [pc, #420]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a68      	ldr	r2, [pc, #416]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 800515a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	4b66      	ldr	r3, [pc, #408]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a65      	ldr	r2, [pc, #404]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 8005166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800516a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d013      	beq.n	800519c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005174:	f7fe f874 	bl	8003260 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800517c:	f7fe f870 	bl	8003260 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b64      	cmp	r3, #100	@ 0x64
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e207      	b.n	800559e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800518e:	4b5b      	ldr	r3, [pc, #364]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0f0      	beq.n	800517c <HAL_RCC_OscConfig+0xc0>
 800519a:	e014      	b.n	80051c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519c:	f7fe f860 	bl	8003260 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051a4:	f7fe f85c 	bl	8003260 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b64      	cmp	r3, #100	@ 0x64
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e1f3      	b.n	800559e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051b6:	4b51      	ldr	r3, [pc, #324]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1f0      	bne.n	80051a4 <HAL_RCC_OscConfig+0xe8>
 80051c2:	e000      	b.n	80051c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d063      	beq.n	800529a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80051d2:	4b4a      	ldr	r3, [pc, #296]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00b      	beq.n	80051f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051de:	4b47      	ldr	r3, [pc, #284]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80051e6:	2b08      	cmp	r3, #8
 80051e8:	d11c      	bne.n	8005224 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ea:	4b44      	ldr	r3, [pc, #272]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d116      	bne.n	8005224 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051f6:	4b41      	ldr	r3, [pc, #260]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d005      	beq.n	800520e <HAL_RCC_OscConfig+0x152>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d001      	beq.n	800520e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e1c7      	b.n	800559e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800520e:	4b3b      	ldr	r3, [pc, #236]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	4937      	ldr	r1, [pc, #220]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 800521e:	4313      	orrs	r3, r2
 8005220:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005222:	e03a      	b.n	800529a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d020      	beq.n	800526e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800522c:	4b34      	ldr	r3, [pc, #208]	@ (8005300 <HAL_RCC_OscConfig+0x244>)
 800522e:	2201      	movs	r2, #1
 8005230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005232:	f7fe f815 	bl	8003260 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800523a:	f7fe f811 	bl	8003260 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e1a8      	b.n	800559e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800524c:	4b2b      	ldr	r3, [pc, #172]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0f0      	beq.n	800523a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005258:	4b28      	ldr	r3, [pc, #160]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	4925      	ldr	r1, [pc, #148]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 8005268:	4313      	orrs	r3, r2
 800526a:	600b      	str	r3, [r1, #0]
 800526c:	e015      	b.n	800529a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800526e:	4b24      	ldr	r3, [pc, #144]	@ (8005300 <HAL_RCC_OscConfig+0x244>)
 8005270:	2200      	movs	r2, #0
 8005272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005274:	f7fd fff4 	bl	8003260 <HAL_GetTick>
 8005278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800527c:	f7fd fff0 	bl	8003260 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e187      	b.n	800559e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800528e:	4b1b      	ldr	r3, [pc, #108]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1f0      	bne.n	800527c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d036      	beq.n	8005314 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d016      	beq.n	80052dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ae:	4b15      	ldr	r3, [pc, #84]	@ (8005304 <HAL_RCC_OscConfig+0x248>)
 80052b0:	2201      	movs	r2, #1
 80052b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b4:	f7fd ffd4 	bl	8003260 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052bc:	f7fd ffd0 	bl	8003260 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e167      	b.n	800559e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ce:	4b0b      	ldr	r3, [pc, #44]	@ (80052fc <HAL_RCC_OscConfig+0x240>)
 80052d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0f0      	beq.n	80052bc <HAL_RCC_OscConfig+0x200>
 80052da:	e01b      	b.n	8005314 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052dc:	4b09      	ldr	r3, [pc, #36]	@ (8005304 <HAL_RCC_OscConfig+0x248>)
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052e2:	f7fd ffbd 	bl	8003260 <HAL_GetTick>
 80052e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052e8:	e00e      	b.n	8005308 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052ea:	f7fd ffb9 	bl	8003260 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d907      	bls.n	8005308 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e150      	b.n	800559e <HAL_RCC_OscConfig+0x4e2>
 80052fc:	40023800 	.word	0x40023800
 8005300:	42470000 	.word	0x42470000
 8005304:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005308:	4b88      	ldr	r3, [pc, #544]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 800530a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1ea      	bne.n	80052ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 8097 	beq.w	8005450 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005322:	2300      	movs	r3, #0
 8005324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005326:	4b81      	ldr	r3, [pc, #516]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 8005328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10f      	bne.n	8005352 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005332:	2300      	movs	r3, #0
 8005334:	60bb      	str	r3, [r7, #8]
 8005336:	4b7d      	ldr	r3, [pc, #500]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533a:	4a7c      	ldr	r2, [pc, #496]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 800533c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005340:	6413      	str	r3, [r2, #64]	@ 0x40
 8005342:	4b7a      	ldr	r3, [pc, #488]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800534a:	60bb      	str	r3, [r7, #8]
 800534c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800534e:	2301      	movs	r3, #1
 8005350:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005352:	4b77      	ldr	r3, [pc, #476]	@ (8005530 <HAL_RCC_OscConfig+0x474>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800535a:	2b00      	cmp	r3, #0
 800535c:	d118      	bne.n	8005390 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800535e:	4b74      	ldr	r3, [pc, #464]	@ (8005530 <HAL_RCC_OscConfig+0x474>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a73      	ldr	r2, [pc, #460]	@ (8005530 <HAL_RCC_OscConfig+0x474>)
 8005364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800536a:	f7fd ff79 	bl	8003260 <HAL_GetTick>
 800536e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005370:	e008      	b.n	8005384 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005372:	f7fd ff75 	bl	8003260 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e10c      	b.n	800559e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005384:	4b6a      	ldr	r3, [pc, #424]	@ (8005530 <HAL_RCC_OscConfig+0x474>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800538c:	2b00      	cmp	r3, #0
 800538e:	d0f0      	beq.n	8005372 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d106      	bne.n	80053a6 <HAL_RCC_OscConfig+0x2ea>
 8005398:	4b64      	ldr	r3, [pc, #400]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 800539a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800539c:	4a63      	ldr	r2, [pc, #396]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 800539e:	f043 0301 	orr.w	r3, r3, #1
 80053a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053a4:	e01c      	b.n	80053e0 <HAL_RCC_OscConfig+0x324>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	2b05      	cmp	r3, #5
 80053ac:	d10c      	bne.n	80053c8 <HAL_RCC_OscConfig+0x30c>
 80053ae:	4b5f      	ldr	r3, [pc, #380]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 80053b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b2:	4a5e      	ldr	r2, [pc, #376]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 80053b4:	f043 0304 	orr.w	r3, r3, #4
 80053b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ba:	4b5c      	ldr	r3, [pc, #368]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 80053bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053be:	4a5b      	ldr	r2, [pc, #364]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 80053c0:	f043 0301 	orr.w	r3, r3, #1
 80053c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80053c6:	e00b      	b.n	80053e0 <HAL_RCC_OscConfig+0x324>
 80053c8:	4b58      	ldr	r3, [pc, #352]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 80053ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053cc:	4a57      	ldr	r2, [pc, #348]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 80053ce:	f023 0301 	bic.w	r3, r3, #1
 80053d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053d4:	4b55      	ldr	r3, [pc, #340]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 80053d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d8:	4a54      	ldr	r2, [pc, #336]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 80053da:	f023 0304 	bic.w	r3, r3, #4
 80053de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d015      	beq.n	8005414 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e8:	f7fd ff3a 	bl	8003260 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ee:	e00a      	b.n	8005406 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f0:	f7fd ff36 	bl	8003260 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053fe:	4293      	cmp	r3, r2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e0cb      	b.n	800559e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005406:	4b49      	ldr	r3, [pc, #292]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 8005408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d0ee      	beq.n	80053f0 <HAL_RCC_OscConfig+0x334>
 8005412:	e014      	b.n	800543e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005414:	f7fd ff24 	bl	8003260 <HAL_GetTick>
 8005418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800541a:	e00a      	b.n	8005432 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800541c:	f7fd ff20 	bl	8003260 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800542a:	4293      	cmp	r3, r2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e0b5      	b.n	800559e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005432:	4b3e      	ldr	r3, [pc, #248]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 8005434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1ee      	bne.n	800541c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800543e:	7dfb      	ldrb	r3, [r7, #23]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d105      	bne.n	8005450 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005444:	4b39      	ldr	r3, [pc, #228]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 8005446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005448:	4a38      	ldr	r2, [pc, #224]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 800544a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800544e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 80a1 	beq.w	800559c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800545a:	4b34      	ldr	r3, [pc, #208]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 030c 	and.w	r3, r3, #12
 8005462:	2b08      	cmp	r3, #8
 8005464:	d05c      	beq.n	8005520 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	2b02      	cmp	r3, #2
 800546c:	d141      	bne.n	80054f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800546e:	4b31      	ldr	r3, [pc, #196]	@ (8005534 <HAL_RCC_OscConfig+0x478>)
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005474:	f7fd fef4 	bl	8003260 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800547c:	f7fd fef0 	bl	8003260 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e087      	b.n	800559e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800548e:	4b27      	ldr	r3, [pc, #156]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f0      	bne.n	800547c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	69da      	ldr	r2, [r3, #28]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a8:	019b      	lsls	r3, r3, #6
 80054aa:	431a      	orrs	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b0:	085b      	lsrs	r3, r3, #1
 80054b2:	3b01      	subs	r3, #1
 80054b4:	041b      	lsls	r3, r3, #16
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054bc:	061b      	lsls	r3, r3, #24
 80054be:	491b      	ldr	r1, [pc, #108]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005534 <HAL_RCC_OscConfig+0x478>)
 80054c6:	2201      	movs	r2, #1
 80054c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ca:	f7fd fec9 	bl	8003260 <HAL_GetTick>
 80054ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054d0:	e008      	b.n	80054e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d2:	f7fd fec5 	bl	8003260 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e05c      	b.n	800559e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e4:	4b11      	ldr	r3, [pc, #68]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0f0      	beq.n	80054d2 <HAL_RCC_OscConfig+0x416>
 80054f0:	e054      	b.n	800559c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f2:	4b10      	ldr	r3, [pc, #64]	@ (8005534 <HAL_RCC_OscConfig+0x478>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f8:	f7fd feb2 	bl	8003260 <HAL_GetTick>
 80054fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005500:	f7fd feae 	bl	8003260 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e045      	b.n	800559e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005512:	4b06      	ldr	r3, [pc, #24]	@ (800552c <HAL_RCC_OscConfig+0x470>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1f0      	bne.n	8005500 <HAL_RCC_OscConfig+0x444>
 800551e:	e03d      	b.n	800559c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d107      	bne.n	8005538 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e038      	b.n	800559e <HAL_RCC_OscConfig+0x4e2>
 800552c:	40023800 	.word	0x40023800
 8005530:	40007000 	.word	0x40007000
 8005534:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005538:	4b1b      	ldr	r3, [pc, #108]	@ (80055a8 <HAL_RCC_OscConfig+0x4ec>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d028      	beq.n	8005598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005550:	429a      	cmp	r2, r3
 8005552:	d121      	bne.n	8005598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800555e:	429a      	cmp	r2, r3
 8005560:	d11a      	bne.n	8005598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005568:	4013      	ands	r3, r2
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800556e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005570:	4293      	cmp	r3, r2
 8005572:	d111      	bne.n	8005598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557e:	085b      	lsrs	r3, r3, #1
 8005580:	3b01      	subs	r3, #1
 8005582:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005584:	429a      	cmp	r2, r3
 8005586:	d107      	bne.n	8005598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005592:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005594:	429a      	cmp	r2, r3
 8005596:	d001      	beq.n	800559c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e000      	b.n	800559e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	40023800 	.word	0x40023800

080055ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e0cc      	b.n	800575a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055c0:	4b68      	ldr	r3, [pc, #416]	@ (8005764 <HAL_RCC_ClockConfig+0x1b8>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 030f 	and.w	r3, r3, #15
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d90c      	bls.n	80055e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ce:	4b65      	ldr	r3, [pc, #404]	@ (8005764 <HAL_RCC_ClockConfig+0x1b8>)
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d6:	4b63      	ldr	r3, [pc, #396]	@ (8005764 <HAL_RCC_ClockConfig+0x1b8>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 030f 	and.w	r3, r3, #15
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d001      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0b8      	b.n	800575a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d020      	beq.n	8005636 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d005      	beq.n	800560c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005600:	4b59      	ldr	r3, [pc, #356]	@ (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	4a58      	ldr	r2, [pc, #352]	@ (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 8005606:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800560a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	2b00      	cmp	r3, #0
 8005616:	d005      	beq.n	8005624 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005618:	4b53      	ldr	r3, [pc, #332]	@ (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	4a52      	ldr	r2, [pc, #328]	@ (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 800561e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005622:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005624:	4b50      	ldr	r3, [pc, #320]	@ (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	494d      	ldr	r1, [pc, #308]	@ (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 8005632:	4313      	orrs	r3, r2
 8005634:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d044      	beq.n	80056cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d107      	bne.n	800565a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800564a:	4b47      	ldr	r3, [pc, #284]	@ (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d119      	bne.n	800568a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e07f      	b.n	800575a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	2b02      	cmp	r3, #2
 8005660:	d003      	beq.n	800566a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005666:	2b03      	cmp	r3, #3
 8005668:	d107      	bne.n	800567a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800566a:	4b3f      	ldr	r3, [pc, #252]	@ (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d109      	bne.n	800568a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e06f      	b.n	800575a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800567a:	4b3b      	ldr	r3, [pc, #236]	@ (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e067      	b.n	800575a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800568a:	4b37      	ldr	r3, [pc, #220]	@ (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f023 0203 	bic.w	r2, r3, #3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	4934      	ldr	r1, [pc, #208]	@ (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 8005698:	4313      	orrs	r3, r2
 800569a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800569c:	f7fd fde0 	bl	8003260 <HAL_GetTick>
 80056a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056a2:	e00a      	b.n	80056ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056a4:	f7fd fddc 	bl	8003260 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e04f      	b.n	800575a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ba:	4b2b      	ldr	r3, [pc, #172]	@ (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 020c 	and.w	r2, r3, #12
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d1eb      	bne.n	80056a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056cc:	4b25      	ldr	r3, [pc, #148]	@ (8005764 <HAL_RCC_ClockConfig+0x1b8>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 030f 	and.w	r3, r3, #15
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d20c      	bcs.n	80056f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056da:	4b22      	ldr	r3, [pc, #136]	@ (8005764 <HAL_RCC_ClockConfig+0x1b8>)
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056e2:	4b20      	ldr	r3, [pc, #128]	@ (8005764 <HAL_RCC_ClockConfig+0x1b8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d001      	beq.n	80056f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e032      	b.n	800575a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d008      	beq.n	8005712 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005700:	4b19      	ldr	r3, [pc, #100]	@ (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	4916      	ldr	r1, [pc, #88]	@ (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 800570e:	4313      	orrs	r3, r2
 8005710:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	2b00      	cmp	r3, #0
 800571c:	d009      	beq.n	8005732 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800571e:	4b12      	ldr	r3, [pc, #72]	@ (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	490e      	ldr	r1, [pc, #56]	@ (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 800572e:	4313      	orrs	r3, r2
 8005730:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005732:	f000 f821 	bl	8005778 <HAL_RCC_GetSysClockFreq>
 8005736:	4602      	mov	r2, r0
 8005738:	4b0b      	ldr	r3, [pc, #44]	@ (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	091b      	lsrs	r3, r3, #4
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	490a      	ldr	r1, [pc, #40]	@ (800576c <HAL_RCC_ClockConfig+0x1c0>)
 8005744:	5ccb      	ldrb	r3, [r1, r3]
 8005746:	fa22 f303 	lsr.w	r3, r2, r3
 800574a:	4a09      	ldr	r2, [pc, #36]	@ (8005770 <HAL_RCC_ClockConfig+0x1c4>)
 800574c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800574e:	4b09      	ldr	r3, [pc, #36]	@ (8005774 <HAL_RCC_ClockConfig+0x1c8>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f7fd fd40 	bl	80031d8 <HAL_InitTick>

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	40023c00 	.word	0x40023c00
 8005768:	40023800 	.word	0x40023800
 800576c:	0800970c 	.word	0x0800970c
 8005770:	20000018 	.word	0x20000018
 8005774:	2000001c 	.word	0x2000001c

08005778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800577c:	b094      	sub	sp, #80	@ 0x50
 800577e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005784:	2300      	movs	r3, #0
 8005786:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005790:	4b79      	ldr	r3, [pc, #484]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x200>)
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 030c 	and.w	r3, r3, #12
 8005798:	2b08      	cmp	r3, #8
 800579a:	d00d      	beq.n	80057b8 <HAL_RCC_GetSysClockFreq+0x40>
 800579c:	2b08      	cmp	r3, #8
 800579e:	f200 80e1 	bhi.w	8005964 <HAL_RCC_GetSysClockFreq+0x1ec>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <HAL_RCC_GetSysClockFreq+0x34>
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	d003      	beq.n	80057b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80057aa:	e0db      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057ac:	4b73      	ldr	r3, [pc, #460]	@ (800597c <HAL_RCC_GetSysClockFreq+0x204>)
 80057ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057b0:	e0db      	b.n	800596a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057b2:	4b73      	ldr	r3, [pc, #460]	@ (8005980 <HAL_RCC_GetSysClockFreq+0x208>)
 80057b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057b6:	e0d8      	b.n	800596a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057b8:	4b6f      	ldr	r3, [pc, #444]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x200>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057c2:	4b6d      	ldr	r3, [pc, #436]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x200>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d063      	beq.n	8005896 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x200>)
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	099b      	lsrs	r3, r3, #6
 80057d4:	2200      	movs	r2, #0
 80057d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80057da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80057e2:	2300      	movs	r3, #0
 80057e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80057e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80057ea:	4622      	mov	r2, r4
 80057ec:	462b      	mov	r3, r5
 80057ee:	f04f 0000 	mov.w	r0, #0
 80057f2:	f04f 0100 	mov.w	r1, #0
 80057f6:	0159      	lsls	r1, r3, #5
 80057f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057fc:	0150      	lsls	r0, r2, #5
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	4621      	mov	r1, r4
 8005804:	1a51      	subs	r1, r2, r1
 8005806:	6139      	str	r1, [r7, #16]
 8005808:	4629      	mov	r1, r5
 800580a:	eb63 0301 	sbc.w	r3, r3, r1
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	f04f 0300 	mov.w	r3, #0
 8005818:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800581c:	4659      	mov	r1, fp
 800581e:	018b      	lsls	r3, r1, #6
 8005820:	4651      	mov	r1, sl
 8005822:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005826:	4651      	mov	r1, sl
 8005828:	018a      	lsls	r2, r1, #6
 800582a:	4651      	mov	r1, sl
 800582c:	ebb2 0801 	subs.w	r8, r2, r1
 8005830:	4659      	mov	r1, fp
 8005832:	eb63 0901 	sbc.w	r9, r3, r1
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	f04f 0300 	mov.w	r3, #0
 800583e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005842:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005846:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800584a:	4690      	mov	r8, r2
 800584c:	4699      	mov	r9, r3
 800584e:	4623      	mov	r3, r4
 8005850:	eb18 0303 	adds.w	r3, r8, r3
 8005854:	60bb      	str	r3, [r7, #8]
 8005856:	462b      	mov	r3, r5
 8005858:	eb49 0303 	adc.w	r3, r9, r3
 800585c:	60fb      	str	r3, [r7, #12]
 800585e:	f04f 0200 	mov.w	r2, #0
 8005862:	f04f 0300 	mov.w	r3, #0
 8005866:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800586a:	4629      	mov	r1, r5
 800586c:	024b      	lsls	r3, r1, #9
 800586e:	4621      	mov	r1, r4
 8005870:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005874:	4621      	mov	r1, r4
 8005876:	024a      	lsls	r2, r1, #9
 8005878:	4610      	mov	r0, r2
 800587a:	4619      	mov	r1, r3
 800587c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800587e:	2200      	movs	r2, #0
 8005880:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005882:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005884:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005888:	f7fa fd0a 	bl	80002a0 <__aeabi_uldivmod>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4613      	mov	r3, r2
 8005892:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005894:	e058      	b.n	8005948 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005896:	4b38      	ldr	r3, [pc, #224]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x200>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	099b      	lsrs	r3, r3, #6
 800589c:	2200      	movs	r2, #0
 800589e:	4618      	mov	r0, r3
 80058a0:	4611      	mov	r1, r2
 80058a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058a6:	623b      	str	r3, [r7, #32]
 80058a8:	2300      	movs	r3, #0
 80058aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80058ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80058b0:	4642      	mov	r2, r8
 80058b2:	464b      	mov	r3, r9
 80058b4:	f04f 0000 	mov.w	r0, #0
 80058b8:	f04f 0100 	mov.w	r1, #0
 80058bc:	0159      	lsls	r1, r3, #5
 80058be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058c2:	0150      	lsls	r0, r2, #5
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4641      	mov	r1, r8
 80058ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80058ce:	4649      	mov	r1, r9
 80058d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80058d4:	f04f 0200 	mov.w	r2, #0
 80058d8:	f04f 0300 	mov.w	r3, #0
 80058dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80058e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80058e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058e8:	ebb2 040a 	subs.w	r4, r2, sl
 80058ec:	eb63 050b 	sbc.w	r5, r3, fp
 80058f0:	f04f 0200 	mov.w	r2, #0
 80058f4:	f04f 0300 	mov.w	r3, #0
 80058f8:	00eb      	lsls	r3, r5, #3
 80058fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058fe:	00e2      	lsls	r2, r4, #3
 8005900:	4614      	mov	r4, r2
 8005902:	461d      	mov	r5, r3
 8005904:	4643      	mov	r3, r8
 8005906:	18e3      	adds	r3, r4, r3
 8005908:	603b      	str	r3, [r7, #0]
 800590a:	464b      	mov	r3, r9
 800590c:	eb45 0303 	adc.w	r3, r5, r3
 8005910:	607b      	str	r3, [r7, #4]
 8005912:	f04f 0200 	mov.w	r2, #0
 8005916:	f04f 0300 	mov.w	r3, #0
 800591a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800591e:	4629      	mov	r1, r5
 8005920:	028b      	lsls	r3, r1, #10
 8005922:	4621      	mov	r1, r4
 8005924:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005928:	4621      	mov	r1, r4
 800592a:	028a      	lsls	r2, r1, #10
 800592c:	4610      	mov	r0, r2
 800592e:	4619      	mov	r1, r3
 8005930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005932:	2200      	movs	r2, #0
 8005934:	61bb      	str	r3, [r7, #24]
 8005936:	61fa      	str	r2, [r7, #28]
 8005938:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800593c:	f7fa fcb0 	bl	80002a0 <__aeabi_uldivmod>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4613      	mov	r3, r2
 8005946:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005948:	4b0b      	ldr	r3, [pc, #44]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x200>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	0c1b      	lsrs	r3, r3, #16
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	3301      	adds	r3, #1
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005958:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800595a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800595c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005960:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005962:	e002      	b.n	800596a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005964:	4b05      	ldr	r3, [pc, #20]	@ (800597c <HAL_RCC_GetSysClockFreq+0x204>)
 8005966:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800596a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800596c:	4618      	mov	r0, r3
 800596e:	3750      	adds	r7, #80	@ 0x50
 8005970:	46bd      	mov	sp, r7
 8005972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005976:	bf00      	nop
 8005978:	40023800 	.word	0x40023800
 800597c:	00f42400 	.word	0x00f42400
 8005980:	007a1200 	.word	0x007a1200

08005984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005988:	4b03      	ldr	r3, [pc, #12]	@ (8005998 <HAL_RCC_GetHCLKFreq+0x14>)
 800598a:	681b      	ldr	r3, [r3, #0]
}
 800598c:	4618      	mov	r0, r3
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	20000018 	.word	0x20000018

0800599c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059a0:	f7ff fff0 	bl	8005984 <HAL_RCC_GetHCLKFreq>
 80059a4:	4602      	mov	r2, r0
 80059a6:	4b05      	ldr	r3, [pc, #20]	@ (80059bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	0a9b      	lsrs	r3, r3, #10
 80059ac:	f003 0307 	and.w	r3, r3, #7
 80059b0:	4903      	ldr	r1, [pc, #12]	@ (80059c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059b2:	5ccb      	ldrb	r3, [r1, r3]
 80059b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	40023800 	.word	0x40023800
 80059c0:	0800971c 	.word	0x0800971c

080059c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10b      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d105      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d075      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80059f8:	4b91      	ldr	r3, [pc, #580]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059fe:	f7fd fc2f 	bl	8003260 <HAL_GetTick>
 8005a02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a04:	e008      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a06:	f7fd fc2b 	bl	8003260 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e189      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a18:	4b8a      	ldr	r3, [pc, #552]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1f0      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d009      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	019a      	lsls	r2, r3, #6
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	071b      	lsls	r3, r3, #28
 8005a3c:	4981      	ldr	r1, [pc, #516]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01f      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a50:	4b7c      	ldr	r3, [pc, #496]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a56:	0f1b      	lsrs	r3, r3, #28
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	019a      	lsls	r2, r3, #6
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	061b      	lsls	r3, r3, #24
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	071b      	lsls	r3, r3, #28
 8005a70:	4974      	ldr	r1, [pc, #464]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005a78:	4b72      	ldr	r3, [pc, #456]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a7e:	f023 021f 	bic.w	r2, r3, #31
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	496e      	ldr	r1, [pc, #440]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00d      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	019a      	lsls	r2, r3, #6
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	061b      	lsls	r3, r3, #24
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	071b      	lsls	r3, r3, #28
 8005ab0:	4964      	ldr	r1, [pc, #400]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ab8:	4b61      	ldr	r3, [pc, #388]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005aba:	2201      	movs	r2, #1
 8005abc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005abe:	f7fd fbcf 	bl	8003260 <HAL_GetTick>
 8005ac2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ac4:	e008      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ac6:	f7fd fbcb 	bl	8003260 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e129      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ad8:	4b5a      	ldr	r3, [pc, #360]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d0f0      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d105      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d079      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005afc:	4b52      	ldr	r3, [pc, #328]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b02:	f7fd fbad 	bl	8003260 <HAL_GetTick>
 8005b06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b08:	e008      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b0a:	f7fd fba9 	bl	8003260 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e107      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b1c:	4b49      	ldr	r3, [pc, #292]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b28:	d0ef      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0304 	and.w	r3, r3, #4
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d020      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b36:	4b43      	ldr	r3, [pc, #268]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b3c:	0f1b      	lsrs	r3, r3, #28
 8005b3e:	f003 0307 	and.w	r3, r3, #7
 8005b42:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	019a      	lsls	r2, r3, #6
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	061b      	lsls	r3, r3, #24
 8005b50:	431a      	orrs	r2, r3
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	071b      	lsls	r3, r3, #28
 8005b56:	493b      	ldr	r1, [pc, #236]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b5e:	4b39      	ldr	r3, [pc, #228]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b64:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	021b      	lsls	r3, r3, #8
 8005b70:	4934      	ldr	r1, [pc, #208]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0308 	and.w	r3, r3, #8
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01e      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b84:	4b2f      	ldr	r3, [pc, #188]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b8a:	0e1b      	lsrs	r3, r3, #24
 8005b8c:	f003 030f 	and.w	r3, r3, #15
 8005b90:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	019a      	lsls	r2, r3, #6
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	061b      	lsls	r3, r3, #24
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	071b      	lsls	r3, r3, #28
 8005ba4:	4927      	ldr	r1, [pc, #156]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005bac:	4b25      	ldr	r3, [pc, #148]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bb2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bba:	4922      	ldr	r1, [pc, #136]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005bc2:	4b21      	ldr	r3, [pc, #132]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bc8:	f7fd fb4a 	bl	8003260 <HAL_GetTick>
 8005bcc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bce:	e008      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005bd0:	f7fd fb46 	bl	8003260 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e0a4      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005be2:	4b18      	ldr	r3, [pc, #96]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bee:	d1ef      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0320 	and.w	r3, r3, #32
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 808b 	beq.w	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	4b10      	ldr	r3, [pc, #64]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c06:	4a0f      	ldr	r2, [pc, #60]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a0b      	ldr	r2, [pc, #44]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c24:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c26:	f7fd fb1b 	bl	8003260 <HAL_GetTick>
 8005c2a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005c2c:	e010      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c2e:	f7fd fb17 	bl	8003260 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d909      	bls.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e075      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005c40:	42470068 	.word	0x42470068
 8005c44:	40023800 	.word	0x40023800
 8005c48:	42470070 	.word	0x42470070
 8005c4c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005c50:	4b38      	ldr	r3, [pc, #224]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d0e8      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c5c:	4b36      	ldr	r3, [pc, #216]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c64:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d02f      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d028      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c7a:	4b2f      	ldr	r3, [pc, #188]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c82:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c84:	4b2d      	ldr	r3, [pc, #180]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005c86:	2201      	movs	r2, #1
 8005c88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c8a:	4b2c      	ldr	r3, [pc, #176]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005c90:	4a29      	ldr	r2, [pc, #164]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c96:	4b28      	ldr	r3, [pc, #160]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d114      	bne.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005ca2:	f7fd fadd 	bl	8003260 <HAL_GetTick>
 8005ca6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ca8:	e00a      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005caa:	f7fd fad9 	bl	8003260 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e035      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0ee      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cd8:	d10d      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005cda:	4b17      	ldr	r3, [pc, #92]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005cea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cee:	4912      	ldr	r1, [pc, #72]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	608b      	str	r3, [r1, #8]
 8005cf4:	e005      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005cf6:	4b10      	ldr	r3, [pc, #64]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	4a0f      	ldr	r2, [pc, #60]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cfc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005d00:	6093      	str	r3, [r2, #8]
 8005d02:	4b0d      	ldr	r3, [pc, #52]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d04:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d0e:	490a      	ldr	r1, [pc, #40]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0310 	and.w	r3, r3, #16
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d004      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005d26:	4b06      	ldr	r3, [pc, #24]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005d28:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	40007000 	.word	0x40007000
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	42470e40 	.word	0x42470e40
 8005d40:	424711e0 	.word	0x424711e0

08005d44 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e01c      	b.n	8005d90 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	795b      	ldrb	r3, [r3, #5]
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d105      	bne.n	8005d6c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fc fd0a 	bl	8002780 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f042 0204 	orr.w	r2, r2, #4
 8005d80:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	791b      	ldrb	r3, [r3, #4]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d101      	bne.n	8005db2 <HAL_RNG_GenerateRandomNumber+0x1a>
 8005dae:	2302      	movs	r3, #2
 8005db0:	e044      	b.n	8005e3c <HAL_RNG_GenerateRandomNumber+0xa4>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	795b      	ldrb	r3, [r3, #5]
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d133      	bne.n	8005e2a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005dc8:	f7fd fa4a 	bl	8003260 <HAL_GetTick>
 8005dcc:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005dce:	e018      	b.n	8005e02 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005dd0:	f7fd fa46 	bl	8003260 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d911      	bls.n	8005e02 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d00a      	beq.n	8005e02 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2202      	movs	r2, #2
 8005df6:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e01c      	b.n	8005e3c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d1df      	bne.n	8005dd0 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	715a      	strb	r2, [r3, #5]
 8005e28:	e004      	b.n	8005e34 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2204      	movs	r2, #4
 8005e2e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	711a      	strb	r2, [r3, #4]

  return status;
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e07b      	b.n	8005f4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d108      	bne.n	8005e70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e66:	d009      	beq.n	8005e7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	61da      	str	r2, [r3, #28]
 8005e6e:	e005      	b.n	8005e7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d106      	bne.n	8005e9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7fc fc94 	bl	80027c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005eec:	431a      	orrs	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f00:	ea42 0103 	orr.w	r1, r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f08:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	0c1b      	lsrs	r3, r3, #16
 8005f1a:	f003 0104 	and.w	r1, r3, #4
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f22:	f003 0210 	and.w	r2, r3, #16
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69da      	ldr	r2, [r3, #28]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b082      	sub	sp, #8
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e01a      	b.n	8005f9e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f7e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7fc fc67 	bl	8002854 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b088      	sub	sp, #32
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	60f8      	str	r0, [r7, #12]
 8005fae:	60b9      	str	r1, [r7, #8]
 8005fb0:	603b      	str	r3, [r7, #0]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fb6:	f7fd f953 	bl	8003260 <HAL_GetTick>
 8005fba:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005fbc:	88fb      	ldrh	r3, [r7, #6]
 8005fbe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d001      	beq.n	8005fd0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e12a      	b.n	8006226 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d002      	beq.n	8005fdc <HAL_SPI_Transmit+0x36>
 8005fd6:	88fb      	ldrh	r3, [r7, #6]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d101      	bne.n	8005fe0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e122      	b.n	8006226 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d101      	bne.n	8005fee <HAL_SPI_Transmit+0x48>
 8005fea:	2302      	movs	r3, #2
 8005fec:	e11b      	b.n	8006226 <HAL_SPI_Transmit+0x280>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2203      	movs	r2, #3
 8005ffa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	88fa      	ldrh	r2, [r7, #6]
 800600e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	88fa      	ldrh	r2, [r7, #6]
 8006014:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800603c:	d10f      	bne.n	800605e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800604c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800605c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006068:	2b40      	cmp	r3, #64	@ 0x40
 800606a:	d007      	beq.n	800607c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800607a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006084:	d152      	bne.n	800612c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <HAL_SPI_Transmit+0xee>
 800608e:	8b7b      	ldrh	r3, [r7, #26]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d145      	bne.n	8006120 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006098:	881a      	ldrh	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a4:	1c9a      	adds	r2, r3, #2
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060b8:	e032      	b.n	8006120 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 0302 	and.w	r3, r3, #2
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d112      	bne.n	80060ee <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060cc:	881a      	ldrh	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d8:	1c9a      	adds	r2, r3, #2
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	86da      	strh	r2, [r3, #54]	@ 0x36
 80060ec:	e018      	b.n	8006120 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060ee:	f7fd f8b7 	bl	8003260 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d803      	bhi.n	8006106 <HAL_SPI_Transmit+0x160>
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006104:	d102      	bne.n	800610c <HAL_SPI_Transmit+0x166>
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d109      	bne.n	8006120 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e082      	b.n	8006226 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006124:	b29b      	uxth	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1c7      	bne.n	80060ba <HAL_SPI_Transmit+0x114>
 800612a:	e053      	b.n	80061d4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <HAL_SPI_Transmit+0x194>
 8006134:	8b7b      	ldrh	r3, [r7, #26]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d147      	bne.n	80061ca <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	330c      	adds	r3, #12
 8006144:	7812      	ldrb	r2, [r2, #0]
 8006146:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006156:	b29b      	uxth	r3, r3
 8006158:	3b01      	subs	r3, #1
 800615a:	b29a      	uxth	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006160:	e033      	b.n	80061ca <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b02      	cmp	r3, #2
 800616e:	d113      	bne.n	8006198 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	330c      	adds	r3, #12
 800617a:	7812      	ldrb	r2, [r2, #0]
 800617c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b01      	subs	r3, #1
 8006190:	b29a      	uxth	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006196:	e018      	b.n	80061ca <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006198:	f7fd f862 	bl	8003260 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d803      	bhi.n	80061b0 <HAL_SPI_Transmit+0x20a>
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061ae:	d102      	bne.n	80061b6 <HAL_SPI_Transmit+0x210>
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d109      	bne.n	80061ca <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e02d      	b.n	8006226 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1c6      	bne.n	8006162 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061d4:	69fa      	ldr	r2, [r7, #28]
 80061d6:	6839      	ldr	r1, [r7, #0]
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 f8bf 	bl	800635c <SPI_EndRxTxTransaction>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d002      	beq.n	80061ea <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2220      	movs	r2, #32
 80061e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10a      	bne.n	8006208 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061f2:	2300      	movs	r3, #0
 80061f4:	617b      	str	r3, [r7, #20]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	617b      	str	r3, [r7, #20]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	617b      	str	r3, [r7, #20]
 8006206:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e000      	b.n	8006226 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006224:	2300      	movs	r3, #0
  }
}
 8006226:	4618      	mov	r0, r3
 8006228:	3720      	adds	r7, #32
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800623c:	b2db      	uxtb	r3, r3
}
 800623e:	4618      	mov	r0, r3
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
	...

0800624c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	603b      	str	r3, [r7, #0]
 8006258:	4613      	mov	r3, r2
 800625a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800625c:	f7fd f800 	bl	8003260 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006264:	1a9b      	subs	r3, r3, r2
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	4413      	add	r3, r2
 800626a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800626c:	f7fc fff8 	bl	8003260 <HAL_GetTick>
 8006270:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006272:	4b39      	ldr	r3, [pc, #228]	@ (8006358 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	015b      	lsls	r3, r3, #5
 8006278:	0d1b      	lsrs	r3, r3, #20
 800627a:	69fa      	ldr	r2, [r7, #28]
 800627c:	fb02 f303 	mul.w	r3, r2, r3
 8006280:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006282:	e054      	b.n	800632e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800628a:	d050      	beq.n	800632e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800628c:	f7fc ffe8 	bl	8003260 <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	69fa      	ldr	r2, [r7, #28]
 8006298:	429a      	cmp	r2, r3
 800629a:	d902      	bls.n	80062a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d13d      	bne.n	800631e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80062b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062ba:	d111      	bne.n	80062e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062c4:	d004      	beq.n	80062d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062ce:	d107      	bne.n	80062e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062e8:	d10f      	bne.n	800630a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006308:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e017      	b.n	800634e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	3b01      	subs	r3, #1
 800632c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4013      	ands	r3, r2
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	429a      	cmp	r2, r3
 800633c:	bf0c      	ite	eq
 800633e:	2301      	moveq	r3, #1
 8006340:	2300      	movne	r3, #0
 8006342:	b2db      	uxtb	r3, r3
 8006344:	461a      	mov	r2, r3
 8006346:	79fb      	ldrb	r3, [r7, #7]
 8006348:	429a      	cmp	r2, r3
 800634a:	d19b      	bne.n	8006284 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3720      	adds	r7, #32
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	20000018 	.word	0x20000018

0800635c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af02      	add	r7, sp, #8
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	2201      	movs	r2, #1
 8006370:	2102      	movs	r1, #2
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f7ff ff6a 	bl	800624c <SPI_WaitFlagStateUntilTimeout>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d007      	beq.n	800638e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006382:	f043 0220 	orr.w	r2, r3, #32
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e032      	b.n	80063f4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800638e:	4b1b      	ldr	r3, [pc, #108]	@ (80063fc <SPI_EndRxTxTransaction+0xa0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a1b      	ldr	r2, [pc, #108]	@ (8006400 <SPI_EndRxTxTransaction+0xa4>)
 8006394:	fba2 2303 	umull	r2, r3, r2, r3
 8006398:	0d5b      	lsrs	r3, r3, #21
 800639a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800639e:	fb02 f303 	mul.w	r3, r2, r3
 80063a2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063ac:	d112      	bne.n	80063d4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2200      	movs	r2, #0
 80063b6:	2180      	movs	r1, #128	@ 0x80
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f7ff ff47 	bl	800624c <SPI_WaitFlagStateUntilTimeout>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d016      	beq.n	80063f2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c8:	f043 0220 	orr.w	r2, r3, #32
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e00f      	b.n	80063f4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	3b01      	subs	r3, #1
 80063de:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ea:	2b80      	cmp	r3, #128	@ 0x80
 80063ec:	d0f2      	beq.n	80063d4 <SPI_EndRxTxTransaction+0x78>
 80063ee:	e000      	b.n	80063f2 <SPI_EndRxTxTransaction+0x96>
        break;
 80063f0:	bf00      	nop
  }

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	20000018 	.word	0x20000018
 8006400:	165e9f81 	.word	0x165e9f81

08006404 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e041      	b.n	800649a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d106      	bne.n	8006430 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7fc fa30 	bl	8002890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3304      	adds	r3, #4
 8006440:	4619      	mov	r1, r3
 8006442:	4610      	mov	r0, r2
 8006444:	f000 f8f4 	bl	8006630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b084      	sub	sp, #16
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d101      	bne.n	80064be <HAL_TIM_ConfigClockSource+0x1c>
 80064ba:	2302      	movs	r3, #2
 80064bc:	e0b4      	b.n	8006628 <HAL_TIM_ConfigClockSource+0x186>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2202      	movs	r2, #2
 80064ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80064dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064e4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064f6:	d03e      	beq.n	8006576 <HAL_TIM_ConfigClockSource+0xd4>
 80064f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064fc:	f200 8087 	bhi.w	800660e <HAL_TIM_ConfigClockSource+0x16c>
 8006500:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006504:	f000 8086 	beq.w	8006614 <HAL_TIM_ConfigClockSource+0x172>
 8006508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800650c:	d87f      	bhi.n	800660e <HAL_TIM_ConfigClockSource+0x16c>
 800650e:	2b70      	cmp	r3, #112	@ 0x70
 8006510:	d01a      	beq.n	8006548 <HAL_TIM_ConfigClockSource+0xa6>
 8006512:	2b70      	cmp	r3, #112	@ 0x70
 8006514:	d87b      	bhi.n	800660e <HAL_TIM_ConfigClockSource+0x16c>
 8006516:	2b60      	cmp	r3, #96	@ 0x60
 8006518:	d050      	beq.n	80065bc <HAL_TIM_ConfigClockSource+0x11a>
 800651a:	2b60      	cmp	r3, #96	@ 0x60
 800651c:	d877      	bhi.n	800660e <HAL_TIM_ConfigClockSource+0x16c>
 800651e:	2b50      	cmp	r3, #80	@ 0x50
 8006520:	d03c      	beq.n	800659c <HAL_TIM_ConfigClockSource+0xfa>
 8006522:	2b50      	cmp	r3, #80	@ 0x50
 8006524:	d873      	bhi.n	800660e <HAL_TIM_ConfigClockSource+0x16c>
 8006526:	2b40      	cmp	r3, #64	@ 0x40
 8006528:	d058      	beq.n	80065dc <HAL_TIM_ConfigClockSource+0x13a>
 800652a:	2b40      	cmp	r3, #64	@ 0x40
 800652c:	d86f      	bhi.n	800660e <HAL_TIM_ConfigClockSource+0x16c>
 800652e:	2b30      	cmp	r3, #48	@ 0x30
 8006530:	d064      	beq.n	80065fc <HAL_TIM_ConfigClockSource+0x15a>
 8006532:	2b30      	cmp	r3, #48	@ 0x30
 8006534:	d86b      	bhi.n	800660e <HAL_TIM_ConfigClockSource+0x16c>
 8006536:	2b20      	cmp	r3, #32
 8006538:	d060      	beq.n	80065fc <HAL_TIM_ConfigClockSource+0x15a>
 800653a:	2b20      	cmp	r3, #32
 800653c:	d867      	bhi.n	800660e <HAL_TIM_ConfigClockSource+0x16c>
 800653e:	2b00      	cmp	r3, #0
 8006540:	d05c      	beq.n	80065fc <HAL_TIM_ConfigClockSource+0x15a>
 8006542:	2b10      	cmp	r3, #16
 8006544:	d05a      	beq.n	80065fc <HAL_TIM_ConfigClockSource+0x15a>
 8006546:	e062      	b.n	800660e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006558:	f000 f990 	bl	800687c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800656a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	609a      	str	r2, [r3, #8]
      break;
 8006574:	e04f      	b.n	8006616 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006586:	f000 f979 	bl	800687c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006598:	609a      	str	r2, [r3, #8]
      break;
 800659a:	e03c      	b.n	8006616 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065a8:	461a      	mov	r2, r3
 80065aa:	f000 f8ed 	bl	8006788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2150      	movs	r1, #80	@ 0x50
 80065b4:	4618      	mov	r0, r3
 80065b6:	f000 f946 	bl	8006846 <TIM_ITRx_SetConfig>
      break;
 80065ba:	e02c      	b.n	8006616 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065c8:	461a      	mov	r2, r3
 80065ca:	f000 f90c 	bl	80067e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2160      	movs	r1, #96	@ 0x60
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 f936 	bl	8006846 <TIM_ITRx_SetConfig>
      break;
 80065da:	e01c      	b.n	8006616 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065e8:	461a      	mov	r2, r3
 80065ea:	f000 f8cd 	bl	8006788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2140      	movs	r1, #64	@ 0x40
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 f926 	bl	8006846 <TIM_ITRx_SetConfig>
      break;
 80065fa:	e00c      	b.n	8006616 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4619      	mov	r1, r3
 8006606:	4610      	mov	r0, r2
 8006608:	f000 f91d 	bl	8006846 <TIM_ITRx_SetConfig>
      break;
 800660c:	e003      	b.n	8006616 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	73fb      	strb	r3, [r7, #15]
      break;
 8006612:	e000      	b.n	8006616 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006614:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006626:	7bfb      	ldrb	r3, [r7, #15]
}
 8006628:	4618      	mov	r0, r3
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a46      	ldr	r2, [pc, #280]	@ (800675c <TIM_Base_SetConfig+0x12c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d013      	beq.n	8006670 <TIM_Base_SetConfig+0x40>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800664e:	d00f      	beq.n	8006670 <TIM_Base_SetConfig+0x40>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a43      	ldr	r2, [pc, #268]	@ (8006760 <TIM_Base_SetConfig+0x130>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d00b      	beq.n	8006670 <TIM_Base_SetConfig+0x40>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a42      	ldr	r2, [pc, #264]	@ (8006764 <TIM_Base_SetConfig+0x134>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d007      	beq.n	8006670 <TIM_Base_SetConfig+0x40>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a41      	ldr	r2, [pc, #260]	@ (8006768 <TIM_Base_SetConfig+0x138>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d003      	beq.n	8006670 <TIM_Base_SetConfig+0x40>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a40      	ldr	r2, [pc, #256]	@ (800676c <TIM_Base_SetConfig+0x13c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d108      	bne.n	8006682 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a35      	ldr	r2, [pc, #212]	@ (800675c <TIM_Base_SetConfig+0x12c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d02b      	beq.n	80066e2 <TIM_Base_SetConfig+0xb2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006690:	d027      	beq.n	80066e2 <TIM_Base_SetConfig+0xb2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a32      	ldr	r2, [pc, #200]	@ (8006760 <TIM_Base_SetConfig+0x130>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d023      	beq.n	80066e2 <TIM_Base_SetConfig+0xb2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a31      	ldr	r2, [pc, #196]	@ (8006764 <TIM_Base_SetConfig+0x134>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d01f      	beq.n	80066e2 <TIM_Base_SetConfig+0xb2>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a30      	ldr	r2, [pc, #192]	@ (8006768 <TIM_Base_SetConfig+0x138>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d01b      	beq.n	80066e2 <TIM_Base_SetConfig+0xb2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a2f      	ldr	r2, [pc, #188]	@ (800676c <TIM_Base_SetConfig+0x13c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d017      	beq.n	80066e2 <TIM_Base_SetConfig+0xb2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a2e      	ldr	r2, [pc, #184]	@ (8006770 <TIM_Base_SetConfig+0x140>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d013      	beq.n	80066e2 <TIM_Base_SetConfig+0xb2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a2d      	ldr	r2, [pc, #180]	@ (8006774 <TIM_Base_SetConfig+0x144>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00f      	beq.n	80066e2 <TIM_Base_SetConfig+0xb2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a2c      	ldr	r2, [pc, #176]	@ (8006778 <TIM_Base_SetConfig+0x148>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d00b      	beq.n	80066e2 <TIM_Base_SetConfig+0xb2>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a2b      	ldr	r2, [pc, #172]	@ (800677c <TIM_Base_SetConfig+0x14c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d007      	beq.n	80066e2 <TIM_Base_SetConfig+0xb2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006780 <TIM_Base_SetConfig+0x150>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d003      	beq.n	80066e2 <TIM_Base_SetConfig+0xb2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a29      	ldr	r2, [pc, #164]	@ (8006784 <TIM_Base_SetConfig+0x154>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d108      	bne.n	80066f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	689a      	ldr	r2, [r3, #8]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a10      	ldr	r2, [pc, #64]	@ (800675c <TIM_Base_SetConfig+0x12c>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d003      	beq.n	8006728 <TIM_Base_SetConfig+0xf8>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a12      	ldr	r2, [pc, #72]	@ (800676c <TIM_Base_SetConfig+0x13c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d103      	bne.n	8006730 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	691a      	ldr	r2, [r3, #16]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b01      	cmp	r3, #1
 8006740:	d105      	bne.n	800674e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	f023 0201 	bic.w	r2, r3, #1
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	611a      	str	r2, [r3, #16]
  }
}
 800674e:	bf00      	nop
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	40010000 	.word	0x40010000
 8006760:	40000400 	.word	0x40000400
 8006764:	40000800 	.word	0x40000800
 8006768:	40000c00 	.word	0x40000c00
 800676c:	40010400 	.word	0x40010400
 8006770:	40014000 	.word	0x40014000
 8006774:	40014400 	.word	0x40014400
 8006778:	40014800 	.word	0x40014800
 800677c:	40001800 	.word	0x40001800
 8006780:	40001c00 	.word	0x40001c00
 8006784:	40002000 	.word	0x40002000

08006788 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	f023 0201 	bic.w	r2, r3, #1
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	011b      	lsls	r3, r3, #4
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f023 030a 	bic.w	r3, r3, #10
 80067c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	621a      	str	r2, [r3, #32]
}
 80067da:	bf00      	nop
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b087      	sub	sp, #28
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	60f8      	str	r0, [r7, #12]
 80067ee:	60b9      	str	r1, [r7, #8]
 80067f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	f023 0210 	bic.w	r2, r3, #16
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006810:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	031b      	lsls	r3, r3, #12
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	4313      	orrs	r3, r2
 800681a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006822:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	011b      	lsls	r3, r3, #4
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	4313      	orrs	r3, r2
 800682c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	621a      	str	r2, [r3, #32]
}
 800683a:	bf00      	nop
 800683c:	371c      	adds	r7, #28
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006846:	b480      	push	{r7}
 8006848:	b085      	sub	sp, #20
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800685c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4313      	orrs	r3, r2
 8006864:	f043 0307 	orr.w	r3, r3, #7
 8006868:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	609a      	str	r2, [r3, #8]
}
 8006870:	bf00      	nop
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006896:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	021a      	lsls	r2, r3, #8
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	431a      	orrs	r2, r3
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	609a      	str	r2, [r3, #8]
}
 80068b0:	bf00      	nop
 80068b2:	371c      	adds	r7, #28
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d101      	bne.n	80068d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068d0:	2302      	movs	r3, #2
 80068d2:	e05a      	b.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2202      	movs	r2, #2
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a21      	ldr	r2, [pc, #132]	@ (8006998 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d022      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006920:	d01d      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a1d      	ldr	r2, [pc, #116]	@ (800699c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d018      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a1b      	ldr	r2, [pc, #108]	@ (80069a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d013      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a1a      	ldr	r2, [pc, #104]	@ (80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00e      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a18      	ldr	r2, [pc, #96]	@ (80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d009      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a17      	ldr	r2, [pc, #92]	@ (80069ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d004      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a15      	ldr	r2, [pc, #84]	@ (80069b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d10c      	bne.n	8006978 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006964:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	4313      	orrs	r3, r2
 800696e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	40010000 	.word	0x40010000
 800699c:	40000400 	.word	0x40000400
 80069a0:	40000800 	.word	0x40000800
 80069a4:	40000c00 	.word	0x40000c00
 80069a8:	40010400 	.word	0x40010400
 80069ac:	40014000 	.word	0x40014000
 80069b0:	40001800 	.word	0x40001800

080069b4 <findslot>:
 80069b4:	4b0a      	ldr	r3, [pc, #40]	@ (80069e0 <findslot+0x2c>)
 80069b6:	b510      	push	{r4, lr}
 80069b8:	4604      	mov	r4, r0
 80069ba:	6818      	ldr	r0, [r3, #0]
 80069bc:	b118      	cbz	r0, 80069c6 <findslot+0x12>
 80069be:	6a03      	ldr	r3, [r0, #32]
 80069c0:	b90b      	cbnz	r3, 80069c6 <findslot+0x12>
 80069c2:	f000 fb29 	bl	8007018 <__sinit>
 80069c6:	2c13      	cmp	r4, #19
 80069c8:	d807      	bhi.n	80069da <findslot+0x26>
 80069ca:	4806      	ldr	r0, [pc, #24]	@ (80069e4 <findslot+0x30>)
 80069cc:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80069d0:	3201      	adds	r2, #1
 80069d2:	d002      	beq.n	80069da <findslot+0x26>
 80069d4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80069d8:	bd10      	pop	{r4, pc}
 80069da:	2000      	movs	r0, #0
 80069dc:	e7fc      	b.n	80069d8 <findslot+0x24>
 80069de:	bf00      	nop
 80069e0:	20000038 	.word	0x20000038
 80069e4:	20025c3c 	.word	0x20025c3c

080069e8 <error>:
 80069e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ea:	4604      	mov	r4, r0
 80069ec:	f000 fb52 	bl	8007094 <__errno>
 80069f0:	2613      	movs	r6, #19
 80069f2:	4605      	mov	r5, r0
 80069f4:	2700      	movs	r7, #0
 80069f6:	4630      	mov	r0, r6
 80069f8:	4639      	mov	r1, r7
 80069fa:	beab      	bkpt	0x00ab
 80069fc:	4606      	mov	r6, r0
 80069fe:	602e      	str	r6, [r5, #0]
 8006a00:	4620      	mov	r0, r4
 8006a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a04 <checkerror>:
 8006a04:	1c43      	adds	r3, r0, #1
 8006a06:	d101      	bne.n	8006a0c <checkerror+0x8>
 8006a08:	f7ff bfee 	b.w	80069e8 <error>
 8006a0c:	4770      	bx	lr

08006a0e <_swiread>:
 8006a0e:	b530      	push	{r4, r5, lr}
 8006a10:	b085      	sub	sp, #20
 8006a12:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006a16:	9203      	str	r2, [sp, #12]
 8006a18:	2406      	movs	r4, #6
 8006a1a:	ad01      	add	r5, sp, #4
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	4629      	mov	r1, r5
 8006a20:	beab      	bkpt	0x00ab
 8006a22:	4604      	mov	r4, r0
 8006a24:	4620      	mov	r0, r4
 8006a26:	f7ff ffed 	bl	8006a04 <checkerror>
 8006a2a:	b005      	add	sp, #20
 8006a2c:	bd30      	pop	{r4, r5, pc}

08006a2e <_read>:
 8006a2e:	b570      	push	{r4, r5, r6, lr}
 8006a30:	460e      	mov	r6, r1
 8006a32:	4614      	mov	r4, r2
 8006a34:	f7ff ffbe 	bl	80069b4 <findslot>
 8006a38:	4605      	mov	r5, r0
 8006a3a:	b930      	cbnz	r0, 8006a4a <_read+0x1c>
 8006a3c:	f000 fb2a 	bl	8007094 <__errno>
 8006a40:	2309      	movs	r3, #9
 8006a42:	6003      	str	r3, [r0, #0]
 8006a44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a48:	bd70      	pop	{r4, r5, r6, pc}
 8006a4a:	6800      	ldr	r0, [r0, #0]
 8006a4c:	4622      	mov	r2, r4
 8006a4e:	4631      	mov	r1, r6
 8006a50:	f7ff ffdd 	bl	8006a0e <_swiread>
 8006a54:	1c43      	adds	r3, r0, #1
 8006a56:	d0f5      	beq.n	8006a44 <_read+0x16>
 8006a58:	686b      	ldr	r3, [r5, #4]
 8006a5a:	1a20      	subs	r0, r4, r0
 8006a5c:	4403      	add	r3, r0
 8006a5e:	606b      	str	r3, [r5, #4]
 8006a60:	e7f2      	b.n	8006a48 <_read+0x1a>

08006a62 <_swilseek>:
 8006a62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a64:	460c      	mov	r4, r1
 8006a66:	4616      	mov	r6, r2
 8006a68:	f7ff ffa4 	bl	80069b4 <findslot>
 8006a6c:	4605      	mov	r5, r0
 8006a6e:	b940      	cbnz	r0, 8006a82 <_swilseek+0x20>
 8006a70:	f000 fb10 	bl	8007094 <__errno>
 8006a74:	2309      	movs	r3, #9
 8006a76:	6003      	str	r3, [r0, #0]
 8006a78:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	b003      	add	sp, #12
 8006a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a82:	2e02      	cmp	r6, #2
 8006a84:	d903      	bls.n	8006a8e <_swilseek+0x2c>
 8006a86:	f000 fb05 	bl	8007094 <__errno>
 8006a8a:	2316      	movs	r3, #22
 8006a8c:	e7f3      	b.n	8006a76 <_swilseek+0x14>
 8006a8e:	2e01      	cmp	r6, #1
 8006a90:	d112      	bne.n	8006ab8 <_swilseek+0x56>
 8006a92:	6843      	ldr	r3, [r0, #4]
 8006a94:	18e4      	adds	r4, r4, r3
 8006a96:	d4f6      	bmi.n	8006a86 <_swilseek+0x24>
 8006a98:	682b      	ldr	r3, [r5, #0]
 8006a9a:	260a      	movs	r6, #10
 8006a9c:	e9cd 3400 	strd	r3, r4, [sp]
 8006aa0:	466f      	mov	r7, sp
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	4639      	mov	r1, r7
 8006aa6:	beab      	bkpt	0x00ab
 8006aa8:	4606      	mov	r6, r0
 8006aaa:	4630      	mov	r0, r6
 8006aac:	f7ff ffaa 	bl	8006a04 <checkerror>
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	dbe1      	blt.n	8006a78 <_swilseek+0x16>
 8006ab4:	606c      	str	r4, [r5, #4]
 8006ab6:	e7e1      	b.n	8006a7c <_swilseek+0x1a>
 8006ab8:	2e02      	cmp	r6, #2
 8006aba:	6803      	ldr	r3, [r0, #0]
 8006abc:	d1ec      	bne.n	8006a98 <_swilseek+0x36>
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	260c      	movs	r6, #12
 8006ac2:	466f      	mov	r7, sp
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	4639      	mov	r1, r7
 8006ac8:	beab      	bkpt	0x00ab
 8006aca:	4606      	mov	r6, r0
 8006acc:	4630      	mov	r0, r6
 8006ace:	f7ff ff99 	bl	8006a04 <checkerror>
 8006ad2:	1c43      	adds	r3, r0, #1
 8006ad4:	d0d0      	beq.n	8006a78 <_swilseek+0x16>
 8006ad6:	4404      	add	r4, r0
 8006ad8:	e7de      	b.n	8006a98 <_swilseek+0x36>

08006ada <_lseek>:
 8006ada:	f7ff bfc2 	b.w	8006a62 <_swilseek>

08006ade <_swiwrite>:
 8006ade:	b530      	push	{r4, r5, lr}
 8006ae0:	b085      	sub	sp, #20
 8006ae2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006ae6:	9203      	str	r2, [sp, #12]
 8006ae8:	2405      	movs	r4, #5
 8006aea:	ad01      	add	r5, sp, #4
 8006aec:	4620      	mov	r0, r4
 8006aee:	4629      	mov	r1, r5
 8006af0:	beab      	bkpt	0x00ab
 8006af2:	4604      	mov	r4, r0
 8006af4:	4620      	mov	r0, r4
 8006af6:	f7ff ff85 	bl	8006a04 <checkerror>
 8006afa:	b005      	add	sp, #20
 8006afc:	bd30      	pop	{r4, r5, pc}

08006afe <_write>:
 8006afe:	b570      	push	{r4, r5, r6, lr}
 8006b00:	460e      	mov	r6, r1
 8006b02:	4615      	mov	r5, r2
 8006b04:	f7ff ff56 	bl	80069b4 <findslot>
 8006b08:	4604      	mov	r4, r0
 8006b0a:	b930      	cbnz	r0, 8006b1a <_write+0x1c>
 8006b0c:	f000 fac2 	bl	8007094 <__errno>
 8006b10:	2309      	movs	r3, #9
 8006b12:	6003      	str	r3, [r0, #0]
 8006b14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b18:	bd70      	pop	{r4, r5, r6, pc}
 8006b1a:	6800      	ldr	r0, [r0, #0]
 8006b1c:	462a      	mov	r2, r5
 8006b1e:	4631      	mov	r1, r6
 8006b20:	f7ff ffdd 	bl	8006ade <_swiwrite>
 8006b24:	1e03      	subs	r3, r0, #0
 8006b26:	dbf5      	blt.n	8006b14 <_write+0x16>
 8006b28:	6862      	ldr	r2, [r4, #4]
 8006b2a:	1ae8      	subs	r0, r5, r3
 8006b2c:	4402      	add	r2, r0
 8006b2e:	42ab      	cmp	r3, r5
 8006b30:	6062      	str	r2, [r4, #4]
 8006b32:	d1f1      	bne.n	8006b18 <_write+0x1a>
 8006b34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b38:	2000      	movs	r0, #0
 8006b3a:	f7ff bf55 	b.w	80069e8 <error>

08006b3e <_swiclose>:
 8006b3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b40:	2402      	movs	r4, #2
 8006b42:	9001      	str	r0, [sp, #4]
 8006b44:	ad01      	add	r5, sp, #4
 8006b46:	4620      	mov	r0, r4
 8006b48:	4629      	mov	r1, r5
 8006b4a:	beab      	bkpt	0x00ab
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	4620      	mov	r0, r4
 8006b50:	f7ff ff58 	bl	8006a04 <checkerror>
 8006b54:	b003      	add	sp, #12
 8006b56:	bd30      	pop	{r4, r5, pc}

08006b58 <_close>:
 8006b58:	b538      	push	{r3, r4, r5, lr}
 8006b5a:	4605      	mov	r5, r0
 8006b5c:	f7ff ff2a 	bl	80069b4 <findslot>
 8006b60:	4604      	mov	r4, r0
 8006b62:	b930      	cbnz	r0, 8006b72 <_close+0x1a>
 8006b64:	f000 fa96 	bl	8007094 <__errno>
 8006b68:	2309      	movs	r3, #9
 8006b6a:	6003      	str	r3, [r0, #0]
 8006b6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b70:	bd38      	pop	{r3, r4, r5, pc}
 8006b72:	3d01      	subs	r5, #1
 8006b74:	2d01      	cmp	r5, #1
 8006b76:	d809      	bhi.n	8006b8c <_close+0x34>
 8006b78:	4b09      	ldr	r3, [pc, #36]	@ (8006ba0 <_close+0x48>)
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d104      	bne.n	8006b8c <_close+0x34>
 8006b82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b86:	6003      	str	r3, [r0, #0]
 8006b88:	2000      	movs	r0, #0
 8006b8a:	e7f1      	b.n	8006b70 <_close+0x18>
 8006b8c:	6820      	ldr	r0, [r4, #0]
 8006b8e:	f7ff ffd6 	bl	8006b3e <_swiclose>
 8006b92:	2800      	cmp	r0, #0
 8006b94:	d1ec      	bne.n	8006b70 <_close+0x18>
 8006b96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b9a:	6023      	str	r3, [r4, #0]
 8006b9c:	e7e8      	b.n	8006b70 <_close+0x18>
 8006b9e:	bf00      	nop
 8006ba0:	20025c3c 	.word	0x20025c3c

08006ba4 <_swistat>:
 8006ba4:	b570      	push	{r4, r5, r6, lr}
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	f7ff ff04 	bl	80069b4 <findslot>
 8006bac:	4605      	mov	r5, r0
 8006bae:	b930      	cbnz	r0, 8006bbe <_swistat+0x1a>
 8006bb0:	f000 fa70 	bl	8007094 <__errno>
 8006bb4:	2309      	movs	r3, #9
 8006bb6:	6003      	str	r3, [r0, #0]
 8006bb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bbc:	bd70      	pop	{r4, r5, r6, pc}
 8006bbe:	6863      	ldr	r3, [r4, #4]
 8006bc0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006bc4:	6063      	str	r3, [r4, #4]
 8006bc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006bca:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006bcc:	260c      	movs	r6, #12
 8006bce:	4630      	mov	r0, r6
 8006bd0:	4629      	mov	r1, r5
 8006bd2:	beab      	bkpt	0x00ab
 8006bd4:	4605      	mov	r5, r0
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	f7ff ff14 	bl	8006a04 <checkerror>
 8006bdc:	1c43      	adds	r3, r0, #1
 8006bde:	d0eb      	beq.n	8006bb8 <_swistat+0x14>
 8006be0:	6120      	str	r0, [r4, #16]
 8006be2:	2000      	movs	r0, #0
 8006be4:	e7ea      	b.n	8006bbc <_swistat+0x18>

08006be6 <_stat>:
 8006be6:	b538      	push	{r3, r4, r5, lr}
 8006be8:	460d      	mov	r5, r1
 8006bea:	4604      	mov	r4, r0
 8006bec:	2258      	movs	r2, #88	@ 0x58
 8006bee:	2100      	movs	r1, #0
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	f000 fa47 	bl	8007084 <memset>
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	f000 f811 	bl	8006c20 <_swiopen>
 8006bfe:	1c43      	adds	r3, r0, #1
 8006c00:	4604      	mov	r4, r0
 8006c02:	d00b      	beq.n	8006c1c <_stat+0x36>
 8006c04:	686b      	ldr	r3, [r5, #4]
 8006c06:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006c0a:	606b      	str	r3, [r5, #4]
 8006c0c:	4629      	mov	r1, r5
 8006c0e:	f7ff ffc9 	bl	8006ba4 <_swistat>
 8006c12:	4605      	mov	r5, r0
 8006c14:	4620      	mov	r0, r4
 8006c16:	f7ff ff9f 	bl	8006b58 <_close>
 8006c1a:	462c      	mov	r4, r5
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	bd38      	pop	{r3, r4, r5, pc}

08006c20 <_swiopen>:
 8006c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c24:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8006cd0 <_swiopen+0xb0>
 8006c28:	b096      	sub	sp, #88	@ 0x58
 8006c2a:	4607      	mov	r7, r0
 8006c2c:	460e      	mov	r6, r1
 8006c2e:	2400      	movs	r4, #0
 8006c30:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8006c34:	3301      	adds	r3, #1
 8006c36:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8006c3a:	d032      	beq.n	8006ca2 <_swiopen+0x82>
 8006c3c:	3401      	adds	r4, #1
 8006c3e:	2c14      	cmp	r4, #20
 8006c40:	d1f6      	bne.n	8006c30 <_swiopen+0x10>
 8006c42:	f000 fa27 	bl	8007094 <__errno>
 8006c46:	2318      	movs	r3, #24
 8006c48:	e03a      	b.n	8006cc0 <_swiopen+0xa0>
 8006c4a:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8006c4e:	f240 6301 	movw	r3, #1537	@ 0x601
 8006c52:	07b2      	lsls	r2, r6, #30
 8006c54:	bf48      	it	mi
 8006c56:	f045 0502 	orrmi.w	r5, r5, #2
 8006c5a:	421e      	tst	r6, r3
 8006c5c:	bf18      	it	ne
 8006c5e:	f045 0504 	orrne.w	r5, r5, #4
 8006c62:	0733      	lsls	r3, r6, #28
 8006c64:	bf48      	it	mi
 8006c66:	f025 0504 	bicmi.w	r5, r5, #4
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	bf48      	it	mi
 8006c6e:	f045 0508 	orrmi.w	r5, r5, #8
 8006c72:	9700      	str	r7, [sp, #0]
 8006c74:	f7f9 fabc 	bl	80001f0 <strlen>
 8006c78:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8006c7c:	2501      	movs	r5, #1
 8006c7e:	4628      	mov	r0, r5
 8006c80:	4651      	mov	r1, sl
 8006c82:	beab      	bkpt	0x00ab
 8006c84:	4605      	mov	r5, r0
 8006c86:	2d00      	cmp	r5, #0
 8006c88:	db06      	blt.n	8006c98 <_swiopen+0x78>
 8006c8a:	44c8      	add	r8, r9
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 8006c92:	f8c8 3004 	str.w	r3, [r8, #4]
 8006c96:	e016      	b.n	8006cc6 <_swiopen+0xa6>
 8006c98:	4628      	mov	r0, r5
 8006c9a:	f7ff fea5 	bl	80069e8 <error>
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	e011      	b.n	8006cc6 <_swiopen+0xa6>
 8006ca2:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8006ca6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006caa:	46ea      	mov	sl, sp
 8006cac:	d1cd      	bne.n	8006c4a <_swiopen+0x2a>
 8006cae:	4651      	mov	r1, sl
 8006cb0:	4638      	mov	r0, r7
 8006cb2:	f7ff ff98 	bl	8006be6 <_stat>
 8006cb6:	3001      	adds	r0, #1
 8006cb8:	d0c7      	beq.n	8006c4a <_swiopen+0x2a>
 8006cba:	f000 f9eb 	bl	8007094 <__errno>
 8006cbe:	2311      	movs	r3, #17
 8006cc0:	6003      	str	r3, [r0, #0]
 8006cc2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	b016      	add	sp, #88	@ 0x58
 8006cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cce:	bf00      	nop
 8006cd0:	20025c3c 	.word	0x20025c3c

08006cd4 <_get_semihosting_exts>:
 8006cd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006cd8:	4606      	mov	r6, r0
 8006cda:	460f      	mov	r7, r1
 8006cdc:	4829      	ldr	r0, [pc, #164]	@ (8006d84 <_get_semihosting_exts+0xb0>)
 8006cde:	2100      	movs	r1, #0
 8006ce0:	4615      	mov	r5, r2
 8006ce2:	f7ff ff9d 	bl	8006c20 <_swiopen>
 8006ce6:	462a      	mov	r2, r5
 8006ce8:	4604      	mov	r4, r0
 8006cea:	2100      	movs	r1, #0
 8006cec:	4630      	mov	r0, r6
 8006cee:	f000 f9c9 	bl	8007084 <memset>
 8006cf2:	1c63      	adds	r3, r4, #1
 8006cf4:	d014      	beq.n	8006d20 <_get_semihosting_exts+0x4c>
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f7ff fe5c 	bl	80069b4 <findslot>
 8006cfc:	f04f 080c 	mov.w	r8, #12
 8006d00:	4681      	mov	r9, r0
 8006d02:	4640      	mov	r0, r8
 8006d04:	4649      	mov	r1, r9
 8006d06:	beab      	bkpt	0x00ab
 8006d08:	4680      	mov	r8, r0
 8006d0a:	4640      	mov	r0, r8
 8006d0c:	f7ff fe7a 	bl	8006a04 <checkerror>
 8006d10:	2803      	cmp	r0, #3
 8006d12:	dd02      	ble.n	8006d1a <_get_semihosting_exts+0x46>
 8006d14:	1ec3      	subs	r3, r0, #3
 8006d16:	42ab      	cmp	r3, r5
 8006d18:	dc07      	bgt.n	8006d2a <_get_semihosting_exts+0x56>
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f7ff ff1c 	bl	8006b58 <_close>
 8006d20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d24:	b003      	add	sp, #12
 8006d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d2a:	2204      	movs	r2, #4
 8006d2c:	eb0d 0102 	add.w	r1, sp, r2
 8006d30:	4620      	mov	r0, r4
 8006d32:	f7ff fe7c 	bl	8006a2e <_read>
 8006d36:	2803      	cmp	r0, #3
 8006d38:	ddef      	ble.n	8006d1a <_get_semihosting_exts+0x46>
 8006d3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006d3e:	2b53      	cmp	r3, #83	@ 0x53
 8006d40:	d1eb      	bne.n	8006d1a <_get_semihosting_exts+0x46>
 8006d42:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006d46:	2b48      	cmp	r3, #72	@ 0x48
 8006d48:	d1e7      	bne.n	8006d1a <_get_semihosting_exts+0x46>
 8006d4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006d4e:	2b46      	cmp	r3, #70	@ 0x46
 8006d50:	d1e3      	bne.n	8006d1a <_get_semihosting_exts+0x46>
 8006d52:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006d56:	2b42      	cmp	r3, #66	@ 0x42
 8006d58:	d1df      	bne.n	8006d1a <_get_semihosting_exts+0x46>
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	4639      	mov	r1, r7
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f7ff fe7f 	bl	8006a62 <_swilseek>
 8006d64:	2800      	cmp	r0, #0
 8006d66:	dbd8      	blt.n	8006d1a <_get_semihosting_exts+0x46>
 8006d68:	462a      	mov	r2, r5
 8006d6a:	4631      	mov	r1, r6
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f7ff fe5e 	bl	8006a2e <_read>
 8006d72:	4605      	mov	r5, r0
 8006d74:	4620      	mov	r0, r4
 8006d76:	f7ff feef 	bl	8006b58 <_close>
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	f7ff fe42 	bl	8006a04 <checkerror>
 8006d80:	e7d0      	b.n	8006d24 <_get_semihosting_exts+0x50>
 8006d82:	bf00      	nop
 8006d84:	08009724 	.word	0x08009724

08006d88 <initialise_semihosting_exts>:
 8006d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d8a:	4d0a      	ldr	r5, [pc, #40]	@ (8006db4 <initialise_semihosting_exts+0x2c>)
 8006d8c:	4c0a      	ldr	r4, [pc, #40]	@ (8006db8 <initialise_semihosting_exts+0x30>)
 8006d8e:	2100      	movs	r1, #0
 8006d90:	2201      	movs	r2, #1
 8006d92:	a801      	add	r0, sp, #4
 8006d94:	6029      	str	r1, [r5, #0]
 8006d96:	6022      	str	r2, [r4, #0]
 8006d98:	f7ff ff9c 	bl	8006cd4 <_get_semihosting_exts>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	dd07      	ble.n	8006db0 <initialise_semihosting_exts+0x28>
 8006da0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006da4:	f003 0201 	and.w	r2, r3, #1
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	602a      	str	r2, [r5, #0]
 8006dae:	6023      	str	r3, [r4, #0]
 8006db0:	b003      	add	sp, #12
 8006db2:	bd30      	pop	{r4, r5, pc}
 8006db4:	20000028 	.word	0x20000028
 8006db8:	20000024 	.word	0x20000024

08006dbc <_has_ext_stdout_stderr>:
 8006dbc:	b510      	push	{r4, lr}
 8006dbe:	4c04      	ldr	r4, [pc, #16]	@ (8006dd0 <_has_ext_stdout_stderr+0x14>)
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	da01      	bge.n	8006dca <_has_ext_stdout_stderr+0xe>
 8006dc6:	f7ff ffdf 	bl	8006d88 <initialise_semihosting_exts>
 8006dca:	6820      	ldr	r0, [r4, #0]
 8006dcc:	bd10      	pop	{r4, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000024 	.word	0x20000024

08006dd4 <initialise_monitor_handles>:
 8006dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd8:	b085      	sub	sp, #20
 8006dda:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8006e8c <initialise_monitor_handles+0xb8>
 8006dde:	f8cd 9004 	str.w	r9, [sp, #4]
 8006de2:	2303      	movs	r3, #3
 8006de4:	2400      	movs	r4, #0
 8006de6:	9303      	str	r3, [sp, #12]
 8006de8:	af01      	add	r7, sp, #4
 8006dea:	9402      	str	r4, [sp, #8]
 8006dec:	2501      	movs	r5, #1
 8006dee:	4628      	mov	r0, r5
 8006df0:	4639      	mov	r1, r7
 8006df2:	beab      	bkpt	0x00ab
 8006df4:	4605      	mov	r5, r0
 8006df6:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8006e90 <initialise_monitor_handles+0xbc>
 8006dfa:	4623      	mov	r3, r4
 8006dfc:	4c20      	ldr	r4, [pc, #128]	@ (8006e80 <initialise_monitor_handles+0xac>)
 8006dfe:	f8c8 5000 	str.w	r5, [r8]
 8006e02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e06:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	2b14      	cmp	r3, #20
 8006e0e:	d1fa      	bne.n	8006e06 <initialise_monitor_handles+0x32>
 8006e10:	f7ff ffd4 	bl	8006dbc <_has_ext_stdout_stderr>
 8006e14:	4d1b      	ldr	r5, [pc, #108]	@ (8006e84 <initialise_monitor_handles+0xb0>)
 8006e16:	b1d0      	cbz	r0, 8006e4e <initialise_monitor_handles+0x7a>
 8006e18:	f04f 0a03 	mov.w	sl, #3
 8006e1c:	2304      	movs	r3, #4
 8006e1e:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e22:	2601      	movs	r6, #1
 8006e24:	f8cd a00c 	str.w	sl, [sp, #12]
 8006e28:	9302      	str	r3, [sp, #8]
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	4639      	mov	r1, r7
 8006e2e:	beab      	bkpt	0x00ab
 8006e30:	4683      	mov	fp, r0
 8006e32:	4b15      	ldr	r3, [pc, #84]	@ (8006e88 <initialise_monitor_handles+0xb4>)
 8006e34:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e38:	f8c3 b000 	str.w	fp, [r3]
 8006e3c:	2308      	movs	r3, #8
 8006e3e:	f8cd a00c 	str.w	sl, [sp, #12]
 8006e42:	9302      	str	r3, [sp, #8]
 8006e44:	4630      	mov	r0, r6
 8006e46:	4639      	mov	r1, r7
 8006e48:	beab      	bkpt	0x00ab
 8006e4a:	4606      	mov	r6, r0
 8006e4c:	602e      	str	r6, [r5, #0]
 8006e4e:	682b      	ldr	r3, [r5, #0]
 8006e50:	3301      	adds	r3, #1
 8006e52:	bf02      	ittt	eq
 8006e54:	4b0c      	ldreq	r3, [pc, #48]	@ (8006e88 <initialise_monitor_handles+0xb4>)
 8006e56:	681b      	ldreq	r3, [r3, #0]
 8006e58:	602b      	streq	r3, [r5, #0]
 8006e5a:	2600      	movs	r6, #0
 8006e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e60:	6023      	str	r3, [r4, #0]
 8006e62:	6066      	str	r6, [r4, #4]
 8006e64:	f7ff ffaa 	bl	8006dbc <_has_ext_stdout_stderr>
 8006e68:	b130      	cbz	r0, 8006e78 <initialise_monitor_handles+0xa4>
 8006e6a:	4b07      	ldr	r3, [pc, #28]	@ (8006e88 <initialise_monitor_handles+0xb4>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8006e72:	682b      	ldr	r3, [r5, #0]
 8006e74:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8006e78:	b005      	add	sp, #20
 8006e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e7e:	bf00      	nop
 8006e80:	20025c3c 	.word	0x20025c3c
 8006e84:	20025c30 	.word	0x20025c30
 8006e88:	20025c34 	.word	0x20025c34
 8006e8c:	0800973a 	.word	0x0800973a
 8006e90:	20025c38 	.word	0x20025c38

08006e94 <sniprintf>:
 8006e94:	b40c      	push	{r2, r3}
 8006e96:	b530      	push	{r4, r5, lr}
 8006e98:	4b18      	ldr	r3, [pc, #96]	@ (8006efc <sniprintf+0x68>)
 8006e9a:	1e0c      	subs	r4, r1, #0
 8006e9c:	681d      	ldr	r5, [r3, #0]
 8006e9e:	b09d      	sub	sp, #116	@ 0x74
 8006ea0:	da08      	bge.n	8006eb4 <sniprintf+0x20>
 8006ea2:	238b      	movs	r3, #139	@ 0x8b
 8006ea4:	602b      	str	r3, [r5, #0]
 8006ea6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006eaa:	b01d      	add	sp, #116	@ 0x74
 8006eac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006eb0:	b002      	add	sp, #8
 8006eb2:	4770      	bx	lr
 8006eb4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006eb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006ebc:	f04f 0300 	mov.w	r3, #0
 8006ec0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006ec2:	bf14      	ite	ne
 8006ec4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006ec8:	4623      	moveq	r3, r4
 8006eca:	9304      	str	r3, [sp, #16]
 8006ecc:	9307      	str	r3, [sp, #28]
 8006ece:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006ed2:	9002      	str	r0, [sp, #8]
 8006ed4:	9006      	str	r0, [sp, #24]
 8006ed6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006eda:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006edc:	ab21      	add	r3, sp, #132	@ 0x84
 8006ede:	a902      	add	r1, sp, #8
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	9301      	str	r3, [sp, #4]
 8006ee4:	f000 f95e 	bl	80071a4 <_svfiprintf_r>
 8006ee8:	1c43      	adds	r3, r0, #1
 8006eea:	bfbc      	itt	lt
 8006eec:	238b      	movlt	r3, #139	@ 0x8b
 8006eee:	602b      	strlt	r3, [r5, #0]
 8006ef0:	2c00      	cmp	r4, #0
 8006ef2:	d0da      	beq.n	8006eaa <sniprintf+0x16>
 8006ef4:	9b02      	ldr	r3, [sp, #8]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	701a      	strb	r2, [r3, #0]
 8006efa:	e7d6      	b.n	8006eaa <sniprintf+0x16>
 8006efc:	20000038 	.word	0x20000038

08006f00 <std>:
 8006f00:	2300      	movs	r3, #0
 8006f02:	b510      	push	{r4, lr}
 8006f04:	4604      	mov	r4, r0
 8006f06:	e9c0 3300 	strd	r3, r3, [r0]
 8006f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f0e:	6083      	str	r3, [r0, #8]
 8006f10:	8181      	strh	r1, [r0, #12]
 8006f12:	6643      	str	r3, [r0, #100]	@ 0x64
 8006f14:	81c2      	strh	r2, [r0, #14]
 8006f16:	6183      	str	r3, [r0, #24]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	2208      	movs	r2, #8
 8006f1c:	305c      	adds	r0, #92	@ 0x5c
 8006f1e:	f000 f8b1 	bl	8007084 <memset>
 8006f22:	4b0d      	ldr	r3, [pc, #52]	@ (8006f58 <std+0x58>)
 8006f24:	6263      	str	r3, [r4, #36]	@ 0x24
 8006f26:	4b0d      	ldr	r3, [pc, #52]	@ (8006f5c <std+0x5c>)
 8006f28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f60 <std+0x60>)
 8006f2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f64 <std+0x64>)
 8006f30:	6323      	str	r3, [r4, #48]	@ 0x30
 8006f32:	4b0d      	ldr	r3, [pc, #52]	@ (8006f68 <std+0x68>)
 8006f34:	6224      	str	r4, [r4, #32]
 8006f36:	429c      	cmp	r4, r3
 8006f38:	d006      	beq.n	8006f48 <std+0x48>
 8006f3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006f3e:	4294      	cmp	r4, r2
 8006f40:	d002      	beq.n	8006f48 <std+0x48>
 8006f42:	33d0      	adds	r3, #208	@ 0xd0
 8006f44:	429c      	cmp	r4, r3
 8006f46:	d105      	bne.n	8006f54 <std+0x54>
 8006f48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f50:	f000 b8ca 	b.w	80070e8 <__retarget_lock_init_recursive>
 8006f54:	bd10      	pop	{r4, pc}
 8006f56:	bf00      	nop
 8006f58:	08007969 	.word	0x08007969
 8006f5c:	0800798b 	.word	0x0800798b
 8006f60:	080079c3 	.word	0x080079c3
 8006f64:	080079e7 	.word	0x080079e7
 8006f68:	20025cdc 	.word	0x20025cdc

08006f6c <stdio_exit_handler>:
 8006f6c:	4a02      	ldr	r2, [pc, #8]	@ (8006f78 <stdio_exit_handler+0xc>)
 8006f6e:	4903      	ldr	r1, [pc, #12]	@ (8006f7c <stdio_exit_handler+0x10>)
 8006f70:	4803      	ldr	r0, [pc, #12]	@ (8006f80 <stdio_exit_handler+0x14>)
 8006f72:	f000 b869 	b.w	8007048 <_fwalk_sglue>
 8006f76:	bf00      	nop
 8006f78:	2000002c 	.word	0x2000002c
 8006f7c:	08007901 	.word	0x08007901
 8006f80:	2000003c 	.word	0x2000003c

08006f84 <cleanup_stdio>:
 8006f84:	6841      	ldr	r1, [r0, #4]
 8006f86:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb8 <cleanup_stdio+0x34>)
 8006f88:	4299      	cmp	r1, r3
 8006f8a:	b510      	push	{r4, lr}
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	d001      	beq.n	8006f94 <cleanup_stdio+0x10>
 8006f90:	f000 fcb6 	bl	8007900 <_fflush_r>
 8006f94:	68a1      	ldr	r1, [r4, #8]
 8006f96:	4b09      	ldr	r3, [pc, #36]	@ (8006fbc <cleanup_stdio+0x38>)
 8006f98:	4299      	cmp	r1, r3
 8006f9a:	d002      	beq.n	8006fa2 <cleanup_stdio+0x1e>
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f000 fcaf 	bl	8007900 <_fflush_r>
 8006fa2:	68e1      	ldr	r1, [r4, #12]
 8006fa4:	4b06      	ldr	r3, [pc, #24]	@ (8006fc0 <cleanup_stdio+0x3c>)
 8006fa6:	4299      	cmp	r1, r3
 8006fa8:	d004      	beq.n	8006fb4 <cleanup_stdio+0x30>
 8006faa:	4620      	mov	r0, r4
 8006fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fb0:	f000 bca6 	b.w	8007900 <_fflush_r>
 8006fb4:	bd10      	pop	{r4, pc}
 8006fb6:	bf00      	nop
 8006fb8:	20025cdc 	.word	0x20025cdc
 8006fbc:	20025d44 	.word	0x20025d44
 8006fc0:	20025dac 	.word	0x20025dac

08006fc4 <global_stdio_init.part.0>:
 8006fc4:	b510      	push	{r4, lr}
 8006fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ff4 <global_stdio_init.part.0+0x30>)
 8006fc8:	4c0b      	ldr	r4, [pc, #44]	@ (8006ff8 <global_stdio_init.part.0+0x34>)
 8006fca:	4a0c      	ldr	r2, [pc, #48]	@ (8006ffc <global_stdio_init.part.0+0x38>)
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	4620      	mov	r0, r4
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	2104      	movs	r1, #4
 8006fd4:	f7ff ff94 	bl	8006f00 <std>
 8006fd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006fdc:	2201      	movs	r2, #1
 8006fde:	2109      	movs	r1, #9
 8006fe0:	f7ff ff8e 	bl	8006f00 <std>
 8006fe4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006fe8:	2202      	movs	r2, #2
 8006fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fee:	2112      	movs	r1, #18
 8006ff0:	f7ff bf86 	b.w	8006f00 <std>
 8006ff4:	20025e14 	.word	0x20025e14
 8006ff8:	20025cdc 	.word	0x20025cdc
 8006ffc:	08006f6d 	.word	0x08006f6d

08007000 <__sfp_lock_acquire>:
 8007000:	4801      	ldr	r0, [pc, #4]	@ (8007008 <__sfp_lock_acquire+0x8>)
 8007002:	f000 b872 	b.w	80070ea <__retarget_lock_acquire_recursive>
 8007006:	bf00      	nop
 8007008:	20025e19 	.word	0x20025e19

0800700c <__sfp_lock_release>:
 800700c:	4801      	ldr	r0, [pc, #4]	@ (8007014 <__sfp_lock_release+0x8>)
 800700e:	f000 b86d 	b.w	80070ec <__retarget_lock_release_recursive>
 8007012:	bf00      	nop
 8007014:	20025e19 	.word	0x20025e19

08007018 <__sinit>:
 8007018:	b510      	push	{r4, lr}
 800701a:	4604      	mov	r4, r0
 800701c:	f7ff fff0 	bl	8007000 <__sfp_lock_acquire>
 8007020:	6a23      	ldr	r3, [r4, #32]
 8007022:	b11b      	cbz	r3, 800702c <__sinit+0x14>
 8007024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007028:	f7ff bff0 	b.w	800700c <__sfp_lock_release>
 800702c:	4b04      	ldr	r3, [pc, #16]	@ (8007040 <__sinit+0x28>)
 800702e:	6223      	str	r3, [r4, #32]
 8007030:	4b04      	ldr	r3, [pc, #16]	@ (8007044 <__sinit+0x2c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1f5      	bne.n	8007024 <__sinit+0xc>
 8007038:	f7ff ffc4 	bl	8006fc4 <global_stdio_init.part.0>
 800703c:	e7f2      	b.n	8007024 <__sinit+0xc>
 800703e:	bf00      	nop
 8007040:	08006f85 	.word	0x08006f85
 8007044:	20025e14 	.word	0x20025e14

08007048 <_fwalk_sglue>:
 8007048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800704c:	4607      	mov	r7, r0
 800704e:	4688      	mov	r8, r1
 8007050:	4614      	mov	r4, r2
 8007052:	2600      	movs	r6, #0
 8007054:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007058:	f1b9 0901 	subs.w	r9, r9, #1
 800705c:	d505      	bpl.n	800706a <_fwalk_sglue+0x22>
 800705e:	6824      	ldr	r4, [r4, #0]
 8007060:	2c00      	cmp	r4, #0
 8007062:	d1f7      	bne.n	8007054 <_fwalk_sglue+0xc>
 8007064:	4630      	mov	r0, r6
 8007066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800706a:	89ab      	ldrh	r3, [r5, #12]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d907      	bls.n	8007080 <_fwalk_sglue+0x38>
 8007070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007074:	3301      	adds	r3, #1
 8007076:	d003      	beq.n	8007080 <_fwalk_sglue+0x38>
 8007078:	4629      	mov	r1, r5
 800707a:	4638      	mov	r0, r7
 800707c:	47c0      	blx	r8
 800707e:	4306      	orrs	r6, r0
 8007080:	3568      	adds	r5, #104	@ 0x68
 8007082:	e7e9      	b.n	8007058 <_fwalk_sglue+0x10>

08007084 <memset>:
 8007084:	4402      	add	r2, r0
 8007086:	4603      	mov	r3, r0
 8007088:	4293      	cmp	r3, r2
 800708a:	d100      	bne.n	800708e <memset+0xa>
 800708c:	4770      	bx	lr
 800708e:	f803 1b01 	strb.w	r1, [r3], #1
 8007092:	e7f9      	b.n	8007088 <memset+0x4>

08007094 <__errno>:
 8007094:	4b01      	ldr	r3, [pc, #4]	@ (800709c <__errno+0x8>)
 8007096:	6818      	ldr	r0, [r3, #0]
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	20000038 	.word	0x20000038

080070a0 <__libc_init_array>:
 80070a0:	b570      	push	{r4, r5, r6, lr}
 80070a2:	4d0d      	ldr	r5, [pc, #52]	@ (80070d8 <__libc_init_array+0x38>)
 80070a4:	4c0d      	ldr	r4, [pc, #52]	@ (80070dc <__libc_init_array+0x3c>)
 80070a6:	1b64      	subs	r4, r4, r5
 80070a8:	10a4      	asrs	r4, r4, #2
 80070aa:	2600      	movs	r6, #0
 80070ac:	42a6      	cmp	r6, r4
 80070ae:	d109      	bne.n	80070c4 <__libc_init_array+0x24>
 80070b0:	4d0b      	ldr	r5, [pc, #44]	@ (80070e0 <__libc_init_array+0x40>)
 80070b2:	4c0c      	ldr	r4, [pc, #48]	@ (80070e4 <__libc_init_array+0x44>)
 80070b4:	f000 fd9a 	bl	8007bec <_init>
 80070b8:	1b64      	subs	r4, r4, r5
 80070ba:	10a4      	asrs	r4, r4, #2
 80070bc:	2600      	movs	r6, #0
 80070be:	42a6      	cmp	r6, r4
 80070c0:	d105      	bne.n	80070ce <__libc_init_array+0x2e>
 80070c2:	bd70      	pop	{r4, r5, r6, pc}
 80070c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80070c8:	4798      	blx	r3
 80070ca:	3601      	adds	r6, #1
 80070cc:	e7ee      	b.n	80070ac <__libc_init_array+0xc>
 80070ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80070d2:	4798      	blx	r3
 80070d4:	3601      	adds	r6, #1
 80070d6:	e7f2      	b.n	80070be <__libc_init_array+0x1e>
 80070d8:	0800977c 	.word	0x0800977c
 80070dc:	0800977c 	.word	0x0800977c
 80070e0:	0800977c 	.word	0x0800977c
 80070e4:	08009780 	.word	0x08009780

080070e8 <__retarget_lock_init_recursive>:
 80070e8:	4770      	bx	lr

080070ea <__retarget_lock_acquire_recursive>:
 80070ea:	4770      	bx	lr

080070ec <__retarget_lock_release_recursive>:
 80070ec:	4770      	bx	lr

080070ee <__ssputs_r>:
 80070ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070f2:	688e      	ldr	r6, [r1, #8]
 80070f4:	461f      	mov	r7, r3
 80070f6:	42be      	cmp	r6, r7
 80070f8:	680b      	ldr	r3, [r1, #0]
 80070fa:	4682      	mov	sl, r0
 80070fc:	460c      	mov	r4, r1
 80070fe:	4690      	mov	r8, r2
 8007100:	d82d      	bhi.n	800715e <__ssputs_r+0x70>
 8007102:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007106:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800710a:	d026      	beq.n	800715a <__ssputs_r+0x6c>
 800710c:	6965      	ldr	r5, [r4, #20]
 800710e:	6909      	ldr	r1, [r1, #16]
 8007110:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007114:	eba3 0901 	sub.w	r9, r3, r1
 8007118:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800711c:	1c7b      	adds	r3, r7, #1
 800711e:	444b      	add	r3, r9
 8007120:	106d      	asrs	r5, r5, #1
 8007122:	429d      	cmp	r5, r3
 8007124:	bf38      	it	cc
 8007126:	461d      	movcc	r5, r3
 8007128:	0553      	lsls	r3, r2, #21
 800712a:	d527      	bpl.n	800717c <__ssputs_r+0x8e>
 800712c:	4629      	mov	r1, r5
 800712e:	f000 f957 	bl	80073e0 <_malloc_r>
 8007132:	4606      	mov	r6, r0
 8007134:	b360      	cbz	r0, 8007190 <__ssputs_r+0xa2>
 8007136:	6921      	ldr	r1, [r4, #16]
 8007138:	464a      	mov	r2, r9
 800713a:	f000 fcf7 	bl	8007b2c <memcpy>
 800713e:	89a3      	ldrh	r3, [r4, #12]
 8007140:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007148:	81a3      	strh	r3, [r4, #12]
 800714a:	6126      	str	r6, [r4, #16]
 800714c:	6165      	str	r5, [r4, #20]
 800714e:	444e      	add	r6, r9
 8007150:	eba5 0509 	sub.w	r5, r5, r9
 8007154:	6026      	str	r6, [r4, #0]
 8007156:	60a5      	str	r5, [r4, #8]
 8007158:	463e      	mov	r6, r7
 800715a:	42be      	cmp	r6, r7
 800715c:	d900      	bls.n	8007160 <__ssputs_r+0x72>
 800715e:	463e      	mov	r6, r7
 8007160:	6820      	ldr	r0, [r4, #0]
 8007162:	4632      	mov	r2, r6
 8007164:	4641      	mov	r1, r8
 8007166:	f000 fc70 	bl	8007a4a <memmove>
 800716a:	68a3      	ldr	r3, [r4, #8]
 800716c:	1b9b      	subs	r3, r3, r6
 800716e:	60a3      	str	r3, [r4, #8]
 8007170:	6823      	ldr	r3, [r4, #0]
 8007172:	4433      	add	r3, r6
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	2000      	movs	r0, #0
 8007178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800717c:	462a      	mov	r2, r5
 800717e:	f000 fc36 	bl	80079ee <_realloc_r>
 8007182:	4606      	mov	r6, r0
 8007184:	2800      	cmp	r0, #0
 8007186:	d1e0      	bne.n	800714a <__ssputs_r+0x5c>
 8007188:	6921      	ldr	r1, [r4, #16]
 800718a:	4650      	mov	r0, sl
 800718c:	f000 fcdc 	bl	8007b48 <_free_r>
 8007190:	230c      	movs	r3, #12
 8007192:	f8ca 3000 	str.w	r3, [sl]
 8007196:	89a3      	ldrh	r3, [r4, #12]
 8007198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800719c:	81a3      	strh	r3, [r4, #12]
 800719e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071a2:	e7e9      	b.n	8007178 <__ssputs_r+0x8a>

080071a4 <_svfiprintf_r>:
 80071a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a8:	4698      	mov	r8, r3
 80071aa:	898b      	ldrh	r3, [r1, #12]
 80071ac:	061b      	lsls	r3, r3, #24
 80071ae:	b09d      	sub	sp, #116	@ 0x74
 80071b0:	4607      	mov	r7, r0
 80071b2:	460d      	mov	r5, r1
 80071b4:	4614      	mov	r4, r2
 80071b6:	d510      	bpl.n	80071da <_svfiprintf_r+0x36>
 80071b8:	690b      	ldr	r3, [r1, #16]
 80071ba:	b973      	cbnz	r3, 80071da <_svfiprintf_r+0x36>
 80071bc:	2140      	movs	r1, #64	@ 0x40
 80071be:	f000 f90f 	bl	80073e0 <_malloc_r>
 80071c2:	6028      	str	r0, [r5, #0]
 80071c4:	6128      	str	r0, [r5, #16]
 80071c6:	b930      	cbnz	r0, 80071d6 <_svfiprintf_r+0x32>
 80071c8:	230c      	movs	r3, #12
 80071ca:	603b      	str	r3, [r7, #0]
 80071cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071d0:	b01d      	add	sp, #116	@ 0x74
 80071d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d6:	2340      	movs	r3, #64	@ 0x40
 80071d8:	616b      	str	r3, [r5, #20]
 80071da:	2300      	movs	r3, #0
 80071dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80071de:	2320      	movs	r3, #32
 80071e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80071e8:	2330      	movs	r3, #48	@ 0x30
 80071ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007388 <_svfiprintf_r+0x1e4>
 80071ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071f2:	f04f 0901 	mov.w	r9, #1
 80071f6:	4623      	mov	r3, r4
 80071f8:	469a      	mov	sl, r3
 80071fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071fe:	b10a      	cbz	r2, 8007204 <_svfiprintf_r+0x60>
 8007200:	2a25      	cmp	r2, #37	@ 0x25
 8007202:	d1f9      	bne.n	80071f8 <_svfiprintf_r+0x54>
 8007204:	ebba 0b04 	subs.w	fp, sl, r4
 8007208:	d00b      	beq.n	8007222 <_svfiprintf_r+0x7e>
 800720a:	465b      	mov	r3, fp
 800720c:	4622      	mov	r2, r4
 800720e:	4629      	mov	r1, r5
 8007210:	4638      	mov	r0, r7
 8007212:	f7ff ff6c 	bl	80070ee <__ssputs_r>
 8007216:	3001      	adds	r0, #1
 8007218:	f000 80a7 	beq.w	800736a <_svfiprintf_r+0x1c6>
 800721c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800721e:	445a      	add	r2, fp
 8007220:	9209      	str	r2, [sp, #36]	@ 0x24
 8007222:	f89a 3000 	ldrb.w	r3, [sl]
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 809f 	beq.w	800736a <_svfiprintf_r+0x1c6>
 800722c:	2300      	movs	r3, #0
 800722e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007236:	f10a 0a01 	add.w	sl, sl, #1
 800723a:	9304      	str	r3, [sp, #16]
 800723c:	9307      	str	r3, [sp, #28]
 800723e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007242:	931a      	str	r3, [sp, #104]	@ 0x68
 8007244:	4654      	mov	r4, sl
 8007246:	2205      	movs	r2, #5
 8007248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800724c:	484e      	ldr	r0, [pc, #312]	@ (8007388 <_svfiprintf_r+0x1e4>)
 800724e:	f7f8 ffd7 	bl	8000200 <memchr>
 8007252:	9a04      	ldr	r2, [sp, #16]
 8007254:	b9d8      	cbnz	r0, 800728e <_svfiprintf_r+0xea>
 8007256:	06d0      	lsls	r0, r2, #27
 8007258:	bf44      	itt	mi
 800725a:	2320      	movmi	r3, #32
 800725c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007260:	0711      	lsls	r1, r2, #28
 8007262:	bf44      	itt	mi
 8007264:	232b      	movmi	r3, #43	@ 0x2b
 8007266:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800726a:	f89a 3000 	ldrb.w	r3, [sl]
 800726e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007270:	d015      	beq.n	800729e <_svfiprintf_r+0xfa>
 8007272:	9a07      	ldr	r2, [sp, #28]
 8007274:	4654      	mov	r4, sl
 8007276:	2000      	movs	r0, #0
 8007278:	f04f 0c0a 	mov.w	ip, #10
 800727c:	4621      	mov	r1, r4
 800727e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007282:	3b30      	subs	r3, #48	@ 0x30
 8007284:	2b09      	cmp	r3, #9
 8007286:	d94b      	bls.n	8007320 <_svfiprintf_r+0x17c>
 8007288:	b1b0      	cbz	r0, 80072b8 <_svfiprintf_r+0x114>
 800728a:	9207      	str	r2, [sp, #28]
 800728c:	e014      	b.n	80072b8 <_svfiprintf_r+0x114>
 800728e:	eba0 0308 	sub.w	r3, r0, r8
 8007292:	fa09 f303 	lsl.w	r3, r9, r3
 8007296:	4313      	orrs	r3, r2
 8007298:	9304      	str	r3, [sp, #16]
 800729a:	46a2      	mov	sl, r4
 800729c:	e7d2      	b.n	8007244 <_svfiprintf_r+0xa0>
 800729e:	9b03      	ldr	r3, [sp, #12]
 80072a0:	1d19      	adds	r1, r3, #4
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	9103      	str	r1, [sp, #12]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	bfbb      	ittet	lt
 80072aa:	425b      	neglt	r3, r3
 80072ac:	f042 0202 	orrlt.w	r2, r2, #2
 80072b0:	9307      	strge	r3, [sp, #28]
 80072b2:	9307      	strlt	r3, [sp, #28]
 80072b4:	bfb8      	it	lt
 80072b6:	9204      	strlt	r2, [sp, #16]
 80072b8:	7823      	ldrb	r3, [r4, #0]
 80072ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80072bc:	d10a      	bne.n	80072d4 <_svfiprintf_r+0x130>
 80072be:	7863      	ldrb	r3, [r4, #1]
 80072c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80072c2:	d132      	bne.n	800732a <_svfiprintf_r+0x186>
 80072c4:	9b03      	ldr	r3, [sp, #12]
 80072c6:	1d1a      	adds	r2, r3, #4
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	9203      	str	r2, [sp, #12]
 80072cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072d0:	3402      	adds	r4, #2
 80072d2:	9305      	str	r3, [sp, #20]
 80072d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007398 <_svfiprintf_r+0x1f4>
 80072d8:	7821      	ldrb	r1, [r4, #0]
 80072da:	2203      	movs	r2, #3
 80072dc:	4650      	mov	r0, sl
 80072de:	f7f8 ff8f 	bl	8000200 <memchr>
 80072e2:	b138      	cbz	r0, 80072f4 <_svfiprintf_r+0x150>
 80072e4:	9b04      	ldr	r3, [sp, #16]
 80072e6:	eba0 000a 	sub.w	r0, r0, sl
 80072ea:	2240      	movs	r2, #64	@ 0x40
 80072ec:	4082      	lsls	r2, r0
 80072ee:	4313      	orrs	r3, r2
 80072f0:	3401      	adds	r4, #1
 80072f2:	9304      	str	r3, [sp, #16]
 80072f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072f8:	4824      	ldr	r0, [pc, #144]	@ (800738c <_svfiprintf_r+0x1e8>)
 80072fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072fe:	2206      	movs	r2, #6
 8007300:	f7f8 ff7e 	bl	8000200 <memchr>
 8007304:	2800      	cmp	r0, #0
 8007306:	d036      	beq.n	8007376 <_svfiprintf_r+0x1d2>
 8007308:	4b21      	ldr	r3, [pc, #132]	@ (8007390 <_svfiprintf_r+0x1ec>)
 800730a:	bb1b      	cbnz	r3, 8007354 <_svfiprintf_r+0x1b0>
 800730c:	9b03      	ldr	r3, [sp, #12]
 800730e:	3307      	adds	r3, #7
 8007310:	f023 0307 	bic.w	r3, r3, #7
 8007314:	3308      	adds	r3, #8
 8007316:	9303      	str	r3, [sp, #12]
 8007318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800731a:	4433      	add	r3, r6
 800731c:	9309      	str	r3, [sp, #36]	@ 0x24
 800731e:	e76a      	b.n	80071f6 <_svfiprintf_r+0x52>
 8007320:	fb0c 3202 	mla	r2, ip, r2, r3
 8007324:	460c      	mov	r4, r1
 8007326:	2001      	movs	r0, #1
 8007328:	e7a8      	b.n	800727c <_svfiprintf_r+0xd8>
 800732a:	2300      	movs	r3, #0
 800732c:	3401      	adds	r4, #1
 800732e:	9305      	str	r3, [sp, #20]
 8007330:	4619      	mov	r1, r3
 8007332:	f04f 0c0a 	mov.w	ip, #10
 8007336:	4620      	mov	r0, r4
 8007338:	f810 2b01 	ldrb.w	r2, [r0], #1
 800733c:	3a30      	subs	r2, #48	@ 0x30
 800733e:	2a09      	cmp	r2, #9
 8007340:	d903      	bls.n	800734a <_svfiprintf_r+0x1a6>
 8007342:	2b00      	cmp	r3, #0
 8007344:	d0c6      	beq.n	80072d4 <_svfiprintf_r+0x130>
 8007346:	9105      	str	r1, [sp, #20]
 8007348:	e7c4      	b.n	80072d4 <_svfiprintf_r+0x130>
 800734a:	fb0c 2101 	mla	r1, ip, r1, r2
 800734e:	4604      	mov	r4, r0
 8007350:	2301      	movs	r3, #1
 8007352:	e7f0      	b.n	8007336 <_svfiprintf_r+0x192>
 8007354:	ab03      	add	r3, sp, #12
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	462a      	mov	r2, r5
 800735a:	4b0e      	ldr	r3, [pc, #56]	@ (8007394 <_svfiprintf_r+0x1f0>)
 800735c:	a904      	add	r1, sp, #16
 800735e:	4638      	mov	r0, r7
 8007360:	f3af 8000 	nop.w
 8007364:	1c42      	adds	r2, r0, #1
 8007366:	4606      	mov	r6, r0
 8007368:	d1d6      	bne.n	8007318 <_svfiprintf_r+0x174>
 800736a:	89ab      	ldrh	r3, [r5, #12]
 800736c:	065b      	lsls	r3, r3, #25
 800736e:	f53f af2d 	bmi.w	80071cc <_svfiprintf_r+0x28>
 8007372:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007374:	e72c      	b.n	80071d0 <_svfiprintf_r+0x2c>
 8007376:	ab03      	add	r3, sp, #12
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	462a      	mov	r2, r5
 800737c:	4b05      	ldr	r3, [pc, #20]	@ (8007394 <_svfiprintf_r+0x1f0>)
 800737e:	a904      	add	r1, sp, #16
 8007380:	4638      	mov	r0, r7
 8007382:	f000 f91b 	bl	80075bc <_printf_i>
 8007386:	e7ed      	b.n	8007364 <_svfiprintf_r+0x1c0>
 8007388:	0800973e 	.word	0x0800973e
 800738c:	08009748 	.word	0x08009748
 8007390:	00000000 	.word	0x00000000
 8007394:	080070ef 	.word	0x080070ef
 8007398:	08009744 	.word	0x08009744

0800739c <sbrk_aligned>:
 800739c:	b570      	push	{r4, r5, r6, lr}
 800739e:	4e0f      	ldr	r6, [pc, #60]	@ (80073dc <sbrk_aligned+0x40>)
 80073a0:	460c      	mov	r4, r1
 80073a2:	6831      	ldr	r1, [r6, #0]
 80073a4:	4605      	mov	r5, r0
 80073a6:	b911      	cbnz	r1, 80073ae <sbrk_aligned+0x12>
 80073a8:	f000 fb8e 	bl	8007ac8 <_sbrk_r>
 80073ac:	6030      	str	r0, [r6, #0]
 80073ae:	4621      	mov	r1, r4
 80073b0:	4628      	mov	r0, r5
 80073b2:	f000 fb89 	bl	8007ac8 <_sbrk_r>
 80073b6:	1c43      	adds	r3, r0, #1
 80073b8:	d103      	bne.n	80073c2 <sbrk_aligned+0x26>
 80073ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80073be:	4620      	mov	r0, r4
 80073c0:	bd70      	pop	{r4, r5, r6, pc}
 80073c2:	1cc4      	adds	r4, r0, #3
 80073c4:	f024 0403 	bic.w	r4, r4, #3
 80073c8:	42a0      	cmp	r0, r4
 80073ca:	d0f8      	beq.n	80073be <sbrk_aligned+0x22>
 80073cc:	1a21      	subs	r1, r4, r0
 80073ce:	4628      	mov	r0, r5
 80073d0:	f000 fb7a 	bl	8007ac8 <_sbrk_r>
 80073d4:	3001      	adds	r0, #1
 80073d6:	d1f2      	bne.n	80073be <sbrk_aligned+0x22>
 80073d8:	e7ef      	b.n	80073ba <sbrk_aligned+0x1e>
 80073da:	bf00      	nop
 80073dc:	20025e1c 	.word	0x20025e1c

080073e0 <_malloc_r>:
 80073e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073e4:	1ccd      	adds	r5, r1, #3
 80073e6:	f025 0503 	bic.w	r5, r5, #3
 80073ea:	3508      	adds	r5, #8
 80073ec:	2d0c      	cmp	r5, #12
 80073ee:	bf38      	it	cc
 80073f0:	250c      	movcc	r5, #12
 80073f2:	2d00      	cmp	r5, #0
 80073f4:	4606      	mov	r6, r0
 80073f6:	db01      	blt.n	80073fc <_malloc_r+0x1c>
 80073f8:	42a9      	cmp	r1, r5
 80073fa:	d904      	bls.n	8007406 <_malloc_r+0x26>
 80073fc:	230c      	movs	r3, #12
 80073fe:	6033      	str	r3, [r6, #0]
 8007400:	2000      	movs	r0, #0
 8007402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007406:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074dc <_malloc_r+0xfc>
 800740a:	f000 faa1 	bl	8007950 <__malloc_lock>
 800740e:	f8d8 3000 	ldr.w	r3, [r8]
 8007412:	461c      	mov	r4, r3
 8007414:	bb44      	cbnz	r4, 8007468 <_malloc_r+0x88>
 8007416:	4629      	mov	r1, r5
 8007418:	4630      	mov	r0, r6
 800741a:	f7ff ffbf 	bl	800739c <sbrk_aligned>
 800741e:	1c43      	adds	r3, r0, #1
 8007420:	4604      	mov	r4, r0
 8007422:	d158      	bne.n	80074d6 <_malloc_r+0xf6>
 8007424:	f8d8 4000 	ldr.w	r4, [r8]
 8007428:	4627      	mov	r7, r4
 800742a:	2f00      	cmp	r7, #0
 800742c:	d143      	bne.n	80074b6 <_malloc_r+0xd6>
 800742e:	2c00      	cmp	r4, #0
 8007430:	d04b      	beq.n	80074ca <_malloc_r+0xea>
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	4639      	mov	r1, r7
 8007436:	4630      	mov	r0, r6
 8007438:	eb04 0903 	add.w	r9, r4, r3
 800743c:	f000 fb44 	bl	8007ac8 <_sbrk_r>
 8007440:	4581      	cmp	r9, r0
 8007442:	d142      	bne.n	80074ca <_malloc_r+0xea>
 8007444:	6821      	ldr	r1, [r4, #0]
 8007446:	1a6d      	subs	r5, r5, r1
 8007448:	4629      	mov	r1, r5
 800744a:	4630      	mov	r0, r6
 800744c:	f7ff ffa6 	bl	800739c <sbrk_aligned>
 8007450:	3001      	adds	r0, #1
 8007452:	d03a      	beq.n	80074ca <_malloc_r+0xea>
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	442b      	add	r3, r5
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	f8d8 3000 	ldr.w	r3, [r8]
 800745e:	685a      	ldr	r2, [r3, #4]
 8007460:	bb62      	cbnz	r2, 80074bc <_malloc_r+0xdc>
 8007462:	f8c8 7000 	str.w	r7, [r8]
 8007466:	e00f      	b.n	8007488 <_malloc_r+0xa8>
 8007468:	6822      	ldr	r2, [r4, #0]
 800746a:	1b52      	subs	r2, r2, r5
 800746c:	d420      	bmi.n	80074b0 <_malloc_r+0xd0>
 800746e:	2a0b      	cmp	r2, #11
 8007470:	d917      	bls.n	80074a2 <_malloc_r+0xc2>
 8007472:	1961      	adds	r1, r4, r5
 8007474:	42a3      	cmp	r3, r4
 8007476:	6025      	str	r5, [r4, #0]
 8007478:	bf18      	it	ne
 800747a:	6059      	strne	r1, [r3, #4]
 800747c:	6863      	ldr	r3, [r4, #4]
 800747e:	bf08      	it	eq
 8007480:	f8c8 1000 	streq.w	r1, [r8]
 8007484:	5162      	str	r2, [r4, r5]
 8007486:	604b      	str	r3, [r1, #4]
 8007488:	4630      	mov	r0, r6
 800748a:	f000 fa67 	bl	800795c <__malloc_unlock>
 800748e:	f104 000b 	add.w	r0, r4, #11
 8007492:	1d23      	adds	r3, r4, #4
 8007494:	f020 0007 	bic.w	r0, r0, #7
 8007498:	1ac2      	subs	r2, r0, r3
 800749a:	bf1c      	itt	ne
 800749c:	1a1b      	subne	r3, r3, r0
 800749e:	50a3      	strne	r3, [r4, r2]
 80074a0:	e7af      	b.n	8007402 <_malloc_r+0x22>
 80074a2:	6862      	ldr	r2, [r4, #4]
 80074a4:	42a3      	cmp	r3, r4
 80074a6:	bf0c      	ite	eq
 80074a8:	f8c8 2000 	streq.w	r2, [r8]
 80074ac:	605a      	strne	r2, [r3, #4]
 80074ae:	e7eb      	b.n	8007488 <_malloc_r+0xa8>
 80074b0:	4623      	mov	r3, r4
 80074b2:	6864      	ldr	r4, [r4, #4]
 80074b4:	e7ae      	b.n	8007414 <_malloc_r+0x34>
 80074b6:	463c      	mov	r4, r7
 80074b8:	687f      	ldr	r7, [r7, #4]
 80074ba:	e7b6      	b.n	800742a <_malloc_r+0x4a>
 80074bc:	461a      	mov	r2, r3
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	42a3      	cmp	r3, r4
 80074c2:	d1fb      	bne.n	80074bc <_malloc_r+0xdc>
 80074c4:	2300      	movs	r3, #0
 80074c6:	6053      	str	r3, [r2, #4]
 80074c8:	e7de      	b.n	8007488 <_malloc_r+0xa8>
 80074ca:	230c      	movs	r3, #12
 80074cc:	6033      	str	r3, [r6, #0]
 80074ce:	4630      	mov	r0, r6
 80074d0:	f000 fa44 	bl	800795c <__malloc_unlock>
 80074d4:	e794      	b.n	8007400 <_malloc_r+0x20>
 80074d6:	6005      	str	r5, [r0, #0]
 80074d8:	e7d6      	b.n	8007488 <_malloc_r+0xa8>
 80074da:	bf00      	nop
 80074dc:	20025e20 	.word	0x20025e20

080074e0 <_printf_common>:
 80074e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e4:	4616      	mov	r6, r2
 80074e6:	4698      	mov	r8, r3
 80074e8:	688a      	ldr	r2, [r1, #8]
 80074ea:	690b      	ldr	r3, [r1, #16]
 80074ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074f0:	4293      	cmp	r3, r2
 80074f2:	bfb8      	it	lt
 80074f4:	4613      	movlt	r3, r2
 80074f6:	6033      	str	r3, [r6, #0]
 80074f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80074fc:	4607      	mov	r7, r0
 80074fe:	460c      	mov	r4, r1
 8007500:	b10a      	cbz	r2, 8007506 <_printf_common+0x26>
 8007502:	3301      	adds	r3, #1
 8007504:	6033      	str	r3, [r6, #0]
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	0699      	lsls	r1, r3, #26
 800750a:	bf42      	ittt	mi
 800750c:	6833      	ldrmi	r3, [r6, #0]
 800750e:	3302      	addmi	r3, #2
 8007510:	6033      	strmi	r3, [r6, #0]
 8007512:	6825      	ldr	r5, [r4, #0]
 8007514:	f015 0506 	ands.w	r5, r5, #6
 8007518:	d106      	bne.n	8007528 <_printf_common+0x48>
 800751a:	f104 0a19 	add.w	sl, r4, #25
 800751e:	68e3      	ldr	r3, [r4, #12]
 8007520:	6832      	ldr	r2, [r6, #0]
 8007522:	1a9b      	subs	r3, r3, r2
 8007524:	42ab      	cmp	r3, r5
 8007526:	dc26      	bgt.n	8007576 <_printf_common+0x96>
 8007528:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800752c:	6822      	ldr	r2, [r4, #0]
 800752e:	3b00      	subs	r3, #0
 8007530:	bf18      	it	ne
 8007532:	2301      	movne	r3, #1
 8007534:	0692      	lsls	r2, r2, #26
 8007536:	d42b      	bmi.n	8007590 <_printf_common+0xb0>
 8007538:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800753c:	4641      	mov	r1, r8
 800753e:	4638      	mov	r0, r7
 8007540:	47c8      	blx	r9
 8007542:	3001      	adds	r0, #1
 8007544:	d01e      	beq.n	8007584 <_printf_common+0xa4>
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	6922      	ldr	r2, [r4, #16]
 800754a:	f003 0306 	and.w	r3, r3, #6
 800754e:	2b04      	cmp	r3, #4
 8007550:	bf02      	ittt	eq
 8007552:	68e5      	ldreq	r5, [r4, #12]
 8007554:	6833      	ldreq	r3, [r6, #0]
 8007556:	1aed      	subeq	r5, r5, r3
 8007558:	68a3      	ldr	r3, [r4, #8]
 800755a:	bf0c      	ite	eq
 800755c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007560:	2500      	movne	r5, #0
 8007562:	4293      	cmp	r3, r2
 8007564:	bfc4      	itt	gt
 8007566:	1a9b      	subgt	r3, r3, r2
 8007568:	18ed      	addgt	r5, r5, r3
 800756a:	2600      	movs	r6, #0
 800756c:	341a      	adds	r4, #26
 800756e:	42b5      	cmp	r5, r6
 8007570:	d11a      	bne.n	80075a8 <_printf_common+0xc8>
 8007572:	2000      	movs	r0, #0
 8007574:	e008      	b.n	8007588 <_printf_common+0xa8>
 8007576:	2301      	movs	r3, #1
 8007578:	4652      	mov	r2, sl
 800757a:	4641      	mov	r1, r8
 800757c:	4638      	mov	r0, r7
 800757e:	47c8      	blx	r9
 8007580:	3001      	adds	r0, #1
 8007582:	d103      	bne.n	800758c <_printf_common+0xac>
 8007584:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800758c:	3501      	adds	r5, #1
 800758e:	e7c6      	b.n	800751e <_printf_common+0x3e>
 8007590:	18e1      	adds	r1, r4, r3
 8007592:	1c5a      	adds	r2, r3, #1
 8007594:	2030      	movs	r0, #48	@ 0x30
 8007596:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800759a:	4422      	add	r2, r4
 800759c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075a4:	3302      	adds	r3, #2
 80075a6:	e7c7      	b.n	8007538 <_printf_common+0x58>
 80075a8:	2301      	movs	r3, #1
 80075aa:	4622      	mov	r2, r4
 80075ac:	4641      	mov	r1, r8
 80075ae:	4638      	mov	r0, r7
 80075b0:	47c8      	blx	r9
 80075b2:	3001      	adds	r0, #1
 80075b4:	d0e6      	beq.n	8007584 <_printf_common+0xa4>
 80075b6:	3601      	adds	r6, #1
 80075b8:	e7d9      	b.n	800756e <_printf_common+0x8e>
	...

080075bc <_printf_i>:
 80075bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075c0:	7e0f      	ldrb	r7, [r1, #24]
 80075c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075c4:	2f78      	cmp	r7, #120	@ 0x78
 80075c6:	4691      	mov	r9, r2
 80075c8:	4680      	mov	r8, r0
 80075ca:	460c      	mov	r4, r1
 80075cc:	469a      	mov	sl, r3
 80075ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075d2:	d807      	bhi.n	80075e4 <_printf_i+0x28>
 80075d4:	2f62      	cmp	r7, #98	@ 0x62
 80075d6:	d80a      	bhi.n	80075ee <_printf_i+0x32>
 80075d8:	2f00      	cmp	r7, #0
 80075da:	f000 80d1 	beq.w	8007780 <_printf_i+0x1c4>
 80075de:	2f58      	cmp	r7, #88	@ 0x58
 80075e0:	f000 80b8 	beq.w	8007754 <_printf_i+0x198>
 80075e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80075ec:	e03a      	b.n	8007664 <_printf_i+0xa8>
 80075ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075f2:	2b15      	cmp	r3, #21
 80075f4:	d8f6      	bhi.n	80075e4 <_printf_i+0x28>
 80075f6:	a101      	add	r1, pc, #4	@ (adr r1, 80075fc <_printf_i+0x40>)
 80075f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075fc:	08007655 	.word	0x08007655
 8007600:	08007669 	.word	0x08007669
 8007604:	080075e5 	.word	0x080075e5
 8007608:	080075e5 	.word	0x080075e5
 800760c:	080075e5 	.word	0x080075e5
 8007610:	080075e5 	.word	0x080075e5
 8007614:	08007669 	.word	0x08007669
 8007618:	080075e5 	.word	0x080075e5
 800761c:	080075e5 	.word	0x080075e5
 8007620:	080075e5 	.word	0x080075e5
 8007624:	080075e5 	.word	0x080075e5
 8007628:	08007767 	.word	0x08007767
 800762c:	08007693 	.word	0x08007693
 8007630:	08007721 	.word	0x08007721
 8007634:	080075e5 	.word	0x080075e5
 8007638:	080075e5 	.word	0x080075e5
 800763c:	08007789 	.word	0x08007789
 8007640:	080075e5 	.word	0x080075e5
 8007644:	08007693 	.word	0x08007693
 8007648:	080075e5 	.word	0x080075e5
 800764c:	080075e5 	.word	0x080075e5
 8007650:	08007729 	.word	0x08007729
 8007654:	6833      	ldr	r3, [r6, #0]
 8007656:	1d1a      	adds	r2, r3, #4
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	6032      	str	r2, [r6, #0]
 800765c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007660:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007664:	2301      	movs	r3, #1
 8007666:	e09c      	b.n	80077a2 <_printf_i+0x1e6>
 8007668:	6833      	ldr	r3, [r6, #0]
 800766a:	6820      	ldr	r0, [r4, #0]
 800766c:	1d19      	adds	r1, r3, #4
 800766e:	6031      	str	r1, [r6, #0]
 8007670:	0606      	lsls	r6, r0, #24
 8007672:	d501      	bpl.n	8007678 <_printf_i+0xbc>
 8007674:	681d      	ldr	r5, [r3, #0]
 8007676:	e003      	b.n	8007680 <_printf_i+0xc4>
 8007678:	0645      	lsls	r5, r0, #25
 800767a:	d5fb      	bpl.n	8007674 <_printf_i+0xb8>
 800767c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007680:	2d00      	cmp	r5, #0
 8007682:	da03      	bge.n	800768c <_printf_i+0xd0>
 8007684:	232d      	movs	r3, #45	@ 0x2d
 8007686:	426d      	negs	r5, r5
 8007688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800768c:	4858      	ldr	r0, [pc, #352]	@ (80077f0 <_printf_i+0x234>)
 800768e:	230a      	movs	r3, #10
 8007690:	e011      	b.n	80076b6 <_printf_i+0xfa>
 8007692:	6821      	ldr	r1, [r4, #0]
 8007694:	6833      	ldr	r3, [r6, #0]
 8007696:	0608      	lsls	r0, r1, #24
 8007698:	f853 5b04 	ldr.w	r5, [r3], #4
 800769c:	d402      	bmi.n	80076a4 <_printf_i+0xe8>
 800769e:	0649      	lsls	r1, r1, #25
 80076a0:	bf48      	it	mi
 80076a2:	b2ad      	uxthmi	r5, r5
 80076a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80076a6:	4852      	ldr	r0, [pc, #328]	@ (80077f0 <_printf_i+0x234>)
 80076a8:	6033      	str	r3, [r6, #0]
 80076aa:	bf14      	ite	ne
 80076ac:	230a      	movne	r3, #10
 80076ae:	2308      	moveq	r3, #8
 80076b0:	2100      	movs	r1, #0
 80076b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076b6:	6866      	ldr	r6, [r4, #4]
 80076b8:	60a6      	str	r6, [r4, #8]
 80076ba:	2e00      	cmp	r6, #0
 80076bc:	db05      	blt.n	80076ca <_printf_i+0x10e>
 80076be:	6821      	ldr	r1, [r4, #0]
 80076c0:	432e      	orrs	r6, r5
 80076c2:	f021 0104 	bic.w	r1, r1, #4
 80076c6:	6021      	str	r1, [r4, #0]
 80076c8:	d04b      	beq.n	8007762 <_printf_i+0x1a6>
 80076ca:	4616      	mov	r6, r2
 80076cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80076d0:	fb03 5711 	mls	r7, r3, r1, r5
 80076d4:	5dc7      	ldrb	r7, [r0, r7]
 80076d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076da:	462f      	mov	r7, r5
 80076dc:	42bb      	cmp	r3, r7
 80076de:	460d      	mov	r5, r1
 80076e0:	d9f4      	bls.n	80076cc <_printf_i+0x110>
 80076e2:	2b08      	cmp	r3, #8
 80076e4:	d10b      	bne.n	80076fe <_printf_i+0x142>
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	07df      	lsls	r7, r3, #31
 80076ea:	d508      	bpl.n	80076fe <_printf_i+0x142>
 80076ec:	6923      	ldr	r3, [r4, #16]
 80076ee:	6861      	ldr	r1, [r4, #4]
 80076f0:	4299      	cmp	r1, r3
 80076f2:	bfde      	ittt	le
 80076f4:	2330      	movle	r3, #48	@ 0x30
 80076f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076fa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80076fe:	1b92      	subs	r2, r2, r6
 8007700:	6122      	str	r2, [r4, #16]
 8007702:	f8cd a000 	str.w	sl, [sp]
 8007706:	464b      	mov	r3, r9
 8007708:	aa03      	add	r2, sp, #12
 800770a:	4621      	mov	r1, r4
 800770c:	4640      	mov	r0, r8
 800770e:	f7ff fee7 	bl	80074e0 <_printf_common>
 8007712:	3001      	adds	r0, #1
 8007714:	d14a      	bne.n	80077ac <_printf_i+0x1f0>
 8007716:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800771a:	b004      	add	sp, #16
 800771c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	f043 0320 	orr.w	r3, r3, #32
 8007726:	6023      	str	r3, [r4, #0]
 8007728:	4832      	ldr	r0, [pc, #200]	@ (80077f4 <_printf_i+0x238>)
 800772a:	2778      	movs	r7, #120	@ 0x78
 800772c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	6831      	ldr	r1, [r6, #0]
 8007734:	061f      	lsls	r7, r3, #24
 8007736:	f851 5b04 	ldr.w	r5, [r1], #4
 800773a:	d402      	bmi.n	8007742 <_printf_i+0x186>
 800773c:	065f      	lsls	r7, r3, #25
 800773e:	bf48      	it	mi
 8007740:	b2ad      	uxthmi	r5, r5
 8007742:	6031      	str	r1, [r6, #0]
 8007744:	07d9      	lsls	r1, r3, #31
 8007746:	bf44      	itt	mi
 8007748:	f043 0320 	orrmi.w	r3, r3, #32
 800774c:	6023      	strmi	r3, [r4, #0]
 800774e:	b11d      	cbz	r5, 8007758 <_printf_i+0x19c>
 8007750:	2310      	movs	r3, #16
 8007752:	e7ad      	b.n	80076b0 <_printf_i+0xf4>
 8007754:	4826      	ldr	r0, [pc, #152]	@ (80077f0 <_printf_i+0x234>)
 8007756:	e7e9      	b.n	800772c <_printf_i+0x170>
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	f023 0320 	bic.w	r3, r3, #32
 800775e:	6023      	str	r3, [r4, #0]
 8007760:	e7f6      	b.n	8007750 <_printf_i+0x194>
 8007762:	4616      	mov	r6, r2
 8007764:	e7bd      	b.n	80076e2 <_printf_i+0x126>
 8007766:	6833      	ldr	r3, [r6, #0]
 8007768:	6825      	ldr	r5, [r4, #0]
 800776a:	6961      	ldr	r1, [r4, #20]
 800776c:	1d18      	adds	r0, r3, #4
 800776e:	6030      	str	r0, [r6, #0]
 8007770:	062e      	lsls	r6, r5, #24
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	d501      	bpl.n	800777a <_printf_i+0x1be>
 8007776:	6019      	str	r1, [r3, #0]
 8007778:	e002      	b.n	8007780 <_printf_i+0x1c4>
 800777a:	0668      	lsls	r0, r5, #25
 800777c:	d5fb      	bpl.n	8007776 <_printf_i+0x1ba>
 800777e:	8019      	strh	r1, [r3, #0]
 8007780:	2300      	movs	r3, #0
 8007782:	6123      	str	r3, [r4, #16]
 8007784:	4616      	mov	r6, r2
 8007786:	e7bc      	b.n	8007702 <_printf_i+0x146>
 8007788:	6833      	ldr	r3, [r6, #0]
 800778a:	1d1a      	adds	r2, r3, #4
 800778c:	6032      	str	r2, [r6, #0]
 800778e:	681e      	ldr	r6, [r3, #0]
 8007790:	6862      	ldr	r2, [r4, #4]
 8007792:	2100      	movs	r1, #0
 8007794:	4630      	mov	r0, r6
 8007796:	f7f8 fd33 	bl	8000200 <memchr>
 800779a:	b108      	cbz	r0, 80077a0 <_printf_i+0x1e4>
 800779c:	1b80      	subs	r0, r0, r6
 800779e:	6060      	str	r0, [r4, #4]
 80077a0:	6863      	ldr	r3, [r4, #4]
 80077a2:	6123      	str	r3, [r4, #16]
 80077a4:	2300      	movs	r3, #0
 80077a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077aa:	e7aa      	b.n	8007702 <_printf_i+0x146>
 80077ac:	6923      	ldr	r3, [r4, #16]
 80077ae:	4632      	mov	r2, r6
 80077b0:	4649      	mov	r1, r9
 80077b2:	4640      	mov	r0, r8
 80077b4:	47d0      	blx	sl
 80077b6:	3001      	adds	r0, #1
 80077b8:	d0ad      	beq.n	8007716 <_printf_i+0x15a>
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	079b      	lsls	r3, r3, #30
 80077be:	d413      	bmi.n	80077e8 <_printf_i+0x22c>
 80077c0:	68e0      	ldr	r0, [r4, #12]
 80077c2:	9b03      	ldr	r3, [sp, #12]
 80077c4:	4298      	cmp	r0, r3
 80077c6:	bfb8      	it	lt
 80077c8:	4618      	movlt	r0, r3
 80077ca:	e7a6      	b.n	800771a <_printf_i+0x15e>
 80077cc:	2301      	movs	r3, #1
 80077ce:	4632      	mov	r2, r6
 80077d0:	4649      	mov	r1, r9
 80077d2:	4640      	mov	r0, r8
 80077d4:	47d0      	blx	sl
 80077d6:	3001      	adds	r0, #1
 80077d8:	d09d      	beq.n	8007716 <_printf_i+0x15a>
 80077da:	3501      	adds	r5, #1
 80077dc:	68e3      	ldr	r3, [r4, #12]
 80077de:	9903      	ldr	r1, [sp, #12]
 80077e0:	1a5b      	subs	r3, r3, r1
 80077e2:	42ab      	cmp	r3, r5
 80077e4:	dcf2      	bgt.n	80077cc <_printf_i+0x210>
 80077e6:	e7eb      	b.n	80077c0 <_printf_i+0x204>
 80077e8:	2500      	movs	r5, #0
 80077ea:	f104 0619 	add.w	r6, r4, #25
 80077ee:	e7f5      	b.n	80077dc <_printf_i+0x220>
 80077f0:	0800974f 	.word	0x0800974f
 80077f4:	08009760 	.word	0x08009760

080077f8 <__sflush_r>:
 80077f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007800:	0716      	lsls	r6, r2, #28
 8007802:	4605      	mov	r5, r0
 8007804:	460c      	mov	r4, r1
 8007806:	d454      	bmi.n	80078b2 <__sflush_r+0xba>
 8007808:	684b      	ldr	r3, [r1, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	dc02      	bgt.n	8007814 <__sflush_r+0x1c>
 800780e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007810:	2b00      	cmp	r3, #0
 8007812:	dd48      	ble.n	80078a6 <__sflush_r+0xae>
 8007814:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007816:	2e00      	cmp	r6, #0
 8007818:	d045      	beq.n	80078a6 <__sflush_r+0xae>
 800781a:	2300      	movs	r3, #0
 800781c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007820:	682f      	ldr	r7, [r5, #0]
 8007822:	6a21      	ldr	r1, [r4, #32]
 8007824:	602b      	str	r3, [r5, #0]
 8007826:	d030      	beq.n	800788a <__sflush_r+0x92>
 8007828:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800782a:	89a3      	ldrh	r3, [r4, #12]
 800782c:	0759      	lsls	r1, r3, #29
 800782e:	d505      	bpl.n	800783c <__sflush_r+0x44>
 8007830:	6863      	ldr	r3, [r4, #4]
 8007832:	1ad2      	subs	r2, r2, r3
 8007834:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007836:	b10b      	cbz	r3, 800783c <__sflush_r+0x44>
 8007838:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800783a:	1ad2      	subs	r2, r2, r3
 800783c:	2300      	movs	r3, #0
 800783e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007840:	6a21      	ldr	r1, [r4, #32]
 8007842:	4628      	mov	r0, r5
 8007844:	47b0      	blx	r6
 8007846:	1c43      	adds	r3, r0, #1
 8007848:	89a3      	ldrh	r3, [r4, #12]
 800784a:	d106      	bne.n	800785a <__sflush_r+0x62>
 800784c:	6829      	ldr	r1, [r5, #0]
 800784e:	291d      	cmp	r1, #29
 8007850:	d82b      	bhi.n	80078aa <__sflush_r+0xb2>
 8007852:	4a2a      	ldr	r2, [pc, #168]	@ (80078fc <__sflush_r+0x104>)
 8007854:	40ca      	lsrs	r2, r1
 8007856:	07d6      	lsls	r6, r2, #31
 8007858:	d527      	bpl.n	80078aa <__sflush_r+0xb2>
 800785a:	2200      	movs	r2, #0
 800785c:	6062      	str	r2, [r4, #4]
 800785e:	04d9      	lsls	r1, r3, #19
 8007860:	6922      	ldr	r2, [r4, #16]
 8007862:	6022      	str	r2, [r4, #0]
 8007864:	d504      	bpl.n	8007870 <__sflush_r+0x78>
 8007866:	1c42      	adds	r2, r0, #1
 8007868:	d101      	bne.n	800786e <__sflush_r+0x76>
 800786a:	682b      	ldr	r3, [r5, #0]
 800786c:	b903      	cbnz	r3, 8007870 <__sflush_r+0x78>
 800786e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007870:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007872:	602f      	str	r7, [r5, #0]
 8007874:	b1b9      	cbz	r1, 80078a6 <__sflush_r+0xae>
 8007876:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800787a:	4299      	cmp	r1, r3
 800787c:	d002      	beq.n	8007884 <__sflush_r+0x8c>
 800787e:	4628      	mov	r0, r5
 8007880:	f000 f962 	bl	8007b48 <_free_r>
 8007884:	2300      	movs	r3, #0
 8007886:	6363      	str	r3, [r4, #52]	@ 0x34
 8007888:	e00d      	b.n	80078a6 <__sflush_r+0xae>
 800788a:	2301      	movs	r3, #1
 800788c:	4628      	mov	r0, r5
 800788e:	47b0      	blx	r6
 8007890:	4602      	mov	r2, r0
 8007892:	1c50      	adds	r0, r2, #1
 8007894:	d1c9      	bne.n	800782a <__sflush_r+0x32>
 8007896:	682b      	ldr	r3, [r5, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d0c6      	beq.n	800782a <__sflush_r+0x32>
 800789c:	2b1d      	cmp	r3, #29
 800789e:	d001      	beq.n	80078a4 <__sflush_r+0xac>
 80078a0:	2b16      	cmp	r3, #22
 80078a2:	d11e      	bne.n	80078e2 <__sflush_r+0xea>
 80078a4:	602f      	str	r7, [r5, #0]
 80078a6:	2000      	movs	r0, #0
 80078a8:	e022      	b.n	80078f0 <__sflush_r+0xf8>
 80078aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078ae:	b21b      	sxth	r3, r3
 80078b0:	e01b      	b.n	80078ea <__sflush_r+0xf2>
 80078b2:	690f      	ldr	r7, [r1, #16]
 80078b4:	2f00      	cmp	r7, #0
 80078b6:	d0f6      	beq.n	80078a6 <__sflush_r+0xae>
 80078b8:	0793      	lsls	r3, r2, #30
 80078ba:	680e      	ldr	r6, [r1, #0]
 80078bc:	bf08      	it	eq
 80078be:	694b      	ldreq	r3, [r1, #20]
 80078c0:	600f      	str	r7, [r1, #0]
 80078c2:	bf18      	it	ne
 80078c4:	2300      	movne	r3, #0
 80078c6:	eba6 0807 	sub.w	r8, r6, r7
 80078ca:	608b      	str	r3, [r1, #8]
 80078cc:	f1b8 0f00 	cmp.w	r8, #0
 80078d0:	dde9      	ble.n	80078a6 <__sflush_r+0xae>
 80078d2:	6a21      	ldr	r1, [r4, #32]
 80078d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80078d6:	4643      	mov	r3, r8
 80078d8:	463a      	mov	r2, r7
 80078da:	4628      	mov	r0, r5
 80078dc:	47b0      	blx	r6
 80078de:	2800      	cmp	r0, #0
 80078e0:	dc08      	bgt.n	80078f4 <__sflush_r+0xfc>
 80078e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078ea:	81a3      	strh	r3, [r4, #12]
 80078ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078f4:	4407      	add	r7, r0
 80078f6:	eba8 0800 	sub.w	r8, r8, r0
 80078fa:	e7e7      	b.n	80078cc <__sflush_r+0xd4>
 80078fc:	20400001 	.word	0x20400001

08007900 <_fflush_r>:
 8007900:	b538      	push	{r3, r4, r5, lr}
 8007902:	690b      	ldr	r3, [r1, #16]
 8007904:	4605      	mov	r5, r0
 8007906:	460c      	mov	r4, r1
 8007908:	b913      	cbnz	r3, 8007910 <_fflush_r+0x10>
 800790a:	2500      	movs	r5, #0
 800790c:	4628      	mov	r0, r5
 800790e:	bd38      	pop	{r3, r4, r5, pc}
 8007910:	b118      	cbz	r0, 800791a <_fflush_r+0x1a>
 8007912:	6a03      	ldr	r3, [r0, #32]
 8007914:	b90b      	cbnz	r3, 800791a <_fflush_r+0x1a>
 8007916:	f7ff fb7f 	bl	8007018 <__sinit>
 800791a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d0f3      	beq.n	800790a <_fflush_r+0xa>
 8007922:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007924:	07d0      	lsls	r0, r2, #31
 8007926:	d404      	bmi.n	8007932 <_fflush_r+0x32>
 8007928:	0599      	lsls	r1, r3, #22
 800792a:	d402      	bmi.n	8007932 <_fflush_r+0x32>
 800792c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800792e:	f7ff fbdc 	bl	80070ea <__retarget_lock_acquire_recursive>
 8007932:	4628      	mov	r0, r5
 8007934:	4621      	mov	r1, r4
 8007936:	f7ff ff5f 	bl	80077f8 <__sflush_r>
 800793a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800793c:	07da      	lsls	r2, r3, #31
 800793e:	4605      	mov	r5, r0
 8007940:	d4e4      	bmi.n	800790c <_fflush_r+0xc>
 8007942:	89a3      	ldrh	r3, [r4, #12]
 8007944:	059b      	lsls	r3, r3, #22
 8007946:	d4e1      	bmi.n	800790c <_fflush_r+0xc>
 8007948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800794a:	f7ff fbcf 	bl	80070ec <__retarget_lock_release_recursive>
 800794e:	e7dd      	b.n	800790c <_fflush_r+0xc>

08007950 <__malloc_lock>:
 8007950:	4801      	ldr	r0, [pc, #4]	@ (8007958 <__malloc_lock+0x8>)
 8007952:	f7ff bbca 	b.w	80070ea <__retarget_lock_acquire_recursive>
 8007956:	bf00      	nop
 8007958:	20025e18 	.word	0x20025e18

0800795c <__malloc_unlock>:
 800795c:	4801      	ldr	r0, [pc, #4]	@ (8007964 <__malloc_unlock+0x8>)
 800795e:	f7ff bbc5 	b.w	80070ec <__retarget_lock_release_recursive>
 8007962:	bf00      	nop
 8007964:	20025e18 	.word	0x20025e18

08007968 <__sread>:
 8007968:	b510      	push	{r4, lr}
 800796a:	460c      	mov	r4, r1
 800796c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007970:	f000 f898 	bl	8007aa4 <_read_r>
 8007974:	2800      	cmp	r0, #0
 8007976:	bfab      	itete	ge
 8007978:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800797a:	89a3      	ldrhlt	r3, [r4, #12]
 800797c:	181b      	addge	r3, r3, r0
 800797e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007982:	bfac      	ite	ge
 8007984:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007986:	81a3      	strhlt	r3, [r4, #12]
 8007988:	bd10      	pop	{r4, pc}

0800798a <__swrite>:
 800798a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800798e:	461f      	mov	r7, r3
 8007990:	898b      	ldrh	r3, [r1, #12]
 8007992:	05db      	lsls	r3, r3, #23
 8007994:	4605      	mov	r5, r0
 8007996:	460c      	mov	r4, r1
 8007998:	4616      	mov	r6, r2
 800799a:	d505      	bpl.n	80079a8 <__swrite+0x1e>
 800799c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a0:	2302      	movs	r3, #2
 80079a2:	2200      	movs	r2, #0
 80079a4:	f000 f86c 	bl	8007a80 <_lseek_r>
 80079a8:	89a3      	ldrh	r3, [r4, #12]
 80079aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079b2:	81a3      	strh	r3, [r4, #12]
 80079b4:	4632      	mov	r2, r6
 80079b6:	463b      	mov	r3, r7
 80079b8:	4628      	mov	r0, r5
 80079ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079be:	f000 b893 	b.w	8007ae8 <_write_r>

080079c2 <__sseek>:
 80079c2:	b510      	push	{r4, lr}
 80079c4:	460c      	mov	r4, r1
 80079c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ca:	f000 f859 	bl	8007a80 <_lseek_r>
 80079ce:	1c43      	adds	r3, r0, #1
 80079d0:	89a3      	ldrh	r3, [r4, #12]
 80079d2:	bf15      	itete	ne
 80079d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80079d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80079da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079de:	81a3      	strheq	r3, [r4, #12]
 80079e0:	bf18      	it	ne
 80079e2:	81a3      	strhne	r3, [r4, #12]
 80079e4:	bd10      	pop	{r4, pc}

080079e6 <__sclose>:
 80079e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ea:	f000 b88f 	b.w	8007b0c <_close_r>

080079ee <_realloc_r>:
 80079ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079f2:	4607      	mov	r7, r0
 80079f4:	4614      	mov	r4, r2
 80079f6:	460d      	mov	r5, r1
 80079f8:	b921      	cbnz	r1, 8007a04 <_realloc_r+0x16>
 80079fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079fe:	4611      	mov	r1, r2
 8007a00:	f7ff bcee 	b.w	80073e0 <_malloc_r>
 8007a04:	b92a      	cbnz	r2, 8007a12 <_realloc_r+0x24>
 8007a06:	f000 f89f 	bl	8007b48 <_free_r>
 8007a0a:	4625      	mov	r5, r4
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a12:	f000 f8e3 	bl	8007bdc <_malloc_usable_size_r>
 8007a16:	4284      	cmp	r4, r0
 8007a18:	4606      	mov	r6, r0
 8007a1a:	d802      	bhi.n	8007a22 <_realloc_r+0x34>
 8007a1c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007a20:	d8f4      	bhi.n	8007a0c <_realloc_r+0x1e>
 8007a22:	4621      	mov	r1, r4
 8007a24:	4638      	mov	r0, r7
 8007a26:	f7ff fcdb 	bl	80073e0 <_malloc_r>
 8007a2a:	4680      	mov	r8, r0
 8007a2c:	b908      	cbnz	r0, 8007a32 <_realloc_r+0x44>
 8007a2e:	4645      	mov	r5, r8
 8007a30:	e7ec      	b.n	8007a0c <_realloc_r+0x1e>
 8007a32:	42b4      	cmp	r4, r6
 8007a34:	4622      	mov	r2, r4
 8007a36:	4629      	mov	r1, r5
 8007a38:	bf28      	it	cs
 8007a3a:	4632      	movcs	r2, r6
 8007a3c:	f000 f876 	bl	8007b2c <memcpy>
 8007a40:	4629      	mov	r1, r5
 8007a42:	4638      	mov	r0, r7
 8007a44:	f000 f880 	bl	8007b48 <_free_r>
 8007a48:	e7f1      	b.n	8007a2e <_realloc_r+0x40>

08007a4a <memmove>:
 8007a4a:	4288      	cmp	r0, r1
 8007a4c:	b510      	push	{r4, lr}
 8007a4e:	eb01 0402 	add.w	r4, r1, r2
 8007a52:	d902      	bls.n	8007a5a <memmove+0x10>
 8007a54:	4284      	cmp	r4, r0
 8007a56:	4623      	mov	r3, r4
 8007a58:	d807      	bhi.n	8007a6a <memmove+0x20>
 8007a5a:	1e43      	subs	r3, r0, #1
 8007a5c:	42a1      	cmp	r1, r4
 8007a5e:	d008      	beq.n	8007a72 <memmove+0x28>
 8007a60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a64:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a68:	e7f8      	b.n	8007a5c <memmove+0x12>
 8007a6a:	4402      	add	r2, r0
 8007a6c:	4601      	mov	r1, r0
 8007a6e:	428a      	cmp	r2, r1
 8007a70:	d100      	bne.n	8007a74 <memmove+0x2a>
 8007a72:	bd10      	pop	{r4, pc}
 8007a74:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a78:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a7c:	e7f7      	b.n	8007a6e <memmove+0x24>
	...

08007a80 <_lseek_r>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	4d07      	ldr	r5, [pc, #28]	@ (8007aa0 <_lseek_r+0x20>)
 8007a84:	4604      	mov	r4, r0
 8007a86:	4608      	mov	r0, r1
 8007a88:	4611      	mov	r1, r2
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	602a      	str	r2, [r5, #0]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	f7ff f823 	bl	8006ada <_lseek>
 8007a94:	1c43      	adds	r3, r0, #1
 8007a96:	d102      	bne.n	8007a9e <_lseek_r+0x1e>
 8007a98:	682b      	ldr	r3, [r5, #0]
 8007a9a:	b103      	cbz	r3, 8007a9e <_lseek_r+0x1e>
 8007a9c:	6023      	str	r3, [r4, #0]
 8007a9e:	bd38      	pop	{r3, r4, r5, pc}
 8007aa0:	20025e24 	.word	0x20025e24

08007aa4 <_read_r>:
 8007aa4:	b538      	push	{r3, r4, r5, lr}
 8007aa6:	4d07      	ldr	r5, [pc, #28]	@ (8007ac4 <_read_r+0x20>)
 8007aa8:	4604      	mov	r4, r0
 8007aaa:	4608      	mov	r0, r1
 8007aac:	4611      	mov	r1, r2
 8007aae:	2200      	movs	r2, #0
 8007ab0:	602a      	str	r2, [r5, #0]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	f7fe ffbb 	bl	8006a2e <_read>
 8007ab8:	1c43      	adds	r3, r0, #1
 8007aba:	d102      	bne.n	8007ac2 <_read_r+0x1e>
 8007abc:	682b      	ldr	r3, [r5, #0]
 8007abe:	b103      	cbz	r3, 8007ac2 <_read_r+0x1e>
 8007ac0:	6023      	str	r3, [r4, #0]
 8007ac2:	bd38      	pop	{r3, r4, r5, pc}
 8007ac4:	20025e24 	.word	0x20025e24

08007ac8 <_sbrk_r>:
 8007ac8:	b538      	push	{r3, r4, r5, lr}
 8007aca:	4d06      	ldr	r5, [pc, #24]	@ (8007ae4 <_sbrk_r+0x1c>)
 8007acc:	2300      	movs	r3, #0
 8007ace:	4604      	mov	r4, r0
 8007ad0:	4608      	mov	r0, r1
 8007ad2:	602b      	str	r3, [r5, #0]
 8007ad4:	f7fb faec 	bl	80030b0 <_sbrk>
 8007ad8:	1c43      	adds	r3, r0, #1
 8007ada:	d102      	bne.n	8007ae2 <_sbrk_r+0x1a>
 8007adc:	682b      	ldr	r3, [r5, #0]
 8007ade:	b103      	cbz	r3, 8007ae2 <_sbrk_r+0x1a>
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	bd38      	pop	{r3, r4, r5, pc}
 8007ae4:	20025e24 	.word	0x20025e24

08007ae8 <_write_r>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	4d07      	ldr	r5, [pc, #28]	@ (8007b08 <_write_r+0x20>)
 8007aec:	4604      	mov	r4, r0
 8007aee:	4608      	mov	r0, r1
 8007af0:	4611      	mov	r1, r2
 8007af2:	2200      	movs	r2, #0
 8007af4:	602a      	str	r2, [r5, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	f7ff f801 	bl	8006afe <_write>
 8007afc:	1c43      	adds	r3, r0, #1
 8007afe:	d102      	bne.n	8007b06 <_write_r+0x1e>
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	b103      	cbz	r3, 8007b06 <_write_r+0x1e>
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	bd38      	pop	{r3, r4, r5, pc}
 8007b08:	20025e24 	.word	0x20025e24

08007b0c <_close_r>:
 8007b0c:	b538      	push	{r3, r4, r5, lr}
 8007b0e:	4d06      	ldr	r5, [pc, #24]	@ (8007b28 <_close_r+0x1c>)
 8007b10:	2300      	movs	r3, #0
 8007b12:	4604      	mov	r4, r0
 8007b14:	4608      	mov	r0, r1
 8007b16:	602b      	str	r3, [r5, #0]
 8007b18:	f7ff f81e 	bl	8006b58 <_close>
 8007b1c:	1c43      	adds	r3, r0, #1
 8007b1e:	d102      	bne.n	8007b26 <_close_r+0x1a>
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	b103      	cbz	r3, 8007b26 <_close_r+0x1a>
 8007b24:	6023      	str	r3, [r4, #0]
 8007b26:	bd38      	pop	{r3, r4, r5, pc}
 8007b28:	20025e24 	.word	0x20025e24

08007b2c <memcpy>:
 8007b2c:	440a      	add	r2, r1
 8007b2e:	4291      	cmp	r1, r2
 8007b30:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007b34:	d100      	bne.n	8007b38 <memcpy+0xc>
 8007b36:	4770      	bx	lr
 8007b38:	b510      	push	{r4, lr}
 8007b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b42:	4291      	cmp	r1, r2
 8007b44:	d1f9      	bne.n	8007b3a <memcpy+0xe>
 8007b46:	bd10      	pop	{r4, pc}

08007b48 <_free_r>:
 8007b48:	b538      	push	{r3, r4, r5, lr}
 8007b4a:	4605      	mov	r5, r0
 8007b4c:	2900      	cmp	r1, #0
 8007b4e:	d041      	beq.n	8007bd4 <_free_r+0x8c>
 8007b50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b54:	1f0c      	subs	r4, r1, #4
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	bfb8      	it	lt
 8007b5a:	18e4      	addlt	r4, r4, r3
 8007b5c:	f7ff fef8 	bl	8007950 <__malloc_lock>
 8007b60:	4a1d      	ldr	r2, [pc, #116]	@ (8007bd8 <_free_r+0x90>)
 8007b62:	6813      	ldr	r3, [r2, #0]
 8007b64:	b933      	cbnz	r3, 8007b74 <_free_r+0x2c>
 8007b66:	6063      	str	r3, [r4, #4]
 8007b68:	6014      	str	r4, [r2, #0]
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b70:	f7ff bef4 	b.w	800795c <__malloc_unlock>
 8007b74:	42a3      	cmp	r3, r4
 8007b76:	d908      	bls.n	8007b8a <_free_r+0x42>
 8007b78:	6820      	ldr	r0, [r4, #0]
 8007b7a:	1821      	adds	r1, r4, r0
 8007b7c:	428b      	cmp	r3, r1
 8007b7e:	bf01      	itttt	eq
 8007b80:	6819      	ldreq	r1, [r3, #0]
 8007b82:	685b      	ldreq	r3, [r3, #4]
 8007b84:	1809      	addeq	r1, r1, r0
 8007b86:	6021      	streq	r1, [r4, #0]
 8007b88:	e7ed      	b.n	8007b66 <_free_r+0x1e>
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	b10b      	cbz	r3, 8007b94 <_free_r+0x4c>
 8007b90:	42a3      	cmp	r3, r4
 8007b92:	d9fa      	bls.n	8007b8a <_free_r+0x42>
 8007b94:	6811      	ldr	r1, [r2, #0]
 8007b96:	1850      	adds	r0, r2, r1
 8007b98:	42a0      	cmp	r0, r4
 8007b9a:	d10b      	bne.n	8007bb4 <_free_r+0x6c>
 8007b9c:	6820      	ldr	r0, [r4, #0]
 8007b9e:	4401      	add	r1, r0
 8007ba0:	1850      	adds	r0, r2, r1
 8007ba2:	4283      	cmp	r3, r0
 8007ba4:	6011      	str	r1, [r2, #0]
 8007ba6:	d1e0      	bne.n	8007b6a <_free_r+0x22>
 8007ba8:	6818      	ldr	r0, [r3, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	6053      	str	r3, [r2, #4]
 8007bae:	4408      	add	r0, r1
 8007bb0:	6010      	str	r0, [r2, #0]
 8007bb2:	e7da      	b.n	8007b6a <_free_r+0x22>
 8007bb4:	d902      	bls.n	8007bbc <_free_r+0x74>
 8007bb6:	230c      	movs	r3, #12
 8007bb8:	602b      	str	r3, [r5, #0]
 8007bba:	e7d6      	b.n	8007b6a <_free_r+0x22>
 8007bbc:	6820      	ldr	r0, [r4, #0]
 8007bbe:	1821      	adds	r1, r4, r0
 8007bc0:	428b      	cmp	r3, r1
 8007bc2:	bf04      	itt	eq
 8007bc4:	6819      	ldreq	r1, [r3, #0]
 8007bc6:	685b      	ldreq	r3, [r3, #4]
 8007bc8:	6063      	str	r3, [r4, #4]
 8007bca:	bf04      	itt	eq
 8007bcc:	1809      	addeq	r1, r1, r0
 8007bce:	6021      	streq	r1, [r4, #0]
 8007bd0:	6054      	str	r4, [r2, #4]
 8007bd2:	e7ca      	b.n	8007b6a <_free_r+0x22>
 8007bd4:	bd38      	pop	{r3, r4, r5, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20025e20 	.word	0x20025e20

08007bdc <_malloc_usable_size_r>:
 8007bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007be0:	1f18      	subs	r0, r3, #4
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	bfbc      	itt	lt
 8007be6:	580b      	ldrlt	r3, [r1, r0]
 8007be8:	18c0      	addlt	r0, r0, r3
 8007bea:	4770      	bx	lr

08007bec <_init>:
 8007bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bee:	bf00      	nop
 8007bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bf2:	bc08      	pop	{r3}
 8007bf4:	469e      	mov	lr, r3
 8007bf6:	4770      	bx	lr

08007bf8 <_fini>:
 8007bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfa:	bf00      	nop
 8007bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bfe:	bc08      	pop	{r3}
 8007c00:	469e      	mov	lr, r3
 8007c02:	4770      	bx	lr
